
JanaticsIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08011538  08011538  00021538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011af4  08011af4  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011af4  08011af4  00021af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011afc  08011afc  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011afc  08011afc  00021afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011b04  08011b04  00021b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011b0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  20000088  08011b94  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f74  08011b94  00030f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e15  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005180  00000000  00000000  00050ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00056050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001830  00000000  00000000  00057a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007672  00000000  00000000  00059280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c6c  00000000  00000000  000608f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df57f  00000000  00000000  0008455e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163add  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f54  00000000  00000000  00163b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011520 	.word	0x08011520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08011520 	.word	0x08011520

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ESPRXDataSeg>:
uint8_t wifiusernamecheck[15] = {'N','A','V','E','E','N','P','H','O','N','E'};

void ReadOnlineData(void);

void ESPRXDataSeg(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	if(!RxCompleteU2C1WIFI){return;}
 8000588:	4bb6      	ldr	r3, [pc, #728]	; (8000864 <ESPRXDataSeg+0x2e0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	f000 82af 	beq.w	8000af0 <ESPRXDataSeg+0x56c>
	RxCompleteU2C1WIFI=0;
 8000592:	4bb4      	ldr	r3, [pc, #720]	; (8000864 <ESPRXDataSeg+0x2e0>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]

	Production_Total  	= Uart_rx_buffer[19]+(Uart_rx_buffer[18]*10)+(Uart_rx_buffer[17]*100)+(Uart_rx_buffer[16]*1000)+(Uart_rx_buffer[15]*10000);//Production
 8000598:	4bb3      	ldr	r3, [pc, #716]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800059a:	7cdb      	ldrb	r3, [r3, #19]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4bb2      	ldr	r3, [pc, #712]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005a0:	7c5b      	ldrb	r3, [r3, #17]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	0089      	lsls	r1, r1, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	4619      	mov	r1, r3
 80005ac:	0088      	lsls	r0, r1, #2
 80005ae:	4619      	mov	r1, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	b299      	uxth	r1, r3
 80005b8:	4bab      	ldr	r3, [pc, #684]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005ba:	7c9b      	ldrb	r3, [r3, #18]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	0080      	lsls	r0, r0, #2
 80005c2:	4403      	add	r3, r0
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	440b      	add	r3, r1
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4413      	add	r3, r2
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4ba5      	ldr	r3, [pc, #660]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005d2:	7bdb      	ldrb	r3, [r3, #15]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	0149      	lsls	r1, r1, #5
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	0089      	lsls	r1, r1, #2
 80005de:	440b      	add	r3, r1
 80005e0:	4619      	mov	r1, r3
 80005e2:	0088      	lsls	r0, r1, #2
 80005e4:	4619      	mov	r1, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	440b      	add	r3, r1
 80005ea:	011b      	lsls	r3, r3, #4
 80005ec:	b299      	uxth	r1, r3
 80005ee:	4b9e      	ldr	r3, [pc, #632]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005f0:	7c1b      	ldrb	r3, [r3, #16]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	0140      	lsls	r0, r0, #5
 80005f8:	1ac0      	subs	r0, r0, r3
 80005fa:	0080      	lsls	r0, r0, #2
 80005fc:	4403      	add	r3, r0
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	440b      	add	r3, r1
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b98      	ldr	r3, [pc, #608]	; (800086c <ESPRXDataSeg+0x2e8>)
 800060c:	801a      	strh	r2, [r3, #0]
	Rejection_Total 	= Uart_rx_buffer[24]+(Uart_rx_buffer[23]*10)+(Uart_rx_buffer[22]*100)+(Uart_rx_buffer[21]*1000)+(Uart_rx_buffer[20]*10000);//Rejection
 800060e:	4b96      	ldr	r3, [pc, #600]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000610:	7e1b      	ldrb	r3, [r3, #24]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b94      	ldr	r3, [pc, #592]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000616:	7d9b      	ldrb	r3, [r3, #22]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	0089      	lsls	r1, r1, #2
 800061e:	440b      	add	r3, r1
 8000620:	4619      	mov	r1, r3
 8000622:	0088      	lsls	r0, r1, #2
 8000624:	4619      	mov	r1, r3
 8000626:	4603      	mov	r3, r0
 8000628:	440b      	add	r3, r1
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	b299      	uxth	r1, r3
 800062e:	4b8e      	ldr	r3, [pc, #568]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000630:	7ddb      	ldrb	r3, [r3, #23]
 8000632:	b29b      	uxth	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	0080      	lsls	r0, r0, #2
 8000638:	4403      	add	r3, r0
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	440b      	add	r3, r1
 8000640:	b29b      	uxth	r3, r3
 8000642:	4413      	add	r3, r2
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b88      	ldr	r3, [pc, #544]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000648:	7d1b      	ldrb	r3, [r3, #20]
 800064a:	b29b      	uxth	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	0149      	lsls	r1, r1, #5
 8000650:	1ac9      	subs	r1, r1, r3
 8000652:	0089      	lsls	r1, r1, #2
 8000654:	440b      	add	r3, r1
 8000656:	4619      	mov	r1, r3
 8000658:	0088      	lsls	r0, r1, #2
 800065a:	4619      	mov	r1, r3
 800065c:	4603      	mov	r3, r0
 800065e:	440b      	add	r3, r1
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b299      	uxth	r1, r3
 8000664:	4b80      	ldr	r3, [pc, #512]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000666:	7d5b      	ldrb	r3, [r3, #21]
 8000668:	b29b      	uxth	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	0140      	lsls	r0, r0, #5
 800066e:	1ac0      	subs	r0, r0, r3
 8000670:	0080      	lsls	r0, r0, #2
 8000672:	4403      	add	r3, r0
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	b29b      	uxth	r3, r3
 8000678:	440b      	add	r3, r1
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <ESPRXDataSeg+0x2ec>)
 8000682:	801a      	strh	r2, [r3, #0]
	batchTargetquantity = Uart_rx_buffer[29]+(Uart_rx_buffer[28]*10)+(Uart_rx_buffer[27]*100)+(Uart_rx_buffer[26]*1000)+(Uart_rx_buffer[25]*10000); //
 8000684:	4b78      	ldr	r3, [pc, #480]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000686:	7f5b      	ldrb	r3, [r3, #29]
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b77      	ldr	r3, [pc, #476]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800068c:	7edb      	ldrb	r3, [r3, #27]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	0089      	lsls	r1, r1, #2
 8000694:	440b      	add	r3, r1
 8000696:	4619      	mov	r1, r3
 8000698:	0088      	lsls	r0, r1, #2
 800069a:	4619      	mov	r1, r3
 800069c:	4603      	mov	r3, r0
 800069e:	440b      	add	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	b299      	uxth	r1, r3
 80006a4:	4b70      	ldr	r3, [pc, #448]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006a6:	7f1b      	ldrb	r3, [r3, #28]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	0080      	lsls	r0, r0, #2
 80006ae:	4403      	add	r3, r0
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	440b      	add	r3, r1
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4413      	add	r3, r2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b6a      	ldr	r3, [pc, #424]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006be:	7e5b      	ldrb	r3, [r3, #25]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	0149      	lsls	r1, r1, #5
 80006c6:	1ac9      	subs	r1, r1, r3
 80006c8:	0089      	lsls	r1, r1, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	0088      	lsls	r0, r1, #2
 80006d0:	4619      	mov	r1, r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	440b      	add	r3, r1
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b299      	uxth	r1, r3
 80006da:	4b63      	ldr	r3, [pc, #396]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006dc:	7e9b      	ldrb	r3, [r3, #26]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	0140      	lsls	r0, r0, #5
 80006e4:	1ac0      	subs	r0, r0, r3
 80006e6:	0080      	lsls	r0, r0, #2
 80006e8:	4403      	add	r3, r0
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	440b      	add	r3, r1
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <ESPRXDataSeg+0x2f0>)
 80006f8:	801a      	strh	r2, [r3, #0]
	temperateSet 		= Uart_rx_buffer[32]+(Uart_rx_buffer[31]*10)+(Uart_rx_buffer[30]*100);//temperateSet
 80006fa:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b59      	ldr	r3, [pc, #356]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000704:	7f9b      	ldrb	r3, [r3, #30]
 8000706:	b29b      	uxth	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	0089      	lsls	r1, r1, #2
 800070c:	440b      	add	r3, r1
 800070e:	4619      	mov	r1, r3
 8000710:	0088      	lsls	r0, r1, #2
 8000712:	4619      	mov	r1, r3
 8000714:	4603      	mov	r3, r0
 8000716:	440b      	add	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	b299      	uxth	r1, r3
 800071c:	4b52      	ldr	r3, [pc, #328]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800071e:	7fdb      	ldrb	r3, [r3, #31]
 8000720:	b29b      	uxth	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	0080      	lsls	r0, r0, #2
 8000726:	4403      	add	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	440b      	add	r3, r1
 800072e:	b29b      	uxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b50      	ldr	r3, [pc, #320]	; (8000878 <ESPRXDataSeg+0x2f4>)
 8000736:	801a      	strh	r2, [r3, #0]
	temperateSetHigh 	= Uart_rx_buffer[35]+(Uart_rx_buffer[34]*10)+(Uart_rx_buffer[33]*100);//temperateSetHigh
 8000738:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800073a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000746:	b29b      	uxth	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	0089      	lsls	r1, r1, #2
 800074c:	440b      	add	r3, r1
 800074e:	4619      	mov	r1, r3
 8000750:	0088      	lsls	r0, r1, #2
 8000752:	4619      	mov	r1, r3
 8000754:	4603      	mov	r3, r0
 8000756:	440b      	add	r3, r1
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	b299      	uxth	r1, r3
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800075e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000762:	b29b      	uxth	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	0080      	lsls	r0, r0, #2
 8000768:	4403      	add	r3, r0
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	440b      	add	r3, r1
 8000770:	b29b      	uxth	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <ESPRXDataSeg+0x2f8>)
 8000778:	801a      	strh	r2, [r3, #0]
	temperateSetLow 	= Uart_rx_buffer[38]+(Uart_rx_buffer[37]*10)+(Uart_rx_buffer[36]*100);//temperateSetLow
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800077c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000788:	b29b      	uxth	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	0089      	lsls	r1, r1, #2
 800078e:	440b      	add	r3, r1
 8000790:	4619      	mov	r1, r3
 8000792:	0088      	lsls	r0, r1, #2
 8000794:	4619      	mov	r1, r3
 8000796:	4603      	mov	r3, r0
 8000798:	440b      	add	r3, r1
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	b299      	uxth	r1, r3
 800079e:	4b32      	ldr	r3, [pc, #200]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	0080      	lsls	r0, r0, #2
 80007aa:	4403      	add	r3, r0
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	440b      	add	r3, r1
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <ESPRXDataSeg+0x2fc>)
 80007ba:	801a      	strh	r2, [r3, #0]
	requirementId	 	= Uart_rx_buffer[44]+(Uart_rx_buffer[43]*10)+(Uart_rx_buffer[42]*100)+(Uart_rx_buffer[41]*1000)+(Uart_rx_buffer[40]*10000)+(Uart_rx_buffer[39]*100000);//requirementId
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	0089      	lsls	r1, r1, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	4619      	mov	r1, r3
 80007d4:	0088      	lsls	r0, r1, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	4603      	mov	r3, r0
 80007da:	440b      	add	r3, r1
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	b299      	uxth	r1, r3
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	0080      	lsls	r0, r0, #2
 80007ec:	4403      	add	r3, r0
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	440b      	add	r3, r1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000800:	b29b      	uxth	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	0149      	lsls	r1, r1, #5
 8000806:	1ac9      	subs	r1, r1, r3
 8000808:	0089      	lsls	r1, r1, #2
 800080a:	440b      	add	r3, r1
 800080c:	4619      	mov	r1, r3
 800080e:	0088      	lsls	r0, r1, #2
 8000810:	4619      	mov	r1, r3
 8000812:	4603      	mov	r3, r0
 8000814:	440b      	add	r3, r1
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	b299      	uxth	r1, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800081c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000820:	b29b      	uxth	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	0140      	lsls	r0, r0, #5
 8000826:	1ac0      	subs	r0, r0, r3
 8000828:	0080      	lsls	r0, r0, #2
 800082a:	4403      	add	r3, r0
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	b29b      	uxth	r3, r3
 8000830:	440b      	add	r3, r1
 8000832:	b29b      	uxth	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800083a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800083e:	b29b      	uxth	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	0049      	lsls	r1, r1, #1
 8000844:	4419      	add	r1, r3
 8000846:	4608      	mov	r0, r1
 8000848:	0100      	lsls	r0, r0, #4
 800084a:	1a41      	subs	r1, r0, r1
 800084c:	00c9      	lsls	r1, r1, #3
 800084e:	1acb      	subs	r3, r1, r3
 8000850:	4619      	mov	r1, r3
 8000852:	0089      	lsls	r1, r1, #2
 8000854:	1acb      	subs	r3, r1, r3
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	b29b      	uxth	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <ESPRXDataSeg+0x300>)
 8000860:	801a      	strh	r2, [r3, #0]
 8000862:	e011      	b.n	8000888 <ESPRXDataSeg+0x304>
 8000864:	200000ef 	.word	0x200000ef
 8000868:	200000a4 	.word	0x200000a4
 800086c:	200000fe 	.word	0x200000fe
 8000870:	20000100 	.word	0x20000100
 8000874:	20000102 	.word	0x20000102
 8000878:	20000104 	.word	0x20000104
 800087c:	20000106 	.word	0x20000106
 8000880:	20000108 	.word	0x20000108
 8000884:	2000010a 	.word	0x2000010a

	batchNumber  	 = Uart_rx_buffer[57]+(Uart_rx_buffer[56]*10)+(Uart_rx_buffer[55]*100);
 8000888:	4b9d      	ldr	r3, [pc, #628]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800088a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b9b      	ldr	r3, [pc, #620]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000892:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000896:	b29b      	uxth	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	0089      	lsls	r1, r1, #2
 800089c:	440b      	add	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	0088      	lsls	r0, r1, #2
 80008a2:	4619      	mov	r1, r3
 80008a4:	4603      	mov	r3, r0
 80008a6:	440b      	add	r3, r1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	b299      	uxth	r1, r3
 80008ac:	4b94      	ldr	r3, [pc, #592]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	0080      	lsls	r0, r0, #2
 80008b8:	4403      	add	r3, r0
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	b29b      	uxth	r3, r3
 80008be:	440b      	add	r3, r1
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b8f      	ldr	r3, [pc, #572]	; (8000b04 <ESPRXDataSeg+0x580>)
 80008c8:	801a      	strh	r2, [r3, #0]
	resetStatus  	 = Uart_rx_buffer[59]+(Uart_rx_buffer[58]*10);
 80008ca:	4b8d      	ldr	r3, [pc, #564]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008cc:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80008d0:	4b8b      	ldr	r3, [pc, #556]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008d6:	4619      	mov	r1, r3
 80008d8:	0089      	lsls	r1, r1, #2
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b88      	ldr	r3, [pc, #544]	; (8000b08 <ESPRXDataSeg+0x584>)
 80008e6:	701a      	strb	r2, [r3, #0]
	startStopStatus  = Uart_rx_buffer[61]+(Uart_rx_buffer[60]*10);
 80008e8:	4b85      	ldr	r3, [pc, #532]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008ea:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008ee:	4b84      	ldr	r3, [pc, #528]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f4:	4619      	mov	r1, r3
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b82      	ldr	r3, [pc, #520]	; (8000b0c <ESPRXDataSeg+0x588>)
 8000904:	701a      	strb	r2, [r3, #0]
	reasonEntryStatus  = Uart_rx_buffer[63]+(Uart_rx_buffer[62]*10);
 8000906:	4b7e      	ldr	r3, [pc, #504]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000908:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800090c:	4b7c      	ldr	r3, [pc, #496]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800090e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000912:	4619      	mov	r1, r3
 8000914:	0089      	lsls	r1, r1, #2
 8000916:	440b      	add	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <ESPRXDataSeg+0x58c>)
 8000922:	701a      	strb	r2, [r3, #0]
	//Date,Month,Year
	SW_Date = Uart_rx_buffer[4]+(Uart_rx_buffer[3]*10);//SW_Date
 8000924:	4b76      	ldr	r3, [pc, #472]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000926:	791a      	ldrb	r2, [r3, #4]
 8000928:	4b75      	ldr	r3, [pc, #468]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	4619      	mov	r1, r3
 800092e:	0089      	lsls	r1, r1, #2
 8000930:	440b      	add	r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b76      	ldr	r3, [pc, #472]	; (8000b14 <ESPRXDataSeg+0x590>)
 800093c:	701a      	strb	r2, [r3, #0]
	SW_Month = Uart_rx_buffer[6]+(Uart_rx_buffer[5]*10);//SW_Month
 800093e:	4b70      	ldr	r3, [pc, #448]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000940:	799a      	ldrb	r2, [r3, #6]
 8000942:	4b6f      	ldr	r3, [pc, #444]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000944:	795b      	ldrb	r3, [r3, #5]
 8000946:	4619      	mov	r1, r3
 8000948:	0089      	lsls	r1, r1, #2
 800094a:	440b      	add	r3, r1
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4413      	add	r3, r2
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b70      	ldr	r3, [pc, #448]	; (8000b18 <ESPRXDataSeg+0x594>)
 8000956:	701a      	strb	r2, [r3, #0]
	SW_Year = Uart_rx_buffer[8]+(Uart_rx_buffer[7]*10);//SW_Year
 8000958:	4b69      	ldr	r3, [pc, #420]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800095a:	7a1a      	ldrb	r2, [r3, #8]
 800095c:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	4619      	mov	r1, r3
 8000962:	0089      	lsls	r1, r1, #2
 8000964:	440b      	add	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4413      	add	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b6b      	ldr	r3, [pc, #428]	; (8000b1c <ESPRXDataSeg+0x598>)
 8000970:	701a      	strb	r2, [r3, #0]
	SW_Hour = Uart_rx_buffer[10]+(Uart_rx_buffer[9]*10);//SW_Hour
 8000972:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000974:	7a9a      	ldrb	r2, [r3, #10]
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000978:	7a5b      	ldrb	r3, [r3, #9]
 800097a:	4619      	mov	r1, r3
 800097c:	0089      	lsls	r1, r1, #2
 800097e:	440b      	add	r3, r1
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <ESPRXDataSeg+0x59c>)
 800098a:	701a      	strb	r2, [r3, #0]
	SW_Minute = Uart_rx_buffer[12]+(Uart_rx_buffer[11]*10);//SW_Minute
 800098c:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800098e:	7b1a      	ldrb	r2, [r3, #12]
 8000990:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000992:	7adb      	ldrb	r3, [r3, #11]
 8000994:	4619      	mov	r1, r3
 8000996:	0089      	lsls	r1, r1, #2
 8000998:	440b      	add	r3, r1
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b60      	ldr	r3, [pc, #384]	; (8000b24 <ESPRXDataSeg+0x5a0>)
 80009a4:	701a      	strb	r2, [r3, #0]

	itemNumber[0] = Uart_rx_buffer[45];
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009a8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80009ac:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009ae:	701a      	strb	r2, [r3, #0]
	itemNumber[1] = Uart_rx_buffer[46];
 80009b0:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009b8:	705a      	strb	r2, [r3, #1]
	itemNumber[0] = Uart_rx_buffer[47];
 80009ba:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009bc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80009c0:	4b59      	ldr	r3, [pc, #356]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009c2:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[48];
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80009ca:	4b57      	ldr	r3, [pc, #348]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009cc:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[49];
 80009ce:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009d0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80009d4:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009d6:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[50];
 80009d8:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009da:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80009de:	4b52      	ldr	r3, [pc, #328]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009e0:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[51];
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009e4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80009e8:	4b4f      	ldr	r3, [pc, #316]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009ea:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[52];
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009ee:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80009f2:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009f4:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[53];
 80009f6:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009f8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009fe:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[54];
 8000a00:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000a02:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 8000a08:	701a      	strb	r2, [r3, #0]

	commFeedbackFlag = 1;
 8000a0a:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <ESPRXDataSeg+0x5a8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
	if((esp8266IpObtained==0)&&(ipConfimation==1)){
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <ESPRXDataSeg+0x5ac>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d16e      	bne.n	8000af6 <ESPRXDataSeg+0x572>
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <ESPRXDataSeg+0x5b0>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d16a      	bne.n	8000af6 <ESPRXDataSeg+0x572>
		for(as = 25;as<= 41;as++){
 8000a20:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a22:	2219      	movs	r2, #25
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e020      	b.n	8000a6a <ESPRXDataSeg+0x4e6>
			if(tempbuff[as] == 34)//"
 8000a28:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000a30:	5c9b      	ldrb	r3, [r3, r2]
 8000a32:	2b22      	cmp	r3, #34	; 0x22
 8000a34:	d103      	bne.n	8000a3e <ESPRXDataSeg+0x4ba>
			{esp8266IpObtained=1;break;}
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <ESPRXDataSeg+0x5ac>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e019      	b.n	8000a72 <ESPRXDataSeg+0x4ee>
			++len_espIpAddress;
 8000a3e:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <ESPRXDataSeg+0x5bc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <ESPRXDataSeg+0x5bc>)
 8000a48:	701a      	strb	r2, [r3, #0]
			espIpAddress[as-25]= tempbuff[as];
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b19      	subs	r3, #25
 8000a56:	4a39      	ldr	r2, [pc, #228]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000a58:	5c51      	ldrb	r1, [r2, r1]
 8000a5a:	4a3a      	ldr	r2, [pc, #232]	; (8000b44 <ESPRXDataSeg+0x5c0>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
		for(as = 25;as<= 41;as++){
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b29      	cmp	r3, #41	; 0x29
 8000a70:	d9da      	bls.n	8000a28 <ESPRXDataSeg+0x4a4>
		}
		for(am = 25;am<=100;am++ ){
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a74:	2219      	movs	r2, #25
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e012      	b.n	8000aa0 <ESPRXDataSeg+0x51c>
			if(tempbuff[am] == 43){
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000a82:	5c9b      	ldrb	r3, [r3, r2]
 8000a84:	2b2b      	cmp	r3, #43	; 0x2b
 8000a86:	d105      	bne.n	8000a94 <ESPRXDataSeg+0x510>
				indexMac = am+15;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	330f      	adds	r3, #15
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <ESPRXDataSeg+0x5c8>)
 8000a92:	701a      	strb	r2, [r3, #0]
		for(am = 25;am<=100;am++ ){
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b64      	cmp	r3, #100	; 0x64
 8000aa6:	d9e8      	bls.n	8000a7a <ESPRXDataSeg+0x4f6>
			}
		}
		for(am = indexMac;am<= 100;am++){
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <ESPRXDataSeg+0x5c8>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e019      	b.n	8000ae6 <ESPRXDataSeg+0x562>
			if(tempbuff[am] == 34){break;}
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000aba:	5c9b      	ldrb	r3, [r3, r2]
 8000abc:	2b22      	cmp	r3, #34	; 0x22
 8000abe:	d019      	beq.n	8000af4 <ESPRXDataSeg+0x570>
			espMacAdress[am-indexMac] =tempbuff[am];
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <ESPRXDataSeg+0x5c8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000ad4:	5c51      	ldrb	r1, [r2, r1]
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <ESPRXDataSeg+0x5cc>)
 8000ad8:	54d1      	strb	r1, [r2, r3]
		for(am = indexMac;am<= 100;am++){
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d9e1      	bls.n	8000ab2 <ESPRXDataSeg+0x52e>
 8000aee:	e002      	b.n	8000af6 <ESPRXDataSeg+0x572>
	if(!RxCompleteU2C1WIFI){return;}
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <ESPRXDataSeg+0x572>
			if(tempbuff[am] == 34){break;}
 8000af4:	bf00      	nop
	}




}
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000a4 	.word	0x200000a4
 8000b04:	2000010c 	.word	0x2000010c
 8000b08:	2000010e 	.word	0x2000010e
 8000b0c:	2000010f 	.word	0x2000010f
 8000b10:	20000110 	.word	0x20000110
 8000b14:	200000f3 	.word	0x200000f3
 8000b18:	200000f4 	.word	0x200000f4
 8000b1c:	200000f5 	.word	0x200000f5
 8000b20:	200000f1 	.word	0x200000f1
 8000b24:	200000f2 	.word	0x200000f2
 8000b28:	20000114 	.word	0x20000114
 8000b2c:	20000111 	.word	0x20000111
 8000b30:	20000149 	.word	0x20000149
 8000b34:	200001b0 	.word	0x200001b0
 8000b38:	2000011f 	.word	0x2000011f
 8000b3c:	2000014c 	.word	0x2000014c
 8000b40:	20000148 	.word	0x20000148
 8000b44:	20000124 	.word	0x20000124
 8000b48:	20000120 	.word	0x20000120
 8000b4c:	20000121 	.word	0x20000121
 8000b50:	20000134 	.word	0x20000134

08000b54 <ESPRxDecoder>:
	productionhysNegSetOL   = FlashReadOLdata[9];
}


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	f201 81cd 	bhi.w	8001f08 <ESPRxDecoder+0x13b4>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <ESPRxDecoder+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b99 	.word	0x08000b99
 8000b78:	08000caf 	.word	0x08000caf
 8000b7c:	08000cff 	.word	0x08000cff
 8000b80:	08000f65 	.word	0x08000f65
 8000b84:	08000fa3 	.word	0x08000fa3
 8000b88:	080011bb 	.word	0x080011bb
 8000b8c:	080011e1 	.word	0x080011e1
 8000b90:	08001e7f 	.word	0x08001e7f
 8000b94:	08001eb5 	.word	0x08001eb5
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b4f      	cmp	r3, #79	; 0x4f
 8000b9c:	d107      	bne.n	8000bae <ESPRxDecoder+0x5a>
 8000b9e:	4b92      	ldr	r3, [pc, #584]	; (8000de8 <ESPRxDecoder+0x294>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d103      	bne.n	8000bae <ESPRxDecoder+0x5a>
			 {
			 	bufferptr=1;
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <ESPRxDecoder+0x294>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e011      	b.n	8000bd2 <ESPRxDecoder+0x7e>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b4b      	cmp	r3, #75	; 0x4b
 8000bb2:	d10e      	bne.n	8000bd2 <ESPRxDecoder+0x7e>
 8000bb4:	4b8c      	ldr	r3, [pc, #560]	; (8000de8 <ESPRxDecoder+0x294>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10a      	bne.n	8000bd2 <ESPRxDecoder+0x7e>
			 {
			 	bufferptr=0;
 8000bbc:	4b8a      	ldr	r3, [pc, #552]	; (8000de8 <ESPRxDecoder+0x294>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000bc6:	4b89      	ldr	r3, [pc, #548]	; (8000dec <ESPRxDecoder+0x298>)
 8000bc8:	221e      	movs	r2, #30
 8000bca:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 8000bcc:	4b88      	ldr	r3, [pc, #544]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000bd6:	d107      	bne.n	8000be8 <ESPRxDecoder+0x94>
 8000bd8:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <ESPRxDecoder+0x294>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <ESPRxDecoder+0x94>
			 {
			 	bufferptr=1;
 8000be0:	4b81      	ldr	r3, [pc, #516]	; (8000de8 <ESPRxDecoder+0x294>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e060      	b.n	8000caa <ESPRxDecoder+0x156>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b6f      	cmp	r3, #111	; 0x6f
 8000bec:	d107      	bne.n	8000bfe <ESPRxDecoder+0xaa>
 8000bee:	4b7e      	ldr	r3, [pc, #504]	; (8000de8 <ESPRxDecoder+0x294>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d103      	bne.n	8000bfe <ESPRxDecoder+0xaa>
			 {
			 	bufferptr=2;
 8000bf6:	4b7c      	ldr	r3, [pc, #496]	; (8000de8 <ESPRxDecoder+0x294>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	e055      	b.n	8000caa <ESPRxDecoder+0x156>
			 }
			 else if(bufferptr==2)
 8000bfe:	4b7a      	ldr	r3, [pc, #488]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d104      	bne.n	8000c10 <ESPRxDecoder+0xbc>
			 {
			 	bufferptr=3;
 8000c06:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 8000c0c:	f001 b97e 	b.w	8001f0c <ESPRxDecoder+0x13b8>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b63      	cmp	r3, #99	; 0x63
 8000c14:	d107      	bne.n	8000c26 <ESPRxDecoder+0xd2>
 8000c16:	4b74      	ldr	r3, [pc, #464]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d103      	bne.n	8000c26 <ESPRxDecoder+0xd2>
			 	bufferptr=4;
 8000c1e:	4b72      	ldr	r3, [pc, #456]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e041      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b68      	cmp	r3, #104	; 0x68
 8000c2a:	d107      	bne.n	8000c3c <ESPRxDecoder+0xe8>
 8000c2c:	4b6e      	ldr	r3, [pc, #440]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d103      	bne.n	8000c3c <ESPRxDecoder+0xe8>
			 	bufferptr=5;
 8000c34:	4b6c      	ldr	r3, [pc, #432]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c36:	2205      	movs	r2, #5
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e036      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b61      	cmp	r3, #97	; 0x61
 8000c40:	d107      	bne.n	8000c52 <ESPRxDecoder+0xfe>
 8000c42:	4b69      	ldr	r3, [pc, #420]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d103      	bne.n	8000c52 <ESPRxDecoder+0xfe>
			 	bufferptr=6;
 8000c4a:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e02b      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b6e      	cmp	r3, #110	; 0x6e
 8000c56:	d107      	bne.n	8000c68 <ESPRxDecoder+0x114>
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d103      	bne.n	8000c68 <ESPRxDecoder+0x114>
			 	bufferptr=7;
 8000c60:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e020      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b67      	cmp	r3, #103	; 0x67
 8000c6c:	d107      	bne.n	8000c7e <ESPRxDecoder+0x12a>
 8000c6e:	4b5e      	ldr	r3, [pc, #376]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d103      	bne.n	8000c7e <ESPRxDecoder+0x12a>
			 	bufferptr=8;
 8000c76:	4b5c      	ldr	r3, [pc, #368]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c78:	2208      	movs	r2, #8
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e015      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b65      	cmp	r3, #101	; 0x65
 8000c82:	f041 8143 	bne.w	8001f0c <ESPRxDecoder+0x13b8>
 8000c86:	4b58      	ldr	r3, [pc, #352]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	f041 813e 	bne.w	8001f0c <ESPRxDecoder+0x13b8>
			 	bufferptr=0;
 8000c90:	4b55      	ldr	r3, [pc, #340]	; (8000de8 <ESPRxDecoder+0x294>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <ESPRxDecoder+0x298>)
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 8000ca0:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	f001 b931 	b.w	8001f0c <ESPRxDecoder+0x13b8>
 8000caa:	f001 b92f 	b.w	8001f0c <ESPRxDecoder+0x13b8>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b4f      	cmp	r3, #79	; 0x4f
 8000cb2:	d108      	bne.n	8000cc6 <ESPRxDecoder+0x172>
 8000cb4:	4b4c      	ldr	r3, [pc, #304]	; (8000de8 <ESPRxDecoder+0x294>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d104      	bne.n	8000cc6 <ESPRxDecoder+0x172>
			 {
			 	bufferptr=1;
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <ESPRxDecoder+0x294>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
				if(esp8266IpObtained==0){
					wifi_command=121;}
				else{
					wifi_command=49;}
			 }
		break;
 8000cc2:	f001 b925 	b.w	8001f10 <ESPRxDecoder+0x13bc>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b4b      	cmp	r3, #75	; 0x4b
 8000cca:	f041 8121 	bne.w	8001f10 <ESPRxDecoder+0x13bc>
 8000cce:	4b46      	ldr	r3, [pc, #280]	; (8000de8 <ESPRxDecoder+0x294>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f041 811c 	bne.w	8001f10 <ESPRxDecoder+0x13bc>
			 	bufferptr=0;
 8000cd8:	4b43      	ldr	r3, [pc, #268]	; (8000de8 <ESPRxDecoder+0x294>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71bb      	strb	r3, [r7, #6]
				if(esp8266IpObtained==0){
 8000ce2:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <ESPRxDecoder+0x2a0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <ESPRxDecoder+0x1a0>
					wifi_command=121;}
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <ESPRxDecoder+0x298>)
 8000cec:	2279      	movs	r2, #121	; 0x79
 8000cee:	701a      	strb	r2, [r3, #0]
		break;
 8000cf0:	f001 b90e 	b.w	8001f10 <ESPRxDecoder+0x13bc>
					wifi_command=49;}
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <ESPRxDecoder+0x298>)
 8000cf6:	2231      	movs	r2, #49	; 0x31
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	f001 b909 	b.w	8001f10 <ESPRxDecoder+0x13bc>
		case 3:
			//wifiusernamecheck[15] "define the username at top"
			//
			if((Rxwifi_data== wifiusernamecheck[0])&&(bufferptr==0))
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d107      	bne.n	8000d18 <ESPRxDecoder+0x1c4>
 8000d08:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d103      	bne.n	8000d18 <ESPRxDecoder+0x1c4>
			 {
				bufferptr=1;
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e0d7      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[1])&&(bufferptr==1))
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d107      	bne.n	8000d32 <ESPRxDecoder+0x1de>
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d103      	bne.n	8000d32 <ESPRxDecoder+0x1de>
			 {
				bufferptr=2;
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e0ca      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[2])&&(bufferptr==2))
 8000d32:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	79fa      	ldrb	r2, [r7, #7]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d107      	bne.n	8000d4c <ESPRxDecoder+0x1f8>
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d103      	bne.n	8000d4c <ESPRxDecoder+0x1f8>
			 {
				bufferptr=3;
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d46:	2203      	movs	r2, #3
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e0bd      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }

			 else if((Rxwifi_data== wifiusernamecheck[3])&&(bufferptr==3))
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d4e:	78db      	ldrb	r3, [r3, #3]
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d107      	bne.n	8000d66 <ESPRxDecoder+0x212>
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d103      	bne.n	8000d66 <ESPRxDecoder+0x212>
			 {
				bufferptr=4;
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e0b0      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[4])&&(bufferptr==4))
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d107      	bne.n	8000d80 <ESPRxDecoder+0x22c>
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d103      	bne.n	8000d80 <ESPRxDecoder+0x22c>
			 {
				bufferptr=5;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d7a:	2205      	movs	r2, #5
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e0a3      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[5])&&(bufferptr==5))
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d82:	795b      	ldrb	r3, [r3, #5]
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d107      	bne.n	8000d9a <ESPRxDecoder+0x246>
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d103      	bne.n	8000d9a <ESPRxDecoder+0x246>
			 {
				bufferptr=6;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <ESPRxDecoder+0x294>)
 8000d94:	2206      	movs	r2, #6
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e096      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[6])&&(bufferptr==6))
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d107      	bne.n	8000db4 <ESPRxDecoder+0x260>
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <ESPRxDecoder+0x294>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b06      	cmp	r3, #6
 8000daa:	d103      	bne.n	8000db4 <ESPRxDecoder+0x260>
			 {
				bufferptr=7;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <ESPRxDecoder+0x294>)
 8000dae:	2207      	movs	r2, #7
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e089      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[7])&&(bufferptr==7))
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000db6:	79db      	ldrb	r3, [r3, #7]
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d107      	bne.n	8000dce <ESPRxDecoder+0x27a>
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <ESPRxDecoder+0x294>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	d103      	bne.n	8000dce <ESPRxDecoder+0x27a>
			 {
				bufferptr=8;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <ESPRxDecoder+0x294>)
 8000dc8:	2208      	movs	r2, #8
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e07c      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[8])&&(bufferptr==8))
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000dd0:	7a1b      	ldrb	r3, [r3, #8]
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d111      	bne.n	8000dfc <ESPRxDecoder+0x2a8>
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <ESPRxDecoder+0x294>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d10d      	bne.n	8000dfc <ESPRxDecoder+0x2a8>
			 {
				bufferptr=9;
 8000de0:	4b01      	ldr	r3, [pc, #4]	; (8000de8 <ESPRxDecoder+0x294>)
 8000de2:	2209      	movs	r2, #9
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e06f      	b.n	8000ec8 <ESPRxDecoder+0x374>
 8000de8:	20000bec 	.word	0x20000bec
 8000dec:	20000a25 	.word	0x20000a25
 8000df0:	20000bee 	.word	0x20000bee
 8000df4:	20000149 	.word	0x20000149
 8000df8:	20000004 	.word	0x20000004
			 }
			 else if((Rxwifi_data== wifiusernamecheck[9])&&(bufferptr==9))
 8000dfc:	4b8a      	ldr	r3, [pc, #552]	; (8001028 <ESPRxDecoder+0x4d4>)
 8000dfe:	7a5b      	ldrb	r3, [r3, #9]
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d115      	bne.n	8000e32 <ESPRxDecoder+0x2de>
 8000e06:	4b89      	ldr	r3, [pc, #548]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b09      	cmp	r3, #9
 8000e0c:	d111      	bne.n	8000e32 <ESPRxDecoder+0x2de>
			 {
				 bufferptr=0;
 8000e0e:	4b87      	ldr	r3, [pc, #540]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000e14:	4b86      	ldr	r3, [pc, #536]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000e1e:	4b85      	ldr	r3, [pc, #532]	; (8001034 <ESPRxDecoder+0x4e0>)
 8000e20:	2246      	movs	r2, #70	; 0x46
 8000e22:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000e24:	4b84      	ldr	r3, [pc, #528]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000e2a:	4b84      	ldr	r3, [pc, #528]	; (800103c <ESPRxDecoder+0x4e8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e04a      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[10])&&(bufferptr==10))
 8000e32:	4b7d      	ldr	r3, [pc, #500]	; (8001028 <ESPRxDecoder+0x4d4>)
 8000e34:	7a9b      	ldrb	r3, [r3, #10]
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d107      	bne.n	8000e4c <ESPRxDecoder+0x2f8>
 8000e3c:	4b7b      	ldr	r3, [pc, #492]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	d103      	bne.n	8000e4c <ESPRxDecoder+0x2f8>
			 {
				bufferptr=11;
 8000e44:	4b79      	ldr	r3, [pc, #484]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e46:	220b      	movs	r2, #11
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e03d      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[11])&&(bufferptr==11))
 8000e4c:	4b76      	ldr	r3, [pc, #472]	; (8001028 <ESPRxDecoder+0x4d4>)
 8000e4e:	7adb      	ldrb	r3, [r3, #11]
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d115      	bne.n	8000e82 <ESPRxDecoder+0x32e>
 8000e56:	4b75      	ldr	r3, [pc, #468]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b0b      	cmp	r3, #11
 8000e5c:	d111      	bne.n	8000e82 <ESPRxDecoder+0x32e>
			 {
				//bufferptr=12;
				bufferptr=0;
 8000e5e:	4b73      	ldr	r3, [pc, #460]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000e64:	4b72      	ldr	r3, [pc, #456]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000e6e:	4b71      	ldr	r3, [pc, #452]	; (8001034 <ESPRxDecoder+0x4e0>)
 8000e70:	2246      	movs	r2, #70	; 0x46
 8000e72:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000e74:	4b70      	ldr	r3, [pc, #448]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000e7a:	4b70      	ldr	r3, [pc, #448]	; (800103c <ESPRxDecoder+0x4e8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e022      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data=='A')&&(bufferptr==12))
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b41      	cmp	r3, #65	; 0x41
 8000e86:	d107      	bne.n	8000e98 <ESPRxDecoder+0x344>
 8000e88:	4b68      	ldr	r3, [pc, #416]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b0c      	cmp	r3, #12
 8000e8e:	d103      	bne.n	8000e98 <ESPRxDecoder+0x344>
			 {
				bufferptr=13;
 8000e90:	4b66      	ldr	r3, [pc, #408]	; (800102c <ESPRxDecoder+0x4d8>)
 8000e92:	220d      	movs	r2, #13
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e017      	b.n	8000ec8 <ESPRxDecoder+0x374>
			 }
			 else if((Rxwifi_data=='X')&&(bufferptr==13))
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b58      	cmp	r3, #88	; 0x58
 8000e9c:	d114      	bne.n	8000ec8 <ESPRxDecoder+0x374>
 8000e9e:	4b63      	ldr	r3, [pc, #396]	; (800102c <ESPRxDecoder+0x4d8>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b0d      	cmp	r3, #13
 8000ea4:	d110      	bne.n	8000ec8 <ESPRxDecoder+0x374>
				 {
				bufferptr=0;
 8000ea6:	4b61      	ldr	r3, [pc, #388]	; (800102c <ESPRxDecoder+0x4d8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000eac:	4b60      	ldr	r3, [pc, #384]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000eb6:	4b5f      	ldr	r3, [pc, #380]	; (8001034 <ESPRxDecoder+0x4e0>)
 8000eb8:	2246      	movs	r2, #70	; 0x46
 8000eba:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000ebc:	4b5e      	ldr	r3, [pc, #376]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000ec2:	4b5e      	ldr	r3, [pc, #376]	; (800103c <ESPRxDecoder+0x4e8>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 2;
			 }



			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b4e      	cmp	r3, #78	; 0x4e
 8000ecc:	d107      	bne.n	8000ede <ESPRxDecoder+0x38a>
 8000ece:	4b58      	ldr	r3, [pc, #352]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <ESPRxDecoder+0x38a>
			 {
			 	Err_bufferptr=1;
 8000ed6:	4b56      	ldr	r3, [pc, #344]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e040      	b.n	8000f60 <ESPRxDecoder+0x40c>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b6f      	cmp	r3, #111	; 0x6f
 8000ee2:	d107      	bne.n	8000ef4 <ESPRxDecoder+0x3a0>
 8000ee4:	4b52      	ldr	r3, [pc, #328]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d103      	bne.n	8000ef4 <ESPRxDecoder+0x3a0>
			 {
			 	Err_bufferptr=2;
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e035      	b.n	8000f60 <ESPRxDecoder+0x40c>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b41      	cmp	r3, #65	; 0x41
 8000ef8:	d107      	bne.n	8000f0a <ESPRxDecoder+0x3b6>
 8000efa:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d103      	bne.n	8000f0a <ESPRxDecoder+0x3b6>
			 {
			 	Err_bufferptr=3;
 8000f02:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000f04:	2203      	movs	r2, #3
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e02a      	b.n	8000f60 <ESPRxDecoder+0x40c>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b50      	cmp	r3, #80	; 0x50
 8000f0e:	f041 8001 	bne.w	8001f14 <ESPRxDecoder+0x13c0>
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	f040 87fc 	bne.w	8001f14 <ESPRxDecoder+0x13c0>
			 {
			 	Err_bufferptr=0;
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <ESPRxDecoder+0x4dc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000f22:	4b42      	ldr	r3, [pc, #264]	; (800102c <ESPRxDecoder+0x4d8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 8000f2c:	4b43      	ldr	r3, [pc, #268]	; (800103c <ESPRxDecoder+0x4e8>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d804      	bhi.n	8000f50 <ESPRxDecoder+0x3fc>
				{
				   wifi_command=50;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <ESPRxDecoder+0x4e0>)
 8000f48:	2232      	movs	r2, #50	; 0x32
 8000f4a:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 8000f4c:	f000 bfe2 	b.w	8001f14 <ESPRxDecoder+0x13c0>
				   wifi_command=10;
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <ESPRxDecoder+0x4e0>)
 8000f52:	220a      	movs	r2, #10
 8000f54:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000f56:	4b38      	ldr	r3, [pc, #224]	; (8001038 <ESPRxDecoder+0x4e4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
		break;
 8000f5c:	f000 bfda 	b.w	8001f14 <ESPRxDecoder+0x13c0>
 8000f60:	f000 bfd8 	b.w	8001f14 <ESPRxDecoder+0x13c0>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b4f      	cmp	r3, #79	; 0x4f
 8000f68:	d108      	bne.n	8000f7c <ESPRxDecoder+0x428>
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <ESPRxDecoder+0x4d8>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <ESPRxDecoder+0x428>
			 {
			 	bufferptr=1;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <ESPRxDecoder+0x4d8>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 8000f78:	f000 bfce 	b.w	8001f18 <ESPRxDecoder+0x13c4>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b4b      	cmp	r3, #75	; 0x4b
 8000f80:	f040 87ca 	bne.w	8001f18 <ESPRxDecoder+0x13c4>
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <ESPRxDecoder+0x4d8>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f040 87c5 	bne.w	8001f18 <ESPRxDecoder+0x13c4>
			 	bufferptr=0;
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <ESPRxDecoder+0x4d8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <ESPRxDecoder+0x4e0>)
 8000f9a:	2250      	movs	r2, #80	; 0x50
 8000f9c:	701a      	strb	r2, [r3, #0]
		break;
 8000f9e:	f000 bfbb 	b.w	8001f18 <ESPRxDecoder+0x13c4>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b43      	cmp	r3, #67	; 0x43
 8000fa6:	d107      	bne.n	8000fb8 <ESPRxDecoder+0x464>
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <ESPRxDecoder+0x4d8>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d103      	bne.n	8000fb8 <ESPRxDecoder+0x464>
			 {
			 	bufferptr=1;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <ESPRxDecoder+0x4d8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e05b      	b.n	8001070 <ESPRxDecoder+0x51c>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b4f      	cmp	r3, #79	; 0x4f
 8000fbc:	d107      	bne.n	8000fce <ESPRxDecoder+0x47a>
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <ESPRxDecoder+0x4d8>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d103      	bne.n	8000fce <ESPRxDecoder+0x47a>
			 {
			 	bufferptr=2;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <ESPRxDecoder+0x4d8>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e050      	b.n	8001070 <ESPRxDecoder+0x51c>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b4e      	cmp	r3, #78	; 0x4e
 8000fd2:	d107      	bne.n	8000fe4 <ESPRxDecoder+0x490>
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <ESPRxDecoder+0x4d8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d103      	bne.n	8000fe4 <ESPRxDecoder+0x490>
			 {
			 	bufferptr=3;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <ESPRxDecoder+0x4d8>)
 8000fde:	2203      	movs	r2, #3
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e045      	b.n	8001070 <ESPRxDecoder+0x51c>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b4e      	cmp	r3, #78	; 0x4e
 8000fe8:	d107      	bne.n	8000ffa <ESPRxDecoder+0x4a6>
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <ESPRxDecoder+0x4d8>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d103      	bne.n	8000ffa <ESPRxDecoder+0x4a6>
			 {
			 	bufferptr=4;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <ESPRxDecoder+0x4d8>)
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e03a      	b.n	8001070 <ESPRxDecoder+0x51c>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b45      	cmp	r3, #69	; 0x45
 8000ffe:	d107      	bne.n	8001010 <ESPRxDecoder+0x4bc>
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <ESPRxDecoder+0x4d8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b04      	cmp	r3, #4
 8001006:	d103      	bne.n	8001010 <ESPRxDecoder+0x4bc>
			 {
			 	bufferptr=5;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <ESPRxDecoder+0x4d8>)
 800100a:	2205      	movs	r2, #5
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	e02f      	b.n	8001070 <ESPRxDecoder+0x51c>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b43      	cmp	r3, #67	; 0x43
 8001014:	d114      	bne.n	8001040 <ESPRxDecoder+0x4ec>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <ESPRxDecoder+0x4d8>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d110      	bne.n	8001040 <ESPRxDecoder+0x4ec>
			 {
			 	bufferptr=6;
 800101e:	4b03      	ldr	r3, [pc, #12]	; (800102c <ESPRxDecoder+0x4d8>)
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e024      	b.n	8001070 <ESPRxDecoder+0x51c>
 8001026:	bf00      	nop
 8001028:	20000004 	.word	0x20000004
 800102c:	20000bec 	.word	0x20000bec
 8001030:	200000eb 	.word	0x200000eb
 8001034:	20000a25 	.word	0x20000a25
 8001038:	200001b1 	.word	0x200001b1
 800103c:	200000ec 	.word	0x200000ec
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b54      	cmp	r3, #84	; 0x54
 8001044:	d114      	bne.n	8001070 <ESPRxDecoder+0x51c>
 8001046:	4ba1      	ldr	r3, [pc, #644]	; (80012cc <ESPRxDecoder+0x778>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b06      	cmp	r3, #6
 800104c:	d110      	bne.n	8001070 <ESPRxDecoder+0x51c>
			 {
			 	Rxseqdecoder=0;
 800104e:	2300      	movs	r3, #0
 8001050:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8001052:	4b9f      	ldr	r3, [pc, #636]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001054:	225a      	movs	r2, #90	; 0x5a
 8001056:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8001058:	4b9c      	ldr	r3, [pc, #624]	; (80012cc <ESPRxDecoder+0x778>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 800105e:	4b9d      	ldr	r3, [pc, #628]	; (80012d4 <ESPRxDecoder+0x780>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 8001064:	4b9c      	ldr	r3, [pc, #624]	; (80012d8 <ESPRxDecoder+0x784>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 800106a:	4b9c      	ldr	r3, [pc, #624]	; (80012dc <ESPRxDecoder+0x788>)
 800106c:	2202      	movs	r2, #2
 800106e:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b4c      	cmp	r3, #76	; 0x4c
 8001074:	d107      	bne.n	8001086 <ESPRxDecoder+0x532>
 8001076:	4b95      	ldr	r3, [pc, #596]	; (80012cc <ESPRxDecoder+0x778>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <ESPRxDecoder+0x532>
			 {
			 	bufferptr=1;
 800107e:	4b93      	ldr	r3, [pc, #588]	; (80012cc <ESPRxDecoder+0x778>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e040      	b.n	8001108 <ESPRxDecoder+0x5b4>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b69      	cmp	r3, #105	; 0x69
 800108a:	d107      	bne.n	800109c <ESPRxDecoder+0x548>
 800108c:	4b8f      	ldr	r3, [pc, #572]	; (80012cc <ESPRxDecoder+0x778>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d103      	bne.n	800109c <ESPRxDecoder+0x548>
			 {
			 	bufferptr=2;
 8001094:	4b8d      	ldr	r3, [pc, #564]	; (80012cc <ESPRxDecoder+0x778>)
 8001096:	2202      	movs	r2, #2
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e035      	b.n	8001108 <ESPRxDecoder+0x5b4>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b6e      	cmp	r3, #110	; 0x6e
 80010a0:	d107      	bne.n	80010b2 <ESPRxDecoder+0x55e>
 80010a2:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <ESPRxDecoder+0x778>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d103      	bne.n	80010b2 <ESPRxDecoder+0x55e>
			 {
			 	bufferptr=3;
 80010aa:	4b88      	ldr	r3, [pc, #544]	; (80012cc <ESPRxDecoder+0x778>)
 80010ac:	2203      	movs	r2, #3
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e02a      	b.n	8001108 <ESPRxDecoder+0x5b4>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b6b      	cmp	r3, #107	; 0x6b
 80010b6:	d107      	bne.n	80010c8 <ESPRxDecoder+0x574>
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <ESPRxDecoder+0x778>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d103      	bne.n	80010c8 <ESPRxDecoder+0x574>
			 {
			 	bufferptr=4;
 80010c0:	4b82      	ldr	r3, [pc, #520]	; (80012cc <ESPRxDecoder+0x778>)
 80010c2:	2204      	movs	r2, #4
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01f      	b.n	8001108 <ESPRxDecoder+0x5b4>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b65      	cmp	r3, #101	; 0x65
 80010cc:	d107      	bne.n	80010de <ESPRxDecoder+0x58a>
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <ESPRxDecoder+0x778>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d103      	bne.n	80010de <ESPRxDecoder+0x58a>
			 {
			 	bufferptr=5;
 80010d6:	4b7d      	ldr	r3, [pc, #500]	; (80012cc <ESPRxDecoder+0x778>)
 80010d8:	2205      	movs	r2, #5
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e014      	b.n	8001108 <ESPRxDecoder+0x5b4>
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d111      	bne.n	8001108 <ESPRxDecoder+0x5b4>
 80010e4:	4b79      	ldr	r3, [pc, #484]	; (80012cc <ESPRxDecoder+0x778>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d10d      	bne.n	8001108 <ESPRxDecoder+0x5b4>
			 {
			 	Rxseqdecoder=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 80010f0:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <ESPRxDecoder+0x77c>)
 80010f2:	225a      	movs	r2, #90	; 0x5a
 80010f4:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80010f6:	4b75      	ldr	r3, [pc, #468]	; (80012cc <ESPRxDecoder+0x778>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 80010fc:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <ESPRxDecoder+0x780>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8001102:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <ESPRxDecoder+0x784>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b45      	cmp	r3, #69	; 0x45
 800110c:	d107      	bne.n	800111e <ESPRxDecoder+0x5ca>
 800110e:	4b72      	ldr	r3, [pc, #456]	; (80012d8 <ESPRxDecoder+0x784>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <ESPRxDecoder+0x5ca>
			 {
			 	Err_bufferptr=1;
 8001116:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <ESPRxDecoder+0x784>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e04b      	b.n	80011b6 <ESPRxDecoder+0x662>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b52      	cmp	r3, #82	; 0x52
 8001122:	d107      	bne.n	8001134 <ESPRxDecoder+0x5e0>
 8001124:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <ESPRxDecoder+0x784>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d103      	bne.n	8001134 <ESPRxDecoder+0x5e0>
			 {
			 	Err_bufferptr=2;
 800112c:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <ESPRxDecoder+0x784>)
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e040      	b.n	80011b6 <ESPRxDecoder+0x662>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b52      	cmp	r3, #82	; 0x52
 8001138:	d107      	bne.n	800114a <ESPRxDecoder+0x5f6>
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <ESPRxDecoder+0x784>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d103      	bne.n	800114a <ESPRxDecoder+0x5f6>
			 {
			 	Err_bufferptr=3;
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <ESPRxDecoder+0x784>)
 8001144:	2203      	movs	r2, #3
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e035      	b.n	80011b6 <ESPRxDecoder+0x662>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b4f      	cmp	r3, #79	; 0x4f
 800114e:	d107      	bne.n	8001160 <ESPRxDecoder+0x60c>
 8001150:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <ESPRxDecoder+0x784>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d103      	bne.n	8001160 <ESPRxDecoder+0x60c>
			 {
			 	Err_bufferptr=4;
 8001158:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <ESPRxDecoder+0x784>)
 800115a:	2204      	movs	r2, #4
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e02a      	b.n	80011b6 <ESPRxDecoder+0x662>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b52      	cmp	r3, #82	; 0x52
 8001164:	f040 86da 	bne.w	8001f1c <ESPRxDecoder+0x13c8>
 8001168:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <ESPRxDecoder+0x784>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b04      	cmp	r3, #4
 800116e:	f040 86d5 	bne.w	8001f1c <ESPRxDecoder+0x13c8>
			 {
			   	Err_bufferptr=0;
 8001172:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <ESPRxDecoder+0x784>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <ESPRxDecoder+0x778>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <ESPRxDecoder+0x788>)
 8001184:	2204      	movs	r2, #4
 8001186:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <ESPRxDecoder+0x780>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <ESPRxDecoder+0x780>)
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <ESPRxDecoder+0x780>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d804      	bhi.n	80011a6 <ESPRxDecoder+0x652>
				{
				   wifi_command=80;
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <ESPRxDecoder+0x77c>)
 800119e:	2250      	movs	r2, #80	; 0x50
 80011a0:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 80011a2:	f000 bebb 	b.w	8001f1c <ESPRxDecoder+0x13c8>
				   wifi_command=50;	 // modified by satheesh
 80011a6:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011a8:	2232      	movs	r2, #50	; 0x32
 80011aa:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 80011ac:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <ESPRxDecoder+0x780>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		break;
 80011b2:	f000 beb3 	b.w	8001f1c <ESPRxDecoder+0x13c8>
 80011b6:	f000 beb1 	b.w	8001f1c <ESPRxDecoder+0x13c8>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b3e      	cmp	r3, #62	; 0x3e
 80011be:	f040 86af 	bne.w	8001f20 <ESPRxDecoder+0x13cc>
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <ESPRxDecoder+0x778>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 86aa 	bne.w	8001f20 <ESPRxDecoder+0x13cc>
			 {
			 	bufferptr=0;
 80011cc:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <ESPRxDecoder+0x778>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71bb      	strb	r3, [r7, #6]
				wifi_command=100;
 80011d6:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011d8:	2264      	movs	r2, #100	; 0x64
 80011da:	701a      	strb	r2, [r3, #0]
			 }
		break;
 80011dc:	f000 bea0 	b.w	8001f20 <ESPRxDecoder+0x13cc>
		case 7:
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b24      	cmp	r3, #36	; 0x24
 80011e4:	d10b      	bne.n	80011fe <ESPRxDecoder+0x6aa>
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <ESPRxDecoder+0x78c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d107      	bne.n	80011fe <ESPRxDecoder+0x6aa>
			{
				 Data_bufferptr=1;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <ESPRxDecoder+0x78c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
				 Valid_DataWifi1= 1;
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <ESPRxDecoder+0x790>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	f000 bce5 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==1)
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10c      	bne.n	8001220 <ESPRxDecoder+0x6cc>
			 {
				Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fea3 	bl	8001f54 <DecToASCIIFun>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <ESPRxDecoder+0x794>)
 8001214:	701a      	strb	r2, [r3, #0]
				Data_bufferptr=2;
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001218:	2202      	movs	r2, #2
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	f000 bcd4 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==2)
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d10c      	bne.n	8001242 <ESPRxDecoder+0x6ee>
			{
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fe92 	bl	8001f54 <DecToASCIIFun>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <ESPRxDecoder+0x794>)
 8001236:	705a      	strb	r2, [r3, #1]
				 Data_bufferptr=3;
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <ESPRxDecoder+0x78c>)
 800123a:	2203      	movs	r2, #3
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	f000 bcc3 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==3)//,
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d10c      	bne.n	8001264 <ESPRxDecoder+0x710>
			{
				 Data_bufferptr=4;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <ESPRxDecoder+0x78c>)
 800124c:	2204      	movs	r2, #4
 800124e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);//cyclic time
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fe7e 	bl	8001f54 <DecToASCIIFun>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <ESPRxDecoder+0x794>)
 800125e:	709a      	strb	r2, [r3, #2]
 8001260:	f000 bcb2 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==4)
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d104      	bne.n	8001276 <ESPRxDecoder+0x722>
			{
				 Data_bufferptr=5;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <ESPRxDecoder+0x78c>)
 800126e:	2205      	movs	r2, #5
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	f000 bca9 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==5)
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d10c      	bne.n	8001298 <ESPRxDecoder+0x744>
			{
				Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fe67 	bl	8001f54 <DecToASCIIFun>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <ESPRxDecoder+0x794>)
 800128c:	70da      	strb	r2, [r3, #3]
				 Data_bufferptr=6;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <ESPRxDecoder+0x78c>)
 8001290:	2206      	movs	r2, #6
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	f000 bc98 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==6)
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <ESPRxDecoder+0x78c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b06      	cmp	r3, #6
 800129e:	d10c      	bne.n	80012ba <ESPRxDecoder+0x766>
			{
				Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);//date
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fe56 	bl	8001f54 <DecToASCIIFun>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <ESPRxDecoder+0x794>)
 80012ae:	711a      	strb	r2, [r3, #4]
				Data_bufferptr=7;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <ESPRxDecoder+0x78c>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	f000 bc87 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==7)// '/'
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <ESPRxDecoder+0x78c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b07      	cmp	r3, #7
 80012c0:	d114      	bne.n	80012ec <ESPRxDecoder+0x798>
			{
				 Data_bufferptr=8;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <ESPRxDecoder+0x78c>)
 80012c4:	2208      	movs	r2, #8
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	f000 bc7e 	b.w	8001bc8 <ESPRxDecoder+0x1074>
 80012cc:	20000bec 	.word	0x20000bec
 80012d0:	20000a25 	.word	0x20000a25
 80012d4:	200001b1 	.word	0x200001b1
 80012d8:	200000eb 	.word	0x200000eb
 80012dc:	200000ec 	.word	0x200000ec
 80012e0:	200000ea 	.word	0x200000ea
 80012e4:	200000f0 	.word	0x200000f0
 80012e8:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==8)
 80012ec:	4ba3      	ldr	r3, [pc, #652]	; (800157c <ESPRxDecoder+0xa28>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d10c      	bne.n	800130e <ESPRxDecoder+0x7ba>
			{
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fe2c 	bl	8001f54 <DecToASCIIFun>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b9f      	ldr	r3, [pc, #636]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001302:	715a      	strb	r2, [r3, #5]
				 Data_bufferptr=9;
 8001304:	4b9d      	ldr	r3, [pc, #628]	; (800157c <ESPRxDecoder+0xa28>)
 8001306:	2209      	movs	r2, #9
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	f000 bc5d 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==9)
 800130e:	4b9b      	ldr	r3, [pc, #620]	; (800157c <ESPRxDecoder+0xa28>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b09      	cmp	r3, #9
 8001314:	d10c      	bne.n	8001330 <ESPRxDecoder+0x7dc>
			{
				Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fe1b 	bl	8001f54 <DecToASCIIFun>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b97      	ldr	r3, [pc, #604]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001324:	719a      	strb	r2, [r3, #6]
				 Data_bufferptr=10;//month
 8001326:	4b95      	ldr	r3, [pc, #596]	; (800157c <ESPRxDecoder+0xa28>)
 8001328:	220a      	movs	r2, #10
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	f000 bc4c 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==10)
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <ESPRxDecoder+0xa28>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d104      	bne.n	8001342 <ESPRxDecoder+0x7ee>
			{
				 Data_bufferptr=11;//month
 8001338:	4b90      	ldr	r3, [pc, #576]	; (800157c <ESPRxDecoder+0xa28>)
 800133a:	220b      	movs	r2, #11
 800133c:	701a      	strb	r2, [r3, #0]
 800133e:	f000 bc43 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}

			else if(Data_bufferptr==11)// '/'
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <ESPRxDecoder+0xa28>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b0b      	cmp	r3, #11
 8001348:	d10c      	bne.n	8001364 <ESPRxDecoder+0x810>
			 {
				Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fe01 	bl	8001f54 <DecToASCIIFun>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001358:	71da      	strb	r2, [r3, #7]
				Data_bufferptr=12;
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <ESPRxDecoder+0xa28>)
 800135c:	220c      	movs	r2, #12
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	f000 bc32 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==12)////year
 8001364:	4b85      	ldr	r3, [pc, #532]	; (800157c <ESPRxDecoder+0xa28>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d10c      	bne.n	8001386 <ESPRxDecoder+0x832>
			{
				Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fdf0 	bl	8001f54 <DecToASCIIFun>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <ESPRxDecoder+0xa2c>)
 800137a:	721a      	strb	r2, [r3, #8]
				 Data_bufferptr=13;
 800137c:	4b7f      	ldr	r3, [pc, #508]	; (800157c <ESPRxDecoder+0xa28>)
 800137e:	220d      	movs	r2, #13
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	f000 bc21 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==13)//_
 8001386:	4b7d      	ldr	r3, [pc, #500]	; (800157c <ESPRxDecoder+0xa28>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b0d      	cmp	r3, #13
 800138c:	d104      	bne.n	8001398 <ESPRxDecoder+0x844>
			{

				 Data_bufferptr=14;
 800138e:	4b7b      	ldr	r3, [pc, #492]	; (800157c <ESPRxDecoder+0xa28>)
 8001390:	220e      	movs	r2, #14
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	f000 bc18 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==14)//
 8001398:	4b78      	ldr	r3, [pc, #480]	; (800157c <ESPRxDecoder+0xa28>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b0e      	cmp	r3, #14
 800139e:	d10c      	bne.n	80013ba <ESPRxDecoder+0x866>
			{
				Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fdd6 	bl	8001f54 <DecToASCIIFun>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b74      	ldr	r3, [pc, #464]	; (8001580 <ESPRxDecoder+0xa2c>)
 80013ae:	725a      	strb	r2, [r3, #9]
				Data_bufferptr=15;
 80013b0:	4b72      	ldr	r3, [pc, #456]	; (800157c <ESPRxDecoder+0xa28>)
 80013b2:	220f      	movs	r2, #15
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	f000 bc07 	b.w	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==15)
 80013ba:	4b70      	ldr	r3, [pc, #448]	; (800157c <ESPRxDecoder+0xa28>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d10b      	bne.n	80013da <ESPRxDecoder+0x886>
			{
				Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fdc5 	bl	8001f54 <DecToASCIIFun>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <ESPRxDecoder+0xa2c>)
 80013d0:	729a      	strb	r2, [r3, #10]
				Data_bufferptr=16;
 80013d2:	4b6a      	ldr	r3, [pc, #424]	; (800157c <ESPRxDecoder+0xa28>)
 80013d4:	2210      	movs	r2, #16
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e3f6      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}

			else if(Data_bufferptr==16)
 80013da:	4b68      	ldr	r3, [pc, #416]	; (800157c <ESPRxDecoder+0xa28>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d103      	bne.n	80013ea <ESPRxDecoder+0x896>
			 {

				Data_bufferptr=17;//hour
 80013e2:	4b66      	ldr	r3, [pc, #408]	; (800157c <ESPRxDecoder+0xa28>)
 80013e4:	2211      	movs	r2, #17
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e3ee      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==17)//:
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <ESPRxDecoder+0xa28>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b11      	cmp	r3, #17
 80013f0:	d10b      	bne.n	800140a <ESPRxDecoder+0x8b6>
			{
				Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fdad 	bl	8001f54 <DecToASCIIFun>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b60      	ldr	r3, [pc, #384]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001400:	72da      	strb	r2, [r3, #11]
				 Data_bufferptr=18;//minute
 8001402:	4b5e      	ldr	r3, [pc, #376]	; (800157c <ESPRxDecoder+0xa28>)
 8001404:	2212      	movs	r2, #18
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e3de      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==18)
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <ESPRxDecoder+0xa28>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b12      	cmp	r3, #18
 8001410:	d10b      	bne.n	800142a <ESPRxDecoder+0x8d6>
			{
				Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd9d 	bl	8001f54 <DecToASCIIFun>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001420:	731a      	strb	r2, [r3, #12]
				Data_bufferptr=19;
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <ESPRxDecoder+0xa28>)
 8001424:	2213      	movs	r2, #19
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e3ce      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==19)
 800142a:	4b54      	ldr	r3, [pc, #336]	; (800157c <ESPRxDecoder+0xa28>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b13      	cmp	r3, #19
 8001430:	d103      	bne.n	800143a <ESPRxDecoder+0x8e6>
			{

				 Data_bufferptr=20;
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <ESPRxDecoder+0xa28>)
 8001434:	2214      	movs	r2, #20
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e3c6      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==20)//:
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <ESPRxDecoder+0xa28>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b14      	cmp	r3, #20
 8001440:	d10b      	bne.n	800145a <ESPRxDecoder+0x906>
			{
				Data_bufferptr=21;
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <ESPRxDecoder+0xa28>)
 8001444:	2215      	movs	r2, #21
 8001446:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd82 	bl	8001f54 <DecToASCIIFun>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001456:	735a      	strb	r2, [r3, #13]
 8001458:	e3b6      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}

			else if(Data_bufferptr==21)       	//seconds
 800145a:	4b48      	ldr	r3, [pc, #288]	; (800157c <ESPRxDecoder+0xa28>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b15      	cmp	r3, #21
 8001460:	d10b      	bne.n	800147a <ESPRxDecoder+0x926>
			 {
				Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fd75 	bl	8001f54 <DecToASCIIFun>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001470:	739a      	strb	r2, [r3, #14]
				Data_bufferptr=22;
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <ESPRxDecoder+0xa28>)
 8001474:	2216      	movs	r2, #22
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e3a6      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==22)
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <ESPRxDecoder+0xa28>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b16      	cmp	r3, #22
 8001480:	d103      	bne.n	800148a <ESPRxDecoder+0x936>
			{

				 Data_bufferptr=23;
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <ESPRxDecoder+0xa28>)
 8001484:	2217      	movs	r2, #23
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e39e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==23)      //,(to seperate data)
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <ESPRxDecoder+0xa28>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b17      	cmp	r3, #23
 8001490:	d10b      	bne.n	80014aa <ESPRxDecoder+0x956>
			{
				 Data_bufferptr=24;
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <ESPRxDecoder+0xa28>)
 8001494:	2218      	movs	r2, #24
 8001496:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fd5a 	bl	8001f54 <DecToASCIIFun>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <ESPRxDecoder+0xa2c>)
 80014a6:	73da      	strb	r2, [r3, #15]
 80014a8:	e38e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==24)
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <ESPRxDecoder+0xa28>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b18      	cmp	r3, #24
 80014b0:	d10b      	bne.n	80014ca <ESPRxDecoder+0x976>
			{
				Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd4d 	bl	8001f54 <DecToASCIIFun>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <ESPRxDecoder+0xa2c>)
 80014c0:	741a      	strb	r2, [r3, #16]
				 Data_bufferptr=25;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <ESPRxDecoder+0xa28>)
 80014c4:	2219      	movs	r2, #25
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e37e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==25)
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <ESPRxDecoder+0xa28>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b19      	cmp	r3, #25
 80014d0:	d10b      	bne.n	80014ea <ESPRxDecoder+0x996>
			{
				Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fd3d 	bl	8001f54 <DecToASCIIFun>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <ESPRxDecoder+0xa2c>)
 80014e0:	745a      	strb	r2, [r3, #17]
				 Data_bufferptr=26;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <ESPRxDecoder+0xa28>)
 80014e4:	221a      	movs	r2, #26
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e36e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==26)
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <ESPRxDecoder+0xa28>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b1a      	cmp	r3, #26
 80014f0:	d10b      	bne.n	800150a <ESPRxDecoder+0x9b6>
			{
				 Data_bufferptr=27;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <ESPRxDecoder+0xa28>)
 80014f4:	221b      	movs	r2, #27
 80014f6:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fd2a 	bl	8001f54 <DecToASCIIFun>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001506:	749a      	strb	r2, [r3, #18]
 8001508:	e35e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==27)
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <ESPRxDecoder+0xa28>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b1b      	cmp	r3, #27
 8001510:	d10b      	bne.n	800152a <ESPRxDecoder+0x9d6>
			 {
				Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fd1d 	bl	8001f54 <DecToASCIIFun>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001520:	74da      	strb	r2, [r3, #19]
				Data_bufferptr=28;//production
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <ESPRxDecoder+0xa28>)
 8001524:	221c      	movs	r2, #28
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e34e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==28)//,
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <ESPRxDecoder+0xa28>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b1c      	cmp	r3, #28
 8001530:	d103      	bne.n	800153a <ESPRxDecoder+0x9e6>
			{

				 Data_bufferptr=29;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <ESPRxDecoder+0xa28>)
 8001534:	221d      	movs	r2, #29
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e346      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==29)//rejection
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <ESPRxDecoder+0xa28>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b1d      	cmp	r3, #29
 8001540:	d10b      	bne.n	800155a <ESPRxDecoder+0xa06>
			{
				 Data_bufferptr=30;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <ESPRxDecoder+0xa28>)
 8001544:	221e      	movs	r2, #30
 8001546:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fd02 	bl	8001f54 <DecToASCIIFun>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001556:	751a      	strb	r2, [r3, #20]
 8001558:	e336      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==30)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <ESPRxDecoder+0xa28>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b1e      	cmp	r3, #30
 8001560:	d110      	bne.n	8001584 <ESPRxDecoder+0xa30>
			{
				Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fcf5 	bl	8001f54 <DecToASCIIFun>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <ESPRxDecoder+0xa2c>)
 8001570:	755a      	strb	r2, [r3, #21]
				 Data_bufferptr=31;
 8001572:	4b02      	ldr	r3, [pc, #8]	; (800157c <ESPRxDecoder+0xa28>)
 8001574:	221f      	movs	r2, #31
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e326      	b.n	8001bc8 <ESPRxDecoder+0x1074>
 800157a:	bf00      	nop
 800157c:	200000ea 	.word	0x200000ea
 8001580:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==31)
 8001584:	4b9f      	ldr	r3, [pc, #636]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b1f      	cmp	r3, #31
 800158a:	d10b      	bne.n	80015a4 <ESPRxDecoder+0xa50>
			{
				 Data_bufferptr=32;
 800158c:	4b9d      	ldr	r3, [pc, #628]	; (8001804 <ESPRxDecoder+0xcb0>)
 800158e:	2220      	movs	r2, #32
 8001590:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fcdd 	bl	8001f54 <DecToASCIIFun>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b9a      	ldr	r3, [pc, #616]	; (8001808 <ESPRxDecoder+0xcb4>)
 80015a0:	759a      	strb	r2, [r3, #22]
 80015a2:	e311      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==32)
 80015a4:	4b97      	ldr	r3, [pc, #604]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d10b      	bne.n	80015c4 <ESPRxDecoder+0xa70>
			{
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fcd0 	bl	8001f54 <DecToASCIIFun>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b93      	ldr	r3, [pc, #588]	; (8001808 <ESPRxDecoder+0xcb4>)
 80015ba:	75da      	strb	r2, [r3, #23]
				 Data_bufferptr=33;
 80015bc:	4b91      	ldr	r3, [pc, #580]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015be:	2221      	movs	r2, #33	; 0x21
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e301      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==33)//rejection calculated in software
 80015c4:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b21      	cmp	r3, #33	; 0x21
 80015ca:	d10b      	bne.n	80015e4 <ESPRxDecoder+0xa90>
			{
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fcc0 	bl	8001f54 <DecToASCIIFun>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <ESPRxDecoder+0xcb4>)
 80015da:	761a      	strb	r2, [r3, #24]
				 Data_bufferptr=34;
 80015dc:	4b89      	ldr	r3, [pc, #548]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015de:	2222      	movs	r2, #34	; 0x22
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e2f1      	b.n	8001bc8 <ESPRxDecoder+0x1074>
		/*		RefreshBlockInfo = 0;
				RxCompleteU2C1WIFI=1;
				Updatetimeinfo=1;*/
			}
			else if(Data_bufferptr==34)      //,
 80015e4:	4b87      	ldr	r3, [pc, #540]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b22      	cmp	r3, #34	; 0x22
 80015ea:	d103      	bne.n	80015f4 <ESPRxDecoder+0xaa0>
			{
				Data_bufferptr=35;
 80015ec:	4b85      	ldr	r3, [pc, #532]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015ee:	2223      	movs	r2, #35	; 0x23
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e2e9      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==35)      //batchTargetquantity
 80015f4:	4b83      	ldr	r3, [pc, #524]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b23      	cmp	r3, #35	; 0x23
 80015fa:	d10b      	bne.n	8001614 <ESPRxDecoder+0xac0>
			 {
				Data_bufferptr=36;
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <ESPRxDecoder+0xcb0>)
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fca5 	bl	8001f54 <DecToASCIIFun>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <ESPRxDecoder+0xcb4>)
 8001610:	765a      	strb	r2, [r3, #25]
 8001612:	e2d9      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==36)
 8001614:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b24      	cmp	r3, #36	; 0x24
 800161a:	d10b      	bne.n	8001634 <ESPRxDecoder+0xae0>
			 {
				Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fc98 	bl	8001f54 <DecToASCIIFun>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b77      	ldr	r3, [pc, #476]	; (8001808 <ESPRxDecoder+0xcb4>)
 800162a:	769a      	strb	r2, [r3, #26]
				Data_bufferptr=37;
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <ESPRxDecoder+0xcb0>)
 800162e:	2225      	movs	r2, #37	; 0x25
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e2c9      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==37)
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b25      	cmp	r3, #37	; 0x25
 800163a:	d10b      	bne.n	8001654 <ESPRxDecoder+0xb00>
			{
				Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fc88 	bl	8001f54 <DecToASCIIFun>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <ESPRxDecoder+0xcb4>)
 800164a:	76da      	strb	r2, [r3, #27]
				Data_bufferptr=38;
 800164c:	4b6d      	ldr	r3, [pc, #436]	; (8001804 <ESPRxDecoder+0xcb0>)
 800164e:	2226      	movs	r2, #38	; 0x26
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e2b9      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==38)
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b26      	cmp	r3, #38	; 0x26
 800165a:	d10b      	bne.n	8001674 <ESPRxDecoder+0xb20>
			{
				Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fc78 	bl	8001f54 <DecToASCIIFun>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b67      	ldr	r3, [pc, #412]	; (8001808 <ESPRxDecoder+0xcb4>)
 800166a:	771a      	strb	r2, [r3, #28]
				Data_bufferptr=39;
 800166c:	4b65      	ldr	r3, [pc, #404]	; (8001804 <ESPRxDecoder+0xcb0>)
 800166e:	2227      	movs	r2, #39	; 0x27
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e2a9      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==39)
 8001674:	4b63      	ldr	r3, [pc, #396]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b27      	cmp	r3, #39	; 0x27
 800167a:	d10b      	bne.n	8001694 <ESPRxDecoder+0xb40>
			{
				Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fc68 	bl	8001f54 <DecToASCIIFun>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <ESPRxDecoder+0xcb4>)
 800168a:	775a      	strb	r2, [r3, #29]
				Data_bufferptr=40;
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <ESPRxDecoder+0xcb0>)
 800168e:	2228      	movs	r2, #40	; 0x28
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e299      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==40)//,
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b28      	cmp	r3, #40	; 0x28
 800169a:	d103      	bne.n	80016a4 <ESPRxDecoder+0xb50>
			{
				Data_bufferptr=41;
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <ESPRxDecoder+0xcb0>)
 800169e:	2229      	movs	r2, #41	; 0x29
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e291      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==41)//temperateSet
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <ESPRxDecoder+0xcb0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b29      	cmp	r3, #41	; 0x29
 80016aa:	d10b      	bne.n	80016c4 <ESPRxDecoder+0xb70>
			{
				Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fc50 	bl	8001f54 <DecToASCIIFun>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <ESPRxDecoder+0xcb4>)
 80016ba:	779a      	strb	r2, [r3, #30]
				Data_bufferptr=42;
 80016bc:	4b51      	ldr	r3, [pc, #324]	; (8001804 <ESPRxDecoder+0xcb0>)
 80016be:	222a      	movs	r2, #42	; 0x2a
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e281      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==42)
 80016c4:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <ESPRxDecoder+0xcb0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ca:	d10b      	bne.n	80016e4 <ESPRxDecoder+0xb90>
			{
				Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fc40 	bl	8001f54 <DecToASCIIFun>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <ESPRxDecoder+0xcb4>)
 80016da:	77da      	strb	r2, [r3, #31]
				Data_bufferptr=43;
 80016dc:	4b49      	ldr	r3, [pc, #292]	; (8001804 <ESPRxDecoder+0xcb0>)
 80016de:	222b      	movs	r2, #43	; 0x2b
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e271      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==43)
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <ESPRxDecoder+0xcb0>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b2b      	cmp	r3, #43	; 0x2b
 80016ea:	d10c      	bne.n	8001706 <ESPRxDecoder+0xbb2>
			{
				Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fc30 	bl	8001f54 <DecToASCIIFun>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <ESPRxDecoder+0xcb4>)
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
				Data_bufferptr=44;
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001700:	222c      	movs	r2, #44	; 0x2c
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e260      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==44)//,
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b2c      	cmp	r3, #44	; 0x2c
 800170c:	d103      	bne.n	8001716 <ESPRxDecoder+0xbc2>
			{
				Data_bufferptr=45;
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001710:	222d      	movs	r2, #45	; 0x2d
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e258      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==45)//temperateSetHigh
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b2d      	cmp	r3, #45	; 0x2d
 800171c:	d10c      	bne.n	8001738 <ESPRxDecoder+0xbe4>
			{
				Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fc17 	bl	8001f54 <DecToASCIIFun>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <ESPRxDecoder+0xcb4>)
 800172c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				Data_bufferptr=46;
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001732:	222e      	movs	r2, #46	; 0x2e
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	e247      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==46)
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <ESPRxDecoder+0xcb0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b2e      	cmp	r3, #46	; 0x2e
 800173e:	d10c      	bne.n	800175a <ESPRxDecoder+0xc06>
			{
				Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc06 	bl	8001f54 <DecToASCIIFun>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <ESPRxDecoder+0xcb4>)
 800174e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Data_bufferptr=47;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001754:	222f      	movs	r2, #47	; 0x2f
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e236      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==47)
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <ESPRxDecoder+0xcb0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b2f      	cmp	r3, #47	; 0x2f
 8001760:	d10c      	bne.n	800177c <ESPRxDecoder+0xc28>
			{
				Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fbf5 	bl	8001f54 <DecToASCIIFun>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <ESPRxDecoder+0xcb4>)
 8001770:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				Data_bufferptr=48;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001776:	2230      	movs	r2, #48	; 0x30
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e225      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==48)//,
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <ESPRxDecoder+0xcb0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b30      	cmp	r3, #48	; 0x30
 8001782:	d103      	bne.n	800178c <ESPRxDecoder+0xc38>
			{
				Data_bufferptr=49;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <ESPRxDecoder+0xcb0>)
 8001786:	2231      	movs	r2, #49	; 0x31
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e21d      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==49)//temperateSetLow
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <ESPRxDecoder+0xcb0>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b31      	cmp	r3, #49	; 0x31
 8001792:	d10c      	bne.n	80017ae <ESPRxDecoder+0xc5a>
			{
				Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fbdc 	bl	8001f54 <DecToASCIIFun>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <ESPRxDecoder+0xcb4>)
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Data_bufferptr=50;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017a8:	2232      	movs	r2, #50	; 0x32
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e20c      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==50)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b32      	cmp	r3, #50	; 0x32
 80017b4:	d10c      	bne.n	80017d0 <ESPRxDecoder+0xc7c>
			{
				Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fbcb 	bl	8001f54 <DecToASCIIFun>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <ESPRxDecoder+0xcb4>)
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				Data_bufferptr=51;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017ca:	2233      	movs	r2, #51	; 0x33
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e1fb      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==51)
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b33      	cmp	r3, #51	; 0x33
 80017d6:	d10c      	bne.n	80017f2 <ESPRxDecoder+0xc9e>
			{
				Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fbba 	bl	8001f54 <DecToASCIIFun>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <ESPRxDecoder+0xcb4>)
 80017e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				Data_bufferptr=52;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017ec:	2234      	movs	r2, #52	; 0x34
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e1ea      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==52)//,
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b34      	cmp	r3, #52	; 0x34
 80017f8:	d108      	bne.n	800180c <ESPRxDecoder+0xcb8>
			{
				Data_bufferptr=53;
 80017fa:	4b02      	ldr	r3, [pc, #8]	; (8001804 <ESPRxDecoder+0xcb0>)
 80017fc:	2235      	movs	r2, #53	; 0x35
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e1e2      	b.n	8001bc8 <ESPRxDecoder+0x1074>
 8001802:	bf00      	nop
 8001804:	200000ea 	.word	0x200000ea
 8001808:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==53)//requirementId
 800180c:	4ba9      	ldr	r3, [pc, #676]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b35      	cmp	r3, #53	; 0x35
 8001812:	d10c      	bne.n	800182e <ESPRxDecoder+0xcda>
			{
				Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fb9c 	bl	8001f54 <DecToASCIIFun>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4ba5      	ldr	r3, [pc, #660]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001822:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Data_bufferptr=54;
 8001826:	4ba3      	ldr	r3, [pc, #652]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001828:	2236      	movs	r2, #54	; 0x36
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e1cc      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==54)
 800182e:	4ba1      	ldr	r3, [pc, #644]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b36      	cmp	r3, #54	; 0x36
 8001834:	d10c      	bne.n	8001850 <ESPRxDecoder+0xcfc>
			{
				Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fb8b 	bl	8001f54 <DecToASCIIFun>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b9d      	ldr	r3, [pc, #628]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				Data_bufferptr=55;
 8001848:	4b9a      	ldr	r3, [pc, #616]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800184a:	2237      	movs	r2, #55	; 0x37
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e1bb      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==55)
 8001850:	4b98      	ldr	r3, [pc, #608]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b37      	cmp	r3, #55	; 0x37
 8001856:	d10c      	bne.n	8001872 <ESPRxDecoder+0xd1e>
			{
				Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fb7a 	bl	8001f54 <DecToASCIIFun>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001866:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				Data_bufferptr=56;
 800186a:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800186c:	2238      	movs	r2, #56	; 0x38
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e1aa      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==56)
 8001872:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b38      	cmp	r3, #56	; 0x38
 8001878:	d10c      	bne.n	8001894 <ESPRxDecoder+0xd40>
			{
				Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fb69 	bl	8001f54 <DecToASCIIFun>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001888:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				Data_bufferptr=57;
 800188c:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800188e:	2239      	movs	r2, #57	; 0x39
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e199      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==57)
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b39      	cmp	r3, #57	; 0x39
 800189a:	d10c      	bne.n	80018b6 <ESPRxDecoder+0xd62>
			{
				Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fb58 	bl	8001f54 <DecToASCIIFun>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <ESPRxDecoder+0xf64>)
 80018aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				Data_bufferptr=58;
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80018b0:	223a      	movs	r2, #58	; 0x3a
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e188      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==58)
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b3a      	cmp	r3, #58	; 0x3a
 80018bc:	d10c      	bne.n	80018d8 <ESPRxDecoder+0xd84>
			{
				Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fb47 	bl	8001f54 <DecToASCIIFun>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <ESPRxDecoder+0xf64>)
 80018cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				Data_bufferptr=59;
 80018d0:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80018d2:	223b      	movs	r2, #59	; 0x3b
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e177      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==59)//,
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b3b      	cmp	r3, #59	; 0x3b
 80018de:	d103      	bne.n	80018e8 <ESPRxDecoder+0xd94>
			{
				Data_bufferptr=60;
 80018e0:	4b74      	ldr	r3, [pc, #464]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80018e2:	223c      	movs	r2, #60	; 0x3c
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	e16f      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==60)//itemNumber
 80018e8:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b3c      	cmp	r3, #60	; 0x3c
 80018ee:	d10c      	bne.n	800190a <ESPRxDecoder+0xdb6>
			{
				Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fb2e 	bl	8001f54 <DecToASCIIFun>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b6e      	ldr	r3, [pc, #440]	; (8001ab8 <ESPRxDecoder+0xf64>)
 80018fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Data_bufferptr=61;
 8001902:	4b6c      	ldr	r3, [pc, #432]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001904:	223d      	movs	r2, #61	; 0x3d
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e15e      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==61)
 800190a:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b3d      	cmp	r3, #61	; 0x3d
 8001910:	d10c      	bne.n	800192c <ESPRxDecoder+0xdd8>
			{
				Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fb1d 	bl	8001f54 <DecToASCIIFun>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001920:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				Data_bufferptr=62;
 8001924:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001926:	223e      	movs	r2, #62	; 0x3e
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e14d      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==62)
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b3e      	cmp	r3, #62	; 0x3e
 8001932:	d10c      	bne.n	800194e <ESPRxDecoder+0xdfa>
			{
				Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fb0c 	bl	8001f54 <DecToASCIIFun>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001942:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				Data_bufferptr=63;
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001948:	223f      	movs	r2, #63	; 0x3f
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e13c      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==63)
 800194e:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b3f      	cmp	r3, #63	; 0x3f
 8001954:	d10c      	bne.n	8001970 <ESPRxDecoder+0xe1c>
			{
				Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fafb 	bl	8001f54 <DecToASCIIFun>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001964:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				Data_bufferptr=64;
 8001968:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e12b      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==64)
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d10c      	bne.n	8001992 <ESPRxDecoder+0xe3e>
			{
				Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 faea 	bl	8001f54 <DecToASCIIFun>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001986:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				Data_bufferptr=65;
 800198a:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <ESPRxDecoder+0xf60>)
 800198c:	2241      	movs	r2, #65	; 0x41
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e11a      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==65)
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b41      	cmp	r3, #65	; 0x41
 8001998:	d10c      	bne.n	80019b4 <ESPRxDecoder+0xe60>
			{
				Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fad9 	bl	8001f54 <DecToASCIIFun>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <ESPRxDecoder+0xf64>)
 80019a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				Data_bufferptr=66;
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80019ae:	2242      	movs	r2, #66	; 0x42
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	e109      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==66)
 80019b4:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b42      	cmp	r3, #66	; 0x42
 80019ba:	d10c      	bne.n	80019d6 <ESPRxDecoder+0xe82>
			{
				Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fac8 	bl	8001f54 <DecToASCIIFun>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <ESPRxDecoder+0xf64>)
 80019ca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				Data_bufferptr=67;
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80019d0:	2243      	movs	r2, #67	; 0x43
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e0f8      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==67)
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b43      	cmp	r3, #67	; 0x43
 80019dc:	d10c      	bne.n	80019f8 <ESPRxDecoder+0xea4>
			{
				Uart_rx_buffer[52] = DecToASCIIFun(Rxwifi_data);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fab7 	bl	8001f54 <DecToASCIIFun>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <ESPRxDecoder+0xf64>)
 80019ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				Data_bufferptr=68;
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80019f2:	2244      	movs	r2, #68	; 0x44
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e0e7      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==68)
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <ESPRxDecoder+0xf60>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b44      	cmp	r3, #68	; 0x44
 80019fe:	d10c      	bne.n	8001a1a <ESPRxDecoder+0xec6>
			{
				Uart_rx_buffer[53] = DecToASCIIFun(Rxwifi_data);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 faa6 	bl	8001f54 <DecToASCIIFun>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				Data_bufferptr=69;
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a14:	2245      	movs	r2, #69	; 0x45
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e0d6      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==69)
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b45      	cmp	r3, #69	; 0x45
 8001a20:	d10c      	bne.n	8001a3c <ESPRxDecoder+0xee8>
			{
				Uart_rx_buffer[54] = DecToASCIIFun(Rxwifi_data);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fa95 	bl	8001f54 <DecToASCIIFun>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001a30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				Data_bufferptr=70;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a36:	2246      	movs	r2, #70	; 0x46
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e0c5      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==70)//,
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b46      	cmp	r3, #70	; 0x46
 8001a42:	d103      	bne.n	8001a4c <ESPRxDecoder+0xef8>
			{
				Data_bufferptr=71;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a46:	2247      	movs	r2, #71	; 0x47
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e0bd      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==71)//batchNumber
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b47      	cmp	r3, #71	; 0x47
 8001a52:	d10c      	bne.n	8001a6e <ESPRxDecoder+0xf1a>
			{
				Uart_rx_buffer[55] = DecToASCIIFun(Rxwifi_data);
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fa7c 	bl	8001f54 <DecToASCIIFun>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001a62:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				Data_bufferptr=72;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a68:	2248      	movs	r2, #72	; 0x48
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e0ac      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==72)
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b48      	cmp	r3, #72	; 0x48
 8001a74:	d10c      	bne.n	8001a90 <ESPRxDecoder+0xf3c>
			{
				Uart_rx_buffer[56] = DecToASCIIFun(Rxwifi_data);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa6b 	bl	8001f54 <DecToASCIIFun>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				Data_bufferptr=73;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a8a:	2249      	movs	r2, #73	; 0x49
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e09b      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==73)
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b49      	cmp	r3, #73	; 0x49
 8001a96:	d111      	bne.n	8001abc <ESPRxDecoder+0xf68>
			{
				Uart_rx_buffer[57] = DecToASCIIFun(Rxwifi_data);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fa5a 	bl	8001f54 <DecToASCIIFun>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <ESPRxDecoder+0xf64>)
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				Data_bufferptr=74;
 8001aaa:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <ESPRxDecoder+0xf60>)
 8001aac:	224a      	movs	r2, #74	; 0x4a
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e08a      	b.n	8001bc8 <ESPRxDecoder+0x1074>
 8001ab2:	bf00      	nop
 8001ab4:	200000ea 	.word	0x200000ea
 8001ab8:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==74)//,
 8001abc:	4b98      	ldr	r3, [pc, #608]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b4a      	cmp	r3, #74	; 0x4a
 8001ac2:	d103      	bne.n	8001acc <ESPRxDecoder+0xf78>
			{
				Data_bufferptr=75;
 8001ac4:	4b96      	ldr	r3, [pc, #600]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001ac6:	224b      	movs	r2, #75	; 0x4b
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e07d      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==75)//resetStatus
 8001acc:	4b94      	ldr	r3, [pc, #592]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b4b      	cmp	r3, #75	; 0x4b
 8001ad2:	d10c      	bne.n	8001aee <ESPRxDecoder+0xf9a>
			{
				Uart_rx_buffer[58] = DecToASCIIFun(Rxwifi_data);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fa3c 	bl	8001f54 <DecToASCIIFun>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b90      	ldr	r3, [pc, #576]	; (8001d24 <ESPRxDecoder+0x11d0>)
 8001ae2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				Data_bufferptr=76;
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001ae8:	224c      	movs	r2, #76	; 0x4c
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e06c      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==76)
 8001aee:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b4c      	cmp	r3, #76	; 0x4c
 8001af4:	d10c      	bne.n	8001b10 <ESPRxDecoder+0xfbc>
			{
				Uart_rx_buffer[59] = DecToASCIIFun(Rxwifi_data);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fa2b 	bl	8001f54 <DecToASCIIFun>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <ESPRxDecoder+0x11d0>)
 8001b04:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				Data_bufferptr=77;
 8001b08:	4b85      	ldr	r3, [pc, #532]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b0a:	224d      	movs	r2, #77	; 0x4d
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e05b      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==77)//,
 8001b10:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b4d      	cmp	r3, #77	; 0x4d
 8001b16:	d103      	bne.n	8001b20 <ESPRxDecoder+0xfcc>
			{
				Data_bufferptr=78;
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b1a:	224e      	movs	r2, #78	; 0x4e
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e053      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==78)//Reset status
 8001b20:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b4e      	cmp	r3, #78	; 0x4e
 8001b26:	d10c      	bne.n	8001b42 <ESPRxDecoder+0xfee>
			{
				Uart_rx_buffer[60] = DecToASCIIFun(Rxwifi_data);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fa12 	bl	8001f54 <DecToASCIIFun>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <ESPRxDecoder+0x11d0>)
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				Data_bufferptr=79;
 8001b3a:	4b79      	ldr	r3, [pc, #484]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b3c:	224f      	movs	r2, #79	; 0x4f
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e042      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==79)
 8001b42:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b4f      	cmp	r3, #79	; 0x4f
 8001b48:	d10c      	bne.n	8001b64 <ESPRxDecoder+0x1010>
			{
				Uart_rx_buffer[61] = DecToASCIIFun(Rxwifi_data);
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fa01 	bl	8001f54 <DecToASCIIFun>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <ESPRxDecoder+0x11d0>)
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				Data_bufferptr=80;
 8001b5c:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b5e:	2250      	movs	r2, #80	; 0x50
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e031      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==80)//,
 8001b64:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b50      	cmp	r3, #80	; 0x50
 8001b6a:	d103      	bne.n	8001b74 <ESPRxDecoder+0x1020>
			{
				Data_bufferptr=81;
 8001b6c:	4b6c      	ldr	r3, [pc, #432]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b6e:	2251      	movs	r2, #81	; 0x51
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e029      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==81)//Reason entry status
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b51      	cmp	r3, #81	; 0x51
 8001b7a:	d10c      	bne.n	8001b96 <ESPRxDecoder+0x1042>
			{
				Uart_rx_buffer[62] = DecToASCIIFun(Rxwifi_data);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f9e8 	bl	8001f54 <DecToASCIIFun>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <ESPRxDecoder+0x11d0>)
 8001b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				Data_bufferptr=82;
 8001b8e:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b90:	2252      	movs	r2, #82	; 0x52
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e018      	b.n	8001bc8 <ESPRxDecoder+0x1074>
			}
			else if(Data_bufferptr==82)
 8001b96:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b52      	cmp	r3, #82	; 0x52
 8001b9c:	d114      	bne.n	8001bc8 <ESPRxDecoder+0x1074>
			{
				Uart_rx_buffer[63] = DecToASCIIFun(Rxwifi_data);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f9d7 	bl	8001f54 <DecToASCIIFun>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <ESPRxDecoder+0x11d0>)
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				Data_bufferptr=0;
 8001bb0:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <ESPRxDecoder+0x11cc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <ESPRxDecoder+0x11d4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <ESPRxDecoder+0x11d8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 8001bc2:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <ESPRxDecoder+0x11dc>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
			}


		   if(Valid_DataWifi1)
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <ESPRxDecoder+0x11e0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 809b 	beq.w	8001d08 <ESPRxDecoder+0x11b4>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b55      	cmp	r3, #85	; 0x55
 8001bd6:	d107      	bne.n	8001be8 <ESPRxDecoder+0x1094>
 8001bd8:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <ESPRxDecoder+0x1094>
			 {
			 	bufferptr=1;
 8001be0:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e040      	b.n	8001c6a <ESPRxDecoder+0x1116>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b6e      	cmp	r3, #110	; 0x6e
 8001bec:	d107      	bne.n	8001bfe <ESPRxDecoder+0x10aa>
 8001bee:	4b52      	ldr	r3, [pc, #328]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d103      	bne.n	8001bfe <ESPRxDecoder+0x10aa>
			 {
			 	bufferptr=2;
 8001bf6:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e035      	b.n	8001c6a <ESPRxDecoder+0x1116>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b6c      	cmp	r3, #108	; 0x6c
 8001c02:	d107      	bne.n	8001c14 <ESPRxDecoder+0x10c0>
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d103      	bne.n	8001c14 <ESPRxDecoder+0x10c0>
			 {
			    bufferptr=3;
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e02a      	b.n	8001c6a <ESPRxDecoder+0x1116>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b69      	cmp	r3, #105	; 0x69
 8001c18:	d107      	bne.n	8001c2a <ESPRxDecoder+0x10d6>
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d103      	bne.n	8001c2a <ESPRxDecoder+0x10d6>
			 {
			    bufferptr=4;
 8001c22:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e01f      	b.n	8001c6a <ESPRxDecoder+0x1116>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b6e      	cmp	r3, #110	; 0x6e
 8001c2e:	d107      	bne.n	8001c40 <ESPRxDecoder+0x10ec>
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d103      	bne.n	8001c40 <ESPRxDecoder+0x10ec>
			 {
			    bufferptr=5;
 8001c38:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e014      	b.n	8001c6a <ESPRxDecoder+0x1116>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b6b      	cmp	r3, #107	; 0x6b
 8001c44:	d111      	bne.n	8001c6a <ESPRxDecoder+0x1116>
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10d      	bne.n	8001c6a <ESPRxDecoder+0x1116>
			 {
			    bufferptr=0;
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <ESPRxDecoder+0x11e8>)
 8001c5a:	2266      	movs	r2, #102	; 0x66
 8001c5c:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <ESPRxDecoder+0x11ec>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001c64:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <ESPRxDecoder+0x11e0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b43      	cmp	r3, #67	; 0x43
 8001c6e:	d107      	bne.n	8001c80 <ESPRxDecoder+0x112c>
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <ESPRxDecoder+0x112c>
			 {
			 	bufferptr=1;
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e0fd      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2b4c      	cmp	r3, #76	; 0x4c
 8001c84:	d107      	bne.n	8001c96 <ESPRxDecoder+0x1142>
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <ESPRxDecoder+0x1142>
			 {
			 	bufferptr=2;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c90:	2202      	movs	r2, #2
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e0f2      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b4f      	cmp	r3, #79	; 0x4f
 8001c9a:	d107      	bne.n	8001cac <ESPRxDecoder+0x1158>
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d103      	bne.n	8001cac <ESPRxDecoder+0x1158>
			 {
			    bufferptr=3;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e0e7      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b53      	cmp	r3, #83	; 0x53
 8001cb0:	d107      	bne.n	8001cc2 <ESPRxDecoder+0x116e>
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d103      	bne.n	8001cc2 <ESPRxDecoder+0x116e>
			 {
			    bufferptr=4;
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e0dc      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b45      	cmp	r3, #69	; 0x45
 8001cc6:	d107      	bne.n	8001cd8 <ESPRxDecoder+0x1184>
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d103      	bne.n	8001cd8 <ESPRxDecoder+0x1184>
			 {
			    bufferptr=5;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e0d1      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b44      	cmp	r3, #68	; 0x44
 8001cdc:	f040 8122 	bne.w	8001f24 <ESPRxDecoder+0x13d0>
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	f040 811d 	bne.w	8001f24 <ESPRxDecoder+0x13d0>
			 {
			    bufferptr=0;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <ESPRxDecoder+0x11e8>)
 8001cf6:	2266      	movs	r2, #102	; 0x66
 8001cf8:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <ESPRxDecoder+0x11ec>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <ESPRxDecoder+0x11e0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8001d06:	e10d      	b.n	8001f24 <ESPRxDecoder+0x13d0>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b55      	cmp	r3, #85	; 0x55
 8001d0c:	d11a      	bne.n	8001d44 <ESPRxDecoder+0x11f0>
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <ESPRxDecoder+0x11f0>
			 	bufferptr=1;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <ESPRxDecoder+0x11e4>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e053      	b.n	8001dc6 <ESPRxDecoder+0x1272>
 8001d1e:	bf00      	nop
 8001d20:	200000ea 	.word	0x200000ea
 8001d24:	200000a4 	.word	0x200000a4
 8001d28:	20000bf6 	.word	0x20000bf6
 8001d2c:	200000ef 	.word	0x200000ef
 8001d30:	200000ee 	.word	0x200000ee
 8001d34:	200000f0 	.word	0x200000f0
 8001d38:	20000bec 	.word	0x20000bec
 8001d3c:	20000a25 	.word	0x20000a25
 8001d40:	200000ed 	.word	0x200000ed
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	2b6e      	cmp	r3, #110	; 0x6e
 8001d48:	d107      	bne.n	8001d5a <ESPRxDecoder+0x1206>
 8001d4a:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d103      	bne.n	8001d5a <ESPRxDecoder+0x1206>
			 	bufferptr=2;
 8001d52:	4b79      	ldr	r3, [pc, #484]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e035      	b.n	8001dc6 <ESPRxDecoder+0x1272>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b6c      	cmp	r3, #108	; 0x6c
 8001d5e:	d107      	bne.n	8001d70 <ESPRxDecoder+0x121c>
 8001d60:	4b75      	ldr	r3, [pc, #468]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d103      	bne.n	8001d70 <ESPRxDecoder+0x121c>
			    bufferptr=3;
 8001d68:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e02a      	b.n	8001dc6 <ESPRxDecoder+0x1272>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b69      	cmp	r3, #105	; 0x69
 8001d74:	d107      	bne.n	8001d86 <ESPRxDecoder+0x1232>
 8001d76:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d103      	bne.n	8001d86 <ESPRxDecoder+0x1232>
			    bufferptr=4;
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d80:	2204      	movs	r2, #4
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e01f      	b.n	8001dc6 <ESPRxDecoder+0x1272>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b6e      	cmp	r3, #110	; 0x6e
 8001d8a:	d107      	bne.n	8001d9c <ESPRxDecoder+0x1248>
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d103      	bne.n	8001d9c <ESPRxDecoder+0x1248>
			    bufferptr=5;
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001d96:	2205      	movs	r2, #5
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e014      	b.n	8001dc6 <ESPRxDecoder+0x1272>
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b6b      	cmp	r3, #107	; 0x6b
 8001da0:	d111      	bne.n	8001dc6 <ESPRxDecoder+0x1272>
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d10d      	bne.n	8001dc6 <ESPRxDecoder+0x1272>
			    bufferptr=0;
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <ESPRxDecoder+0x13e8>)
 8001db6:	2266      	movs	r2, #102	; 0x66
 8001db8:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001dba:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <ESPRxDecoder+0x13ec>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001dc0:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <ESPRxDecoder+0x13f0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b43      	cmp	r3, #67	; 0x43
 8001dca:	d107      	bne.n	8001ddc <ESPRxDecoder+0x1288>
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <ESPRxDecoder+0x1288>
			 	bufferptr=1;
 8001dd4:	4b58      	ldr	r3, [pc, #352]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e04f      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b4c      	cmp	r3, #76	; 0x4c
 8001de0:	d107      	bne.n	8001df2 <ESPRxDecoder+0x129e>
 8001de2:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d103      	bne.n	8001df2 <ESPRxDecoder+0x129e>
			 	bufferptr=2;
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e044      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b4f      	cmp	r3, #79	; 0x4f
 8001df6:	d107      	bne.n	8001e08 <ESPRxDecoder+0x12b4>
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d103      	bne.n	8001e08 <ESPRxDecoder+0x12b4>
			    bufferptr=3;
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e039      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b53      	cmp	r3, #83	; 0x53
 8001e0c:	d107      	bne.n	8001e1e <ESPRxDecoder+0x12ca>
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d103      	bne.n	8001e1e <ESPRxDecoder+0x12ca>
			    bufferptr=4;
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e18:	2204      	movs	r2, #4
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e02e      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b45      	cmp	r3, #69	; 0x45
 8001e22:	d107      	bne.n	8001e34 <ESPRxDecoder+0x12e0>
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d103      	bne.n	8001e34 <ESPRxDecoder+0x12e0>
			    bufferptr=5;
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e2e:	2205      	movs	r2, #5
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e023      	b.n	8001e7c <ESPRxDecoder+0x1328>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	2b44      	cmp	r3, #68	; 0x44
 8001e38:	d174      	bne.n	8001f24 <ESPRxDecoder+0x13d0>
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d170      	bne.n	8001f24 <ESPRxDecoder+0x13d0>
			    bufferptr=0;
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <ESPRxDecoder+0x13ec>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <ESPRxDecoder+0x13ec>)
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <ESPRxDecoder+0x13ec>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d906      	bls.n	8001e6e <ESPRxDecoder+0x131a>
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <ESPRxDecoder+0x13e8>)
 8001e62:	220a      	movs	r2, #10
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <ESPRxDecoder+0x13ec>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e002      	b.n	8001e74 <ESPRxDecoder+0x1320>
					wifi_command=102;}
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <ESPRxDecoder+0x13e8>)
 8001e70:	2266      	movs	r2, #102	; 0x66
 8001e72:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <ESPRxDecoder+0x13f0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
		break;
 8001e7a:	e053      	b.n	8001f24 <ESPRxDecoder+0x13d0>
 8001e7c:	e052      	b.n	8001f24 <ESPRxDecoder+0x13d0>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b4f      	cmp	r3, #79	; 0x4f
 8001e82:	d107      	bne.n	8001e94 <ESPRxDecoder+0x1340>
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <ESPRxDecoder+0x1340>
			 {
			 	bufferptr=1;
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8001e92:	e049      	b.n	8001f28 <ESPRxDecoder+0x13d4>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b4b      	cmp	r3, #75	; 0x4b
 8001e98:	d146      	bne.n	8001f28 <ESPRxDecoder+0x13d4>
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d142      	bne.n	8001f28 <ESPRxDecoder+0x13d4>
			 	bufferptr=0;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <ESPRxDecoder+0x13e8>)
 8001eae:	2214      	movs	r2, #20
 8001eb0:	701a      	strb	r2, [r3, #0]
		break;
 8001eb2:	e039      	b.n	8001f28 <ESPRxDecoder+0x13d4>
		case 9:
			tempbuff[refinc] = Rxwifi_data;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <ESPRxDecoder+0x13f4>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <ESPRxDecoder+0x13f8>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	5453      	strb	r3, [r2, r1]
			refinc= refinc+1;
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <ESPRxDecoder+0x13f4>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <ESPRxDecoder+0x13f4>)
 8001eca:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b4f      	cmp	r3, #79	; 0x4f
 8001ed0:	d107      	bne.n	8001ee2 <ESPRxDecoder+0x138e>
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <ESPRxDecoder+0x138e>
			 {
				bufferptr=1;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
				Rxseqdecoder=0;
				ipConfimation=1;
				wifi_command=49;
			 }
		break;
 8001ee0:	e024      	b.n	8001f2c <ESPRxDecoder+0x13d8>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b4b      	cmp	r3, #75	; 0x4b
 8001ee6:	d121      	bne.n	8001f2c <ESPRxDecoder+0x13d8>
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d11d      	bne.n	8001f2c <ESPRxDecoder+0x13d8>
				bufferptr=0;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <ESPRxDecoder+0x13e4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	71bb      	strb	r3, [r7, #6]
				ipConfimation=1;
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <ESPRxDecoder+0x13fc>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
				wifi_command=49;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <ESPRxDecoder+0x13e8>)
 8001f02:	2231      	movs	r2, #49	; 0x31
 8001f04:	701a      	strb	r2, [r3, #0]
		break;
 8001f06:	e011      	b.n	8001f2c <ESPRxDecoder+0x13d8>
	   	default:
		break;
 8001f08:	bf00      	nop
 8001f0a:	e010      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f0c:	bf00      	nop
 8001f0e:	e00e      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f10:	bf00      	nop
 8001f12:	e00c      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f14:	bf00      	nop
 8001f16:	e00a      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f18:	bf00      	nop
 8001f1a:	e008      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f1c:	bf00      	nop
 8001f1e:	e006      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f20:	bf00      	nop
 8001f22:	e004      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f24:	bf00      	nop
 8001f26:	e002      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <ESPRxDecoder+0x13da>
		break;
 8001f2c:	bf00      	nop
		}
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000bec 	.word	0x20000bec
 8001f3c:	20000a25 	.word	0x20000a25
 8001f40:	200000ed 	.word	0x200000ed
 8001f44:	200000f0 	.word	0x200000f0
 8001f48:	200001be 	.word	0x200001be
 8001f4c:	2000014c 	.word	0x2000014c
 8001f50:	200001b0 	.word	0x200001b0

08001f54 <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	3b30      	subs	r3, #48	; 0x30
 8001f62:	2b16      	cmp	r3, #22
 8001f64:	d860      	bhi.n	8002028 <DecToASCIIFun+0xd4>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <DecToASCIIFun+0x18>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001fc9 	.word	0x08001fc9
 8001f70:	08001fcf 	.word	0x08001fcf
 8001f74:	08001fd5 	.word	0x08001fd5
 8001f78:	08001fdb 	.word	0x08001fdb
 8001f7c:	08001fe1 	.word	0x08001fe1
 8001f80:	08001fe7 	.word	0x08001fe7
 8001f84:	08001fed 	.word	0x08001fed
 8001f88:	08001ff3 	.word	0x08001ff3
 8001f8c:	08001ff9 	.word	0x08001ff9
 8001f90:	08001fff 	.word	0x08001fff
 8001f94:	08002029 	.word	0x08002029
 8001f98:	08002029 	.word	0x08002029
 8001f9c:	08002029 	.word	0x08002029
 8001fa0:	08002029 	.word	0x08002029
 8001fa4:	08002029 	.word	0x08002029
 8001fa8:	08002029 	.word	0x08002029
 8001fac:	08002029 	.word	0x08002029
 8001fb0:	08002005 	.word	0x08002005
 8001fb4:	0800200b 	.word	0x0800200b
 8001fb8:	08002011 	.word	0x08002011
 8001fbc:	08002017 	.word	0x08002017
 8001fc0:	0800201d 	.word	0x0800201d
 8001fc4:	08002023 	.word	0x08002023
	{
	case 48:
			ASCIIHex = 0x00;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
			break;
 8001fcc:	e02c      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
			break;
 8001fd2:	e029      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	73fb      	strb	r3, [r7, #15]
			break;
 8001fd8:	e026      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	73fb      	strb	r3, [r7, #15]
			break;
 8001fde:	e023      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	73fb      	strb	r3, [r7, #15]
			break;
 8001fe4:	e020      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	73fb      	strb	r3, [r7, #15]
			break;
 8001fea:	e01d      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8001fec:	2306      	movs	r3, #6
 8001fee:	73fb      	strb	r3, [r7, #15]
			break;
 8001ff0:	e01a      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	73fb      	strb	r3, [r7, #15]
			break;
 8001ff6:	e017      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	73fb      	strb	r3, [r7, #15]
			break;
 8001ffc:	e014      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8001ffe:	2309      	movs	r3, #9
 8002000:	73fb      	strb	r3, [r7, #15]
			break;
 8002002:	e011      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8002004:	230a      	movs	r3, #10
 8002006:	73fb      	strb	r3, [r7, #15]
			break;
 8002008:	e00e      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 800200a:	230b      	movs	r3, #11
 800200c:	73fb      	strb	r3, [r7, #15]
			break;
 800200e:	e00b      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8002010:	230c      	movs	r3, #12
 8002012:	73fb      	strb	r3, [r7, #15]
			break;
 8002014:	e008      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8002016:	230d      	movs	r3, #13
 8002018:	73fb      	strb	r3, [r7, #15]
			break;
 800201a:	e005      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 800201c:	230e      	movs	r3, #14
 800201e:	73fb      	strb	r3, [r7, #15]
			break;
 8002020:	e002      	b.n	8002028 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 8002022:	230f      	movs	r3, #15
 8002024:	73fb      	strb	r3, [r7, #15]
			break;
 8002026:	bf00      	nop
	}
	return (ASCIIHex);
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <HAL_GPIO_EXTI_Callback>:
extern uint16_t productionInc;
extern uint8_t UpdateStorage;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  MachineState_Auto = HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
 8002042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002046:	481d      	ldr	r0, [pc, #116]	; (80020bc <HAL_GPIO_EXTI_Callback+0x84>)
 8002048:	f009 fe60 	bl	800bd0c <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002052:	701a      	strb	r2, [r3, #0]
  if(MachineState_Auto==0){
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d12b      	bne.n	80020b4 <HAL_GPIO_EXTI_Callback+0x7c>
			  UpdateStorage=1;
		  }
		}
#endif
#if MACTYPE == INJECTIONMAC
		if(GPIO_Pin == ProductionInput1_Pin)
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	d111      	bne.n	8002088 <HAL_GPIO_EXTI_Callback+0x50>
		{
		  GPIO_Pin_Value1 = GPIO_Pin;
 8002064:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	8013      	strh	r3, [r2, #0]
		  MAC_Gen_Prod_Input1_Production =1;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800206c:	2201      	movs	r2, #1
 800206e:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production=0;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_GPIO_EXTI_Callback+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
		  productionInc = productionInc+1;
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002080:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
		}
#endif

#if MACTYPEWITHEJECTION == MACTYPEWITHEJECTIONON
		if(GPIO_Pin == ProductionInput2_Pin)
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208e:	d111      	bne.n	80020b4 <HAL_GPIO_EXTI_Callback+0x7c>
		{
		  GPIO_Pin_Value2 = GPIO_Pin;
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	8013      	strh	r3, [r2, #0]
		  MAC_Gen_Prod_Input1_Production =0;
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production=1;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_GPIO_EXTI_Callback+0x94>)
 800209e:	2201      	movs	r2, #1
 80020a0:	801a      	strh	r2, [r3, #0]
		  productionInc = productionInc+1;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x98>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x98>)
 80020ac:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
		}
#endif
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	48000800 	.word	0x48000800
 80020c0:	200001b2 	.word	0x200001b2
 80020c4:	200001b4 	.word	0x200001b4
 80020c8:	20000768 	.word	0x20000768
 80020cc:	2000076c 	.word	0x2000076c
 80020d0:	20000776 	.word	0x20000776
 80020d4:	20000774 	.word	0x20000774
 80020d8:	200001b6 	.word	0x200001b6

080020dc <HAL_TIM_PeriodElapsedCallback>:
 extern uint8_t MAC_A_Prod_Input1_StartTimer;
 extern uint16_t MAC_A_Prod_Input1_CountBase;
 extern GPIO_PinState Sim_Trigger;
 
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d102      	bne.n	80020f2 <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d13a      	bne.n	8002170 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
 		Flag100milliSeconds=1;
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
 		{
 			SimCount=0;
 		}
#endif

 		if(++LocCount1S >= 10)
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d923      	bls.n	800215c <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			LocCount1S=0;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]

			Flag1Second =1;
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
			if(commFeedbackFlag==1){
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d109      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0x60>
				commFeedbackFlag=0;
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
				wifiConnection = 1;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
				commFeedbackcount=0;
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e00f      	b.n	800215c <HAL_TIM_PeriodElapsedCallback+0x80>
			}
			else
			{
				if(++commFeedbackcount > 50){
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b32      	cmp	r3, #50	; 0x32
 800214e:	d905      	bls.n	800215c <HAL_TIM_PeriodElapsedCallback+0x80>
					wifiConnection=0;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
					commFeedbackcount=81;
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002158:	2251      	movs	r2, #81	; 0x51
 800215a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(MAC_A_Prod_Input1_StartTimer)
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
		   ++MAC_A_Prod_Input1_CountBase;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800216e:	801a      	strh	r2, [r3, #0]
		}
	}
 }
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	200006dc 	.word	0x200006dc
 8002180:	200001b8 	.word	0x200001b8
 8002184:	20000690 	.word	0x20000690
 8002188:	200001ba 	.word	0x200001ba
 800218c:	200001bb 	.word	0x200001bb
 8002190:	200001b9 	.word	0x200001b9
 8002194:	20000111 	.word	0x20000111
 8002198:	200001bc 	.word	0x200001bc
 800219c:	200001bd 	.word	0x200001bd
 80021a0:	20000765 	.word	0x20000765
 80021a4:	20000766 	.word	0x20000766

080021a8 <HAL_UART_RxCpltCallback>:
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);
void DwinFrameDecode(uint8_t Dwindatarx);


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3e      	ldr	r2, [pc, #248]	; (80022ac <HAL_UART_RxCpltCallback+0x104>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10c      	bne.n	80021d2 <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 80021b8:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_UART_RxCpltCallback+0x108>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4a3d      	ldr	r2, [pc, #244]	; (80022b4 <HAL_UART_RxCpltCallback+0x10c>)
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fcc6 	bl	8000b54 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 80021c8:	2201      	movs	r2, #1
 80021ca:	4939      	ldr	r1, [pc, #228]	; (80022b0 <HAL_UART_RxCpltCallback+0x108>)
 80021cc:	4837      	ldr	r0, [pc, #220]	; (80022ac <HAL_UART_RxCpltCallback+0x104>)
 80021ce:	f00d fa0f 	bl	800f5f0 <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_UART_RxCpltCallback+0x110>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d141      	bne.n	800225e <HAL_UART_RxCpltCallback+0xb6>
	{
		if((u8rxbuf[0]==1)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d11c      	bne.n	800221c <HAL_UART_RxCpltCallback+0x74>
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d118      	bne.n	800221c <HAL_UART_RxCpltCallback+0x74>
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d114      	bne.n	800221c <HAL_UART_RxCpltCallback+0x74>
		{
			Dye_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 80021f4:	78db      	ldrb	r3, [r3, #3]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 80021fc:	791b      	ldrb	r3, [r3, #4]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21b      	sxth	r3, r3
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_UART_RxCpltCallback+0x118>)
 8002208:	801a      	strh	r2, [r3, #0]
			Dye_Temperature = Dye_Temperature/10;
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_UART_RxCpltCallback+0x118>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	4a2d      	ldr	r2, [pc, #180]	; (80022c4 <HAL_UART_RxCpltCallback+0x11c>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_UART_RxCpltCallback+0x118>)
 800221a:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0]==2)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d11c      	bne.n	800225e <HAL_UART_RxCpltCallback+0xb6>
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d118      	bne.n	800225e <HAL_UART_RxCpltCallback+0xb6>
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d114      	bne.n	800225e <HAL_UART_RxCpltCallback+0xb6>
		{
			Connector_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 8002234:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_UART_RxCpltCallback+0x114>)
 800223e:	791b      	ldrb	r3, [r3, #4]
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21b      	sxth	r3, r3
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_UART_RxCpltCallback+0x120>)
 800224a:	801a      	strh	r2, [r3, #0]
			Connector_Temperature = Connector_Temperature/10;
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_UART_RxCpltCallback+0x120>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_UART_RxCpltCallback+0x11c>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_UART_RxCpltCallback+0x120>)
 800225c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(huart == &huart2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_UART_RxCpltCallback+0x124>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d11d      	bne.n	80022a2 <HAL_UART_RxCpltCallback+0xfa>
	{
		DwinFrameDecode(rxDwinBuff[0]);
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_UART_RxCpltCallback+0x128>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f836 	bl	80022dc <DwinFrameDecode>
		check[trackpoint]=rxDwinBuff[0];
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_UART_RxCpltCallback+0x12c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_UART_RxCpltCallback+0x128>)
 8002278:	7819      	ldrb	r1, [r3, #0]
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_UART_RxCpltCallback+0x130>)
 800227c:	5499      	strb	r1, [r3, r2]
		if(++trackpoint>200){trackpoint=0;}
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_UART_RxCpltCallback+0x12c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_UART_RxCpltCallback+0x12c>)
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_UART_RxCpltCallback+0x12c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2bc8      	cmp	r3, #200	; 0xc8
 8002290:	d902      	bls.n	8002298 <HAL_UART_RxCpltCallback+0xf0>
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_UART_RxCpltCallback+0x12c>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rxDwinBuff,1);
 8002298:	2201      	movs	r2, #1
 800229a:	490d      	ldr	r1, [pc, #52]	; (80022d0 <HAL_UART_RxCpltCallback+0x128>)
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <HAL_UART_RxCpltCallback+0x124>)
 800229e:	f00d f9a7 	bl	800f5f0 <HAL_UART_Receive_IT>
	}
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200003f0 	.word	0x200003f0
 80022b0:	20000728 	.word	0x20000728
 80022b4:	20000bed 	.word	0x20000bed
 80022b8:	20000474 	.word	0x20000474
 80022bc:	20000820 	.word	0x20000820
 80022c0:	200001c0 	.word	0x200001c0
 80022c4:	cccccccd 	.word	0xcccccccd
 80022c8:	200001c2 	.word	0x200001c2
 80022cc:	200004f8 	.word	0x200004f8
 80022d0:	20000730 	.word	0x20000730
 80022d4:	20000296 	.word	0x20000296
 80022d8:	200001c4 	.word	0x200001c4

080022dc <DwinFrameDecode>:

void DwinFrameDecode(uint8_t Dwindatarx){
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]

	switch(Dwinseq)
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <DwinFrameDecode+0x108>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d870      	bhi.n	80023d0 <DwinFrameDecode+0xf4>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <DwinFrameDecode+0x18>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002311 	.word	0x08002311
 80022f8:	08002327 	.word	0x08002327
 80022fc:	0800233d 	.word	0x0800233d
 8002300:	0800234f 	.word	0x0800234f
 8002304:	08002365 	.word	0x08002365
 8002308:	0800237b 	.word	0x0800237b
 800230c:	08002397 	.word	0x08002397
	{
		case 0:
			if(Dwindatarx == 0x5A){
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b5a      	cmp	r3, #90	; 0x5a
 8002314:	d103      	bne.n	800231e <DwinFrameDecode+0x42>
				Dwinseq=1;
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <DwinFrameDecode+0x108>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 800231c:	e05b      	b.n	80023d6 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <DwinFrameDecode+0x108>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
		break;
 8002324:	e057      	b.n	80023d6 <DwinFrameDecode+0xfa>
		case 1:
			if(Dwindatarx == 0xA5){
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2ba5      	cmp	r3, #165	; 0xa5
 800232a:	d103      	bne.n	8002334 <DwinFrameDecode+0x58>
				Dwinseq=2;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <DwinFrameDecode+0x108>)
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 8002332:	e050      	b.n	80023d6 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <DwinFrameDecode+0x108>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
		break;
 800233a:	e04c      	b.n	80023d6 <DwinFrameDecode+0xfa>
		case 2:
			NoOfDwinRxdata = Dwindatarx-3;
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	3b03      	subs	r3, #3
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <DwinFrameDecode+0x10c>)
 8002344:	701a      	strb	r2, [r3, #0]
			Dwinseq=3;
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <DwinFrameDecode+0x108>)
 8002348:	2203      	movs	r2, #3
 800234a:	701a      	strb	r2, [r3, #0]
		break;
 800234c:	e043      	b.n	80023d6 <DwinFrameDecode+0xfa>
		case 3:
			if(Dwindatarx == 0x83){
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	2b83      	cmp	r3, #131	; 0x83
 8002352:	d103      	bne.n	800235c <DwinFrameDecode+0x80>
			Dwinseq=4;}
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <DwinFrameDecode+0x108>)
 8002356:	2204      	movs	r2, #4
 8002358:	701a      	strb	r2, [r3, #0]
			else{
				Dwinseq=0;
			}
		break;
 800235a:	e03c      	b.n	80023d6 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <DwinFrameDecode+0x108>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
		break;
 8002362:	e038      	b.n	80023d6 <DwinFrameDecode+0xfa>
		case 4:
			if(Dwindatarx == 0x30){
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b30      	cmp	r3, #48	; 0x30
 8002368:	d103      	bne.n	8002372 <DwinFrameDecode+0x96>
				Dwinseq=5;
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <DwinFrameDecode+0x108>)
 800236c:	2205      	movs	r2, #5
 800236e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 8002370:	e031      	b.n	80023d6 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <DwinFrameDecode+0x108>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
		break;
 8002378:	e02d      	b.n	80023d6 <DwinFrameDecode+0xfa>
		case 5:
			if(Dwindatarx == 0x00){
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <DwinFrameDecode+0xb2>
				Dwinseq=6;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <DwinFrameDecode+0x108>)
 8002382:	2206      	movs	r2, #6
 8002384:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point=0;
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <DwinFrameDecode+0x110>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 800238c:	e023      	b.n	80023d6 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <DwinFrameDecode+0x108>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
		break;
 8002394:	e01f      	b.n	80023d6 <DwinFrameDecode+0xfa>
		case 6:
				DwinDatabuffer[Rx_Dwin_Data_Buff_Point]=Dwindatarx;
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <DwinFrameDecode+0x110>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4619      	mov	r1, r3
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <DwinFrameDecode+0x114>)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	5453      	strb	r3, [r2, r1]
				NoOfDwinRxdata= NoOfDwinRxdata-1;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <DwinFrameDecode+0x10c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <DwinFrameDecode+0x10c>)
 80023ac:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point = Rx_Dwin_Data_Buff_Point+1;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <DwinFrameDecode+0x110>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <DwinFrameDecode+0x110>)
 80023b8:	701a      	strb	r2, [r3, #0]
				if(NoOfDwinRxdata == 0){
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <DwinFrameDecode+0x10c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <DwinFrameDecode+0xf8>
					Dwinseq=0;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <DwinFrameDecode+0x108>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
					Rx_Dwin_Complete=1;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <DwinFrameDecode+0x118>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
				}
		break;
 80023ce:	e001      	b.n	80023d4 <DwinFrameDecode+0xf8>
		default:
		break;
 80023d0:	bf00      	nop
 80023d2:	e000      	b.n	80023d6 <DwinFrameDecode+0xfa>
		break;
 80023d4:	bf00      	nop
	}
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000813 	.word	0x20000813
 80023e8:	20000297 	.word	0x20000297
 80023ec:	20000298 	.word	0x20000298
 80023f0:	2000029c 	.word	0x2000029c
 80023f4:	20000299 	.word	0x20000299

080023f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023fc:	f009 f8e4 	bl	800b5c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002400:	f000 f84c 	bl	800249c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002404:	f000 faba 	bl	800297c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002408:	f000 f936 	bl	8002678 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800240c:	f000 f898 	bl	8002540 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002410:	f000 f902 	bl	8002618 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002414:	f000 fa44 	bl	80028a0 <MX_TIM6_Init>
  MX_SPI2_Init();
 8002418:	f000 f9a6 	bl	8002768 <MX_SPI2_Init>
  MX_TIM1_Init();
 800241c:	f000 f9ec 	bl	80027f8 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8002420:	f000 f8ce 	bl	80025c0 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002424:	f000 f958 	bl	80026d8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8002428:	f000 fa70 	bl	800290c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800242c:	4814      	ldr	r0, [pc, #80]	; (8002480 <main+0x88>)
 800242e:	f00c fc3d 	bl	800ecac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <main+0x8c>)
 8002434:	f00c fc3a 	bl	800ecac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8002438:	4813      	ldr	r0, [pc, #76]	; (8002488 <main+0x90>)
 800243a:	f00c fbeb 	bl	800ec14 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f009 fc78 	bl	800bd3c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800244c:	2002      	movs	r0, #2
 800244e:	f009 f92f 	bl	800b6b0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245c:	f009 fc6e 	bl	800bd3c <HAL_GPIO_WritePin>
  {
	  while(1);
  }
#endif
 // HAL_UART_Transmit_IT(&huart1,data,sizeof(data));
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8002460:	2201      	movs	r2, #1
 8002462:	490a      	ldr	r1, [pc, #40]	; (800248c <main+0x94>)
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <main+0x98>)
 8002466:	f00d f8c3 	bl	800f5f0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,rxDwinBuff,1);
 800246a:	2201      	movs	r2, #1
 800246c:	4909      	ldr	r1, [pc, #36]	; (8002494 <main+0x9c>)
 800246e:	480a      	ldr	r0, [pc, #40]	; (8002498 <main+0xa0>)
 8002470:	f00d f8be 	bl	800f5f0 <HAL_UART_Receive_IT>
  W25qxx_Init();
 8002474:	f001 f8b6 	bl	80035e4 <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  while (1)
  {
	  cppMain();
 8002478:	f008 ffe0 	bl	800b43c <cppMain>
 800247c:	e7fc      	b.n	8002478 <main+0x80>
 800247e:	bf00      	nop
 8002480:	20000690 	.word	0x20000690
 8002484:	200006dc 	.word	0x200006dc
 8002488:	20000644 	.word	0x20000644
 800248c:	20000728 	.word	0x20000728
 8002490:	200003f0 	.word	0x200003f0
 8002494:	20000730 	.word	0x20000730
 8002498:	200004f8 	.word	0x200004f8

0800249c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b096      	sub	sp, #88	; 0x58
 80024a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	2244      	movs	r2, #68	; 0x44
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00e fbd0 	bl	8010c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024c2:	f00a fa75 	bl	800c9b0 <HAL_PWREx_ControlVoltageScaling>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80024cc:	f000 fb6e 	bl	8002bac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80024d0:	2310      	movs	r3, #16
 80024d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024dc:	2360      	movs	r3, #96	; 0x60
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e0:	2302      	movs	r3, #2
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024e4:	2301      	movs	r3, #1
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 80024ec:	2356      	movs	r3, #86	; 0x56
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80024f0:	2307      	movs	r3, #7
 80024f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024f4:	2302      	movs	r3, #2
 80024f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80024f8:	2308      	movs	r3, #8
 80024fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4618      	mov	r0, r3
 8002502:	f00a faab 	bl	800ca5c <HAL_RCC_OscConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800250c:	f000 fb4e 	bl	8002bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002510:	230f      	movs	r3, #15
 8002512:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002514:	2303      	movs	r3, #3
 8002516:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f00a feab 	bl	800d284 <HAL_RCC_ClockConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002534:	f000 fb3a 	bl	8002bac <Error_Handler>
  }
}
 8002538:	bf00      	nop
 800253a:	3758      	adds	r7, #88	; 0x58
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <MX_I2C1_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <MX_I2C1_Init+0x74>)
 800254c:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <MX_I2C1_Init+0x7c>)
 800254e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <MX_I2C1_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <MX_I2C1_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800257a:	480e      	ldr	r0, [pc, #56]	; (80025b4 <MX_I2C1_Init+0x74>)
 800257c:	f009 fc0e 	bl	800bd9c <HAL_I2C_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002586:	f000 fb11 	bl	8002bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258a:	2100      	movs	r1, #0
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <MX_I2C1_Init+0x74>)
 800258e:	f00a f969 	bl	800c864 <HAL_I2CEx_ConfigAnalogFilter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002598:	f000 fb08 	bl	8002bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800259c:	2100      	movs	r1, #0
 800259e:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_I2C1_Init+0x74>)
 80025a0:	f00a f9ab 	bl	800c8fa <HAL_I2CEx_ConfigDigitalFilter>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025aa:	f000 faff 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000039c 	.word	0x2000039c
 80025b8:	40005400 	.word	0x40005400
 80025bc:	00a0a7fd 	.word	0x00a0a7fd

080025c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <MX_LPUART1_UART_Init+0x54>)
 80025c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <MX_LPUART1_UART_Init+0x50>)
 80025fe:	f00c ff3b 	bl	800f478 <HAL_UART_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002608:	f000 fad0 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200003f0 	.word	0x200003f0
 8002614:	40008000 	.word	0x40008000

08002618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_USART1_UART_Init+0x58>)
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <MX_USART1_UART_Init+0x5c>)
 8002620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <MX_USART1_UART_Init+0x58>)
 8002624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_USART1_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MX_USART1_UART_Init+0x58>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_USART1_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_USART1_UART_Init+0x58>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_USART1_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_USART1_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_USART1_UART_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_USART1_UART_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_USART1_UART_Init+0x58>)
 800265c:	f00c ff0c 	bl	800f478 <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002666:	f000 faa1 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000474 	.word	0x20000474
 8002674:	40013800 	.word	0x40013800

08002678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 800267e:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <MX_USART2_UART_Init+0x5c>)
 8002680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 8002684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_USART2_UART_Init+0x58>)
 80026bc:	f00c fedc 	bl	800f478 <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026c6:	f000 fa71 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200004f8 	.word	0x200004f8
 80026d4:	40004400 	.word	0x40004400

080026d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <MX_SPI1_Init+0x84>)
 80026de:	4a20      	ldr	r2, [pc, #128]	; (8002760 <MX_SPI1_Init+0x88>)
 80026e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <MX_SPI1_Init+0x84>)
 80026e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <MX_SPI1_Init+0x84>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_SPI1_Init+0x84>)
 80026f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <MX_SPI1_Init+0x84>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <MX_SPI1_Init+0x84>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_SPI1_Init+0x84>)
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_SPI1_Init+0x84>)
 800270e:	2210      	movs	r2, #16
 8002710:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_SPI1_Init+0x84>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_SPI1_Init+0x84>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_SPI1_Init+0x84>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <MX_SPI1_Init+0x84>)
 8002726:	2207      	movs	r2, #7
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_SPI1_Init+0x84>)
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <MX_SPI1_Init+0x84>)
 8002732:	2208      	movs	r2, #8
 8002734:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002736:	4809      	ldr	r0, [pc, #36]	; (800275c <MX_SPI1_Init+0x84>)
 8002738:	f00b fb04 	bl	800dd44 <HAL_SPI_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002742:	f000 fa33 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <MX_SPI1_Init+0x8c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <MX_SPI1_Init+0x8c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002754:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000057c 	.word	0x2000057c
 8002760:	40013000 	.word	0x40013000
 8002764:	200005e0 	.word	0x200005e0

08002768 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <MX_SPI2_Init+0x84>)
 800276e:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <MX_SPI2_Init+0x88>)
 8002770:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <MX_SPI2_Init+0x84>)
 8002774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002778:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_SPI2_Init+0x84>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_SPI2_Init+0x84>)
 8002782:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002786:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_SPI2_Init+0x84>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_SPI2_Init+0x84>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_SPI2_Init+0x84>)
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_SPI2_Init+0x84>)
 800279e:	2208      	movs	r2, #8
 80027a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_SPI2_Init+0x84>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_SPI2_Init+0x84>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_SPI2_Init+0x84>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <MX_SPI2_Init+0x84>)
 80027b6:	2207      	movs	r2, #7
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_SPI2_Init+0x84>)
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <MX_SPI2_Init+0x84>)
 80027c2:	2208      	movs	r2, #8
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <MX_SPI2_Init+0x84>)
 80027c8:	f00b fabc 	bl	800dd44 <HAL_SPI_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027d2:	f000 f9eb 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <MX_SPI2_Init+0x8c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <MX_SPI2_Init+0x8c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e4:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200005e0 	.word	0x200005e0
 80027f0:	40003800 	.word	0x40003800
 80027f4:	2000057c 	.word	0x2000057c

080027f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002818:	4a20      	ldr	r2, [pc, #128]	; (800289c <MX_TIM1_Init+0xa4>)
 800281a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <MX_TIM1_Init+0xa0>)
 800281e:	2200      	movs	r2, #0
 8002820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_TIM1_Init+0xa0>)
 800282a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800282e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_TIM1_Init+0xa0>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002842:	4815      	ldr	r0, [pc, #84]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002844:	f00c f98e 	bl	800eb64 <HAL_TIM_Base_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800284e:	f000 f9ad 	bl	8002bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002856:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	480e      	ldr	r0, [pc, #56]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002860:	f00c fb97 	bl	800ef92 <HAL_TIM_ConfigClockSource>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800286a:	f000 f99f 	bl	8002bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4806      	ldr	r0, [pc, #24]	; (8002898 <MX_TIM1_Init+0xa0>)
 8002880:	f00c fd76 	bl	800f370 <HAL_TIMEx_MasterConfigSynchronization>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800288a:	f000 f98f 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000644 	.word	0x20000644
 800289c:	40012c00 	.word	0x40012c00

080028a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_TIM6_Init+0x64>)
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <MX_TIM6_Init+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MX_TIM6_Init+0x64>)
 80028b8:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 80028bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_TIM6_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_TIM6_Init+0x64>)
 80028c6:	2264      	movs	r2, #100	; 0x64
 80028c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_TIM6_Init+0x64>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <MX_TIM6_Init+0x64>)
 80028d2:	f00c f947 	bl	800eb64 <HAL_TIM_Base_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028dc:	f000 f966 	bl	8002bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <MX_TIM6_Init+0x64>)
 80028ee:	f00c fd3f 	bl	800f370 <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028f8:	f000 f958 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000690 	.word	0x20000690
 8002908:	40001000 	.word	0x40001000

0800290c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <MX_TIM7_Init+0x68>)
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <MX_TIM7_Init+0x6c>)
 8002920:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <MX_TIM7_Init+0x68>)
 8002924:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002928:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <MX_TIM7_Init+0x68>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <MX_TIM7_Init+0x68>)
 8002932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002936:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_TIM7_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800293e:	480d      	ldr	r0, [pc, #52]	; (8002974 <MX_TIM7_Init+0x68>)
 8002940:	f00c f910 	bl	800eb64 <HAL_TIM_Base_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800294a:	f000 f92f 	bl	8002bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <MX_TIM7_Init+0x68>)
 800295c:	f00c fd08 	bl	800f370 <HAL_TIMEx_MasterConfigSynchronization>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002966:	f000 f921 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200006dc 	.word	0x200006dc
 8002978:	40001400 	.word	0x40001400

0800297c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <MX_GPIO_Init+0x220>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	4a81      	ldr	r2, [pc, #516]	; (8002b9c <MX_GPIO_Init+0x220>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299e:	4b7f      	ldr	r3, [pc, #508]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	4b7c      	ldr	r3, [pc, #496]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	4a7b      	ldr	r2, [pc, #492]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b6:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ce:	4b73      	ldr	r3, [pc, #460]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029e0:	f043 0308 	orr.w	r3, r3, #8
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <MX_GPIO_Init+0x220>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 80029f2:	2200      	movs	r2, #0
 80029f4:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80029f8:	4869      	ldr	r0, [pc, #420]	; (8002ba0 <MX_GPIO_Init+0x224>)
 80029fa:	f009 f99f 	bl	800bd3c <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2112      	movs	r1, #18
 8002a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a06:	f009 f999 	bl	800bd3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2125      	movs	r1, #37	; 0x25
 8002a0e:	4865      	ldr	r0, [pc, #404]	; (8002ba4 <MX_GPIO_Init+0x228>)
 8002a10:	f009 f994 	bl	800bd3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a1a:	4862      	ldr	r0, [pc, #392]	; (8002ba4 <MX_GPIO_Init+0x228>)
 8002a1c:	f009 f98e 	bl	800bd3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	485e      	ldr	r0, [pc, #376]	; (8002ba0 <MX_GPIO_Init+0x224>)
 8002a26:	f009 f989 	bl	800bd3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a34:	f009 f982 	bl	800bd3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	485a      	ldr	r0, [pc, #360]	; (8002ba8 <MX_GPIO_Init+0x22c>)
 8002a3e:	f009 f97d 	bl	800bd3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8002a42:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002a46:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4851      	ldr	r0, [pc, #324]	; (8002ba0 <MX_GPIO_Init+0x224>)
 8002a5c:	f008 ffdc 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8002a60:	f241 0302 	movw	r3, #4098	; 0x1002
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7c:	f008 ffcc 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8002a80:	2310      	movs	r3, #16
 8002a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9a:	f008 ffbd 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 8002a9e:	2325      	movs	r3, #37	; 0x25
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	483b      	ldr	r0, [pc, #236]	; (8002ba4 <MX_GPIO_Init+0x228>)
 8002ab6:	f008 ffaf 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8002aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4834      	ldr	r0, [pc, #208]	; (8002ba4 <MX_GPIO_Init+0x228>)
 8002ad4:	f008 ffa0 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pin : InputMachine1_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin;
 8002ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(InputMachine1_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4619      	mov	r1, r3
 8002aec:	482c      	ldr	r0, [pc, #176]	; (8002ba0 <MX_GPIO_Init+0x224>)
 8002aee:	f008 ff93 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ProductionInput1_Pin */
  GPIO_InitStruct.Pin = ProductionInput1_Pin;
 8002af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002af8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ProductionInput1_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <MX_GPIO_Init+0x224>)
 8002b0a:	f008 ff85 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ProductionInput2_Pin */
  GPIO_InitStruct.Pin = ProductionInput2_Pin;
 8002b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ProductionInput2_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b28:	f008 ff76 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 8002b2c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b44:	f008 ff68 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 8002b48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480f      	ldr	r0, [pc, #60]	; (8002ba0 <MX_GPIO_Init+0x224>)
 8002b62:	f008 ff59 	bl	800ba18 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8002b66:	2304      	movs	r3, #4
 8002b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <MX_GPIO_Init+0x22c>)
 8002b7e:	f008 ff4b 	bl	800ba18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2101      	movs	r1, #1
 8002b86:	2017      	movs	r0, #23
 8002b88:	f008 fe91 	bl	800b8ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b8c:	2017      	movs	r0, #23
 8002b8e:	f008 feaa 	bl	800b8e6 <HAL_NVIC_EnableIRQ>

}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000400 	.word	0x48000400
 8002ba8:	48000c00 	.word	0x48000c00

08002bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb0:	b672      	cpsid	i
}
 8002bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <Error_Handler+0x8>
	...

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_MspInit+0x44>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_MspInit+0x44>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_MspInit+0x44>)
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_MspInit+0x44>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_MspInit+0x44>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_MspInit+0x44>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b0a2      	sub	sp, #136	; 0x88
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2260      	movs	r2, #96	; 0x60
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f00e f815 	bl	8010c50 <memset>
  if(hi2c->Instance==I2C1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a20      	ldr	r2, [pc, #128]	; (8002cac <HAL_I2C_MspInit+0xac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d138      	bne.n	8002ca2 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f00a fd45 	bl	800d6cc <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c48:	f7ff ffb0 	bl	8002bac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c68:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6a:	2312      	movs	r3, #18
 8002c6c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c82:	4619      	mov	r1, r3
 8002c84:	480b      	ldr	r0, [pc, #44]	; (8002cb4 <HAL_I2C_MspInit+0xb4>)
 8002c86:	f008 fec7 	bl	800ba18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c94:	6593      	str	r3, [r2, #88]	; 0x58
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_I2C_MspInit+0xb0>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3788      	adds	r7, #136	; 0x88
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	48000400 	.word	0x48000400

08002cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0a6      	sub	sp, #152	; 0x98
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	2260      	movs	r2, #96	; 0x60
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f00d ffb9 	bl	8010c50 <memset>
  if(huart->Instance==LPUART1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	; (8002ea0 <HAL_UART_MspInit+0x1e8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d144      	bne.n	8002d72 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f00a fce9 	bl	800d6cc <HAL_RCCEx_PeriphCLKConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d00:	f7ff ff54 	bl	8002bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d04:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	4a66      	ldr	r2, [pc, #408]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d10:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	4a60      	ldr	r2, [pc, #384]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d4e:	2308      	movs	r3, #8
 8002d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4853      	ldr	r0, [pc, #332]	; (8002ea8 <HAL_UART_MspInit+0x1f0>)
 8002d5c:	f008 fe5c 	bl	800ba18 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2100      	movs	r1, #0
 8002d64:	2046      	movs	r0, #70	; 0x46
 8002d66:	f008 fda2 	bl	800b8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002d6a:	2046      	movs	r0, #70	; 0x46
 8002d6c:	f008 fdbb 	bl	800b8e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d70:	e091      	b.n	8002e96 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_UART_MspInit+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d143      	bne.n	8002e04 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d80:	2300      	movs	r3, #0
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00a fc9f 	bl	800d6cc <HAL_RCCEx_PeriphCLKConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002d94:	f7ff ff0a 	bl	8002bac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9c:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da2:	6613      	str	r3, [r2, #96]	; 0x60
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db0:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db4:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc8:	23c0      	movs	r3, #192	; 0xc0
 8002dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002de0:	2307      	movs	r3, #7
 8002de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002dea:	4619      	mov	r1, r3
 8002dec:	482e      	ldr	r0, [pc, #184]	; (8002ea8 <HAL_UART_MspInit+0x1f0>)
 8002dee:	f008 fe13 	bl	800ba18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2025      	movs	r0, #37	; 0x25
 8002df8:	f008 fd59 	bl	800b8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dfc:	2025      	movs	r0, #37	; 0x25
 8002dfe:	f008 fd72 	bl	800b8e6 <HAL_NVIC_EnableIRQ>
}
 8002e02:	e048      	b.n	8002e96 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_UART_MspInit+0x1f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d143      	bne.n	8002e96 <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e12:	2300      	movs	r3, #0
 8002e14:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f00a fc56 	bl	800d6cc <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002e26:	f7ff fec1 	bl	8002bac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_UART_MspInit+0x1ec>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e72:	2307      	movs	r3, #7
 8002e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e82:	f008 fdc9 	bl	800ba18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2026      	movs	r0, #38	; 0x26
 8002e8c:	f008 fd0f 	bl	800b8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e90:	2026      	movs	r0, #38	; 0x26
 8002e92:	f008 fd28 	bl	800b8e6 <HAL_NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3798      	adds	r7, #152	; 0x98
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40008000 	.word	0x40008000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	48000400 	.word	0x48000400
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40004400 	.word	0x40004400

08002eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_SPI_MspInit+0xdc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d129      	bne.n	8002f2a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eda:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f06:	23e0      	movs	r3, #224	; 0xe0
 8002f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f16:	2305      	movs	r3, #5
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f24:	f008 fd78 	bl	800ba18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f28:	e02d      	b.n	8002f86 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_SPI_MspInit+0xe4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d128      	bne.n	8002f86 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002f52:	f043 0302 	orr.w	r3, r3, #2
 8002f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_SPI_MspInit+0xe0>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f64:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f76:	2305      	movs	r3, #5
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4806      	ldr	r0, [pc, #24]	; (8002f9c <HAL_SPI_MspInit+0xe8>)
 8002f82:	f008 fd49 	bl	800ba18 <HAL_GPIO_Init>
}
 8002f86:	bf00      	nop
 8002f88:	3730      	adds	r7, #48	; 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40013000 	.word	0x40013000
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40003800 	.word	0x40003800
 8002f9c:	48000400 	.word	0x48000400

08002fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10c      	bne.n	8002fcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8002fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002fca:	e032      	b.n	8003032 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_TIM_Base_MspInit+0xa4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d114      	bne.n	8003000 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8002fdc:	f043 0310 	orr.w	r3, r3, #16
 8002fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	2036      	movs	r0, #54	; 0x36
 8002ff4:	f008 fc5b 	bl	800b8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ff8:	2036      	movs	r0, #54	; 0x36
 8002ffa:	f008 fc74 	bl	800b8e6 <HAL_NVIC_EnableIRQ>
}
 8002ffe:	e018      	b.n	8003032 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_TIM_Base_MspInit+0xa8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d113      	bne.n	8003032 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	2037      	movs	r0, #55	; 0x37
 8003028:	f008 fc41 	bl	800b8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800302c:	2037      	movs	r0, #55	; 0x37
 800302e:	f008 fc5a 	bl	800b8e6 <HAL_NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40001000 	.word	0x40001000
 8003048:	40001400 	.word	0x40001400

0800304c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003050:	e7fe      	b.n	8003050 <NMI_Handler+0x4>

08003052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003056:	e7fe      	b.n	8003056 <HardFault_Handler+0x4>

08003058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800305c:	e7fe      	b.n	800305c <MemManage_Handler+0x4>

0800305e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003062:	e7fe      	b.n	8003062 <BusFault_Handler+0x4>

08003064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <UsageFault_Handler+0x4>

0800306a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003098:	f008 faea 	bl	800b670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ProductionInput2_Pin);
 80030a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030a8:	f008 fe60 	bl	800bd6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ProductionInput1_Pin);
 80030ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030b0:	f008 fe5c 	bl	800bd6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <USART1_IRQHandler+0x10>)
 80030be:	f00c faed 	bl	800f69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000474 	.word	0x20000474

080030cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <USART2_IRQHandler+0x10>)
 80030d2:	f00c fae3 	bl	800f69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200004f8 	.word	0x200004f8

080030e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <TIM6_DAC_IRQHandler+0x10>)
 80030e6:	f00b fe35 	bl	800ed54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000690 	.word	0x20000690

080030f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM7_IRQHandler+0x10>)
 80030fa:	f00b fe2b 	bl	800ed54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200006dc 	.word	0x200006dc

08003108 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <LPUART1_IRQHandler+0x10>)
 800310e:	f00c fac5 	bl	800f69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200003f0 	.word	0x200003f0

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f00d fd40 	bl	8010bd0 <__errno>
 8003150:	4603      	mov	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <_sbrk+0x64>)
 800316c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20010000 	.word	0x20010000
 800317c:	00000400 	.word	0x00000400
 8003180:	20000738 	.word	0x20000738
 8003184:	20000f78 	.word	0x20000f78

08003188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <SystemInit+0x20>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <SystemInit+0x20>)
 8003194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	0092      	lsls	r2, r2, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <bin2bcd+0x44>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	08db      	lsrs	r3, r3, #3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	b258      	sxtb	r0, r3
 80031fa:	79fa      	ldrb	r2, [r7, #7]
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <bin2bcd+0x44>)
 80031fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003202:	08d9      	lsrs	r1, r3, #3
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	b25b      	sxtb	r3, r3
 8003212:	4303      	orrs	r3, r0
 8003214:	b25b      	sxtb	r3, r3
 8003216:	b2db      	uxtb	r3, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	cccccccd 	.word	0xcccccccd

08003228 <rtc_get_time>:

	rtc_write(0x07,rs);
}

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af04      	add	r7, sp, #16
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8003234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003238:	9302      	str	r3, [sp, #8]
 800323a:	2303      	movs	r3, #3
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2301      	movs	r3, #1
 8003246:	2200      	movs	r2, #0
 8003248:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800324c:	480f      	ldr	r0, [pc, #60]	; (800328c <rtc_get_time+0x64>)
 800324e:	f008 ff49 	bl	800c0e4 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*sec=bcd2bin(data[0]);
 8003252:	7d3b      	ldrb	r3, [r7, #20]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ffa9 	bl	80031ac <bcd2bin>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8003262:	7d7b      	ldrb	r3, [r7, #21]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ffa1 	bl	80031ac <bcd2bin>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8003272:	7dbb      	ldrb	r3, [r7, #22]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff99 	bl	80031ac <bcd2bin>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	701a      	strb	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000039c 	.word	0x2000039c

08003290 <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af04      	add	r7, sp, #16
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
 800329a:	460b      	mov	r3, r1
 800329c:	71bb      	strb	r3, [r7, #6]
 800329e:	4613      	mov	r3, r2
 80032a0:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 80032a2:	797b      	ldrb	r3, [r7, #5]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff9b 	bl	80031e0 <bin2bcd>
 80032aa:	4603      	mov	r3, r0
 80032ac:	733b      	strb	r3, [r7, #12]
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff95 	bl	80031e0 <bin2bcd>
 80032b6:	4603      	mov	r3, r0
 80032b8:	737b      	strb	r3, [r7, #13]
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff8f 	bl	80031e0 <bin2bcd>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	2303      	movs	r3, #3
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	2200      	movs	r2, #0
 80032da:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80032de:	4803      	ldr	r0, [pc, #12]	; (80032ec <rtc_set_time+0x5c>)
 80032e0:	f008 fdec 	bl	800bebc <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	2000039c 	.word	0x2000039c

080032f0 <rtc_get_date>:

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	2304      	movs	r3, #4
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2301      	movs	r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800331a:	4811      	ldr	r0, [pc, #68]	; (8003360 <rtc_get_date+0x70>)
 800331c:	f008 fee2 	bl	800c0e4 <HAL_I2C_Mem_Read>
	//	_Error_Handler(__FILE__,__LINE__);
	}

	*week_day=data[0];
 8003320:	7d3a      	ldrb	r2, [r7, #20]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8003326:	7d7b      	ldrb	r3, [r7, #21]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff3f 	bl	80031ac <bcd2bin>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8003336:	7dbb      	ldrb	r3, [r7, #22]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff37 	bl	80031ac <bcd2bin>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff2f 	bl	80031ac <bcd2bin>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	701a      	strb	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2000039c 	.word	0x2000039c

08003364 <rtc_set_date>:

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af04      	add	r7, sp, #16
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4623      	mov	r3, r4
 8003374:	71fb      	strb	r3, [r7, #7]
 8003376:	4603      	mov	r3, r0
 8003378:	71bb      	strb	r3, [r7, #6]
 800337a:	460b      	mov	r3, r1
 800337c:	717b      	strb	r3, [r7, #5]
 800337e:	4613      	mov	r3, r2
 8003380:	713b      	strb	r3, [r7, #4]
	uint8_t data[4]={week_day,bin2bcd(day),bin2bcd(month),bin2bcd(year)};
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	733b      	strb	r3, [r7, #12]
 8003386:	79bb      	ldrb	r3, [r7, #6]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff29 	bl	80031e0 <bin2bcd>
 800338e:	4603      	mov	r3, r0
 8003390:	737b      	strb	r3, [r7, #13]
 8003392:	797b      	ldrb	r3, [r7, #5]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff23 	bl	80031e0 <bin2bcd>
 800339a:	4603      	mov	r3, r0
 800339c:	73bb      	strb	r3, [r7, #14]
 800339e:	793b      	ldrb	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff1d 	bl	80031e0 <bin2bcd>
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 80033aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	2304      	movs	r3, #4
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80033c2:	4803      	ldr	r0, [pc, #12]	; (80033d0 <rtc_set_date+0x6c>)
 80033c4:	f008 fd7a 	bl	800bebc <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	2000039c 	.word	0x2000039c

080033d4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80033de:	f107 020f 	add.w	r2, r7, #15
 80033e2:	1df9      	adds	r1, r7, #7
 80033e4:	2364      	movs	r3, #100	; 0x64
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	4804      	ldr	r0, [pc, #16]	; (80033fc <W25qxx_Spi+0x28>)
 80033ec:	f00a ffeb 	bl	800e3c6 <HAL_SPI_TransmitReceive>
	return ret;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000057c 	.word	0x2000057c

08003400 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	2300      	movs	r3, #0
 8003414:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003416:	2200      	movs	r2, #0
 8003418:	2101      	movs	r1, #1
 800341a:	4813      	ldr	r0, [pc, #76]	; (8003468 <W25qxx_ReadID+0x68>)
 800341c:	f008 fc8e 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003420:	209f      	movs	r0, #159	; 0x9f
 8003422:	f7ff ffd7 	bl	80033d4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003426:	20a5      	movs	r0, #165	; 0xa5
 8003428:	f7ff ffd4 	bl	80033d4 <W25qxx_Spi>
 800342c:	4603      	mov	r3, r0
 800342e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003430:	20a5      	movs	r0, #165	; 0xa5
 8003432:	f7ff ffcf 	bl	80033d4 <W25qxx_Spi>
 8003436:	4603      	mov	r3, r0
 8003438:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800343a:	20a5      	movs	r0, #165	; 0xa5
 800343c:	f7ff ffca 	bl	80033d4 <W25qxx_Spi>
 8003440:	4603      	mov	r3, r0
 8003442:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003444:	2201      	movs	r2, #1
 8003446:	2101      	movs	r1, #1
 8003448:	4807      	ldr	r0, [pc, #28]	; (8003468 <W25qxx_ReadID+0x68>)
 800344a:	f008 fc77 	bl	800bd3c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	4313      	orrs	r3, r2
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	48000400 	.word	0x48000400

0800346c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003472:	2200      	movs	r2, #0
 8003474:	2101      	movs	r1, #1
 8003476:	4816      	ldr	r0, [pc, #88]	; (80034d0 <W25qxx_ReadUniqID+0x64>)
 8003478:	f008 fc60 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800347c:	204b      	movs	r0, #75	; 0x4b
 800347e:	f7ff ffa9 	bl	80033d4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	71fb      	strb	r3, [r7, #7]
 8003486:	e005      	b.n	8003494 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003488:	20a5      	movs	r0, #165	; 0xa5
 800348a:	f7ff ffa3 	bl	80033d4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	3301      	adds	r3, #1
 8003492:	71fb      	strb	r3, [r7, #7]
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d9f6      	bls.n	8003488 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	71bb      	strb	r3, [r7, #6]
 800349e:	e00b      	b.n	80034b8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80034a0:	79bc      	ldrb	r4, [r7, #6]
 80034a2:	20a5      	movs	r0, #165	; 0xa5
 80034a4:	f7ff ff96 	bl	80033d4 <W25qxx_Spi>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <W25qxx_ReadUniqID+0x68>)
 80034ae:	4423      	add	r3, r4
 80034b0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80034b2:	79bb      	ldrb	r3, [r7, #6]
 80034b4:	3301      	adds	r3, #1
 80034b6:	71bb      	strb	r3, [r7, #6]
 80034b8:	79bb      	ldrb	r3, [r7, #6]
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d9f0      	bls.n	80034a0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	2101      	movs	r1, #1
 80034c2:	4803      	ldr	r0, [pc, #12]	; (80034d0 <W25qxx_ReadUniqID+0x64>)
 80034c4:	f008 fc3a 	bl	800bd3c <HAL_GPIO_WritePin>
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	48000400 	.word	0x48000400
 80034d4:	2000073c 	.word	0x2000073c

080034d8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80034dc:	2200      	movs	r2, #0
 80034de:	2101      	movs	r1, #1
 80034e0:	4807      	ldr	r0, [pc, #28]	; (8003500 <W25qxx_WriteEnable+0x28>)
 80034e2:	f008 fc2b 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80034e6:	2006      	movs	r0, #6
 80034e8:	f7ff ff74 	bl	80033d4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034ec:	2201      	movs	r2, #1
 80034ee:	2101      	movs	r1, #1
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <W25qxx_WriteEnable+0x28>)
 80034f2:	f008 fc23 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f008 f8da 	bl	800b6b0 <HAL_Delay>
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	48000400 	.word	0x48000400

08003504 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003512:	2200      	movs	r2, #0
 8003514:	2101      	movs	r1, #1
 8003516:	481c      	ldr	r0, [pc, #112]	; (8003588 <W25qxx_ReadStatusRegister+0x84>)
 8003518:	f008 fc10 	bl	800bd3c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10c      	bne.n	800353c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003522:	2005      	movs	r0, #5
 8003524:	f7ff ff56 	bl	80033d4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003528:	20a5      	movs	r0, #165	; 0xa5
 800352a:	f7ff ff53 	bl	80033d4 <W25qxx_Spi>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <W25qxx_ReadStatusRegister+0x88>)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800353a:	e01b      	b.n	8003574 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d10c      	bne.n	800355c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003542:	2035      	movs	r0, #53	; 0x35
 8003544:	f7ff ff46 	bl	80033d4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003548:	20a5      	movs	r0, #165	; 0xa5
 800354a:	f7ff ff43 	bl	80033d4 <W25qxx_Spi>
 800354e:	4603      	mov	r3, r0
 8003550:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <W25qxx_ReadStatusRegister+0x88>)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800355a:	e00b      	b.n	8003574 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800355c:	2015      	movs	r0, #21
 800355e:	f7ff ff39 	bl	80033d4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003562:	20a5      	movs	r0, #165	; 0xa5
 8003564:	f7ff ff36 	bl	80033d4 <W25qxx_Spi>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <W25qxx_ReadStatusRegister+0x88>)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003574:	2201      	movs	r2, #1
 8003576:	2101      	movs	r1, #1
 8003578:	4803      	ldr	r0, [pc, #12]	; (8003588 <W25qxx_ReadStatusRegister+0x84>)
 800357a:	f008 fbdf 	bl	800bd3c <HAL_GPIO_WritePin>
	return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	48000400 	.word	0x48000400
 800358c:	2000073c 	.word	0x2000073c

08003590 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003594:	2001      	movs	r0, #1
 8003596:	f008 f88b 	bl	800b6b0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800359a:	2200      	movs	r2, #0
 800359c:	2101      	movs	r1, #1
 800359e:	480f      	ldr	r0, [pc, #60]	; (80035dc <W25qxx_WaitForWriteEnd+0x4c>)
 80035a0:	f008 fbcc 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80035a4:	2005      	movs	r0, #5
 80035a6:	f7ff ff15 	bl	80033d4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80035aa:	20a5      	movs	r0, #165	; 0xa5
 80035ac:	f7ff ff12 	bl	80033d4 <W25qxx_Spi>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <W25qxx_WaitForWriteEnd+0x50>)
 80035b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f008 f878 	bl	800b6b0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <W25qxx_WaitForWriteEnd+0x50>)
 80035c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ed      	bne.n	80035aa <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80035ce:	2201      	movs	r2, #1
 80035d0:	2101      	movs	r1, #1
 80035d2:	4802      	ldr	r0, [pc, #8]	; (80035dc <W25qxx_WaitForWriteEnd+0x4c>)
 80035d4:	f008 fbb2 	bl	800bd3c <HAL_GPIO_WritePin>
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	48000400 	.word	0x48000400
 80035e0:	2000073c 	.word	0x2000073c

080035e4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <W25qxx_Init+0x19c>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80035f2:	e002      	b.n	80035fa <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f008 f85b 	bl	800b6b0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80035fa:	f008 f84d 	bl	800b698 <HAL_GetTick>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b63      	cmp	r3, #99	; 0x63
 8003602:	d9f7      	bls.n	80035f4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003604:	2201      	movs	r2, #1
 8003606:	2101      	movs	r1, #1
 8003608:	485e      	ldr	r0, [pc, #376]	; (8003784 <W25qxx_Init+0x1a0>)
 800360a:	f008 fb97 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800360e:	2064      	movs	r0, #100	; 0x64
 8003610:	f008 f84e 	bl	800b6b0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8003614:	f7ff fef4 	bl	8003400 <W25qxx_ReadID>
 8003618:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3b11      	subs	r3, #17
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d86c      	bhi.n	80036fe <W25qxx_Init+0x11a>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <W25qxx_Init+0x48>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	080036f1 	.word	0x080036f1
 8003630:	080036e3 	.word	0x080036e3
 8003634:	080036d5 	.word	0x080036d5
 8003638:	080036c7 	.word	0x080036c7
 800363c:	080036b9 	.word	0x080036b9
 8003640:	080036ab 	.word	0x080036ab
 8003644:	0800369d 	.word	0x0800369d
 8003648:	0800368d 	.word	0x0800368d
 800364c:	0800367d 	.word	0x0800367d
 8003650:	080036ff 	.word	0x080036ff
 8003654:	080036ff 	.word	0x080036ff
 8003658:	080036ff 	.word	0x080036ff
 800365c:	080036ff 	.word	0x080036ff
 8003660:	080036ff 	.word	0x080036ff
 8003664:	080036ff 	.word	0x080036ff
 8003668:	0800366d 	.word	0x0800366d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800366c:	4b44      	ldr	r3, [pc, #272]	; (8003780 <W25qxx_Init+0x19c>)
 800366e:	220a      	movs	r2, #10
 8003670:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003672:	4b43      	ldr	r3, [pc, #268]	; (8003780 <W25qxx_Init+0x19c>)
 8003674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003678:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800367a:	e046      	b.n	800370a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <W25qxx_Init+0x19c>)
 800367e:	2209      	movs	r2, #9
 8003680:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003682:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <W25qxx_Init+0x19c>)
 8003684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003688:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800368a:	e03e      	b.n	800370a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800368c:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <W25qxx_Init+0x19c>)
 800368e:	2208      	movs	r2, #8
 8003690:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003692:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <W25qxx_Init+0x19c>)
 8003694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003698:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800369a:	e036      	b.n	800370a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800369c:	4b38      	ldr	r3, [pc, #224]	; (8003780 <W25qxx_Init+0x19c>)
 800369e:	2207      	movs	r2, #7
 80036a0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <W25qxx_Init+0x19c>)
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80036a8:	e02f      	b.n	800370a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <W25qxx_Init+0x19c>)
 80036ac:	2206      	movs	r2, #6
 80036ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <W25qxx_Init+0x19c>)
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80036b6:	e028      	b.n	800370a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80036b8:	4b31      	ldr	r3, [pc, #196]	; (8003780 <W25qxx_Init+0x19c>)
 80036ba:	2205      	movs	r2, #5
 80036bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80036be:	4b30      	ldr	r3, [pc, #192]	; (8003780 <W25qxx_Init+0x19c>)
 80036c0:	2220      	movs	r2, #32
 80036c2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80036c4:	e021      	b.n	800370a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80036c6:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <W25qxx_Init+0x19c>)
 80036c8:	2204      	movs	r2, #4
 80036ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80036cc:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <W25qxx_Init+0x19c>)
 80036ce:	2210      	movs	r2, #16
 80036d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80036d2:	e01a      	b.n	800370a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <W25qxx_Init+0x19c>)
 80036d6:	2203      	movs	r2, #3
 80036d8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <W25qxx_Init+0x19c>)
 80036dc:	2208      	movs	r2, #8
 80036de:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80036e0:	e013      	b.n	800370a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <W25qxx_Init+0x19c>)
 80036e4:	2202      	movs	r2, #2
 80036e6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <W25qxx_Init+0x19c>)
 80036ea:	2204      	movs	r2, #4
 80036ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80036ee:	e00c      	b.n	800370a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <W25qxx_Init+0x19c>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <W25qxx_Init+0x19c>)
 80036f8:	2202      	movs	r2, #2
 80036fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80036fc:	e005      	b.n	800370a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <W25qxx_Init+0x19c>)
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003706:	2300      	movs	r3, #0
 8003708:	e036      	b.n	8003778 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <W25qxx_Init+0x19c>)
 800370c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003710:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <W25qxx_Init+0x19c>)
 8003714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003718:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <W25qxx_Init+0x19c>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <W25qxx_Init+0x19c>)
 8003722:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <W25qxx_Init+0x19c>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <W25qxx_Init+0x19c>)
 800372a:	6912      	ldr	r2, [r2, #16]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <W25qxx_Init+0x19c>)
 8003732:	8952      	ldrh	r2, [r2, #10]
 8003734:	fbb3 f3f2 	udiv	r3, r3, r2
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <W25qxx_Init+0x19c>)
 800373a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <W25qxx_Init+0x19c>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <W25qxx_Init+0x19c>)
 8003744:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <W25qxx_Init+0x19c>)
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <W25qxx_Init+0x19c>)
 800374c:	6912      	ldr	r2, [r2, #16]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	0a9b      	lsrs	r3, r3, #10
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <W25qxx_Init+0x19c>)
 8003756:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003758:	f7ff fe88 	bl	800346c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800375c:	2001      	movs	r0, #1
 800375e:	f7ff fed1 	bl	8003504 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003762:	2002      	movs	r0, #2
 8003764:	f7ff fece 	bl	8003504 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003768:	2003      	movs	r0, #3
 800376a:	f7ff fecb 	bl	8003504 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <W25qxx_Init+0x19c>)
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	2000073c 	.word	0x2000073c
 8003784:	48000400 	.word	0x48000400

08003788 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003790:	e002      	b.n	8003798 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003792:	2001      	movs	r0, #1
 8003794:	f007 ff8c 	bl	800b6b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <W25qxx_EraseSector+0xa8>)
 800379a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d0f7      	beq.n	8003792 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <W25qxx_EraseSector+0xa8>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80037aa:	f7ff fef1 	bl	8003590 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <W25qxx_EraseSector+0xa8>)
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80037ba:	f7ff fe8d 	bl	80034d8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80037be:	2200      	movs	r2, #0
 80037c0:	2101      	movs	r1, #1
 80037c2:	481c      	ldr	r0, [pc, #112]	; (8003834 <W25qxx_EraseSector+0xac>)
 80037c4:	f008 faba 	bl	800bd3c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <W25qxx_EraseSector+0xa8>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d909      	bls.n	80037e4 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80037d0:	2021      	movs	r0, #33	; 0x21
 80037d2:	f7ff fdff 	bl	80033d4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0e1b      	lsrs	r3, r3, #24
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fdf9 	bl	80033d4 <W25qxx_Spi>
 80037e2:	e002      	b.n	80037ea <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80037e4:	2020      	movs	r0, #32
 80037e6:	f7ff fdf5 	bl	80033d4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fdef 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fde9 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fde4 	bl	80033d4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800380c:	2201      	movs	r2, #1
 800380e:	2101      	movs	r1, #1
 8003810:	4808      	ldr	r0, [pc, #32]	; (8003834 <W25qxx_EraseSector+0xac>)
 8003812:	f008 fa93 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003816:	f7ff febb 	bl	8003590 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 800381a:	2001      	movs	r0, #1
 800381c:	f007 ff48 	bl	800b6b0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <W25qxx_EraseSector+0xa8>)
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	2000073c 	.word	0x2000073c
 8003834:	48000400 	.word	0x48000400

08003838 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <W25qxx_SectorToPage+0x28>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	4a05      	ldr	r2, [pc, #20]	; (8003860 <W25qxx_SectorToPage+0x28>)
 800384c:	8952      	ldrh	r2, [r2, #10]
 800384e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	2000073c 	.word	0x2000073c

08003864 <W25qxx_IsEmptySector>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	; 0x40
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8003870:	e002      	b.n	8003878 <W25qxx_IsEmptySector+0x14>
		W25qxx_Delay(1);
 8003872:	2001      	movs	r0, #1
 8003874:	f007 ff1c 	bl	800b6b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003878:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 800387a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800387e:	2b01      	cmp	r3, #1
 8003880:	d0f7      	beq.n	8003872 <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock = 1;
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToCheck_up_to_SectorSize == 0))
 800388a:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d802      	bhi.n	800389a <W25qxx_IsEmptySector+0x36>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 800389a:	4b64      	ldr	r3, [pc, #400]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	607b      	str	r3, [r7, #4]
	uint32_t StartTime = HAL_GetTick();
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a4:	e055      	b.n	8003952 <W25qxx_IsEmptySector+0xee>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2101      	movs	r1, #1
 80038aa:	4861      	ldr	r0, [pc, #388]	; (8003a30 <W25qxx_IsEmptySector+0x1cc>)
 80038ac:	f008 fa46 	bl	800bd3c <HAL_GPIO_WritePin>
		WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80038b0:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038bc:	4413      	add	r3, r2
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
		if (w25qxx.ID >= W25Q256)
 80038c0:	4b5a      	ldr	r3, [pc, #360]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d909      	bls.n	80038dc <W25qxx_IsEmptySector+0x78>
		{
			W25qxx_Spi(0x0C);
 80038c8:	200c      	movs	r0, #12
 80038ca:	f7ff fd83 	bl	80033d4 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	0e1b      	lsrs	r3, r3, #24
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fd7d 	bl	80033d4 <W25qxx_Spi>
 80038da:	e002      	b.n	80038e2 <W25qxx_IsEmptySector+0x7e>
		}
		else
		{
			W25qxx_Spi(0x0B);
 80038dc:	200b      	movs	r0, #11
 80038de:	f7ff fd79 	bl	80033d4 <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fd73 	bl	80033d4 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fd6d 	bl	80033d4 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fd68 	bl	80033d4 <W25qxx_Spi>
		W25qxx_Spi(0);
 8003904:	2000      	movs	r0, #0
 8003906:	f7ff fd65 	bl	80033d4 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 800390a:	f107 0114 	add.w	r1, r7, #20
 800390e:	2364      	movs	r3, #100	; 0x64
 8003910:	2220      	movs	r2, #32
 8003912:	4848      	ldr	r0, [pc, #288]	; (8003a34 <W25qxx_IsEmptySector+0x1d0>)
 8003914:	f00a fc27 	bl	800e166 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003918:	2201      	movs	r2, #1
 800391a:	2101      	movs	r1, #1
 800391c:	4844      	ldr	r0, [pc, #272]	; (8003a30 <W25qxx_IsEmptySector+0x1cc>)
 800391e:	f008 fa0d 	bl	800bd3c <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8003922:	2300      	movs	r3, #0
 8003924:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003928:	e00c      	b.n	8003944 <W25qxx_IsEmptySector+0xe0>
		{
			if (pBuffer[x] != 0xFF)
 800392a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800392e:	3340      	adds	r3, #64	; 0x40
 8003930:	443b      	add	r3, r7
 8003932:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003936:	2bff      	cmp	r3, #255	; 0xff
 8003938:	d16b      	bne.n	8003a12 <W25qxx_IsEmptySector+0x1ae>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 800393a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800393e:	3301      	adds	r3, #1
 8003940:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003944:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003948:	2b1f      	cmp	r3, #31
 800394a:	d9ee      	bls.n	800392a <W25qxx_IsEmptySector+0xc6>
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	3320      	adds	r3, #32
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003958:	429a      	cmp	r2, r3
 800395a:	d3a4      	bcc.n	80038a6 <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0)
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4413      	add	r3, r2
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04c      	beq.n	8003a06 <W25qxx_IsEmptySector+0x1a2>
	{
		i -= sizeof(pBuffer);
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	3b20      	subs	r3, #32
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.SectorSize; i++)
 8003972:	e043      	b.n	80039fc <W25qxx_IsEmptySector+0x198>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003974:	2200      	movs	r2, #0
 8003976:	2101      	movs	r1, #1
 8003978:	482d      	ldr	r0, [pc, #180]	; (8003a30 <W25qxx_IsEmptySector+0x1cc>)
 800397a:	f008 f9df 	bl	800bd3c <HAL_GPIO_WritePin>
			WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800398a:	4413      	add	r3, r2
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
			if (w25qxx.ID >= W25Q256)
 800398e:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b08      	cmp	r3, #8
 8003994:	d909      	bls.n	80039aa <W25qxx_IsEmptySector+0x146>
			{
				W25qxx_Spi(0x0C);
 8003996:	200c      	movs	r0, #12
 8003998:	f7ff fd1c 	bl	80033d4 <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fd16 	bl	80033d4 <W25qxx_Spi>
 80039a8:	e002      	b.n	80039b0 <W25qxx_IsEmptySector+0x14c>
			}
			else
			{
				W25qxx_Spi(0x0B);
 80039aa:	200b      	movs	r0, #11
 80039ac:	f7ff fd12 	bl	80033d4 <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fd0c 	bl	80033d4 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fd06 	bl	80033d4 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fd01 	bl	80033d4 <W25qxx_Spi>
			W25qxx_Spi(0);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7ff fcfe 	bl	80033d4 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 80039d8:	f107 0114 	add.w	r1, r7, #20
 80039dc:	2364      	movs	r3, #100	; 0x64
 80039de:	2201      	movs	r2, #1
 80039e0:	4814      	ldr	r0, [pc, #80]	; (8003a34 <W25qxx_IsEmptySector+0x1d0>)
 80039e2:	f00a fbc0 	bl	800e166 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80039e6:	2201      	movs	r2, #1
 80039e8:	2101      	movs	r1, #1
 80039ea:	4811      	ldr	r0, [pc, #68]	; (8003a30 <W25qxx_IsEmptySector+0x1cc>)
 80039ec:	f008 f9a6 	bl	800bd3c <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 80039f0:	7d3b      	ldrb	r3, [r7, #20]
 80039f2:	2bff      	cmp	r3, #255	; 0xff
 80039f4:	d10f      	bne.n	8003a16 <W25qxx_IsEmptySector+0x1b2>
		for (; i < w25qxx.SectorSize; i++)
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	3301      	adds	r3, #1
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d3b6      	bcc.n	8003974 <W25qxx_IsEmptySector+0x110>
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e007      	b.n	8003a22 <W25qxx_IsEmptySector+0x1be>
				goto NOT_EMPTY;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <W25qxx_IsEmptySector+0x1b4>
				goto NOT_EMPTY;
 8003a16:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <W25qxx_IsEmptySector+0x1c8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3740      	adds	r7, #64	; 0x40
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000073c 	.word	0x2000073c
 8003a30:	48000400 	.word	0x48000400
 8003a34:	2000057c 	.word	0x2000057c

08003a38 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003a46:	e002      	b.n	8003a4e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f007 fe31 	bl	800b6b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003a50:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d0f7      	beq.n	8003a48 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003a58:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003a68:	8952      	ldrh	r2, [r2, #10]
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d802      	bhi.n	8003a74 <W25qxx_WritePage+0x3c>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003a74:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003a76:	895b      	ldrh	r3, [r3, #10]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003a88:	8952      	ldrh	r2, [r2, #10]
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d905      	bls.n	8003a9a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003a90:	895b      	ldrh	r3, [r3, #10]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8003a9a:	f7ff fd79 	bl	8003590 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003a9e:	f7ff fd1b 	bl	80034d8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4824      	ldr	r0, [pc, #144]	; (8003b38 <W25qxx_WritePage+0x100>)
 8003aa8:	f008 f948 	bl	800bd3c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003aae:	895b      	ldrh	r3, [r3, #10]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d909      	bls.n	8003ada <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8003ac6:	2012      	movs	r0, #18
 8003ac8:	f7ff fc84 	bl	80033d4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	0e1b      	lsrs	r3, r3, #24
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fc7e 	bl	80033d4 <W25qxx_Spi>
 8003ad8:	e002      	b.n	8003ae0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003ada:	2002      	movs	r0, #2
 8003adc:	f7ff fc7a 	bl	80033d4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fc74 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fc6e 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fc69 	bl	80033d4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	2364      	movs	r3, #100	; 0x64
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	480c      	ldr	r0, [pc, #48]	; (8003b3c <W25qxx_WritePage+0x104>)
 8003b0c:	f00a f9bd 	bl	800de8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b10:	2201      	movs	r2, #1
 8003b12:	2101      	movs	r1, #1
 8003b14:	4808      	ldr	r0, [pc, #32]	; (8003b38 <W25qxx_WritePage+0x100>)
 8003b16:	f008 f911 	bl	800bd3c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003b1a:	f7ff fd39 	bl	8003590 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f007 fdc6 	bl	800b6b0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <W25qxx_WritePage+0xfc>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	2000073c 	.word	0x2000073c
 8003b38:	48000400 	.word	0x48000400
 8003b3c:	2000057c 	.word	0x2000057c

08003b40 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d802      	bhi.n	8003b5e <W25qxx_WriteSector+0x1e>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d243      	bcs.n	8003bf6 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	441a      	add	r2, r3
 8003b74:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d905      	bls.n	8003b88 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e001      	b.n	8003b8c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	f7ff fe53 	bl	8003838 <W25qxx_SectorToPage>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003b96:	895b      	ldrh	r3, [r3, #10]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003ba6:	895b      	ldrh	r3, [r3, #10]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bb0:	fb01 f202 	mul.w	r2, r1, r2
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff ff3a 	bl	8003a38 <W25qxx_WritePage>
		StartPage++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003bcc:	895b      	ldrh	r3, [r3, #10]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1a9a      	subs	r2, r3, r2
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <W25qxx_WriteSector+0xc0>)
 8003bdc:	895b      	ldrh	r3, [r3, #10]
 8003bde:	461a      	mov	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	dce1      	bgt.n	8003bb8 <W25qxx_WriteSector+0x78>
 8003bf4:	e000      	b.n	8003bf8 <W25qxx_WriteSector+0xb8>
		return;
 8003bf6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	2000073c 	.word	0x2000073c

08003c04 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003c12:	e002      	b.n	8003c1a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f007 fd4b 	bl	800b6b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c1c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d0f7      	beq.n	8003c14 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003c24:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c2e:	895b      	ldrh	r3, [r3, #10]
 8003c30:	461a      	mov	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d802      	bhi.n	8003c3e <W25qxx_ReadPage+0x3a>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c40:	895b      	ldrh	r3, [r3, #10]
 8003c42:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c4c:	8952      	ldrh	r2, [r2, #10]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d905      	bls.n	8003c5e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c54:	895b      	ldrh	r3, [r3, #10]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003c5e:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c60:	895b      	ldrh	r3, [r3, #10]
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c70:	2200      	movs	r2, #0
 8003c72:	2101      	movs	r1, #1
 8003c74:	4820      	ldr	r0, [pc, #128]	; (8003cf8 <W25qxx_ReadPage+0xf4>)
 8003c76:	f008 f861 	bl	800bd3c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d909      	bls.n	8003c96 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8003c82:	200c      	movs	r0, #12
 8003c84:	f7ff fba6 	bl	80033d4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0e1b      	lsrs	r3, r3, #24
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fba0 	bl	80033d4 <W25qxx_Spi>
 8003c94:	e002      	b.n	8003c9c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003c96:	200b      	movs	r0, #11
 8003c98:	f7ff fb9c 	bl	80033d4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fb96 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fb90 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fb8b 	bl	80033d4 <W25qxx_Spi>
	W25qxx_Spi(0);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7ff fb88 	bl	80033d4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	2364      	movs	r3, #100	; 0x64
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	480b      	ldr	r0, [pc, #44]	; (8003cfc <W25qxx_ReadPage+0xf8>)
 8003cce:	f00a fa4a 	bl	800e166 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4808      	ldr	r0, [pc, #32]	; (8003cf8 <W25qxx_ReadPage+0xf4>)
 8003cd8:	f008 f830 	bl	800bd3c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f007 fce7 	bl	800b6b0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <W25qxx_ReadPage+0xf0>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000073c 	.word	0x2000073c
 8003cf8:	48000400 	.word	0x48000400
 8003cfc:	2000057c 	.word	0x2000057c

08003d00 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003d0e:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d802      	bhi.n	8003d1e <W25qxx_ReadSector+0x1e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003d24:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d243      	bcs.n	8003db6 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	441a      	add	r2, r3
 8003d34:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d905      	bls.n	8003d48 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003d3c:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e001      	b.n	8003d4c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003d4c:	68b8      	ldr	r0, [r7, #8]
 8003d4e:	f7ff fd73 	bl	8003838 <W25qxx_SectorToPage>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d56:	895b      	ldrh	r3, [r3, #10]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d66:	895b      	ldrh	r3, [r3, #10]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d70:	fb01 f202 	mul.w	r2, r1, r2
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	69f9      	ldr	r1, [r7, #28]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff ff40 	bl	8003c04 <W25qxx_ReadPage>
		StartPage++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d8c:	895b      	ldrh	r3, [r3, #10]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1a9a      	subs	r2, r3, r2
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <W25qxx_ReadSector+0xc0>)
 8003d9c:	895b      	ldrh	r3, [r3, #10]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	dce1      	bgt.n	8003d78 <W25qxx_ReadSector+0x78>
 8003db4:	e000      	b.n	8003db8 <W25qxx_ReadSector+0xb8>
		return;
 8003db6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000073c 	.word	0x2000073c

08003dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003dc8:	f7ff f9de 	bl	8003188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dcc:	480c      	ldr	r0, [pc, #48]	; (8003e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dce:	490d      	ldr	r1, [pc, #52]	; (8003e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <LoopForever+0xe>)
  movs r3, #0
 8003dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dd4:	e002      	b.n	8003ddc <LoopCopyDataInit>

08003dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dda:	3304      	adds	r3, #4

08003ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de0:	d3f9      	bcc.n	8003dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003de4:	4c0a      	ldr	r4, [pc, #40]	; (8003e10 <LoopForever+0x16>)
  movs r3, #0
 8003de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003de8:	e001      	b.n	8003dee <LoopFillZerobss>

08003dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dec:	3204      	adds	r2, #4

08003dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df0:	d3fb      	bcc.n	8003dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003df2:	f00c fef3 	bl	8010bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003df6:	f7fe faff 	bl	80023f8 <main>

08003dfa <LoopForever>:

LoopForever:
    b LoopForever
 8003dfa:	e7fe      	b.n	8003dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003dfc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e04:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003e08:	08011b0c 	.word	0x08011b0c
  ldr r2, =_sbss
 8003e0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003e10:	20000f74 	.word	0x20000f74

08003e14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e14:	e7fe      	b.n	8003e14 <ADC1_IRQHandler>
	...

08003e18 <_ZN9LpdcLogicC1Ev>:
uint16_t requirementIdK1;
uint16_t productionTarget;
uint8_t triggerStartForReq;


LpdcLogic::LpdcLogic() {
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <_ZN9LpdcLogicC1Ev+0x24>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	721a      	strb	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	08011a28 	.word	0x08011a28

08003e40 <_ZN9LpdcLogicD1Ev>:

LpdcLogic::~LpdcLogic() {
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <_ZN9LpdcLogicD1Ev+0x1c>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	08011a28 	.word	0x08011a28

08003e60 <_ZN9LpdcLogicD0Ev>:
LpdcLogic::~LpdcLogic() {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
}
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe9 	bl	8003e40 <_ZN9LpdcLogicD1Ev>
 8003e6e:	210c      	movs	r1, #12
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f00c fea8 	bl	8010bc6 <_ZdlPvj>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZN9LpdcLogic3runEv>:

void LpdcLogic::run()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	shiftChange();
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f80d 	bl	8003ea8 <_ZN9LpdcLogic11shiftChangeEv>
	machineControl();
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f88c 	bl	8003fac <_ZN9LpdcLogic14machineControlEv>
	productChange();
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f847 	bl	8003f28 <_ZN9LpdcLogic13productChangeEv>
	mAlarmControl();
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f87c 	bl	8003f98 <_ZN9LpdcLogic13mAlarmControlEv>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_ZN9LpdcLogic11shiftChangeEv>:

void LpdcLogic::shiftChange()
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	if((CurrentShift != CurrentShift_K1)&&(UpdateShiftInfo==1))
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d01c      	beq.n	8003ef6 <_ZN9LpdcLogic11shiftChangeEv+0x4e>
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d118      	bne.n	8003ef6 <_ZN9LpdcLogic11shiftChangeEv+0x4e>
	{
		MAC_Gen_Prod_Input1_Production=0;
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <_ZN9LpdcLogic11shiftChangeEv+0x68>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <_ZN9LpdcLogic11shiftChangeEv+0x6c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <_ZN9LpdcLogic11shiftChangeEv+0x70>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_ZN9LpdcLogic11shiftChangeEv+0x74>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <_ZN9LpdcLogic11shiftChangeEv+0x78>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	801a      	strh	r2, [r3, #0]
		UpdateShiftInfo=0;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
		CurrentShift_K1= CurrentShift;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 8003eee:	701a      	strb	r2, [r3, #0]
		IsCurrentShiftUpdated=1;
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <_ZN9LpdcLogic11shiftChangeEv+0x7c>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
	}
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000a23 	.word	0x20000a23
 8003f08:	20000772 	.word	0x20000772
 8003f0c:	20000a24 	.word	0x20000a24
 8003f10:	20000768 	.word	0x20000768
 8003f14:	2000076c 	.word	0x2000076c
 8003f18:	20000770 	.word	0x20000770
 8003f1c:	2000076a 	.word	0x2000076a
 8003f20:	2000076e 	.word	0x2000076e
 8003f24:	20000773 	.word	0x20000773

08003f28 <_ZN9LpdcLogic13productChangeEv>:

void LpdcLogic::productChange()
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	if((productChangeOL ==1)&&(Debounce_productChangeOL ==1))	  /*reset due to product change*/
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_ZN9LpdcLogic13productChangeEv+0x58>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d116      	bne.n	8003f66 <_ZN9LpdcLogic13productChangeEv+0x3e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7a1b      	ldrb	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d112      	bne.n	8003f66 <_ZN9LpdcLogic13productChangeEv+0x3e>
	  {
		MAC_Gen_Prod_Input1_Production=0;
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <_ZN9LpdcLogic13productChangeEv+0x5c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <_ZN9LpdcLogic13productChangeEv+0x60>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <_ZN9LpdcLogic13productChangeEv+0x64>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <_ZN9LpdcLogic13productChangeEv+0x68>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <_ZN9LpdcLogic13productChangeEv+0x6c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	801a      	strh	r2, [r3, #0]
		Debounce_productChangeOL=0;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	721a      	strb	r2, [r3, #8]
	  }
	  else if(productChangeOL==0)
	  {
	  	Debounce_productChangeOL=1;
	  }
}
 8003f64:	e006      	b.n	8003f74 <_ZN9LpdcLogic13productChangeEv+0x4c>
	  else if(productChangeOL==0)
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <_ZN9LpdcLogic13productChangeEv+0x58>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <_ZN9LpdcLogic13productChangeEv+0x4c>
	  	Debounce_productChangeOL=1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	721a      	strb	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	200000fc 	.word	0x200000fc
 8003f84:	20000768 	.word	0x20000768
 8003f88:	2000076c 	.word	0x2000076c
 8003f8c:	20000770 	.word	0x20000770
 8003f90:	2000076a 	.word	0x2000076a
 8003f94:	2000076e 	.word	0x2000076e

08003f98 <_ZN9LpdcLogic13mAlarmControlEv>:
		 DebounceMACA_Rej=1;
	 }
}

void LpdcLogic::mAlarmControl(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	}
	else
	{
	//	HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZN9LpdcLogic14machineControlEv>:

void LpdcLogic::machineControl(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	if(requirementId != requirementIdK1){
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <_ZN9LpdcLogic14machineControlEv+0xb4>)
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <_ZN9LpdcLogic14machineControlEv+0xb8>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d010      	beq.n	8003fe2 <_ZN9LpdcLogic14machineControlEv+0x36>
		productionInc 		= 0;
 8003fc0:	4b29      	ldr	r3, [pc, #164]	; (8004068 <_ZN9LpdcLogic14machineControlEv+0xbc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	801a      	strh	r2, [r3, #0]
		requirementIdK1 	= requirementId;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <_ZN9LpdcLogic14machineControlEv+0xb4>)
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <_ZN9LpdcLogic14machineControlEv+0xb8>)
 8003fcc:	801a      	strh	r2, [r3, #0]
		updateMemProcCtrl	= 1;
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <_ZN9LpdcLogic14machineControlEv+0xc0>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
		triggerStartForReq  = 1;
 8003fd4:	4b26      	ldr	r3, [pc, #152]	; (8004070 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
		productionTarget 	= batchTargetquantity;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <_ZN9LpdcLogic14machineControlEv+0xc8>)
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <_ZN9LpdcLogic14machineControlEv+0xcc>)
 8003fe0:	801a      	strh	r2, [r3, #0]
	}

	if(triggerStartForReq==1){
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <_ZN9LpdcLogic14machineControlEv+0x4e>
		if(startStopStatus ==1){
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <_ZN9LpdcLogic14machineControlEv+0xd0>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d132      	bne.n	8004058 <_ZN9LpdcLogic14machineControlEv+0xac>
			triggerStartForReq=2;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	701a      	strb	r2, [r3, #0]
		{
			HAL_GPIO_WritePin(GPIOC, RELAY3_Pin, GPIO_PIN_RESET);
		}
	}

}
 8003ff8:	e02e      	b.n	8004058 <_ZN9LpdcLogic14machineControlEv+0xac>
	else if(triggerStartForReq==2){
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d12a      	bne.n	8004058 <_ZN9LpdcLogic14machineControlEv+0xac>
		if((productionInc <= productionTarget)&&(startStopStatus!=2))/*FInal Stop*/
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <_ZN9LpdcLogic14machineControlEv+0xbc>)
 8004004:	881a      	ldrh	r2, [r3, #0]
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <_ZN9LpdcLogic14machineControlEv+0xcc>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d809      	bhi.n	8004022 <_ZN9LpdcLogic14machineControlEv+0x76>
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <_ZN9LpdcLogic14machineControlEv+0xd0>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d005      	beq.n	8004022 <_ZN9LpdcLogic14machineControlEv+0x76>
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_SET);
 8004016:	2201      	movs	r2, #1
 8004018:	2120      	movs	r1, #32
 800401a:	4819      	ldr	r0, [pc, #100]	; (8004080 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 800401c:	f007 fe8e 	bl	800bd3c <HAL_GPIO_WritePin>
 8004020:	e004      	b.n	800402c <_ZN9LpdcLogic14machineControlEv+0x80>
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
 8004022:	2200      	movs	r2, #0
 8004024:	2120      	movs	r1, #32
 8004026:	4816      	ldr	r0, [pc, #88]	; (8004080 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 8004028:	f007 fe88 	bl	800bd3c <HAL_GPIO_WritePin>
		if((productionInc <= (productionTarget-INDICATIONOFFSET))&&(startStopStatus!=2))/*Pre indication*/
 800402c:	4b12      	ldr	r3, [pc, #72]	; (8004078 <_ZN9LpdcLogic14machineControlEv+0xcc>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	3b13      	subs	r3, #19
 8004032:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <_ZN9LpdcLogic14machineControlEv+0xbc>)
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	4293      	cmp	r3, r2
 8004038:	dd09      	ble.n	800404e <_ZN9LpdcLogic14machineControlEv+0xa2>
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <_ZN9LpdcLogic14machineControlEv+0xd0>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d005      	beq.n	800404e <_ZN9LpdcLogic14machineControlEv+0xa2>
			HAL_GPIO_WritePin(GPIOC, RELAY3_Pin, GPIO_PIN_SET);
 8004042:	2201      	movs	r2, #1
 8004044:	2110      	movs	r1, #16
 8004046:	480e      	ldr	r0, [pc, #56]	; (8004080 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 8004048:	f007 fe78 	bl	800bd3c <HAL_GPIO_WritePin>
}
 800404c:	e004      	b.n	8004058 <_ZN9LpdcLogic14machineControlEv+0xac>
			HAL_GPIO_WritePin(GPIOC, RELAY3_Pin, GPIO_PIN_RESET);
 800404e:	2200      	movs	r2, #0
 8004050:	2110      	movs	r1, #16
 8004052:	480b      	ldr	r0, [pc, #44]	; (8004080 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 8004054:	f007 fe72 	bl	800bd3c <HAL_GPIO_WritePin>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	2000010a 	.word	0x2000010a
 8004064:	20000778 	.word	0x20000778
 8004068:	20000776 	.word	0x20000776
 800406c:	20000775 	.word	0x20000775
 8004070:	2000077c 	.word	0x2000077c
 8004074:	20000102 	.word	0x20000102
 8004078:	2000077a 	.word	0x2000077a
 800407c:	2000010f 	.word	0x2000010f
 8004080:	48000800 	.word	0x48000800

08004084 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <_ZN6commonC1Ev+0x1c>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	08011a38 	.word	0x08011a38

080040a4 <_ZN6commonD1Ev>:

common::~common() {
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <_ZN6commonD1Ev+0x1c>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	08011a38 	.word	0x08011a38

080040c4 <_ZN6commonD0Ev>:
common::~common() {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
}
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ffe9 	bl	80040a4 <_ZN6commonD1Ev>
 80040d2:	2104      	movs	r1, #4
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f00c fd76 	bl	8010bc6 <_ZdlPvj>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZN14DisplayRoutineC1Ev>:
extern uint16_t productiontimeSetOL;

char GLCDNumericArray[2];
char gLCDNumericArraySize_4[4];

DisplayRoutine::DisplayRoutine() {
 80040e4:	b5b0      	push	{r4, r5, r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	4a26      	ldr	r2, [pc, #152]	; (8004188 <_ZN14DisplayRoutineC1Ev+0xa4>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa2a 	bl	8004550 <_ZN4GLCDC1Ev>
 80040fc:	687d      	ldr	r5, [r7, #4]
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <_ZN14DisplayRoutineC1Ev+0xa8>)
 8004100:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8004104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004106:	c407      	stmia	r4!, {r0, r1, r2}
 8004108:	8023      	strh	r3, [r4, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <_ZN14DisplayRoutineC1Ev+0xac>)
 8004114:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	801a      	strh	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	491d      	ldr	r1, [pc, #116]	; (8004194 <_ZN14DisplayRoutineC1Ev+0xb0>)
 8004120:	f603 2219 	addw	r2, r3, #2585	; 0xa19
 8004124:	8808      	ldrh	r0, [r1, #0]
 8004126:	7889      	ldrb	r1, [r1, #2]
 8004128:	8010      	strh	r0, [r2, #0]
 800412a:	7091      	strb	r1, [r2, #2]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <_ZN14DisplayRoutineC1Ev+0xb4>)
 8004136:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	687d      	ldr	r5, [r7, #4]
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <_ZN14DisplayRoutineC1Ev+0xb8>)
 8004142:	f605 241f 	addw	r4, r5, #2591	; 0xa1f
 8004146:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004148:	6020      	str	r0, [r4, #0]
 800414a:	6061      	str	r1, [r4, #4]
 800414c:	60a2      	str	r2, [r4, #8]
 800414e:	2300      	movs	r3, #0
 8004150:	f885 3a2b 	strb.w	r3, [r5, #2603]	; 0xa2b
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <_ZN14DisplayRoutineC1Ev+0xbc>)
 8004158:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 800415c:	ca07      	ldmia	r2, {r0, r1, r2}
 800415e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 8004168:	687d      	ldr	r5, [r7, #4]
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <_ZN14DisplayRoutineC1Ev+0xc0>)
 800416c:	f605 2439 	addw	r4, r5, #2617	; 0xa39
 8004170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004172:	6020      	str	r0, [r4, #0]
 8004174:	6061      	str	r1, [r4, #4]
 8004176:	60a2      	str	r2, [r4, #8]
 8004178:	2300      	movs	r3, #0
 800417a:	f885 3a45 	strb.w	r3, [r5, #2629]	; 0xa45
	// TODO Auto-generated constructor stub

}
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bdb0      	pop	{r4, r5, r7, pc}
 8004188:	08011a48 	.word	0x08011a48
 800418c:	08011538 	.word	0x08011538
 8004190:	08011548 	.word	0x08011548
 8004194:	0801154c 	.word	0x0801154c
 8004198:	08011550 	.word	0x08011550
 800419c:	08011554 	.word	0x08011554
 80041a0:	08011564 	.word	0x08011564
 80041a4:	08011574 	.word	0x08011574

080041a8 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <_ZN14DisplayRoutineD1Ev+0x24>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 f944 	bl	8008448 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	08011a48 	.word	0x08011a48

080041d0 <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
}
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ffe5 	bl	80041a8 <_ZN14DisplayRoutineD1Ev>
 80041de:	f640 2148 	movw	r1, #2632	; 0xa48
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f00c fcef 	bl	8010bc6 <_ZdlPvj>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1d18      	adds	r0, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8004206:	2201      	movs	r2, #1
 8004208:	2100      	movs	r1, #0
 800420a:	f004 fbdd 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(hour_t,2,0);
 800420e:	4b51      	ldr	r3, [pc, #324]	; (8004354 <_ZN14DisplayRoutine3runEv+0x160>)
 8004210:	7819      	ldrb	r1, [r3, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	2202      	movs	r2, #2
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8b2 	bl	8004380 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(15,2,colon);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1d18      	adds	r0, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8004226:	2202      	movs	r2, #2
 8004228:	210f      	movs	r1, #15
 800422a:	f004 fbcd 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(min_t,2,20);
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <_ZN14DisplayRoutine3runEv+0x164>)
 8004230:	7819      	ldrb	r1, [r3, #0]
 8004232:	2314      	movs	r3, #20
 8004234:	2202      	movs	r2, #2
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8a2 	bl	8004380 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(35,2,colon);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1d18      	adds	r0, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8004246:	2202      	movs	r2, #2
 8004248:	2123      	movs	r1, #35	; 0x23
 800424a:	f004 fbbd 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(sec_t,2,40);
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <_ZN14DisplayRoutine3runEv+0x168>)
 8004250:	7819      	ldrb	r1, [r3, #0]
 8004252:	2328      	movs	r3, #40	; 0x28
 8004254:	2202      	movs	r2, #2
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f892 	bl	8004380 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(54,2,space);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1d18      	adds	r0, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 8004266:	2202      	movs	r2, #2
 8004268:	2136      	movs	r1, #54	; 0x36
 800426a:	f004 fbad 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(date_Rtc,2,65);
 800426e:	4b3c      	ldr	r3, [pc, #240]	; (8004360 <_ZN14DisplayRoutine3runEv+0x16c>)
 8004270:	7819      	ldrb	r1, [r3, #0]
 8004272:	2341      	movs	r3, #65	; 0x41
 8004274:	2202      	movs	r2, #2
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f882 	bl	8004380 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(81,2,backslash);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1d18      	adds	r0, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8004286:	2202      	movs	r2, #2
 8004288:	2151      	movs	r1, #81	; 0x51
 800428a:	f004 fb9d 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(month_Rtc,2,86);
 800428e:	4b35      	ldr	r3, [pc, #212]	; (8004364 <_ZN14DisplayRoutine3runEv+0x170>)
 8004290:	7819      	ldrb	r1, [r3, #0]
 8004292:	2356      	movs	r3, #86	; 0x56
 8004294:	2202      	movs	r2, #2
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f872 	bl	8004380 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(103,2,backslash);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1d18      	adds	r0, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 80042a6:	2202      	movs	r2, #2
 80042a8:	2167      	movs	r1, #103	; 0x67
 80042aa:	f004 fb8d 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(year_Rtc,2,110);
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <_ZN14DisplayRoutine3runEv+0x174>)
 80042b0:	7819      	ldrb	r1, [r3, #0]
 80042b2:	236e      	movs	r3, #110	; 0x6e
 80042b4:	2202      	movs	r2, #2
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f862 	bl	8004380 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(0,3,production);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f603 231f 	addw	r3, r3, #2591	; 0xa1f
 80042c6:	2203      	movs	r2, #3
 80042c8:	2100      	movs	r1, #0
 80042ca:	f004 fb7d 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Production_Total,3,85);
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <_ZN14DisplayRoutine3runEv+0x178>)
 80042d0:	8819      	ldrh	r1, [r3, #0]
 80042d2:	2355      	movs	r3, #85	; 0x55
 80042d4:	2203      	movs	r2, #3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f892 	bl	8004400 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1d18      	adds	r0, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80042e6:	2204      	movs	r2, #4
 80042e8:	2100      	movs	r1, #0
 80042ea:	f004 fb6d 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Rejection_Total,4,85);
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <_ZN14DisplayRoutine3runEv+0x17c>)
 80042f0:	8819      	ldrh	r1, [r3, #0]
 80042f2:	2355      	movs	r3, #85	; 0x55
 80042f4:	2204      	movs	r2, #4
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f882 	bl	8004400 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	1d18      	adds	r0, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f603 2339 	addw	r3, r3, #2617	; 0xa39
 8004306:	2205      	movs	r2, #5
 8004308:	2100      	movs	r1, #0
 800430a:	f004 fb5d 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(productiontimeSetOL,5,90);
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <_ZN14DisplayRoutine3runEv+0x180>)
 8004310:	8819      	ldrh	r1, [r3, #0]
 8004312:	235a      	movs	r3, #90	; 0x5a
 8004314:	2205      	movs	r2, #5
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f872 	bl	8004400 <_ZN14DisplayRoutine11value4DigitEthh>
	value4Digit(wifi_command,6,0);
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <_ZN14DisplayRoutine3runEv+0x184>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b299      	uxth	r1, r3
 8004322:	2300      	movs	r3, #0
 8004324:	2206      	movs	r2, #6
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f86a 	bl	8004400 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(40,6,space);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	1d18      	adds	r0, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 8004336:	2206      	movs	r2, #6
 8004338:	2128      	movs	r1, #40	; 0x28
 800433a:	f004 fb45 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(SectorPos,6,80);
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <_ZN14DisplayRoutine3runEv+0x188>)
 8004340:	8819      	ldrh	r1, [r3, #0]
 8004342:	2350      	movs	r3, #80	; 0x50
 8004344:	2206      	movs	r2, #6
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f85a 	bl	8004400 <_ZN14DisplayRoutine11value4DigitEthh>

}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000a1c 	.word	0x20000a1c
 8004358:	20000a1d 	.word	0x20000a1d
 800435c:	20000a1e 	.word	0x20000a1e
 8004360:	20000a20 	.word	0x20000a20
 8004364:	20000a21 	.word	0x20000a21
 8004368:	20000a22 	.word	0x20000a22
 800436c:	200000fe 	.word	0x200000fe
 8004370:	20000100 	.word	0x20000100
 8004374:	20000000 	.word	0x20000000
 8004378:	20000a25 	.word	0x20000a25
 800437c:	200009ee 	.word	0x200009ee

08004380 <_ZN14DisplayRoutine11value2DigitEhhh>:

void DisplayRoutine::value2Digit(uint8_t value,uint8_t posLine,uint8_t posCol)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	70fb      	strb	r3, [r7, #3]
 8004392:	460b      	mov	r3, r1
 8004394:	70bb      	strb	r3, [r7, #2]
 8004396:	4613      	mov	r3, r2
 8004398:	707b      	strb	r3, [r7, #1]
	GLCDNumericArray[0] =(unsigned char)(((value%100)/10)+0x30);
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <_ZN14DisplayRoutine11value2DigitEhhh+0x74>)
 800439e:	fba2 1203 	umull	r1, r2, r2, r3
 80043a2:	0952      	lsrs	r2, r2, #5
 80043a4:	2164      	movs	r1, #100	; 0x64
 80043a6:	fb01 f202 	mul.w	r2, r1, r2
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3330      	adds	r3, #48	; 0x30
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 80043be:	701a      	strb	r2, [r3, #0]
    GLCDNumericArray[1] =(unsigned char)((value%10)+0x30);
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 80043c4:	fba3 1302 	umull	r1, r3, r3, r2
 80043c8:	08d9      	lsrs	r1, r3, #3
 80043ca:	460b      	mov	r3, r1
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3330      	adds	r3, #48	; 0x30
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 80043dc:	705a      	strb	r2, [r3, #1]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1d18      	adds	r0, r3, #4
 80043e2:	78ba      	ldrb	r2, [r7, #2]
 80043e4:	7879      	ldrb	r1, [r7, #1]
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 80043e8:	f004 faee 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	51eb851f 	.word	0x51eb851f
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	20000780 	.word	0x20000780

08004400 <_ZN14DisplayRoutine11value4DigitEthh>:
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4603      	mov	r3, r0
 8004410:	807b      	strh	r3, [r7, #2]
 8004412:	460b      	mov	r3, r1
 8004414:	707b      	strb	r3, [r7, #1]
 8004416:	4613      	mov	r3, r2
 8004418:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <_ZN14DisplayRoutine11value4DigitEthh+0xcc>)
 800441e:	fba2 1203 	umull	r1, r2, r2, r3
 8004422:	0b52      	lsrs	r2, r2, #13
 8004424:	f242 7110 	movw	r1, #10000	; 0x2710
 8004428:	fb01 f202 	mul.w	r2, r1, r2
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3330      	adds	r3, #48	; 0x30
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8004442:	701a      	strb	r2, [r3, #0]
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 8004444:	887b      	ldrh	r3, [r7, #2]
 8004446:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 8004448:	fba2 1203 	umull	r1, r2, r2, r3
 800444c:	0992      	lsrs	r2, r2, #6
 800444e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004452:	fb01 f202 	mul.w	r2, r1, r2
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	b29b      	uxth	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3330      	adds	r3, #48	; 0x30
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 800446c:	705a      	strb	r2, [r3, #1]
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 8004472:	fba2 1203 	umull	r1, r2, r2, r3
 8004476:	0952      	lsrs	r2, r2, #5
 8004478:	2164      	movs	r1, #100	; 0x64
 800447a:	fb01 f202 	mul.w	r2, r1, r2
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	08db      	lsrs	r3, r3, #3
 800448a:	b29b      	uxth	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3330      	adds	r3, #48	; 0x30
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8004494:	709a      	strb	r2, [r3, #2]
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 800449a:	fba3 1302 	umull	r1, r3, r3, r2
 800449e:	08d9      	lsrs	r1, r3, #3
 80044a0:	460b      	mov	r3, r1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	3330      	adds	r3, #48	; 0x30
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80044b4:	70da      	strb	r2, [r3, #3]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	1d18      	adds	r0, r3, #4
 80044ba:	787a      	ldrb	r2, [r7, #1]
 80044bc:	7839      	ldrb	r1, [r7, #0]
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80044c0:	f004 fa82 	bl	80089c8 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	d1b71759 	.word	0xd1b71759
 80044d0:	10624dd3 	.word	0x10624dd3
 80044d4:	20000784 	.word	0x20000784
 80044d8:	51eb851f 	.word	0x51eb851f
 80044dc:	cccccccd 	.word	0xcccccccd

080044e0 <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 f88d 	bl	800860c <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f004 f989 	bl	8008810 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	4618      	mov	r0, r3
 8004504:	f004 faa0 	bl	8008a48 <_ZN4GLCD8m_clrlcdEv>


}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
 800451c:	4613      	mov	r3, r2
 800451e:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2201      	movs	r2, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	78bb      	ldrb	r3, [r7, #2]
 800452e:	4013      	ands	r3, r2
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	e001      	b.n	8004540 <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 8004540:	7bfb      	ldrb	r3, [r7, #15]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <_ZN4GLCDC1Ev>:
#include "main.h"
#include <string.h>
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
uint8_t length;
GLCD::GLCD() {
 8004550:	b5b0      	push	{r4, r5, r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fd92 	bl	8004084 <_ZN6commonC1Ev>
 8004560:	4ac8      	ldr	r2, [pc, #800]	; (8004884 <_ZN4GLCDC1Ev+0x334>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	687d      	ldr	r5, [r7, #4]
 8004568:	4bc7      	ldr	r3, [pc, #796]	; (8004888 <_ZN4GLCDC1Ev+0x338>)
 800456a:	1d2c      	adds	r4, r5, #4
 800456c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800456e:	c407      	stmia	r4!, {r0, r1, r2}
 8004570:	8023      	strh	r3, [r4, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	74ab      	strb	r3, [r5, #18]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	615a      	str	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	775a      	strb	r2, [r3, #29]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	331e      	adds	r3, #30
 800458c:	f640 0208 	movw	r2, #2056	; 0x808
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f00c fb5c 	bl	8010c50 <memset>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	227e      	movs	r2, #126	; 0x7e
 800459c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2281      	movs	r2, #129	; 0x81
 80045a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2295      	movs	r2, #149	; 0x95
 80045ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	22b1      	movs	r2, #177	; 0xb1
 80045b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	22b1      	movs	r2, #177	; 0xb1
 80045bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2295      	movs	r2, #149	; 0x95
 80045c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2281      	movs	r2, #129	; 0x81
 80045cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	227e      	movs	r2, #126	; 0x7e
 80045d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	227e      	movs	r2, #126	; 0x7e
 80045dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	22ff      	movs	r2, #255	; 0xff
 80045e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	22eb      	movs	r2, #235	; 0xeb
 80045ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	22cf      	movs	r2, #207	; 0xcf
 80045f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	22cf      	movs	r2, #207	; 0xcf
 80045fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	22eb      	movs	r2, #235	; 0xeb
 8004604:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	227e      	movs	r2, #126	; 0x7e
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	220e      	movs	r2, #14
 800461c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	221f      	movs	r2, #31
 8004624:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	223f      	movs	r2, #63	; 0x3f
 800462c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	227e      	movs	r2, #126	; 0x7e
 8004634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	223f      	movs	r2, #63	; 0x3f
 800463c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	221f      	movs	r2, #31
 8004644:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	220e      	movs	r2, #14
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2208      	movs	r2, #8
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	221c      	movs	r2, #28
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	223e      	movs	r2, #62	; 0x3e
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	227f      	movs	r2, #127	; 0x7f
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	223e      	movs	r2, #62	; 0x3e
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	221c      	movs	r2, #28
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2208      	movs	r2, #8
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2218      	movs	r2, #24
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	22ba      	movs	r2, #186	; 0xba
 8004694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	22ff      	movs	r2, #255	; 0xff
 80046ac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	22ba      	movs	r2, #186	; 0xba
 80046b4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2218      	movs	r2, #24
 80046bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2210      	movs	r2, #16
 80046c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	22b8      	movs	r2, #184	; 0xb8
 80046cc:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	22fc      	movs	r2, #252	; 0xfc
 80046d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	22ff      	movs	r2, #255	; 0xff
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	22fc      	movs	r2, #252	; 0xfc
 80046e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	22b8      	movs	r2, #184	; 0xb8
 80046ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2210      	movs	r2, #16
 80046f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2218      	movs	r2, #24
 80046fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	223c      	movs	r2, #60	; 0x3c
 8004704:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	223c      	movs	r2, #60	; 0x3c
 800470c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2218      	movs	r2, #24
 8004714:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	22e7      	movs	r2, #231	; 0xe7
 800472c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	22c3      	movs	r2, #195	; 0xc3
 8004734:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	22c3      	movs	r2, #195	; 0xc3
 800473c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	22e7      	movs	r2, #231	; 0xe7
 8004744:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	22ff      	movs	r2, #255	; 0xff
 8004754:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	223c      	movs	r2, #60	; 0x3c
 800475c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2266      	movs	r2, #102	; 0x66
 8004764:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2242      	movs	r2, #66	; 0x42
 800476c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2242      	movs	r2, #66	; 0x42
 8004774:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2266      	movs	r2, #102	; 0x66
 800477c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	223c      	movs	r2, #60	; 0x3c
 8004784:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	22ff      	movs	r2, #255	; 0xff
 800478c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	22c3      	movs	r2, #195	; 0xc3
 8004794:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2299      	movs	r2, #153	; 0x99
 800479c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	22bd      	movs	r2, #189	; 0xbd
 80047a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	22bd      	movs	r2, #189	; 0xbd
 80047ac:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2299      	movs	r2, #153	; 0x99
 80047b4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	22c3      	movs	r2, #195	; 0xc3
 80047bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2270      	movs	r2, #112	; 0x70
 80047cc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	22f8      	movs	r2, #248	; 0xf8
 80047d4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2288      	movs	r2, #136	; 0x88
 80047dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2288      	movs	r2, #136	; 0x88
 80047e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	22fd      	movs	r2, #253	; 0xfd
 80047ec:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	227f      	movs	r2, #127	; 0x7f
 80047f4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2207      	movs	r2, #7
 80047fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	220f      	movs	r2, #15
 8004804:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	224e      	movs	r2, #78	; 0x4e
 800480c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	225f      	movs	r2, #95	; 0x5f
 8004814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	22f1      	movs	r2, #241	; 0xf1
 800481c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	22f1      	movs	r2, #241	; 0xf1
 8004824:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	225f      	movs	r2, #95	; 0x5f
 800482c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	224e      	movs	r2, #78	; 0x4e
 8004834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	22c0      	movs	r2, #192	; 0xc0
 800483c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	22e0      	movs	r2, #224	; 0xe0
 8004844:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	22ff      	movs	r2, #255	; 0xff
 800484c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	227f      	movs	r2, #127	; 0x7f
 8004854:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2205      	movs	r2, #5
 800485c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2205      	movs	r2, #5
 8004864:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2207      	movs	r2, #7
 800486c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2207      	movs	r2, #7
 8004874:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	22c0      	movs	r2, #192	; 0xc0
 800487c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004880:	e004      	b.n	800488c <_ZN4GLCDC1Ev+0x33c>
 8004882:	bf00      	nop
 8004884:	08011a58 	.word	0x08011a58
 8004888:	08011584 	.word	0x08011584
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	22ff      	movs	r2, #255	; 0xff
 8004890:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	227f      	movs	r2, #127	; 0x7f
 8004898:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2205      	movs	r2, #5
 80048a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2205      	movs	r2, #5
 80048a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2265      	movs	r2, #101	; 0x65
 80048b0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	227f      	movs	r2, #127	; 0x7f
 80048b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	223f      	movs	r2, #63	; 0x3f
 80048c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2299      	movs	r2, #153	; 0x99
 80048c8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	225a      	movs	r2, #90	; 0x5a
 80048d0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	223c      	movs	r2, #60	; 0x3c
 80048d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	22e7      	movs	r2, #231	; 0xe7
 80048e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	22e7      	movs	r2, #231	; 0xe7
 80048e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	223c      	movs	r2, #60	; 0x3c
 80048f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	225a      	movs	r2, #90	; 0x5a
 80048f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2299      	movs	r2, #153	; 0x99
 8004900:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	227f      	movs	r2, #127	; 0x7f
 8004908:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	223e      	movs	r2, #62	; 0x3e
 8004910:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	223e      	movs	r2, #62	; 0x3e
 8004918:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	221c      	movs	r2, #28
 8004920:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	221c      	movs	r2, #28
 8004928:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2208      	movs	r2, #8
 8004930:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2208      	movs	r2, #8
 8004938:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2208      	movs	r2, #8
 8004940:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2208      	movs	r2, #8
 8004948:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	221c      	movs	r2, #28
 8004950:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	221c      	movs	r2, #28
 8004958:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	223e      	movs	r2, #62	; 0x3e
 8004960:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	223e      	movs	r2, #62	; 0x3e
 8004968:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	227f      	movs	r2, #127	; 0x7f
 8004970:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2266      	movs	r2, #102	; 0x66
 8004980:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	22ff      	movs	r2, #255	; 0xff
 8004988:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	22ff      	movs	r2, #255	; 0xff
 8004990:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2266      	movs	r2, #102	; 0x66
 8004998:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	225f      	movs	r2, #95	; 0x5f
 80049a8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	225f      	movs	r2, #95	; 0x5f
 80049b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	225f      	movs	r2, #95	; 0x5f
 80049b8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	225f      	movs	r2, #95	; 0x5f
 80049c0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2206      	movs	r2, #6
 80049c8:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	220f      	movs	r2, #15
 80049d0:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2209      	movs	r2, #9
 80049d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	227f      	movs	r2, #127	; 0x7f
 80049e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	227f      	movs	r2, #127	; 0x7f
 80049e8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	227f      	movs	r2, #127	; 0x7f
 80049f8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	227f      	movs	r2, #127	; 0x7f
 8004a00:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	22da      	movs	r2, #218	; 0xda
 8004a10:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	22bf      	movs	r2, #191	; 0xbf
 8004a18:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	22a5      	movs	r2, #165	; 0xa5
 8004a20:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	22fd      	movs	r2, #253	; 0xfd
 8004a28:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2259      	movs	r2, #89	; 0x59
 8004a30:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2270      	movs	r2, #112	; 0x70
 8004a48:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2270      	movs	r2, #112	; 0x70
 8004a50:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2270      	movs	r2, #112	; 0x70
 8004a58:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2270      	movs	r2, #112	; 0x70
 8004a60:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2270      	movs	r2, #112	; 0x70
 8004a68:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2270      	movs	r2, #112	; 0x70
 8004a70:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2294      	movs	r2, #148	; 0x94
 8004a80:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	22b6      	movs	r2, #182	; 0xb6
 8004a88:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	22ff      	movs	r2, #255	; 0xff
 8004a90:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	22ff      	movs	r2, #255	; 0xff
 8004a98:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	22b6      	movs	r2, #182	; 0xb6
 8004aa0:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2294      	movs	r2, #148	; 0x94
 8004aa8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2280      	movs	r2, #128	; 0x80
 8004ab0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2206      	movs	r2, #6
 8004ac0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	227f      	movs	r2, #127	; 0x7f
 8004ac8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	227f      	movs	r2, #127	; 0x7f
 8004ad0:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2206      	movs	r2, #6
 8004ad8:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2230      	movs	r2, #48	; 0x30
 8004af0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	227f      	movs	r2, #127	; 0x7f
 8004af8:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	227f      	movs	r2, #127	; 0x7f
 8004b00:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2230      	movs	r2, #48	; 0x30
 8004b08:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2210      	movs	r2, #16
 8004b10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2208      	movs	r2, #8
 8004b18:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2208      	movs	r2, #8
 8004b28:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	222a      	movs	r2, #42	; 0x2a
 8004b30:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	223e      	movs	r2, #62	; 0x3e
 8004b38:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	221c      	movs	r2, #28
 8004b40:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2208      	movs	r2, #8
 8004b48:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2208      	movs	r2, #8
 8004b50:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	221c      	movs	r2, #28
 8004b58:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	223e      	movs	r2, #62	; 0x3e
 8004b60:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	222a      	movs	r2, #42	; 0x2a
 8004b68:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2208      	movs	r2, #8
 8004b70:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2208      	movs	r2, #8
 8004b78:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2208      	movs	r2, #8
 8004b80:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	223c      	movs	r2, #60	; 0x3c
 8004b88:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	223c      	movs	r2, #60	; 0x3c
 8004b90:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	221c      	movs	r2, #28
 8004bc8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	223e      	movs	r2, #62	; 0x3e
 8004bd0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2208      	movs	r2, #8
 8004be0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	223e      	movs	r2, #62	; 0x3e
 8004be8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	221c      	movs	r2, #28
 8004bf0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2230      	movs	r2, #48	; 0x30
 8004c00:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2238      	movs	r2, #56	; 0x38
 8004c08:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	223c      	movs	r2, #60	; 0x3c
 8004c10:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	223e      	movs	r2, #62	; 0x3e
 8004c18:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	223e      	movs	r2, #62	; 0x3e
 8004c20:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	223c      	movs	r2, #60	; 0x3c
 8004c28:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2238      	movs	r2, #56	; 0x38
 8004c30:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2230      	movs	r2, #48	; 0x30
 8004c38:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2206      	movs	r2, #6
 8004c40:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	220e      	movs	r2, #14
 8004c48:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	221e      	movs	r2, #30
 8004c50:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	223e      	movs	r2, #62	; 0x3e
 8004c58:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	223e      	movs	r2, #62	; 0x3e
 8004c60:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	221e      	movs	r2, #30
 8004c68:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	220e      	movs	r2, #14
 8004c70:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2206      	movs	r2, #6
 8004c78:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2206      	movs	r2, #6
 8004c80:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	225f      	movs	r2, #95	; 0x5f
 8004c88:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	225f      	movs	r2, #95	; 0x5f
 8004c90:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2206      	movs	r2, #6
 8004c98:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2207      	movs	r2, #7
 8004ca0:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2207      	movs	r2, #7
 8004ca8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2207      	movs	r2, #7
 8004cb0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2214      	movs	r2, #20
 8004cc0:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	227f      	movs	r2, #127	; 0x7f
 8004cc8:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	227f      	movs	r2, #127	; 0x7f
 8004cd0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2214      	movs	r2, #20
 8004cd8:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	227f      	movs	r2, #127	; 0x7f
 8004ce0:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	227f      	movs	r2, #127	; 0x7f
 8004ce8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2214      	movs	r2, #20
 8004cf0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	222e      	movs	r2, #46	; 0x2e
 8004d00:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	226b      	movs	r2, #107	; 0x6b
 8004d08:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	226b      	movs	r2, #107	; 0x6b
 8004d10:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	223a      	movs	r2, #58	; 0x3a
 8004d18:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2212      	movs	r2, #18
 8004d20:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2246      	movs	r2, #70	; 0x46
 8004d28:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2266      	movs	r2, #102	; 0x66
 8004d30:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2230      	movs	r2, #48	; 0x30
 8004d38:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2218      	movs	r2, #24
 8004d40:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	220c      	movs	r2, #12
 8004d48:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2266      	movs	r2, #102	; 0x66
 8004d50:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2262      	movs	r2, #98	; 0x62
 8004d58:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2230      	movs	r2, #48	; 0x30
 8004d60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	227a      	movs	r2, #122	; 0x7a
 8004d68:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	224f      	movs	r2, #79	; 0x4f
 8004d70:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	225d      	movs	r2, #93	; 0x5d
 8004d78:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2237      	movs	r2, #55	; 0x37
 8004d80:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	227a      	movs	r2, #122	; 0x7a
 8004d88:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2248      	movs	r2, #72	; 0x48
 8004d90:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2204      	movs	r2, #4
 8004d98:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2207      	movs	r2, #7
 8004da0:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2203      	movs	r2, #3
 8004da8:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	221c      	movs	r2, #28
 8004db0:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	223e      	movs	r2, #62	; 0x3e
 8004db8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2263      	movs	r2, #99	; 0x63
 8004dc0:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2241      	movs	r2, #65	; 0x41
 8004dc8:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2241      	movs	r2, #65	; 0x41
 8004dd0:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2263      	movs	r2, #99	; 0x63
 8004dd8:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	223e      	movs	r2, #62	; 0x3e
 8004de0:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	221c      	movs	r2, #28
 8004de8:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2208      	movs	r2, #8
 8004df0:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	222a      	movs	r2, #42	; 0x2a
 8004df8:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223e      	movs	r2, #62	; 0x3e
 8004e00:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	221c      	movs	r2, #28
 8004e08:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	221c      	movs	r2, #28
 8004e10:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	223e      	movs	r2, #62	; 0x3e
 8004e18:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	222a      	movs	r2, #42	; 0x2a
 8004e20:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2208      	movs	r2, #8
 8004e28:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2208      	movs	r2, #8
 8004e30:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2208      	movs	r2, #8
 8004e38:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	223e      	movs	r2, #62	; 0x3e
 8004e40:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	223e      	movs	r2, #62	; 0x3e
 8004e48:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2208      	movs	r2, #8
 8004e50:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2208      	movs	r2, #8
 8004e58:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	22e0      	movs	r2, #224	; 0xe0
 8004e68:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2260      	movs	r2, #96	; 0x60
 8004e70:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2208      	movs	r2, #8
 8004e78:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2208      	movs	r2, #8
 8004e88:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2208      	movs	r2, #8
 8004e90:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2208      	movs	r2, #8
 8004e98:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2260      	movs	r2, #96	; 0x60
 8004ea8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2260      	movs	r2, #96	; 0x60
 8004eb0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2260      	movs	r2, #96	; 0x60
 8004eb8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2230      	movs	r2, #48	; 0x30
 8004ec0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2218      	movs	r2, #24
 8004ec8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	220c      	movs	r2, #12
 8004ed0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	223e      	movs	r2, #62	; 0x3e
 8004ef0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	227f      	movs	r2, #127	; 0x7f
 8004ef8:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2271      	movs	r2, #113	; 0x71
 8004f00:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2259      	movs	r2, #89	; 0x59
 8004f08:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	224d      	movs	r2, #77	; 0x4d
 8004f10:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	227f      	movs	r2, #127	; 0x7f
 8004f18:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223e      	movs	r2, #62	; 0x3e
 8004f20:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2240      	movs	r2, #64	; 0x40
 8004f28:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2242      	movs	r2, #66	; 0x42
 8004f30:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	227f      	movs	r2, #127	; 0x7f
 8004f38:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	227f      	movs	r2, #127	; 0x7f
 8004f40:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2240      	movs	r2, #64	; 0x40
 8004f48:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2262      	movs	r2, #98	; 0x62
 8004f58:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2273      	movs	r2, #115	; 0x73
 8004f60:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2259      	movs	r2, #89	; 0x59
 8004f68:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2249      	movs	r2, #73	; 0x49
 8004f70:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	226f      	movs	r2, #111	; 0x6f
 8004f78:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2266      	movs	r2, #102	; 0x66
 8004f80:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2222      	movs	r2, #34	; 0x22
 8004f88:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2263      	movs	r2, #99	; 0x63
 8004f90:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2249      	movs	r2, #73	; 0x49
 8004f98:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2249      	movs	r2, #73	; 0x49
 8004fa0:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	227f      	movs	r2, #127	; 0x7f
 8004fa8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2236      	movs	r2, #54	; 0x36
 8004fb0:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2218      	movs	r2, #24
 8004fb8:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	221c      	movs	r2, #28
 8004fc0:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2216      	movs	r2, #22
 8004fc8:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2253      	movs	r2, #83	; 0x53
 8004fd0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	227f      	movs	r2, #127	; 0x7f
 8004fd8:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	227f      	movs	r2, #127	; 0x7f
 8004fe0:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2250      	movs	r2, #80	; 0x50
 8004fe8:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2227      	movs	r2, #39	; 0x27
 8004ff0:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2267      	movs	r2, #103	; 0x67
 8004ff8:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2245      	movs	r2, #69	; 0x45
 8005000:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2245      	movs	r2, #69	; 0x45
 8005008:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	227d      	movs	r2, #125	; 0x7d
 8005010:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2239      	movs	r2, #57	; 0x39
 8005018:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	223c      	movs	r2, #60	; 0x3c
 8005020:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	227e      	movs	r2, #126	; 0x7e
 8005028:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	224b      	movs	r2, #75	; 0x4b
 8005030:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2249      	movs	r2, #73	; 0x49
 8005038:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2279      	movs	r2, #121	; 0x79
 8005040:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2230      	movs	r2, #48	; 0x30
 8005048:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2203      	movs	r2, #3
 8005050:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2203      	movs	r2, #3
 8005058:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2271      	movs	r2, #113	; 0x71
 8005060:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2279      	movs	r2, #121	; 0x79
 8005068:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	220f      	movs	r2, #15
 8005070:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2207      	movs	r2, #7
 8005078:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2236      	movs	r2, #54	; 0x36
 8005080:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	227f      	movs	r2, #127	; 0x7f
 8005088:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2249      	movs	r2, #73	; 0x49
 8005090:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2249      	movs	r2, #73	; 0x49
 8005098:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	227f      	movs	r2, #127	; 0x7f
 80050a0:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2236      	movs	r2, #54	; 0x36
 80050a8:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2206      	movs	r2, #6
 80050b0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	224f      	movs	r2, #79	; 0x4f
 80050b8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2249      	movs	r2, #73	; 0x49
 80050c0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2269      	movs	r2, #105	; 0x69
 80050c8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223f      	movs	r2, #63	; 0x3f
 80050d0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	221e      	movs	r2, #30
 80050d8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2266      	movs	r2, #102	; 0x66
 80050e0:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2266      	movs	r2, #102	; 0x66
 80050e8:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	22e6      	movs	r2, #230	; 0xe6
 80050f8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2266      	movs	r2, #102	; 0x66
 8005100:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2208      	movs	r2, #8
 8005108:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	221c      	movs	r2, #28
 8005110:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2236      	movs	r2, #54	; 0x36
 8005118:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2263      	movs	r2, #99	; 0x63
 8005120:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2241      	movs	r2, #65	; 0x41
 8005128:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	; 0x24
 8005130:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	; 0x24
 8005140:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2224      	movs	r2, #36	; 0x24
 8005158:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2241      	movs	r2, #65	; 0x41
 8005160:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2263      	movs	r2, #99	; 0x63
 8005168:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2236      	movs	r2, #54	; 0x36
 8005170:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	221c      	movs	r2, #28
 8005178:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2208      	movs	r2, #8
 8005180:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2251      	movs	r2, #81	; 0x51
 8005198:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2259      	movs	r2, #89	; 0x59
 80051a0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	220f      	movs	r2, #15
 80051a8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2206      	movs	r2, #6
 80051b0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	223e      	movs	r2, #62	; 0x3e
 80051b8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	227f      	movs	r2, #127	; 0x7f
 80051c0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2241      	movs	r2, #65	; 0x41
 80051c8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	225d      	movs	r2, #93	; 0x5d
 80051d0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	225d      	movs	r2, #93	; 0x5d
 80051d8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	221f      	movs	r2, #31
 80051e0:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	221e      	movs	r2, #30
 80051e8:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	227c      	movs	r2, #124	; 0x7c
 80051f0:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	227e      	movs	r2, #126	; 0x7e
 80051f8:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2213      	movs	r2, #19
 8005200:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2213      	movs	r2, #19
 8005208:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	227e      	movs	r2, #126	; 0x7e
 8005210:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	227c      	movs	r2, #124	; 0x7c
 8005218:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2241      	movs	r2, #65	; 0x41
 8005220:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	227f      	movs	r2, #127	; 0x7f
 8005228:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	227f      	movs	r2, #127	; 0x7f
 8005230:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2249      	movs	r2, #73	; 0x49
 8005238:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2249      	movs	r2, #73	; 0x49
 8005240:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	227f      	movs	r2, #127	; 0x7f
 8005248:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2236      	movs	r2, #54	; 0x36
 8005250:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	221c      	movs	r2, #28
 8005258:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	223e      	movs	r2, #62	; 0x3e
 8005260:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2263      	movs	r2, #99	; 0x63
 8005268:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2241      	movs	r2, #65	; 0x41
 8005270:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2241      	movs	r2, #65	; 0x41
 8005278:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2263      	movs	r2, #99	; 0x63
 8005280:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2222      	movs	r2, #34	; 0x22
 8005288:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2241      	movs	r2, #65	; 0x41
 8005290:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	227f      	movs	r2, #127	; 0x7f
 8005298:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	227f      	movs	r2, #127	; 0x7f
 80052a0:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2241      	movs	r2, #65	; 0x41
 80052a8:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2263      	movs	r2, #99	; 0x63
 80052b0:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	223e      	movs	r2, #62	; 0x3e
 80052b8:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	221c      	movs	r2, #28
 80052c0:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2241      	movs	r2, #65	; 0x41
 80052c8:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	227f      	movs	r2, #127	; 0x7f
 80052d0:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	227f      	movs	r2, #127	; 0x7f
 80052d8:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2249      	movs	r2, #73	; 0x49
 80052e0:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	225d      	movs	r2, #93	; 0x5d
 80052e8:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2241      	movs	r2, #65	; 0x41
 80052f0:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2263      	movs	r2, #99	; 0x63
 80052f8:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2241      	movs	r2, #65	; 0x41
 8005300:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	227f      	movs	r2, #127	; 0x7f
 8005308:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	227f      	movs	r2, #127	; 0x7f
 8005310:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2249      	movs	r2, #73	; 0x49
 8005318:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	221d      	movs	r2, #29
 8005320:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2203      	movs	r2, #3
 8005330:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	221c      	movs	r2, #28
 8005338:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	223e      	movs	r2, #62	; 0x3e
 8005340:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2263      	movs	r2, #99	; 0x63
 8005348:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2241      	movs	r2, #65	; 0x41
 8005350:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2251      	movs	r2, #81	; 0x51
 8005358:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2273      	movs	r2, #115	; 0x73
 8005360:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2272      	movs	r2, #114	; 0x72
 8005368:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	227f      	movs	r2, #127	; 0x7f
 8005370:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	227f      	movs	r2, #127	; 0x7f
 8005378:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2208      	movs	r2, #8
 8005380:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2208      	movs	r2, #8
 8005388:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	227f      	movs	r2, #127	; 0x7f
 8005390:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	227f      	movs	r2, #127	; 0x7f
 8005398:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2241      	movs	r2, #65	; 0x41
 80053a0:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	227f      	movs	r2, #127	; 0x7f
 80053a8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	227f      	movs	r2, #127	; 0x7f
 80053b0:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2241      	movs	r2, #65	; 0x41
 80053b8:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2230      	movs	r2, #48	; 0x30
 80053c0:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2270      	movs	r2, #112	; 0x70
 80053c8:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2241      	movs	r2, #65	; 0x41
 80053d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	227f      	movs	r2, #127	; 0x7f
 80053e0:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	223f      	movs	r2, #63	; 0x3f
 80053e8:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2241      	movs	r2, #65	; 0x41
 80053f8:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	227f      	movs	r2, #127	; 0x7f
 8005400:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	227f      	movs	r2, #127	; 0x7f
 8005408:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2208      	movs	r2, #8
 8005410:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	221c      	movs	r2, #28
 8005418:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2277      	movs	r2, #119	; 0x77
 8005420:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2263      	movs	r2, #99	; 0x63
 8005428:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2241      	movs	r2, #65	; 0x41
 8005430:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	227f      	movs	r2, #127	; 0x7f
 8005438:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	227f      	movs	r2, #127	; 0x7f
 8005440:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2241      	movs	r2, #65	; 0x41
 8005448:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2260      	movs	r2, #96	; 0x60
 8005458:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2270      	movs	r2, #112	; 0x70
 8005460:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	227f      	movs	r2, #127	; 0x7f
 8005468:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	227f      	movs	r2, #127	; 0x7f
 8005470:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	220e      	movs	r2, #14
 8005478:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	221c      	movs	r2, #28
 8005480:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	220e      	movs	r2, #14
 8005488:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	227f      	movs	r2, #127	; 0x7f
 8005490:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	227f      	movs	r2, #127	; 0x7f
 8005498:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	227f      	movs	r2, #127	; 0x7f
 80054a0:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	227f      	movs	r2, #127	; 0x7f
 80054a8:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2206      	movs	r2, #6
 80054b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	220c      	movs	r2, #12
 80054b8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2218      	movs	r2, #24
 80054c0:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	227f      	movs	r2, #127	; 0x7f
 80054c8:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	227f      	movs	r2, #127	; 0x7f
 80054d0:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	221c      	movs	r2, #28
 80054d8:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	223e      	movs	r2, #62	; 0x3e
 80054e0:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2263      	movs	r2, #99	; 0x63
 80054e8:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2241      	movs	r2, #65	; 0x41
 80054f0:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2263      	movs	r2, #99	; 0x63
 80054f8:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	223e      	movs	r2, #62	; 0x3e
 8005500:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	221c      	movs	r2, #28
 8005508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2241      	movs	r2, #65	; 0x41
 8005510:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	227f      	movs	r2, #127	; 0x7f
 8005518:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	227f      	movs	r2, #127	; 0x7f
 8005520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2249      	movs	r2, #73	; 0x49
 8005528:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2209      	movs	r2, #9
 8005530:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	220f      	movs	r2, #15
 8005538:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2206      	movs	r2, #6
 8005540:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	221e      	movs	r2, #30
 8005548:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223f      	movs	r2, #63	; 0x3f
 8005550:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2221      	movs	r2, #33	; 0x21
 8005558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2271      	movs	r2, #113	; 0x71
 8005560:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	227f      	movs	r2, #127	; 0x7f
 8005568:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	225e      	movs	r2, #94	; 0x5e
 8005570:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2241      	movs	r2, #65	; 0x41
 8005578:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	227f      	movs	r2, #127	; 0x7f
 8005580:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	227f      	movs	r2, #127	; 0x7f
 8005588:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2209      	movs	r2, #9
 8005590:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2219      	movs	r2, #25
 8005598:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	227f      	movs	r2, #127	; 0x7f
 80055a0:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2266      	movs	r2, #102	; 0x66
 80055a8:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2226      	movs	r2, #38	; 0x26
 80055b0:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	226f      	movs	r2, #111	; 0x6f
 80055b8:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	224d      	movs	r2, #77	; 0x4d
 80055c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2259      	movs	r2, #89	; 0x59
 80055c8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2273      	movs	r2, #115	; 0x73
 80055d0:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2232      	movs	r2, #50	; 0x32
 80055d8:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2203      	movs	r2, #3
 80055e0:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2241      	movs	r2, #65	; 0x41
 80055e8:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	227f      	movs	r2, #127	; 0x7f
 80055f0:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	227f      	movs	r2, #127	; 0x7f
 80055f8:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2241      	movs	r2, #65	; 0x41
 8005600:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	227f      	movs	r2, #127	; 0x7f
 8005610:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	227f      	movs	r2, #127	; 0x7f
 8005618:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2240      	movs	r2, #64	; 0x40
 8005628:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	227f      	movs	r2, #127	; 0x7f
 8005630:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	227f      	movs	r2, #127	; 0x7f
 8005638:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	221f      	movs	r2, #31
 8005640:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	223f      	movs	r2, #63	; 0x3f
 8005648:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2260      	movs	r2, #96	; 0x60
 8005650:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2260      	movs	r2, #96	; 0x60
 8005658:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	223f      	movs	r2, #63	; 0x3f
 8005660:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	221f      	movs	r2, #31
 8005668:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	227f      	movs	r2, #127	; 0x7f
 8005670:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	227f      	movs	r2, #127	; 0x7f
 8005678:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2230      	movs	r2, #48	; 0x30
 8005680:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2218      	movs	r2, #24
 8005688:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2230      	movs	r2, #48	; 0x30
 8005690:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	227f      	movs	r2, #127	; 0x7f
 8005698:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	227f      	movs	r2, #127	; 0x7f
 80056a0:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2243      	movs	r2, #67	; 0x43
 80056a8:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2267      	movs	r2, #103	; 0x67
 80056b0:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	223c      	movs	r2, #60	; 0x3c
 80056b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2218      	movs	r2, #24
 80056c0:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	223c      	movs	r2, #60	; 0x3c
 80056c8:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2267      	movs	r2, #103	; 0x67
 80056d0:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2243      	movs	r2, #67	; 0x43
 80056d8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2207      	movs	r2, #7
 80056e0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	224f      	movs	r2, #79	; 0x4f
 80056e8:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2278      	movs	r2, #120	; 0x78
 80056f0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2278      	movs	r2, #120	; 0x78
 80056f8:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	224f      	movs	r2, #79	; 0x4f
 8005700:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2207      	movs	r2, #7
 8005708:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2247      	movs	r2, #71	; 0x47
 8005710:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2263      	movs	r2, #99	; 0x63
 8005718:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2271      	movs	r2, #113	; 0x71
 8005720:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2259      	movs	r2, #89	; 0x59
 8005728:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	224d      	movs	r2, #77	; 0x4d
 8005730:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2267      	movs	r2, #103	; 0x67
 8005738:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2273      	movs	r2, #115	; 0x73
 8005740:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	227f      	movs	r2, #127	; 0x7f
 8005748:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	227f      	movs	r2, #127	; 0x7f
 8005750:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2241      	movs	r2, #65	; 0x41
 8005758:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2241      	movs	r2, #65	; 0x41
 8005760:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2203      	movs	r2, #3
 8005770:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2206      	movs	r2, #6
 8005778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	220c      	movs	r2, #12
 8005780:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2218      	movs	r2, #24
 8005788:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2230      	movs	r2, #48	; 0x30
 8005790:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2260      	movs	r2, #96	; 0x60
 8005798:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2241      	movs	r2, #65	; 0x41
 80057a0:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2241      	movs	r2, #65	; 0x41
 80057a8:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	227f      	movs	r2, #127	; 0x7f
 80057b0:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	227f      	movs	r2, #127	; 0x7f
 80057b8:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2208      	movs	r2, #8
 80057c0:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	220c      	movs	r2, #12
 80057c8:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2206      	movs	r2, #6
 80057d0:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2203      	movs	r2, #3
 80057d8:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2206      	movs	r2, #6
 80057e0:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	220c      	movs	r2, #12
 80057e8:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2208      	movs	r2, #8
 80057f0:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2280      	movs	r2, #128	; 0x80
 8005810:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2280      	movs	r2, #128	; 0x80
 8005820:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2203      	movs	r2, #3
 8005838:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2207      	movs	r2, #7
 8005840:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2204      	movs	r2, #4
 8005848:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2274      	movs	r2, #116	; 0x74
 8005858:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2254      	movs	r2, #84	; 0x54
 8005860:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2254      	movs	r2, #84	; 0x54
 8005868:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	223c      	movs	r2, #60	; 0x3c
 8005870:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2278      	movs	r2, #120	; 0x78
 8005878:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2241      	movs	r2, #65	; 0x41
 8005888:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	227f      	movs	r2, #127	; 0x7f
 8005890:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	223f      	movs	r2, #63	; 0x3f
 8005898:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2248      	movs	r2, #72	; 0x48
 80058a0:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2248      	movs	r2, #72	; 0x48
 80058a8:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2278      	movs	r2, #120	; 0x78
 80058b0:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2230      	movs	r2, #48	; 0x30
 80058b8:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2238      	movs	r2, #56	; 0x38
 80058c0:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	227c      	movs	r2, #124	; 0x7c
 80058c8:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2244      	movs	r2, #68	; 0x44
 80058d0:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2244      	movs	r2, #68	; 0x44
 80058d8:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	226c      	movs	r2, #108	; 0x6c
 80058e0:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2228      	movs	r2, #40	; 0x28
 80058e8:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2230      	movs	r2, #48	; 0x30
 80058f0:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2278      	movs	r2, #120	; 0x78
 80058f8:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2248      	movs	r2, #72	; 0x48
 8005900:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2249      	movs	r2, #73	; 0x49
 8005908:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	223f      	movs	r2, #63	; 0x3f
 8005910:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	227f      	movs	r2, #127	; 0x7f
 8005918:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2238      	movs	r2, #56	; 0x38
 8005928:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	227c      	movs	r2, #124	; 0x7c
 8005930:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2254      	movs	r2, #84	; 0x54
 8005938:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2254      	movs	r2, #84	; 0x54
 8005940:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	225c      	movs	r2, #92	; 0x5c
 8005948:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2218      	movs	r2, #24
 8005950:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2248      	movs	r2, #72	; 0x48
 8005958:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	227e      	movs	r2, #126	; 0x7e
 8005960:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	227f      	movs	r2, #127	; 0x7f
 8005968:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2249      	movs	r2, #73	; 0x49
 8005970:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2203      	movs	r2, #3
 8005978:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2298      	movs	r2, #152	; 0x98
 8005988:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22bc      	movs	r2, #188	; 0xbc
 8005990:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	22a4      	movs	r2, #164	; 0xa4
 8005998:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	22a4      	movs	r2, #164	; 0xa4
 80059a0:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	22f8      	movs	r2, #248	; 0xf8
 80059a8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	227c      	movs	r2, #124	; 0x7c
 80059b0:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2204      	movs	r2, #4
 80059b8:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2241      	movs	r2, #65	; 0x41
 80059c0:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	227f      	movs	r2, #127	; 0x7f
 80059c8:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	227f      	movs	r2, #127	; 0x7f
 80059d0:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2208      	movs	r2, #8
 80059d8:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2204      	movs	r2, #4
 80059e0:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	227c      	movs	r2, #124	; 0x7c
 80059e8:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2278      	movs	r2, #120	; 0x78
 80059f0:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2244      	movs	r2, #68	; 0x44
 80059f8:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	227d      	movs	r2, #125	; 0x7d
 8005a00:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	227d      	movs	r2, #125	; 0x7d
 8005a08:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2260      	movs	r2, #96	; 0x60
 8005a18:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	22e0      	movs	r2, #224	; 0xe0
 8005a20:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2280      	movs	r2, #128	; 0x80
 8005a30:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	22fd      	movs	r2, #253	; 0xfd
 8005a38:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	227d      	movs	r2, #125	; 0x7d
 8005a40:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2241      	movs	r2, #65	; 0x41
 8005a48:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	227f      	movs	r2, #127	; 0x7f
 8005a50:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	227f      	movs	r2, #127	; 0x7f
 8005a58:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2238      	movs	r2, #56	; 0x38
 8005a68:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	226c      	movs	r2, #108	; 0x6c
 8005a70:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2244      	movs	r2, #68	; 0x44
 8005a78:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2241      	movs	r2, #65	; 0x41
 8005a80:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	227f      	movs	r2, #127	; 0x7f
 8005a88:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	227f      	movs	r2, #127	; 0x7f
 8005a90:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2240      	movs	r2, #64	; 0x40
 8005a98:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	227c      	movs	r2, #124	; 0x7c
 8005aa0:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	227c      	movs	r2, #124	; 0x7c
 8005aa8:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2218      	movs	r2, #24
 8005ab0:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2238      	movs	r2, #56	; 0x38
 8005ab8:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	221c      	movs	r2, #28
 8005ac0:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	227c      	movs	r2, #124	; 0x7c
 8005ac8:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2278      	movs	r2, #120	; 0x78
 8005ad0:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	227c      	movs	r2, #124	; 0x7c
 8005ad8:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	227c      	movs	r2, #124	; 0x7c
 8005ae0:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2204      	movs	r2, #4
 8005af0:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	227c      	movs	r2, #124	; 0x7c
 8005af8:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2278      	movs	r2, #120	; 0x78
 8005b00:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2238      	movs	r2, #56	; 0x38
 8005b08:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	227c      	movs	r2, #124	; 0x7c
 8005b10:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2244      	movs	r2, #68	; 0x44
 8005b18:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2244      	movs	r2, #68	; 0x44
 8005b20:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	227c      	movs	r2, #124	; 0x7c
 8005b28:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2238      	movs	r2, #56	; 0x38
 8005b30:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2284      	movs	r2, #132	; 0x84
 8005b38:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	22fc      	movs	r2, #252	; 0xfc
 8005b40:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	22f8      	movs	r2, #248	; 0xf8
 8005b48:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	22a4      	movs	r2, #164	; 0xa4
 8005b50:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2224      	movs	r2, #36	; 0x24
 8005b58:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	223c      	movs	r2, #60	; 0x3c
 8005b60:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2218      	movs	r2, #24
 8005b68:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2218      	movs	r2, #24
 8005b70:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	223c      	movs	r2, #60	; 0x3c
 8005b78:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	22a4      	movs	r2, #164	; 0xa4
 8005b88:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	22f8      	movs	r2, #248	; 0xf8
 8005b90:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	22fc      	movs	r2, #252	; 0xfc
 8005b98:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2284      	movs	r2, #132	; 0x84
 8005ba0:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2244      	movs	r2, #68	; 0x44
 8005ba8:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	227c      	movs	r2, #124	; 0x7c
 8005bb0:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2278      	movs	r2, #120	; 0x78
 8005bb8:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	224c      	movs	r2, #76	; 0x4c
 8005bc0:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	221c      	movs	r2, #28
 8005bd0:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2218      	movs	r2, #24
 8005bd8:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2248      	movs	r2, #72	; 0x48
 8005be0:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	225c      	movs	r2, #92	; 0x5c
 8005be8:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2254      	movs	r2, #84	; 0x54
 8005bf0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2254      	movs	r2, #84	; 0x54
 8005bf8:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2274      	movs	r2, #116	; 0x74
 8005c00:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2224      	movs	r2, #36	; 0x24
 8005c08:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	223e      	movs	r2, #62	; 0x3e
 8005c18:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	227f      	movs	r2, #127	; 0x7f
 8005c20:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2244      	movs	r2, #68	; 0x44
 8005c28:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	; 0x24
 8005c30:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	223c      	movs	r2, #60	; 0x3c
 8005c38:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	227c      	movs	r2, #124	; 0x7c
 8005c40:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2240      	movs	r2, #64	; 0x40
 8005c48:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	223c      	movs	r2, #60	; 0x3c
 8005c58:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	227c      	movs	r2, #124	; 0x7c
 8005c60:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2240      	movs	r2, #64	; 0x40
 8005c68:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	221c      	movs	r2, #28
 8005c70:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	223c      	movs	r2, #60	; 0x3c
 8005c78:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2260      	movs	r2, #96	; 0x60
 8005c80:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2260      	movs	r2, #96	; 0x60
 8005c88:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	223c      	movs	r2, #60	; 0x3c
 8005c90:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	221c      	movs	r2, #28
 8005c98:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	223c      	movs	r2, #60	; 0x3c
 8005ca0:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	227c      	movs	r2, #124	; 0x7c
 8005ca8:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2270      	movs	r2, #112	; 0x70
 8005cb0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2238      	movs	r2, #56	; 0x38
 8005cb8:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2270      	movs	r2, #112	; 0x70
 8005cc0:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	227c      	movs	r2, #124	; 0x7c
 8005cc8:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	223c      	movs	r2, #60	; 0x3c
 8005cd0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2244      	movs	r2, #68	; 0x44
 8005cd8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	226c      	movs	r2, #108	; 0x6c
 8005ce0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2238      	movs	r2, #56	; 0x38
 8005ce8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2238      	movs	r2, #56	; 0x38
 8005cf8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	226c      	movs	r2, #108	; 0x6c
 8005d00:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2244      	movs	r2, #68	; 0x44
 8005d08:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	229c      	movs	r2, #156	; 0x9c
 8005d10:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	22bc      	movs	r2, #188	; 0xbc
 8005d18:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	22a0      	movs	r2, #160	; 0xa0
 8005d20:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	22a0      	movs	r2, #160	; 0xa0
 8005d28:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	22fc      	movs	r2, #252	; 0xfc
 8005d30:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	227c      	movs	r2, #124	; 0x7c
 8005d38:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	224c      	movs	r2, #76	; 0x4c
 8005d40:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2264      	movs	r2, #100	; 0x64
 8005d48:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2274      	movs	r2, #116	; 0x74
 8005d50:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	225c      	movs	r2, #92	; 0x5c
 8005d58:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	224c      	movs	r2, #76	; 0x4c
 8005d60:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2264      	movs	r2, #100	; 0x64
 8005d68:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2208      	movs	r2, #8
 8005d78:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	223e      	movs	r2, #62	; 0x3e
 8005d80:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2277      	movs	r2, #119	; 0x77
 8005d88:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2241      	movs	r2, #65	; 0x41
 8005d90:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2241      	movs	r2, #65	; 0x41
 8005d98:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2277      	movs	r2, #119	; 0x77
 8005da0:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2277      	movs	r2, #119	; 0x77
 8005da8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2241      	movs	r2, #65	; 0x41
 8005db0:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2241      	movs	r2, #65	; 0x41
 8005db8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2277      	movs	r2, #119	; 0x77
 8005dc0:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	223e      	movs	r2, #62	; 0x3e
 8005dc8:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2208      	movs	r2, #8
 8005dd0:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2203      	movs	r2, #3
 8005de8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2203      	movs	r2, #3
 8005df8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2203      	movs	r2, #3
 8005e08:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2270      	movs	r2, #112	; 0x70
 8005e18:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2278      	movs	r2, #120	; 0x78
 8005e20:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	224c      	movs	r2, #76	; 0x4c
 8005e28:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2246      	movs	r2, #70	; 0x46
 8005e30:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	224c      	movs	r2, #76	; 0x4c
 8005e38:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2278      	movs	r2, #120	; 0x78
 8005e40:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2270      	movs	r2, #112	; 0x70
 8005e48:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	220e      	movs	r2, #14
 8005e50:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	229f      	movs	r2, #159	; 0x9f
 8005e58:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2291      	movs	r2, #145	; 0x91
 8005e60:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	22b1      	movs	r2, #177	; 0xb1
 8005e68:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22fb      	movs	r2, #251	; 0xfb
 8005e70:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	224a      	movs	r2, #74	; 0x4a
 8005e78:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	223a      	movs	r2, #58	; 0x3a
 8005e80:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	227a      	movs	r2, #122	; 0x7a
 8005e88:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2240      	movs	r2, #64	; 0x40
 8005e90:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	227a      	movs	r2, #122	; 0x7a
 8005ea0:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	227a      	movs	r2, #122	; 0x7a
 8005ea8:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2238      	movs	r2, #56	; 0x38
 8005eb8:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	227c      	movs	r2, #124	; 0x7c
 8005ec0:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2254      	movs	r2, #84	; 0x54
 8005ec8:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2255      	movs	r2, #85	; 0x55
 8005ed0:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	225d      	movs	r2, #93	; 0x5d
 8005ed8:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2219      	movs	r2, #25
 8005ee0:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2223      	movs	r2, #35	; 0x23
 8005ef0:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2275      	movs	r2, #117	; 0x75
 8005ef8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2255      	movs	r2, #85	; 0x55
 8005f00:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2255      	movs	r2, #85	; 0x55
 8005f08:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	227d      	movs	r2, #125	; 0x7d
 8005f10:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	227b      	movs	r2, #123	; 0x7b
 8005f18:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2242      	movs	r2, #66	; 0x42
 8005f20:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2221      	movs	r2, #33	; 0x21
 8005f28:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2275      	movs	r2, #117	; 0x75
 8005f30:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2254      	movs	r2, #84	; 0x54
 8005f38:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2254      	movs	r2, #84	; 0x54
 8005f40:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	227d      	movs	r2, #125	; 0x7d
 8005f48:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2279      	movs	r2, #121	; 0x79
 8005f50:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2240      	movs	r2, #64	; 0x40
 8005f58:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2221      	movs	r2, #33	; 0x21
 8005f60:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2275      	movs	r2, #117	; 0x75
 8005f68:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2255      	movs	r2, #85	; 0x55
 8005f70:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2254      	movs	r2, #84	; 0x54
 8005f78:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	227c      	movs	r2, #124	; 0x7c
 8005f80:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2278      	movs	r2, #120	; 0x78
 8005f88:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2240      	movs	r2, #64	; 0x40
 8005f90:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2274      	movs	r2, #116	; 0x74
 8005fa0:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2257      	movs	r2, #87	; 0x57
 8005fa8:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2257      	movs	r2, #87	; 0x57
 8005fb0:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	227c      	movs	r2, #124	; 0x7c
 8005fb8:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2278      	movs	r2, #120	; 0x78
 8005fc0:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2240      	movs	r2, #64	; 0x40
 8005fc8:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2218      	movs	r2, #24
 8005fd0:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	223c      	movs	r2, #60	; 0x3c
 8005fd8:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	22a4      	movs	r2, #164	; 0xa4
 8005fe0:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	22a4      	movs	r2, #164	; 0xa4
 8005fe8:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	22e4      	movs	r2, #228	; 0xe4
 8005ff0:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2240      	movs	r2, #64	; 0x40
 8005ff8:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	223b      	movs	r2, #59	; 0x3b
 8006008:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	227d      	movs	r2, #125	; 0x7d
 8006010:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2255      	movs	r2, #85	; 0x55
 8006018:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2255      	movs	r2, #85	; 0x55
 8006020:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	225d      	movs	r2, #93	; 0x5d
 8006028:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	221b      	movs	r2, #27
 8006030:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2239      	movs	r2, #57	; 0x39
 8006040:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	227d      	movs	r2, #125	; 0x7d
 8006048:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2254      	movs	r2, #84	; 0x54
 8006050:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2254      	movs	r2, #84	; 0x54
 8006058:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	225d      	movs	r2, #93	; 0x5d
 8006060:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2219      	movs	r2, #25
 8006068:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2239      	movs	r2, #57	; 0x39
 8006070:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	227d      	movs	r2, #125	; 0x7d
 8006078:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2255      	movs	r2, #85	; 0x55
 8006080:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2254      	movs	r2, #84	; 0x54
 8006088:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	225c      	movs	r2, #92	; 0x5c
 8006090:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2218      	movs	r2, #24
 8006098:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2245      	movs	r2, #69	; 0x45
 80060a8:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	227c      	movs	r2, #124	; 0x7c
 80060b0:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	227c      	movs	r2, #124	; 0x7c
 80060b8:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2241      	movs	r2, #65	; 0x41
 80060c0:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2203      	movs	r2, #3
 80060d8:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2245      	movs	r2, #69	; 0x45
 80060e0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	227d      	movs	r2, #125	; 0x7d
 80060e8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	227d      	movs	r2, #125	; 0x7d
 80060f0:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2243      	movs	r2, #67	; 0x43
 80060f8:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2245      	movs	r2, #69	; 0x45
 8006110:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	227d      	movs	r2, #125	; 0x7d
 8006118:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	227c      	movs	r2, #124	; 0x7c
 8006120:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2279      	movs	r2, #121	; 0x79
 8006130:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	227d      	movs	r2, #125	; 0x7d
 8006138:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2216      	movs	r2, #22
 8006140:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2212      	movs	r2, #18
 8006148:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2216      	movs	r2, #22
 8006150:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	227d      	movs	r2, #125	; 0x7d
 8006158:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2279      	movs	r2, #121	; 0x79
 8006160:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2270      	movs	r2, #112	; 0x70
 8006168:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2278      	movs	r2, #120	; 0x78
 8006170:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	222b      	movs	r2, #43	; 0x2b
 8006178:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	222b      	movs	r2, #43	; 0x2b
 8006180:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2278      	movs	r2, #120	; 0x78
 8006188:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2270      	movs	r2, #112	; 0x70
 8006190:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2244      	movs	r2, #68	; 0x44
 8006198:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	227c      	movs	r2, #124	; 0x7c
 80061a0:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	227c      	movs	r2, #124	; 0x7c
 80061a8:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2255      	movs	r2, #85	; 0x55
 80061b0:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2255      	movs	r2, #85	; 0x55
 80061b8:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2245      	movs	r2, #69	; 0x45
 80061c0:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2274      	movs	r2, #116	; 0x74
 80061d0:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2254      	movs	r2, #84	; 0x54
 80061d8:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2254      	movs	r2, #84	; 0x54
 80061e0:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	227c      	movs	r2, #124	; 0x7c
 80061e8:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	227c      	movs	r2, #124	; 0x7c
 80061f0:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2254      	movs	r2, #84	; 0x54
 80061f8:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2254      	movs	r2, #84	; 0x54
 8006200:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	227c      	movs	r2, #124	; 0x7c
 8006208:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	227e      	movs	r2, #126	; 0x7e
 8006210:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	220b      	movs	r2, #11
 8006218:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2209      	movs	r2, #9
 8006220:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	227f      	movs	r2, #127	; 0x7f
 8006228:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	227f      	movs	r2, #127	; 0x7f
 8006230:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2249      	movs	r2, #73	; 0x49
 8006238:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2232      	movs	r2, #50	; 0x32
 8006240:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	227b      	movs	r2, #123	; 0x7b
 8006248:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2249      	movs	r2, #73	; 0x49
 8006250:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2249      	movs	r2, #73	; 0x49
 8006258:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	227b      	movs	r2, #123	; 0x7b
 8006260:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2232      	movs	r2, #50	; 0x32
 8006268:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2232      	movs	r2, #50	; 0x32
 8006270:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	227a      	movs	r2, #122	; 0x7a
 8006278:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2248      	movs	r2, #72	; 0x48
 8006280:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2248      	movs	r2, #72	; 0x48
 8006288:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	227a      	movs	r2, #122	; 0x7a
 8006290:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2232      	movs	r2, #50	; 0x32
 8006298:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2232      	movs	r2, #50	; 0x32
 80062a0:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	227a      	movs	r2, #122	; 0x7a
 80062a8:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	224a      	movs	r2, #74	; 0x4a
 80062b0:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2248      	movs	r2, #72	; 0x48
 80062b8:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2278      	movs	r2, #120	; 0x78
 80062c0:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2230      	movs	r2, #48	; 0x30
 80062c8:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	223a      	movs	r2, #58	; 0x3a
 80062d0:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	227b      	movs	r2, #123	; 0x7b
 80062d8:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2241      	movs	r2, #65	; 0x41
 80062e0:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2241      	movs	r2, #65	; 0x41
 80062e8:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	227b      	movs	r2, #123	; 0x7b
 80062f0:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	227a      	movs	r2, #122	; 0x7a
 80062f8:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2240      	movs	r2, #64	; 0x40
 8006300:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	223a      	movs	r2, #58	; 0x3a
 8006308:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	227a      	movs	r2, #122	; 0x7a
 8006310:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2242      	movs	r2, #66	; 0x42
 8006318:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2240      	movs	r2, #64	; 0x40
 8006320:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2278      	movs	r2, #120	; 0x78
 8006328:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2278      	movs	r2, #120	; 0x78
 8006330:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2240      	movs	r2, #64	; 0x40
 8006338:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	229a      	movs	r2, #154	; 0x9a
 8006340:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	22ba      	movs	r2, #186	; 0xba
 8006348:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	22a0      	movs	r2, #160	; 0xa0
 8006350:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	22a0      	movs	r2, #160	; 0xa0
 8006358:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22fa      	movs	r2, #250	; 0xfa
 8006360:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	227a      	movs	r2, #122	; 0x7a
 8006368:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2219      	movs	r2, #25
 8006378:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	223c      	movs	r2, #60	; 0x3c
 8006380:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2266      	movs	r2, #102	; 0x66
 8006388:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2266      	movs	r2, #102	; 0x66
 8006390:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	223c      	movs	r2, #60	; 0x3c
 8006398:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2219      	movs	r2, #25
 80063a0:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	223d      	movs	r2, #61	; 0x3d
 80063b0:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	227d      	movs	r2, #125	; 0x7d
 80063b8:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2240      	movs	r2, #64	; 0x40
 80063c0:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	227d      	movs	r2, #125	; 0x7d
 80063d0:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	223d      	movs	r2, #61	; 0x3d
 80063d8:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2218      	movs	r2, #24
 80063e0:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	223c      	movs	r2, #60	; 0x3c
 80063e8:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	22e7      	movs	r2, #231	; 0xe7
 80063f8:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	22e7      	movs	r2, #231	; 0xe7
 8006400:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2224      	movs	r2, #36	; 0x24
 8006410:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2268      	movs	r2, #104	; 0x68
 8006418:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	227e      	movs	r2, #126	; 0x7e
 8006420:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	227f      	movs	r2, #127	; 0x7f
 8006428:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2249      	movs	r2, #73	; 0x49
 8006430:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2243      	movs	r2, #67	; 0x43
 8006438:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2266      	movs	r2, #102	; 0x66
 8006440:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	222b      	movs	r2, #43	; 0x2b
 8006450:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	222f      	movs	r2, #47	; 0x2f
 8006458:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	22fc      	movs	r2, #252	; 0xfc
 8006460:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	22fc      	movs	r2, #252	; 0xfc
 8006468:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	222f      	movs	r2, #47	; 0x2f
 8006470:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	222b      	movs	r2, #43	; 0x2b
 8006478:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2209      	movs	r2, #9
 8006490:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2209      	movs	r2, #9
 8006498:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	222f      	movs	r2, #47	; 0x2f
 80064a0:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	22f6      	movs	r2, #246	; 0xf6
 80064a8:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	22f8      	movs	r2, #248	; 0xf8
 80064b0:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	22a0      	movs	r2, #160	; 0xa0
 80064b8:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2240      	movs	r2, #64	; 0x40
 80064c0:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	22c0      	movs	r2, #192	; 0xc0
 80064c8:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2288      	movs	r2, #136	; 0x88
 80064d0:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	22fe      	movs	r2, #254	; 0xfe
 80064d8:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	227f      	movs	r2, #127	; 0x7f
 80064e0:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2209      	movs	r2, #9
 80064e8:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2203      	movs	r2, #3
 80064f0:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2274      	movs	r2, #116	; 0x74
 8006508:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2254      	movs	r2, #84	; 0x54
 8006510:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2255      	movs	r2, #85	; 0x55
 8006518:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	227d      	movs	r2, #125	; 0x7d
 8006520:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2279      	movs	r2, #121	; 0x79
 8006528:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2240      	movs	r2, #64	; 0x40
 8006530:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2244      	movs	r2, #68	; 0x44
 8006538:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	227d      	movs	r2, #125	; 0x7d
 8006540:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	227d      	movs	r2, #125	; 0x7d
 8006548:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2241      	movs	r2, #65	; 0x41
 8006550:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2230      	movs	r2, #48	; 0x30
 8006558:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2278      	movs	r2, #120	; 0x78
 8006560:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2248      	movs	r2, #72	; 0x48
 8006568:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	224a      	movs	r2, #74	; 0x4a
 8006570:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	227a      	movs	r2, #122	; 0x7a
 8006578:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2232      	movs	r2, #50	; 0x32
 8006580:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2238      	movs	r2, #56	; 0x38
 8006588:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2278      	movs	r2, #120	; 0x78
 8006590:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2240      	movs	r2, #64	; 0x40
 8006598:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2242      	movs	r2, #66	; 0x42
 80065a0:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	227a      	movs	r2, #122	; 0x7a
 80065a8:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	227a      	movs	r2, #122	; 0x7a
 80065b0:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2240      	movs	r2, #64	; 0x40
 80065b8:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	227a      	movs	r2, #122	; 0x7a
 80065c0:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	227a      	movs	r2, #122	; 0x7a
 80065c8:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	220a      	movs	r2, #10
 80065d0:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	220a      	movs	r2, #10
 80065d8:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	227a      	movs	r2, #122	; 0x7a
 80065e0:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2270      	movs	r2, #112	; 0x70
 80065e8:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	227d      	movs	r2, #125	; 0x7d
 80065f0:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	227d      	movs	r2, #125	; 0x7d
 80065f8:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2219      	movs	r2, #25
 8006600:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2231      	movs	r2, #49	; 0x31
 8006608:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	227d      	movs	r2, #125	; 0x7d
 8006610:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	227d      	movs	r2, #125	; 0x7d
 8006618:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2226      	movs	r2, #38	; 0x26
 8006620:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	222f      	movs	r2, #47	; 0x2f
 8006628:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2229      	movs	r2, #41	; 0x29
 8006630:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	222f      	movs	r2, #47	; 0x2f
 8006638:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	222f      	movs	r2, #47	; 0x2f
 8006640:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2228      	movs	r2, #40	; 0x28
 8006648:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2226      	movs	r2, #38	; 0x26
 8006650:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	222f      	movs	r2, #47	; 0x2f
 8006658:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2229      	movs	r2, #41	; 0x29
 8006660:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	222f      	movs	r2, #47	; 0x2f
 8006668:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2226      	movs	r2, #38	; 0x26
 8006670:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2230      	movs	r2, #48	; 0x30
 8006678:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2278      	movs	r2, #120	; 0x78
 8006680:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	224d      	movs	r2, #77	; 0x4d
 8006688:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2245      	movs	r2, #69	; 0x45
 8006690:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2260      	movs	r2, #96	; 0x60
 8006698:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2238      	movs	r2, #56	; 0x38
 80066a8:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2238      	movs	r2, #56	; 0x38
 80066b0:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2208      	movs	r2, #8
 80066b8:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2208      	movs	r2, #8
 80066c0:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2208      	movs	r2, #8
 80066c8:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2208      	movs	r2, #8
 80066d0:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2208      	movs	r2, #8
 80066d8:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2208      	movs	r2, #8
 80066e0:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2208      	movs	r2, #8
 80066e8:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2208      	movs	r2, #8
 80066f0:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2238      	movs	r2, #56	; 0x38
 80066f8:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2238      	movs	r2, #56	; 0x38
 8006700:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	224f      	movs	r2, #79	; 0x4f
 8006708:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	226f      	movs	r2, #111	; 0x6f
 8006710:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2230      	movs	r2, #48	; 0x30
 8006718:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2218      	movs	r2, #24
 8006720:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	22cc      	movs	r2, #204	; 0xcc
 8006728:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	22ee      	movs	r2, #238	; 0xee
 8006730:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	22bb      	movs	r2, #187	; 0xbb
 8006738:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2291      	movs	r2, #145	; 0x91
 8006740:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	224f      	movs	r2, #79	; 0x4f
 8006748:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	226f      	movs	r2, #111	; 0x6f
 8006750:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2230      	movs	r2, #48	; 0x30
 8006758:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2218      	movs	r2, #24
 8006760:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	226c      	movs	r2, #108	; 0x6c
 8006768:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2276      	movs	r2, #118	; 0x76
 8006770:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	22fb      	movs	r2, #251	; 0xfb
 8006778:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	22f9      	movs	r2, #249	; 0xf9
 8006780:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	227b      	movs	r2, #123	; 0x7b
 8006788:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	227b      	movs	r2, #123	; 0x7b
 8006790:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2208      	movs	r2, #8
 8006798:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	221c      	movs	r2, #28
 80067a0:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2236      	movs	r2, #54	; 0x36
 80067a8:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2222      	movs	r2, #34	; 0x22
 80067b0:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2208      	movs	r2, #8
 80067b8:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	221c      	movs	r2, #28
 80067c0:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2236      	movs	r2, #54	; 0x36
 80067c8:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2222      	movs	r2, #34	; 0x22
 80067d0:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2222      	movs	r2, #34	; 0x22
 80067d8:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2236      	movs	r2, #54	; 0x36
 80067e0:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	221c      	movs	r2, #28
 80067e8:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2208      	movs	r2, #8
 80067f0:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2222      	movs	r2, #34	; 0x22
 80067f8:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2236      	movs	r2, #54	; 0x36
 8006800:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	221c      	movs	r2, #28
 8006808:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2208      	movs	r2, #8
 8006810:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	22aa      	movs	r2, #170	; 0xaa
 8006818:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2255      	movs	r2, #85	; 0x55
 8006820:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22aa      	movs	r2, #170	; 0xaa
 8006828:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2255      	movs	r2, #85	; 0x55
 8006830:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	22aa      	movs	r2, #170	; 0xaa
 8006838:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2255      	movs	r2, #85	; 0x55
 8006840:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	22aa      	movs	r2, #170	; 0xaa
 8006848:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2255      	movs	r2, #85	; 0x55
 8006850:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	22aa      	movs	r2, #170	; 0xaa
 8006858:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2255      	movs	r2, #85	; 0x55
 8006860:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	22aa      	movs	r2, #170	; 0xaa
 8006868:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2255      	movs	r2, #85	; 0x55
 8006870:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	22dd      	movs	r2, #221	; 0xdd
 8006878:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	22aa      	movs	r2, #170	; 0xaa
 8006888:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2277      	movs	r2, #119	; 0x77
 8006890:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	22dd      	movs	r2, #221	; 0xdd
 8006898:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	22aa      	movs	r2, #170	; 0xaa
 80068a0:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2277      	movs	r2, #119	; 0x77
 80068b0:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	22ff      	movs	r2, #255	; 0xff
 80068b8:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	22ff      	movs	r2, #255	; 0xff
 80068c0:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2210      	movs	r2, #16
 80068c8:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2210      	movs	r2, #16
 80068d0:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2210      	movs	r2, #16
 80068d8:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	22ff      	movs	r2, #255	; 0xff
 80068e0:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2214      	movs	r2, #20
 80068f0:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2214      	movs	r2, #20
 80068f8:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2214      	movs	r2, #20
 8006900:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	22ff      	movs	r2, #255	; 0xff
 8006908:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	22ff      	movs	r2, #255	; 0xff
 8006910:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2210      	movs	r2, #16
 8006918:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2210      	movs	r2, #16
 8006920:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	22ff      	movs	r2, #255	; 0xff
 8006930:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	22ff      	movs	r2, #255	; 0xff
 8006940:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2210      	movs	r2, #16
 8006948:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2210      	movs	r2, #16
 8006950:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	22f0      	movs	r2, #240	; 0xf0
 8006958:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	22f0      	movs	r2, #240	; 0xf0
 8006960:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2210      	movs	r2, #16
 8006968:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	22f0      	movs	r2, #240	; 0xf0
 8006970:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	22f0      	movs	r2, #240	; 0xf0
 8006978:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2214      	movs	r2, #20
 8006980:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2214      	movs	r2, #20
 8006988:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2214      	movs	r2, #20
 8006990:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	22fc      	movs	r2, #252	; 0xfc
 8006998:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	22fc      	movs	r2, #252	; 0xfc
 80069a0:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2214      	movs	r2, #20
 80069a8:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2214      	movs	r2, #20
 80069b0:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	22f7      	movs	r2, #247	; 0xf7
 80069b8:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	22f7      	movs	r2, #247	; 0xf7
 80069c0:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	22ff      	movs	r2, #255	; 0xff
 80069c8:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	22ff      	movs	r2, #255	; 0xff
 80069d8:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	22ff      	movs	r2, #255	; 0xff
 80069e0:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	22ff      	movs	r2, #255	; 0xff
 80069e8:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2214      	movs	r2, #20
 80069f8:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2214      	movs	r2, #20
 8006a00:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	22f4      	movs	r2, #244	; 0xf4
 8006a08:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	22f4      	movs	r2, #244	; 0xf4
 8006a10:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2204      	movs	r2, #4
 8006a18:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	22fc      	movs	r2, #252	; 0xfc
 8006a20:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	22fc      	movs	r2, #252	; 0xfc
 8006a28:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2214      	movs	r2, #20
 8006a30:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2214      	movs	r2, #20
 8006a38:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2217      	movs	r2, #23
 8006a40:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2217      	movs	r2, #23
 8006a48:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	221f      	movs	r2, #31
 8006a58:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	221f      	movs	r2, #31
 8006a60:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2210      	movs	r2, #16
 8006a68:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	221f      	movs	r2, #31
 8006a78:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	221f      	movs	r2, #31
 8006a80:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2210      	movs	r2, #16
 8006a88:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	221f      	movs	r2, #31
 8006a90:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	221f      	movs	r2, #31
 8006a98:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2214      	movs	r2, #20
 8006aa0:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2214      	movs	r2, #20
 8006aa8:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2214      	movs	r2, #20
 8006ab0:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	221f      	movs	r2, #31
 8006ab8:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	221f      	movs	r2, #31
 8006ac0:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2210      	movs	r2, #16
 8006ad0:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22f0      	movs	r2, #240	; 0xf0
 8006ae0:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	22f0      	movs	r2, #240	; 0xf0
 8006ae8:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	221f      	movs	r2, #31
 8006af0:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	221f      	movs	r2, #31
 8006af8:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2210      	movs	r2, #16
 8006b00:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2210      	movs	r2, #16
 8006b08:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2210      	movs	r2, #16
 8006b18:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2210      	movs	r2, #16
 8006b20:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2210      	movs	r2, #16
 8006b28:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	221f      	movs	r2, #31
 8006b30:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	221f      	movs	r2, #31
 8006b38:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2210      	movs	r2, #16
 8006b48:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2210      	movs	r2, #16
 8006b58:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2210      	movs	r2, #16
 8006b60:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2210      	movs	r2, #16
 8006b68:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	22f0      	movs	r2, #240	; 0xf0
 8006b70:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	22f0      	movs	r2, #240	; 0xf0
 8006b78:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2210      	movs	r2, #16
 8006b80:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2210      	movs	r2, #16
 8006b88:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2210      	movs	r2, #16
 8006b90:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	22ff      	movs	r2, #255	; 0xff
 8006b98:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	22ff      	movs	r2, #255	; 0xff
 8006ba0:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2210      	movs	r2, #16
 8006bb0:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2210      	movs	r2, #16
 8006bb8:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2210      	movs	r2, #16
 8006be0:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2210      	movs	r2, #16
 8006be8:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2210      	movs	r2, #16
 8006bf0:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2210      	movs	r2, #16
 8006c08:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2210      	movs	r2, #16
 8006c10:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	22ff      	movs	r2, #255	; 0xff
 8006c18:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	22ff      	movs	r2, #255	; 0xff
 8006c20:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2210      	movs	r2, #16
 8006c28:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2210      	movs	r2, #16
 8006c38:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	22ff      	movs	r2, #255	; 0xff
 8006c40:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	22ff      	movs	r2, #255	; 0xff
 8006c48:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2214      	movs	r2, #20
 8006c50:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2214      	movs	r2, #20
 8006c58:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2214      	movs	r2, #20
 8006c60:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	22ff      	movs	r2, #255	; 0xff
 8006c78:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	22ff      	movs	r2, #255	; 0xff
 8006c80:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2210      	movs	r2, #16
 8006c88:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	221f      	movs	r2, #31
 8006c90:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	221f      	movs	r2, #31
 8006c98:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2217      	movs	r2, #23
 8006ca8:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2217      	movs	r2, #23
 8006cb0:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2214      	movs	r2, #20
 8006cb8:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	22fc      	movs	r2, #252	; 0xfc
 8006cc0:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	22fc      	movs	r2, #252	; 0xfc
 8006cc8:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	22f4      	movs	r2, #244	; 0xf4
 8006cd8:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	22f4      	movs	r2, #244	; 0xf4
 8006ce0:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2214      	movs	r2, #20
 8006ce8:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2214      	movs	r2, #20
 8006cf0:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2214      	movs	r2, #20
 8006cf8:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2217      	movs	r2, #23
 8006d00:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2217      	movs	r2, #23
 8006d08:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2217      	movs	r2, #23
 8006d18:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2217      	movs	r2, #23
 8006d20:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2214      	movs	r2, #20
 8006d28:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2214      	movs	r2, #20
 8006d30:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2214      	movs	r2, #20
 8006d38:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	22f4      	movs	r2, #244	; 0xf4
 8006d40:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	22f4      	movs	r2, #244	; 0xf4
 8006d48:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	22f4      	movs	r2, #244	; 0xf4
 8006d58:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	22f4      	movs	r2, #244	; 0xf4
 8006d60:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2214      	movs	r2, #20
 8006d68:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	22ff      	movs	r2, #255	; 0xff
 8006d70:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	22ff      	movs	r2, #255	; 0xff
 8006d78:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	22f7      	movs	r2, #247	; 0xf7
 8006d80:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	22f7      	movs	r2, #247	; 0xf7
 8006d88:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2214      	movs	r2, #20
 8006d90:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2214      	movs	r2, #20
 8006d98:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2214      	movs	r2, #20
 8006da0:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2214      	movs	r2, #20
 8006da8:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2214      	movs	r2, #20
 8006db0:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2214      	movs	r2, #20
 8006db8:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2214      	movs	r2, #20
 8006dc0:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2214      	movs	r2, #20
 8006dc8:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2214      	movs	r2, #20
 8006dd0:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2214      	movs	r2, #20
 8006dd8:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2214      	movs	r2, #20
 8006de0:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	22f7      	movs	r2, #247	; 0xf7
 8006de8:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	22f7      	movs	r2, #247	; 0xf7
 8006df0:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	22f7      	movs	r2, #247	; 0xf7
 8006df8:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	22f7      	movs	r2, #247	; 0xf7
 8006e00:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2214      	movs	r2, #20
 8006e08:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2214      	movs	r2, #20
 8006e10:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2214      	movs	r2, #20
 8006e18:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2214      	movs	r2, #20
 8006e20:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2217      	movs	r2, #23
 8006e28:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2217      	movs	r2, #23
 8006e30:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2214      	movs	r2, #20
 8006e38:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2214      	movs	r2, #20
 8006e40:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2214      	movs	r2, #20
 8006e48:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2210      	movs	r2, #16
 8006e50:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2210      	movs	r2, #16
 8006e58:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	221f      	movs	r2, #31
 8006e60:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	221f      	movs	r2, #31
 8006e68:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	221f      	movs	r2, #31
 8006e78:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	221f      	movs	r2, #31
 8006e80:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2210      	movs	r2, #16
 8006e88:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2214      	movs	r2, #20
 8006e90:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2214      	movs	r2, #20
 8006e98:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2214      	movs	r2, #20
 8006ea0:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	22f4      	movs	r2, #244	; 0xf4
 8006ea8:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	22f4      	movs	r2, #244	; 0xf4
 8006eb0:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2214      	movs	r2, #20
 8006eb8:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2214      	movs	r2, #20
 8006ec0:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2214      	movs	r2, #20
 8006ec8:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2210      	movs	r2, #16
 8006ed0:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	22f0      	movs	r2, #240	; 0xf0
 8006ee0:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	22f0      	movs	r2, #240	; 0xf0
 8006ee8:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	22f0      	movs	r2, #240	; 0xf0
 8006ef8:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	22f0      	movs	r2, #240	; 0xf0
 8006f00:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2210      	movs	r2, #16
 8006f08:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	221f      	movs	r2, #31
 8006f10:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	221f      	movs	r2, #31
 8006f18:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2210      	movs	r2, #16
 8006f20:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	221f      	movs	r2, #31
 8006f28:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	221f      	movs	r2, #31
 8006f30:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2210      	movs	r2, #16
 8006f38:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	221f      	movs	r2, #31
 8006f40:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	221f      	movs	r2, #31
 8006f48:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2214      	movs	r2, #20
 8006f50:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2214      	movs	r2, #20
 8006f58:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2214      	movs	r2, #20
 8006f60:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	22fc      	movs	r2, #252	; 0xfc
 8006f68:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	22fc      	movs	r2, #252	; 0xfc
 8006f70:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2214      	movs	r2, #20
 8006f78:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2214      	movs	r2, #20
 8006f80:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2214      	movs	r2, #20
 8006f88:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	22f0      	movs	r2, #240	; 0xf0
 8006f90:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	22f0      	movs	r2, #240	; 0xf0
 8006f98:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	22f0      	movs	r2, #240	; 0xf0
 8006fa8:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	22f0      	movs	r2, #240	; 0xf0
 8006fb0:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2210      	movs	r2, #16
 8006fc0:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	22ff      	movs	r2, #255	; 0xff
 8006fd0:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	22ff      	movs	r2, #255	; 0xff
 8006fd8:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2210      	movs	r2, #16
 8006fe0:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	22ff      	movs	r2, #255	; 0xff
 8006fe8:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	22ff      	movs	r2, #255	; 0xff
 8006ff0:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2210      	movs	r2, #16
 8006ff8:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2214      	movs	r2, #20
 8007000:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2214      	movs	r2, #20
 8007008:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2214      	movs	r2, #20
 8007010:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	22ff      	movs	r2, #255	; 0xff
 8007018:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	22ff      	movs	r2, #255	; 0xff
 8007020:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2214      	movs	r2, #20
 8007028:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2214      	movs	r2, #20
 8007030:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2214      	movs	r2, #20
 8007038:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2210      	movs	r2, #16
 8007040:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2210      	movs	r2, #16
 8007048:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2210      	movs	r2, #16
 8007050:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	221f      	movs	r2, #31
 8007058:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	221f      	movs	r2, #31
 8007060:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	22f0      	movs	r2, #240	; 0xf0
 8007068:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	22f0      	movs	r2, #240	; 0xf0
 8007070:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2210      	movs	r2, #16
 8007078:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2210      	movs	r2, #16
 8007080:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2210      	movs	r2, #16
 8007088:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	22ff      	movs	r2, #255	; 0xff
 8007090:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	22ff      	movs	r2, #255	; 0xff
 8007098:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	22ff      	movs	r2, #255	; 0xff
 80070a0:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	22ff      	movs	r2, #255	; 0xff
 80070a8:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	22ff      	movs	r2, #255	; 0xff
 80070b0:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	22ff      	movs	r2, #255	; 0xff
 80070b8:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	22ff      	movs	r2, #255	; 0xff
 80070c0:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	22ff      	movs	r2, #255	; 0xff
 80070c8:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	22f0      	movs	r2, #240	; 0xf0
 80070d0:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	22f0      	movs	r2, #240	; 0xf0
 80070d8:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	22f0      	movs	r2, #240	; 0xf0
 80070e0:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	22f0      	movs	r2, #240	; 0xf0
 80070e8:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	22f0      	movs	r2, #240	; 0xf0
 80070f0:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	22f0      	movs	r2, #240	; 0xf0
 80070f8:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	22f0      	movs	r2, #240	; 0xf0
 8007100:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	22f0      	movs	r2, #240	; 0xf0
 8007108:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	22ff      	movs	r2, #255	; 0xff
 8007110:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	22ff      	movs	r2, #255	; 0xff
 8007118:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	22ff      	movs	r2, #255	; 0xff
 8007120:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	22ff      	movs	r2, #255	; 0xff
 8007128:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	22ff      	movs	r2, #255	; 0xff
 8007130:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	22ff      	movs	r2, #255	; 0xff
 8007138:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	22ff      	movs	r2, #255	; 0xff
 8007140:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	22ff      	movs	r2, #255	; 0xff
 8007148:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220f      	movs	r2, #15
 8007150:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	220f      	movs	r2, #15
 8007158:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220f      	movs	r2, #15
 8007160:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	220f      	movs	r2, #15
 8007168:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	220f      	movs	r2, #15
 8007170:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	220f      	movs	r2, #15
 8007178:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	220f      	movs	r2, #15
 8007180:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	220f      	movs	r2, #15
 8007188:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2238      	movs	r2, #56	; 0x38
 8007190:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	227c      	movs	r2, #124	; 0x7c
 8007198:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2244      	movs	r2, #68	; 0x44
 80071a0:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	226c      	movs	r2, #108	; 0x6c
 80071a8:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2238      	movs	r2, #56	; 0x38
 80071b0:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	226c      	movs	r2, #108	; 0x6c
 80071b8:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2244      	movs	r2, #68	; 0x44
 80071c0:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	22fc      	movs	r2, #252	; 0xfc
 80071c8:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	22fe      	movs	r2, #254	; 0xfe
 80071d0:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	222a      	movs	r2, #42	; 0x2a
 80071d8:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	222a      	movs	r2, #42	; 0x2a
 80071e0:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	223e      	movs	r2, #62	; 0x3e
 80071e8:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2214      	movs	r2, #20
 80071f0:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	227e      	movs	r2, #126	; 0x7e
 80071f8:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	227e      	movs	r2, #126	; 0x7e
 8007200:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2206      	movs	r2, #6
 8007218:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2206      	movs	r2, #6
 8007220:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	227e      	movs	r2, #126	; 0x7e
 8007230:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	227e      	movs	r2, #126	; 0x7e
 8007238:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	227e      	movs	r2, #126	; 0x7e
 8007248:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	227e      	movs	r2, #126	; 0x7e
 8007250:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2263      	movs	r2, #99	; 0x63
 8007260:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2277      	movs	r2, #119	; 0x77
 8007268:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	225d      	movs	r2, #93	; 0x5d
 8007270:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2249      	movs	r2, #73	; 0x49
 8007278:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2263      	movs	r2, #99	; 0x63
 8007280:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2263      	movs	r2, #99	; 0x63
 8007288:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2238      	movs	r2, #56	; 0x38
 8007290:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	227c      	movs	r2, #124	; 0x7c
 8007298:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2244      	movs	r2, #68	; 0x44
 80072a0:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	227c      	movs	r2, #124	; 0x7c
 80072a8:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	223c      	movs	r2, #60	; 0x3c
 80072b0:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2204      	movs	r2, #4
 80072b8:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2204      	movs	r2, #4
 80072c0:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	22fe      	movs	r2, #254	; 0xfe
 80072d0:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	227e      	movs	r2, #126	; 0x7e
 80072d8:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	223e      	movs	r2, #62	; 0x3e
 80072f0:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	221e      	movs	r2, #30
 80072f8:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2204      	movs	r2, #4
 8007300:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2206      	movs	r2, #6
 8007308:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	227e      	movs	r2, #126	; 0x7e
 8007318:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	227c      	movs	r2, #124	; 0x7c
 8007320:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2206      	movs	r2, #6
 8007328:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2299      	movs	r2, #153	; 0x99
 8007338:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22bd      	movs	r2, #189	; 0xbd
 8007340:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	22e7      	movs	r2, #231	; 0xe7
 8007348:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	22e7      	movs	r2, #231	; 0xe7
 8007350:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	22bd      	movs	r2, #189	; 0xbd
 8007358:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2299      	movs	r2, #153	; 0x99
 8007360:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	221c      	movs	r2, #28
 8007368:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	223e      	movs	r2, #62	; 0x3e
 8007370:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	226b      	movs	r2, #107	; 0x6b
 8007378:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2249      	movs	r2, #73	; 0x49
 8007380:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	226b      	movs	r2, #107	; 0x6b
 8007388:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	223e      	movs	r2, #62	; 0x3e
 8007390:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	221c      	movs	r2, #28
 8007398:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	224c      	movs	r2, #76	; 0x4c
 80073a0:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	227e      	movs	r2, #126	; 0x7e
 80073a8:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2273      	movs	r2, #115	; 0x73
 80073b0:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2273      	movs	r2, #115	; 0x73
 80073c0:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	227e      	movs	r2, #126	; 0x7e
 80073c8:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	224c      	movs	r2, #76	; 0x4c
 80073d0:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2230      	movs	r2, #48	; 0x30
 80073d8:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2278      	movs	r2, #120	; 0x78
 80073e0:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	224a      	movs	r2, #74	; 0x4a
 80073e8:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	224f      	movs	r2, #79	; 0x4f
 80073f0:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	227d      	movs	r2, #125	; 0x7d
 80073f8:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2239      	movs	r2, #57	; 0x39
 8007400:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2218      	movs	r2, #24
 8007408:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	223c      	movs	r2, #60	; 0x3c
 8007410:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2224      	movs	r2, #36	; 0x24
 8007418:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	223c      	movs	r2, #60	; 0x3c
 8007420:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	223c      	movs	r2, #60	; 0x3c
 8007428:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2224      	movs	r2, #36	; 0x24
 8007430:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	223c      	movs	r2, #60	; 0x3c
 8007438:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2218      	movs	r2, #24
 8007440:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2298      	movs	r2, #152	; 0x98
 8007448:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	22fc      	movs	r2, #252	; 0xfc
 8007450:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2264      	movs	r2, #100	; 0x64
 8007458:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	223c      	movs	r2, #60	; 0x3c
 8007460:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	223e      	movs	r2, #62	; 0x3e
 8007468:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2227      	movs	r2, #39	; 0x27
 8007470:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	223d      	movs	r2, #61	; 0x3d
 8007478:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2218      	movs	r2, #24
 8007480:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	221c      	movs	r2, #28
 8007488:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	223e      	movs	r2, #62	; 0x3e
 8007490:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	226b      	movs	r2, #107	; 0x6b
 8007498:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2249      	movs	r2, #73	; 0x49
 80074a0:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2249      	movs	r2, #73	; 0x49
 80074a8:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	227e      	movs	r2, #126	; 0x7e
 80074b0:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	227f      	movs	r2, #127	; 0x7f
 80074b8:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	227f      	movs	r2, #127	; 0x7f
 80074d0:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	227e      	movs	r2, #126	; 0x7e
 80074d8:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	222a      	movs	r2, #42	; 0x2a
 80074e0:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	222a      	movs	r2, #42	; 0x2a
 80074e8:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	222a      	movs	r2, #42	; 0x2a
 80074f0:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	222a      	movs	r2, #42	; 0x2a
 80074f8:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	222a      	movs	r2, #42	; 0x2a
 8007500:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	222a      	movs	r2, #42	; 0x2a
 8007508:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2244      	movs	r2, #68	; 0x44
 8007510:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2244      	movs	r2, #68	; 0x44
 8007518:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	225f      	movs	r2, #95	; 0x5f
 8007520:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	225f      	movs	r2, #95	; 0x5f
 8007528:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2244      	movs	r2, #68	; 0x44
 8007530:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2244      	movs	r2, #68	; 0x44
 8007538:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2251      	movs	r2, #81	; 0x51
 8007548:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	225b      	movs	r2, #91	; 0x5b
 8007550:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	224e      	movs	r2, #78	; 0x4e
 8007558:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2244      	movs	r2, #68	; 0x44
 8007560:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2240      	movs	r2, #64	; 0x40
 8007570:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2244      	movs	r2, #68	; 0x44
 8007578:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	224e      	movs	r2, #78	; 0x4e
 8007580:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	225b      	movs	r2, #91	; 0x5b
 8007588:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2251      	movs	r2, #81	; 0x51
 8007590:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2240      	movs	r2, #64	; 0x40
 8007598:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	22fe      	movs	r2, #254	; 0xfe
 80075a0:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	22ff      	movs	r2, #255	; 0xff
 80075a8:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2207      	movs	r2, #7
 80075b8:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2206      	movs	r2, #6
 80075c0:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2260      	movs	r2, #96	; 0x60
 80075c8:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	22e0      	movs	r2, #224	; 0xe0
 80075d0:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2280      	movs	r2, #128	; 0x80
 80075d8:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	22ff      	movs	r2, #255	; 0xff
 80075e0:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	227f      	movs	r2, #127	; 0x7f
 80075e8:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2208      	movs	r2, #8
 80075f0:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2208      	movs	r2, #8
 80075f8:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	226b      	movs	r2, #107	; 0x6b
 8007600:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	226b      	movs	r2, #107	; 0x6b
 8007608:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2208      	movs	r2, #8
 8007610:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2208      	movs	r2, #8
 8007618:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2224      	movs	r2, #36	; 0x24
 8007620:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2236      	movs	r2, #54	; 0x36
 8007628:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2212      	movs	r2, #18
 8007630:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2236      	movs	r2, #54	; 0x36
 8007638:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	; 0x24
 8007640:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2236      	movs	r2, #54	; 0x36
 8007648:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2212      	movs	r2, #18
 8007650:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2206      	movs	r2, #6
 8007658:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	220f      	movs	r2, #15
 8007660:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2209      	movs	r2, #9
 8007668:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	220f      	movs	r2, #15
 8007670:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2206      	movs	r2, #6
 8007678:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2218      	movs	r2, #24
 8007680:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2218      	movs	r2, #24
 8007688:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2210      	movs	r2, #16
 8007690:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2210      	movs	r2, #16
 8007698:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2210      	movs	r2, #16
 80076a0:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2230      	movs	r2, #48	; 0x30
 80076a8:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2270      	movs	r2, #112	; 0x70
 80076b0:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	22c0      	movs	r2, #192	; 0xc0
 80076b8:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	22ff      	movs	r2, #255	; 0xff
 80076c0:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	22ff      	movs	r2, #255	; 0xff
 80076c8:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	221f      	movs	r2, #31
 80076e0:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	221f      	movs	r2, #31
 80076e8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	221f      	movs	r2, #31
 80076f8:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	221e      	movs	r2, #30
 8007700:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2219      	movs	r2, #25
 8007708:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	221d      	movs	r2, #29
 8007710:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2217      	movs	r2, #23
 8007718:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2212      	movs	r2, #18
 8007720:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	223c      	movs	r2, #60	; 0x3c
 8007728:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	223c      	movs	r2, #60	; 0x3c
 8007730:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	223c      	movs	r2, #60	; 0x3c
 8007738:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	223c      	movs	r2, #60	; 0x3c
 8007740:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f603 0326 	addw	r3, r3, #2086	; 0x826
 800774a:	f240 12db 	movw	r2, #475	; 0x1db
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f009 fa7d 	bl	8010c50 <memset>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	225f      	movs	r2, #95	; 0x5f
 800775a:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2207      	movs	r2, #7
 8007762:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2207      	movs	r2, #7
 800776a:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2214      	movs	r2, #20
 8007772:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	227f      	movs	r2, #127	; 0x7f
 800777a:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2214      	movs	r2, #20
 8007782:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	227f      	movs	r2, #127	; 0x7f
 800778a:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2214      	movs	r2, #20
 8007792:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2224      	movs	r2, #36	; 0x24
 800779a:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	222a      	movs	r2, #42	; 0x2a
 80077a2:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	227f      	movs	r2, #127	; 0x7f
 80077aa:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	222a      	movs	r2, #42	; 0x2a
 80077b2:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2212      	movs	r2, #18
 80077ba:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2223      	movs	r2, #35	; 0x23
 80077c2:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2213      	movs	r2, #19
 80077ca:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2208      	movs	r2, #8
 80077d2:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2264      	movs	r2, #100	; 0x64
 80077da:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2262      	movs	r2, #98	; 0x62
 80077e2:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2236      	movs	r2, #54	; 0x36
 80077ea:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2249      	movs	r2, #73	; 0x49
 80077f2:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2255      	movs	r2, #85	; 0x55
 80077fa:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2222      	movs	r2, #34	; 0x22
 8007802:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2250      	movs	r2, #80	; 0x50
 800780a:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2205      	movs	r2, #5
 8007812:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2203      	movs	r2, #3
 800781a:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	221c      	movs	r2, #28
 8007822:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2222      	movs	r2, #34	; 0x22
 800782a:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2241      	movs	r2, #65	; 0x41
 8007832:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2241      	movs	r2, #65	; 0x41
 800783a:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2222      	movs	r2, #34	; 0x22
 8007842:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	221c      	movs	r2, #28
 800784a:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2208      	movs	r2, #8
 8007852:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	222a      	movs	r2, #42	; 0x2a
 800785a:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	221c      	movs	r2, #28
 8007862:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	222a      	movs	r2, #42	; 0x2a
 800786a:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2208      	movs	r2, #8
 8007872:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2208      	movs	r2, #8
 800787a:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2208      	movs	r2, #8
 8007882:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	223e      	movs	r2, #62	; 0x3e
 800788a:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2208      	movs	r2, #8
 8007892:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2208      	movs	r2, #8
 800789a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2250      	movs	r2, #80	; 0x50
 80078a2:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2230      	movs	r2, #48	; 0x30
 80078aa:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2208      	movs	r2, #8
 80078b2:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2208      	movs	r2, #8
 80078ba:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2208      	movs	r2, #8
 80078c2:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2208      	movs	r2, #8
 80078ca:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2208      	movs	r2, #8
 80078d2:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2230      	movs	r2, #48	; 0x30
 80078da:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2230      	movs	r2, #48	; 0x30
 80078e2:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2210      	movs	r2, #16
 80078f2:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2208      	movs	r2, #8
 80078fa:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	223e      	movs	r2, #62	; 0x3e
 8007912:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2251      	movs	r2, #81	; 0x51
 800791a:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2249      	movs	r2, #73	; 0x49
 8007922:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2245      	movs	r2, #69	; 0x45
 800792a:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	223e      	movs	r2, #62	; 0x3e
 8007932:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2242      	movs	r2, #66	; 0x42
 800793a:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	227f      	movs	r2, #127	; 0x7f
 8007942:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2240      	movs	r2, #64	; 0x40
 800794a:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2242      	movs	r2, #66	; 0x42
 8007952:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2261      	movs	r2, #97	; 0x61
 800795a:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2251      	movs	r2, #81	; 0x51
 8007962:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2249      	movs	r2, #73	; 0x49
 800796a:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2246      	movs	r2, #70	; 0x46
 8007972:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2221      	movs	r2, #33	; 0x21
 800797a:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2241      	movs	r2, #65	; 0x41
 8007982:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2245      	movs	r2, #69	; 0x45
 800798a:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	224b      	movs	r2, #75	; 0x4b
 8007992:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2231      	movs	r2, #49	; 0x31
 800799a:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2218      	movs	r2, #24
 80079a2:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2214      	movs	r2, #20
 80079aa:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2212      	movs	r2, #18
 80079b2:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	227f      	movs	r2, #127	; 0x7f
 80079ba:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2210      	movs	r2, #16
 80079c2:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2227      	movs	r2, #39	; 0x27
 80079ca:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2245      	movs	r2, #69	; 0x45
 80079d2:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2245      	movs	r2, #69	; 0x45
 80079da:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2245      	movs	r2, #69	; 0x45
 80079e2:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2239      	movs	r2, #57	; 0x39
 80079ea:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	223c      	movs	r2, #60	; 0x3c
 80079f2:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	224a      	movs	r2, #74	; 0x4a
 80079fa:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2249      	movs	r2, #73	; 0x49
 8007a02:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2249      	movs	r2, #73	; 0x49
 8007a0a:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2230      	movs	r2, #48	; 0x30
 8007a12:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2271      	movs	r2, #113	; 0x71
 8007a22:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2209      	movs	r2, #9
 8007a2a:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2205      	movs	r2, #5
 8007a32:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2203      	movs	r2, #3
 8007a3a:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2236      	movs	r2, #54	; 0x36
 8007a42:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2249      	movs	r2, #73	; 0x49
 8007a4a:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2249      	movs	r2, #73	; 0x49
 8007a52:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2249      	movs	r2, #73	; 0x49
 8007a5a:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2236      	movs	r2, #54	; 0x36
 8007a62:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2206      	movs	r2, #6
 8007a6a:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2249      	movs	r2, #73	; 0x49
 8007a72:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2249      	movs	r2, #73	; 0x49
 8007a7a:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2229      	movs	r2, #41	; 0x29
 8007a82:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	221e      	movs	r2, #30
 8007a8a:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2236      	movs	r2, #54	; 0x36
 8007a92:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2236      	movs	r2, #54	; 0x36
 8007a9a:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2256      	movs	r2, #86	; 0x56
 8007aa2:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2236      	movs	r2, #54	; 0x36
 8007aaa:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2214      	movs	r2, #20
 8007aba:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2222      	movs	r2, #34	; 0x22
 8007ac2:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2241      	movs	r2, #65	; 0x41
 8007aca:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2214      	movs	r2, #20
 8007ad2:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2214      	movs	r2, #20
 8007ada:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2214      	movs	r2, #20
 8007ae2:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2214      	movs	r2, #20
 8007aea:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2214      	movs	r2, #20
 8007af2:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2241      	movs	r2, #65	; 0x41
 8007afa:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2222      	movs	r2, #34	; 0x22
 8007b02:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2214      	movs	r2, #20
 8007b0a:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2208      	movs	r2, #8
 8007b12:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2251      	movs	r2, #81	; 0x51
 8007b2a:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2209      	movs	r2, #9
 8007b32:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2206      	movs	r2, #6
 8007b3a:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2232      	movs	r2, #50	; 0x32
 8007b42:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2249      	movs	r2, #73	; 0x49
 8007b4a:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2279      	movs	r2, #121	; 0x79
 8007b52:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2241      	movs	r2, #65	; 0x41
 8007b5a:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	223e      	movs	r2, #62	; 0x3e
 8007b62:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	227e      	movs	r2, #126	; 0x7e
 8007b6a:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2211      	movs	r2, #17
 8007b72:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2211      	movs	r2, #17
 8007b7a:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2211      	movs	r2, #17
 8007b82:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	227e      	movs	r2, #126	; 0x7e
 8007b8a:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	227f      	movs	r2, #127	; 0x7f
 8007b92:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2249      	movs	r2, #73	; 0x49
 8007b9a:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2249      	movs	r2, #73	; 0x49
 8007ba2:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2249      	movs	r2, #73	; 0x49
 8007baa:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2236      	movs	r2, #54	; 0x36
 8007bb2:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	223e      	movs	r2, #62	; 0x3e
 8007bba:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2241      	movs	r2, #65	; 0x41
 8007bc2:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2241      	movs	r2, #65	; 0x41
 8007bca:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2241      	movs	r2, #65	; 0x41
 8007bd2:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2222      	movs	r2, #34	; 0x22
 8007bda:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	227f      	movs	r2, #127	; 0x7f
 8007be2:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2241      	movs	r2, #65	; 0x41
 8007bea:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2241      	movs	r2, #65	; 0x41
 8007bf2:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2222      	movs	r2, #34	; 0x22
 8007bfa:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	221c      	movs	r2, #28
 8007c02:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	227f      	movs	r2, #127	; 0x7f
 8007c0a:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2249      	movs	r2, #73	; 0x49
 8007c12:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2249      	movs	r2, #73	; 0x49
 8007c1a:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2249      	movs	r2, #73	; 0x49
 8007c22:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2241      	movs	r2, #65	; 0x41
 8007c2a:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	227f      	movs	r2, #127	; 0x7f
 8007c32:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2209      	movs	r2, #9
 8007c3a:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2209      	movs	r2, #9
 8007c42:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	223e      	movs	r2, #62	; 0x3e
 8007c5a:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2241      	movs	r2, #65	; 0x41
 8007c62:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2241      	movs	r2, #65	; 0x41
 8007c6a:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2251      	movs	r2, #81	; 0x51
 8007c72:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2232      	movs	r2, #50	; 0x32
 8007c7a:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	227f      	movs	r2, #127	; 0x7f
 8007c82:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2208      	movs	r2, #8
 8007c92:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2208      	movs	r2, #8
 8007c9a:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	227f      	movs	r2, #127	; 0x7f
 8007ca2:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2241      	movs	r2, #65	; 0x41
 8007caa:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	227f      	movs	r2, #127	; 0x7f
 8007cb2:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2241      	movs	r2, #65	; 0x41
 8007cba:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2240      	movs	r2, #64	; 0x40
 8007cca:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2241      	movs	r2, #65	; 0x41
 8007cd2:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	223f      	movs	r2, #63	; 0x3f
 8007cda:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	227f      	movs	r2, #127	; 0x7f
 8007cea:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2214      	movs	r2, #20
 8007cfa:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2222      	movs	r2, #34	; 0x22
 8007d02:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2241      	movs	r2, #65	; 0x41
 8007d0a:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	227f      	movs	r2, #127	; 0x7f
 8007d12:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2240      	movs	r2, #64	; 0x40
 8007d1a:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2240      	movs	r2, #64	; 0x40
 8007d22:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2240      	movs	r2, #64	; 0x40
 8007d2a:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2240      	movs	r2, #64	; 0x40
 8007d32:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	227f      	movs	r2, #127	; 0x7f
 8007d3a:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	227f      	movs	r2, #127	; 0x7f
 8007d5a:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	227f      	movs	r2, #127	; 0x7f
 8007d62:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2208      	movs	r2, #8
 8007d72:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2210      	movs	r2, #16
 8007d7a:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	227f      	movs	r2, #127	; 0x7f
 8007d82:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	223e      	movs	r2, #62	; 0x3e
 8007d8a:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2241      	movs	r2, #65	; 0x41
 8007d92:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2241      	movs	r2, #65	; 0x41
 8007d9a:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2241      	movs	r2, #65	; 0x41
 8007da2:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	223e      	movs	r2, #62	; 0x3e
 8007daa:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	227f      	movs	r2, #127	; 0x7f
 8007db2:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2209      	movs	r2, #9
 8007dba:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2209      	movs	r2, #9
 8007dc2:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2209      	movs	r2, #9
 8007dca:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2206      	movs	r2, #6
 8007dd2:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	223e      	movs	r2, #62	; 0x3e
 8007dda:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2241      	movs	r2, #65	; 0x41
 8007de2:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2251      	movs	r2, #81	; 0x51
 8007dea:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2221      	movs	r2, #33	; 0x21
 8007df2:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	225e      	movs	r2, #94	; 0x5e
 8007dfa:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	227f      	movs	r2, #127	; 0x7f
 8007e02:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2209      	movs	r2, #9
 8007e0a:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2219      	movs	r2, #25
 8007e12:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2229      	movs	r2, #41	; 0x29
 8007e1a:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2246      	movs	r2, #70	; 0x46
 8007e22:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2246      	movs	r2, #70	; 0x46
 8007e2a:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2249      	movs	r2, #73	; 0x49
 8007e32:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2249      	movs	r2, #73	; 0x49
 8007e3a:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2249      	movs	r2, #73	; 0x49
 8007e42:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2231      	movs	r2, #49	; 0x31
 8007e4a:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	227f      	movs	r2, #127	; 0x7f
 8007e62:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	223f      	movs	r2, #63	; 0x3f
 8007e7a:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2240      	movs	r2, #64	; 0x40
 8007e82:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2240      	movs	r2, #64	; 0x40
 8007e8a:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	223f      	movs	r2, #63	; 0x3f
 8007e9a:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	221f      	movs	r2, #31
 8007ea2:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2240      	movs	r2, #64	; 0x40
 8007eb2:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	221f      	movs	r2, #31
 8007ec2:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	227f      	movs	r2, #127	; 0x7f
 8007eca:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2218      	movs	r2, #24
 8007eda:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	227f      	movs	r2, #127	; 0x7f
 8007eea:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2263      	movs	r2, #99	; 0x63
 8007ef2:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2214      	movs	r2, #20
 8007efa:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2208      	movs	r2, #8
 8007f02:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2214      	movs	r2, #20
 8007f0a:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2263      	movs	r2, #99	; 0x63
 8007f12:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2203      	movs	r2, #3
 8007f1a:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2204      	movs	r2, #4
 8007f22:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2278      	movs	r2, #120	; 0x78
 8007f2a:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2204      	movs	r2, #4
 8007f32:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2203      	movs	r2, #3
 8007f3a:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2261      	movs	r2, #97	; 0x61
 8007f42:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2251      	movs	r2, #81	; 0x51
 8007f4a:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2249      	movs	r2, #73	; 0x49
 8007f52:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2245      	movs	r2, #69	; 0x45
 8007f5a:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2243      	movs	r2, #67	; 0x43
 8007f62:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	227f      	movs	r2, #127	; 0x7f
 8007f6a:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2241      	movs	r2, #65	; 0x41
 8007f72:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2241      	movs	r2, #65	; 0x41
 8007f7a:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2204      	movs	r2, #4
 8007f8a:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2208      	movs	r2, #8
 8007f92:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2210      	movs	r2, #16
 8007f9a:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2241      	movs	r2, #65	; 0x41
 8007faa:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2241      	movs	r2, #65	; 0x41
 8007fb2:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	227f      	movs	r2, #127	; 0x7f
 8007fba:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2240      	movs	r2, #64	; 0x40
 8007fea:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2240      	movs	r2, #64	; 0x40
 8007ff2:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2240      	movs	r2, #64	; 0x40
 8007ffa:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2240      	movs	r2, #64	; 0x40
 8008002:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2240      	movs	r2, #64	; 0x40
 800800a:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2204      	movs	r2, #4
 8008022:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2254      	movs	r2, #84	; 0x54
 8008032:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2254      	movs	r2, #84	; 0x54
 800803a:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2254      	movs	r2, #84	; 0x54
 8008042:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2278      	movs	r2, #120	; 0x78
 800804a:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	227f      	movs	r2, #127	; 0x7f
 8008052:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2248      	movs	r2, #72	; 0x48
 800805a:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2244      	movs	r2, #68	; 0x44
 8008062:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2244      	movs	r2, #68	; 0x44
 800806a:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2238      	movs	r2, #56	; 0x38
 8008072:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2238      	movs	r2, #56	; 0x38
 800807a:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2244      	movs	r2, #68	; 0x44
 8008082:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2244      	movs	r2, #68	; 0x44
 800808a:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2244      	movs	r2, #68	; 0x44
 8008092:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2238      	movs	r2, #56	; 0x38
 80080a2:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2244      	movs	r2, #68	; 0x44
 80080aa:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2244      	movs	r2, #68	; 0x44
 80080b2:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2248      	movs	r2, #72	; 0x48
 80080ba:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	227f      	movs	r2, #127	; 0x7f
 80080c2:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2238      	movs	r2, #56	; 0x38
 80080ca:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2254      	movs	r2, #84	; 0x54
 80080d2:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2254      	movs	r2, #84	; 0x54
 80080da:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2254      	movs	r2, #84	; 0x54
 80080e2:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2218      	movs	r2, #24
 80080ea:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2208      	movs	r2, #8
 80080f2:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	227e      	movs	r2, #126	; 0x7e
 80080fa:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2209      	movs	r2, #9
 8008102:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2208      	movs	r2, #8
 800811a:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2214      	movs	r2, #20
 8008122:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2254      	movs	r2, #84	; 0x54
 800812a:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2254      	movs	r2, #84	; 0x54
 8008132:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	223c      	movs	r2, #60	; 0x3c
 800813a:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	227f      	movs	r2, #127	; 0x7f
 8008142:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2208      	movs	r2, #8
 800814a:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2278      	movs	r2, #120	; 0x78
 8008162:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2244      	movs	r2, #68	; 0x44
 800816a:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	227d      	movs	r2, #125	; 0x7d
 8008172:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2240      	movs	r2, #64	; 0x40
 800817a:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2240      	movs	r2, #64	; 0x40
 800818a:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2244      	movs	r2, #68	; 0x44
 8008192:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	223d      	movs	r2, #61	; 0x3d
 800819a:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	227f      	movs	r2, #127	; 0x7f
 80081a2:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2210      	movs	r2, #16
 80081aa:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2228      	movs	r2, #40	; 0x28
 80081b2:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2244      	movs	r2, #68	; 0x44
 80081ba:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2241      	movs	r2, #65	; 0x41
 80081c2:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	227f      	movs	r2, #127	; 0x7f
 80081ca:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2240      	movs	r2, #64	; 0x40
 80081d2:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	227c      	movs	r2, #124	; 0x7c
 80081da:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2204      	movs	r2, #4
 80081e2:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2218      	movs	r2, #24
 80081ea:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2278      	movs	r2, #120	; 0x78
 80081fa:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	227c      	movs	r2, #124	; 0x7c
 8008202:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2208      	movs	r2, #8
 800820a:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2204      	movs	r2, #4
 8008212:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2278      	movs	r2, #120	; 0x78
 8008222:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2238      	movs	r2, #56	; 0x38
 800822a:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2244      	movs	r2, #68	; 0x44
 8008232:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2244      	movs	r2, #68	; 0x44
 800823a:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2244      	movs	r2, #68	; 0x44
 8008242:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2238      	movs	r2, #56	; 0x38
 800824a:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	227c      	movs	r2, #124	; 0x7c
 8008252:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2214      	movs	r2, #20
 800825a:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2214      	movs	r2, #20
 8008262:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2214      	movs	r2, #20
 800826a:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2208      	movs	r2, #8
 8008272:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2208      	movs	r2, #8
 800827a:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2214      	movs	r2, #20
 8008282:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2214      	movs	r2, #20
 800828a:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2218      	movs	r2, #24
 8008292:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	227c      	movs	r2, #124	; 0x7c
 800829a:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	227c      	movs	r2, #124	; 0x7c
 80082a2:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2208      	movs	r2, #8
 80082aa:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2204      	movs	r2, #4
 80082b2:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2208      	movs	r2, #8
 80082c2:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2248      	movs	r2, #72	; 0x48
 80082ca:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2254      	movs	r2, #84	; 0x54
 80082d2:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2254      	movs	r2, #84	; 0x54
 80082da:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2254      	movs	r2, #84	; 0x54
 80082e2:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	223f      	movs	r2, #63	; 0x3f
 80082fa:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2244      	movs	r2, #68	; 0x44
 8008302:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2240      	movs	r2, #64	; 0x40
 800830a:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	223c      	movs	r2, #60	; 0x3c
 800831a:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2240      	movs	r2, #64	; 0x40
 8008322:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2240      	movs	r2, #64	; 0x40
 800832a:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	227c      	movs	r2, #124	; 0x7c
 800833a:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	221c      	movs	r2, #28
 8008342:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2240      	movs	r2, #64	; 0x40
 8008352:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	221c      	movs	r2, #28
 8008362:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	223c      	movs	r2, #60	; 0x3c
 800836a:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2240      	movs	r2, #64	; 0x40
 8008372:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2230      	movs	r2, #48	; 0x30
 800837a:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2240      	movs	r2, #64	; 0x40
 8008382:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	223c      	movs	r2, #60	; 0x3c
 800838a:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2244      	movs	r2, #68	; 0x44
 8008392:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2228      	movs	r2, #40	; 0x28
 800839a:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2210      	movs	r2, #16
 80083a2:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2228      	movs	r2, #40	; 0x28
 80083aa:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2244      	movs	r2, #68	; 0x44
 80083b2:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220c      	movs	r2, #12
 80083ba:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2250      	movs	r2, #80	; 0x50
 80083c2:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2250      	movs	r2, #80	; 0x50
 80083ca:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2250      	movs	r2, #80	; 0x50
 80083d2:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	223c      	movs	r2, #60	; 0x3c
 80083da:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2244      	movs	r2, #68	; 0x44
 80083e2:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2264      	movs	r2, #100	; 0x64
 80083ea:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2254      	movs	r2, #84	; 0x54
 80083f2:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	224c      	movs	r2, #76	; 0x4c
 80083fa:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2244      	movs	r2, #68	; 0x44
 8008402:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2208      	movs	r2, #8
 800840a:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2236      	movs	r2, #54	; 0x36
 8008412:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2241      	movs	r2, #65	; 0x41
 800841a:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	227f      	movs	r2, #127	; 0x7f
 8008422:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2241      	movs	r2, #65	; 0x41
 800842a:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2236      	movs	r2, #54	; 0x36
 8008432:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2208      	movs	r2, #8
 800843a:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bdb0      	pop	{r4, r5, r7, pc}

08008448 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	4a05      	ldr	r2, [pc, #20]	; (8008468 <_ZN4GLCDD1Ev+0x20>)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4618      	mov	r0, r3
 800845a:	f7fb fe23 	bl	80040a4 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	08011a58 	.word	0x08011a58

0800846c <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
}
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff ffe7 	bl	8008448 <_ZN4GLCDD1Ev>
 800847a:	f640 2104 	movw	r1, #2564	; 0xa04
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f008 fba1 	bl	8010bc6 <_ZdlPvj>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008498:	2200      	movs	r2, #0
 800849a:	2110      	movs	r1, #16
 800849c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084a0:	f003 fc4c 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084aa:	480c      	ldr	r0, [pc, #48]	; (80084dc <_ZN4GLCD9m_ctrloffEv+0x4c>)
 80084ac:	f003 fc46 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80084b0:	2200      	movs	r2, #0
 80084b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084b6:	4809      	ldr	r0, [pc, #36]	; (80084dc <_ZN4GLCD9m_ctrloffEv+0x4c>)
 80084b8:	f003 fc40 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80084bc:	2200      	movs	r2, #0
 80084be:	2104      	movs	r1, #4
 80084c0:	4807      	ldr	r0, [pc, #28]	; (80084e0 <_ZN4GLCD9m_ctrloffEv+0x50>)
 80084c2:	f003 fc3b 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 80084c6:	2200      	movs	r2, #0
 80084c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80084cc:	4803      	ldr	r0, [pc, #12]	; (80084dc <_ZN4GLCD9m_ctrloffEv+0x4c>)
 80084ce:	f003 fc35 	bl	800bd3c <HAL_GPIO_WritePin>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	48000800 	.word	0x48000800
 80084e0:	48000c00 	.word	0x48000c00

080084e4 <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d20d      	bcs.n	800851a <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	d203      	bcs.n	8008512 <_ZN4GLCD7m_delayEjh+0x2e>
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	3301      	adds	r3, #1
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	e7f7      	b.n	8008502 <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	3301      	adds	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e7ed      	b.n	80084f6 <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	2100      	movs	r1, #0
 800853a:	4618      	mov	r0, r3
 800853c:	f7fb ffe8 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	2108      	movs	r1, #8
 8008546:	482f      	ldr	r0, [pc, #188]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008548:	f003 fbf8 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	2101      	movs	r1, #1
 8008552:	4618      	mov	r0, r3
 8008554:	f7fb ffdc 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	2104      	movs	r1, #4
 800855e:	4829      	ldr	r0, [pc, #164]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008560:	f003 fbec 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	2102      	movs	r1, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fb ffd0 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	2102      	movs	r1, #2
 8008576:	4823      	ldr	r0, [pc, #140]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008578:	f003 fbe0 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	2103      	movs	r1, #3
 8008582:	4618      	mov	r0, r3
 8008584:	f7fb ffc4 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	2101      	movs	r1, #1
 800858e:	481d      	ldr	r0, [pc, #116]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008590:	f003 fbd4 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	2104      	movs	r1, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f7fb ffb8 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085a8:	4816      	ldr	r0, [pc, #88]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80085aa:	f003 fbc7 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	78fa      	ldrb	r2, [r7, #3]
 80085b2:	2105      	movs	r1, #5
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fb ffab 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80085c2:	4810      	ldr	r0, [pc, #64]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80085c4:	f003 fbba 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	2106      	movs	r1, #6
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fb ff9e 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085dc:	4809      	ldr	r0, [pc, #36]	; (8008604 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80085de:	f003 fbad 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	2107      	movs	r1, #7
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fb ff91 	bl	8004510 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80085ee:	4603      	mov	r3, r0
 80085f0:	461a      	mov	r2, r3
 80085f2:	2120      	movs	r1, #32
 80085f4:	4804      	ldr	r0, [pc, #16]	; (8008608 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 80085f6:	f003 fba1 	bl	800bd3c <HAL_GPIO_WritePin>
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	48000800 	.word	0x48000800
 8008608:	48000400 	.word	0x48000400

0800860c <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff ff3b 	bl	8008490 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 800861a:	213f      	movs	r1, #63	; 0x3f
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff83 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008622:	2201      	movs	r2, #1
 8008624:	2104      	movs	r1, #4
 8008626:	4815      	ldr	r0, [pc, #84]	; (800867c <_ZN4GLCD11m_displayonEv+0x70>)
 8008628:	f003 fb88 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 800862c:	2201      	movs	r2, #1
 800862e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008632:	4813      	ldr	r0, [pc, #76]	; (8008680 <_ZN4GLCD11m_displayonEv+0x74>)
 8008634:	f003 fb82 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008638:	2200      	movs	r2, #0
 800863a:	2110      	movs	r1, #16
 800863c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008640:	f003 fb7c 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008644:	2200      	movs	r2, #0
 8008646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800864a:	480d      	ldr	r0, [pc, #52]	; (8008680 <_ZN4GLCD11m_displayonEv+0x74>)
 800864c:	f003 fb76 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008650:	2201      	movs	r2, #1
 8008652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008656:	480a      	ldr	r0, [pc, #40]	; (8008680 <_ZN4GLCD11m_displayonEv+0x74>)
 8008658:	f003 fb70 	bl	800bd3c <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 800865c:	2264      	movs	r2, #100	; 0x64
 800865e:	210a      	movs	r1, #10
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff3f 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008666:	2200      	movs	r2, #0
 8008668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800866c:	4804      	ldr	r0, [pc, #16]	; (8008680 <_ZN4GLCD11m_displayonEv+0x74>)
 800866e:	f003 fb65 	bl	800bd3c <HAL_GPIO_WritePin>
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	48000c00 	.word	0x48000c00
 8008680:	48000800 	.word	0x48000800

08008684 <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	2b3f      	cmp	r3, #63	; 0x3f
 8008694:	d839      	bhi.n	800870a <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fefa 	bl	8008490 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff ff38 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80086b8:	2201      	movs	r2, #1
 80086ba:	2104      	movs	r1, #4
 80086bc:	4831      	ldr	r0, [pc, #196]	; (8008784 <_ZN4GLCD11m_setcolumnEh+0x100>)
 80086be:	f003 fb3d 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 80086c2:	2200      	movs	r2, #0
 80086c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086c8:	482f      	ldr	r0, [pc, #188]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80086ca:	f003 fb37 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80086ce:	2200      	movs	r2, #0
 80086d0:	2110      	movs	r1, #16
 80086d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80086d6:	f003 fb31 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80086da:	2200      	movs	r2, #0
 80086dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086e0:	4829      	ldr	r0, [pc, #164]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80086e2:	f003 fb2b 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80086e6:	2201      	movs	r2, #1
 80086e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086ec:	4826      	ldr	r0, [pc, #152]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80086ee:	f003 fb25 	bl	800bd3c <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 80086f2:	2264      	movs	r2, #100	; 0x64
 80086f4:	210a      	movs	r1, #10
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fef4 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80086fc:	2200      	movs	r2, #0
 80086fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008702:	4821      	ldr	r0, [pc, #132]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008704:	f003 fb1a 	bl	800bd3c <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8008708:	e038      	b.n	800877c <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	78fa      	ldrb	r2, [r7, #3]
 800870e:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8008710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008718:	b25b      	sxtb	r3, r3
 800871a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871e:	b25b      	sxtb	r3, r3
 8008720:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff fefe 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 800872c:	2200      	movs	r2, #0
 800872e:	2104      	movs	r1, #4
 8008730:	4814      	ldr	r0, [pc, #80]	; (8008784 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8008732:	f003 fb03 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008736:	2201      	movs	r2, #1
 8008738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800873c:	4812      	ldr	r0, [pc, #72]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800873e:	f003 fafd 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008742:	2200      	movs	r2, #0
 8008744:	2110      	movs	r1, #16
 8008746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800874a:	f003 faf7 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800874e:	2200      	movs	r2, #0
 8008750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008754:	480c      	ldr	r0, [pc, #48]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008756:	f003 faf1 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800875a:	2201      	movs	r2, #1
 800875c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008762:	f003 faeb 	bl	800bd3c <HAL_GPIO_WritePin>
		m_delay(10,100);
 8008766:	2264      	movs	r2, #100	; 0x64
 8008768:	210a      	movs	r1, #10
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff feba 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008770:	2200      	movs	r2, #0
 8008772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008776:	4804      	ldr	r0, [pc, #16]	; (8008788 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008778:	f003 fae0 	bl	800bd3c <HAL_GPIO_WritePin>
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	48000c00 	.word	0x48000c00
 8008788:	48000800 	.word	0x48000800

0800878c <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff fe79 	bl	8008490 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	f063 0347 	orn	r3, r3, #71	; 0x47
 80087a4:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff febc 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80087b0:	2201      	movs	r2, #1
 80087b2:	2104      	movs	r1, #4
 80087b4:	4814      	ldr	r0, [pc, #80]	; (8008808 <_ZN4GLCD9m_setpageEh+0x7c>)
 80087b6:	f003 fac1 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80087ba:	2201      	movs	r2, #1
 80087bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087c0:	4812      	ldr	r0, [pc, #72]	; (800880c <_ZN4GLCD9m_setpageEh+0x80>)
 80087c2:	f003 fabb 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80087c6:	2200      	movs	r2, #0
 80087c8:	2110      	movs	r1, #16
 80087ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087ce:	f003 fab5 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80087d2:	2200      	movs	r2, #0
 80087d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80087d8:	480c      	ldr	r0, [pc, #48]	; (800880c <_ZN4GLCD9m_setpageEh+0x80>)
 80087da:	f003 faaf 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80087de:	2201      	movs	r2, #1
 80087e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087e4:	4809      	ldr	r0, [pc, #36]	; (800880c <_ZN4GLCD9m_setpageEh+0x80>)
 80087e6:	f003 faa9 	bl	800bd3c <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80087ea:	2264      	movs	r2, #100	; 0x64
 80087ec:	210a      	movs	r1, #10
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff fe78 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80087f4:	2200      	movs	r2, #0
 80087f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087fa:	4804      	ldr	r0, [pc, #16]	; (800880c <_ZN4GLCD9m_setpageEh+0x80>)
 80087fc:	f003 fa9e 	bl	800bd3c <HAL_GPIO_WritePin>
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	48000c00 	.word	0x48000c00
 800880c:	48000800 	.word	0x48000800

08008810 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fe37 	bl	8008490 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008828:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fe7a 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008834:	2201      	movs	r2, #1
 8008836:	2104      	movs	r1, #4
 8008838:	4814      	ldr	r0, [pc, #80]	; (800888c <_ZN4GLCD14m_setstartlineEh+0x7c>)
 800883a:	f003 fa7f 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 800883e:	2201      	movs	r2, #1
 8008840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008844:	4812      	ldr	r0, [pc, #72]	; (8008890 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008846:	f003 fa79 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 800884a:	2200      	movs	r2, #0
 800884c:	2110      	movs	r1, #16
 800884e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008852:	f003 fa73 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008856:	2200      	movs	r2, #0
 8008858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800885c:	480c      	ldr	r0, [pc, #48]	; (8008890 <_ZN4GLCD14m_setstartlineEh+0x80>)
 800885e:	f003 fa6d 	bl	800bd3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008862:	2201      	movs	r2, #1
 8008864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008868:	4809      	ldr	r0, [pc, #36]	; (8008890 <_ZN4GLCD14m_setstartlineEh+0x80>)
 800886a:	f003 fa67 	bl	800bd3c <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 800886e:	2264      	movs	r2, #100	; 0x64
 8008870:	210a      	movs	r1, #10
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe36 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008878:	2200      	movs	r2, #0
 800887a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800887e:	4804      	ldr	r0, [pc, #16]	; (8008890 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008880:	f003 fa5c 	bl	800bd3c <HAL_GPIO_WritePin>
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	48000c00 	.word	0x48000c00
 8008890:	48000800 	.word	0x48000800

08008894 <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	4613      	mov	r3, r2
 80088a0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	82fb      	strh	r3, [r7, #22]
 80088a6:	8afa      	ldrh	r2, [r7, #22]
 80088a8:	88fb      	ldrh	r3, [r7, #6]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	f080 8085 	bcs.w	80089ba <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	7f1b      	ldrb	r3, [r3, #28]
 80088b4:	2b3f      	cmp	r3, #63	; 0x3f
 80088b6:	d838      	bhi.n	800892a <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 80088b8:	8afb      	ldrh	r3, [r7, #22]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 80088c2:	7d7b      	ldrb	r3, [r7, #21]
 80088c4:	4619      	mov	r1, r3
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fe2e 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80088cc:	2201      	movs	r2, #1
 80088ce:	2104      	movs	r1, #4
 80088d0:	483b      	ldr	r0, [pc, #236]	; (80089c0 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 80088d2:	f003 fa33 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 80088d6:	2200      	movs	r2, #0
 80088d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088dc:	4839      	ldr	r0, [pc, #228]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80088de:	f003 fa2d 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 80088e2:	2201      	movs	r2, #1
 80088e4:	2110      	movs	r1, #16
 80088e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088ea:	f003 fa27 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80088ee:	2200      	movs	r2, #0
 80088f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088f4:	4833      	ldr	r0, [pc, #204]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80088f6:	f003 fa21 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80088fa:	2201      	movs	r2, #1
 80088fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008900:	4830      	ldr	r0, [pc, #192]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008902:	f003 fa1b 	bl	800bd3c <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008906:	2264      	movs	r2, #100	; 0x64
 8008908:	210a      	movs	r1, #10
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff fdea 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008910:	2200      	movs	r2, #0
 8008912:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008916:	482b      	ldr	r0, [pc, #172]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008918:	f003 fa10 	bl	800bd3c <HAL_GPIO_WritePin>
			c++;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7f1b      	ldrb	r3, [r3, #28]
 8008920:	3301      	adds	r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	771a      	strb	r2, [r3, #28]
 8008928:	e03d      	b.n	80089a6 <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	7f1b      	ldrb	r3, [r3, #28]
 800892e:	4619      	mov	r1, r3
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7ff fea7 	bl	8008684 <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8008936:	8afb      	ldrh	r3, [r7, #22]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	4413      	add	r3, r2
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008940:	7d7b      	ldrb	r3, [r7, #21]
 8008942:	4619      	mov	r1, r3
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f7ff fdef 	bl	8008528 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 800894a:	2200      	movs	r2, #0
 800894c:	2104      	movs	r1, #4
 800894e:	481c      	ldr	r0, [pc, #112]	; (80089c0 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008950:	f003 f9f4 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008954:	2201      	movs	r2, #1
 8008956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800895a:	481a      	ldr	r0, [pc, #104]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 800895c:	f003 f9ee 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008960:	2201      	movs	r2, #1
 8008962:	2110      	movs	r1, #16
 8008964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008968:	f003 f9e8 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800896c:	2200      	movs	r2, #0
 800896e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008972:	4814      	ldr	r0, [pc, #80]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008974:	f003 f9e2 	bl	800bd3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008978:	2201      	movs	r2, #1
 800897a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800897e:	4811      	ldr	r0, [pc, #68]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008980:	f003 f9dc 	bl	800bd3c <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008984:	2264      	movs	r2, #100	; 0x64
 8008986:	210a      	movs	r1, #10
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fdab 	bl	80084e4 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800898e:	2200      	movs	r2, #0
 8008990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008994:	480b      	ldr	r0, [pc, #44]	; (80089c4 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008996:	f003 f9d1 	bl	800bd3c <HAL_GPIO_WritePin>
			c++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	7f1b      	ldrb	r3, [r3, #28]
 800899e:	3301      	adds	r3, #1
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	7f1b      	ldrb	r3, [r3, #28]
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db03      	blt.n	80089b8 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 80089b0:	8afb      	ldrh	r3, [r7, #22]
 80089b2:	3301      	adds	r3, #1
 80089b4:	82fb      	strh	r3, [r7, #22]
 80089b6:	e776      	b.n	80088a6 <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 80089b8:	bf00      	nop
	}
}
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	48000c00 	.word	0x48000c00
 80089c4:	48000800 	.word	0x48000800

080089c8 <_ZN4GLCD10m_lcdputs1EhhPc>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,char *str)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607b      	str	r3, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
 80089d6:	4613      	mov	r3, r2
 80089d8:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	4619      	mov	r1, r3
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fe50 	bl	8008684 <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 80089e4:	7abb      	ldrb	r3, [r7, #10]
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff fecf 	bl	800878c <_ZN4GLCD9m_setpageEh>
	//for(i=0;str[i]!=0;i++)
	length =strlen(str);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f7 fbee 	bl	80001d0 <strlen>
 80089f4:	4603      	mov	r3, r0
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <_ZN4GLCD10m_lcdputs1EhhPc+0x7c>)
 80089fa:	701a      	strb	r2, [r3, #0]
	for(i=0;i< strlen(str);i++)
 80089fc:	2300      	movs	r3, #0
 80089fe:	75fb      	strb	r3, [r7, #23]
 8008a00:	7dfc      	ldrb	r4, [r7, #23]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f7 fbe4 	bl	80001d0 <strlen>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d215      	bcs.n	8008a3a <_ZN4GLCD10m_lcdputs1EhhPc+0x72>
	{
		a=(*(str+i));
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	4413      	add	r3, r2
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8008a18:	8abb      	ldrh	r3, [r7, #20]
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 8008a1e:	8abb      	ldrh	r3, [r7, #20]
 8008a20:	3318      	adds	r3, #24
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	3306      	adds	r3, #6
 8008a28:	2208      	movs	r2, #8
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ff31 	bl	8008894 <_ZN4GLCD9m_lcddataEPht>
	for(i=0;i< strlen(str);i++)
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	3301      	adds	r3, #1
 8008a36:	75fb      	strb	r3, [r7, #23]
 8008a38:	e7e2      	b.n	8008a00 <_ZN4GLCD10m_lcdputs1EhhPc+0x38>
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd90      	pop	{r4, r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000788 	.word	0x20000788

08008a48 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	d81d      	bhi.n	8008a96 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff fe94 	bl	800878c <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fe0c 	bl	8008684 <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73bb      	strb	r3, [r7, #14]
 8008a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	db0a      	blt.n	8008a8e <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	331d      	adds	r3, #29
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff ff07 	bl	8008894 <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	73bb      	strb	r3, [r7, #14]
 8008a8c:	e7f0      	b.n	8008a70 <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	3301      	adds	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
 8008a94:	e7de      	b.n	8008a54 <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <_ZN7DwinhmiC1Ev>:
uint8_t CheckP;
uint8_t updateCloudConn;
uint16_t espMacAddressLoc;
uint16_t dwinRxFramValidKey;

Dwinhmi::Dwinhmi() {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	4a06      	ldr	r2, [pc, #24]	; (8008ac4 <_ZN7DwinhmiC1Ev+0x24>)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	// TODO Auto-generated constructor stub

}
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	08011a68 	.word	0x08011a68

08008ac8 <_ZN7DwinhmiD1Ev>:

Dwinhmi::~Dwinhmi() {
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	4a04      	ldr	r2, [pc, #16]	; (8008ae4 <_ZN7DwinhmiD1Ev+0x1c>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	08011a68 	.word	0x08011a68

08008ae8 <_ZN7DwinhmiD0Ev>:
Dwinhmi::~Dwinhmi() {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
}
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ffe9 	bl	8008ac8 <_ZN7DwinhmiD1Ev>
 8008af6:	2160      	movs	r1, #96	; 0x60
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f008 f864 	bl	8010bc6 <_ZdlPvj>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <_ZN7Dwinhmi9dwinFrameEv>:

void Dwinhmi::dwinFrame()
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	switch(Cntid_dwin)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	f000 813e 	beq.w	8008d98 <_ZN7Dwinhmi9dwinFrameEv+0x290>
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	f300 8161 	bgt.w	8008de4 <_ZN7Dwinhmi9dwinFrameEv+0x2dc>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <_ZN7Dwinhmi9dwinFrameEv+0x26>
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	f000 80f1 	beq.w	8008d0e <_ZN7Dwinhmi9dwinFrameEv+0x206>
			Dwinseq=0;
			noOfDataDwin=7;
			Cntid_dwin=0;
		break;
		default:
		break;
 8008b2c:	e15a      	b.n	8008de4 <_ZN7Dwinhmi9dwinFrameEv+0x2dc>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	225a      	movs	r2, #90	; 0x5a
 8008b32:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	22a5      	movs	r2, #165	; 0xa5
 8008b38:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	220f      	movs	r2, #15
 8008b3e:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2282      	movs	r2, #130	; 0x82
 8008b44:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x20;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x00;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	729a      	strb	r2, [r3, #10]
			u8ModbusRegisterdwin[7] = date_Rtc;
 8008b58:	4baa      	ldr	r3, [pc, #680]	; (8008e04 <_ZN7Dwinhmi9dwinFrameEv+0x2fc>)
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	72da      	strb	r2, [r3, #11]
			u8ModbusRegisterdwin[8] = 0x00;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	731a      	strb	r2, [r3, #12]
			u8ModbusRegisterdwin[9] = month_Rtc;
 8008b66:	4ba8      	ldr	r3, [pc, #672]	; (8008e08 <_ZN7Dwinhmi9dwinFrameEv+0x300>)
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	735a      	strb	r2, [r3, #13]
			u8ModbusRegisterdwin[10] = 0x00;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	739a      	strb	r2, [r3, #14]
			u8ModbusRegisterdwin[11] = year_Rtc;
 8008b74:	4ba5      	ldr	r3, [pc, #660]	; (8008e0c <_ZN7Dwinhmi9dwinFrameEv+0x304>)
 8008b76:	781a      	ldrb	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	73da      	strb	r2, [r3, #15]
			u8ModbusRegisterdwin[12] = 0x00;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	741a      	strb	r2, [r3, #16]
			u8ModbusRegisterdwin[13] = hour_t;
 8008b82:	4ba3      	ldr	r3, [pc, #652]	; (8008e10 <_ZN7Dwinhmi9dwinFrameEv+0x308>)
 8008b84:	781a      	ldrb	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	745a      	strb	r2, [r3, #17]
			u8ModbusRegisterdwin[14] = 0x00;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	749a      	strb	r2, [r3, #18]
			u8ModbusRegisterdwin[15] = min_t;
 8008b90:	4ba0      	ldr	r3, [pc, #640]	; (8008e14 <_ZN7Dwinhmi9dwinFrameEv+0x30c>)
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	74da      	strb	r2, [r3, #19]
			u8ModbusRegisterdwin[16] = 0x00;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	751a      	strb	r2, [r3, #20]
			u8ModbusRegisterdwin[17] = sec_t;
 8008b9e:	4b9e      	ldr	r3, [pc, #632]	; (8008e18 <_ZN7Dwinhmi9dwinFrameEv+0x310>)
 8008ba0:	781a      	ldrb	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	755a      	strb	r2, [r3, #21]
			u8ModbusRegisterdwin[18] = highByte(Production_Total);
 8008ba6:	4b9d      	ldr	r3, [pc, #628]	; (8008e1c <_ZN7Dwinhmi9dwinFrameEv+0x314>)
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	759a      	strb	r2, [r3, #22]
			u8ModbusRegisterdwin[19] = lowByte(Production_Total);
 8008bb4:	4b99      	ldr	r3, [pc, #612]	; (8008e1c <_ZN7Dwinhmi9dwinFrameEv+0x314>)
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	75da      	strb	r2, [r3, #23]
			u8ModbusRegisterdwin[20] = highByte(Rejection_Total);
 8008bbe:	4b98      	ldr	r3, [pc, #608]	; (8008e20 <_ZN7Dwinhmi9dwinFrameEv+0x318>)
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	761a      	strb	r2, [r3, #24]
			u8ModbusRegisterdwin[21] = lowByte(Rejection_Total);
 8008bcc:	4b94      	ldr	r3, [pc, #592]	; (8008e20 <_ZN7Dwinhmi9dwinFrameEv+0x318>)
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	765a      	strb	r2, [r3, #25]
			u8ModbusRegisterdwin[22] = highByte(0);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	769a      	strb	r2, [r3, #26]
			u8ModbusRegisterdwin[23] = lowByte(wifiConnection);//2008
 8008bdc:	4b91      	ldr	r3, [pc, #580]	; (8008e24 <_ZN7Dwinhmi9dwinFrameEv+0x31c>)
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	76da      	strb	r2, [r3, #27]
			u8ModbusRegisterdwin[24] = highByte(0);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	771a      	strb	r2, [r3, #28]
			u8ModbusRegisterdwin[25] = lowByte(wifiConnection);//2009
 8008bea:	4b8e      	ldr	r3, [pc, #568]	; (8008e24 <_ZN7Dwinhmi9dwinFrameEv+0x31c>)
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	775a      	strb	r2, [r3, #29]
			u8ModbusRegisterdwin[26] = highByte(0);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	779a      	strb	r2, [r3, #30]
			u8ModbusRegisterdwin[27] = lowByte(12);//200A
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	220c      	movs	r2, #12
 8008bfc:	77da      	strb	r2, [r3, #31]
			u8ModbusRegisterdwin[28] = highByte(productionTarget);
 8008bfe:	4b8a      	ldr	r3, [pc, #552]	; (8008e28 <_ZN7Dwinhmi9dwinFrameEv+0x320>)
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	0a1b      	lsrs	r3, r3, #8
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f883 2020 	strb.w	r2, [r3, #32]
			u8ModbusRegisterdwin[29] = lowByte(productionTarget);//200B
 8008c0e:	4b86      	ldr	r3, [pc, #536]	; (8008e28 <_ZN7Dwinhmi9dwinFrameEv+0x320>)
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			u8ModbusRegisterdwin[30] = highByte(productionInc);
 8008c1a:	4b84      	ldr	r3, [pc, #528]	; (8008e2c <_ZN7Dwinhmi9dwinFrameEv+0x324>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	0a1b      	lsrs	r3, r3, #8
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			u8ModbusRegisterdwin[31] = lowByte(productionInc);//200C
 8008c2a:	4b80      	ldr	r3, [pc, #512]	; (8008e2c <_ZN7Dwinhmi9dwinFrameEv+0x324>)
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			u8ModbusRegisterdwin[32] = highByte(startStopStatus);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			u8ModbusRegisterdwin[33] = lowByte(startStopStatus);//200C
 8008c3e:	4b7c      	ldr	r3, [pc, #496]	; (8008e30 <_ZN7Dwinhmi9dwinFrameEv+0x328>)
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			u8ModbusRegisterdwin[34] = highByte(batchNumber);
 8008c48:	4b7a      	ldr	r3, [pc, #488]	; (8008e34 <_ZN7Dwinhmi9dwinFrameEv+0x32c>)
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	0a1b      	lsrs	r3, r3, #8
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			u8ModbusRegisterdwin[35] = lowByte(batchNumber);//200C
 8008c58:	4b76      	ldr	r3, [pc, #472]	; (8008e34 <_ZN7Dwinhmi9dwinFrameEv+0x32c>)
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			u8ModbusRegisterdwin[36] = highByte(0);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			u8ModbusRegisterdwin[37] = lowByte(0);//200D
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			u8ModbusRegisterdwin[38] = highByte(0);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			u8ModbusRegisterdwin[39] = lowByte(0);//200e
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			u8ModbusRegisterdwin[40] = highByte(0);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			u8ModbusRegisterdwin[41] = lowByte(0);//200f
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			u8ModbusRegisterdwin[42] = highByte(0);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			u8ModbusRegisterdwin[43] = lowByte(0);//2010
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			u8ModbusRegisterdwin[44] = 'I';//itemNumber[0];
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2249      	movs	r2, #73	; 0x49
 8008ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			u8ModbusRegisterdwin[45] = 'T';//itemNumber[1];//2011
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2254      	movs	r2, #84	; 0x54
 8008cb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			u8ModbusRegisterdwin[46] = 'E';//itemNumber[2];
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2245      	movs	r2, #69	; 0x45
 8008cb8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			u8ModbusRegisterdwin[47] = 'M';//itemNumber[3];//2012
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	224d      	movs	r2, #77	; 0x4d
 8008cc0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			u8ModbusRegisterdwin[48] = '1';//itemNumber[4];
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2231      	movs	r2, #49	; 0x31
 8008cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			u8ModbusRegisterdwin[49] = 'T';//itemNumber[5];//2013
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2254      	movs	r2, #84	; 0x54
 8008cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			u8ModbusRegisterdwin[50] = 'E';//itemNumber[6];
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2245      	movs	r2, #69	; 0x45
 8008cd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			u8ModbusRegisterdwin[51] = 'S';//itemNumber[7];//2014
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2253      	movs	r2, #83	; 0x53
 8008ce0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			u8ModbusRegisterdwin[52] = '1';//itemNumber[8];
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2231      	movs	r2, #49	; 0x31
 8008ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			u8ModbusRegisterdwin[53] = '2';//itemNumber[9];//2015
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2232      	movs	r2, #50	; 0x32
 8008cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			noOfDataDwin=54;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2236      	movs	r2, #54	; 0x36
 8008cf8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			noOfDataDwin=36;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2224      	movs	r2, #36	; 0x24
 8008d00:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
   			Cntid_dwin=1;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		break;
 8008d0c:	e06b      	b.n	8008de6 <_ZN7Dwinhmi9dwinFrameEv+0x2de>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	225a      	movs	r2, #90	; 0x5a
 8008d12:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	22a5      	movs	r2, #165	; 0xa5
 8008d18:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	220f      	movs	r2, #15
 8008d1e:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2282      	movs	r2, #130	; 0x82
 8008d24:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x20;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x27;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2227      	movs	r2, #39	; 0x27
 8008d30:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = highByte(espMacAdress[0]);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	729a      	strb	r2, [r3, #10]
			u8ModbusRegisterdwin[7] = lowByte(espMacAdress[0]);
 8008d38:	4b3f      	ldr	r3, [pc, #252]	; (8008e38 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	72da      	strb	r2, [r3, #11]
			u8ModbusRegisterdwin[8] = highByte(espMacAdress[1]);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	731a      	strb	r2, [r3, #12]
			u8ModbusRegisterdwin[9] = lowByte(espMacAdress[1]);
 8008d46:	4b3c      	ldr	r3, [pc, #240]	; (8008e38 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008d48:	785a      	ldrb	r2, [r3, #1]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	735a      	strb	r2, [r3, #13]
			u8ModbusRegisterdwin[10] = highByte(espMacAdress[2]);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	739a      	strb	r2, [r3, #14]
			u8ModbusRegisterdwin[11] = lowByte(espMacAdress[2]);
 8008d54:	4b38      	ldr	r3, [pc, #224]	; (8008e38 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008d56:	789a      	ldrb	r2, [r3, #2]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	73da      	strb	r2, [r3, #15]
			u8ModbusRegisterdwin[12] = highByte(espMacAdress[3]);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	741a      	strb	r2, [r3, #16]
			u8ModbusRegisterdwin[13] = lowByte(espMacAdress[3]);
 8008d62:	4b35      	ldr	r3, [pc, #212]	; (8008e38 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008d64:	78da      	ldrb	r2, [r3, #3]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	745a      	strb	r2, [r3, #17]
			u8ModbusRegisterdwin[14] = highByte(espMacAdress[4]);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	749a      	strb	r2, [r3, #18]
			u8ModbusRegisterdwin[15] = lowByte(espMacAdress[4]);
 8008d70:	4b31      	ldr	r3, [pc, #196]	; (8008e38 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008d72:	791a      	ldrb	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	74da      	strb	r2, [r3, #19]
			u8ModbusRegisterdwin[16] = highByte(espMacAdress[5]);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	751a      	strb	r2, [r3, #20]
			u8ModbusRegisterdwin[17] = lowByte(espMacAdress[5]);
 8008d7e:	4b2e      	ldr	r3, [pc, #184]	; (8008e38 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008d80:	795a      	ldrb	r2, [r3, #5]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	755a      	strb	r2, [r3, #21]
			noOfDataDwin=18;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2212      	movs	r2, #18
 8008d8a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			Cntid_dwin=2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		break;
 8008d96:	e026      	b.n	8008de6 <_ZN7Dwinhmi9dwinFrameEv+0x2de>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	225a      	movs	r2, #90	; 0x5a
 8008d9c:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	22a5      	movs	r2, #165	; 0xa5
 8008da2:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleReadRequestH;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2204      	movs	r2, #4
 8008da8:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleReadRequestL;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2283      	movs	r2, #131	; 0x83
 8008dae:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x30;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2230      	movs	r2, #48	; 0x30
 8008db4:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x22;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2222      	movs	r2, #34	; 0x22
 8008dc0:	729a      	strb	r2, [r3, #10]
			memset(DwinDatabuffer,0,255);
 8008dc2:	22ff      	movs	r2, #255	; 0xff
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	481d      	ldr	r0, [pc, #116]	; (8008e3c <_ZN7Dwinhmi9dwinFrameEv+0x334>)
 8008dc8:	f007 ff42 	bl	8010c50 <memset>
			Dwinseq=0;
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <_ZN7Dwinhmi9dwinFrameEv+0x338>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
			noOfDataDwin=7;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			Cntid_dwin=0;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		break;
 8008de2:	e000      	b.n	8008de6 <_ZN7Dwinhmi9dwinFrameEv+0x2de>
		break;
 8008de4:	bf00      	nop
	}
	HAL_UART_Transmit_IT(&huart2,u8ModbusRegisterdwin,noOfDataDwin);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	1d19      	adds	r1, r3, #4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	4813      	ldr	r0, [pc, #76]	; (8008e44 <_ZN7Dwinhmi9dwinFrameEv+0x33c>)
 8008df6:	f006 fb8d 	bl	800f514 <HAL_UART_Transmit_IT>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000a20 	.word	0x20000a20
 8008e08:	20000a21 	.word	0x20000a21
 8008e0c:	20000a22 	.word	0x20000a22
 8008e10:	20000a1c 	.word	0x20000a1c
 8008e14:	20000a1d 	.word	0x20000a1d
 8008e18:	20000a1e 	.word	0x20000a1e
 8008e1c:	200000fe 	.word	0x200000fe
 8008e20:	20000100 	.word	0x20000100
 8008e24:	200001bc 	.word	0x200001bc
 8008e28:	2000077a 	.word	0x2000077a
 8008e2c:	20000776 	.word	0x20000776
 8008e30:	2000010f 	.word	0x2000010f
 8008e34:	2000010c 	.word	0x2000010c
 8008e38:	20000134 	.word	0x20000134
 8008e3c:	2000029c 	.word	0x2000029c
 8008e40:	20000813 	.word	0x20000813
 8008e44:	200004f8 	.word	0x200004f8

08008e48 <_ZN7Dwinhmi11dwinDecoderEv>:


void Dwinhmi::dwinDecoder()
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	if(!Rx_Dwin_Complete){return;}
 8008e50:	4b94      	ldr	r3, [pc, #592]	; (80090a4 <_ZN7Dwinhmi11dwinDecoderEv+0x25c>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 818f 	beq.w	8009178 <_ZN7Dwinhmi11dwinDecoderEv+0x330>
	Rx_Dwin_Complete=0;
 8008e5a:	4b92      	ldr	r3, [pc, #584]	; (80090a4 <_ZN7Dwinhmi11dwinDecoderEv+0x25c>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]

	dwinRxFramValidKey = ((DwinDatabuffer[1]<<8)|DwinDatabuffer[2]);
 8008e60:	4b91      	ldr	r3, [pc, #580]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	b21a      	sxth	r2, r3
 8008e68:	4b8f      	ldr	r3, [pc, #572]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008e6a:	789b      	ldrb	r3, [r3, #2]
 8008e6c:	b21b      	sxth	r3, r3
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	b21b      	sxth	r3, r3
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	4b8d      	ldr	r3, [pc, #564]	; (80090ac <_ZN7Dwinhmi11dwinDecoderEv+0x264>)
 8008e76:	801a      	strh	r2, [r3, #0]
	dwinRxFramValid1 = ((DwinDatabuffer[23]<<8)|DwinDatabuffer[24]);
 8008e78:	4b8b      	ldr	r3, [pc, #556]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008e7a:	7ddb      	ldrb	r3, [r3, #23]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b21a      	sxth	r2, r3
 8008e80:	4b89      	ldr	r3, [pc, #548]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008e82:	7e1b      	ldrb	r3, [r3, #24]
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b21b      	sxth	r3, r3
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	4b88      	ldr	r3, [pc, #544]	; (80090b0 <_ZN7Dwinhmi11dwinDecoderEv+0x268>)
 8008e8e:	801a      	strh	r2, [r3, #0]
	dwinRxFramValid2 = ((DwinDatabuffer[51]<<8)|DwinDatabuffer[52]);
 8008e90:	4b85      	ldr	r3, [pc, #532]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008e92:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	4b83      	ldr	r3, [pc, #524]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008e9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ea0:	b21b      	sxth	r3, r3
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	b21b      	sxth	r3, r3
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b82      	ldr	r3, [pc, #520]	; (80090b4 <_ZN7Dwinhmi11dwinDecoderEv+0x26c>)
 8008eaa:	801a      	strh	r2, [r3, #0]
	if((dwinRxFramValid1 > 0)&&(dwinRxFramValid2 > 0)&&(dwinRxFramValidKey==55)){
 8008eac:	4b80      	ldr	r3, [pc, #512]	; (80090b0 <_ZN7Dwinhmi11dwinDecoderEv+0x268>)
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 8162 	beq.w	800917a <_ZN7Dwinhmi11dwinDecoderEv+0x332>
 8008eb6:	4b7f      	ldr	r3, [pc, #508]	; (80090b4 <_ZN7Dwinhmi11dwinDecoderEv+0x26c>)
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 815d 	beq.w	800917a <_ZN7Dwinhmi11dwinDecoderEv+0x332>
 8008ec0:	4b7a      	ldr	r3, [pc, #488]	; (80090ac <_ZN7Dwinhmi11dwinDecoderEv+0x264>)
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	2b37      	cmp	r3, #55	; 0x37
 8008ec6:	f040 8158 	bne.w	800917a <_ZN7Dwinhmi11dwinDecoderEv+0x332>
		dwinRxFramValidKey=0;
 8008eca:	4b78      	ldr	r3, [pc, #480]	; (80090ac <_ZN7Dwinhmi11dwinDecoderEv+0x264>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	801a      	strh	r2, [r3, #0]
		machineId  = ((DwinDatabuffer[23]<<8)|DwinDatabuffer[24]);
 8008ed0:	4b75      	ldr	r3, [pc, #468]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008ed2:	7ddb      	ldrb	r3, [r3, #23]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	b21a      	sxth	r2, r3
 8008ed8:	4b73      	ldr	r3, [pc, #460]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008eda:	7e1b      	ldrb	r3, [r3, #24]
 8008edc:	b21b      	sxth	r3, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b21b      	sxth	r3, r3
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	4b74      	ldr	r3, [pc, #464]	; (80090b8 <_ZN7Dwinhmi11dwinDecoderEv+0x270>)
 8008ee6:	801a      	strh	r2, [r3, #0]
		portNumber = ((DwinDatabuffer[51]<<8)|DwinDatabuffer[52]);
 8008ee8:	4b6f      	ldr	r3, [pc, #444]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008eea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008eee:	021b      	lsls	r3, r3, #8
 8008ef0:	b21a      	sxth	r2, r3
 8008ef2:	4b6d      	ldr	r3, [pc, #436]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008ef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ef8:	b21b      	sxth	r3, r3
 8008efa:	4313      	orrs	r3, r2
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	4b6e      	ldr	r3, [pc, #440]	; (80090bc <_ZN7Dwinhmi11dwinDecoderEv+0x274>)
 8008f02:	801a      	strh	r2, [r3, #0]
		memset(serverAddress,0,20);
 8008f04:	2214      	movs	r2, #20
 8008f06:	2100      	movs	r1, #0
 8008f08:	486d      	ldr	r0, [pc, #436]	; (80090c0 <_ZN7Dwinhmi11dwinDecoderEv+0x278>)
 8008f0a:	f007 fea1 	bl	8010c50 <memset>
		memset(userNameWifi,0,20);
 8008f0e:	2214      	movs	r2, #20
 8008f10:	2100      	movs	r1, #0
 8008f12:	486c      	ldr	r0, [pc, #432]	; (80090c4 <_ZN7Dwinhmi11dwinDecoderEv+0x27c>)
 8008f14:	f007 fe9c 	bl	8010c50 <memset>
		memset(passwordWifi,0,20);
 8008f18:	2214      	movs	r2, #20
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	486a      	ldr	r0, [pc, #424]	; (80090c8 <_ZN7Dwinhmi11dwinDecoderEv+0x280>)
 8008f1e:	f007 fe97 	bl	8010c50 <memset>

		for(shiftP=3,len_i=0;shiftP<=22;shiftP++,len_i++){
 8008f22:	4b6a      	ldr	r3, [pc, #424]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f24:	2203      	movs	r2, #3
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	4b69      	ldr	r3, [pc, #420]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	4b67      	ldr	r3, [pc, #412]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b16      	cmp	r3, #22
 8008f34:	d822      	bhi.n	8008f7c <_ZN7Dwinhmi11dwinDecoderEv+0x134>
			if(DwinDatabuffer[shiftP] == 0xff){lengthOfServerAdd = len_i;break;}
 8008f36:	4b65      	ldr	r3, [pc, #404]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4b5a      	ldr	r3, [pc, #360]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008f3e:	5c9b      	ldrb	r3, [r3, r2]
 8008f40:	2bff      	cmp	r3, #255	; 0xff
 8008f42:	d104      	bne.n	8008f4e <_ZN7Dwinhmi11dwinDecoderEv+0x106>
 8008f44:	4b62      	ldr	r3, [pc, #392]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008f46:	781a      	ldrb	r2, [r3, #0]
 8008f48:	4b62      	ldr	r3, [pc, #392]	; (80090d4 <_ZN7Dwinhmi11dwinDecoderEv+0x28c>)
 8008f4a:	701a      	strb	r2, [r3, #0]
 8008f4c:	e016      	b.n	8008f7c <_ZN7Dwinhmi11dwinDecoderEv+0x134>
			serverAddress[len_i] = DwinDatabuffer[shiftP];
 8008f4e:	4b5f      	ldr	r3, [pc, #380]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	4619      	mov	r1, r3
 8008f54:	4b5e      	ldr	r3, [pc, #376]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b53      	ldr	r3, [pc, #332]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008f5c:	5c59      	ldrb	r1, [r3, r1]
 8008f5e:	4b58      	ldr	r3, [pc, #352]	; (80090c0 <_ZN7Dwinhmi11dwinDecoderEv+0x278>)
 8008f60:	5499      	strb	r1, [r3, r2]
		for(shiftP=3,len_i=0;shiftP<=22;shiftP++,len_i++){
 8008f62:	4b5a      	ldr	r3, [pc, #360]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b58      	ldr	r3, [pc, #352]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f6c:	701a      	strb	r2, [r3, #0]
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4b56      	ldr	r3, [pc, #344]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	e7d8      	b.n	8008f2e <_ZN7Dwinhmi11dwinDecoderEv+0xe6>
		}
		for(shiftP=27,len_i=0;shiftP<=49;shiftP++,len_i++){
 8008f7c:	4b53      	ldr	r3, [pc, #332]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f7e:	221b      	movs	r2, #27
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	4b53      	ldr	r3, [pc, #332]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	4b50      	ldr	r3, [pc, #320]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b31      	cmp	r3, #49	; 0x31
 8008f8e:	d822      	bhi.n	8008fd6 <_ZN7Dwinhmi11dwinDecoderEv+0x18e>
			if(DwinDatabuffer[shiftP] == 0xff){lengthOfUserName = len_i;break;}
 8008f90:	4b4e      	ldr	r3, [pc, #312]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	4b44      	ldr	r3, [pc, #272]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008f98:	5c9b      	ldrb	r3, [r3, r2]
 8008f9a:	2bff      	cmp	r3, #255	; 0xff
 8008f9c:	d104      	bne.n	8008fa8 <_ZN7Dwinhmi11dwinDecoderEv+0x160>
 8008f9e:	4b4c      	ldr	r3, [pc, #304]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	4b4d      	ldr	r3, [pc, #308]	; (80090d8 <_ZN7Dwinhmi11dwinDecoderEv+0x290>)
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e016      	b.n	8008fd6 <_ZN7Dwinhmi11dwinDecoderEv+0x18e>
			userNameWifi[len_i] = DwinDatabuffer[shiftP];
 8008fa8:	4b48      	ldr	r3, [pc, #288]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	4619      	mov	r1, r3
 8008fae:	4b48      	ldr	r3, [pc, #288]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4b3c      	ldr	r3, [pc, #240]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008fb6:	5c59      	ldrb	r1, [r3, r1]
 8008fb8:	4b42      	ldr	r3, [pc, #264]	; (80090c4 <_ZN7Dwinhmi11dwinDecoderEv+0x27c>)
 8008fba:	5499      	strb	r1, [r3, r2]
		for(shiftP=27,len_i=0;shiftP<=49;shiftP++,len_i++){
 8008fbc:	4b43      	ldr	r3, [pc, #268]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	4b41      	ldr	r3, [pc, #260]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	4b41      	ldr	r3, [pc, #260]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	4b3f      	ldr	r3, [pc, #252]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	e7d8      	b.n	8008f88 <_ZN7Dwinhmi11dwinDecoderEv+0x140>
		}
		for(shiftP=53,len_i=0;shiftP<=70;shiftP++,len_i++){
 8008fd6:	4b3d      	ldr	r3, [pc, #244]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008fd8:	2235      	movs	r2, #53	; 0x35
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	4b3a      	ldr	r3, [pc, #232]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b46      	cmp	r3, #70	; 0x46
 8008fe8:	d822      	bhi.n	8009030 <_ZN7Dwinhmi11dwinDecoderEv+0x1e8>
			if(DwinDatabuffer[shiftP] == 0xff){lengthOfPassword = len_i;break;}
 8008fea:	4b38      	ldr	r3, [pc, #224]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4b2d      	ldr	r3, [pc, #180]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008ff2:	5c9b      	ldrb	r3, [r3, r2]
 8008ff4:	2bff      	cmp	r3, #255	; 0xff
 8008ff6:	d104      	bne.n	8009002 <_ZN7Dwinhmi11dwinDecoderEv+0x1ba>
 8008ff8:	4b35      	ldr	r3, [pc, #212]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8008ffa:	781a      	ldrb	r2, [r3, #0]
 8008ffc:	4b37      	ldr	r3, [pc, #220]	; (80090dc <_ZN7Dwinhmi11dwinDecoderEv+0x294>)
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	e016      	b.n	8009030 <_ZN7Dwinhmi11dwinDecoderEv+0x1e8>
			passwordWifi[len_i] = DwinDatabuffer[shiftP];
 8009002:	4b32      	ldr	r3, [pc, #200]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	4619      	mov	r1, r3
 8009008:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8009010:	5c59      	ldrb	r1, [r3, r1]
 8009012:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <_ZN7Dwinhmi11dwinDecoderEv+0x280>)
 8009014:	5499      	strb	r1, [r3, r2]
		for(shiftP=53,len_i=0;shiftP<=70;shiftP++,len_i++){
 8009016:	4b2d      	ldr	r3, [pc, #180]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	3301      	adds	r3, #1
 800901c:	b2da      	uxtb	r2, r3
 800901e:	4b2b      	ldr	r3, [pc, #172]	; (80090cc <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	4b2b      	ldr	r3, [pc, #172]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4b29      	ldr	r3, [pc, #164]	; (80090d0 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	e7d8      	b.n	8008fe2 <_ZN7Dwinhmi11dwinDecoderEv+0x19a>
		}

		if(machineId != machineIdK1){
 8009030:	4b21      	ldr	r3, [pc, #132]	; (80090b8 <_ZN7Dwinhmi11dwinDecoderEv+0x270>)
 8009032:	881a      	ldrh	r2, [r3, #0]
 8009034:	4b2a      	ldr	r3, [pc, #168]	; (80090e0 <_ZN7Dwinhmi11dwinDecoderEv+0x298>)
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d006      	beq.n	800904a <_ZN7Dwinhmi11dwinDecoderEv+0x202>
			updateDwindata = 1;
 800903c:	4b29      	ldr	r3, [pc, #164]	; (80090e4 <_ZN7Dwinhmi11dwinDecoderEv+0x29c>)
 800903e:	2201      	movs	r2, #1
 8009040:	701a      	strb	r2, [r3, #0]
			machineIdK1 = machineId;
 8009042:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <_ZN7Dwinhmi11dwinDecoderEv+0x270>)
 8009044:	881a      	ldrh	r2, [r3, #0]
 8009046:	4b26      	ldr	r3, [pc, #152]	; (80090e0 <_ZN7Dwinhmi11dwinDecoderEv+0x298>)
 8009048:	801a      	strh	r2, [r3, #0]
		}
		if(portNumber != portNumberK1){
 800904a:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <_ZN7Dwinhmi11dwinDecoderEv+0x274>)
 800904c:	881a      	ldrh	r2, [r3, #0]
 800904e:	4b26      	ldr	r3, [pc, #152]	; (80090e8 <_ZN7Dwinhmi11dwinDecoderEv+0x2a0>)
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d006      	beq.n	8009064 <_ZN7Dwinhmi11dwinDecoderEv+0x21c>
			updateDwindata = 1;
 8009056:	4b23      	ldr	r3, [pc, #140]	; (80090e4 <_ZN7Dwinhmi11dwinDecoderEv+0x29c>)
 8009058:	2201      	movs	r2, #1
 800905a:	701a      	strb	r2, [r3, #0]
			portNumberK1 = portNumber;
 800905c:	4b17      	ldr	r3, [pc, #92]	; (80090bc <_ZN7Dwinhmi11dwinDecoderEv+0x274>)
 800905e:	881a      	ldrh	r2, [r3, #0]
 8009060:	4b21      	ldr	r3, [pc, #132]	; (80090e8 <_ZN7Dwinhmi11dwinDecoderEv+0x2a0>)
 8009062:	801a      	strh	r2, [r3, #0]
		}

		for(CheckP=0;CheckP<lengthOfServerAdd;CheckP++){
 8009064:	4b21      	ldr	r3, [pc, #132]	; (80090ec <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	4b20      	ldr	r3, [pc, #128]	; (80090ec <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 800906c:	781a      	ldrb	r2, [r3, #0]
 800906e:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <_ZN7Dwinhmi11dwinDecoderEv+0x28c>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d240      	bcs.n	80090f8 <_ZN7Dwinhmi11dwinDecoderEv+0x2b0>
				if(serverAddress[CheckP] != serverAddressK1[CheckP]){
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	4b10      	ldr	r3, [pc, #64]	; (80090c0 <_ZN7Dwinhmi11dwinDecoderEv+0x278>)
 800907e:	5c9a      	ldrb	r2, [r3, r2]
 8009080:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	4b1a      	ldr	r3, [pc, #104]	; (80090f0 <_ZN7Dwinhmi11dwinDecoderEv+0x2a8>)
 8009088:	5c5b      	ldrb	r3, [r3, r1]
 800908a:	429a      	cmp	r2, r3
 800908c:	d003      	beq.n	8009096 <_ZN7Dwinhmi11dwinDecoderEv+0x24e>
				updateCloudConn = 1;
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <_ZN7Dwinhmi11dwinDecoderEv+0x2ac>)
 8009090:	2201      	movs	r2, #1
 8009092:	701a      	strb	r2, [r3, #0]
				break;
 8009094:	e030      	b.n	80090f8 <_ZN7Dwinhmi11dwinDecoderEv+0x2b0>
		for(CheckP=0;CheckP<lengthOfServerAdd;CheckP++){
 8009096:	4b15      	ldr	r3, [pc, #84]	; (80090ec <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	b2da      	uxtb	r2, r3
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 80090a0:	701a      	strb	r2, [r3, #0]
 80090a2:	e7e2      	b.n	800906a <_ZN7Dwinhmi11dwinDecoderEv+0x222>
 80090a4:	20000299 	.word	0x20000299
 80090a8:	2000029c 	.word	0x2000029c
 80090ac:	2000081a 	.word	0x2000081a
 80090b0:	2000080e 	.word	0x2000080e
 80090b4:	20000810 	.word	0x20000810
 80090b8:	2000078a 	.word	0x2000078a
 80090bc:	2000078e 	.word	0x2000078e
 80090c0:	20000794 	.word	0x20000794
 80090c4:	200007bc 	.word	0x200007bc
 80090c8:	200007e4 	.word	0x200007e4
 80090cc:	2000080c 	.word	0x2000080c
 80090d0:	2000080d 	.word	0x2000080d
 80090d4:	20000814 	.word	0x20000814
 80090d8:	20000815 	.word	0x20000815
 80090dc:	20000816 	.word	0x20000816
 80090e0:	2000078c 	.word	0x2000078c
 80090e4:	20000812 	.word	0x20000812
 80090e8:	20000790 	.word	0x20000790
 80090ec:	20000817 	.word	0x20000817
 80090f0:	200007a8 	.word	0x200007a8
 80090f4:	20000818 	.word	0x20000818
			}
		}
		for(CheckP=0;CheckP<lengthOfUserName;CheckP++){
 80090f8:	4b21      	ldr	r3, [pc, #132]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	4b20      	ldr	r3, [pc, #128]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4b20      	ldr	r3, [pc, #128]	; (8009184 <_ZN7Dwinhmi11dwinDecoderEv+0x33c>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d216      	bcs.n	8009138 <_ZN7Dwinhmi11dwinDecoderEv+0x2f0>
						if(userNameWifi[CheckP] != userNameWifiK1[CheckP]){
 800910a:	4b1d      	ldr	r3, [pc, #116]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	4b1d      	ldr	r3, [pc, #116]	; (8009188 <_ZN7Dwinhmi11dwinDecoderEv+0x340>)
 8009112:	5c9a      	ldrb	r2, [r3, r2]
 8009114:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	4b1c      	ldr	r3, [pc, #112]	; (800918c <_ZN7Dwinhmi11dwinDecoderEv+0x344>)
 800911c:	5c5b      	ldrb	r3, [r3, r1]
 800911e:	429a      	cmp	r2, r3
 8009120:	d003      	beq.n	800912a <_ZN7Dwinhmi11dwinDecoderEv+0x2e2>
						updateCloudConn = 1;
 8009122:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <_ZN7Dwinhmi11dwinDecoderEv+0x348>)
 8009124:	2201      	movs	r2, #1
 8009126:	701a      	strb	r2, [r3, #0]
						break;
 8009128:	e006      	b.n	8009138 <_ZN7Dwinhmi11dwinDecoderEv+0x2f0>
		for(CheckP=0;CheckP<lengthOfUserName;CheckP++){
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	3301      	adds	r3, #1
 8009130:	b2da      	uxtb	r2, r3
 8009132:	4b13      	ldr	r3, [pc, #76]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009134:	701a      	strb	r2, [r3, #0]
 8009136:	e7e2      	b.n	80090fe <_ZN7Dwinhmi11dwinDecoderEv+0x2b6>
			}
		}
		for(CheckP=0;CheckP<lengthOfPassword;CheckP++){
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 800913a:	2200      	movs	r2, #0
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009140:	781a      	ldrb	r2, [r3, #0]
 8009142:	4b14      	ldr	r3, [pc, #80]	; (8009194 <_ZN7Dwinhmi11dwinDecoderEv+0x34c>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d217      	bcs.n	800917a <_ZN7Dwinhmi11dwinDecoderEv+0x332>
						if(passwordWifi[CheckP] != passwordWifiK1[CheckP]){
 800914a:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	4b11      	ldr	r3, [pc, #68]	; (8009198 <_ZN7Dwinhmi11dwinDecoderEv+0x350>)
 8009152:	5c9a      	ldrb	r2, [r3, r2]
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <_ZN7Dwinhmi11dwinDecoderEv+0x354>)
 800915c:	5c5b      	ldrb	r3, [r3, r1]
 800915e:	429a      	cmp	r2, r3
 8009160:	d003      	beq.n	800916a <_ZN7Dwinhmi11dwinDecoderEv+0x322>
						updateCloudConn = 1;
 8009162:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <_ZN7Dwinhmi11dwinDecoderEv+0x348>)
 8009164:	2201      	movs	r2, #1
 8009166:	701a      	strb	r2, [r3, #0]
						break;
 8009168:	e007      	b.n	800917a <_ZN7Dwinhmi11dwinDecoderEv+0x332>
		for(CheckP=0;CheckP<lengthOfPassword;CheckP++){
 800916a:	4b05      	ldr	r3, [pc, #20]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	b2da      	uxtb	r2, r3
 8009172:	4b03      	ldr	r3, [pc, #12]	; (8009180 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e7e2      	b.n	800913e <_ZN7Dwinhmi11dwinDecoderEv+0x2f6>
	if(!Rx_Dwin_Complete){return;}
 8009178:	bf00      	nop
			}
		}
  }
}
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20000817 	.word	0x20000817
 8009184:	20000815 	.word	0x20000815
 8009188:	200007bc 	.word	0x200007bc
 800918c:	200007d0 	.word	0x200007d0
 8009190:	20000818 	.word	0x20000818
 8009194:	20000816 	.word	0x20000816
 8009198:	200007e4 	.word	0x200007e4
 800919c:	200007f8 	.word	0x200007f8

080091a0 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	4a04      	ldr	r2, [pc, #16]	; (80091bc <_ZN10W5500ClassC1Ev+0x1c>)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	08011a78 	.word	0x08011a78

080091c0 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	4a04      	ldr	r2, [pc, #16]	; (80091dc <_ZN10W5500ClassD1Ev+0x1c>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	08011a78 	.word	0x08011a78

080091e0 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
}
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff ffe9 	bl	80091c0 <_ZN10W5500ClassD1Ev>
 80091ee:	2104      	movs	r1, #4
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f007 fce8 	bl	8010bc6 <_ZdlPvj>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <_Z41__static_initialization_and_destruction_0ii>:
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d107      	bne.n	8009220 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009216:	4293      	cmp	r3, r2
 8009218:	d102      	bne.n	8009220 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 800921a:	4809      	ldr	r0, [pc, #36]	; (8009240 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800921c:	f7ff ffc0 	bl	80091a0 <_ZN10W5500ClassC1Ev>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d107      	bne.n	8009236 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800922c:	4293      	cmp	r3, r2
 800922e:	d102      	bne.n	8009236 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009230:	4803      	ldr	r0, [pc, #12]	; (8009240 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009232:	f7ff ffc5 	bl	80091c0 <_ZN10W5500ClassD1Ev>
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	2000081c 	.word	0x2000081c

08009244 <_GLOBAL__sub_I_w5500>:
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
 8009248:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800924c:	2001      	movs	r0, #1
 800924e:	f7ff ffd7 	bl	8009200 <_Z41__static_initialization_and_destruction_0ii>
 8009252:	bd80      	pop	{r7, pc}

08009254 <_GLOBAL__sub_D_w5500>:
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
 8009258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800925c:	2000      	movs	r0, #0
 800925e:	f7ff ffcf 	bl	8009200 <_Z41__static_initialization_and_destruction_0ii>
 8009262:	bd80      	pop	{r7, pc}

08009264 <_ZN9ModbusrtuC1Ev>:
#include "Modbus_types.h"

extern uint16_t temperatureSetOL,temperaturehighSetOL,temperatureLowSetOL;

uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <_ZN9ModbusrtuC1Ev+0x44>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	761a      	strb	r2, [r3, #24]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a0c      	ldr	r2, [pc, #48]	; (80092ac <_ZN9ModbusrtuC1Ev+0x48>)
 800927c:	3319      	adds	r3, #25
 800927e:	4611      	mov	r1, r2
 8009280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009284:	4618      	mov	r0, r3
 8009286:	f007 fcd5 	bl	8010c34 <memcpy>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a08      	ldr	r2, [pc, #32]	; (80092b0 <_ZN9ModbusrtuC1Ev+0x4c>)
 800928e:	f203 1319 	addw	r3, r3, #281	; 0x119
 8009292:	4611      	mov	r1, r2
 8009294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009298:	4618      	mov	r0, r3
 800929a:	f007 fccb 	bl	8010c34 <memcpy>
	// TODO Auto-generated constructor stub

}
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	08011a88 	.word	0x08011a88
 80092ac:	08011594 	.word	0x08011594
 80092b0:	08011694 	.word	0x08011694

080092b4 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	4a04      	ldr	r2, [pc, #16]	; (80092d0 <_ZN9ModbusrtuD1Ev+0x1c>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	08011a88 	.word	0x08011a88

080092d4 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
}
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ffe9 	bl	80092b4 <_ZN9ModbusrtuD1Ev>
 80092e2:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f007 fc6d 	bl	8010bc6 <_ZdlPvj>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	//read_rxint_set out_read_rxint_set;
	switch(Cntid)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	791b      	ldrb	r3, [r3, #4]
 8009304:	2b03      	cmp	r3, #3
 8009306:	f200 8135 	bhi.w	8009574 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x27c>
 800930a:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x18>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009321 	.word	0x08009321
 8009314:	080093b1 	.word	0x080093b1
 8009318:	0800943b 	.word	0x0800943b
 800931c:	080094c5 	.word	0x080094c5
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7e1a      	ldrb	r2, [r3, #24]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x03;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2203      	movs	r2, #3
 800932c:	719a      	strb	r2, [r3, #6]
		_u16ReadAddress 	= 0x00;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x04;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2204      	movs	r2, #4
 8009338:	819a      	strh	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	795a      	ldrb	r2, [r3, #5]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	799a      	ldrb	r2, [r3, #6]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	891b      	ldrh	r3, [r3, #8]
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	b29b      	uxth	r3, r3
 8009352:	b2da      	uxtb	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	891b      	ldrh	r3, [r3, #8]
 800935c:	b2da      	uxtb	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadQty & 0xff00)>>8);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	899b      	ldrh	r3, [r3, #12]
 8009366:	0a1b      	lsrs	r3, r3, #8
 8009368:	b29b      	uxth	r3, r3
 800936a:	b2da      	uxtb	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadQty & 0x00ff);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	899b      	ldrh	r3, [r3, #12]
 8009374:	b2da      	uxtb	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3310      	adds	r3, #16
 800937e:	2206      	movs	r2, #6
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f922 	bl	80095cc <_ZN9Modbusrtu11ASCChecksumEPhh>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	89db      	ldrh	r3, [r3, #14]
 8009394:	b2da      	uxtb	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	89db      	ldrh	r3, [r3, #14]
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	75da      	strb	r2, [r3, #23]

		Cntid=1;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	711a      	strb	r2, [r3, #4]
	break;
 80093ae:	e0e8      	b.n	8009582 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 1:
		_u8MBSlave 			= mTemperatureSensorId;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7e1a      	ldrb	r2, [r3, #24]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x06;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2206      	movs	r2, #6
 80093bc:	719a      	strb	r2, [r3, #6]
		_u16WriteAddress 	= 0x00;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	815a      	strh	r2, [r3, #10]
		u8ModbusRegister[0] = _u8MBSlave;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	795a      	ldrb	r2, [r3, #5]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	799a      	ldrb	r2, [r3, #6]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	895b      	ldrh	r3, [r3, #10]
 80093d8:	0a1b      	lsrs	r3, r3, #8
 80093da:	b29b      	uxth	r3, r3
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	895b      	ldrh	r3, [r3, #10]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((temperatureSetOL & 0xff00)>>8);
 80093ec:	4b6a      	ldr	r3, [pc, #424]	; (8009598 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	0a1b      	lsrs	r3, r3, #8
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(temperatureSetOL & 0x00ff);
 80093fa:	4b67      	ldr	r3, [pc, #412]	; (8009598 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3310      	adds	r3, #16
 8009408:	2206      	movs	r2, #6
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f8dd 	bl	80095cc <_ZN9Modbusrtu11ASCChecksumEPhh>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	89db      	ldrh	r3, [r3, #14]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	89db      	ldrh	r3, [r3, #14]
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	b29b      	uxth	r3, r3
 800942c:	b2da      	uxtb	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	75da      	strb	r2, [r3, #23]
		Cntid=2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	711a      	strb	r2, [r3, #4]
	break;
 8009438:	e0a3      	b.n	8009582 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 2:
			_u8MBSlave 			= mTemperatureSensorId;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7e1a      	ldrb	r2, [r3, #24]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2206      	movs	r2, #6
 8009446:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x01;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	795a      	ldrb	r2, [r3, #5]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	799a      	ldrb	r2, [r3, #6]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	895b      	ldrh	r3, [r3, #10]
 8009462:	0a1b      	lsrs	r3, r3, #8
 8009464:	b29b      	uxth	r3, r3
 8009466:	b2da      	uxtb	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	895b      	ldrh	r3, [r3, #10]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperaturehighSetOL & 0xff00)>>8);
 8009476:	4b49      	ldr	r3, [pc, #292]	; (800959c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	b29b      	uxth	r3, r3
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperaturehighSetOL & 0x00ff);
 8009484:	4b45      	ldr	r3, [pc, #276]	; (800959c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3310      	adds	r3, #16
 8009492:	2206      	movs	r2, #6
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f898 	bl	80095cc <_ZN9Modbusrtu11ASCChecksumEPhh>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	89db      	ldrh	r3, [r3, #14]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	89db      	ldrh	r3, [r3, #14]
 80094b2:	0a1b      	lsrs	r3, r3, #8
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	75da      	strb	r2, [r3, #23]
			Cntid=3;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2203      	movs	r2, #3
 80094c0:	711a      	strb	r2, [r3, #4]
		break;
 80094c2:	e05e      	b.n	8009582 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 3:
			_u8MBSlave 			= mTemperatureSensorId;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7e1a      	ldrb	r2, [r3, #24]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2206      	movs	r2, #6
 80094d0:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x02;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2202      	movs	r2, #2
 80094d6:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	795a      	ldrb	r2, [r3, #5]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	799a      	ldrb	r2, [r3, #6]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	895b      	ldrh	r3, [r3, #10]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	895b      	ldrh	r3, [r3, #10]
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperatureLowSetOL & 0xff00)>>8);
 8009500:	4b27      	ldr	r3, [pc, #156]	; (80095a0 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	0a1b      	lsrs	r3, r3, #8
 8009506:	b29b      	uxth	r3, r3
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperatureLowSetOL & 0x00ff);
 800950e:	4b24      	ldr	r3, [pc, #144]	; (80095a0 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3310      	adds	r3, #16
 800951c:	2206      	movs	r2, #6
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f853 	bl	80095cc <_ZN9Modbusrtu11ASCChecksumEPhh>
 8009526:	4603      	mov	r3, r0
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	89db      	ldrh	r3, [r3, #14]
 8009532:	b2da      	uxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	89db      	ldrh	r3, [r3, #14]
 800953c:	0a1b      	lsrs	r3, r3, #8
 800953e:	b29b      	uxth	r3, r3
 8009540:	b2da      	uxtb	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	75da      	strb	r2, [r3, #23]
			Cntid=0;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	711a      	strb	r2, [r3, #4]
			if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7e1b      	ldrb	r3, [r3, #24]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d103      	bne.n	800955c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x264>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	761a      	strb	r2, [r3, #24]
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
			else{mTemperatureSensorId=1;}
		break;
 800955a:	e012      	b.n	8009582 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	7e1b      	ldrb	r3, [r3, #24]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d103      	bne.n	800956c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x274>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2203      	movs	r2, #3
 8009568:	761a      	strb	r2, [r3, #24]
		break;
 800956a:	e00a      	b.n	8009582 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else{mTemperatureSensorId=1;}
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	761a      	strb	r2, [r3, #24]
		break;
 8009572:	e006      	b.n	8009582 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	default:
		Cntid=0;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	761a      	strb	r2, [r3, #24]
	break;
 8009580:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,sizeof(u8ModbusRegister));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3310      	adds	r3, #16
 8009586:	2208      	movs	r2, #8
 8009588:	4619      	mov	r1, r3
 800958a:	4806      	ldr	r0, [pc, #24]	; (80095a4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2ac>)
 800958c:	f005 ffc2 	bl	800f514 <HAL_UART_Transmit_IT>

}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200000f6 	.word	0x200000f6
 800959c:	200000f8 	.word	0x200000f8
 80095a0:	200000fa 	.word	0x200000fa
 80095a4:	20000474 	.word	0x20000474

080095a8 <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
 80095b0:	220d      	movs	r2, #13
 80095b2:	4904      	ldr	r1, [pc, #16]	; (80095c4 <HAL_UART_TxCpltCallback+0x1c>)
 80095b4:	4804      	ldr	r0, [pc, #16]	; (80095c8 <HAL_UART_TxCpltCallback+0x20>)
 80095b6:	f006 f81b 	bl	800f5f0 <HAL_UART_Receive_IT>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20000820 	.word	0x20000820
 80095c8:	20000474 	.word	0x20000474

080095cc <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 80095da:	23ff      	movs	r3, #255	; 0xff
 80095dc:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 80095de:	23ff      	movs	r3, #255	; 0xff
 80095e0:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 80095e6:	2300      	movs	r3, #0
 80095e8:	75fb      	strb	r3, [r7, #23]
 80095ea:	7dfa      	ldrb	r2, [r7, #23]
 80095ec:	7d3b      	ldrb	r3, [r7, #20]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d217      	bcs.n	8009622 <_ZN9Modbusrtu11ASCChecksumEPhh+0x56>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	60ba      	str	r2, [r7, #8]
 80095f8:	781a      	ldrb	r2, [r3, #0]
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
 80095fc:	4053      	eors	r3, r2
 80095fe:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8009600:	7cfb      	ldrb	r3, [r7, #19]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	7e5a      	ldrb	r2, [r3, #25]
 8009608:	7d7b      	ldrb	r3, [r7, #21]
 800960a:	4053      	eors	r3, r2
 800960c:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 800960e:	7cfb      	ldrb	r3, [r7, #19]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8009618:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	3301      	adds	r3, #1
 800961e:	75fb      	strb	r3, [r7, #23]
 8009620:	e7e3      	b.n	80095ea <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8009622:	7d7b      	ldrb	r3, [r7, #21]
 8009624:	021b      	lsls	r3, r3, #8
 8009626:	b21a      	sxth	r2, r3
 8009628:	7dbb      	ldrb	r3, [r7, #22]
 800962a:	b21b      	sxth	r3, r3
 800962c:	4313      	orrs	r3, r2
 800962e:	b21b      	sxth	r3, r3
 8009630:	b29b      	uxth	r3, r3
}
 8009632:	4618      	mov	r0, r3
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
	...

08009640 <_ZN14OfflineStorageC1Ev>:
uint16_t productionIncK1;
uint8_t triggerStartForReqK1;
uint8_t startStopStatusK1;

//uint8_t Checkbuf[100];
OfflineStorage::OfflineStorage() {
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	4a04      	ldr	r2, [pc, #16]	; (800965c <_ZN14OfflineStorageC1Ev+0x1c>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	08011a98 	.word	0x08011a98

08009660 <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	4a04      	ldr	r2, [pc, #16]	; (800967c <_ZN14OfflineStorageD1Ev+0x1c>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	08011a98 	.word	0x08011a98

08009680 <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
}
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff ffe9 	bl	8009660 <_ZN14OfflineStorageD1Ev>
 800968e:	21a8      	movs	r1, #168	; 0xa8
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f007 fa98 	bl	8010bc6 <_ZdlPvj>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 80096a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a2:	b097      	sub	sp, #92	; 0x5c
 80096a4:	af0e      	add	r7, sp, #56	; 0x38
 80096a6:	61f8      	str	r0, [r7, #28]
	if(UpdateStorage==0){return;}
 80096a8:	4b8c      	ldr	r3, [pc, #560]	; (80098dc <_ZN14OfflineStorage3runEv+0x23c>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8224 	beq.w	8009afa <_ZN14OfflineStorage3runEv+0x45a>
	UpdateStorage=0;
 80096b2:	4b8a      	ldr	r3, [pc, #552]	; (80098dc <_ZN14OfflineStorage3runEv+0x23c>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]

	ProductionSet_charFormat[100]={'\0'};
 80096b8:	4b89      	ldr	r3, [pc, #548]	; (80098e0 <_ZN14OfflineStorage3runEv+0x240>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	/*high limit check for system data*/
	CurrentShift = (CurrentShift > 4)?4:CurrentShift;
 80096c0:	4b88      	ldr	r3, [pc, #544]	; (80098e4 <_ZN14OfflineStorage3runEv+0x244>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	bf28      	it	cs
 80096c8:	2304      	movcs	r3, #4
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	4b85      	ldr	r3, [pc, #532]	; (80098e4 <_ZN14OfflineStorage3runEv+0x244>)
 80096ce:	701a      	strb	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production = (MAC_Gen_Prod_Input1_Production >2)?0:MAC_Gen_Prod_Input1_Production;
 80096d0:	4b85      	ldr	r3, [pc, #532]	; (80098e8 <_ZN14OfflineStorage3runEv+0x248>)
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d802      	bhi.n	80096de <_ZN14OfflineStorage3runEv+0x3e>
 80096d8:	4b83      	ldr	r3, [pc, #524]	; (80098e8 <_ZN14OfflineStorage3runEv+0x248>)
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	e000      	b.n	80096e0 <_ZN14OfflineStorage3runEv+0x40>
 80096de:	2300      	movs	r3, #0
 80096e0:	4a81      	ldr	r2, [pc, #516]	; (80098e8 <_ZN14OfflineStorage3runEv+0x248>)
 80096e2:	8013      	strh	r3, [r2, #0]
	MAC_Gen_Rej_Input_Production =(MAC_Gen_Rej_Input_Production >2)?0:MAC_Gen_Rej_Input_Production;
 80096e4:	4b81      	ldr	r3, [pc, #516]	; (80098ec <_ZN14OfflineStorage3runEv+0x24c>)
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d802      	bhi.n	80096f2 <_ZN14OfflineStorage3runEv+0x52>
 80096ec:	4b7f      	ldr	r3, [pc, #508]	; (80098ec <_ZN14OfflineStorage3runEv+0x24c>)
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	e000      	b.n	80096f4 <_ZN14OfflineStorage3runEv+0x54>
 80096f2:	2300      	movs	r3, #0
 80096f4:	4a7d      	ldr	r2, [pc, #500]	; (80098ec <_ZN14OfflineStorage3runEv+0x24c>)
 80096f6:	8013      	strh	r3, [r2, #0]
	Dye_Temperature =(Dye_Temperature >30)?30:Dye_Temperature;
 80096f8:	4b7d      	ldr	r3, [pc, #500]	; (80098f0 <_ZN14OfflineStorage3runEv+0x250>)
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	2b1e      	cmp	r3, #30
 80096fe:	bf28      	it	cs
 8009700:	231e      	movcs	r3, #30
 8009702:	b29a      	uxth	r2, r3
 8009704:	4b7a      	ldr	r3, [pc, #488]	; (80098f0 <_ZN14OfflineStorage3runEv+0x250>)
 8009706:	801a      	strh	r2, [r3, #0]
	Connector_Temperature =(Connector_Temperature>30)?30:Connector_Temperature;
 8009708:	4b7a      	ldr	r3, [pc, #488]	; (80098f4 <_ZN14OfflineStorage3runEv+0x254>)
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	2b1e      	cmp	r3, #30
 800970e:	bf28      	it	cs
 8009710:	231e      	movcs	r3, #30
 8009712:	b29a      	uxth	r2, r3
 8009714:	4b77      	ldr	r3, [pc, #476]	; (80098f4 <_ZN14OfflineStorage3runEv+0x254>)
 8009716:	801a      	strh	r2, [r3, #0]
	hour_t =(hour_t >25)?70:hour_t;
 8009718:	4b77      	ldr	r3, [pc, #476]	; (80098f8 <_ZN14OfflineStorage3runEv+0x258>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b19      	cmp	r3, #25
 800971e:	d802      	bhi.n	8009726 <_ZN14OfflineStorage3runEv+0x86>
 8009720:	4b75      	ldr	r3, [pc, #468]	; (80098f8 <_ZN14OfflineStorage3runEv+0x258>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	e000      	b.n	8009728 <_ZN14OfflineStorage3runEv+0x88>
 8009726:	2346      	movs	r3, #70	; 0x46
 8009728:	4a73      	ldr	r2, [pc, #460]	; (80098f8 <_ZN14OfflineStorage3runEv+0x258>)
 800972a:	7013      	strb	r3, [r2, #0]
	min_t=(min_t > 70)?70:min_t;
 800972c:	4b73      	ldr	r3, [pc, #460]	; (80098fc <_ZN14OfflineStorage3runEv+0x25c>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b46      	cmp	r3, #70	; 0x46
 8009732:	bf28      	it	cs
 8009734:	2346      	movcs	r3, #70	; 0x46
 8009736:	b2da      	uxtb	r2, r3
 8009738:	4b70      	ldr	r3, [pc, #448]	; (80098fc <_ZN14OfflineStorage3runEv+0x25c>)
 800973a:	701a      	strb	r2, [r3, #0]
	sec_t=(sec_t >70)?70:sec_t;
 800973c:	4b70      	ldr	r3, [pc, #448]	; (8009900 <_ZN14OfflineStorage3runEv+0x260>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b46      	cmp	r3, #70	; 0x46
 8009742:	bf28      	it	cs
 8009744:	2346      	movcs	r3, #70	; 0x46
 8009746:	b2da      	uxtb	r2, r3
 8009748:	4b6d      	ldr	r3, [pc, #436]	; (8009900 <_ZN14OfflineStorage3runEv+0x260>)
 800974a:	701a      	strb	r2, [r3, #0]
	date_Rtc=(date_Rtc >32)?70:date_Rtc;
 800974c:	4b6d      	ldr	r3, [pc, #436]	; (8009904 <_ZN14OfflineStorage3runEv+0x264>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b20      	cmp	r3, #32
 8009752:	d802      	bhi.n	800975a <_ZN14OfflineStorage3runEv+0xba>
 8009754:	4b6b      	ldr	r3, [pc, #428]	; (8009904 <_ZN14OfflineStorage3runEv+0x264>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	e000      	b.n	800975c <_ZN14OfflineStorage3runEv+0xbc>
 800975a:	2346      	movs	r3, #70	; 0x46
 800975c:	4a69      	ldr	r2, [pc, #420]	; (8009904 <_ZN14OfflineStorage3runEv+0x264>)
 800975e:	7013      	strb	r3, [r2, #0]
	month_Rtc =(month_Rtc>13)?70:month_Rtc;
 8009760:	4b69      	ldr	r3, [pc, #420]	; (8009908 <_ZN14OfflineStorage3runEv+0x268>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b0d      	cmp	r3, #13
 8009766:	d802      	bhi.n	800976e <_ZN14OfflineStorage3runEv+0xce>
 8009768:	4b67      	ldr	r3, [pc, #412]	; (8009908 <_ZN14OfflineStorage3runEv+0x268>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	e000      	b.n	8009770 <_ZN14OfflineStorage3runEv+0xd0>
 800976e:	2346      	movs	r3, #70	; 0x46
 8009770:	4a65      	ldr	r2, [pc, #404]	; (8009908 <_ZN14OfflineStorage3runEv+0x268>)
 8009772:	7013      	strb	r3, [r2, #0]
	year_Rtc = (year_Rtc>90)?70:year_Rtc;
 8009774:	4b65      	ldr	r3, [pc, #404]	; (800990c <_ZN14OfflineStorage3runEv+0x26c>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b5a      	cmp	r3, #90	; 0x5a
 800977a:	d802      	bhi.n	8009782 <_ZN14OfflineStorage3runEv+0xe2>
 800977c:	4b63      	ldr	r3, [pc, #396]	; (800990c <_ZN14OfflineStorage3runEv+0x26c>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	e000      	b.n	8009784 <_ZN14OfflineStorage3runEv+0xe4>
 8009782:	2346      	movs	r3, #70	; 0x46
 8009784:	4a61      	ldr	r2, [pc, #388]	; (800990c <_ZN14OfflineStorage3runEv+0x26c>)
 8009786:	7013      	strb	r3, [r2, #0]
	Manual_RejectionCount = (Manual_RejectionCount >2)?2:Manual_RejectionCount;
 8009788:	4b61      	ldr	r3, [pc, #388]	; (8009910 <_ZN14OfflineStorage3runEv+0x270>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b02      	cmp	r3, #2
 800978e:	bf28      	it	cs
 8009790:	2302      	movcs	r3, #2
 8009792:	b2da      	uxtb	r2, r3
 8009794:	4b5e      	ldr	r3, [pc, #376]	; (8009910 <_ZN14OfflineStorage3runEv+0x270>)
 8009796:	701a      	strb	r2, [r3, #0]
	Production_Zeit =(Production_Zeit>10)?1:Production_Zeit;
 8009798:	4b5e      	ldr	r3, [pc, #376]	; (8009914 <_ZN14OfflineStorage3runEv+0x274>)
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	2b0a      	cmp	r3, #10
 800979e:	d802      	bhi.n	80097a6 <_ZN14OfflineStorage3runEv+0x106>
 80097a0:	4b5c      	ldr	r3, [pc, #368]	; (8009914 <_ZN14OfflineStorage3runEv+0x274>)
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	e000      	b.n	80097a8 <_ZN14OfflineStorage3runEv+0x108>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4a5a      	ldr	r2, [pc, #360]	; (8009914 <_ZN14OfflineStorage3runEv+0x274>)
 80097aa:	8013      	strh	r3, [r2, #0]
	Rejection_Zeit = (Rejection_Zeit>10)?1:Rejection_Zeit;
 80097ac:	4b5a      	ldr	r3, [pc, #360]	; (8009918 <_ZN14OfflineStorage3runEv+0x278>)
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	2b0a      	cmp	r3, #10
 80097b2:	d802      	bhi.n	80097ba <_ZN14OfflineStorage3runEv+0x11a>
 80097b4:	4b58      	ldr	r3, [pc, #352]	; (8009918 <_ZN14OfflineStorage3runEv+0x278>)
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	e000      	b.n	80097bc <_ZN14OfflineStorage3runEv+0x11c>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4a56      	ldr	r2, [pc, #344]	; (8009918 <_ZN14OfflineStorage3runEv+0x278>)
 80097be:	8013      	strh	r3, [r2, #0]
	SectorPos = (SectorPos > 900)?1:SectorPos;
 80097c0:	4b56      	ldr	r3, [pc, #344]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80097c8:	d802      	bhi.n	80097d0 <_ZN14OfflineStorage3runEv+0x130>
 80097ca:	4b54      	ldr	r3, [pc, #336]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	e000      	b.n	80097d2 <_ZN14OfflineStorage3runEv+0x132>
 80097d0:	2301      	movs	r3, #1
 80097d2:	4a52      	ldr	r2, [pc, #328]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 80097d4:	8013      	strh	r3, [r2, #0]
/*high limit check for system data*/
	sprintf(ProductionSet_charFormat,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',CurrentShift,MAC_Gen_Prod_Input1_Production,
 80097d6:	4b43      	ldr	r3, [pc, #268]	; (80098e4 <_ZN14OfflineStorage3runEv+0x244>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	469c      	mov	ip, r3
 80097dc:	4b42      	ldr	r3, [pc, #264]	; (80098e8 <_ZN14OfflineStorage3runEv+0x248>)
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b42      	ldr	r3, [pc, #264]	; (80098ec <_ZN14OfflineStorage3runEv+0x24c>)
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	4619      	mov	r1, r3
 80097e8:	4b41      	ldr	r3, [pc, #260]	; (80098f0 <_ZN14OfflineStorage3runEv+0x250>)
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	4b41      	ldr	r3, [pc, #260]	; (80098f4 <_ZN14OfflineStorage3runEv+0x254>)
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	461c      	mov	r4, r3
 80097f4:	4b40      	ldr	r3, [pc, #256]	; (80098f8 <_ZN14OfflineStorage3runEv+0x258>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	461d      	mov	r5, r3
 80097fa:	4b40      	ldr	r3, [pc, #256]	; (80098fc <_ZN14OfflineStorage3runEv+0x25c>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	461e      	mov	r6, r3
 8009800:	4b3f      	ldr	r3, [pc, #252]	; (8009900 <_ZN14OfflineStorage3runEv+0x260>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	61bb      	str	r3, [r7, #24]
 8009806:	4b3f      	ldr	r3, [pc, #252]	; (8009904 <_ZN14OfflineStorage3runEv+0x264>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	4b3e      	ldr	r3, [pc, #248]	; (8009908 <_ZN14OfflineStorage3runEv+0x268>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	613b      	str	r3, [r7, #16]
 8009812:	4b3e      	ldr	r3, [pc, #248]	; (800990c <_ZN14OfflineStorage3runEv+0x26c>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	4b3d      	ldr	r3, [pc, #244]	; (8009910 <_ZN14OfflineStorage3runEv+0x270>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	60bb      	str	r3, [r7, #8]
 800981e:	4b3f      	ldr	r3, [pc, #252]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	607b      	str	r3, [r7, #4]
 8009824:	2322      	movs	r3, #34	; 0x22
 8009826:	930d      	str	r3, [sp, #52]	; 0x34
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	930c      	str	r3, [sp, #48]	; 0x30
 800982c:	237b      	movs	r3, #123	; 0x7b
 800982e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	930a      	str	r3, [sp, #40]	; 0x28
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	9308      	str	r3, [sp, #32]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	9307      	str	r3, [sp, #28]
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	9306      	str	r3, [sp, #24]
 8009844:	9605      	str	r6, [sp, #20]
 8009846:	9504      	str	r5, [sp, #16]
 8009848:	9403      	str	r4, [sp, #12]
 800984a:	9002      	str	r0, [sp, #8]
 800984c:	9101      	str	r1, [sp, #4]
 800984e:	9200      	str	r2, [sp, #0]
 8009850:	4663      	mov	r3, ip
 8009852:	2222      	movs	r2, #34	; 0x22
 8009854:	4932      	ldr	r1, [pc, #200]	; (8009920 <_ZN14OfflineStorage3runEv+0x280>)
 8009856:	4822      	ldr	r0, [pc, #136]	; (80098e0 <_ZN14OfflineStorage3runEv+0x240>)
 8009858:	f007 faf2 	bl	8010e40 <siprintf>
			MAC_Gen_Rej_Input_Production,Dye_Temperature,Connector_Temperature,hour_t,
			min_t,sec_t,date_Rtc,month_Rtc,year_Rtc,Manual_RejectionCount,123,SectorPos,'"');

	//Fix the size
	NoofData = strlen(ProductionSet_charFormat);
 800985c:	4820      	ldr	r0, [pc, #128]	; (80098e0 <_ZN14OfflineStorage3runEv+0x240>)
 800985e:	f7f6 fcb7 	bl	80001d0 <strlen>
 8009862:	4603      	mov	r3, r0
 8009864:	b29a      	uxth	r2, r3
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	memcpy(ProductionSet_uintFormat,ProductionSet_charFormat,NoofData);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8009872:	461a      	mov	r2, r3
 8009874:	491a      	ldr	r1, [pc, #104]	; (80098e0 <_ZN14OfflineStorage3runEv+0x240>)
 8009876:	482b      	ldr	r0, [pc, #172]	; (8009924 <_ZN14OfflineStorage3runEv+0x284>)
 8009878:	f007 f9dc 	bl	8010c34 <memcpy>

	SectorPos = SectorPos+1;
 800987c:	4b27      	ldr	r3, [pc, #156]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	4b25      	ldr	r3, [pc, #148]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 8009886:	801a      	strh	r2, [r3, #0]

	if((SectorPos % 16)==0)
 8009888:	4b24      	ldr	r3, [pc, #144]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	2b00      	cmp	r3, #0
 8009892:	d160      	bne.n	8009956 <_ZN14OfflineStorage3runEv+0x2b6>
	{
		tempBlockcalc = SectorPos/16;
 8009894:	4b21      	ldr	r3, [pc, #132]	; (800991c <_ZN14OfflineStorage3runEv+0x27c>)
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	091b      	lsrs	r3, r3, #4
 800989a:	b29b      	uxth	r3, r3
 800989c:	b2da      	uxtb	r2, r3
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		BlockStatusOffline[tempBlockcalc-1]	=1;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a1e      	ldr	r2, [pc, #120]	; (8009928 <_ZN14OfflineStorage3runEv+0x288>)
 80098ae:	2101      	movs	r1, #1
 80098b0:	54d1      	strb	r1, [r2, r3]
		updateInBlockFill=1;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		if(tempBlockcalc >= MAXNOOFBLOCK)
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80098c0:	2b1f      	cmp	r3, #31
 80098c2:	d933      	bls.n	800992c <_ZN14OfflineStorage3runEv+0x28c>
		{
			tempBlockcalc=0;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			BlockStatusOffline[tempBlockcalc]	=2;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80098d2:	461a      	mov	r2, r3
 80098d4:	4b14      	ldr	r3, [pc, #80]	; (8009928 <_ZN14OfflineStorage3runEv+0x288>)
 80098d6:	2102      	movs	r1, #2
 80098d8:	5499      	strb	r1, [r3, r2]
 80098da:	e02e      	b.n	800993a <_ZN14OfflineStorage3runEv+0x29a>
 80098dc:	20000774 	.word	0x20000774
 80098e0:	20000984 	.word	0x20000984
 80098e4:	20000a23 	.word	0x20000a23
 80098e8:	20000768 	.word	0x20000768
 80098ec:	2000076c 	.word	0x2000076c
 80098f0:	200001c0 	.word	0x200001c0
 80098f4:	200001c2 	.word	0x200001c2
 80098f8:	20000a1c 	.word	0x20000a1c
 80098fc:	20000a1d 	.word	0x20000a1d
 8009900:	20000a1e 	.word	0x20000a1e
 8009904:	20000a20 	.word	0x20000a20
 8009908:	20000a21 	.word	0x20000a21
 800990c:	20000a22 	.word	0x20000a22
 8009910:	20000770 	.word	0x20000770
 8009914:	2000076a 	.word	0x2000076a
 8009918:	2000076e 	.word	0x2000076e
 800991c:	200009ee 	.word	0x200009ee
 8009920:	08011794 	.word	0x08011794
 8009924:	20000920 	.word	0x20000920
 8009928:	200009f0 	.word	0x200009f0
		}
		else
		{
			BlockStatusOffline[tempBlockcalc]	=2;
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009932:	461a      	mov	r2, r3
 8009934:	4b73      	ldr	r3, [pc, #460]	; (8009b04 <_ZN14OfflineStorage3runEv+0x464>)
 8009936:	2102      	movs	r1, #2
 8009938:	5499      	strb	r1, [r3, r2]
		}
		if(SectorPos >= 512){SectorPos=0;}
 800993a:	4b73      	ldr	r3, [pc, #460]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009942:	d302      	bcc.n	800994a <_ZN14OfflineStorage3runEv+0x2aa>
 8009944:	4b70      	ldr	r3, [pc, #448]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 8009946:	2200      	movs	r2, #0
 8009948:	801a      	strh	r2, [r3, #0]
		SectorPos = SectorPos+1;
 800994a:	4b6f      	ldr	r3, [pc, #444]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	3301      	adds	r3, #1
 8009950:	b29a      	uxth	r2, r3
 8009952:	4b6d      	ldr	r3, [pc, #436]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 8009954:	801a      	strh	r2, [r3, #0]
	}


	W25qxx_EraseSector(SectorPos-1);
 8009956:	4b6c      	ldr	r3, [pc, #432]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	3b01      	subs	r3, #1
 800995c:	4618      	mov	r0, r3
 800995e:	f7f9 ff13 	bl	8003788 <W25qxx_EraseSector>
	W25qxx_WriteSector(ProductionSet_uintFormat,(SectorPos-1),0,NoofData);
 8009962:	4b69      	ldr	r3, [pc, #420]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	3b01      	subs	r3, #1
 8009968:	4619      	mov	r1, r3
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8009970:	2200      	movs	r2, #0
 8009972:	4866      	ldr	r0, [pc, #408]	; (8009b0c <_ZN14OfflineStorage3runEv+0x46c>)
 8009974:	f7fa f8e4 	bl	8003b40 <W25qxx_WriteSector>
	MAC_Gen_Prod_Input1_Production=0;
 8009978:	4b65      	ldr	r3, [pc, #404]	; (8009b10 <_ZN14OfflineStorage3runEv+0x470>)
 800997a:	2200      	movs	r2, #0
 800997c:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production=0;
 800997e:	4b65      	ldr	r3, [pc, #404]	; (8009b14 <_ZN14OfflineStorage3runEv+0x474>)
 8009980:	2200      	movs	r2, #0
 8009982:	801a      	strh	r2, [r3, #0]

	MAC_Gen_Prod_Input1_Production_K1 = MAC_Gen_Prod_Input1_Production;
 8009984:	4b62      	ldr	r3, [pc, #392]	; (8009b10 <_ZN14OfflineStorage3runEv+0x470>)
 8009986:	881a      	ldrh	r2, [r3, #0]
 8009988:	4b63      	ldr	r3, [pc, #396]	; (8009b18 <_ZN14OfflineStorage3runEv+0x478>)
 800998a:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1   = MAC_Gen_Rej_Input_Production;
 800998c:	4b61      	ldr	r3, [pc, #388]	; (8009b14 <_ZN14OfflineStorage3runEv+0x474>)
 800998e:	881a      	ldrh	r2, [r3, #0]
 8009990:	4b62      	ldr	r3, [pc, #392]	; (8009b1c <_ZN14OfflineStorage3runEv+0x47c>)
 8009992:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount_K1          = Manual_RejectionCount;
 8009994:	4b62      	ldr	r3, [pc, #392]	; (8009b20 <_ZN14OfflineStorage3runEv+0x480>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	b29a      	uxth	r2, r3
 800999a:	4b62      	ldr	r3, [pc, #392]	; (8009b24 <_ZN14OfflineStorage3runEv+0x484>)
 800999c:	801a      	strh	r2, [r3, #0]
	IsCurrentShiftUpdated=0;
 800999e:	4b62      	ldr	r3, [pc, #392]	; (8009b28 <_ZN14OfflineStorage3runEv+0x488>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]

	FlashMemProductiondata[0] = (uint8_t)MAC_Gen_Prod_Input1_Production&0x00ff;
 80099a4:	4b5a      	ldr	r3, [pc, #360]	; (8009b10 <_ZN14OfflineStorage3runEv+0x470>)
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	711a      	strb	r2, [r3, #4]
	FlashMemProductiondata[1] = (uint8_t)(MAC_Gen_Prod_Input1_Production>>8)&0x00ff;
 80099ae:	4b58      	ldr	r3, [pc, #352]	; (8009b10 <_ZN14OfflineStorage3runEv+0x470>)
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	0a1b      	lsrs	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	715a      	strb	r2, [r3, #5]
	FlashMemProductiondata[2] = (uint8_t)MAC_Gen_Prod_Input1_Production_K1&0x00ff;
 80099bc:	4b56      	ldr	r3, [pc, #344]	; (8009b18 <_ZN14OfflineStorage3runEv+0x478>)
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	719a      	strb	r2, [r3, #6]
	FlashMemProductiondata[3] = (uint8_t)(MAC_Gen_Prod_Input1_Production_K1>>8)&0x00ff;
 80099c6:	4b54      	ldr	r3, [pc, #336]	; (8009b18 <_ZN14OfflineStorage3runEv+0x478>)
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	71da      	strb	r2, [r3, #7]
	FlashMemProductiondata[4] = (uint8_t)MAC_Gen_Rej_Input_Production&0x00ff;
 80099d4:	4b4f      	ldr	r3, [pc, #316]	; (8009b14 <_ZN14OfflineStorage3runEv+0x474>)
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	721a      	strb	r2, [r3, #8]
	FlashMemProductiondata[5] = (uint8_t)(MAC_Gen_Rej_Input_Production>>8)&0x00ff;
 80099de:	4b4d      	ldr	r3, [pc, #308]	; (8009b14 <_ZN14OfflineStorage3runEv+0x474>)
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	725a      	strb	r2, [r3, #9]
	FlashMemProductiondata[6] = (uint8_t)MAC_Gen_Rej_Input_Production_K1&0x00ff;
 80099ec:	4b4b      	ldr	r3, [pc, #300]	; (8009b1c <_ZN14OfflineStorage3runEv+0x47c>)
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	729a      	strb	r2, [r3, #10]
	FlashMemProductiondata[7] = (uint8_t)(MAC_Gen_Rej_Input_Production_K1>>8)&0x00ff;
 80099f6:	4b49      	ldr	r3, [pc, #292]	; (8009b1c <_ZN14OfflineStorage3runEv+0x47c>)
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	72da      	strb	r2, [r3, #11]
	FlashMemProductiondata[8] = (uint8_t)Production_Zeit&0x00ff;
 8009a04:	4b49      	ldr	r3, [pc, #292]	; (8009b2c <_ZN14OfflineStorage3runEv+0x48c>)
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	731a      	strb	r2, [r3, #12]
	FlashMemProductiondata[9] = (uint8_t)(Production_Zeit>>8)&0x00ff;
 8009a0e:	4b47      	ldr	r3, [pc, #284]	; (8009b2c <_ZN14OfflineStorage3runEv+0x48c>)
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	735a      	strb	r2, [r3, #13]
	FlashMemProductiondata[10] = (uint8_t)Rejection_Zeit&0x00ff;
 8009a1c:	4b44      	ldr	r3, [pc, #272]	; (8009b30 <_ZN14OfflineStorage3runEv+0x490>)
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	739a      	strb	r2, [r3, #14]
	FlashMemProductiondata[11] = (uint8_t)(Rejection_Zeit>>8)&0x00ff;
 8009a26:	4b42      	ldr	r3, [pc, #264]	; (8009b30 <_ZN14OfflineStorage3runEv+0x490>)
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	0a1b      	lsrs	r3, r3, #8
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	73da      	strb	r2, [r3, #15]
	FlashMemProductiondata[12] = (hour_t);
 8009a34:	4b3f      	ldr	r3, [pc, #252]	; (8009b34 <_ZN14OfflineStorage3runEv+0x494>)
 8009a36:	781a      	ldrb	r2, [r3, #0]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	741a      	strb	r2, [r3, #16]
	FlashMemProductiondata[13] = (min_t);
 8009a3c:	4b3e      	ldr	r3, [pc, #248]	; (8009b38 <_ZN14OfflineStorage3runEv+0x498>)
 8009a3e:	781a      	ldrb	r2, [r3, #0]
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	745a      	strb	r2, [r3, #17]
	FlashMemProductiondata[14] = (sec_t);
 8009a44:	4b3d      	ldr	r3, [pc, #244]	; (8009b3c <_ZN14OfflineStorage3runEv+0x49c>)
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	749a      	strb	r2, [r3, #18]
	FlashMemProductiondata[15] = date_Rtc;
 8009a4c:	4b3c      	ldr	r3, [pc, #240]	; (8009b40 <_ZN14OfflineStorage3runEv+0x4a0>)
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	74da      	strb	r2, [r3, #19]
	FlashMemProductiondata[16] = month_Rtc;
 8009a54:	4b3b      	ldr	r3, [pc, #236]	; (8009b44 <_ZN14OfflineStorage3runEv+0x4a4>)
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	751a      	strb	r2, [r3, #20]
	FlashMemProductiondata[17] = year_Rtc;
 8009a5c:	4b3a      	ldr	r3, [pc, #232]	; (8009b48 <_ZN14OfflineStorage3runEv+0x4a8>)
 8009a5e:	781a      	ldrb	r2, [r3, #0]
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	755a      	strb	r2, [r3, #21]
	FlashMemProductiondata[18] = (uint8_t)SectorPos&0x00ff;
 8009a64:	4b28      	ldr	r3, [pc, #160]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	759a      	strb	r2, [r3, #22]
	FlashMemProductiondata[19] = (uint8_t)(SectorPos>>8)&0x00ff;
 8009a6e:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <_ZN14OfflineStorage3runEv+0x468>)
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	75da      	strb	r2, [r3, #23]
	FlashMemProductiondata[20] = (uint8_t)Manual_RejectionCount&0x00ff;
 8009a7c:	4b28      	ldr	r3, [pc, #160]	; (8009b20 <_ZN14OfflineStorage3runEv+0x480>)
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	761a      	strb	r2, [r3, #24]
	FlashMemProductiondata[21] = (uint8_t)(Manual_RejectionCount>>8)&0x00ff;
 8009a84:	4b26      	ldr	r3, [pc, #152]	; (8009b20 <_ZN14OfflineStorage3runEv+0x480>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	121b      	asrs	r3, r3, #8
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	765a      	strb	r2, [r3, #25]
	FlashMemProductiondata[22] = (uint8_t)Manual_RejectionCount_K1&0x00ff;
 8009a90:	4b24      	ldr	r3, [pc, #144]	; (8009b24 <_ZN14OfflineStorage3runEv+0x484>)
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	769a      	strb	r2, [r3, #26]
	FlashMemProductiondata[23] = (uint8_t)(Manual_RejectionCount_K1>>8)&0x00ff;
 8009a9a:	4b22      	ldr	r3, [pc, #136]	; (8009b24 <_ZN14OfflineStorage3runEv+0x484>)
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	76da      	strb	r2, [r3, #27]
	FlashMemProductiondata[24] = CurrentShift;
 8009aa8:	4b28      	ldr	r3, [pc, #160]	; (8009b4c <_ZN14OfflineStorage3runEv+0x4ac>)
 8009aaa:	781a      	ldrb	r2, [r3, #0]
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	771a      	strb	r2, [r3, #28]
	FlashMemProductiondata[25] = CurrentShift_K1;
 8009ab0:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <_ZN14OfflineStorage3runEv+0x4b0>)
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	775a      	strb	r2, [r3, #29]
	W25qxx_EraseSector(600);
 8009ab8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009abc:	f7f9 fe64 	bl	8003788 <W25qxx_EraseSector>
	W25qxx_WriteSector(FlashMemProductiondata,600,0,26);
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	1d18      	adds	r0, r3, #4
 8009ac4:	231a      	movs	r3, #26
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009acc:	f7fa f838 	bl	8003b40 <W25qxx_WriteSector>

	if(updateInBlockFill)
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d010      	beq.n	8009afc <_ZN14OfflineStorage3runEv+0x45c>
	{
		updateInBlockFill=0;
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		W25qxx_EraseSector(601);
 8009ae2:	f240 2059 	movw	r0, #601	; 0x259
 8009ae6:	f7f9 fe4f 	bl	8003788 <W25qxx_EraseSector>
		W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 8009aea:	2328      	movs	r3, #40	; 0x28
 8009aec:	2200      	movs	r2, #0
 8009aee:	f240 2159 	movw	r1, #601	; 0x259
 8009af2:	4804      	ldr	r0, [pc, #16]	; (8009b04 <_ZN14OfflineStorage3runEv+0x464>)
 8009af4:	f7fa f824 	bl	8003b40 <W25qxx_WriteSector>
 8009af8:	e000      	b.n	8009afc <_ZN14OfflineStorage3runEv+0x45c>
	if(UpdateStorage==0){return;}
 8009afa:	bf00      	nop
	}

}
 8009afc:	3724      	adds	r7, #36	; 0x24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	200009f0 	.word	0x200009f0
 8009b08:	200009ee 	.word	0x200009ee
 8009b0c:	20000920 	.word	0x20000920
 8009b10:	20000768 	.word	0x20000768
 8009b14:	2000076c 	.word	0x2000076c
 8009b18:	200009e8 	.word	0x200009e8
 8009b1c:	200009ea 	.word	0x200009ea
 8009b20:	20000770 	.word	0x20000770
 8009b24:	200009ec 	.word	0x200009ec
 8009b28:	20000773 	.word	0x20000773
 8009b2c:	2000076a 	.word	0x2000076a
 8009b30:	2000076e 	.word	0x2000076e
 8009b34:	20000a1c 	.word	0x20000a1c
 8009b38:	20000a1d 	.word	0x20000a1d
 8009b3c:	20000a1e 	.word	0x20000a1e
 8009b40:	20000a20 	.word	0x20000a20
 8009b44:	20000a21 	.word	0x20000a21
 8009b48:	20000a22 	.word	0x20000a22
 8009b4c:	20000a23 	.word	0x20000a23
 8009b50:	20000772 	.word	0x20000772

08009b54 <_ZN14OfflineStorage19specialMacDataWriteEv>:
void OfflineStorage::specialMacDataWrite()
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	if(productionInc != productionIncK1){
 8009b5c:	4b13      	ldr	r3, [pc, #76]	; (8009bac <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009b5e:	881a      	ldrh	r2, [r3, #0]
 8009b60:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <_ZN14OfflineStorage19specialMacDataWriteEv+0x5c>)
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d01c      	beq.n	8009ba2 <_ZN14OfflineStorage19specialMacDataWriteEv+0x4e>
	specialMacData[0] = (uint8_t)productionInc&0x00ff;
 8009b68:	4b10      	ldr	r3, [pc, #64]	; (8009bac <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	769a      	strb	r2, [r3, #26]
	specialMacData[1] = (uint8_t)(productionInc>>8)&0x00ff;
 8009b72:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	76da      	strb	r2, [r3, #27]

	productionIncK1 = productionInc;
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009b82:	881a      	ldrh	r2, [r3, #0]
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <_ZN14OfflineStorage19specialMacDataWriteEv+0x5c>)
 8009b86:	801a      	strh	r2, [r3, #0]
	W25qxx_EraseSector(602);
 8009b88:	f240 205a 	movw	r0, #602	; 0x25a
 8009b8c:	f7f9 fdfc 	bl	8003788 <W25qxx_EraseSector>
	W25qxx_WriteSector(specialMacData,602,0,2);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f103 001a 	add.w	r0, r3, #26
 8009b96:	2302      	movs	r3, #2
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f240 215a 	movw	r1, #602	; 0x25a
 8009b9e:	f7f9 ffcf 	bl	8003b40 <W25qxx_WriteSector>
	}
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000776 	.word	0x20000776
 8009bb0:	20000a18 	.word	0x20000a18

08009bb4 <_ZN14OfflineStorage15dwinRxDataStoreEv>:
void OfflineStorage::dwinRxDataStore()
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	if(updateDwindata==0){return;}
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x74>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02c      	beq.n	8009c1e <_ZN14OfflineStorage15dwinRxDataStoreEv+0x6a>
	updateDwindata=0;
 8009bc4:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x74>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]
	dwinData[0] = (uint8_t)machineId&0x00ff;
 8009bca:	4b18      	ldr	r3, [pc, #96]	; (8009c2c <_ZN14OfflineStorage15dwinRxDataStoreEv+0x78>)
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	dwinData[1] = (uint8_t)(machineId>>8)&0x00ff;
 8009bd6:	4b15      	ldr	r3, [pc, #84]	; (8009c2c <_ZN14OfflineStorage15dwinRxDataStoreEv+0x78>)
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	0a1b      	lsrs	r3, r3, #8
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	dwinData[2] = (uint8_t)portNumber&0x00ff;
 8009be6:	4b12      	ldr	r3, [pc, #72]	; (8009c30 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x7c>)
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	dwinData[3] = (uint8_t)(portNumber>>8)&0x00ff;
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x7c>)
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	b2da      	uxtb	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	W25qxx_EraseSector(604);
 8009c02:	f44f 7017 	mov.w	r0, #604	; 0x25c
 8009c06:	f7f9 fdbf 	bl	8003788 <W25qxx_EraseSector>
	W25qxx_WriteSector(dwinData,604,0,4);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8009c10:	2304      	movs	r3, #4
 8009c12:	2200      	movs	r2, #0
 8009c14:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8009c18:	f7f9 ff92 	bl	8003b40 <W25qxx_WriteSector>
 8009c1c:	e000      	b.n	8009c20 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x6c>
	if(updateDwindata==0){return;}
 8009c1e:	bf00      	nop
}
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000812 	.word	0x20000812
 8009c2c:	2000078a 	.word	0x2000078a
 8009c30:	2000078e 	.word	0x2000078e

08009c34 <_ZN14OfflineStorage18dwinCloudDataStoreEv>:
void OfflineStorage::dwinCloudDataStore()
{
 8009c34:	b5b0      	push	{r4, r5, r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if(!updateCloudConn){return;}
 8009c3c:	4b4e      	ldr	r3, [pc, #312]	; (8009d78 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x144>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8094 	beq.w	8009d6e <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x13a>
	updateCloudConn=0;
 8009c46:	4b4c      	ldr	r3, [pc, #304]	; (8009d78 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x144>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
	lengthOfServerAdd =(lengthOfServerAdd >20)?20:lengthOfServerAdd;
 8009c4c:	4b4b      	ldr	r3, [pc, #300]	; (8009d7c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x148>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b14      	cmp	r3, #20
 8009c52:	bf28      	it	cs
 8009c54:	2314      	movcs	r3, #20
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b48      	ldr	r3, [pc, #288]	; (8009d7c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x148>)
 8009c5a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<20;i++){
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b13      	cmp	r3, #19
 8009c64:	d80c      	bhi.n	8009c80 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x4c>
		couldData[i]=serverAddress[i];
 8009c66:	7bfa      	ldrb	r2, [r7, #15]
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	4945      	ldr	r1, [pc, #276]	; (8009d80 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x14c>)
 8009c6c:	5c89      	ldrb	r1, [r1, r2]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	460a      	mov	r2, r1
 8009c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for(i=0;i<20;i++){
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	73fb      	strb	r3, [r7, #15]
 8009c7e:	e7ef      	b.n	8009c60 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x2c>
	}
	lengthOfUserName =(lengthOfUserName >20)?20:lengthOfUserName;
 8009c80:	4b40      	ldr	r3, [pc, #256]	; (8009d84 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x150>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b14      	cmp	r3, #20
 8009c86:	bf28      	it	cs
 8009c88:	2314      	movcs	r3, #20
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	4b3d      	ldr	r3, [pc, #244]	; (8009d84 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x150>)
 8009c8e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<20;i++){
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	2b13      	cmp	r3, #19
 8009c98:	d80d      	bhi.n	8009cb6 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x82>
		couldData[i+20]=userNameWifi[i];
 8009c9a:	7bfa      	ldrb	r2, [r7, #15]
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	3314      	adds	r3, #20
 8009ca0:	4939      	ldr	r1, [pc, #228]	; (8009d88 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x154>)
 8009ca2:	5c89      	ldrb	r1, [r1, r2]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	460a      	mov	r2, r1
 8009caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for(i=0;i<20;i++){
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
 8009cb4:	e7ee      	b.n	8009c94 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x60>
	}
	lengthOfPassword =(lengthOfPassword >20)?20:lengthOfPassword;
 8009cb6:	4b35      	ldr	r3, [pc, #212]	; (8009d8c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x158>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b14      	cmp	r3, #20
 8009cbc:	bf28      	it	cs
 8009cbe:	2314      	movcs	r3, #20
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	4b32      	ldr	r3, [pc, #200]	; (8009d8c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x158>)
 8009cc4:	701a      	strb	r2, [r3, #0]
	for(i=0;i<20;i++){
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	2b13      	cmp	r3, #19
 8009cce:	d80d      	bhi.n	8009cec <_ZN14OfflineStorage18dwinCloudDataStoreEv+0xb8>
		couldData[i+40]=passwordWifi[i];
 8009cd0:	7bfa      	ldrb	r2, [r7, #15]
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	3328      	adds	r3, #40	; 0x28
 8009cd6:	492e      	ldr	r1, [pc, #184]	; (8009d90 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x15c>)
 8009cd8:	5c89      	ldrb	r1, [r1, r2]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	4413      	add	r3, r2
 8009cde:	460a      	mov	r2, r1
 8009ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for(i=0;i<20;i++){
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	73fb      	strb	r3, [r7, #15]
 8009cea:	e7ee      	b.n	8009cca <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x96>
	}
	couldData[60] = lengthOfServerAdd;
 8009cec:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x148>)
 8009cee:	781a      	ldrb	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	couldData[61] = lengthOfUserName;
 8009cf6:	4b23      	ldr	r3, [pc, #140]	; (8009d84 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x150>)
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	couldData[62] = lengthOfPassword;
 8009d00:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x158>)
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

	memcpy(serverAddressK1,serverAddress,20);
 8009d0a:	4b22      	ldr	r3, [pc, #136]	; (8009d94 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x160>)
 8009d0c:	4a1c      	ldr	r2, [pc, #112]	; (8009d80 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x14c>)
 8009d0e:	6811      	ldr	r1, [r2, #0]
 8009d10:	6855      	ldr	r5, [r2, #4]
 8009d12:	6894      	ldr	r4, [r2, #8]
 8009d14:	68d0      	ldr	r0, [r2, #12]
 8009d16:	6019      	str	r1, [r3, #0]
 8009d18:	605d      	str	r5, [r3, #4]
 8009d1a:	609c      	str	r4, [r3, #8]
 8009d1c:	60d8      	str	r0, [r3, #12]
 8009d1e:	6911      	ldr	r1, [r2, #16]
 8009d20:	6119      	str	r1, [r3, #16]
	memcpy(userNameWifiK1,userNameWifi,20);
 8009d22:	4b1d      	ldr	r3, [pc, #116]	; (8009d98 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x164>)
 8009d24:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x154>)
 8009d26:	6811      	ldr	r1, [r2, #0]
 8009d28:	6855      	ldr	r5, [r2, #4]
 8009d2a:	6894      	ldr	r4, [r2, #8]
 8009d2c:	68d0      	ldr	r0, [r2, #12]
 8009d2e:	6019      	str	r1, [r3, #0]
 8009d30:	605d      	str	r5, [r3, #4]
 8009d32:	609c      	str	r4, [r3, #8]
 8009d34:	60d8      	str	r0, [r3, #12]
 8009d36:	6911      	ldr	r1, [r2, #16]
 8009d38:	6119      	str	r1, [r3, #16]
	memcpy(passwordWifiK1,passwordWifi,20);
 8009d3a:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x168>)
 8009d3c:	4a14      	ldr	r2, [pc, #80]	; (8009d90 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x15c>)
 8009d3e:	6811      	ldr	r1, [r2, #0]
 8009d40:	6855      	ldr	r5, [r2, #4]
 8009d42:	6894      	ldr	r4, [r2, #8]
 8009d44:	68d0      	ldr	r0, [r2, #12]
 8009d46:	6019      	str	r1, [r3, #0]
 8009d48:	605d      	str	r5, [r3, #4]
 8009d4a:	609c      	str	r4, [r3, #8]
 8009d4c:	60d8      	str	r0, [r3, #12]
 8009d4e:	6911      	ldr	r1, [r2, #16]
 8009d50:	6119      	str	r1, [r3, #16]

	W25qxx_EraseSector(605);
 8009d52:	f240 205d 	movw	r0, #605	; 0x25d
 8009d56:	f7f9 fd17 	bl	8003788 <W25qxx_EraseSector>
	W25qxx_WriteSector(couldData,605,0,63);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8009d60:	233f      	movs	r3, #63	; 0x3f
 8009d62:	2200      	movs	r2, #0
 8009d64:	f240 215d 	movw	r1, #605	; 0x25d
 8009d68:	f7f9 feea 	bl	8003b40 <W25qxx_WriteSector>
 8009d6c:	e000      	b.n	8009d70 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x13c>
	if(!updateCloudConn){return;}
 8009d6e:	bf00      	nop

}
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bdb0      	pop	{r4, r5, r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000818 	.word	0x20000818
 8009d7c:	20000814 	.word	0x20000814
 8009d80:	20000794 	.word	0x20000794
 8009d84:	20000815 	.word	0x20000815
 8009d88:	200007bc 	.word	0x200007bc
 8009d8c:	20000816 	.word	0x20000816
 8009d90:	200007e4 	.word	0x200007e4
 8009d94:	200007a8 	.word	0x200007a8
 8009d98:	200007d0 	.word	0x200007d0
 8009d9c:	200007f8 	.word	0x200007f8

08009da0 <_ZN14OfflineStorage16processDataWriteEv>:
void OfflineStorage::processDataWrite()
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	if((updateMemProcCtrl==1)||(triggerStartForReq != triggerStartForReqK1)||
 8009da8:	4b2f      	ldr	r3, [pc, #188]	; (8009e68 <_ZN14OfflineStorage16processDataWriteEv+0xc8>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d00b      	beq.n	8009dc8 <_ZN14OfflineStorage16processDataWriteEv+0x28>
 8009db0:	4b2e      	ldr	r3, [pc, #184]	; (8009e6c <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	4b2e      	ldr	r3, [pc, #184]	; (8009e70 <_ZN14OfflineStorage16processDataWriteEv+0xd0>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d105      	bne.n	8009dc8 <_ZN14OfflineStorage16processDataWriteEv+0x28>
		(startStopStatus != startStopStatusK1)){
 8009dbc:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	4b2d      	ldr	r3, [pc, #180]	; (8009e78 <_ZN14OfflineStorage16processDataWriteEv+0xd8>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
	if((updateMemProcCtrl==1)||(triggerStartForReq != triggerStartForReqK1)||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d04b      	beq.n	8009e60 <_ZN14OfflineStorage16processDataWriteEv+0xc0>
	updateMemProcCtrl=0;
 8009dc8:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <_ZN14OfflineStorage16processDataWriteEv+0xc8>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
	processData[0] = (uint8_t)requirementId&0x00ff;
 8009dce:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <_ZN14OfflineStorage16processDataWriteEv+0xdc>)
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	processData[1] = (uint8_t)(requirementId>>8)&0x00ff;
 8009dda:	4b28      	ldr	r3, [pc, #160]	; (8009e7c <_ZN14OfflineStorage16processDataWriteEv+0xdc>)
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	0a1b      	lsrs	r3, r3, #8
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	processData[2] = (uint8_t)requirementIdK1&0x00ff;
 8009dea:	4b25      	ldr	r3, [pc, #148]	; (8009e80 <_ZN14OfflineStorage16processDataWriteEv+0xe0>)
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	processData[3] = (uint8_t)(requirementIdK1>>8)&0x00ff;
 8009df6:	4b22      	ldr	r3, [pc, #136]	; (8009e80 <_ZN14OfflineStorage16processDataWriteEv+0xe0>)
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	processData[4] = (uint8_t)productionTarget&0x00ff;
 8009e06:	4b1f      	ldr	r3, [pc, #124]	; (8009e84 <_ZN14OfflineStorage16processDataWriteEv+0xe4>)
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	processData[5] = (uint8_t)(productionTarget>>8)&0x00ff;
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <_ZN14OfflineStorage16processDataWriteEv+0xe4>)
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	processData[6] = triggerStartForReq;
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009e24:	781a      	ldrb	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	processData[7] = startStopStatus;
 8009e2c:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	triggerStartForReqK1= triggerStartForReq;
 8009e36:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009e38:	781a      	ldrb	r2, [r3, #0]
 8009e3a:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <_ZN14OfflineStorage16processDataWriteEv+0xd0>)
 8009e3c:	701a      	strb	r2, [r3, #0]
	startStopStatusK1 = startStopStatus;
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009e40:	781a      	ldrb	r2, [r3, #0]
 8009e42:	4b0d      	ldr	r3, [pc, #52]	; (8009e78 <_ZN14OfflineStorage16processDataWriteEv+0xd8>)
 8009e44:	701a      	strb	r2, [r3, #0]

	W25qxx_EraseSector(603);
 8009e46:	f240 205b 	movw	r0, #603	; 0x25b
 8009e4a:	f7f9 fc9d 	bl	8003788 <W25qxx_EraseSector>
	W25qxx_WriteSector(processData,603,0,8);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009e54:	2308      	movs	r3, #8
 8009e56:	2200      	movs	r2, #0
 8009e58:	f240 215b 	movw	r1, #603	; 0x25b
 8009e5c:	f7f9 fe70 	bl	8003b40 <W25qxx_WriteSector>
	}
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20000775 	.word	0x20000775
 8009e6c:	2000077c 	.word	0x2000077c
 8009e70:	20000a1a 	.word	0x20000a1a
 8009e74:	2000010f 	.word	0x2000010f
 8009e78:	20000a1b 	.word	0x20000a1b
 8009e7c:	2000010a 	.word	0x2000010a
 8009e80:	20000778 	.word	0x20000778
 8009e84:	2000077a 	.word	0x2000077a

08009e88 <_ZN14OfflineStorage17dwinCloudDataReadEv>:

void OfflineStorage::dwinCloudDataRead()
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	W25qxx_ReadSector(couldData,605,0,63);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8009e96:	233f      	movs	r3, #63	; 0x3f
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f240 215d 	movw	r1, #605	; 0x25d
 8009e9e:	f7f9 ff2f 	bl	8003d00 <W25qxx_ReadSector>
	for(i=0;i<20;i++){
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	2b13      	cmp	r3, #19
 8009eaa:	d80b      	bhi.n	8009ec4 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x3c>
	serverAddress[i] = couldData[i];
 8009eac:	7bfa      	ldrb	r2, [r7, #15]
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 8009eb8:	4a1f      	ldr	r2, [pc, #124]	; (8009f38 <_ZN14OfflineStorage17dwinCloudDataReadEv+0xb0>)
 8009eba:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<20;i++){
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	e7f0      	b.n	8009ea6 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x1e>
	}
	for(i=0;i<20;i++){
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73fb      	strb	r3, [r7, #15]
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	2b13      	cmp	r3, #19
 8009ecc:	d80d      	bhi.n	8009eea <_ZN14OfflineStorage17dwinCloudDataReadEv+0x62>
	userNameWifi[i] = couldData[i+20];
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	f103 0214 	add.w	r2, r3, #20
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	440a      	add	r2, r1
 8009eda:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 8009ede:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <_ZN14OfflineStorage17dwinCloudDataReadEv+0xb4>)
 8009ee0:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<20;i++){
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	73fb      	strb	r3, [r7, #15]
 8009ee8:	e7ee      	b.n	8009ec8 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x40>
	}
	for(i=0;i<20;i++){
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	2b13      	cmp	r3, #19
 8009ef2:	d80d      	bhi.n	8009f10 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x88>
	passwordWifi[i] = couldData[i+40];
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	440a      	add	r2, r1
 8009f00:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 8009f04:	4a0e      	ldr	r2, [pc, #56]	; (8009f40 <_ZN14OfflineStorage17dwinCloudDataReadEv+0xb8>)
 8009f06:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<20;i++){
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	73fb      	strb	r3, [r7, #15]
 8009f0e:	e7ee      	b.n	8009eee <_ZN14OfflineStorage17dwinCloudDataReadEv+0x66>
	}
	lengthOfServerAdd = couldData[60];
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8009f16:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <_ZN14OfflineStorage17dwinCloudDataReadEv+0xbc>)
 8009f18:	701a      	strb	r2, [r3, #0]
	lengthOfUserName  =	couldData[61];
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <_ZN14OfflineStorage17dwinCloudDataReadEv+0xc0>)
 8009f22:	701a      	strb	r2, [r3, #0]
	lengthOfPassword = couldData[62];
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <_ZN14OfflineStorage17dwinCloudDataReadEv+0xc4>)
 8009f2c:	701a      	strb	r2, [r3, #0]

}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000794 	.word	0x20000794
 8009f3c:	200007bc 	.word	0x200007bc
 8009f40:	200007e4 	.word	0x200007e4
 8009f44:	20000814 	.word	0x20000814
 8009f48:	20000815 	.word	0x20000815
 8009f4c:	20000816 	.word	0x20000816

08009f50 <_ZN14OfflineStorage18specialMacDataReadEv>:

void OfflineStorage::specialMacDataRead()
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(specialMacData,602,0,2);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f103 001a 	add.w	r0, r3, #26
 8009f5e:	2302      	movs	r3, #2
 8009f60:	2200      	movs	r2, #0
 8009f62:	f240 215a 	movw	r1, #602	; 0x25a
 8009f66:	f7f9 fecb 	bl	8003d00 <W25qxx_ReadSector>
	productionInc = (specialMacData[1]<<8|specialMacData[0]);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	7edb      	ldrb	r3, [r3, #27]
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	b21a      	sxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	7e9b      	ldrb	r3, [r3, #26]
 8009f76:	b21b      	sxth	r3, r3
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	b21b      	sxth	r3, r3
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <_ZN14OfflineStorage18specialMacDataReadEv+0x44>)
 8009f80:	801a      	strh	r2, [r3, #0]
	productionIncK1 = productionInc;
 8009f82:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <_ZN14OfflineStorage18specialMacDataReadEv+0x44>)
 8009f84:	881a      	ldrh	r2, [r3, #0]
 8009f86:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <_ZN14OfflineStorage18specialMacDataReadEv+0x48>)
 8009f88:	801a      	strh	r2, [r3, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20000776 	.word	0x20000776
 8009f98:	20000a18 	.word	0x20000a18

08009f9c <_ZN14OfflineStorage14dwinRxDataReadEv>:

void OfflineStorage::dwinRxDataRead()
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(specialMacData,604,0,4);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f103 001a 	add.w	r0, r3, #26
 8009faa:	2304      	movs	r3, #4
 8009fac:	2200      	movs	r2, #0
 8009fae:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8009fb2:	f7f9 fea5 	bl	8003d00 <W25qxx_ReadSector>
	machineId = (specialMacData[1]<<8|specialMacData[0]);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	7edb      	ldrb	r3, [r3, #27]
 8009fba:	021b      	lsls	r3, r3, #8
 8009fbc:	b21a      	sxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7e9b      	ldrb	r3, [r3, #26]
 8009fc2:	b21b      	sxth	r3, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	b21b      	sxth	r3, r3
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <_ZN14OfflineStorage14dwinRxDataReadEv+0x64>)
 8009fcc:	801a      	strh	r2, [r3, #0]
	portNumber = (specialMacData[3]<<8|specialMacData[2]);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	7f5b      	ldrb	r3, [r3, #29]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	b21a      	sxth	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7f1b      	ldrb	r3, [r3, #28]
 8009fda:	b21b      	sxth	r3, r3
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	b21b      	sxth	r3, r3
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	4b08      	ldr	r3, [pc, #32]	; (800a004 <_ZN14OfflineStorage14dwinRxDataReadEv+0x68>)
 8009fe4:	801a      	strh	r2, [r3, #0]
	machineIdK1 = machineId;
 8009fe6:	4b06      	ldr	r3, [pc, #24]	; (800a000 <_ZN14OfflineStorage14dwinRxDataReadEv+0x64>)
 8009fe8:	881a      	ldrh	r2, [r3, #0]
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <_ZN14OfflineStorage14dwinRxDataReadEv+0x6c>)
 8009fec:	801a      	strh	r2, [r3, #0]
	portNumberK1 = portNumber;
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <_ZN14OfflineStorage14dwinRxDataReadEv+0x68>)
 8009ff0:	881a      	ldrh	r2, [r3, #0]
 8009ff2:	4b06      	ldr	r3, [pc, #24]	; (800a00c <_ZN14OfflineStorage14dwinRxDataReadEv+0x70>)
 8009ff4:	801a      	strh	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	2000078a 	.word	0x2000078a
 800a004:	2000078e 	.word	0x2000078e
 800a008:	2000078c 	.word	0x2000078c
 800a00c:	20000790 	.word	0x20000790

0800a010 <_ZN14OfflineStorage15processDataReadEv>:

void OfflineStorage::processDataRead()
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(processData,603,0,8);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a01e:	2308      	movs	r3, #8
 800a020:	2200      	movs	r2, #0
 800a022:	f240 215b 	movw	r1, #603	; 0x25b
 800a026:	f7f9 fe6b 	bl	8003d00 <W25qxx_ReadSector>
	requirementId = (processData[1]<<8|processData[0]);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	b21a      	sxth	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a03a:	b21b      	sxth	r3, r3
 800a03c:	4313      	orrs	r3, r2
 800a03e:	b21b      	sxth	r3, r3
 800a040:	b29a      	uxth	r2, r3
 800a042:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <_ZN14OfflineStorage15processDataReadEv+0x9c>)
 800a044:	801a      	strh	r2, [r3, #0]
	requirementIdK1 = (processData[3]<<8|processData[2]);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a04c:	021b      	lsls	r3, r3, #8
 800a04e:	b21a      	sxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a056:	b21b      	sxth	r3, r3
 800a058:	4313      	orrs	r3, r2
 800a05a:	b21b      	sxth	r3, r3
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	4b14      	ldr	r3, [pc, #80]	; (800a0b0 <_ZN14OfflineStorage15processDataReadEv+0xa0>)
 800a060:	801a      	strh	r2, [r3, #0]
	productionTarget = (processData[5]<<8|processData[4]);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	b21a      	sxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a072:	b21b      	sxth	r3, r3
 800a074:	4313      	orrs	r3, r2
 800a076:	b21b      	sxth	r3, r3
 800a078:	b29a      	uxth	r2, r3
 800a07a:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <_ZN14OfflineStorage15processDataReadEv+0xa4>)
 800a07c:	801a      	strh	r2, [r3, #0]
	triggerStartForReq = processData[6];
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800a084:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <_ZN14OfflineStorage15processDataReadEv+0xa8>)
 800a086:	701a      	strb	r2, [r3, #0]
	startStopStatus = processData[7];
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800a08e:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <_ZN14OfflineStorage15processDataReadEv+0xac>)
 800a090:	701a      	strb	r2, [r3, #0]
	triggerStartForReqK1= triggerStartForReq;
 800a092:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <_ZN14OfflineStorage15processDataReadEv+0xa8>)
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <_ZN14OfflineStorage15processDataReadEv+0xb0>)
 800a098:	701a      	strb	r2, [r3, #0]
	startStopStatusK1 = startStopStatus;
 800a09a:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <_ZN14OfflineStorage15processDataReadEv+0xac>)
 800a09c:	781a      	ldrb	r2, [r3, #0]
 800a09e:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <_ZN14OfflineStorage15processDataReadEv+0xb4>)
 800a0a0:	701a      	strb	r2, [r3, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	2000010a 	.word	0x2000010a
 800a0b0:	20000778 	.word	0x20000778
 800a0b4:	2000077a 	.word	0x2000077a
 800a0b8:	2000077c 	.word	0x2000077c
 800a0bc:	2000010f 	.word	0x2000010f
 800a0c0:	20000a1a 	.word	0x20000a1a
 800a0c4:	20000a1b 	.word	0x20000a1b

0800a0c8 <_ZN14OfflineStorage19ReadOfflinedataInitEv>:

void OfflineStorage::ReadOfflinedataInit()
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(FlashMemProductiondata,600,0,26);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	1d18      	adds	r0, r3, #4
 800a0d4:	231a      	movs	r3, #26
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a0dc:	f7f9 fe10 	bl	8003d00 <W25qxx_ReadSector>
	MAC_Gen_Prod_Input1_Production 		= 0;//(FlashMemProductiondata[1]<<8|FlashMemProductiondata[0]);
 800a0e0:	4b39      	ldr	r3, [pc, #228]	; (800a1c8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x100>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production_K1 	= (FlashMemProductiondata[3]<<8|FlashMemProductiondata[2]);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	79db      	ldrb	r3, [r3, #7]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	b21a      	sxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	799b      	ldrb	r3, [r3, #6]
 800a0f2:	b21b      	sxth	r3, r3
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	b21b      	sxth	r3, r3
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	4b34      	ldr	r3, [pc, #208]	; (800a1cc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x104>)
 800a0fc:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production 		= 0;//(FlashMemProductiondata[5]<<8|FlashMemProductiondata[4]);
 800a0fe:	4b34      	ldr	r3, [pc, #208]	; (800a1d0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x108>)
 800a100:	2200      	movs	r2, #0
 800a102:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1 	= (FlashMemProductiondata[7]<<8|FlashMemProductiondata[6]);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7adb      	ldrb	r3, [r3, #11]
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	b21a      	sxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7a9b      	ldrb	r3, [r3, #10]
 800a110:	b21b      	sxth	r3, r3
 800a112:	4313      	orrs	r3, r2
 800a114:	b21b      	sxth	r3, r3
 800a116:	b29a      	uxth	r2, r3
 800a118:	4b2e      	ldr	r3, [pc, #184]	; (800a1d4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x10c>)
 800a11a:	801a      	strh	r2, [r3, #0]
	Production_Zeit 					= (FlashMemProductiondata[9]<<8|FlashMemProductiondata[8]);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	7b5b      	ldrb	r3, [r3, #13]
 800a120:	021b      	lsls	r3, r3, #8
 800a122:	b21a      	sxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7b1b      	ldrb	r3, [r3, #12]
 800a128:	b21b      	sxth	r3, r3
 800a12a:	4313      	orrs	r3, r2
 800a12c:	b21b      	sxth	r3, r3
 800a12e:	b29a      	uxth	r2, r3
 800a130:	4b29      	ldr	r3, [pc, #164]	; (800a1d8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x110>)
 800a132:	801a      	strh	r2, [r3, #0]
	Rejection_Zeit 						= (FlashMemProductiondata[11]<<8|FlashMemProductiondata[10]);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	7bdb      	ldrb	r3, [r3, #15]
 800a138:	021b      	lsls	r3, r3, #8
 800a13a:	b21a      	sxth	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	7b9b      	ldrb	r3, [r3, #14]
 800a140:	b21b      	sxth	r3, r3
 800a142:	4313      	orrs	r3, r2
 800a144:	b21b      	sxth	r3, r3
 800a146:	b29a      	uxth	r2, r3
 800a148:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x114>)
 800a14a:	801a      	strh	r2, [r3, #0]
	hour_t								= FlashMemProductiondata[12];
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	7c1a      	ldrb	r2, [r3, #16]
 800a150:	4b23      	ldr	r3, [pc, #140]	; (800a1e0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x118>)
 800a152:	701a      	strb	r2, [r3, #0]
	min_t								= FlashMemProductiondata[13];
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7c5a      	ldrb	r2, [r3, #17]
 800a158:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x11c>)
 800a15a:	701a      	strb	r2, [r3, #0]
	sec_t								= FlashMemProductiondata[14];
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7c9a      	ldrb	r2, [r3, #18]
 800a160:	4b21      	ldr	r3, [pc, #132]	; (800a1e8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x120>)
 800a162:	701a      	strb	r2, [r3, #0]
	date_Rtc							= FlashMemProductiondata[15];
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7cda      	ldrb	r2, [r3, #19]
 800a168:	4b20      	ldr	r3, [pc, #128]	; (800a1ec <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x124>)
 800a16a:	701a      	strb	r2, [r3, #0]
	month_Rtc							= FlashMemProductiondata[16];
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7d1a      	ldrb	r2, [r3, #20]
 800a170:	4b1f      	ldr	r3, [pc, #124]	; (800a1f0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x128>)
 800a172:	701a      	strb	r2, [r3, #0]
	year_Rtc							= FlashMemProductiondata[17];
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7d5a      	ldrb	r2, [r3, #21]
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x12c>)
 800a17a:	701a      	strb	r2, [r3, #0]
	SectorPos 							= (FlashMemProductiondata[19]<<8|FlashMemProductiondata[18]);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7ddb      	ldrb	r3, [r3, #23]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	b21a      	sxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7d9b      	ldrb	r3, [r3, #22]
 800a188:	b21b      	sxth	r3, r3
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b21b      	sxth	r3, r3
 800a18e:	b29a      	uxth	r2, r3
 800a190:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x130>)
 800a192:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount				= 0;(FlashMemProductiondata[21]<<8|FlashMemProductiondata[20]);
 800a194:	4b19      	ldr	r3, [pc, #100]	; (800a1fc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x134>)
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
	Manual_RejectionCount_K1	        = 0;(FlashMemProductiondata[23]<<8|FlashMemProductiondata[22]);
 800a19a:	4b19      	ldr	r3, [pc, #100]	; (800a200 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x138>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	801a      	strh	r2, [r3, #0]
	CurrentShift						= FlashMemProductiondata[24];
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7f1a      	ldrb	r2, [r3, #28]
 800a1a4:	4b17      	ldr	r3, [pc, #92]	; (800a204 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x13c>)
 800a1a6:	701a      	strb	r2, [r3, #0]
	CurrentShift_K1						= FlashMemProductiondata[25];
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7f5a      	ldrb	r2, [r3, #29]
 800a1ac:	4b16      	ldr	r3, [pc, #88]	; (800a208 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x140>)
 800a1ae:	701a      	strb	r2, [r3, #0]

	W25qxx_ReadSector(BlockStatusOffline,601,0,40);
 800a1b0:	2328      	movs	r3, #40	; 0x28
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f240 2159 	movw	r1, #601	; 0x259
 800a1b8:	4814      	ldr	r0, [pc, #80]	; (800a20c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x144>)
 800a1ba:	f7f9 fda1 	bl	8003d00 <W25qxx_ReadSector>


	//if(SectorPos)

//	W25qxx_EraseBlock(23);
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000768 	.word	0x20000768
 800a1cc:	200009e8 	.word	0x200009e8
 800a1d0:	2000076c 	.word	0x2000076c
 800a1d4:	200009ea 	.word	0x200009ea
 800a1d8:	2000076a 	.word	0x2000076a
 800a1dc:	2000076e 	.word	0x2000076e
 800a1e0:	20000a1c 	.word	0x20000a1c
 800a1e4:	20000a1d 	.word	0x20000a1d
 800a1e8:	20000a1e 	.word	0x20000a1e
 800a1ec:	20000a20 	.word	0x20000a20
 800a1f0:	20000a21 	.word	0x20000a21
 800a1f4:	20000a22 	.word	0x20000a22
 800a1f8:	200009ee 	.word	0x200009ee
 800a1fc:	20000770 	.word	0x20000770
 800a200:	200009ec 	.word	0x200009ec
 800a204:	20000a23 	.word	0x20000a23
 800a208:	20000772 	.word	0x20000772
 800a20c:	200009f0 	.word	0x200009f0

0800a210 <_ZN5SHIFTC1Ev>:

extern uint8_t SW_Hour,SW_Minute;
extern uint8_t Updatetimeinfo;
extern uint8_t SW_Date,SW_Month,SW_Year;

SHIFT::SHIFT() {
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	4a04      	ldr	r2, [pc, #16]	; (800a22c <_ZN5SHIFTC1Ev+0x1c>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	08011aa8 	.word	0x08011aa8

0800a230 <_ZN5SHIFTD1Ev>:

SHIFT::~SHIFT() {
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	4a04      	ldr	r2, [pc, #16]	; (800a24c <_ZN5SHIFTD1Ev+0x1c>)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	08011aa8 	.word	0x08011aa8

0800a250 <_ZN5SHIFTD0Ev>:
SHIFT::~SHIFT() {
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
}
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ffe9 	bl	800a230 <_ZN5SHIFTD1Ev>
 800a25e:	2118      	movs	r1, #24
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f006 fcb0 	bl	8010bc6 <_ZdlPvj>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <_ZN5SHIFT16shiftCalculationEv>:

void SHIFT::shiftCalculation(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	rtc_get_time(&hour_t,&min_t,&sec_t);
 800a278:	4a61      	ldr	r2, [pc, #388]	; (800a400 <_ZN5SHIFT16shiftCalculationEv+0x190>)
 800a27a:	4962      	ldr	r1, [pc, #392]	; (800a404 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 800a27c:	4862      	ldr	r0, [pc, #392]	; (800a408 <_ZN5SHIFT16shiftCalculationEv+0x198>)
 800a27e:	f7f8 ffd3 	bl	8003228 <rtc_get_time>
	rtc_get_date(&Wdate_Rtc,&date_Rtc,&month_Rtc,&year_Rtc);
 800a282:	4b62      	ldr	r3, [pc, #392]	; (800a40c <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 800a284:	4a62      	ldr	r2, [pc, #392]	; (800a410 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 800a286:	4963      	ldr	r1, [pc, #396]	; (800a414 <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 800a288:	4863      	ldr	r0, [pc, #396]	; (800a418 <_ZN5SHIFT16shiftCalculationEv+0x1a8>)
 800a28a:	f7f9 f831 	bl	80032f0 <rtc_get_date>

	if(Updatetimeinfo)
 800a28e:	4b63      	ldr	r3, [pc, #396]	; (800a41c <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d051      	beq.n	800a33a <_ZN5SHIFT16shiftCalculationEv+0xca>
	{
		Updatetimeinfo=0;
 800a296:	4b61      	ldr	r3, [pc, #388]	; (800a41c <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 800a298:	2200      	movs	r2, #0
 800a29a:	701a      	strb	r2, [r3, #0]
		locTimeTotal    =  (((hour_t)*(60))+(min_t));
 800a29c:	4b5a      	ldr	r3, [pc, #360]	; (800a408 <_ZN5SHIFT16shiftCalculationEv+0x198>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	0112      	lsls	r2, r2, #4
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	4b55      	ldr	r3, [pc, #340]	; (800a404 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	4413      	add	r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	829a      	strh	r2, [r3, #20]
		onlineTimeTotal =  (((SW_Hour)*(60))+(SW_Minute));
 800a2ba:	4b59      	ldr	r3, [pc, #356]	; (800a420 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	0112      	lsls	r2, r2, #4
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	4b56      	ldr	r3, [pc, #344]	; (800a424 <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	82da      	strh	r2, [r3, #22]
		if((locTimeTotal <= (onlineTimeTotal-3)) || (locTimeTotal >= (onlineTimeTotal+3)))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8adb      	ldrh	r3, [r3, #22]
 800a2dc:	3b02      	subs	r3, #2
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	8a92      	ldrh	r2, [r2, #20]
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	dc06      	bgt.n	800a2f4 <_ZN5SHIFT16shiftCalculationEv+0x84>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	8adb      	ldrh	r3, [r3, #22]
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	8a92      	ldrh	r2, [r2, #20]
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	da07      	bge.n	800a304 <_ZN5SHIFT16shiftCalculationEv+0x94>
		{
			  rtc_set_time(SW_Hour,SW_Minute,30);
 800a2f4:	4b4a      	ldr	r3, [pc, #296]	; (800a420 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	4a4a      	ldr	r2, [pc, #296]	; (800a424 <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 800a2fa:	7811      	ldrb	r1, [r2, #0]
 800a2fc:	221e      	movs	r2, #30
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f8 ffc6 	bl	8003290 <rtc_set_time>
		}
		if((date_Rtc != SW_Date) || (month_Rtc != SW_Month) || (year_Rtc != SW_Year))
 800a304:	4b43      	ldr	r3, [pc, #268]	; (800a414 <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	4b47      	ldr	r3, [pc, #284]	; (800a428 <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d10b      	bne.n	800a328 <_ZN5SHIFT16shiftCalculationEv+0xb8>
 800a310:	4b3f      	ldr	r3, [pc, #252]	; (800a410 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	4b45      	ldr	r3, [pc, #276]	; (800a42c <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d105      	bne.n	800a328 <_ZN5SHIFT16shiftCalculationEv+0xb8>
 800a31c:	4b3b      	ldr	r3, [pc, #236]	; (800a40c <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	4b43      	ldr	r3, [pc, #268]	; (800a430 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d008      	beq.n	800a33a <_ZN5SHIFT16shiftCalculationEv+0xca>
		{
			rtc_set_date(2,SW_Date,SW_Month,SW_Year);
 800a328:	4b3f      	ldr	r3, [pc, #252]	; (800a428 <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 800a32a:	7819      	ldrb	r1, [r3, #0]
 800a32c:	4b3f      	ldr	r3, [pc, #252]	; (800a42c <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 800a32e:	781a      	ldrb	r2, [r3, #0]
 800a330:	4b3f      	ldr	r3, [pc, #252]	; (800a430 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2002      	movs	r0, #2
 800a336:	f7f9 f815 	bl	8003364 <rtc_set_date>
		}
	}
	TotalMinutesvar = (((hour_t)*(60))+(min_t));
 800a33a:	4b33      	ldr	r3, [pc, #204]	; (800a408 <_ZN5SHIFT16shiftCalculationEv+0x198>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	461a      	mov	r2, r3
 800a342:	0112      	lsls	r2, r2, #4
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	4b2e      	ldr	r3, [pc, #184]	; (800a404 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	4413      	add	r3, r2
 800a352:	b29a      	uxth	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	809a      	strh	r2, [r3, #4]
	Shift1_OnTime = (((8)*(60))+(31));	  //495
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a35e:	80da      	strh	r2, [r3, #6]
	Shift1_OffTime = (((16)*(60))+(30)); //974
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f240 32de 	movw	r2, #990	; 0x3de
 800a366:	811a      	strh	r2, [r3, #8]

	Shift2_OnTime = (((16)*(60))+(31));	 //975
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f240 32df 	movw	r2, #991	; 0x3df
 800a36e:	815a      	strh	r2, [r3, #10]
	shift2_buffer_time_1 = (((23)*(60))+(59)); // 1439
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f240 529f 	movw	r2, #1439	; 0x59f
 800a376:	819a      	strh	r2, [r3, #12]
	Shift2_OffTime = (((0)*(60))+(30));	 //14
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	221e      	movs	r2, #30
 800a37c:	81da      	strh	r2, [r3, #14]

	Shift3_OnTime = (((0)*(60))+(31));	//15
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	221f      	movs	r2, #31
 800a382:	821a      	strh	r2, [r3, #16]
	Shift3_OffTime = (((8)*(60))+(30));	 //494
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800a38a:	825a      	strh	r2, [r3, #18]

	if((TotalMinutesvar >=  Shift1_OnTime)&&(TotalMinutesvar <= Shift1_OffTime))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	889a      	ldrh	r2, [r3, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	88db      	ldrh	r3, [r3, #6]
 800a394:	429a      	cmp	r2, r3
 800a396:	d309      	bcc.n	800a3ac <_ZN5SHIFT16shiftCalculationEv+0x13c>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	889a      	ldrh	r2, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	891b      	ldrh	r3, [r3, #8]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d803      	bhi.n	800a3ac <_ZN5SHIFT16shiftCalculationEv+0x13c>
	{
	   CurrentShift=1;
 800a3a4:	4b23      	ldr	r3, [pc, #140]	; (800a434 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	701a      	strb	r2, [r3, #0]
 800a3aa:	e025      	b.n	800a3f8 <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if(((TotalMinutesvar >=  Shift2_OnTime)&&(TotalMinutesvar <= shift2_buffer_time_1))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	889a      	ldrh	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	895b      	ldrh	r3, [r3, #10]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d305      	bcc.n	800a3c4 <_ZN5SHIFT16shiftCalculationEv+0x154>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	889a      	ldrh	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	899b      	ldrh	r3, [r3, #12]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d905      	bls.n	800a3d0 <_ZN5SHIFT16shiftCalculationEv+0x160>
				||((TotalMinutesvar>= 0)&&(TotalMinutesvar<=Shift2_OffTime)))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	889a      	ldrh	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	89db      	ldrh	r3, [r3, #14]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d803      	bhi.n	800a3d8 <_ZN5SHIFT16shiftCalculationEv+0x168>
	{//Included one brace to solve warning?
		CurrentShift=2;
 800a3d0:	4b18      	ldr	r3, [pc, #96]	; (800a434 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	e00f      	b.n	800a3f8 <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if((TotalMinutesvar >=  Shift3_OnTime)&&(TotalMinutesvar <= Shift3_OffTime))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	889a      	ldrh	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	8a1b      	ldrh	r3, [r3, #16]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d309      	bcc.n	800a3f8 <_ZN5SHIFT16shiftCalculationEv+0x188>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	889a      	ldrh	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8a5b      	ldrh	r3, [r3, #18]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d803      	bhi.n	800a3f8 <_ZN5SHIFT16shiftCalculationEv+0x188>
	{
		CurrentShift=3;
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800a3f2:	2203      	movs	r2, #3
 800a3f4:	701a      	strb	r2, [r3, #0]
	else
	{
	/*Error return*/
	}
	//UpdateShiftInfo =1;
}
 800a3f6:	e7ff      	b.n	800a3f8 <_ZN5SHIFT16shiftCalculationEv+0x188>
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	20000a1e 	.word	0x20000a1e
 800a404:	20000a1d 	.word	0x20000a1d
 800a408:	20000a1c 	.word	0x20000a1c
 800a40c:	20000a22 	.word	0x20000a22
 800a410:	20000a21 	.word	0x20000a21
 800a414:	20000a20 	.word	0x20000a20
 800a418:	20000a1f 	.word	0x20000a1f
 800a41c:	200000ee 	.word	0x200000ee
 800a420:	200000f1 	.word	0x200000f1
 800a424:	200000f2 	.word	0x200000f2
 800a428:	200000f3 	.word	0x200000f3
 800a42c:	200000f4 	.word	0x200000f4
 800a430:	200000f5 	.word	0x200000f5
 800a434:	20000a23 	.word	0x20000a23

0800a438 <_ZN5SHIFT3runEv>:

void SHIFT::run()
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	shiftCalculation();
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff ff15 	bl	800a270 <_ZN5SHIFT16shiftCalculationEv>
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <_ZN7ESP8266C1Ev>:
extern uint8_t BlockStatusOffline[40];
extern uint8_t espIpAddress[16];
extern uint8_t len_espIpAddress;


ESP8266::ESP8266() {
 800a450:	b5b0      	push	{r4, r5, r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	4ac9      	ldr	r2, [pc, #804]	; (800a780 <_ZN7ESP8266C1Ev+0x330>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4ac8      	ldr	r2, [pc, #800]	; (800a784 <_ZN7ESP8266C1Ev+0x334>)
 800a462:	330e      	adds	r3, #14
 800a464:	8811      	ldrh	r1, [r2, #0]
 800a466:	7892      	ldrb	r2, [r2, #2]
 800a468:	8019      	strh	r1, [r3, #0]
 800a46a:	709a      	strb	r2, [r3, #2]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	49c6      	ldr	r1, [pc, #792]	; (800a788 <_ZN7ESP8266C1Ev+0x338>)
 800a470:	f103 0211 	add.w	r2, r3, #17
 800a474:	460b      	mov	r3, r1
 800a476:	cb03      	ldmia	r3!, {r0, r1}
 800a478:	6010      	str	r0, [r2, #0]
 800a47a:	6051      	str	r1, [r2, #4]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	7213      	strb	r3, [r2, #8]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4ac2      	ldr	r2, [pc, #776]	; (800a78c <_ZN7ESP8266C1Ev+0x33c>)
 800a484:	331a      	adds	r3, #26
 800a486:	6810      	ldr	r0, [r2, #0]
 800a488:	6018      	str	r0, [r3, #0]
 800a48a:	8891      	ldrh	r1, [r2, #4]
 800a48c:	7992      	ldrb	r2, [r2, #6]
 800a48e:	8099      	strh	r1, [r3, #4]
 800a490:	719a      	strb	r2, [r3, #6]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	49be      	ldr	r1, [pc, #760]	; (800a790 <_ZN7ESP8266C1Ev+0x340>)
 800a496:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800a49a:	6808      	ldr	r0, [r1, #0]
 800a49c:	6010      	str	r0, [r2, #0]
 800a49e:	7909      	ldrb	r1, [r1, #4]
 800a4a0:	7111      	strb	r1, [r2, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800a4a8:	687d      	ldr	r5, [r7, #4]
 800a4aa:	4bba      	ldr	r3, [pc, #744]	; (800a794 <_ZN7ESP8266C1Ev+0x344>)
 800a4ac:	f105 0427 	add.w	r4, r5, #39	; 0x27
 800a4b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a4b2:	6020      	str	r0, [r4, #0]
 800a4b4:	6061      	str	r1, [r4, #4]
 800a4b6:	60a2      	str	r2, [r4, #8]
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	81a3      	strh	r3, [r4, #12]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3336      	adds	r3, #54	; 0x36
 800a4c6:	222d      	movs	r2, #45	; 0x2d
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f006 fbc0 	bl	8010c50 <memset>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2241      	movs	r2, #65	; 0x41
 800a4d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2254      	movs	r2, #84	; 0x54
 800a4dc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	222b      	movs	r2, #43	; 0x2b
 800a4e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2243      	movs	r2, #67	; 0x43
 800a4ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2257      	movs	r2, #87	; 0x57
 800a4f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	224a      	movs	r2, #74	; 0x4a
 800a4fc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2241      	movs	r2, #65	; 0x41
 800a504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2250      	movs	r2, #80	; 0x50
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	223d      	movs	r2, #61	; 0x3d
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2222      	movs	r2, #34	; 0x22
 800a51c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	224e      	movs	r2, #78	; 0x4e
 800a524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2241      	movs	r2, #65	; 0x41
 800a52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2256      	movs	r2, #86	; 0x56
 800a534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2245      	movs	r2, #69	; 0x45
 800a53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2245      	movs	r2, #69	; 0x45
 800a544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	224e      	movs	r2, #78	; 0x4e
 800a54c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2250      	movs	r2, #80	; 0x50
 800a554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2248      	movs	r2, #72	; 0x48
 800a55c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	224f      	movs	r2, #79	; 0x4f
 800a564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	224e      	movs	r2, #78	; 0x4e
 800a56c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2245      	movs	r2, #69	; 0x45
 800a574:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2222      	movs	r2, #34	; 0x22
 800a57c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	222c      	movs	r2, #44	; 0x2c
 800a584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2222      	movs	r2, #34	; 0x22
 800a58c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2239      	movs	r2, #57	; 0x39
 800a594:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2235      	movs	r2, #53	; 0x35
 800a59c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2230      	movs	r2, #48	; 0x30
 800a5a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2230      	movs	r2, #48	; 0x30
 800a5ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2238      	movs	r2, #56	; 0x38
 800a5b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2237      	movs	r2, #55	; 0x37
 800a5bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2230      	movs	r2, #48	; 0x30
 800a5c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2233      	movs	r2, #51	; 0x33
 800a5cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2239      	movs	r2, #57	; 0x39
 800a5d4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2238      	movs	r2, #56	; 0x38
 800a5dc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2222      	movs	r2, #34	; 0x22
 800a5e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	220d      	movs	r2, #13
 800a5ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	220a      	movs	r2, #10
 800a5f4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800a5f8:	687d      	ldr	r5, [r7, #4]
 800a5fa:	4b67      	ldr	r3, [pc, #412]	; (800a798 <_ZN7ESP8266C1Ev+0x348>)
 800a5fc:	f105 0463 	add.w	r4, r5, #99	; 0x63
 800a600:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a602:	6020      	str	r0, [r4, #0]
 800a604:	6061      	str	r1, [r4, #4]
 800a606:	60a2      	str	r2, [r4, #8]
 800a608:	2300      	movs	r3, #0
 800a60a:	f885 306f 	strb.w	r3, [r5, #111]	; 0x6f
 800a60e:	687c      	ldr	r4, [r7, #4]
 800a610:	4a62      	ldr	r2, [pc, #392]	; (800a79c <_ZN7ESP8266C1Ev+0x34c>)
 800a612:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800a616:	ca07      	ldmia	r2, {r0, r1, r2}
 800a618:	c303      	stmia	r3!, {r0, r1}
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	3302      	adds	r3, #2
 800a61e:	0c12      	lsrs	r2, r2, #16
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	f104 037b 	add.w	r3, r4, #123	; 0x7b
 800a626:	2200      	movs	r2, #0
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	687d      	ldr	r5, [r7, #4]
 800a62c:	4b5c      	ldr	r3, [pc, #368]	; (800a7a0 <_ZN7ESP8266C1Ev+0x350>)
 800a62e:	f105 047d 	add.w	r4, r5, #125	; 0x7d
 800a632:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a634:	6020      	str	r0, [r4, #0]
 800a636:	6061      	str	r1, [r4, #4]
 800a638:	60a2      	str	r2, [r4, #8]
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	2300      	movs	r3, #0
 800a640:	f885 308b 	strb.w	r3, [r5, #139]	; 0x8b
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	338c      	adds	r3, #140	; 0x8c
 800a648:	2232      	movs	r2, #50	; 0x32
 800a64a:	2100      	movs	r1, #0
 800a64c:	4618      	mov	r0, r3
 800a64e:	f006 faff 	bl	8010c50 <memset>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2241      	movs	r2, #65	; 0x41
 800a656:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2254      	movs	r2, #84	; 0x54
 800a65e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	222b      	movs	r2, #43	; 0x2b
 800a666:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2243      	movs	r2, #67	; 0x43
 800a66e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2249      	movs	r2, #73	; 0x49
 800a676:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2250      	movs	r2, #80	; 0x50
 800a67e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2253      	movs	r2, #83	; 0x53
 800a686:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2254      	movs	r2, #84	; 0x54
 800a68e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2241      	movs	r2, #65	; 0x41
 800a696:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2252      	movs	r2, #82	; 0x52
 800a69e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2254      	movs	r2, #84	; 0x54
 800a6a6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	223d      	movs	r2, #61	; 0x3d
 800a6ae:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2222      	movs	r2, #34	; 0x22
 800a6b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2254      	movs	r2, #84	; 0x54
 800a6be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2243      	movs	r2, #67	; 0x43
 800a6c6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2250      	movs	r2, #80	; 0x50
 800a6ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2222      	movs	r2, #34	; 0x22
 800a6d6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	222c      	movs	r2, #44	; 0x2c
 800a6de:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2222      	movs	r2, #34	; 0x22
 800a6e6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2231      	movs	r2, #49	; 0x31
 800a6ee:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2232      	movs	r2, #50	; 0x32
 800a6f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2232      	movs	r2, #50	; 0x32
 800a6fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	222e      	movs	r2, #46	; 0x2e
 800a706:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2231      	movs	r2, #49	; 0x31
 800a70e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2236      	movs	r2, #54	; 0x36
 800a716:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2235      	movs	r2, #53	; 0x35
 800a71e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	222e      	movs	r2, #46	; 0x2e
 800a726:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2232      	movs	r2, #50	; 0x32
 800a72e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2230      	movs	r2, #48	; 0x30
 800a736:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2236      	movs	r2, #54	; 0x36
 800a73e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	222e      	movs	r2, #46	; 0x2e
 800a746:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2231      	movs	r2, #49	; 0x31
 800a74e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2233      	movs	r2, #51	; 0x33
 800a756:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2236      	movs	r2, #54	; 0x36
 800a75e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2222      	movs	r2, #34	; 0x22
 800a766:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	222c      	movs	r2, #44	; 0x2c
 800a76e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2239      	movs	r2, #57	; 0x39
 800a776:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2230      	movs	r2, #48	; 0x30
 800a77e:	e011      	b.n	800a7a4 <_ZN7ESP8266C1Ev+0x354>
 800a780:	08011ab8 	.word	0x08011ab8
 800a784:	080117e0 	.word	0x080117e0
 800a788:	080117e4 	.word	0x080117e4
 800a78c:	080117f0 	.word	0x080117f0
 800a790:	080117f8 	.word	0x080117f8
 800a794:	08011800 	.word	0x08011800
 800a798:	08011810 	.word	0x08011810
 800a79c:	08011820 	.word	0x08011820
 800a7a0:	08011830 	.word	0x08011830
 800a7a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2230      	movs	r2, #48	; 0x30
 800a7ac:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2235      	movs	r2, #53	; 0x35
 800a7b4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	220d      	movs	r2, #13
 800a7bc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	220a      	movs	r2, #10
 800a7c4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	33d2      	adds	r3, #210	; 0xd2
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	609a      	str	r2, [r3, #8]
 800a7d4:	60da      	str	r2, [r3, #12]
 800a7d6:	611a      	str	r2, [r3, #16]
 800a7d8:	687d      	ldr	r5, [r7, #4]
 800a7da:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <_ZN7ESP8266C1Ev+0x3ac>)
 800a7dc:	f205 249e 	addw	r4, r5, #670	; 0x29e
 800a7e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7e2:	6020      	str	r0, [r4, #0]
 800a7e4:	6061      	str	r1, [r4, #4]
 800a7e6:	60a2      	str	r2, [r4, #8]
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	81a3      	strh	r3, [r4, #12]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
	// TODO Auto-generated constructor stub

}
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a7fc:	08011840 	.word	0x08011840

0800a800 <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	4a04      	ldr	r2, [pc, #16]	; (800a81c <_ZN7ESP8266D1Ev+0x1c>)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	08011ab8 	.word	0x08011ab8

0800a820 <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
}
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ffe9 	bl	800a800 <_ZN7ESP8266D1Ev>
 800a82e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f006 f9c7 	bl	8010bc6 <_ZdlPvj>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
	RefreshWifiData();
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fc80 	bl	800b150 <_ZN7ESP826615RefreshWifiDataEv>
	Send_WifiCmd();
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f805 	bl	800a860 <_ZN7ESP826612Send_WifiCmdEv>

}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af02      	add	r7, sp, #8
 800a866:	6078      	str	r0, [r7, #4]
	switch(wifi_command)
 800a868:	4bc2      	ldr	r3, [pc, #776]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	3b05      	subs	r3, #5
 800a86e:	2b75      	cmp	r3, #117	; 0x75
 800a870:	f200 841f 	bhi.w	800b0b2 <_ZN7ESP826612Send_WifiCmdEv+0x852>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800aa55 	.word	0x0800aa55
 800a880:	0800b0b3 	.word	0x0800b0b3
 800a884:	0800b0b3 	.word	0x0800b0b3
 800a888:	0800b0b3 	.word	0x0800b0b3
 800a88c:	0800b0b3 	.word	0x0800b0b3
 800a890:	0800aa79 	.word	0x0800aa79
 800a894:	0800aaa3 	.word	0x0800aaa3
 800a898:	0800aad1 	.word	0x0800aad1
 800a89c:	0800aaf5 	.word	0x0800aaf5
 800a8a0:	0800ab23 	.word	0x0800ab23
 800a8a4:	0800ab4d 	.word	0x0800ab4d
 800a8a8:	0800b0b3 	.word	0x0800b0b3
 800a8ac:	0800b0b3 	.word	0x0800b0b3
 800a8b0:	0800b0b3 	.word	0x0800b0b3
 800a8b4:	0800b0b3 	.word	0x0800b0b3
 800a8b8:	0800ab91 	.word	0x0800ab91
 800a8bc:	0800abcd 	.word	0x0800abcd
 800a8c0:	0800b0b3 	.word	0x0800b0b3
 800a8c4:	0800b0b3 	.word	0x0800b0b3
 800a8c8:	0800b0b3 	.word	0x0800b0b3
 800a8cc:	0800b0b3 	.word	0x0800b0b3
 800a8d0:	0800b0b3 	.word	0x0800b0b3
 800a8d4:	0800b0b3 	.word	0x0800b0b3
 800a8d8:	0800b0b3 	.word	0x0800b0b3
 800a8dc:	0800b0b3 	.word	0x0800b0b3
 800a8e0:	0800ac11 	.word	0x0800ac11
 800a8e4:	0800b0b3 	.word	0x0800b0b3
 800a8e8:	0800b0b3 	.word	0x0800b0b3
 800a8ec:	0800b0b3 	.word	0x0800b0b3
 800a8f0:	0800b0b3 	.word	0x0800b0b3
 800a8f4:	0800b0b3 	.word	0x0800b0b3
 800a8f8:	0800b0b3 	.word	0x0800b0b3
 800a8fc:	0800b0b3 	.word	0x0800b0b3
 800a900:	0800b0b3 	.word	0x0800b0b3
 800a904:	0800b0b3 	.word	0x0800b0b3
 800a908:	0800b0b3 	.word	0x0800b0b3
 800a90c:	0800ac41 	.word	0x0800ac41
 800a910:	0800b0b3 	.word	0x0800b0b3
 800a914:	0800b0b3 	.word	0x0800b0b3
 800a918:	0800b0b3 	.word	0x0800b0b3
 800a91c:	0800b0b3 	.word	0x0800b0b3
 800a920:	0800b0b3 	.word	0x0800b0b3
 800a924:	0800b0b3 	.word	0x0800b0b3
 800a928:	0800b0b3 	.word	0x0800b0b3
 800a92c:	0800aceb 	.word	0x0800aceb
 800a930:	0800ad19 	.word	0x0800ad19
 800a934:	0800ad43 	.word	0x0800ad43
 800a938:	0800b0b3 	.word	0x0800b0b3
 800a93c:	0800b0b3 	.word	0x0800b0b3
 800a940:	0800b0b3 	.word	0x0800b0b3
 800a944:	0800b0b3 	.word	0x0800b0b3
 800a948:	0800b0b3 	.word	0x0800b0b3
 800a94c:	0800b0b3 	.word	0x0800b0b3
 800a950:	0800b0b3 	.word	0x0800b0b3
 800a954:	0800b0b3 	.word	0x0800b0b3
 800a958:	0800b0b3 	.word	0x0800b0b3
 800a95c:	0800b0b3 	.word	0x0800b0b3
 800a960:	0800b0b3 	.word	0x0800b0b3
 800a964:	0800b0b3 	.word	0x0800b0b3
 800a968:	0800b0b3 	.word	0x0800b0b3
 800a96c:	0800b0b3 	.word	0x0800b0b3
 800a970:	0800b0b3 	.word	0x0800b0b3
 800a974:	0800b0b3 	.word	0x0800b0b3
 800a978:	0800b0b3 	.word	0x0800b0b3
 800a97c:	0800b0b3 	.word	0x0800b0b3
 800a980:	0800ad71 	.word	0x0800ad71
 800a984:	0800ad9b 	.word	0x0800ad9b
 800a988:	0800b0b3 	.word	0x0800b0b3
 800a98c:	0800b0b3 	.word	0x0800b0b3
 800a990:	0800b0b3 	.word	0x0800b0b3
 800a994:	0800b0b3 	.word	0x0800b0b3
 800a998:	0800b0b3 	.word	0x0800b0b3
 800a99c:	0800b0b3 	.word	0x0800b0b3
 800a9a0:	0800b0b3 	.word	0x0800b0b3
 800a9a4:	0800b0b3 	.word	0x0800b0b3
 800a9a8:	0800adc9 	.word	0x0800adc9
 800a9ac:	0800adf3 	.word	0x0800adf3
 800a9b0:	0800b0b3 	.word	0x0800b0b3
 800a9b4:	0800b0b3 	.word	0x0800b0b3
 800a9b8:	0800b0b3 	.word	0x0800b0b3
 800a9bc:	0800b0b3 	.word	0x0800b0b3
 800a9c0:	0800b0b3 	.word	0x0800b0b3
 800a9c4:	0800b0b3 	.word	0x0800b0b3
 800a9c8:	0800b0b3 	.word	0x0800b0b3
 800a9cc:	0800b0b3 	.word	0x0800b0b3
 800a9d0:	0800ae41 	.word	0x0800ae41
 800a9d4:	0800aef3 	.word	0x0800aef3
 800a9d8:	0800b0b3 	.word	0x0800b0b3
 800a9dc:	0800b0b3 	.word	0x0800b0b3
 800a9e0:	0800b0b3 	.word	0x0800b0b3
 800a9e4:	0800b0b3 	.word	0x0800b0b3
 800a9e8:	0800b0b3 	.word	0x0800b0b3
 800a9ec:	0800b0b3 	.word	0x0800b0b3
 800a9f0:	0800b0b3 	.word	0x0800b0b3
 800a9f4:	0800b0b3 	.word	0x0800b0b3
 800a9f8:	0800af21 	.word	0x0800af21
 800a9fc:	0800af97 	.word	0x0800af97
 800aa00:	0800b03b 	.word	0x0800b03b
 800aa04:	0800b067 	.word	0x0800b067
 800aa08:	0800afb5 	.word	0x0800afb5
 800aa0c:	0800b00d 	.word	0x0800b00d
 800aa10:	0800aff1 	.word	0x0800aff1
 800aa14:	0800b0b3 	.word	0x0800b0b3
 800aa18:	0800b0b3 	.word	0x0800b0b3
 800aa1c:	0800b0b3 	.word	0x0800b0b3
 800aa20:	0800b093 	.word	0x0800b093
 800aa24:	0800b0b3 	.word	0x0800b0b3
 800aa28:	0800b0b3 	.word	0x0800b0b3
 800aa2c:	0800b0b3 	.word	0x0800b0b3
 800aa30:	0800b0b3 	.word	0x0800b0b3
 800aa34:	0800b0b3 	.word	0x0800b0b3
 800aa38:	0800b0b3 	.word	0x0800b0b3
 800aa3c:	0800b0b3 	.word	0x0800b0b3
 800aa40:	0800b0b3 	.word	0x0800b0b3
 800aa44:	0800b0b3 	.word	0x0800b0b3
 800aa48:	0800b0bb 	.word	0x0800b0bb
 800aa4c:	0800ac6f 	.word	0x0800ac6f
 800aa50:	0800acb7 	.word	0x0800acb7
	{
	case 5:
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 800aa54:	2201      	movs	r2, #1
 800aa56:	2104      	movs	r1, #4
 800aa58:	4847      	ldr	r0, [pc, #284]	; (800ab78 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800aa5a:	f001 f96f 	bl	800bd3c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800aa5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aa62:	f000 fe25 	bl	800b6b0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 800aa66:	2200      	movs	r2, #0
 800aa68:	2104      	movs	r1, #4
 800aa6a:	4843      	ldr	r0, [pc, #268]	; (800ab78 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800aa6c:	f001 f966 	bl	800bd3c <HAL_GPIO_WritePin>
		wifi_command=13;
 800aa70:	4b40      	ldr	r3, [pc, #256]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800aa72:	220d      	movs	r2, #13
 800aa74:	701a      	strb	r2, [r3, #0]

	break;
 800aa76:	e366      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 10://reset
	NoOfdata_byte=7;
 800aa78:	4b40      	ldr	r3, [pc, #256]	; (800ab7c <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800aa7a:	2207      	movs	r2, #7
 800aa7c:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800aa7e:	4b3d      	ldr	r3, [pc, #244]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800aa80:	220d      	movs	r2, #13
 800aa82:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800aa84:	4b3e      	ldr	r3, [pc, #248]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800aa8a:	4b3e      	ldr	r3, [pc, #248]	; (800ab84 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3311      	adds	r3, #17
 800aa94:	4a39      	ldr	r2, [pc, #228]	; (800ab7c <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800aa96:	8812      	ldrh	r2, [r2, #0]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	483b      	ldr	r0, [pc, #236]	; (800ab88 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 800aa9c:	f004 fd3a 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800aaa0:	e351      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 11:
	if(++Timerdelay >6)
 800aaa2:	4b37      	ldr	r3, [pc, #220]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	4b35      	ldr	r3, [pc, #212]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	4b34      	ldr	r3, [pc, #208]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b06      	cmp	r3, #6
 800aab4:	bf8c      	ite	hi
 800aab6:	2301      	movhi	r3, #1
 800aab8:	2300      	movls	r3, #0
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 82fe 	beq.w	800b0be <_ZN7ESP826612Send_WifiCmdEv+0x85e>
	{
		Timerdelay=0;
 800aac2:	4b2f      	ldr	r3, [pc, #188]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 800aac8:	4b2a      	ldr	r3, [pc, #168]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800aaca:	220e      	movs	r2, #14
 800aacc:	701a      	strb	r2, [r3, #0]
	}
	break;
 800aace:	e2f6      	b.n	800b0be <_ZN7ESP826612Send_WifiCmdEv+0x85e>
	case 12:
	NoOfdata_byte=6;
 800aad0:	4b2a      	ldr	r3, [pc, #168]	; (800ab7c <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800aad2:	2206      	movs	r2, #6
 800aad4:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800aad6:	4b27      	ldr	r3, [pc, #156]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800aad8:	220d      	movs	r2, #13
 800aada:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800aadc:	4b28      	ldr	r3, [pc, #160]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	331a      	adds	r3, #26
 800aae6:	4a25      	ldr	r2, [pc, #148]	; (800ab7c <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800aae8:	8812      	ldrh	r2, [r2, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	4826      	ldr	r0, [pc, #152]	; (800ab88 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 800aaee:	f004 fd11 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800aaf2:	e328      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 13:
	if(++Timerdelay >12)
 800aaf4:	4b22      	ldr	r3, [pc, #136]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	4b20      	ldr	r3, [pc, #128]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	4b1f      	ldr	r3, [pc, #124]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b0c      	cmp	r3, #12
 800ab06:	bf8c      	ite	hi
 800ab08:	2301      	movhi	r3, #1
 800ab0a:	2300      	movls	r3, #0
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 82d7 	beq.w	800b0c2 <_ZN7ESP826612Send_WifiCmdEv+0x862>
	{
		Timerdelay=0;
 800ab14:	4b1a      	ldr	r3, [pc, #104]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 800ab1a:	4b16      	ldr	r3, [pc, #88]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800ab1c:	2214      	movs	r2, #20
 800ab1e:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ab20:	e2cf      	b.n	800b0c2 <_ZN7ESP826612Send_WifiCmdEv+0x862>
	case 14:
	NoOfdata_byte=4;
 800ab22:	4b16      	ldr	r3, [pc, #88]	; (800ab7c <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800ab24:	2204      	movs	r2, #4
 800ab26:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 800ab28:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <_ZN7ESP826612Send_WifiCmdEv+0x32c>)
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 800ab2e:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800ab30:	2214      	movs	r2, #20
 800ab32:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ab34:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3321      	adds	r3, #33	; 0x21
 800ab3e:	4a0f      	ldr	r2, [pc, #60]	; (800ab7c <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800ab40:	8812      	ldrh	r2, [r2, #0]
 800ab42:	4619      	mov	r1, r3
 800ab44:	4810      	ldr	r0, [pc, #64]	; (800ab88 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 800ab46:	f004 fce5 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800ab4a:	e2fc      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 15:
	if(++Timerdelay >2)
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	3301      	adds	r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	bf8c      	ite	hi
 800ab60:	2301      	movhi	r3, #1
 800ab62:	2300      	movls	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 82ad 	beq.w	800b0c6 <_ZN7ESP826612Send_WifiCmdEv+0x866>
	{
		Timerdelay=0;
 800ab6c:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ab72:	e2a8      	b.n	800b0c6 <_ZN7ESP826612Send_WifiCmdEv+0x866>
 800ab74:	20000a25 	.word	0x20000a25
 800ab78:	48000400 	.word	0x48000400
 800ab7c:	20000bf0 	.word	0x20000bf0
 800ab80:	20000bf2 	.word	0x20000bf2
 800ab84:	20000bec 	.word	0x20000bec
 800ab88:	200003f0 	.word	0x200003f0
 800ab8c:	20000bed 	.word	0x20000bed
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 800ab90:	4ba3      	ldr	r3, [pc, #652]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ab92:	220d      	movs	r2, #13
 800ab94:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 800ab96:	4ba3      	ldr	r3, [pc, #652]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800ab98:	2201      	movs	r2, #1
 800ab9a:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ab9c:	4ba2      	ldr	r3, [pc, #648]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800aba2:	4ba2      	ldr	r3, [pc, #648]	; (800ae2c <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3327      	adds	r3, #39	; 0x27
 800abac:	4a9c      	ldr	r2, [pc, #624]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800abae:	8812      	ldrh	r2, [r2, #0]
 800abb0:	4619      	mov	r1, r3
 800abb2:	489f      	ldr	r0, [pc, #636]	; (800ae30 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800abb4:	f004 fcae 	bl	800f514 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 800abb8:	4b9e      	ldr	r3, [pc, #632]	; (800ae34 <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	4b9c      	ldr	r3, [pc, #624]	; (800ae34 <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800abc2:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 800abc4:	4b9c      	ldr	r3, [pc, #624]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800abc6:	2215      	movs	r2, #21
 800abc8:	701a      	strb	r2, [r3, #0]

	break;
 800abca:	e2bc      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >5)
 800abcc:	4b96      	ldr	r3, [pc, #600]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	4b94      	ldr	r3, [pc, #592]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800abd6:	701a      	strb	r2, [r3, #0]
 800abd8:	4b93      	ldr	r3, [pc, #588]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b05      	cmp	r3, #5
 800abde:	bf8c      	ite	hi
 800abe0:	2301      	movhi	r3, #1
 800abe2:	2300      	movls	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 826f 	beq.w	800b0ca <_ZN7ESP826612Send_WifiCmdEv+0x86a>
	{
		Timerdelay=0;
 800abec:	4b8e      	ldr	r3, [pc, #568]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 800abf2:	4b90      	ldr	r3, [pc, #576]	; (800ae34 <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b05      	cmp	r3, #5
 800abf8:	d106      	bne.n	800ac08 <_ZN7ESP826612Send_WifiCmdEv+0x3a8>
		{
			wifi_command=5;	 //Hardware reset
 800abfa:	4b8f      	ldr	r3, [pc, #572]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800abfc:	2205      	movs	r2, #5
 800abfe:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 800ac00:	4b8c      	ldr	r3, [pc, #560]	; (800ae34 <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 800ac06:	e260      	b.n	800b0ca <_ZN7ESP826612Send_WifiCmdEv+0x86a>
			wifi_command=10;
 800ac08:	4b8b      	ldr	r3, [pc, #556]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	701a      	strb	r2, [r3, #0]
	break;
 800ac0e:	e25c      	b.n	800b0ca <_ZN7ESP826612Send_WifiCmdEv+0x86a>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	NoOfdata_byte=45;//41;//32;
 800ac10:	4b83      	ldr	r3, [pc, #524]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ac12:	222d      	movs	r2, #45	; 0x2d
 800ac14:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=2;
 800ac16:	4b83      	ldr	r3, [pc, #524]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800ac18:	2202      	movs	r2, #2
 800ac1a:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 800ac1c:	4b86      	ldr	r3, [pc, #536]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ac1e:	2229      	movs	r2, #41	; 0x29
 800ac20:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ac22:	4b81      	ldr	r3, [pc, #516]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800ac28:	4b80      	ldr	r3, [pc, #512]	; (800ae2c <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePsw,NoOfdata_byte);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3336      	adds	r3, #54	; 0x36
 800ac32:	4a7b      	ldr	r2, [pc, #492]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ac34:	8812      	ldrh	r2, [r2, #0]
 800ac36:	4619      	mov	r1, r3
 800ac38:	487d      	ldr	r0, [pc, #500]	; (800ae30 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800ac3a:	f004 fc6b 	bl	800f514 <HAL_UART_Transmit_IT>
	break;		   //add retry
 800ac3e:	e282      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 41:	   //resend if o replay
	if(++Timerdelay >30)
 800ac40:	4b79      	ldr	r3, [pc, #484]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	4b77      	ldr	r3, [pc, #476]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	4b76      	ldr	r3, [pc, #472]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b1e      	cmp	r3, #30
 800ac52:	bf8c      	ite	hi
 800ac54:	2301      	movhi	r3, #1
 800ac56:	2300      	movls	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8237 	beq.w	800b0ce <_ZN7ESP826612Send_WifiCmdEv+0x86e>
	{
		Timerdelay=0;
 800ac60:	4b71      	ldr	r3, [pc, #452]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 800ac66:	4b74      	ldr	r3, [pc, #464]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ac68:	220a      	movs	r2, #10
 800ac6a:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ac6c:	e22f      	b.n	800b0ce <_ZN7ESP826612Send_WifiCmdEv+0x86e>
	case 121:
		bufferptr=0;
 800ac6e:	4b6f      	ldr	r3, [pc, #444]	; (800ae2c <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	701a      	strb	r2, [r3, #0]
		Rxseqdecoder=9;
 800ac74:	4b6b      	ldr	r3, [pc, #428]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800ac76:	2209      	movs	r2, #9
 800ac78:	701a      	strb	r2, [r3, #0]
		refinc=0;
 800ac7a:	4b70      	ldr	r3, [pc, #448]	; (800ae3c <_ZN7ESP826612Send_WifiCmdEv+0x5dc>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
		if(++Timerdelay >8)
 800ac80:	4b69      	ldr	r3, [pc, #420]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	4b67      	ldr	r3, [pc, #412]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	4b66      	ldr	r3, [pc, #408]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	bf8c      	ite	hi
 800ac94:	2301      	movhi	r3, #1
 800ac96:	2300      	movls	r3, #0
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 8240 	beq.w	800b120 <_ZN7ESP826612Send_WifiCmdEv+0x8c0>
		{
			Timerdelay=0;
 800aca0:	4b61      	ldr	r3, [pc, #388]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&hlpuart1,CMDATCifsrRead,10);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3370      	adds	r3, #112	; 0x70
 800acaa:	220a      	movs	r2, #10
 800acac:	4619      	mov	r1, r3
 800acae:	4860      	ldr	r0, [pc, #384]	; (800ae30 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800acb0:	f004 fc30 	bl	800f514 <HAL_UART_Transmit_IT>
		}
	break;
 800acb4:	e234      	b.n	800b120 <_ZN7ESP826612Send_WifiCmdEv+0x8c0>
	case 122:
		if(++Timerdelay >4)
 800acb6:	4b5c      	ldr	r3, [pc, #368]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	3301      	adds	r3, #1
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	4b5a      	ldr	r3, [pc, #360]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	4b59      	ldr	r3, [pc, #356]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	bf8c      	ite	hi
 800acca:	2301      	movhi	r3, #1
 800accc:	2300      	movls	r3, #0
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 8227 	beq.w	800b124 <_ZN7ESP826612Send_WifiCmdEv+0x8c4>
		{
			Timerdelay=0;
 800acd6:	4b54      	ldr	r3, [pc, #336]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acd8:	2200      	movs	r2, #0
 800acda:	701a      	strb	r2, [r3, #0]
			wifi_command=49;
 800acdc:	4b56      	ldr	r3, [pc, #344]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800acde:	2231      	movs	r2, #49	; 0x31
 800ace0:	701a      	strb	r2, [r3, #0]
			Rxseqdecoder=0;
 800ace2:	4b50      	ldr	r3, [pc, #320]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
		}
	break;
 800ace8:	e21c      	b.n	800b124 <_ZN7ESP826612Send_WifiCmdEv+0x8c4>
	case 49:
	if(++Timerdelay >8)
 800acea:	4b4f      	ldr	r3, [pc, #316]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	4b4d      	ldr	r3, [pc, #308]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	4b4c      	ldr	r3, [pc, #304]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b08      	cmp	r3, #8
 800acfc:	bf8c      	ite	hi
 800acfe:	2301      	movhi	r3, #1
 800ad00:	2300      	movls	r3, #0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 820f 	beq.w	800b128 <_ZN7ESP826612Send_WifiCmdEv+0x8c8>
	{
		Timerdelay=0;
 800ad0a:	4b47      	ldr	r3, [pc, #284]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800ad10:	4b49      	ldr	r3, [pc, #292]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ad12:	2232      	movs	r2, #50	; 0x32
 800ad14:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ad16:	e207      	b.n	800b128 <_ZN7ESP826612Send_WifiCmdEv+0x8c8>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 800ad18:	4b41      	ldr	r3, [pc, #260]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ad1a:	220b      	movs	r2, #11
 800ad1c:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 800ad1e:	4b46      	ldr	r3, [pc, #280]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ad20:	2233      	movs	r2, #51	; 0x33
 800ad22:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 800ad24:	4b3f      	ldr	r3, [pc, #252]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800ad26:	2203      	movs	r2, #3
 800ad28:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ad2a:	4b3f      	ldr	r3, [pc, #252]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3363      	adds	r3, #99	; 0x63
 800ad34:	4a3a      	ldr	r2, [pc, #232]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ad36:	8812      	ldrh	r2, [r2, #0]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	483d      	ldr	r0, [pc, #244]	; (800ae30 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800ad3c:	f004 fbea 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800ad40:	e201      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 51:
	if(++Timerdelay >15)
 800ad42:	4b39      	ldr	r3, [pc, #228]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	4b37      	ldr	r3, [pc, #220]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	4b36      	ldr	r3, [pc, #216]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b0f      	cmp	r3, #15
 800ad54:	bf8c      	ite	hi
 800ad56:	2301      	movhi	r3, #1
 800ad58:	2300      	movls	r3, #0
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 81e5 	beq.w	800b12c <_ZN7ESP826612Send_WifiCmdEv+0x8cc>
	{
		Timerdelay=0;
 800ad62:	4b31      	ldr	r3, [pc, #196]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 800ad68:	4b33      	ldr	r3, [pc, #204]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ad6a:	220a      	movs	r2, #10
 800ad6c:	701a      	strb	r2, [r3, #0]
	}

	break;
 800ad6e:	e1dd      	b.n	800b12c <_ZN7ESP826612Send_WifiCmdEv+0x8cc>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 800ad70:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ad72:	220d      	movs	r2, #13
 800ad74:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 800ad76:	4b30      	ldr	r3, [pc, #192]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ad78:	2247      	movs	r2, #71	; 0x47
 800ad7a:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 800ad7c:	4b29      	ldr	r3, [pc, #164]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800ad7e:	2204      	movs	r2, #4
 800ad80:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ad82:	4b29      	ldr	r3, [pc, #164]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	337d      	adds	r3, #125	; 0x7d
 800ad8c:	4a24      	ldr	r2, [pc, #144]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ad8e:	8812      	ldrh	r2, [r2, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	4827      	ldr	r0, [pc, #156]	; (800ae30 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800ad94:	f004 fbbe 	bl	800f514 <HAL_UART_Transmit_IT>
	break;	  //2sec
 800ad98:	e1d5      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 71:
	if(++Timerdelay >15)
 800ad9a:	4b23      	ldr	r3, [pc, #140]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b21      	ldr	r3, [pc, #132]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	4b20      	ldr	r3, [pc, #128]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b0f      	cmp	r3, #15
 800adac:	bf8c      	ite	hi
 800adae:	2301      	movhi	r3, #1
 800adb0:	2300      	movls	r3, #0
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 81bb 	beq.w	800b130 <_ZN7ESP826612Send_WifiCmdEv+0x8d0>
	{
		Timerdelay=0;
 800adba:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 800adc0:	4b1d      	ldr	r3, [pc, #116]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800adc2:	220a      	movs	r2, #10
 800adc4:	701a      	strb	r2, [r3, #0]
	}
	break;
 800adc6:	e1b3      	b.n	800b130 <_ZN7ESP826612Send_WifiCmdEv+0x8d0>
	case 80:
	NoOfdata_byte=42;//41;//55;
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800adca:	222a      	movs	r2, #42	; 0x2a
 800adcc:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 800adce:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800add0:	2251      	movs	r2, #81	; 0x51
 800add2:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 800add4:	4b13      	ldr	r3, [pc, #76]	; (800ae24 <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800add6:	2205      	movs	r2, #5
 800add8:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	338c      	adds	r3, #140	; 0x8c
 800ade4:	4a0e      	ldr	r2, [pc, #56]	; (800ae20 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800ade6:	8812      	ldrh	r2, [r2, #0]
 800ade8:	4619      	mov	r1, r3
 800adea:	4811      	ldr	r0, [pc, #68]	; (800ae30 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800adec:	f004 fb92 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800adf0:	e1a9      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 81:					//5sec
	if(++Timerdelay >20)
 800adf2:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	3301      	adds	r3, #1
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b14      	cmp	r3, #20
 800ae04:	bf8c      	ite	hi
 800ae06:	2301      	movhi	r3, #1
 800ae08:	2300      	movls	r3, #0
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 8191 	beq.w	800b134 <_ZN7ESP826612Send_WifiCmdEv+0x8d4>
	{
		Timerdelay=0;
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800ae18:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800ae1a:	220a      	movs	r2, #10
 800ae1c:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ae1e:	e189      	b.n	800b134 <_ZN7ESP826612Send_WifiCmdEv+0x8d4>
 800ae20:	20000bf0 	.word	0x20000bf0
 800ae24:	20000bed 	.word	0x20000bed
 800ae28:	20000bf2 	.word	0x20000bf2
 800ae2c:	20000bec 	.word	0x20000bec
 800ae30:	200003f0 	.word	0x200003f0
 800ae34:	20000bee 	.word	0x20000bee
 800ae38:	20000a25 	.word	0x20000a25
 800ae3c:	200001be 	.word	0x200001be
	case 90:   //CIPSEND

	ContentLength = 811;//106
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f240 322b 	movw	r2, #811	; 0x32b
 800ae46:	819a      	strh	r2, [r3, #12]
	memcpy(espIpAddressSt,espIpAddress,11);
 800ae48:	220b      	movs	r2, #11
 800ae4a:	49a2      	ldr	r1, [pc, #648]	; (800b0d4 <_ZN7ESP826612Send_WifiCmdEv+0x874>)
 800ae4c:	48a2      	ldr	r0, [pc, #648]	; (800b0d8 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 800ae4e:	f005 fef1 	bl	8010c34 <memcpy>
	len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&&ipAddress=%s HTTP/1.1\r\n"
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f103 00e6 	add.w	r0, r3, #230	; 0xe6
 800ae58:	4ba0      	ldr	r3, [pc, #640]	; (800b0dc <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4ba0      	ldr	r3, [pc, #640]	; (800b0e0 <_ZN7ESP826612Send_WifiCmdEv+0x880>)
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
												"Host: 122.165.206.136:%d\r\n"
												"Accept: text/html\r\n"
												"Content-Type: application/json\r\n"
												"Content-Length: %d\r\n\r\n[",machineId,espIpAddressSt,portNumber,ContentLength);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	899b      	ldrh	r3, [r3, #12]
	len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&&ipAddress=%s HTTP/1.1\r\n"
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	9200      	str	r2, [sp, #0]
 800ae6c:	4b9a      	ldr	r3, [pc, #616]	; (800b0d8 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 800ae6e:	460a      	mov	r2, r1
 800ae70:	499c      	ldr	r1, [pc, #624]	; (800b0e4 <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 800ae72:	f005 ffe5 	bl	8010e40 <siprintf>
 800ae76:	4603      	mov	r3, r0
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b9b      	ldr	r3, [pc, #620]	; (800b0e8 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800ae7c:	701a      	strb	r2, [r3, #0]
	Dyn_data_calc = len+(ContentLength);
 800ae7e:	4b9a      	ldr	r3, [pc, #616]	; (800b0e8 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	899b      	ldrh	r3, [r3, #12]
 800ae88:	4413      	add	r3, r2
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	4b97      	ldr	r3, [pc, #604]	; (800b0ec <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800ae8e:	801a      	strh	r2, [r3, #0]
	Framecheck=0;
 800ae90:	4b97      	ldr	r3, [pc, #604]	; (800b0f0 <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= 16;
 800ae96:	4b97      	ldr	r3, [pc, #604]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800ae98:	2210      	movs	r2, #16
 800ae9a:	801a      	strh	r2, [r3, #0]
	sprintf(SendData_charFormat,"AT+CIPSEND=%d\r\n",Dyn_data_calc);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	33d2      	adds	r3, #210	; 0xd2
 800aea0:	4a92      	ldr	r2, [pc, #584]	; (800b0ec <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800aea2:	8812      	ldrh	r2, [r2, #0]
 800aea4:	4994      	ldr	r1, [pc, #592]	; (800b0f8 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800aea6:	4618      	mov	r0, r3
 800aea8:	f005 ffca 	bl	8010e40 <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f103 00be 	add.w	r0, r3, #190	; 0xbe
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	33d2      	adds	r3, #210	; 0xd2
 800aeb6:	4a8f      	ldr	r2, [pc, #572]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800aeb8:	8812      	ldrh	r2, [r2, #0]
 800aeba:	4619      	mov	r1, r3
 800aebc:	f005 feba 	bl	8010c34 <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	33be      	adds	r3, #190	; 0xbe
 800aec4:	4a8b      	ldr	r2, [pc, #556]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800aec6:	8812      	ldrh	r2, [r2, #0]
 800aec8:	4619      	mov	r1, r3
 800aeca:	488c      	ldr	r0, [pc, #560]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800aecc:	f004 fb22 	bl	800f514 <HAL_UART_Transmit_IT>
	wifi_command=91;
 800aed0:	4b8b      	ldr	r3, [pc, #556]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800aed2:	225b      	movs	r2, #91	; 0x5b
 800aed4:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 800aed6:	4b8b      	ldr	r3, [pc, #556]	; (800b104 <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800aed8:	2206      	movs	r2, #6
 800aeda:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800aedc:	4b8a      	ldr	r3, [pc, #552]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 800aee2:	4b84      	ldr	r3, [pc, #528]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	4988      	ldr	r1, [pc, #544]	; (800b10c <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800aeea:	4884      	ldr	r0, [pc, #528]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800aeec:	f004 fb12 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800aef0:	e129      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 91:
	if(++Timerdelay >15)
 800aef2:	4b85      	ldr	r3, [pc, #532]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	3301      	adds	r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	4b83      	ldr	r3, [pc, #524]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	4b82      	ldr	r3, [pc, #520]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b0f      	cmp	r3, #15
 800af04:	bf8c      	ite	hi
 800af06:	2301      	movhi	r3, #1
 800af08:	2300      	movls	r3, #0
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8113 	beq.w	800b138 <_ZN7ESP826612Send_WifiCmdEv+0x8d8>
	{
		Timerdelay=0;
 800af12:	4b7d      	ldr	r3, [pc, #500]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800af14:	2200      	movs	r2, #0
 800af16:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800af18:	4b79      	ldr	r3, [pc, #484]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800af1a:	220a      	movs	r2, #10
 800af1c:	701a      	strb	r2, [r3, #0]
	}
	break;
 800af1e:	e10b      	b.n	800b138 <_ZN7ESP826612Send_WifiCmdEv+0x8d8>
	case 100:

		len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&ipAddress=%s HTTP/1.1\r\n"
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f103 00e6 	add.w	r0, r3, #230	; 0xe6
 800af26:	4b6d      	ldr	r3, [pc, #436]	; (800b0dc <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	4619      	mov	r1, r3
 800af2c:	4b6c      	ldr	r3, [pc, #432]	; (800b0e0 <_ZN7ESP826612Send_WifiCmdEv+0x880>)
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
									"Host: 122.165.206.136:%d\r\n"
									"Accept: text/html\r\n"
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",machineId,espIpAddressSt,portNumber,ContentLength);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	899b      	ldrh	r3, [r3, #12]
		len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&ipAddress=%s HTTP/1.1\r\n"
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	9200      	str	r2, [sp, #0]
 800af3a:	4b67      	ldr	r3, [pc, #412]	; (800b0d8 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 800af3c:	460a      	mov	r2, r1
 800af3e:	4974      	ldr	r1, [pc, #464]	; (800b110 <_ZN7ESP826612Send_WifiCmdEv+0x8b0>)
 800af40:	f005 ff7e 	bl	8010e40 <siprintf>
 800af44:	4603      	mov	r3, r0
 800af46:	b2da      	uxtb	r2, r3
 800af48:	4b67      	ldr	r3, [pc, #412]	; (800b0e8 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800af4a:	701a      	strb	r2, [r3, #0]
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f503 70e1 	add.w	r0, r3, #450	; 0x1c2
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	33e6      	adds	r3, #230	; 0xe6
 800af56:	4a64      	ldr	r2, [pc, #400]	; (800b0e8 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800af58:	7812      	ldrb	r2, [r2, #0]
 800af5a:	4619      	mov	r1, r3
 800af5c:	f005 fe6a 	bl	8010c34 <memcpy>
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",ContentLength);
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len); */


	NoOfdata_byte	= 	url_buffer;
 800af60:	4b6c      	ldr	r3, [pc, #432]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	b29a      	uxth	r2, r3
 800af66:	4b63      	ldr	r3, [pc, #396]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800af68:	801a      	strh	r2, [r3, #0]
	wifi_command	=	101;
 800af6a:	4b65      	ldr	r3, [pc, #404]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800af6c:	2265      	movs	r2, #101	; 0x65
 800af6e:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= url_buffer;
 800af70:	4b68      	ldr	r3, [pc, #416]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	b29a      	uxth	r2, r3
 800af76:	4b5f      	ldr	r3, [pc, #380]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800af78:	801a      	strh	r2, [r3, #0]
	Timerdelay=0;
 800af7a:	4b63      	ldr	r3, [pc, #396]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800af86:	4a58      	ldr	r2, [pc, #352]	; (800b0e8 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800af88:	7812      	ldrb	r2, [r2, #0]
 800af8a:	b292      	uxth	r2, r2
 800af8c:	4619      	mov	r1, r3
 800af8e:	485b      	ldr	r0, [pc, #364]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800af90:	f004 fac0 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800af94:	e0d7      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 101:
		NoOfdata_byte = 809;//34
 800af96:	4b57      	ldr	r3, [pc, #348]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800af98:	f240 3229 	movw	r2, #809	; 0x329
 800af9c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,ProductionSet_uintFormat_MEM,NoOfdata_byte);
 800af9e:	4b55      	ldr	r3, [pc, #340]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	495c      	ldr	r1, [pc, #368]	; (800b118 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800afa6:	4855      	ldr	r0, [pc, #340]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800afa8:	f004 fab4 	bl	800f514 <HAL_UART_Transmit_IT>
		wifi_command=104;
 800afac:	4b54      	ldr	r3, [pc, #336]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800afae:	2268      	movs	r2, #104	; 0x68
 800afb0:	701a      	strb	r2, [r3, #0]
	break;
 800afb2:	e0c8      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 104:
		url_buffer=0;
 800afb4:	4b57      	ldr	r3, [pc, #348]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	701a      	strb	r2, [r3, #0]
		OnlineData_buffer[url_buffer] =  ']';
 800afba:	4b56      	ldr	r3, [pc, #344]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	4b56      	ldr	r3, [pc, #344]	; (800b11c <_ZN7ESP826612Send_WifiCmdEv+0x8bc>)
 800afc2:	215d      	movs	r1, #93	; 0x5d
 800afc4:	5499      	strb	r1, [r3, r2]
		url_buffer++;
 800afc6:	4b53      	ldr	r3, [pc, #332]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	4b51      	ldr	r3, [pc, #324]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800afd0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 800afd2:	4b50      	ldr	r3, [pc, #320]	; (800b114 <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	461a      	mov	r2, r3
 800afda:	4950      	ldr	r1, [pc, #320]	; (800b11c <_ZN7ESP826612Send_WifiCmdEv+0x8bc>)
 800afdc:	4847      	ldr	r0, [pc, #284]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800afde:	f004 fa99 	bl	800f514 <HAL_UART_Transmit_IT>
		Rxseqdecoder=7;
 800afe2:	4b48      	ldr	r3, [pc, #288]	; (800b104 <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800afe4:	2207      	movs	r2, #7
 800afe6:	701a      	strb	r2, [r3, #0]
		wifi_command=106;
 800afe8:	4b45      	ldr	r3, [pc, #276]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800afea:	226a      	movs	r2, #106	; 0x6a
 800afec:	701a      	strb	r2, [r3, #0]
	break;
 800afee:	e0aa      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 106:
		Rxseqdecoder=7;
 800aff0:	4b44      	ldr	r3, [pc, #272]	; (800b104 <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800aff2:	2207      	movs	r2, #7
 800aff4:	701a      	strb	r2, [r3, #0]
		wifi_command=105;
 800aff6:	4b42      	ldr	r3, [pc, #264]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800aff8:	2269      	movs	r2, #105	; 0x69
 800affa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,endCommand,2);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	330e      	adds	r3, #14
 800b000:	2202      	movs	r2, #2
 800b002:	4619      	mov	r1, r3
 800b004:	483d      	ldr	r0, [pc, #244]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800b006:	f004 fa85 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800b00a:	e09c      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 105:
		if(++Timerdelay>20)
 800b00c:	4b3e      	ldr	r3, [pc, #248]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	3301      	adds	r3, #1
 800b012:	b2da      	uxtb	r2, r3
 800b014:	4b3c      	ldr	r3, [pc, #240]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	4b3b      	ldr	r3, [pc, #236]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b14      	cmp	r3, #20
 800b01e:	bf8c      	ite	hi
 800b020:	2301      	movhi	r3, #1
 800b022:	2300      	movls	r3, #0
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 8088 	beq.w	800b13c <_ZN7ESP826612Send_WifiCmdEv+0x8dc>
	   {
		Timerdelay=0;
 800b02c:	4b36      	ldr	r3, [pc, #216]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800b032:	4b33      	ldr	r3, [pc, #204]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b034:	220a      	movs	r2, #10
 800b036:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800b038:	e080      	b.n	800b13c <_ZN7ESP826612Send_WifiCmdEv+0x8dc>
	case 102:

	   if(++Timerdelay>5)
 800b03a:	4b33      	ldr	r3, [pc, #204]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	b2da      	uxtb	r2, r3
 800b042:	4b31      	ldr	r3, [pc, #196]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	4b30      	ldr	r3, [pc, #192]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b05      	cmp	r3, #5
 800b04c:	bf8c      	ite	hi
 800b04e:	2301      	movhi	r3, #1
 800b050:	2300      	movls	r3, #0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b00      	cmp	r3, #0
 800b056:	d073      	beq.n	800b140 <_ZN7ESP826612Send_WifiCmdEv+0x8e0>
	   {
		Timerdelay=0;
 800b058:	4b2b      	ldr	r3, [pc, #172]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800b05e:	4b28      	ldr	r3, [pc, #160]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b060:	2232      	movs	r2, #50	; 0x32
 800b062:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800b064:	e06c      	b.n	800b140 <_ZN7ESP826612Send_WifiCmdEv+0x8e0>
	case 103:
	   if(++Timerdelay>2)
 800b066:	4b28      	ldr	r3, [pc, #160]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	3301      	adds	r3, #1
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	4b26      	ldr	r3, [pc, #152]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	4b25      	ldr	r3, [pc, #148]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b02      	cmp	r3, #2
 800b078:	bf8c      	ite	hi
 800b07a:	2301      	movhi	r3, #1
 800b07c:	2300      	movls	r3, #0
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d05f      	beq.n	800b144 <_ZN7ESP826612Send_WifiCmdEv+0x8e4>
	   {
		Timerdelay=0;
 800b084:	4b20      	ldr	r3, [pc, #128]	; (800b108 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800b08a:	4b1d      	ldr	r3, [pc, #116]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b08c:	220a      	movs	r2, #10
 800b08e:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800b090:	e058      	b.n	800b144 <_ZN7ESP826612Send_WifiCmdEv+0x8e4>
	case 110:
	NoOfdata_byte=12;
 800b092:	4b18      	ldr	r3, [pc, #96]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800b094:	220c      	movs	r2, #12
 800b096:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 800b098:	4b19      	ldr	r3, [pc, #100]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b09a:	2232      	movs	r2, #50	; 0x32
 800b09c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f203 239e 	addw	r3, r3, #670	; 0x29e
 800b0a4:	4a13      	ldr	r2, [pc, #76]	; (800b0f4 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800b0a6:	8812      	ldrh	r2, [r2, #0]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4814      	ldr	r0, [pc, #80]	; (800b0fc <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800b0ac:	f004 fa32 	bl	800f514 <HAL_UART_Transmit_IT>
	break;
 800b0b0:	e049      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	case 120:
	break;
	default:
	wifi_command=5;
 800b0b2:	4b13      	ldr	r3, [pc, #76]	; (800b100 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b0b4:	2205      	movs	r2, #5
 800b0b6:	701a      	strb	r2, [r3, #0]
	break;
 800b0b8:	e045      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b0ba:	bf00      	nop
 800b0bc:	e043      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b0be:	bf00      	nop
 800b0c0:	e041      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b0c2:	bf00      	nop
 800b0c4:	e03f      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b0c6:	bf00      	nop
 800b0c8:	e03d      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b0ca:	bf00      	nop
 800b0cc:	e03b      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b0ce:	bf00      	nop
 800b0d0:	e039      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
 800b0d2:	bf00      	nop
 800b0d4:	20000124 	.word	0x20000124
 800b0d8:	20000f50 	.word	0x20000f50
 800b0dc:	2000078a 	.word	0x2000078a
 800b0e0:	2000078e 	.word	0x2000078e
 800b0e4:	08011850 	.word	0x08011850
 800b0e8:	20000018 	.word	0x20000018
 800b0ec:	20000bf4 	.word	0x20000bf4
 800b0f0:	20000bf8 	.word	0x20000bf8
 800b0f4:	20000bf0 	.word	0x20000bf0
 800b0f8:	080118e8 	.word	0x080118e8
 800b0fc:	200003f0 	.word	0x200003f0
 800b100:	20000a25 	.word	0x20000a25
 800b104:	20000bed 	.word	0x20000bed
 800b108:	20000bf2 	.word	0x20000bf2
 800b10c:	20000a28 	.word	0x20000a28
 800b110:	080118f8 	.word	0x080118f8
 800b114:	20000bf3 	.word	0x20000bf3
 800b118:	20000bfc 	.word	0x20000bfc
 800b11c:	20000b24 	.word	0x20000b24
	break;
 800b120:	bf00      	nop
 800b122:	e010      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b124:	bf00      	nop
 800b126:	e00e      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b128:	bf00      	nop
 800b12a:	e00c      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b12c:	bf00      	nop
 800b12e:	e00a      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b130:	bf00      	nop
 800b132:	e008      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b134:	bf00      	nop
 800b136:	e006      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b138:	bf00      	nop
 800b13a:	e004      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b13c:	bf00      	nop
 800b13e:	e002      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <_ZN7ESP826612Send_WifiCmdEv+0x8e6>
	break;
 800b144:	bf00      	nop
 }
}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop

0800b150 <_ZN7ESP826615RefreshWifiDataEv>:

void ESP8266::RefreshWifiData()
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b090      	sub	sp, #64	; 0x40
 800b154:	af0e      	add	r7, sp, #56	; 0x38
 800b156:	6078      	str	r0, [r7, #4]

	if((RefreshBlockInfo==0)||(powercycleRefresh==1))
 800b158:	4b93      	ldr	r3, [pc, #588]	; (800b3a8 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d004      	beq.n	800b16a <_ZN7ESP826615RefreshWifiDataEv+0x1a>
 800b160:	4b92      	ldr	r3, [pc, #584]	; (800b3ac <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b01      	cmp	r3, #1
 800b166:	f040 811a 	bne.w	800b39e <_ZN7ESP826615RefreshWifiDataEv+0x24e>
	{
		RefreshBlockInfo=1;
 800b16a:	4b8f      	ldr	r3, [pc, #572]	; (800b3a8 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	701a      	strb	r2, [r3, #0]
		if((currentdata==0)&&(powercycleRefresh==0))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800b176:	2b00      	cmp	r3, #0
 800b178:	d115      	bne.n	800b1a6 <_ZN7ESP826615RefreshWifiDataEv+0x56>
 800b17a:	4b8c      	ldr	r3, [pc, #560]	; (800b3ac <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d111      	bne.n	800b1a6 <_ZN7ESP826615RefreshWifiDataEv+0x56>
		{
			BlockStatusOffline[sectorTosend]=0;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800b188:	461a      	mov	r2, r3
 800b18a:	4b89      	ldr	r3, [pc, #548]	; (800b3b0 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b18c:	2100      	movs	r1, #0
 800b18e:	5499      	strb	r1, [r3, r2]
			W25qxx_EraseSector(601);
 800b190:	f240 2059 	movw	r0, #601	; 0x259
 800b194:	f7f8 faf8 	bl	8003788 <W25qxx_EraseSector>
			W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 800b198:	2328      	movs	r3, #40	; 0x28
 800b19a:	2200      	movs	r2, #0
 800b19c:	f240 2159 	movw	r1, #601	; 0x259
 800b1a0:	4883      	ldr	r0, [pc, #524]	; (800b3b0 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b1a2:	f7f8 fccd 	bl	8003b40 <W25qxx_WriteSector>
		}
		powercycleRefresh=0;
 800b1a6:	4b81      	ldr	r3, [pc, #516]	; (800b3ac <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	701a      	strb	r2, [r3, #0]
		for(j=0;j<=32;j++)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	729a      	strb	r2, [r3, #10]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	7a9b      	ldrb	r3, [r3, #10]
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d827      	bhi.n	800b20a <_ZN7ESP826615RefreshWifiDataEv+0xba>
		{
			if(BlockStatusOffline[j] == 1)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	7a9b      	ldrb	r3, [r3, #10]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4b7b      	ldr	r3, [pc, #492]	; (800b3b0 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b1c2:	5c9b      	ldrb	r3, [r3, r2]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d109      	bne.n	800b1dc <_ZN7ESP826615RefreshWifiDataEv+0x8c>
			{
				sectorTosend=j;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7a9a      	ldrb	r2, [r3, #10]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
				currentdata=0;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
				break;
 800b1da:	e016      	b.n	800b20a <_ZN7ESP826615RefreshWifiDataEv+0xba>
			}
			if(BlockStatusOffline[j] == 2)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	7a9b      	ldrb	r3, [r3, #10]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4b73      	ldr	r3, [pc, #460]	; (800b3b0 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b1e4:	5c9b      	ldrb	r3, [r3, r2]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d108      	bne.n	800b1fc <_ZN7ESP826615RefreshWifiDataEv+0xac>
			{
				sectorTosend=j;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7a9a      	ldrb	r2, [r3, #10]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
				currentdata=1;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
		for(j=0;j<=32;j++)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7a9b      	ldrb	r3, [r3, #10]
 800b200:	3301      	adds	r3, #1
 800b202:	b2da      	uxtb	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	729a      	strb	r2, [r3, #10]
 800b208:	e7d3      	b.n	800b1b2 <_ZN7ESP826615RefreshWifiDataEv+0x62>
			}
		}

		sectorRead = 16*sectorTosend;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800b210:	b29b      	uxth	r3, r3
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	b29a      	uxth	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		if(W25qxx_IsEmptySector(sectorRead,0,53))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b222:	2235      	movs	r2, #53	; 0x35
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f7f8 fb1c 	bl	8003864 <W25qxx_IsEmptySector>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d008      	beq.n	800b244 <_ZN7ESP826615RefreshWifiDataEv+0xf4>
		{
			memcpy(ProductionSet_uintFormat_MEM,dummydata,54);}
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 800b238:	2236      	movs	r2, #54	; 0x36
 800b23a:	4619      	mov	r1, r3
 800b23c:	485d      	ldr	r0, [pc, #372]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b23e:	f005 fcf9 	bl	8010c34 <memcpy>
 800b242:	e00b      	b.n	800b25c <_ZN7ESP826615RefreshWifiDataEv+0x10c>
		else
		{
			W25qxx_ReadSector(ProductionSet_uintFormat_MEM,sectorRead,0,53);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b24a:	4619      	mov	r1, r3
 800b24c:	2335      	movs	r3, #53	; 0x35
 800b24e:	2200      	movs	r2, #0
 800b250:	4858      	ldr	r0, [pc, #352]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b252:	f7f8 fd55 	bl	8003d00 <W25qxx_ReadSector>
			if(ProductionSet_uintFormat_MEM[0] != 34 || ProductionSet_uintFormat_MEM[52] != 34)
 800b256:	4b57      	ldr	r3, [pc, #348]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b22      	cmp	r3, #34	; 0x22
			{
			//	memcpy(ProductionSet_uintFormat_MEM,dummydata,54);
			}
		}
		sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f203 20b6 	addw	r0, r3, #694	; 0x2b6
 800b262:	4b55      	ldr	r3, [pc, #340]	; (800b3b8 <_ZN7ESP826615RefreshWifiDataEv+0x268>)
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	2322      	movs	r3, #34	; 0x22
 800b26a:	930d      	str	r3, [sp, #52]	; 0x34
 800b26c:	920c      	str	r2, [sp, #48]	; 0x30
 800b26e:	2300      	movs	r3, #0
 800b270:	930b      	str	r3, [sp, #44]	; 0x2c
 800b272:	2300      	movs	r3, #0
 800b274:	930a      	str	r3, [sp, #40]	; 0x28
 800b276:	2300      	movs	r3, #0
 800b278:	9309      	str	r3, [sp, #36]	; 0x24
 800b27a:	2300      	movs	r3, #0
 800b27c:	9308      	str	r3, [sp, #32]
 800b27e:	2300      	movs	r3, #0
 800b280:	9307      	str	r3, [sp, #28]
 800b282:	2300      	movs	r3, #0
 800b284:	9306      	str	r3, [sp, #24]
 800b286:	2300      	movs	r3, #0
 800b288:	9305      	str	r3, [sp, #20]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	2300      	movs	r3, #0
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	2300      	movs	r3, #0
 800b294:	9302      	str	r3, [sp, #8]
 800b296:	2300      	movs	r3, #0
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2222      	movs	r2, #34	; 0x22
 800b2a2:	4946      	ldr	r1, [pc, #280]	; (800b3bc <_ZN7ESP826615RefreshWifiDataEv+0x26c>)
 800b2a4:	f005 fdcc 	bl	8010e40 <siprintf>
						0,0,0,0,0,0,0,0,0,0,0,SectorPos,'"');
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b2b6:	2b0e      	cmp	r3, #14
 800b2b8:	d871      	bhi.n	800b39e <_ZN7ESP826615RefreshWifiDataEv+0x24e>
		{
			ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	2336      	movs	r3, #54	; 0x36
 800b2c4:	fb02 f303 	mul.w	r3, r2, r3
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	4a3a      	ldr	r2, [pc, #232]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b2cc:	212c      	movs	r1, #44	; 0x2c
 800b2ce:	54d1      	strb	r1, [r2, r3]
			if(W25qxx_IsEmptySector(sectorRead+scanForUrl,0,53))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b2de:	4413      	add	r3, r2
 800b2e0:	2235      	movs	r2, #53	; 0x35
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7f8 fabd 	bl	8003864 <W25qxx_IsEmptySector>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d010      	beq.n	800b312 <_ZN7ESP826615RefreshWifiDataEv+0x1c2>
			{
				memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	2336      	movs	r3, #54	; 0x36
 800b2fa:	fb02 f303 	mul.w	r3, r2, r3
 800b2fe:	4a2d      	ldr	r2, [pc, #180]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b300:	1898      	adds	r0, r3, r2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 800b308:	2236      	movs	r2, #54	; 0x36
 800b30a:	4619      	mov	r1, r3
 800b30c:	f005 fc92 	bl	8010c34 <memcpy>
 800b310:	e03c      	b.n	800b38c <_ZN7ESP826615RefreshWifiDataEv+0x23c>
	//			W25qxx_EraseSector(sectorRead+scanForUrl);
	//			W25qxx_WriteSector(ProductionSet_uintFormat_MEM,(sectorRead+scanForUrl),0,54);
			}
			else
			{
				W25qxx_ReadSector(&ProductionSet_uintFormat_MEM[54*scanForUrl],sectorRead+scanForUrl,0,53);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b318:	461a      	mov	r2, r3
 800b31a:	2336      	movs	r3, #54	; 0x36
 800b31c:	fb02 f303 	mul.w	r3, r2, r3
 800b320:	4a24      	ldr	r2, [pc, #144]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b322:	1898      	adds	r0, r3, r2
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b32a:	461a      	mov	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b332:	4413      	add	r3, r2
 800b334:	4619      	mov	r1, r3
 800b336:	2335      	movs	r3, #53	; 0x35
 800b338:	2200      	movs	r2, #0
 800b33a:	f7f8 fce1 	bl	8003d00 <W25qxx_ReadSector>
				if(ProductionSet_uintFormat_MEM[54*scanForUrl] != 34 || ProductionSet_uintFormat_MEM[(54*scanForUrl)+52] != 34)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b344:	461a      	mov	r2, r3
 800b346:	2336      	movs	r3, #54	; 0x36
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	4a19      	ldr	r2, [pc, #100]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b34e:	5cd3      	ldrb	r3, [r2, r3]
 800b350:	2b22      	cmp	r3, #34	; 0x22
 800b352:	d10b      	bne.n	800b36c <_ZN7ESP826615RefreshWifiDataEv+0x21c>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b35a:	461a      	mov	r2, r3
 800b35c:	2336      	movs	r3, #54	; 0x36
 800b35e:	fb02 f303 	mul.w	r3, r2, r3
 800b362:	3334      	adds	r3, #52	; 0x34
 800b364:	4a13      	ldr	r2, [pc, #76]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b366:	5cd3      	ldrb	r3, [r2, r3]
 800b368:	2b22      	cmp	r3, #34	; 0x22
 800b36a:	d00f      	beq.n	800b38c <_ZN7ESP826615RefreshWifiDataEv+0x23c>
				{
					memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b372:	461a      	mov	r2, r3
 800b374:	2336      	movs	r3, #54	; 0x36
 800b376:	fb02 f303 	mul.w	r3, r2, r3
 800b37a:	4a0e      	ldr	r2, [pc, #56]	; (800b3b4 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b37c:	1898      	adds	r0, r3, r2
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 800b384:	2236      	movs	r2, #54	; 0x36
 800b386:	4619      	mov	r1, r3
 800b388:	f005 fc54 	bl	8010c34 <memcpy>
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b392:	3301      	adds	r3, #1
 800b394:	b2da      	uxtb	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800b39c:	e788      	b.n	800b2b0 <_ZN7ESP826615RefreshWifiDataEv+0x160>
	{
		ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
		memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
	}
#endif
}
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20000bf6 	.word	0x20000bf6
 800b3ac:	20000bf7 	.word	0x20000bf7
 800b3b0:	200009f0 	.word	0x200009f0
 800b3b4:	20000bfc 	.word	0x20000bfc
 800b3b8:	200009ee 	.word	0x200009ee
 800b3bc:	0801198c 	.word	0x0801198c

0800b3c0 <_ZN7ESP82664InitEv>:

void ESP8266::Init(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b090      	sub	sp, #64	; 0x40
 800b3c4:	af0e      	add	r7, sp, #56	; 0x38
 800b3c6:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f203 20b6 	addw	r0, r3, #694	; 0x2b6
 800b3ce:	2322      	movs	r3, #34	; 0x22
 800b3d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	930c      	str	r3, [sp, #48]	; 0x30
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3da:	2300      	movs	r3, #0
 800b3dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9308      	str	r3, [sp, #32]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9307      	str	r3, [sp, #28]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9306      	str	r3, [sp, #24]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9305      	str	r3, [sp, #20]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9303      	str	r3, [sp, #12]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	9302      	str	r3, [sp, #8]
 800b3fe:	2300      	movs	r3, #0
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	2300      	movs	r3, #0
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	2300      	movs	r3, #0
 800b408:	2222      	movs	r2, #34	; 0x22
 800b40a:	4908      	ldr	r1, [pc, #32]	; (800b42c <_ZN7ESP82664InitEv+0x6c>)
 800b40c:	f005 fd18 	bl	8010e40 <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <_ZN7ESP82664InitEv+0x70>)
 800b412:	2201      	movs	r2, #1
 800b414:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 800b416:	4b07      	ldr	r3, [pc, #28]	; (800b434 <_ZN7ESP82664InitEv+0x74>)
 800b418:	2205      	movs	r2, #5
 800b41a:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 800b41c:	4b06      	ldr	r3, [pc, #24]	; (800b438 <_ZN7ESP82664InitEv+0x78>)
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
}
 800b422:	bf00      	nop
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	0801198c 	.word	0x0801198c
 800b430:	20000bf7 	.word	0x20000bf7
 800b434:	20000a25 	.word	0x20000a25
 800b438:	20000bf6 	.word	0x20000bf6

0800b43c <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	f5ad 5dd4 	sub.w	sp, sp, #6784	; 0x1a80
 800b442:	af00      	add	r7, sp, #0
	GLCD glcd;
 800b444:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800b448:	f103 031c 	add.w	r3, r3, #28
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7f9 f87f 	bl	8004550 <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 800b452:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800b456:	4618      	mov	r0, r3
 800b458:	f7fd ff04 	bl	8009264 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 800b45c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b460:	3b08      	subs	r3, #8
 800b462:	4618      	mov	r0, r3
 800b464:	f7f8 fe3e 	bl	80040e4 <_ZN14DisplayRoutineC1Ev>
	LpdcLogic lpdcLogicInst;
 800b468:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b46c:	3b14      	subs	r3, #20
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f8 fcd2 	bl	8003e18 <_ZN9LpdcLogicC1Ev>
	OfflineStorage offlineStorageInst;
 800b474:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b478:	3b1c      	subs	r3, #28
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe f8e0 	bl	8009640 <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 800b480:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b484:	3b08      	subs	r3, #8
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe ffe2 	bl	800a450 <_ZN7ESP8266C1Ev>
	SHIFT shiftInst;
 800b48c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b490:	4618      	mov	r0, r3
 800b492:	f7fe febd 	bl	800a210 <_ZN5SHIFTC1Ev>
	Dwinhmi dwinhmi;
 800b496:	463b      	mov	r3, r7
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fd fb01 	bl	8008aa0 <_ZN7DwinhmiC1Ev>

	displayRoutineInst.Init();
 800b49e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b4a2:	3b08      	subs	r3, #8
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f9 f81b 	bl	80044e0 <_ZN14DisplayRoutine4InitEv>
	//offlineStorageInst.ECUProductionInit();/* Not needed*/
	offlineStorageInst.ReadOfflinedataInit();
 800b4aa:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b4ae:	3b1c      	subs	r3, #28
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fe09 	bl	800a0c8 <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	offlineStorageInst.specialMacDataRead();
 800b4b6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b4ba:	3b1c      	subs	r3, #28
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fe fd47 	bl	8009f50 <_ZN14OfflineStorage18specialMacDataReadEv>
	offlineStorageInst.processDataRead();
 800b4c2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b4c6:	3b1c      	subs	r3, #28
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fda1 	bl	800a010 <_ZN14OfflineStorage15processDataReadEv>
	offlineStorageInst.dwinRxDataRead();
 800b4ce:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b4d2:	3b1c      	subs	r3, #28
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fd61 	bl	8009f9c <_ZN14OfflineStorage14dwinRxDataReadEv>
	offlineStorageInst.dwinCloudDataRead();
 800b4da:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b4de:	3b1c      	subs	r3, #28
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe fcd1 	bl	8009e88 <_ZN14OfflineStorage17dwinCloudDataReadEv>
	esp8266Inst.Init();
 800b4e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b4ea:	3b08      	subs	r3, #8
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff ff67 	bl	800b3c0 <_ZN7ESP82664InitEv>
	TxSeqComplete=1;
 800b4f2:	4b30      	ldr	r3, [pc, #192]	; (800b5b4 <cppMain+0x178>)
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	701a      	strb	r2, [r3, #0]
	Sim_Trigger = GPIO_PIN_SET;
 800b4f8:	4b2f      	ldr	r3, [pc, #188]	; (800b5b8 <cppMain+0x17c>)
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(Flag1MS)
 800b4fe:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <cppMain+0x180>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d008      	beq.n	800b518 <cppMain+0xdc>
		{
			Flag1MS=0;
 800b506:	4b2d      	ldr	r3, [pc, #180]	; (800b5bc <cppMain+0x180>)
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]
			lpdcLogicInst.run();
 800b50c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b510:	3b14      	subs	r3, #20
 800b512:	4618      	mov	r0, r3
 800b514:	f7f8 fcb4 	bl	8003e80 <_ZN9LpdcLogic3runEv>
		}
 		if(Flag100milliSeconds)
 800b518:	4b29      	ldr	r3, [pc, #164]	; (800b5c0 <cppMain+0x184>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d029      	beq.n	800b574 <cppMain+0x138>
		{
			Flag100milliSeconds=0;
 800b520:	4b27      	ldr	r3, [pc, #156]	; (800b5c0 <cppMain+0x184>)
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 800b526:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b52a:	3b1c      	subs	r3, #28
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fe f8b7 	bl	80096a0 <_ZN14OfflineStorage3runEv>
			offlineStorageInst.processDataWrite();
 800b532:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b536:	3b1c      	subs	r3, #28
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe fc31 	bl	8009da0 <_ZN14OfflineStorage16processDataWriteEv>
			offlineStorageInst.specialMacDataWrite();
 800b53e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b542:	3b1c      	subs	r3, #28
 800b544:	4618      	mov	r0, r3
 800b546:	f7fe fb05 	bl	8009b54 <_ZN14OfflineStorage19specialMacDataWriteEv>
			offlineStorageInst.dwinRxDataStore();
 800b54a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b54e:	3b1c      	subs	r3, #28
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe fb2f 	bl	8009bb4 <_ZN14OfflineStorage15dwinRxDataStoreEv>
			offlineStorageInst.dwinCloudDataStore();
 800b556:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b55a:	3b1c      	subs	r3, #28
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe fb69 	bl	8009c34 <_ZN14OfflineStorage18dwinCloudDataStoreEv>

			ModbusInst.ModbusReadTransaction();
 800b562:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800b566:	4618      	mov	r0, r3
 800b568:	f7fd fec6 	bl	80092f8 <_ZN9Modbusrtu21ModbusReadTransactionEv>
			dwinhmi.dwinFrame();
 800b56c:	463b      	mov	r3, r7
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fd faca 	bl	8008b08 <_ZN7Dwinhmi9dwinFrameEv>
		}
		if(Flag1Second)
 800b574:	4b13      	ldr	r3, [pc, #76]	; (800b5c4 <cppMain+0x188>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d017      	beq.n	800b5ac <cppMain+0x170>
		{
			Flag1Second=0;
 800b57c:	4b11      	ldr	r3, [pc, #68]	; (800b5c4 <cppMain+0x188>)
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 800b582:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b586:	3b08      	subs	r3, #8
 800b588:	4618      	mov	r0, r3
 800b58a:	f7f8 fe33 	bl	80041f4 <_ZN14DisplayRoutine3runEv>
			esp8266Inst.run();
 800b58e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b592:	3b08      	subs	r3, #8
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff f954 	bl	800a842 <_ZN7ESP82663runEv>
			shiftInst.run();
 800b59a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe ff4a 	bl	800a438 <_ZN5SHIFT3runEv>
			dwinhmi.dwinDecoder();
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fd fc4e 	bl	8008e48 <_ZN7Dwinhmi11dwinDecoderEv>
		}
		ESPRXDataSeg();
 800b5ac:	f7f4 ffea 	bl	8000584 <ESPRXDataSeg>
		if(Flag1MS)
 800b5b0:	e7a5      	b.n	800b4fe <cppMain+0xc2>
 800b5b2:	bf00      	nop
 800b5b4:	2000091f 	.word	0x2000091f
 800b5b8:	20000764 	.word	0x20000764
 800b5bc:	200001b8 	.word	0x200001b8
 800b5c0:	200001ba 	.word	0x200001ba
 800b5c4:	200001b9 	.word	0x200001b9

0800b5c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b5d2:	2003      	movs	r0, #3
 800b5d4:	f000 f960 	bl	800b898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b5d8:	200f      	movs	r0, #15
 800b5da:	f000 f80d 	bl	800b5f8 <HAL_InitTick>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	71fb      	strb	r3, [r7, #7]
 800b5e8:	e001      	b.n	800b5ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b5ea:	f7f7 fae5 	bl	8002bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b604:	4b17      	ldr	r3, [pc, #92]	; (800b664 <HAL_InitTick+0x6c>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d023      	beq.n	800b654 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b60c:	4b16      	ldr	r3, [pc, #88]	; (800b668 <HAL_InitTick+0x70>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	4b14      	ldr	r3, [pc, #80]	; (800b664 <HAL_InitTick+0x6c>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b61a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b622:	4618      	mov	r0, r3
 800b624:	f000 f96d 	bl	800b902 <HAL_SYSTICK_Config>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10f      	bne.n	800b64e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2b0f      	cmp	r3, #15
 800b632:	d809      	bhi.n	800b648 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b634:	2200      	movs	r2, #0
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	f000 f937 	bl	800b8ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b640:	4a0a      	ldr	r2, [pc, #40]	; (800b66c <HAL_InitTick+0x74>)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	e007      	b.n	800b658 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e004      	b.n	800b658 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	73fb      	strb	r3, [r7, #15]
 800b652:	e001      	b.n	800b658 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20000020 	.word	0x20000020
 800b668:	20000014 	.word	0x20000014
 800b66c:	2000001c 	.word	0x2000001c

0800b670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b674:	4b06      	ldr	r3, [pc, #24]	; (800b690 <HAL_IncTick+0x20>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	4b06      	ldr	r3, [pc, #24]	; (800b694 <HAL_IncTick+0x24>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4413      	add	r3, r2
 800b680:	4a04      	ldr	r2, [pc, #16]	; (800b694 <HAL_IncTick+0x24>)
 800b682:	6013      	str	r3, [r2, #0]
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	20000020 	.word	0x20000020
 800b694:	20000f60 	.word	0x20000f60

0800b698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0
  return uwTick;
 800b69c:	4b03      	ldr	r3, [pc, #12]	; (800b6ac <HAL_GetTick+0x14>)
 800b69e:	681b      	ldr	r3, [r3, #0]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	20000f60 	.word	0x20000f60

0800b6b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b6b8:	f7ff ffee 	bl	800b698 <HAL_GetTick>
 800b6bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c8:	d005      	beq.n	800b6d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b6ca:	4b0a      	ldr	r3, [pc, #40]	; (800b6f4 <HAL_Delay+0x44>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b6d6:	bf00      	nop
 800b6d8:	f7ff ffde 	bl	800b698 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d8f7      	bhi.n	800b6d8 <HAL_Delay+0x28>
  {
  }
}
 800b6e8:	bf00      	nop
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000020 	.word	0x20000020

0800b6f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b708:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <__NVIC_SetPriorityGrouping+0x44>)
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b714:	4013      	ands	r3, r2
 800b716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b72a:	4a04      	ldr	r2, [pc, #16]	; (800b73c <__NVIC_SetPriorityGrouping+0x44>)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	60d3      	str	r3, [r2, #12]
}
 800b730:	bf00      	nop
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	e000ed00 	.word	0xe000ed00

0800b740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b744:	4b04      	ldr	r3, [pc, #16]	; (800b758 <__NVIC_GetPriorityGrouping+0x18>)
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	0a1b      	lsrs	r3, r3, #8
 800b74a:	f003 0307 	and.w	r3, r3, #7
}
 800b74e:	4618      	mov	r0, r3
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	e000ed00 	.word	0xe000ed00

0800b75c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	db0b      	blt.n	800b786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	f003 021f 	and.w	r2, r3, #31
 800b774:	4907      	ldr	r1, [pc, #28]	; (800b794 <__NVIC_EnableIRQ+0x38>)
 800b776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b77a:	095b      	lsrs	r3, r3, #5
 800b77c:	2001      	movs	r0, #1
 800b77e:	fa00 f202 	lsl.w	r2, r0, r2
 800b782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	e000e100 	.word	0xe000e100

0800b798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	6039      	str	r1, [r7, #0]
 800b7a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db0a      	blt.n	800b7c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	490c      	ldr	r1, [pc, #48]	; (800b7e4 <__NVIC_SetPriority+0x4c>)
 800b7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b6:	0112      	lsls	r2, r2, #4
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7c0:	e00a      	b.n	800b7d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	4908      	ldr	r1, [pc, #32]	; (800b7e8 <__NVIC_SetPriority+0x50>)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	f003 030f 	and.w	r3, r3, #15
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	0112      	lsls	r2, r2, #4
 800b7d2:	b2d2      	uxtb	r2, r2
 800b7d4:	440b      	add	r3, r1
 800b7d6:	761a      	strb	r2, [r3, #24]
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	e000e100 	.word	0xe000e100
 800b7e8:	e000ed00 	.word	0xe000ed00

0800b7ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b089      	sub	sp, #36	; 0x24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f003 0307 	and.w	r3, r3, #7
 800b7fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	f1c3 0307 	rsb	r3, r3, #7
 800b806:	2b04      	cmp	r3, #4
 800b808:	bf28      	it	cs
 800b80a:	2304      	movcs	r3, #4
 800b80c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	3304      	adds	r3, #4
 800b812:	2b06      	cmp	r3, #6
 800b814:	d902      	bls.n	800b81c <NVIC_EncodePriority+0x30>
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	3b03      	subs	r3, #3
 800b81a:	e000      	b.n	800b81e <NVIC_EncodePriority+0x32>
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b820:	f04f 32ff 	mov.w	r2, #4294967295
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	fa02 f303 	lsl.w	r3, r2, r3
 800b82a:	43da      	mvns	r2, r3
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	401a      	ands	r2, r3
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b834:	f04f 31ff 	mov.w	r1, #4294967295
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	fa01 f303 	lsl.w	r3, r1, r3
 800b83e:	43d9      	mvns	r1, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b844:	4313      	orrs	r3, r2
         );
}
 800b846:	4618      	mov	r0, r3
 800b848:	3724      	adds	r7, #36	; 0x24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
	...

0800b854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3b01      	subs	r3, #1
 800b860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b864:	d301      	bcc.n	800b86a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b866:	2301      	movs	r3, #1
 800b868:	e00f      	b.n	800b88a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b86a:	4a0a      	ldr	r2, [pc, #40]	; (800b894 <SysTick_Config+0x40>)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3b01      	subs	r3, #1
 800b870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b872:	210f      	movs	r1, #15
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	f7ff ff8e 	bl	800b798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <SysTick_Config+0x40>)
 800b87e:	2200      	movs	r2, #0
 800b880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b882:	4b04      	ldr	r3, [pc, #16]	; (800b894 <SysTick_Config+0x40>)
 800b884:	2207      	movs	r2, #7
 800b886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	e000e010 	.word	0xe000e010

0800b898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7ff ff29 	bl	800b6f8 <__NVIC_SetPriorityGrouping>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	607a      	str	r2, [r7, #4]
 800b8ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b8c0:	f7ff ff3e 	bl	800b740 <__NVIC_GetPriorityGrouping>
 800b8c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	6978      	ldr	r0, [r7, #20]
 800b8cc:	f7ff ff8e 	bl	800b7ec <NVIC_EncodePriority>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff ff5d 	bl	800b798 <__NVIC_SetPriority>
}
 800b8de:	bf00      	nop
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b8f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff ff31 	bl	800b75c <__NVIC_EnableIRQ>
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ffa2 	bl	800b854 <SysTick_Config>
 800b910:	4603      	mov	r3, r0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d008      	beq.n	800b944 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2204      	movs	r2, #4
 800b936:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e022      	b.n	800b98a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f022 020e 	bic.w	r2, r2, #14
 800b952:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f022 0201 	bic.w	r2, r2, #1
 800b962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b968:	f003 021c 	and.w	r2, r3, #28
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	2101      	movs	r1, #1
 800b972:	fa01 f202 	lsl.w	r2, r1, r2
 800b976:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d005      	beq.n	800b9ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2204      	movs	r2, #4
 800b9b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	73fb      	strb	r3, [r7, #15]
 800b9b8:	e029      	b.n	800ba0e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 020e 	bic.w	r2, r2, #14
 800b9c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0201 	bic.w	r2, r2, #1
 800b9d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9de:	f003 021c 	and.w	r2, r3, #28
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	fa01 f202 	lsl.w	r2, r1, r2
 800b9ec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
    }
  }
  return status;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ba26:	e154      	b.n	800bcd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	2101      	movs	r1, #1
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	fa01 f303 	lsl.w	r3, r1, r3
 800ba34:	4013      	ands	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 8146 	beq.w	800bccc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f003 0303 	and.w	r3, r3, #3
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d005      	beq.n	800ba58 <HAL_GPIO_Init+0x40>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	f003 0303 	and.w	r3, r3, #3
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d130      	bne.n	800baba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	2203      	movs	r2, #3
 800ba64:	fa02 f303 	lsl.w	r3, r2, r3
 800ba68:	43db      	mvns	r3, r3
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ba8e:	2201      	movs	r2, #1
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	fa02 f303 	lsl.w	r3, r2, r3
 800ba96:	43db      	mvns	r3, r3
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	091b      	lsrs	r3, r3, #4
 800baa4:	f003 0201 	and.w	r2, r3, #1
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	fa02 f303 	lsl.w	r3, r2, r3
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f003 0303 	and.w	r3, r3, #3
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d017      	beq.n	800baf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	2203      	movs	r2, #3
 800bad2:	fa02 f303 	lsl.w	r3, r2, r3
 800bad6:	43db      	mvns	r3, r3
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	4013      	ands	r3, r2
 800badc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	689a      	ldr	r2, [r3, #8]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	fa02 f303 	lsl.w	r3, r2, r3
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d123      	bne.n	800bb4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	08da      	lsrs	r2, r3, #3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3208      	adds	r2, #8
 800bb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	220f      	movs	r2, #15
 800bb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1e:	43db      	mvns	r3, r3
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	4013      	ands	r3, r2
 800bb24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	fa02 f303 	lsl.w	r3, r2, r3
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	08da      	lsrs	r2, r3, #3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3208      	adds	r2, #8
 800bb44:	6939      	ldr	r1, [r7, #16]
 800bb46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	2203      	movs	r2, #3
 800bb56:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5a:	43db      	mvns	r3, r3
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	4013      	ands	r3, r2
 800bb60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f003 0203 	and.w	r2, r3, #3
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80a0 	beq.w	800bccc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb8c:	4b58      	ldr	r3, [pc, #352]	; (800bcf0 <HAL_GPIO_Init+0x2d8>)
 800bb8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb90:	4a57      	ldr	r2, [pc, #348]	; (800bcf0 <HAL_GPIO_Init+0x2d8>)
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	6613      	str	r3, [r2, #96]	; 0x60
 800bb98:	4b55      	ldr	r3, [pc, #340]	; (800bcf0 <HAL_GPIO_Init+0x2d8>)
 800bb9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	60bb      	str	r3, [r7, #8]
 800bba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800bba4:	4a53      	ldr	r2, [pc, #332]	; (800bcf4 <HAL_GPIO_Init+0x2dc>)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	089b      	lsrs	r3, r3, #2
 800bbaa:	3302      	adds	r3, #2
 800bbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	220f      	movs	r2, #15
 800bbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc0:	43db      	mvns	r3, r3
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bbce:	d019      	beq.n	800bc04 <HAL_GPIO_Init+0x1ec>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a49      	ldr	r2, [pc, #292]	; (800bcf8 <HAL_GPIO_Init+0x2e0>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d013      	beq.n	800bc00 <HAL_GPIO_Init+0x1e8>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a48      	ldr	r2, [pc, #288]	; (800bcfc <HAL_GPIO_Init+0x2e4>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d00d      	beq.n	800bbfc <HAL_GPIO_Init+0x1e4>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a47      	ldr	r2, [pc, #284]	; (800bd00 <HAL_GPIO_Init+0x2e8>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d007      	beq.n	800bbf8 <HAL_GPIO_Init+0x1e0>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a46      	ldr	r2, [pc, #280]	; (800bd04 <HAL_GPIO_Init+0x2ec>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d101      	bne.n	800bbf4 <HAL_GPIO_Init+0x1dc>
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	e008      	b.n	800bc06 <HAL_GPIO_Init+0x1ee>
 800bbf4:	2307      	movs	r3, #7
 800bbf6:	e006      	b.n	800bc06 <HAL_GPIO_Init+0x1ee>
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e004      	b.n	800bc06 <HAL_GPIO_Init+0x1ee>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e002      	b.n	800bc06 <HAL_GPIO_Init+0x1ee>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e000      	b.n	800bc06 <HAL_GPIO_Init+0x1ee>
 800bc04:	2300      	movs	r3, #0
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	f002 0203 	and.w	r2, r2, #3
 800bc0c:	0092      	lsls	r2, r2, #2
 800bc0e:	4093      	lsls	r3, r2
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800bc16:	4937      	ldr	r1, [pc, #220]	; (800bcf4 <HAL_GPIO_Init+0x2dc>)
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	089b      	lsrs	r3, r3, #2
 800bc1c:	3302      	adds	r3, #2
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bc24:	4b38      	ldr	r3, [pc, #224]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	43db      	mvns	r3, r3
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	4013      	ands	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bc48:	4a2f      	ldr	r2, [pc, #188]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bc4e:	4b2e      	ldr	r3, [pc, #184]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	43db      	mvns	r3, r3
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bc72:	4a25      	ldr	r2, [pc, #148]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800bc78:	4b23      	ldr	r3, [pc, #140]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	43db      	mvns	r3, r3
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	4013      	ands	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d003      	beq.n	800bc9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bc9c:	4a1a      	ldr	r2, [pc, #104]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800bca2:	4b19      	ldr	r3, [pc, #100]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	43db      	mvns	r3, r3
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	4013      	ands	r3, r2
 800bcb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bcc6:	4a10      	ldr	r2, [pc, #64]	; (800bd08 <HAL_GPIO_Init+0x2f0>)
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f47f aea3 	bne.w	800ba28 <HAL_GPIO_Init+0x10>
  }
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	40021000 	.word	0x40021000
 800bcf4:	40010000 	.word	0x40010000
 800bcf8:	48000400 	.word	0x48000400
 800bcfc:	48000800 	.word	0x48000800
 800bd00:	48000c00 	.word	0x48000c00
 800bd04:	48001000 	.word	0x48001000
 800bd08:	40010400 	.word	0x40010400

0800bd0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	887b      	ldrh	r3, [r7, #2]
 800bd1e:	4013      	ands	r3, r2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bd24:	2301      	movs	r3, #1
 800bd26:	73fb      	strb	r3, [r7, #15]
 800bd28:	e001      	b.n	800bd2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	807b      	strh	r3, [r7, #2]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bd4c:	787b      	ldrb	r3, [r7, #1]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bd52:	887a      	ldrh	r2, [r7, #2]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bd58:	e002      	b.n	800bd60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bd5a:	887a      	ldrh	r2, [r7, #2]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800bd76:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd78:	695a      	ldr	r2, [r3, #20]
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d006      	beq.n	800bd90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd82:	4a05      	ldr	r2, [pc, #20]	; (800bd98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f6 f954 	bl	8002038 <HAL_GPIO_EXTI_Callback>
  }
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	40010400 	.word	0x40010400

0800bd9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e081      	b.n	800beb2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d106      	bne.n	800bdc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7f6 ff1c 	bl	8002c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2224      	movs	r2, #36	; 0x24
 800bdcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 0201 	bic.w	r2, r2, #1
 800bdde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bdec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bdfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d107      	bne.n	800be16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be12:	609a      	str	r2, [r3, #8]
 800be14:	e006      	b.n	800be24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800be22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d104      	bne.n	800be36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	6812      	ldr	r2, [r2, #0]
 800be40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800be44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	69d9      	ldr	r1, [r3, #28]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a1a      	ldr	r2, [r3, #32]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f042 0201 	orr.w	r2, r2, #1
 800be92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2220      	movs	r2, #32
 800be9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	4608      	mov	r0, r1
 800bec6:	4611      	mov	r1, r2
 800bec8:	461a      	mov	r2, r3
 800beca:	4603      	mov	r3, r0
 800becc:	817b      	strh	r3, [r7, #10]
 800bece:	460b      	mov	r3, r1
 800bed0:	813b      	strh	r3, [r7, #8]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b20      	cmp	r3, #32
 800bee0:	f040 80f9 	bne.w	800c0d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <HAL_I2C_Mem_Write+0x34>
 800beea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e0ed      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_I2C_Mem_Write+0x4e>
 800bf06:	2302      	movs	r3, #2
 800bf08:	e0e6      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf12:	f7ff fbc1 	bl	800b698 <HAL_GetTick>
 800bf16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	2319      	movs	r3, #25
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 fac3 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e0d1      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2221      	movs	r2, #33	; 0x21
 800bf38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2240      	movs	r2, #64	; 0x40
 800bf40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6a3a      	ldr	r2, [r7, #32]
 800bf4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bf5c:	88f8      	ldrh	r0, [r7, #6]
 800bf5e:	893a      	ldrh	r2, [r7, #8]
 800bf60:	8979      	ldrh	r1, [r7, #10]
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f9d3 	bl	800c318 <I2C_RequestMemoryWrite>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d005      	beq.n	800bf84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e0a9      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	2bff      	cmp	r3, #255	; 0xff
 800bf8c:	d90e      	bls.n	800bfac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	22ff      	movs	r2, #255	; 0xff
 800bf92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	8979      	ldrh	r1, [r7, #10]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 fc2b 	bl	800c800 <I2C_TransferConfig>
 800bfaa:	e00f      	b.n	800bfcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	8979      	ldrh	r1, [r7, #10]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 fc1a 	bl	800c800 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 faad 	bl	800c530 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e07b      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	781a      	ldrb	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c008:	3b01      	subs	r3, #1
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c014:	b29b      	uxth	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d034      	beq.n	800c084 <HAL_I2C_Mem_Write+0x1c8>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d130      	bne.n	800c084 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	2200      	movs	r2, #0
 800c02a:	2180      	movs	r1, #128	; 0x80
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f000 fa3f 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e04d      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c040:	b29b      	uxth	r3, r3
 800c042:	2bff      	cmp	r3, #255	; 0xff
 800c044:	d90e      	bls.n	800c064 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	22ff      	movs	r2, #255	; 0xff
 800c04a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c050:	b2da      	uxtb	r2, r3
 800c052:	8979      	ldrh	r1, [r7, #10]
 800c054:	2300      	movs	r3, #0
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 fbcf 	bl	800c800 <I2C_TransferConfig>
 800c062:	e00f      	b.n	800c084 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c068:	b29a      	uxth	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c072:	b2da      	uxtb	r2, r3
 800c074:	8979      	ldrh	r1, [r7, #10]
 800c076:	2300      	movs	r3, #0
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f000 fbbe 	bl	800c800 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d19e      	bne.n	800bfcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 fa8c 	bl	800c5b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e01a      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6859      	ldr	r1, [r3, #4]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <HAL_I2C_Mem_Write+0x224>)
 800c0b6:	400b      	ands	r3, r1
 800c0b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2220      	movs	r2, #32
 800c0be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e000      	b.n	800c0d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c0d6:	2302      	movs	r3, #2
  }
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	fe00e800 	.word	0xfe00e800

0800c0e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af02      	add	r7, sp, #8
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	817b      	strh	r3, [r7, #10]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	813b      	strh	r3, [r7, #8]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b20      	cmp	r3, #32
 800c108:	f040 80fd 	bne.w	800c306 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <HAL_I2C_Mem_Read+0x34>
 800c112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d105      	bne.n	800c124 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c11e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e0f1      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d101      	bne.n	800c132 <HAL_I2C_Mem_Read+0x4e>
 800c12e:	2302      	movs	r3, #2
 800c130:	e0ea      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c13a:	f7ff faad 	bl	800b698 <HAL_GetTick>
 800c13e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	2319      	movs	r3, #25
 800c146:	2201      	movs	r2, #1
 800c148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 f9af 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d001      	beq.n	800c15c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	e0d5      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2222      	movs	r2, #34	; 0x22
 800c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2240      	movs	r2, #64	; 0x40
 800c168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a3a      	ldr	r2, [r7, #32]
 800c176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c17c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c184:	88f8      	ldrh	r0, [r7, #6]
 800c186:	893a      	ldrh	r2, [r7, #8]
 800c188:	8979      	ldrh	r1, [r7, #10]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4603      	mov	r3, r0
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 f913 	bl	800c3c0 <I2C_RequestMemoryRead>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e0ad      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	2bff      	cmp	r3, #255	; 0xff
 800c1b4:	d90e      	bls.n	800c1d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	22ff      	movs	r2, #255	; 0xff
 800c1ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	8979      	ldrh	r1, [r7, #10]
 800c1c4:	4b52      	ldr	r3, [pc, #328]	; (800c310 <HAL_I2C_Mem_Read+0x22c>)
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 fb17 	bl	800c800 <I2C_TransferConfig>
 800c1d2:	e00f      	b.n	800c1f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	8979      	ldrh	r1, [r7, #10]
 800c1e6:	4b4a      	ldr	r3, [pc, #296]	; (800c310 <HAL_I2C_Mem_Read+0x22c>)
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 fb06 	bl	800c800 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2104      	movs	r1, #4
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 f956 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e07c      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c218:	b2d2      	uxtb	r2, r2
 800c21a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c22a:	3b01      	subs	r3, #1
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c236:	b29b      	uxth	r3, r3
 800c238:	3b01      	subs	r3, #1
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c244:	b29b      	uxth	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d034      	beq.n	800c2b4 <HAL_I2C_Mem_Read+0x1d0>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d130      	bne.n	800c2b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	2200      	movs	r2, #0
 800c25a:	2180      	movs	r1, #128	; 0x80
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f927 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e04d      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c270:	b29b      	uxth	r3, r3
 800c272:	2bff      	cmp	r3, #255	; 0xff
 800c274:	d90e      	bls.n	800c294 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	22ff      	movs	r2, #255	; 0xff
 800c27a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c280:	b2da      	uxtb	r2, r3
 800c282:	8979      	ldrh	r1, [r7, #10]
 800c284:	2300      	movs	r3, #0
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 fab7 	bl	800c800 <I2C_TransferConfig>
 800c292:	e00f      	b.n	800c2b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c298:	b29a      	uxth	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	8979      	ldrh	r1, [r7, #10]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 faa6 	bl	800c800 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d19a      	bne.n	800c1f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f000 f974 	bl	800c5b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e01a      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	6859      	ldr	r1, [r3, #4]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	4b0b      	ldr	r3, [pc, #44]	; (800c314 <HAL_I2C_Mem_Read+0x230>)
 800c2e6:	400b      	ands	r3, r1
 800c2e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	e000      	b.n	800c308 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c306:	2302      	movs	r3, #2
  }
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	80002400 	.word	0x80002400
 800c314:	fe00e800 	.word	0xfe00e800

0800c318 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af02      	add	r7, sp, #8
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	4608      	mov	r0, r1
 800c322:	4611      	mov	r1, r2
 800c324:	461a      	mov	r2, r3
 800c326:	4603      	mov	r3, r0
 800c328:	817b      	strh	r3, [r7, #10]
 800c32a:	460b      	mov	r3, r1
 800c32c:	813b      	strh	r3, [r7, #8]
 800c32e:	4613      	mov	r3, r2
 800c330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c332:	88fb      	ldrh	r3, [r7, #6]
 800c334:	b2da      	uxtb	r2, r3
 800c336:	8979      	ldrh	r1, [r7, #10]
 800c338:	4b20      	ldr	r3, [pc, #128]	; (800c3bc <I2C_RequestMemoryWrite+0xa4>)
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 fa5d 	bl	800c800 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c346:	69fa      	ldr	r2, [r7, #28]
 800c348:	69b9      	ldr	r1, [r7, #24]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 f8f0 	bl	800c530 <I2C_WaitOnTXISFlagUntilTimeout>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e02c      	b.n	800c3b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c35a:	88fb      	ldrh	r3, [r7, #6]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d105      	bne.n	800c36c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c360:	893b      	ldrh	r3, [r7, #8]
 800c362:	b2da      	uxtb	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	629a      	str	r2, [r3, #40]	; 0x28
 800c36a:	e015      	b.n	800c398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c36c:	893b      	ldrh	r3, [r7, #8]
 800c36e:	0a1b      	lsrs	r3, r3, #8
 800c370:	b29b      	uxth	r3, r3
 800c372:	b2da      	uxtb	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c37a:	69fa      	ldr	r2, [r7, #28]
 800c37c:	69b9      	ldr	r1, [r7, #24]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 f8d6 	bl	800c530 <I2C_WaitOnTXISFlagUntilTimeout>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e012      	b.n	800c3b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c38e:	893b      	ldrh	r3, [r7, #8]
 800c390:	b2da      	uxtb	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	2180      	movs	r1, #128	; 0x80
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f000 f884 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e000      	b.n	800c3b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	80002000 	.word	0x80002000

0800c3c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af02      	add	r7, sp, #8
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	817b      	strh	r3, [r7, #10]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	813b      	strh	r3, [r7, #8]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c3da:	88fb      	ldrh	r3, [r7, #6]
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	8979      	ldrh	r1, [r7, #10]
 800c3e0:	4b20      	ldr	r3, [pc, #128]	; (800c464 <I2C_RequestMemoryRead+0xa4>)
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f000 fa0a 	bl	800c800 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3ec:	69fa      	ldr	r2, [r7, #28]
 800c3ee:	69b9      	ldr	r1, [r7, #24]
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f000 f89d 	bl	800c530 <I2C_WaitOnTXISFlagUntilTimeout>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d001      	beq.n	800c400 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e02c      	b.n	800c45a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d105      	bne.n	800c412 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c406:	893b      	ldrh	r3, [r7, #8]
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	629a      	str	r2, [r3, #40]	; 0x28
 800c410:	e015      	b.n	800c43e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c412:	893b      	ldrh	r3, [r7, #8]
 800c414:	0a1b      	lsrs	r3, r3, #8
 800c416:	b29b      	uxth	r3, r3
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c420:	69fa      	ldr	r2, [r7, #28]
 800c422:	69b9      	ldr	r1, [r7, #24]
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 f883 	bl	800c530 <I2C_WaitOnTXISFlagUntilTimeout>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e012      	b.n	800c45a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c434:	893b      	ldrh	r3, [r7, #8]
 800c436:	b2da      	uxtb	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2200      	movs	r2, #0
 800c446:	2140      	movs	r1, #64	; 0x40
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 f831 	bl	800c4b0 <I2C_WaitOnFlagUntilTimeout>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e000      	b.n	800c45a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	80002000 	.word	0x80002000

0800c468 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d103      	bne.n	800c486 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b01      	cmp	r3, #1
 800c492:	d007      	beq.n	800c4a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	699a      	ldr	r2, [r3, #24]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0201 	orr.w	r2, r2, #1
 800c4a2:	619a      	str	r2, [r3, #24]
  }
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4c0:	e022      	b.n	800c508 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c8:	d01e      	beq.n	800c508 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4ca:	f7ff f8e5 	bl	800b698 <HAL_GetTick>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d302      	bcc.n	800c4e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d113      	bne.n	800c508 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e4:	f043 0220 	orr.w	r2, r3, #32
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2220      	movs	r2, #32
 800c4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e00f      	b.n	800c528 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	699a      	ldr	r2, [r3, #24]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	4013      	ands	r3, r2
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	429a      	cmp	r2, r3
 800c516:	bf0c      	ite	eq
 800c518:	2301      	moveq	r3, #1
 800c51a:	2300      	movne	r3, #0
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	461a      	mov	r2, r3
 800c520:	79fb      	ldrb	r3, [r7, #7]
 800c522:	429a      	cmp	r2, r3
 800c524:	d0cd      	beq.n	800c4c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c53c:	e02c      	b.n	800c598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	68b9      	ldr	r1, [r7, #8]
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f000 f870 	bl	800c628 <I2C_IsErrorOccurred>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e02a      	b.n	800c5a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c558:	d01e      	beq.n	800c598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c55a:	f7ff f89d 	bl	800b698 <HAL_GetTick>
 800c55e:	4602      	mov	r2, r0
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	429a      	cmp	r2, r3
 800c568:	d302      	bcc.n	800c570 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d113      	bne.n	800c598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c574:	f043 0220 	orr.w	r2, r3, #32
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2220      	movs	r2, #32
 800c580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	e007      	b.n	800c5a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	f003 0302 	and.w	r3, r3, #2
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d1cb      	bne.n	800c53e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5bc:	e028      	b.n	800c610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 f830 	bl	800c628 <I2C_IsErrorOccurred>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e026      	b.n	800c620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5d2:	f7ff f861 	bl	800b698 <HAL_GetTick>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d302      	bcc.n	800c5e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d113      	bne.n	800c610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ec:	f043 0220 	orr.w	r2, r3, #32
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e007      	b.n	800c620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	f003 0320 	and.w	r3, r3, #32
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d1cf      	bne.n	800c5be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b08a      	sub	sp, #40	; 0x28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	f003 0310 	and.w	r3, r3, #16
 800c650:	2b00      	cmp	r3, #0
 800c652:	d075      	beq.n	800c740 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2210      	movs	r2, #16
 800c65a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c65c:	e056      	b.n	800c70c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c664:	d052      	beq.n	800c70c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c666:	f7ff f817 	bl	800b698 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	429a      	cmp	r2, r3
 800c674:	d302      	bcc.n	800c67c <I2C_IsErrorOccurred+0x54>
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d147      	bne.n	800c70c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c68e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c69e:	d12e      	bne.n	800c6fe <I2C_IsErrorOccurred+0xd6>
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6a6:	d02a      	beq.n	800c6fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800c6a8:	7cfb      	ldrb	r3, [r7, #19]
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	d027      	beq.n	800c6fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c6be:	f7fe ffeb 	bl	800b698 <HAL_GetTick>
 800c6c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6c4:	e01b      	b.n	800c6fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c6c6:	f7fe ffe7 	bl	800b698 <HAL_GetTick>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	2b19      	cmp	r3, #25
 800c6d2:	d914      	bls.n	800c6fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d8:	f043 0220 	orr.w	r2, r3, #32
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	f003 0320 	and.w	r3, r3, #32
 800c708:	2b20      	cmp	r3, #32
 800c70a:	d1dc      	bne.n	800c6c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	f003 0320 	and.w	r3, r3, #32
 800c716:	2b20      	cmp	r3, #32
 800c718:	d003      	beq.n	800c722 <I2C_IsErrorOccurred+0xfa>
 800c71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d09d      	beq.n	800c65e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c726:	2b00      	cmp	r3, #0
 800c728:	d103      	bne.n	800c732 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2220      	movs	r2, #32
 800c730:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	f043 0304 	orr.w	r3, r3, #4
 800c738:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00b      	beq.n	800c76a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	f043 0301 	orr.w	r3, r3, #1
 800c758:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c762:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	f043 0308 	orr.w	r3, r3, #8
 800c77a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00b      	beq.n	800c7ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	f043 0302 	orr.w	r3, r3, #2
 800c79c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d01c      	beq.n	800c7f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7ff fe56 	bl	800c468 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6859      	ldr	r1, [r3, #4]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	4b0d      	ldr	r3, [pc, #52]	; (800c7fc <I2C_IsErrorOccurred+0x1d4>)
 800c7c8:	400b      	ands	r3, r1
 800c7ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3728      	adds	r7, #40	; 0x28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	fe00e800 	.word	0xfe00e800

0800c800 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	607b      	str	r3, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	817b      	strh	r3, [r7, #10]
 800c80e:	4613      	mov	r3, r2
 800c810:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c812:	897b      	ldrh	r3, [r7, #10]
 800c814:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c818:	7a7b      	ldrb	r3, [r7, #9]
 800c81a:	041b      	lsls	r3, r3, #16
 800c81c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c820:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	4313      	orrs	r3, r2
 800c82a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c82e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	0d5b      	lsrs	r3, r3, #21
 800c83a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c83e:	4b08      	ldr	r3, [pc, #32]	; (800c860 <I2C_TransferConfig+0x60>)
 800c840:	430b      	orrs	r3, r1
 800c842:	43db      	mvns	r3, r3
 800c844:	ea02 0103 	and.w	r1, r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	430a      	orrs	r2, r1
 800c850:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c852:	bf00      	nop
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	03ff63ff 	.word	0x03ff63ff

0800c864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b20      	cmp	r3, #32
 800c878:	d138      	bne.n	800c8ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c880:	2b01      	cmp	r3, #1
 800c882:	d101      	bne.n	800c888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c884:	2302      	movs	r3, #2
 800c886:	e032      	b.n	800c8ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2224      	movs	r2, #36	; 0x24
 800c894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0201 	bic.w	r2, r2, #1
 800c8a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c8b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6819      	ldr	r1, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f042 0201 	orr.w	r2, r2, #1
 800c8d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2220      	movs	r2, #32
 800c8dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e000      	b.n	800c8ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c8ec:	2302      	movs	r3, #2
  }
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	d139      	bne.n	800c984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c916:	2b01      	cmp	r3, #1
 800c918:	d101      	bne.n	800c91e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c91a:	2302      	movs	r3, #2
 800c91c:	e033      	b.n	800c986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2224      	movs	r2, #36	; 0x24
 800c92a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f022 0201 	bic.w	r2, r2, #1
 800c93c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c94c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	021b      	lsls	r3, r3, #8
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	4313      	orrs	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f042 0201 	orr.w	r2, r2, #1
 800c96e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2220      	movs	r2, #32
 800c974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c980:	2300      	movs	r3, #0
 800c982:	e000      	b.n	800c986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c984:	2302      	movs	r3, #2
  }
}
 800c986:	4618      	mov	r0, r3
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
	...

0800c994 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c994:	b480      	push	{r7}
 800c996:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <HAL_PWREx_GetVoltageRange+0x18>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	40007000 	.word	0x40007000

0800c9b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9be:	d130      	bne.n	800ca22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c9c0:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9cc:	d038      	beq.n	800ca40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c9ce:	4b20      	ldr	r3, [pc, #128]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c9d6:	4a1e      	ldr	r2, [pc, #120]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c9d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c9dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c9de:	4b1d      	ldr	r3, [pc, #116]	; (800ca54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2232      	movs	r2, #50	; 0x32
 800c9e4:	fb02 f303 	mul.w	r3, r2, r3
 800c9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ca58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ee:	0c9b      	lsrs	r3, r3, #18
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c9f4:	e002      	b.n	800c9fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c9fc:	4b14      	ldr	r3, [pc, #80]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca08:	d102      	bne.n	800ca10 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f2      	bne.n	800c9f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ca10:	4b0f      	ldr	r3, [pc, #60]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca1c:	d110      	bne.n	800ca40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e00f      	b.n	800ca42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ca22:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca2e:	d007      	beq.n	800ca40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ca38:	4a05      	ldr	r2, [pc, #20]	; (800ca50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ca3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	40007000 	.word	0x40007000
 800ca54:	20000014 	.word	0x20000014
 800ca58:	431bde83 	.word	0x431bde83

0800ca5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d102      	bne.n	800ca70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	f000 bc02 	b.w	800d274 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca70:	4b96      	ldr	r3, [pc, #600]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f003 030c 	and.w	r3, r3, #12
 800ca78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca7a:	4b94      	ldr	r3, [pc, #592]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 0310 	and.w	r3, r3, #16
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f000 80e4 	beq.w	800cc5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d007      	beq.n	800caa8 <HAL_RCC_OscConfig+0x4c>
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	2b0c      	cmp	r3, #12
 800ca9c:	f040 808b 	bne.w	800cbb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	f040 8087 	bne.w	800cbb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800caa8:	4b88      	ldr	r3, [pc, #544]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <HAL_RCC_OscConfig+0x64>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d101      	bne.n	800cac0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e3d9      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a1a      	ldr	r2, [r3, #32]
 800cac4:	4b81      	ldr	r3, [pc, #516]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 0308 	and.w	r3, r3, #8
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <HAL_RCC_OscConfig+0x7e>
 800cad0:	4b7e      	ldr	r3, [pc, #504]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cad8:	e005      	b.n	800cae6 <HAL_RCC_OscConfig+0x8a>
 800cada:	4b7c      	ldr	r3, [pc, #496]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cadc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cae0:	091b      	lsrs	r3, r3, #4
 800cae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d223      	bcs.n	800cb32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fd8c 	bl	800d60c <RCC_SetFlashLatencyFromMSIRange>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e3ba      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cafe:	4b73      	ldr	r3, [pc, #460]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a72      	ldr	r2, [pc, #456]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb04:	f043 0308 	orr.w	r3, r3, #8
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	4b70      	ldr	r3, [pc, #448]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	496d      	ldr	r1, [pc, #436]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cb1c:	4b6b      	ldr	r3, [pc, #428]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	69db      	ldr	r3, [r3, #28]
 800cb28:	021b      	lsls	r3, r3, #8
 800cb2a:	4968      	ldr	r1, [pc, #416]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	604b      	str	r3, [r1, #4]
 800cb30:	e025      	b.n	800cb7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cb32:	4b66      	ldr	r3, [pc, #408]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a65      	ldr	r2, [pc, #404]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb38:	f043 0308 	orr.w	r3, r3, #8
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	4b63      	ldr	r3, [pc, #396]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	4960      	ldr	r1, [pc, #384]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cb50:	4b5e      	ldr	r3, [pc, #376]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	495b      	ldr	r1, [pc, #364]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb60:	4313      	orrs	r3, r2
 800cb62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d109      	bne.n	800cb7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 fd4c 	bl	800d60c <RCC_SetFlashLatencyFromMSIRange>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e37a      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cb7e:	f000 fc81 	bl	800d484 <HAL_RCC_GetSysClockFreq>
 800cb82:	4602      	mov	r2, r0
 800cb84:	4b51      	ldr	r3, [pc, #324]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	091b      	lsrs	r3, r3, #4
 800cb8a:	f003 030f 	and.w	r3, r3, #15
 800cb8e:	4950      	ldr	r1, [pc, #320]	; (800ccd0 <HAL_RCC_OscConfig+0x274>)
 800cb90:	5ccb      	ldrb	r3, [r1, r3]
 800cb92:	f003 031f 	and.w	r3, r3, #31
 800cb96:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9a:	4a4e      	ldr	r2, [pc, #312]	; (800ccd4 <HAL_RCC_OscConfig+0x278>)
 800cb9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cb9e:	4b4e      	ldr	r3, [pc, #312]	; (800ccd8 <HAL_RCC_OscConfig+0x27c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fd28 	bl	800b5f8 <HAL_InitTick>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d052      	beq.n	800cc58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	e35e      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d032      	beq.n	800cc24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cbbe:	4b43      	ldr	r3, [pc, #268]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a42      	ldr	r2, [pc, #264]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cbc4:	f043 0301 	orr.w	r3, r3, #1
 800cbc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cbca:	f7fe fd65 	bl	800b698 <HAL_GetTick>
 800cbce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cbd0:	e008      	b.n	800cbe4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cbd2:	f7fe fd61 	bl	800b698 <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d901      	bls.n	800cbe4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e347      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cbe4:	4b39      	ldr	r3, [pc, #228]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0f0      	beq.n	800cbd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cbf0:	4b36      	ldr	r3, [pc, #216]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a35      	ldr	r2, [pc, #212]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cbf6:	f043 0308 	orr.w	r3, r3, #8
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	4b33      	ldr	r3, [pc, #204]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1b      	ldr	r3, [r3, #32]
 800cc08:	4930      	ldr	r1, [pc, #192]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cc0e:	4b2f      	ldr	r3, [pc, #188]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	69db      	ldr	r3, [r3, #28]
 800cc1a:	021b      	lsls	r3, r3, #8
 800cc1c:	492b      	ldr	r1, [pc, #172]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	604b      	str	r3, [r1, #4]
 800cc22:	e01a      	b.n	800cc5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800cc24:	4b29      	ldr	r3, [pc, #164]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a28      	ldr	r2, [pc, #160]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc2a:	f023 0301 	bic.w	r3, r3, #1
 800cc2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cc30:	f7fe fd32 	bl	800b698 <HAL_GetTick>
 800cc34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cc36:	e008      	b.n	800cc4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cc38:	f7fe fd2e 	bl	800b698 <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d901      	bls.n	800cc4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e314      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cc4a:	4b20      	ldr	r3, [pc, #128]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1f0      	bne.n	800cc38 <HAL_RCC_OscConfig+0x1dc>
 800cc56:	e000      	b.n	800cc5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cc58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d073      	beq.n	800cd4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d005      	beq.n	800cc78 <HAL_RCC_OscConfig+0x21c>
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	2b0c      	cmp	r3, #12
 800cc70:	d10e      	bne.n	800cc90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d10b      	bne.n	800cc90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc78:	4b14      	ldr	r3, [pc, #80]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d063      	beq.n	800cd4c <HAL_RCC_OscConfig+0x2f0>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d15f      	bne.n	800cd4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e2f1      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc98:	d106      	bne.n	800cca8 <HAL_RCC_OscConfig+0x24c>
 800cc9a:	4b0c      	ldr	r3, [pc, #48]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a0b      	ldr	r2, [pc, #44]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800cca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	e025      	b.n	800ccf4 <HAL_RCC_OscConfig+0x298>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccb0:	d114      	bne.n	800ccdc <HAL_RCC_OscConfig+0x280>
 800ccb2:	4b06      	ldr	r3, [pc, #24]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a05      	ldr	r2, [pc, #20]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800ccb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	4b03      	ldr	r3, [pc, #12]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a02      	ldr	r2, [pc, #8]	; (800cccc <HAL_RCC_OscConfig+0x270>)
 800ccc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccc8:	6013      	str	r3, [r2, #0]
 800ccca:	e013      	b.n	800ccf4 <HAL_RCC_OscConfig+0x298>
 800cccc:	40021000 	.word	0x40021000
 800ccd0:	080119d8 	.word	0x080119d8
 800ccd4:	20000014 	.word	0x20000014
 800ccd8:	2000001c 	.word	0x2000001c
 800ccdc:	4ba0      	ldr	r3, [pc, #640]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a9f      	ldr	r2, [pc, #636]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	4b9d      	ldr	r3, [pc, #628]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a9c      	ldr	r2, [pc, #624]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ccee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d013      	beq.n	800cd24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccfc:	f7fe fccc 	bl	800b698 <HAL_GetTick>
 800cd00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd02:	e008      	b.n	800cd16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd04:	f7fe fcc8 	bl	800b698 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2b64      	cmp	r3, #100	; 0x64
 800cd10:	d901      	bls.n	800cd16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	e2ae      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd16:	4b92      	ldr	r3, [pc, #584]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0f0      	beq.n	800cd04 <HAL_RCC_OscConfig+0x2a8>
 800cd22:	e014      	b.n	800cd4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd24:	f7fe fcb8 	bl	800b698 <HAL_GetTick>
 800cd28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cd2a:	e008      	b.n	800cd3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd2c:	f7fe fcb4 	bl	800b698 <HAL_GetTick>
 800cd30:	4602      	mov	r2, r0
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	2b64      	cmp	r3, #100	; 0x64
 800cd38:	d901      	bls.n	800cd3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e29a      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cd3e:	4b88      	ldr	r3, [pc, #544]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1f0      	bne.n	800cd2c <HAL_RCC_OscConfig+0x2d0>
 800cd4a:	e000      	b.n	800cd4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f003 0302 	and.w	r3, r3, #2
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d060      	beq.n	800ce1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d005      	beq.n	800cd6c <HAL_RCC_OscConfig+0x310>
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	2b0c      	cmp	r3, #12
 800cd64:	d119      	bne.n	800cd9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d116      	bne.n	800cd9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd6c:	4b7c      	ldr	r3, [pc, #496]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d005      	beq.n	800cd84 <HAL_RCC_OscConfig+0x328>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	e277      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd84:	4b76      	ldr	r3, [pc, #472]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	061b      	lsls	r3, r3, #24
 800cd92:	4973      	ldr	r1, [pc, #460]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cd94:	4313      	orrs	r3, r2
 800cd96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd98:	e040      	b.n	800ce1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d023      	beq.n	800cdea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cda2:	4b6f      	ldr	r3, [pc, #444]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a6e      	ldr	r2, [pc, #440]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cda8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdae:	f7fe fc73 	bl	800b698 <HAL_GetTick>
 800cdb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cdb4:	e008      	b.n	800cdc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdb6:	f7fe fc6f 	bl	800b698 <HAL_GetTick>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d901      	bls.n	800cdc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	e255      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cdc8:	4b65      	ldr	r3, [pc, #404]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d0f0      	beq.n	800cdb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdd4:	4b62      	ldr	r3, [pc, #392]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	061b      	lsls	r3, r3, #24
 800cde2:	495f      	ldr	r1, [pc, #380]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cde4:	4313      	orrs	r3, r2
 800cde6:	604b      	str	r3, [r1, #4]
 800cde8:	e018      	b.n	800ce1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdea:	4b5d      	ldr	r3, [pc, #372]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a5c      	ldr	r2, [pc, #368]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cdf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdf6:	f7fe fc4f 	bl	800b698 <HAL_GetTick>
 800cdfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cdfc:	e008      	b.n	800ce10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdfe:	f7fe fc4b 	bl	800b698 <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d901      	bls.n	800ce10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e231      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ce10:	4b53      	ldr	r3, [pc, #332]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f0      	bne.n	800cdfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 0308 	and.w	r3, r3, #8
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d03c      	beq.n	800cea2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01c      	beq.n	800ce6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce30:	4b4b      	ldr	r3, [pc, #300]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce36:	4a4a      	ldr	r2, [pc, #296]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce38:	f043 0301 	orr.w	r3, r3, #1
 800ce3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce40:	f7fe fc2a 	bl	800b698 <HAL_GetTick>
 800ce44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ce46:	e008      	b.n	800ce5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce48:	f7fe fc26 	bl	800b698 <HAL_GetTick>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d901      	bls.n	800ce5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e20c      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ce5a:	4b41      	ldr	r3, [pc, #260]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0ef      	beq.n	800ce48 <HAL_RCC_OscConfig+0x3ec>
 800ce68:	e01b      	b.n	800cea2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce6a:	4b3d      	ldr	r3, [pc, #244]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce70:	4a3b      	ldr	r2, [pc, #236]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce72:	f023 0301 	bic.w	r3, r3, #1
 800ce76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce7a:	f7fe fc0d 	bl	800b698 <HAL_GetTick>
 800ce7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce80:	e008      	b.n	800ce94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce82:	f7fe fc09 	bl	800b698 <HAL_GetTick>
 800ce86:	4602      	mov	r2, r0
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d901      	bls.n	800ce94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ce90:	2303      	movs	r3, #3
 800ce92:	e1ef      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce94:	4b32      	ldr	r3, [pc, #200]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ce96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce9a:	f003 0302 	and.w	r3, r3, #2
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1ef      	bne.n	800ce82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0304 	and.w	r3, r3, #4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f000 80a6 	beq.w	800cffc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ceb4:	4b2a      	ldr	r3, [pc, #168]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800ceb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10d      	bne.n	800cedc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cec0:	4b27      	ldr	r3, [pc, #156]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cec4:	4a26      	ldr	r2, [pc, #152]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceca:	6593      	str	r3, [r2, #88]	; 0x58
 800cecc:	4b24      	ldr	r3, [pc, #144]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ced0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ced4:	60bb      	str	r3, [r7, #8]
 800ced6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ced8:	2301      	movs	r3, #1
 800ceda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cedc:	4b21      	ldr	r3, [pc, #132]	; (800cf64 <HAL_RCC_OscConfig+0x508>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d118      	bne.n	800cf1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cee8:	4b1e      	ldr	r3, [pc, #120]	; (800cf64 <HAL_RCC_OscConfig+0x508>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a1d      	ldr	r2, [pc, #116]	; (800cf64 <HAL_RCC_OscConfig+0x508>)
 800ceee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cef4:	f7fe fbd0 	bl	800b698 <HAL_GetTick>
 800cef8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cefa:	e008      	b.n	800cf0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cefc:	f7fe fbcc 	bl	800b698 <HAL_GetTick>
 800cf00:	4602      	mov	r2, r0
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d901      	bls.n	800cf0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	e1b2      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf0e:	4b15      	ldr	r3, [pc, #84]	; (800cf64 <HAL_RCC_OscConfig+0x508>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d0f0      	beq.n	800cefc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d108      	bne.n	800cf34 <HAL_RCC_OscConfig+0x4d8>
 800cf22:	4b0f      	ldr	r3, [pc, #60]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cf24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf28:	4a0d      	ldr	r2, [pc, #52]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cf2a:	f043 0301 	orr.w	r3, r3, #1
 800cf2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf32:	e029      	b.n	800cf88 <HAL_RCC_OscConfig+0x52c>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b05      	cmp	r3, #5
 800cf3a:	d115      	bne.n	800cf68 <HAL_RCC_OscConfig+0x50c>
 800cf3c:	4b08      	ldr	r3, [pc, #32]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cf3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf42:	4a07      	ldr	r2, [pc, #28]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cf44:	f043 0304 	orr.w	r3, r3, #4
 800cf48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf52:	4a03      	ldr	r2, [pc, #12]	; (800cf60 <HAL_RCC_OscConfig+0x504>)
 800cf54:	f043 0301 	orr.w	r3, r3, #1
 800cf58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf5c:	e014      	b.n	800cf88 <HAL_RCC_OscConfig+0x52c>
 800cf5e:	bf00      	nop
 800cf60:	40021000 	.word	0x40021000
 800cf64:	40007000 	.word	0x40007000
 800cf68:	4b9a      	ldr	r3, [pc, #616]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cf6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf6e:	4a99      	ldr	r2, [pc, #612]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cf70:	f023 0301 	bic.w	r3, r3, #1
 800cf74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf78:	4b96      	ldr	r3, [pc, #600]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cf7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf7e:	4a95      	ldr	r2, [pc, #596]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cf80:	f023 0304 	bic.w	r3, r3, #4
 800cf84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d016      	beq.n	800cfbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf90:	f7fe fb82 	bl	800b698 <HAL_GetTick>
 800cf94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf96:	e00a      	b.n	800cfae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf98:	f7fe fb7e 	bl	800b698 <HAL_GetTick>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d901      	bls.n	800cfae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e162      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfae:	4b89      	ldr	r3, [pc, #548]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfb4:	f003 0302 	and.w	r3, r3, #2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0ed      	beq.n	800cf98 <HAL_RCC_OscConfig+0x53c>
 800cfbc:	e015      	b.n	800cfea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfbe:	f7fe fb6b 	bl	800b698 <HAL_GetTick>
 800cfc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cfc4:	e00a      	b.n	800cfdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfc6:	f7fe fb67 	bl	800b698 <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d901      	bls.n	800cfdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	e14b      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cfdc:	4b7d      	ldr	r3, [pc, #500]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe2:	f003 0302 	and.w	r3, r3, #2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1ed      	bne.n	800cfc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cfea:	7ffb      	ldrb	r3, [r7, #31]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d105      	bne.n	800cffc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cff0:	4b78      	ldr	r3, [pc, #480]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff4:	4a77      	ldr	r2, [pc, #476]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800cff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cffa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 0320 	and.w	r3, r3, #32
 800d004:	2b00      	cmp	r3, #0
 800d006:	d03c      	beq.n	800d082 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d01c      	beq.n	800d04a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d010:	4b70      	ldr	r3, [pc, #448]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d016:	4a6f      	ldr	r2, [pc, #444]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d018:	f043 0301 	orr.w	r3, r3, #1
 800d01c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d020:	f7fe fb3a 	bl	800b698 <HAL_GetTick>
 800d024:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d026:	e008      	b.n	800d03a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d028:	f7fe fb36 	bl	800b698 <HAL_GetTick>
 800d02c:	4602      	mov	r2, r0
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	2b02      	cmp	r3, #2
 800d034:	d901      	bls.n	800d03a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e11c      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d03a:	4b66      	ldr	r3, [pc, #408]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d03c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d040:	f003 0302 	and.w	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0ef      	beq.n	800d028 <HAL_RCC_OscConfig+0x5cc>
 800d048:	e01b      	b.n	800d082 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d04a:	4b62      	ldr	r3, [pc, #392]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d04c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d050:	4a60      	ldr	r2, [pc, #384]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d052:	f023 0301 	bic.w	r3, r3, #1
 800d056:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d05a:	f7fe fb1d 	bl	800b698 <HAL_GetTick>
 800d05e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d060:	e008      	b.n	800d074 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d062:	f7fe fb19 	bl	800b698 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d901      	bls.n	800d074 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800d070:	2303      	movs	r3, #3
 800d072:	e0ff      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d074:	4b57      	ldr	r3, [pc, #348]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d07a:	f003 0302 	and.w	r3, r3, #2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1ef      	bne.n	800d062 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 80f3 	beq.w	800d272 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d090:	2b02      	cmp	r3, #2
 800d092:	f040 80c9 	bne.w	800d228 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d096:	4b4f      	ldr	r3, [pc, #316]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	f003 0203 	and.w	r2, r3, #3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d12c      	bne.n	800d104 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d123      	bne.n	800d104 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d11b      	bne.n	800d104 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d113      	bne.n	800d104 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e6:	085b      	lsrs	r3, r3, #1
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d109      	bne.n	800d104 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fa:	085b      	lsrs	r3, r3, #1
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d100:	429a      	cmp	r2, r3
 800d102:	d06b      	beq.n	800d1dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	2b0c      	cmp	r3, #12
 800d108:	d062      	beq.n	800d1d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d10a:	4b32      	ldr	r3, [pc, #200]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e0ac      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d11a:	4b2e      	ldr	r3, [pc, #184]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a2d      	ldr	r2, [pc, #180]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d124:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d126:	f7fe fab7 	bl	800b698 <HAL_GetTick>
 800d12a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d12c:	e008      	b.n	800d140 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d12e:	f7fe fab3 	bl	800b698 <HAL_GetTick>
 800d132:	4602      	mov	r2, r0
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d901      	bls.n	800d140 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800d13c:	2303      	movs	r3, #3
 800d13e:	e099      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d140:	4b24      	ldr	r3, [pc, #144]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1f0      	bne.n	800d12e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d14c:	4b21      	ldr	r3, [pc, #132]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d14e:	68da      	ldr	r2, [r3, #12]
 800d150:	4b21      	ldr	r3, [pc, #132]	; (800d1d8 <HAL_RCC_OscConfig+0x77c>)
 800d152:	4013      	ands	r3, r2
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d15c:	3a01      	subs	r2, #1
 800d15e:	0112      	lsls	r2, r2, #4
 800d160:	4311      	orrs	r1, r2
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d166:	0212      	lsls	r2, r2, #8
 800d168:	4311      	orrs	r1, r2
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d16e:	0852      	lsrs	r2, r2, #1
 800d170:	3a01      	subs	r2, #1
 800d172:	0552      	lsls	r2, r2, #21
 800d174:	4311      	orrs	r1, r2
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d17a:	0852      	lsrs	r2, r2, #1
 800d17c:	3a01      	subs	r2, #1
 800d17e:	0652      	lsls	r2, r2, #25
 800d180:	4311      	orrs	r1, r2
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d186:	06d2      	lsls	r2, r2, #27
 800d188:	430a      	orrs	r2, r1
 800d18a:	4912      	ldr	r1, [pc, #72]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d18c:	4313      	orrs	r3, r2
 800d18e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d190:	4b10      	ldr	r3, [pc, #64]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a0f      	ldr	r2, [pc, #60]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d19a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d19c:	4b0d      	ldr	r3, [pc, #52]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	4a0c      	ldr	r2, [pc, #48]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d1a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d1a8:	f7fe fa76 	bl	800b698 <HAL_GetTick>
 800d1ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1ae:	e008      	b.n	800d1c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1b0:	f7fe fa72 	bl	800b698 <HAL_GetTick>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d901      	bls.n	800d1c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	e058      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1c2:	4b04      	ldr	r3, [pc, #16]	; (800d1d4 <HAL_RCC_OscConfig+0x778>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d0f0      	beq.n	800d1b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d1ce:	e050      	b.n	800d272 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e04f      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
 800d1d4:	40021000 	.word	0x40021000
 800d1d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1dc:	4b27      	ldr	r3, [pc, #156]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d144      	bne.n	800d272 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d1e8:	4b24      	ldr	r3, [pc, #144]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a23      	ldr	r2, [pc, #140]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d1ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d1f4:	4b21      	ldr	r3, [pc, #132]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	4a20      	ldr	r2, [pc, #128]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d1fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d200:	f7fe fa4a 	bl	800b698 <HAL_GetTick>
 800d204:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d206:	e008      	b.n	800d21a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d208:	f7fe fa46 	bl	800b698 <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b02      	cmp	r3, #2
 800d214:	d901      	bls.n	800d21a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	e02c      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d21a:	4b18      	ldr	r3, [pc, #96]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0f0      	beq.n	800d208 <HAL_RCC_OscConfig+0x7ac>
 800d226:	e024      	b.n	800d272 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	2b0c      	cmp	r3, #12
 800d22c:	d01f      	beq.n	800d26e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a12      	ldr	r2, [pc, #72]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d23a:	f7fe fa2d 	bl	800b698 <HAL_GetTick>
 800d23e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d240:	e008      	b.n	800d254 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d242:	f7fe fa29 	bl	800b698 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d901      	bls.n	800d254 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800d250:	2303      	movs	r3, #3
 800d252:	e00f      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d254:	4b09      	ldr	r3, [pc, #36]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1f0      	bne.n	800d242 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800d260:	4b06      	ldr	r3, [pc, #24]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d262:	68da      	ldr	r2, [r3, #12]
 800d264:	4905      	ldr	r1, [pc, #20]	; (800d27c <HAL_RCC_OscConfig+0x820>)
 800d266:	4b06      	ldr	r3, [pc, #24]	; (800d280 <HAL_RCC_OscConfig+0x824>)
 800d268:	4013      	ands	r3, r2
 800d26a:	60cb      	str	r3, [r1, #12]
 800d26c:	e001      	b.n	800d272 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e000      	b.n	800d274 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3720      	adds	r7, #32
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	40021000 	.word	0x40021000
 800d280:	feeefffc 	.word	0xfeeefffc

0800d284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e0e7      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d298:	4b75      	ldr	r3, [pc, #468]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 0307 	and.w	r3, r3, #7
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d910      	bls.n	800d2c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2a6:	4b72      	ldr	r3, [pc, #456]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f023 0207 	bic.w	r2, r3, #7
 800d2ae:	4970      	ldr	r1, [pc, #448]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2b6:	4b6e      	ldr	r3, [pc, #440]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 0307 	and.w	r3, r3, #7
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d001      	beq.n	800d2c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e0cf      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 0302 	and.w	r3, r3, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d010      	beq.n	800d2f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689a      	ldr	r2, [r3, #8]
 800d2d8:	4b66      	ldr	r3, [pc, #408]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d908      	bls.n	800d2f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d2e4:	4b63      	ldr	r3, [pc, #396]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	4960      	ldr	r1, [pc, #384]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0301 	and.w	r3, r3, #1
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d04c      	beq.n	800d39c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	2b03      	cmp	r3, #3
 800d308:	d107      	bne.n	800d31a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d30a:	4b5a      	ldr	r3, [pc, #360]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d312:	2b00      	cmp	r3, #0
 800d314:	d121      	bne.n	800d35a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800d316:	2301      	movs	r3, #1
 800d318:	e0a6      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d107      	bne.n	800d332 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d322:	4b54      	ldr	r3, [pc, #336]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d115      	bne.n	800d35a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e09a      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d107      	bne.n	800d34a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d33a:	4b4e      	ldr	r3, [pc, #312]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f003 0302 	and.w	r3, r3, #2
 800d342:	2b00      	cmp	r3, #0
 800d344:	d109      	bne.n	800d35a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	e08e      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d34a:	4b4a      	ldr	r3, [pc, #296]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	e086      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d35a:	4b46      	ldr	r3, [pc, #280]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	f023 0203 	bic.w	r2, r3, #3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	4943      	ldr	r1, [pc, #268]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d368:	4313      	orrs	r3, r2
 800d36a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d36c:	f7fe f994 	bl	800b698 <HAL_GetTick>
 800d370:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d372:	e00a      	b.n	800d38a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d374:	f7fe f990 	bl	800b698 <HAL_GetTick>
 800d378:	4602      	mov	r2, r0
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d382:	4293      	cmp	r3, r2
 800d384:	d901      	bls.n	800d38a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e06e      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d38a:	4b3a      	ldr	r3, [pc, #232]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	f003 020c 	and.w	r2, r3, #12
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	429a      	cmp	r2, r3
 800d39a:	d1eb      	bne.n	800d374 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0302 	and.w	r3, r3, #2
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d010      	beq.n	800d3ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689a      	ldr	r2, [r3, #8]
 800d3ac:	4b31      	ldr	r3, [pc, #196]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d208      	bcs.n	800d3ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d3b8:	4b2e      	ldr	r3, [pc, #184]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	492b      	ldr	r1, [pc, #172]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d3ca:	4b29      	ldr	r3, [pc, #164]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d210      	bcs.n	800d3fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3d8:	4b25      	ldr	r3, [pc, #148]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f023 0207 	bic.w	r2, r3, #7
 800d3e0:	4923      	ldr	r1, [pc, #140]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3e8:	4b21      	ldr	r3, [pc, #132]	; (800d470 <HAL_RCC_ClockConfig+0x1ec>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 0307 	and.w	r3, r3, #7
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d001      	beq.n	800d3fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e036      	b.n	800d468 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0304 	and.w	r3, r3, #4
 800d402:	2b00      	cmp	r3, #0
 800d404:	d008      	beq.n	800d418 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d406:	4b1b      	ldr	r3, [pc, #108]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	4918      	ldr	r1, [pc, #96]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d414:	4313      	orrs	r3, r2
 800d416:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0308 	and.w	r3, r3, #8
 800d420:	2b00      	cmp	r3, #0
 800d422:	d009      	beq.n	800d438 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d424:	4b13      	ldr	r3, [pc, #76]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	4910      	ldr	r1, [pc, #64]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d434:	4313      	orrs	r3, r2
 800d436:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d438:	f000 f824 	bl	800d484 <HAL_RCC_GetSysClockFreq>
 800d43c:	4602      	mov	r2, r0
 800d43e:	4b0d      	ldr	r3, [pc, #52]	; (800d474 <HAL_RCC_ClockConfig+0x1f0>)
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	091b      	lsrs	r3, r3, #4
 800d444:	f003 030f 	and.w	r3, r3, #15
 800d448:	490b      	ldr	r1, [pc, #44]	; (800d478 <HAL_RCC_ClockConfig+0x1f4>)
 800d44a:	5ccb      	ldrb	r3, [r1, r3]
 800d44c:	f003 031f 	and.w	r3, r3, #31
 800d450:	fa22 f303 	lsr.w	r3, r2, r3
 800d454:	4a09      	ldr	r2, [pc, #36]	; (800d47c <HAL_RCC_ClockConfig+0x1f8>)
 800d456:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d458:	4b09      	ldr	r3, [pc, #36]	; (800d480 <HAL_RCC_ClockConfig+0x1fc>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fe f8cb 	bl	800b5f8 <HAL_InitTick>
 800d462:	4603      	mov	r3, r0
 800d464:	72fb      	strb	r3, [r7, #11]

  return status;
 800d466:	7afb      	ldrb	r3, [r7, #11]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	40022000 	.word	0x40022000
 800d474:	40021000 	.word	0x40021000
 800d478:	080119d8 	.word	0x080119d8
 800d47c:	20000014 	.word	0x20000014
 800d480:	2000001c 	.word	0x2000001c

0800d484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d484:	b480      	push	{r7}
 800d486:	b089      	sub	sp, #36	; 0x24
 800d488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	61fb      	str	r3, [r7, #28]
 800d48e:	2300      	movs	r3, #0
 800d490:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d492:	4b3e      	ldr	r3, [pc, #248]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f003 030c 	and.w	r3, r3, #12
 800d49a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d49c:	4b3b      	ldr	r3, [pc, #236]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	f003 0303 	and.w	r3, r3, #3
 800d4a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d005      	beq.n	800d4b8 <HAL_RCC_GetSysClockFreq+0x34>
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	2b0c      	cmp	r3, #12
 800d4b0:	d121      	bne.n	800d4f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d11e      	bne.n	800d4f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d4b8:	4b34      	ldr	r3, [pc, #208]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 0308 	and.w	r3, r3, #8
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d107      	bne.n	800d4d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d4c4:	4b31      	ldr	r3, [pc, #196]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d4ca:	0a1b      	lsrs	r3, r3, #8
 800d4cc:	f003 030f 	and.w	r3, r3, #15
 800d4d0:	61fb      	str	r3, [r7, #28]
 800d4d2:	e005      	b.n	800d4e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d4d4:	4b2d      	ldr	r3, [pc, #180]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	091b      	lsrs	r3, r3, #4
 800d4da:	f003 030f 	and.w	r3, r3, #15
 800d4de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d4e0:	4a2b      	ldr	r2, [pc, #172]	; (800d590 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10d      	bne.n	800d50c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d4f4:	e00a      	b.n	800d50c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	2b04      	cmp	r3, #4
 800d4fa:	d102      	bne.n	800d502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d4fc:	4b25      	ldr	r3, [pc, #148]	; (800d594 <HAL_RCC_GetSysClockFreq+0x110>)
 800d4fe:	61bb      	str	r3, [r7, #24]
 800d500:	e004      	b.n	800d50c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	2b08      	cmp	r3, #8
 800d506:	d101      	bne.n	800d50c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d508:	4b23      	ldr	r3, [pc, #140]	; (800d598 <HAL_RCC_GetSysClockFreq+0x114>)
 800d50a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	2b0c      	cmp	r3, #12
 800d510:	d134      	bne.n	800d57c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d512:	4b1e      	ldr	r3, [pc, #120]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	f003 0303 	and.w	r3, r3, #3
 800d51a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d003      	beq.n	800d52a <HAL_RCC_GetSysClockFreq+0xa6>
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2b03      	cmp	r3, #3
 800d526:	d003      	beq.n	800d530 <HAL_RCC_GetSysClockFreq+0xac>
 800d528:	e005      	b.n	800d536 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d52a:	4b1a      	ldr	r3, [pc, #104]	; (800d594 <HAL_RCC_GetSysClockFreq+0x110>)
 800d52c:	617b      	str	r3, [r7, #20]
      break;
 800d52e:	e005      	b.n	800d53c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d530:	4b19      	ldr	r3, [pc, #100]	; (800d598 <HAL_RCC_GetSysClockFreq+0x114>)
 800d532:	617b      	str	r3, [r7, #20]
      break;
 800d534:	e002      	b.n	800d53c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	617b      	str	r3, [r7, #20]
      break;
 800d53a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d53c:	4b13      	ldr	r3, [pc, #76]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	091b      	lsrs	r3, r3, #4
 800d542:	f003 0307 	and.w	r3, r3, #7
 800d546:	3301      	adds	r3, #1
 800d548:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d54a:	4b10      	ldr	r3, [pc, #64]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	0a1b      	lsrs	r3, r3, #8
 800d550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	fb03 f202 	mul.w	r2, r3, r2
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d560:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d562:	4b0a      	ldr	r3, [pc, #40]	; (800d58c <HAL_RCC_GetSysClockFreq+0x108>)
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	0e5b      	lsrs	r3, r3, #25
 800d568:	f003 0303 	and.w	r3, r3, #3
 800d56c:	3301      	adds	r3, #1
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	fbb2 f3f3 	udiv	r3, r2, r3
 800d57a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d57c:	69bb      	ldr	r3, [r7, #24]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3724      	adds	r7, #36	; 0x24
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	40021000 	.word	0x40021000
 800d590:	080119f0 	.word	0x080119f0
 800d594:	00f42400 	.word	0x00f42400
 800d598:	007a1200 	.word	0x007a1200

0800d59c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d5a0:	4b03      	ldr	r3, [pc, #12]	; (800d5b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	20000014 	.word	0x20000014

0800d5b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d5b8:	f7ff fff0 	bl	800d59c <HAL_RCC_GetHCLKFreq>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	4b06      	ldr	r3, [pc, #24]	; (800d5d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	0a1b      	lsrs	r3, r3, #8
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	4904      	ldr	r1, [pc, #16]	; (800d5dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d5ca:	5ccb      	ldrb	r3, [r1, r3]
 800d5cc:	f003 031f 	and.w	r3, r3, #31
 800d5d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	40021000 	.word	0x40021000
 800d5dc:	080119e8 	.word	0x080119e8

0800d5e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d5e4:	f7ff ffda 	bl	800d59c <HAL_RCC_GetHCLKFreq>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	4b06      	ldr	r3, [pc, #24]	; (800d604 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	0adb      	lsrs	r3, r3, #11
 800d5f0:	f003 0307 	and.w	r3, r3, #7
 800d5f4:	4904      	ldr	r1, [pc, #16]	; (800d608 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d5f6:	5ccb      	ldrb	r3, [r1, r3]
 800d5f8:	f003 031f 	and.w	r3, r3, #31
 800d5fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d600:	4618      	mov	r0, r3
 800d602:	bd80      	pop	{r7, pc}
 800d604:	40021000 	.word	0x40021000
 800d608:	080119e8 	.word	0x080119e8

0800d60c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d614:	2300      	movs	r3, #0
 800d616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d618:	4b2a      	ldr	r3, [pc, #168]	; (800d6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d61c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d620:	2b00      	cmp	r3, #0
 800d622:	d003      	beq.n	800d62c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d624:	f7ff f9b6 	bl	800c994 <HAL_PWREx_GetVoltageRange>
 800d628:	6178      	str	r0, [r7, #20]
 800d62a:	e014      	b.n	800d656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d62c:	4b25      	ldr	r3, [pc, #148]	; (800d6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d630:	4a24      	ldr	r2, [pc, #144]	; (800d6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d636:	6593      	str	r3, [r2, #88]	; 0x58
 800d638:	4b22      	ldr	r3, [pc, #136]	; (800d6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d63c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d644:	f7ff f9a6 	bl	800c994 <HAL_PWREx_GetVoltageRange>
 800d648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d64a:	4b1e      	ldr	r3, [pc, #120]	; (800d6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d64e:	4a1d      	ldr	r2, [pc, #116]	; (800d6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d65c:	d10b      	bne.n	800d676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b80      	cmp	r3, #128	; 0x80
 800d662:	d919      	bls.n	800d698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2ba0      	cmp	r3, #160	; 0xa0
 800d668:	d902      	bls.n	800d670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d66a:	2302      	movs	r3, #2
 800d66c:	613b      	str	r3, [r7, #16]
 800d66e:	e013      	b.n	800d698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d670:	2301      	movs	r3, #1
 800d672:	613b      	str	r3, [r7, #16]
 800d674:	e010      	b.n	800d698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b80      	cmp	r3, #128	; 0x80
 800d67a:	d902      	bls.n	800d682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d67c:	2303      	movs	r3, #3
 800d67e:	613b      	str	r3, [r7, #16]
 800d680:	e00a      	b.n	800d698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b80      	cmp	r3, #128	; 0x80
 800d686:	d102      	bne.n	800d68e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d688:	2302      	movs	r3, #2
 800d68a:	613b      	str	r3, [r7, #16]
 800d68c:	e004      	b.n	800d698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b70      	cmp	r3, #112	; 0x70
 800d692:	d101      	bne.n	800d698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d694:	2301      	movs	r3, #1
 800d696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d698:	4b0b      	ldr	r3, [pc, #44]	; (800d6c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f023 0207 	bic.w	r2, r3, #7
 800d6a0:	4909      	ldr	r1, [pc, #36]	; (800d6c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d6a8:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 0307 	and.w	r3, r3, #7
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d001      	beq.n	800d6ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e000      	b.n	800d6bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	40021000 	.word	0x40021000
 800d6c8:	40022000 	.word	0x40022000

0800d6cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d6d8:	2300      	movs	r3, #0
 800d6da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d031      	beq.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d6f0:	d01a      	beq.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800d6f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d6f6:	d814      	bhi.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d009      	beq.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d6fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d700:	d10f      	bne.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800d702:	4b5d      	ldr	r3, [pc, #372]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	4a5c      	ldr	r2, [pc, #368]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d70c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d70e:	e00c      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3304      	adds	r3, #4
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f000 fa22 	bl	800db60 <RCCEx_PLLSAI1_Config>
 800d71c:	4603      	mov	r3, r0
 800d71e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d720:	e003      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	74fb      	strb	r3, [r7, #19]
      break;
 800d726:	e000      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800d728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d72a:	7cfb      	ldrb	r3, [r7, #19]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10b      	bne.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d730:	4b51      	ldr	r3, [pc, #324]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73e:	494e      	ldr	r1, [pc, #312]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d740:	4313      	orrs	r3, r2
 800d742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d746:	e001      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d748:	7cfb      	ldrb	r3, [r7, #19]
 800d74a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 809e 	beq.w	800d896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d75a:	2300      	movs	r3, #0
 800d75c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d75e:	4b46      	ldr	r3, [pc, #280]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d101      	bne.n	800d76e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e000      	b.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800d76e:	2300      	movs	r3, #0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00d      	beq.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d774:	4b40      	ldr	r3, [pc, #256]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d778:	4a3f      	ldr	r2, [pc, #252]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d77a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d77e:	6593      	str	r3, [r2, #88]	; 0x58
 800d780:	4b3d      	ldr	r3, [pc, #244]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d788:	60bb      	str	r3, [r7, #8]
 800d78a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d78c:	2301      	movs	r3, #1
 800d78e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d790:	4b3a      	ldr	r3, [pc, #232]	; (800d87c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a39      	ldr	r2, [pc, #228]	; (800d87c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d79a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d79c:	f7fd ff7c 	bl	800b698 <HAL_GetTick>
 800d7a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d7a2:	e009      	b.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7a4:	f7fd ff78 	bl	800b698 <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	2b02      	cmp	r3, #2
 800d7b0:	d902      	bls.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	74fb      	strb	r3, [r7, #19]
        break;
 800d7b6:	e005      	b.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d7b8:	4b30      	ldr	r3, [pc, #192]	; (800d87c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d0ef      	beq.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800d7c4:	7cfb      	ldrb	r3, [r7, #19]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d15a      	bne.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d7ca:	4b2b      	ldr	r3, [pc, #172]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d01e      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d019      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d7e6:	4b24      	ldr	r3, [pc, #144]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d7f2:	4b21      	ldr	r3, [pc, #132]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f8:	4a1f      	ldr	r2, [pc, #124]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d7fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d802:	4b1d      	ldr	r3, [pc, #116]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d808:	4a1b      	ldr	r2, [pc, #108]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d80a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d80e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d812:	4a19      	ldr	r2, [pc, #100]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d016      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d824:	f7fd ff38 	bl	800b698 <HAL_GetTick>
 800d828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d82a:	e00b      	b.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d82c:	f7fd ff34 	bl	800b698 <HAL_GetTick>
 800d830:	4602      	mov	r2, r0
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	f241 3288 	movw	r2, #5000	; 0x1388
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d902      	bls.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800d83e:	2303      	movs	r3, #3
 800d840:	74fb      	strb	r3, [r7, #19]
            break;
 800d842:	e006      	b.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d844:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0ec      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800d852:	7cfb      	ldrb	r3, [r7, #19]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10b      	bne.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d858:	4b07      	ldr	r3, [pc, #28]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d866:	4904      	ldr	r1, [pc, #16]	; (800d878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d868:	4313      	orrs	r3, r2
 800d86a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d86e:	e009      	b.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d870:	7cfb      	ldrb	r3, [r7, #19]
 800d872:	74bb      	strb	r3, [r7, #18]
 800d874:	e006      	b.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800d876:	bf00      	nop
 800d878:	40021000 	.word	0x40021000
 800d87c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d880:	7cfb      	ldrb	r3, [r7, #19]
 800d882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d884:	7c7b      	ldrb	r3, [r7, #17]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d105      	bne.n	800d896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d88a:	4b8d      	ldr	r3, [pc, #564]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d88c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d88e:	4a8c      	ldr	r2, [pc, #560]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00a      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d8a2:	4b87      	ldr	r3, [pc, #540]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8a8:	f023 0203 	bic.w	r2, r3, #3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a1b      	ldr	r3, [r3, #32]
 800d8b0:	4983      	ldr	r1, [pc, #524]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f003 0302 	and.w	r3, r3, #2
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00a      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d8c4:	4b7e      	ldr	r3, [pc, #504]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8ca:	f023 020c 	bic.w	r2, r3, #12
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d2:	497b      	ldr	r1, [pc, #492]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 0304 	and.w	r3, r3, #4
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d8e6:	4b76      	ldr	r3, [pc, #472]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f4:	4972      	ldr	r1, [pc, #456]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 0320 	and.w	r3, r3, #32
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00a      	beq.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d908:	4b6d      	ldr	r3, [pc, #436]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d90e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	496a      	ldr	r1, [pc, #424]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d918:	4313      	orrs	r3, r2
 800d91a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d92a:	4b65      	ldr	r3, [pc, #404]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d938:	4961      	ldr	r1, [pc, #388]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d93a:	4313      	orrs	r3, r2
 800d93c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00a      	beq.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d94c:	4b5c      	ldr	r3, [pc, #368]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95a:	4959      	ldr	r1, [pc, #356]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d96e:	4b54      	ldr	r3, [pc, #336]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97c:	4950      	ldr	r1, [pc, #320]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d97e:	4313      	orrs	r3, r2
 800d980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00a      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d990:	4b4b      	ldr	r3, [pc, #300]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99e:	4948      	ldr	r1, [pc, #288]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00a      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d9b2:	4b43      	ldr	r3, [pc, #268]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c0:	493f      	ldr	r1, [pc, #252]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d028      	beq.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d9d4:	4b3a      	ldr	r3, [pc, #232]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9e2:	4937      	ldr	r1, [pc, #220]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9f2:	d106      	bne.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9f4:	4b32      	ldr	r3, [pc, #200]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	4a31      	ldr	r2, [pc, #196]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d9fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9fe:	60d3      	str	r3, [r2, #12]
 800da00:	e011      	b.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da0a:	d10c      	bne.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3304      	adds	r3, #4
 800da10:	2101      	movs	r1, #1
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f8a4 	bl	800db60 <RCCEx_PLLSAI1_Config>
 800da18:	4603      	mov	r3, r0
 800da1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800da1c:	7cfb      	ldrb	r3, [r7, #19]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800da22:	7cfb      	ldrb	r3, [r7, #19]
 800da24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d028      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800da32:	4b23      	ldr	r3, [pc, #140]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800da34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da40:	491f      	ldr	r1, [pc, #124]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800da42:	4313      	orrs	r3, r2
 800da44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da50:	d106      	bne.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da52:	4b1b      	ldr	r3, [pc, #108]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	4a1a      	ldr	r2, [pc, #104]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800da58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da5c:	60d3      	str	r3, [r2, #12]
 800da5e:	e011      	b.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da68:	d10c      	bne.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3304      	adds	r3, #4
 800da6e:	2101      	movs	r1, #1
 800da70:	4618      	mov	r0, r3
 800da72:	f000 f875 	bl	800db60 <RCCEx_PLLSAI1_Config>
 800da76:	4603      	mov	r3, r0
 800da78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800da7a:	7cfb      	ldrb	r3, [r7, #19]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800da80:	7cfb      	ldrb	r3, [r7, #19]
 800da82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d02b      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800da90:	4b0b      	ldr	r3, [pc, #44]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800da92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da9e:	4908      	ldr	r1, [pc, #32]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800daa0:	4313      	orrs	r3, r2
 800daa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800daae:	d109      	bne.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dab0:	4b03      	ldr	r3, [pc, #12]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	4a02      	ldr	r2, [pc, #8]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daba:	60d3      	str	r3, [r2, #12]
 800dabc:	e014      	b.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800dabe:	bf00      	nop
 800dac0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dacc:	d10c      	bne.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3304      	adds	r3, #4
 800dad2:	2101      	movs	r1, #1
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 f843 	bl	800db60 <RCCEx_PLLSAI1_Config>
 800dada:	4603      	mov	r3, r0
 800dadc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dade:	7cfb      	ldrb	r3, [r7, #19]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800dae4:	7cfb      	ldrb	r3, [r7, #19]
 800dae6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01c      	beq.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800daf4:	4b19      	ldr	r3, [pc, #100]	; (800db5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800daf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dafa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db02:	4916      	ldr	r1, [pc, #88]	; (800db5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db04:	4313      	orrs	r3, r2
 800db06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db12:	d10c      	bne.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3304      	adds	r3, #4
 800db18:	2102      	movs	r1, #2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f000 f820 	bl	800db60 <RCCEx_PLLSAI1_Config>
 800db20:	4603      	mov	r3, r0
 800db22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db24:	7cfb      	ldrb	r3, [r7, #19]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800db2a:	7cfb      	ldrb	r3, [r7, #19]
 800db2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800db3a:	4b08      	ldr	r3, [pc, #32]	; (800db5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db48:	4904      	ldr	r1, [pc, #16]	; (800db5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db4a:	4313      	orrs	r3, r2
 800db4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800db50:	7cbb      	ldrb	r3, [r7, #18]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3718      	adds	r7, #24
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	40021000 	.word	0x40021000

0800db60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800db6e:	4b74      	ldr	r3, [pc, #464]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	f003 0303 	and.w	r3, r3, #3
 800db76:	2b00      	cmp	r3, #0
 800db78:	d018      	beq.n	800dbac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800db7a:	4b71      	ldr	r3, [pc, #452]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	f003 0203 	and.w	r2, r3, #3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d10d      	bne.n	800dba6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
       ||
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d009      	beq.n	800dba6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800db92:	4b6b      	ldr	r3, [pc, #428]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	091b      	lsrs	r3, r3, #4
 800db98:	f003 0307 	and.w	r3, r3, #7
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685b      	ldr	r3, [r3, #4]
       ||
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d047      	beq.n	800dc36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	73fb      	strb	r3, [r7, #15]
 800dbaa:	e044      	b.n	800dc36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d018      	beq.n	800dbe6 <RCCEx_PLLSAI1_Config+0x86>
 800dbb4:	2b03      	cmp	r3, #3
 800dbb6:	d825      	bhi.n	800dc04 <RCCEx_PLLSAI1_Config+0xa4>
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d002      	beq.n	800dbc2 <RCCEx_PLLSAI1_Config+0x62>
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d009      	beq.n	800dbd4 <RCCEx_PLLSAI1_Config+0x74>
 800dbc0:	e020      	b.n	800dc04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800dbc2:	4b5f      	ldr	r3, [pc, #380]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d11d      	bne.n	800dc0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dbd2:	e01a      	b.n	800dc0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800dbd4:	4b5a      	ldr	r3, [pc, #360]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d116      	bne.n	800dc0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dbe4:	e013      	b.n	800dc0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dbe6:	4b56      	ldr	r3, [pc, #344]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10f      	bne.n	800dc12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dbf2:	4b53      	ldr	r3, [pc, #332]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d109      	bne.n	800dc12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc02:	e006      	b.n	800dc12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	73fb      	strb	r3, [r7, #15]
      break;
 800dc08:	e004      	b.n	800dc14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800dc0a:	bf00      	nop
 800dc0c:	e002      	b.n	800dc14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800dc0e:	bf00      	nop
 800dc10:	e000      	b.n	800dc14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800dc12:	bf00      	nop
    }

    if(status == HAL_OK)
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10d      	bne.n	800dc36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800dc1a:	4b49      	ldr	r3, [pc, #292]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6819      	ldr	r1, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	011b      	lsls	r3, r3, #4
 800dc2e:	430b      	orrs	r3, r1
 800dc30:	4943      	ldr	r1, [pc, #268]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d17c      	bne.n	800dd36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800dc3c:	4b40      	ldr	r3, [pc, #256]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a3f      	ldr	r2, [pc, #252]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc48:	f7fd fd26 	bl	800b698 <HAL_GetTick>
 800dc4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dc4e:	e009      	b.n	800dc64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc50:	f7fd fd22 	bl	800b698 <HAL_GetTick>
 800dc54:	4602      	mov	r2, r0
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d902      	bls.n	800dc64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	73fb      	strb	r3, [r7, #15]
        break;
 800dc62:	e005      	b.n	800dc70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dc64:	4b36      	ldr	r3, [pc, #216]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1ef      	bne.n	800dc50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d15f      	bne.n	800dd36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d110      	bne.n	800dc9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dc7c:	4b30      	ldr	r3, [pc, #192]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800dc84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	6892      	ldr	r2, [r2, #8]
 800dc8c:	0211      	lsls	r1, r2, #8
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	68d2      	ldr	r2, [r2, #12]
 800dc92:	06d2      	lsls	r2, r2, #27
 800dc94:	430a      	orrs	r2, r1
 800dc96:	492a      	ldr	r1, [pc, #168]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	610b      	str	r3, [r1, #16]
 800dc9c:	e027      	b.n	800dcee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d112      	bne.n	800dcca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dca4:	4b26      	ldr	r3, [pc, #152]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800dcac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	6892      	ldr	r2, [r2, #8]
 800dcb4:	0211      	lsls	r1, r2, #8
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	6912      	ldr	r2, [r2, #16]
 800dcba:	0852      	lsrs	r2, r2, #1
 800dcbc:	3a01      	subs	r2, #1
 800dcbe:	0552      	lsls	r2, r2, #21
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	491f      	ldr	r1, [pc, #124]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	610b      	str	r3, [r1, #16]
 800dcc8:	e011      	b.n	800dcee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dcca:	4b1d      	ldr	r3, [pc, #116]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800dcd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	6892      	ldr	r2, [r2, #8]
 800dcda:	0211      	lsls	r1, r2, #8
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	6952      	ldr	r2, [r2, #20]
 800dce0:	0852      	lsrs	r2, r2, #1
 800dce2:	3a01      	subs	r2, #1
 800dce4:	0652      	lsls	r2, r2, #25
 800dce6:	430a      	orrs	r2, r1
 800dce8:	4915      	ldr	r1, [pc, #84]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dcea:	4313      	orrs	r3, r2
 800dcec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800dcee:	4b14      	ldr	r3, [pc, #80]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a13      	ldr	r2, [pc, #76]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dcf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcf8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcfa:	f7fd fccd 	bl	800b698 <HAL_GetTick>
 800dcfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dd00:	e009      	b.n	800dd16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dd02:	f7fd fcc9 	bl	800b698 <HAL_GetTick>
 800dd06:	4602      	mov	r2, r0
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d902      	bls.n	800dd16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800dd10:	2303      	movs	r3, #3
 800dd12:	73fb      	strb	r3, [r7, #15]
          break;
 800dd14:	e005      	b.n	800dd22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dd16:	4b0a      	ldr	r3, [pc, #40]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0ef      	beq.n	800dd02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d106      	bne.n	800dd36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800dd28:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dd2a:	691a      	ldr	r2, [r3, #16]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	699b      	ldr	r3, [r3, #24]
 800dd30:	4903      	ldr	r1, [pc, #12]	; (800dd40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dd32:	4313      	orrs	r3, r2
 800dd34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	40021000 	.word	0x40021000

0800dd44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e095      	b.n	800de82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d108      	bne.n	800dd70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd66:	d009      	beq.n	800dd7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	61da      	str	r2, [r3, #28]
 800dd6e:	e005      	b.n	800dd7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7f5 f88c 	bl	8002eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2202      	movs	r2, #2
 800dda0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ddbc:	d902      	bls.n	800ddc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60fb      	str	r3, [r7, #12]
 800ddc2:	e002      	b.n	800ddca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ddc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ddd2:	d007      	beq.n	800dde4 <HAL_SPI_Init+0xa0>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dddc:	d002      	beq.n	800dde4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ddf4:	431a      	orrs	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	f003 0302 	and.w	r3, r3, #2
 800ddfe:	431a      	orrs	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	695b      	ldr	r3, [r3, #20]
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	431a      	orrs	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	69db      	ldr	r3, [r3, #28]
 800de18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de1c:	431a      	orrs	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de26:	ea42 0103 	orr.w	r1, r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	430a      	orrs	r2, r1
 800de38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	699b      	ldr	r3, [r3, #24]
 800de3e:	0c1b      	lsrs	r3, r3, #16
 800de40:	f003 0204 	and.w	r2, r3, #4
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de48:	f003 0310 	and.w	r3, r3, #16
 800de4c:	431a      	orrs	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de52:	f003 0308 	and.w	r3, r3, #8
 800de56:	431a      	orrs	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800de60:	ea42 0103 	orr.w	r1, r2, r3
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	430a      	orrs	r2, r1
 800de70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b088      	sub	sp, #32
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	603b      	str	r3, [r7, #0]
 800de96:	4613      	mov	r3, r2
 800de98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d101      	bne.n	800deac <HAL_SPI_Transmit+0x22>
 800dea8:	2302      	movs	r3, #2
 800deaa:	e158      	b.n	800e15e <HAL_SPI_Transmit+0x2d4>
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800deb4:	f7fd fbf0 	bl	800b698 <HAL_GetTick>
 800deb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800deba:	88fb      	ldrh	r3, [r7, #6]
 800debc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d002      	beq.n	800ded0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800deca:	2302      	movs	r3, #2
 800decc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dece:	e13d      	b.n	800e14c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <HAL_SPI_Transmit+0x52>
 800ded6:	88fb      	ldrh	r3, [r7, #6]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dee0:	e134      	b.n	800e14c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2203      	movs	r2, #3
 800dee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	88fa      	ldrh	r2, [r7, #6]
 800defa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	88fa      	ldrh	r2, [r7, #6]
 800df00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df2c:	d10f      	bne.n	800df4e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df58:	2b40      	cmp	r3, #64	; 0x40
 800df5a:	d007      	beq.n	800df6c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df74:	d94b      	bls.n	800e00e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <HAL_SPI_Transmit+0xfa>
 800df7e:	8afb      	ldrh	r3, [r7, #22]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d13e      	bne.n	800e002 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	881a      	ldrh	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df94:	1c9a      	adds	r2, r3, #2
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dfa8:	e02b      	b.n	800e002 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	f003 0302 	and.w	r3, r3, #2
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d112      	bne.n	800dfde <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbc:	881a      	ldrh	r2, [r3, #0]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc8:	1c9a      	adds	r2, r3, #2
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfdc:	e011      	b.n	800e002 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfde:	f7fd fb5b 	bl	800b698 <HAL_GetTick>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d803      	bhi.n	800dff6 <HAL_SPI_Transmit+0x16c>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff4:	d102      	bne.n	800dffc <HAL_SPI_Transmit+0x172>
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d102      	bne.n	800e002 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800dffc:	2303      	movs	r3, #3
 800dffe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e000:	e0a4      	b.n	800e14c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e006:	b29b      	uxth	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1ce      	bne.n	800dfaa <HAL_SPI_Transmit+0x120>
 800e00c:	e07c      	b.n	800e108 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <HAL_SPI_Transmit+0x192>
 800e016:	8afb      	ldrh	r3, [r7, #22]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d170      	bne.n	800e0fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e020:	b29b      	uxth	r3, r3
 800e022:	2b01      	cmp	r3, #1
 800e024:	d912      	bls.n	800e04c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02a:	881a      	ldrh	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e036:	1c9a      	adds	r2, r3, #2
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e040:	b29b      	uxth	r3, r3
 800e042:	3b02      	subs	r3, #2
 800e044:	b29a      	uxth	r2, r3
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e04a:	e058      	b.n	800e0fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	330c      	adds	r3, #12
 800e056:	7812      	ldrb	r2, [r2, #0]
 800e058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e068:	b29b      	uxth	r3, r3
 800e06a:	3b01      	subs	r3, #1
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e072:	e044      	b.n	800e0fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	f003 0302 	and.w	r3, r3, #2
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d12b      	bne.n	800e0da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e086:	b29b      	uxth	r3, r3
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d912      	bls.n	800e0b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e090:	881a      	ldrh	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09c:	1c9a      	adds	r2, r3, #2
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	3b02      	subs	r3, #2
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0b0:	e025      	b.n	800e0fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	330c      	adds	r3, #12
 800e0bc:	7812      	ldrb	r2, [r2, #0]
 800e0be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0d8:	e011      	b.n	800e0fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0da:	f7fd fadd 	bl	800b698 <HAL_GetTick>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d803      	bhi.n	800e0f2 <HAL_SPI_Transmit+0x268>
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f0:	d102      	bne.n	800e0f8 <HAL_SPI_Transmit+0x26e>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e0fc:	e026      	b.n	800e14c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e102:	b29b      	uxth	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1b5      	bne.n	800e074 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 fce3 	bl	800ead8 <SPI_EndRxTxTransaction>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2220      	movs	r2, #32
 800e11c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10a      	bne.n	800e13c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e126:	2300      	movs	r3, #0
 800e128:	613b      	str	r3, [r7, #16]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	613b      	str	r3, [r7, #16]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	77fb      	strb	r3, [r7, #31]
 800e148:	e000      	b.n	800e14c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e14a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3720      	adds	r7, #32
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b088      	sub	sp, #32
 800e16a:	af02      	add	r7, sp, #8
 800e16c:	60f8      	str	r0, [r7, #12]
 800e16e:	60b9      	str	r1, [r7, #8]
 800e170:	603b      	str	r3, [r7, #0]
 800e172:	4613      	mov	r3, r2
 800e174:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e182:	d112      	bne.n	800e1aa <HAL_SPI_Receive+0x44>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10e      	bne.n	800e1aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2204      	movs	r2, #4
 800e190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e194:	88fa      	ldrh	r2, [r7, #6]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	4613      	mov	r3, r2
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	68b9      	ldr	r1, [r7, #8]
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f910 	bl	800e3c6 <HAL_SPI_TransmitReceive>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	e109      	b.n	800e3be <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d101      	bne.n	800e1b8 <HAL_SPI_Receive+0x52>
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	e102      	b.n	800e3be <HAL_SPI_Receive+0x258>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1c0:	f7fd fa6a 	bl	800b698 <HAL_GetTick>
 800e1c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d002      	beq.n	800e1d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1d6:	e0e9      	b.n	800e3ac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d002      	beq.n	800e1e4 <HAL_SPI_Receive+0x7e>
 800e1de:	88fb      	ldrh	r3, [r7, #6]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1e8:	e0e0      	b.n	800e3ac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2204      	movs	r2, #4
 800e1ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	88fa      	ldrh	r2, [r7, #6]
 800e20a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2200      	movs	r2, #0
 800e212:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e234:	d908      	bls.n	800e248 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e244:	605a      	str	r2, [r3, #4]
 800e246:	e007      	b.n	800e258 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e256:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e260:	d10f      	bne.n	800e282 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e280:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e28c:	2b40      	cmp	r3, #64	; 0x40
 800e28e:	d007      	beq.n	800e2a0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e29e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2a8:	d867      	bhi.n	800e37a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e2aa:	e030      	b.n	800e30e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d117      	bne.n	800e2ea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f103 020c 	add.w	r2, r3, #12
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c6:	7812      	ldrb	r2, [r2, #0]
 800e2c8:	b2d2      	uxtb	r2, r2
 800e2ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d0:	1c5a      	adds	r2, r3, #1
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2e8:	e011      	b.n	800e30e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2ea:	f7fd f9d5 	bl	800b698 <HAL_GetTick>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d803      	bhi.n	800e302 <HAL_SPI_Receive+0x19c>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e300:	d102      	bne.n	800e308 <HAL_SPI_Receive+0x1a2>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e308:	2303      	movs	r3, #3
 800e30a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e30c:	e04e      	b.n	800e3ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e314:	b29b      	uxth	r3, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1c8      	bne.n	800e2ac <HAL_SPI_Receive+0x146>
 800e31a:	e034      	b.n	800e386 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	2b01      	cmp	r3, #1
 800e328:	d115      	bne.n	800e356 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	68da      	ldr	r2, [r3, #12]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e334:	b292      	uxth	r2, r2
 800e336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e33c:	1c9a      	adds	r2, r3, #2
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e348:	b29b      	uxth	r3, r3
 800e34a:	3b01      	subs	r3, #1
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e354:	e011      	b.n	800e37a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e356:	f7fd f99f 	bl	800b698 <HAL_GetTick>
 800e35a:	4602      	mov	r2, r0
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	1ad3      	subs	r3, r2, r3
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	429a      	cmp	r2, r3
 800e364:	d803      	bhi.n	800e36e <HAL_SPI_Receive+0x208>
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36c:	d102      	bne.n	800e374 <HAL_SPI_Receive+0x20e>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d102      	bne.n	800e37a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e374:	2303      	movs	r3, #3
 800e376:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e378:	e018      	b.n	800e3ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e380:	b29b      	uxth	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1ca      	bne.n	800e31c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f000 fb4c 	bl	800ea28 <SPI_EndRxTransaction>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2220      	movs	r2, #32
 800e39a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	75fb      	strb	r3, [r7, #23]
 800e3a8:	e000      	b.n	800e3ac <HAL_SPI_Receive+0x246>
  }

error :
 800e3aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b08a      	sub	sp, #40	; 0x28
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	60b9      	str	r1, [r7, #8]
 800e3d0:	607a      	str	r2, [r7, #4]
 800e3d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d101      	bne.n	800e3ec <HAL_SPI_TransmitReceive+0x26>
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	e1fb      	b.n	800e7e4 <HAL_SPI_TransmitReceive+0x41e>
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3f4:	f7fd f950 	bl	800b698 <HAL_GetTick>
 800e3f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e400:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e408:	887b      	ldrh	r3, [r7, #2]
 800e40a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e40c:	887b      	ldrh	r3, [r7, #2]
 800e40e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e410:	7efb      	ldrb	r3, [r7, #27]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d00e      	beq.n	800e434 <HAL_SPI_TransmitReceive+0x6e>
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e41c:	d106      	bne.n	800e42c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d102      	bne.n	800e42c <HAL_SPI_TransmitReceive+0x66>
 800e426:	7efb      	ldrb	r3, [r7, #27]
 800e428:	2b04      	cmp	r3, #4
 800e42a:	d003      	beq.n	800e434 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e42c:	2302      	movs	r3, #2
 800e42e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e432:	e1cd      	b.n	800e7d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d005      	beq.n	800e446 <HAL_SPI_TransmitReceive+0x80>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d002      	beq.n	800e446 <HAL_SPI_TransmitReceive+0x80>
 800e440:	887b      	ldrh	r3, [r7, #2]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d103      	bne.n	800e44e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e44c:	e1c0      	b.n	800e7d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b04      	cmp	r3, #4
 800e458:	d003      	beq.n	800e462 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2205      	movs	r2, #5
 800e45e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	887a      	ldrh	r2, [r7, #2]
 800e472:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	887a      	ldrh	r2, [r7, #2]
 800e47a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	887a      	ldrh	r2, [r7, #2]
 800e488:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	887a      	ldrh	r2, [r7, #2]
 800e48e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e4a4:	d802      	bhi.n	800e4ac <HAL_SPI_TransmitReceive+0xe6>
 800e4a6:	8a3b      	ldrh	r3, [r7, #16]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d908      	bls.n	800e4be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e4ba:	605a      	str	r2, [r3, #4]
 800e4bc:	e007      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685a      	ldr	r2, [r3, #4]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d8:	2b40      	cmp	r3, #64	; 0x40
 800e4da:	d007      	beq.n	800e4ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e4f4:	d97c      	bls.n	800e5f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <HAL_SPI_TransmitReceive+0x13e>
 800e4fe:	8a7b      	ldrh	r3, [r7, #18]
 800e500:	2b01      	cmp	r3, #1
 800e502:	d169      	bne.n	800e5d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e508:	881a      	ldrh	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e514:	1c9a      	adds	r2, r3, #2
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e51e:	b29b      	uxth	r3, r3
 800e520:	3b01      	subs	r3, #1
 800e522:	b29a      	uxth	r2, r3
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e528:	e056      	b.n	800e5d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	689b      	ldr	r3, [r3, #8]
 800e530:	f003 0302 	and.w	r3, r3, #2
 800e534:	2b02      	cmp	r3, #2
 800e536:	d11b      	bne.n	800e570 <HAL_SPI_TransmitReceive+0x1aa>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d016      	beq.n	800e570 <HAL_SPI_TransmitReceive+0x1aa>
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	2b01      	cmp	r3, #1
 800e546:	d113      	bne.n	800e570 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54c:	881a      	ldrh	r2, [r3, #0]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e558:	1c9a      	adds	r2, r3, #2
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e562:	b29b      	uxth	r3, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	b29a      	uxth	r2, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e56c:	2300      	movs	r3, #0
 800e56e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d11c      	bne.n	800e5b8 <HAL_SPI_TransmitReceive+0x1f2>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e584:	b29b      	uxth	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d016      	beq.n	800e5b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68da      	ldr	r2, [r3, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e594:	b292      	uxth	r2, r2
 800e596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59c:	1c9a      	adds	r2, r3, #2
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e5b8:	f7fd f86e 	bl	800b698 <HAL_GetTick>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d807      	bhi.n	800e5d8 <HAL_SPI_TransmitReceive+0x212>
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ce:	d003      	beq.n	800e5d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e5d6:	e0fb      	b.n	800e7d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1a3      	bne.n	800e52a <HAL_SPI_TransmitReceive+0x164>
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d19d      	bne.n	800e52a <HAL_SPI_TransmitReceive+0x164>
 800e5ee:	e0df      	b.n	800e7b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d003      	beq.n	800e600 <HAL_SPI_TransmitReceive+0x23a>
 800e5f8:	8a7b      	ldrh	r3, [r7, #18]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	f040 80cb 	bne.w	800e796 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e604:	b29b      	uxth	r3, r3
 800e606:	2b01      	cmp	r3, #1
 800e608:	d912      	bls.n	800e630 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60e:	881a      	ldrh	r2, [r3, #0]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	1c9a      	adds	r2, r3, #2
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e624:	b29b      	uxth	r3, r3
 800e626:	3b02      	subs	r3, #2
 800e628:	b29a      	uxth	r2, r3
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e62e:	e0b2      	b.n	800e796 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	330c      	adds	r3, #12
 800e63a:	7812      	ldrb	r2, [r2, #0]
 800e63c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	3b01      	subs	r3, #1
 800e650:	b29a      	uxth	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e656:	e09e      	b.n	800e796 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b02      	cmp	r3, #2
 800e664:	d134      	bne.n	800e6d0 <HAL_SPI_TransmitReceive+0x30a>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d02f      	beq.n	800e6d0 <HAL_SPI_TransmitReceive+0x30a>
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	2b01      	cmp	r3, #1
 800e674:	d12c      	bne.n	800e6d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d912      	bls.n	800e6a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e684:	881a      	ldrh	r2, [r3, #0]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e690:	1c9a      	adds	r2, r3, #2
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	3b02      	subs	r3, #2
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e6a4:	e012      	b.n	800e6cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	330c      	adds	r3, #12
 800e6b0:	7812      	ldrb	r2, [r2, #0]
 800e6b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d148      	bne.n	800e770 <HAL_SPI_TransmitReceive+0x3aa>
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d042      	beq.n	800e770 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d923      	bls.n	800e73e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68da      	ldr	r2, [r3, #12]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e700:	b292      	uxth	r2, r2
 800e702:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e708:	1c9a      	adds	r2, r3, #2
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e714:	b29b      	uxth	r3, r3
 800e716:	3b02      	subs	r3, #2
 800e718:	b29a      	uxth	r2, r3
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e726:	b29b      	uxth	r3, r3
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d81f      	bhi.n	800e76c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e73a:	605a      	str	r2, [r3, #4]
 800e73c:	e016      	b.n	800e76c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f103 020c 	add.w	r2, r3, #12
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74a:	7812      	ldrb	r2, [r2, #0]
 800e74c:	b2d2      	uxtb	r2, r2
 800e74e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e760:	b29b      	uxth	r3, r3
 800e762:	3b01      	subs	r3, #1
 800e764:	b29a      	uxth	r2, r3
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e76c:	2301      	movs	r3, #1
 800e76e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e770:	f7fc ff92 	bl	800b698 <HAL_GetTick>
 800e774:	4602      	mov	r2, r0
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d803      	bhi.n	800e788 <HAL_SPI_TransmitReceive+0x3c2>
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e786:	d102      	bne.n	800e78e <HAL_SPI_TransmitReceive+0x3c8>
 800e788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d103      	bne.n	800e796 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e78e:	2303      	movs	r3, #3
 800e790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e794:	e01c      	b.n	800e7d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f47f af5b 	bne.w	800e658 <HAL_SPI_TransmitReceive+0x292>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f47f af54 	bne.w	800e658 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7b0:	69fa      	ldr	r2, [r7, #28]
 800e7b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 f98f 	bl	800ead8 <SPI_EndRxTxTransaction>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2220      	movs	r2, #32
 800e7ca:	661a      	str	r2, [r3, #96]	; 0x60
 800e7cc:	e000      	b.n	800e7d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e7ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e7e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3728      	adds	r7, #40	; 0x28
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	603b      	str	r3, [r7, #0]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e7fc:	f7fc ff4c 	bl	800b698 <HAL_GetTick>
 800e800:	4602      	mov	r2, r0
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	1a9b      	subs	r3, r3, r2
 800e806:	683a      	ldr	r2, [r7, #0]
 800e808:	4413      	add	r3, r2
 800e80a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e80c:	f7fc ff44 	bl	800b698 <HAL_GetTick>
 800e810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e812:	4b39      	ldr	r3, [pc, #228]	; (800e8f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	015b      	lsls	r3, r3, #5
 800e818:	0d1b      	lsrs	r3, r3, #20
 800e81a:	69fa      	ldr	r2, [r7, #28]
 800e81c:	fb02 f303 	mul.w	r3, r2, r3
 800e820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e822:	e054      	b.n	800e8ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82a:	d050      	beq.n	800e8ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e82c:	f7fc ff34 	bl	800b698 <HAL_GetTick>
 800e830:	4602      	mov	r2, r0
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	69fa      	ldr	r2, [r7, #28]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d902      	bls.n	800e842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d13d      	bne.n	800e8be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e85a:	d111      	bne.n	800e880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e864:	d004      	beq.n	800e870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e86e:	d107      	bne.n	800e880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e87e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e888:	d10f      	bne.n	800e8aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e898:	601a      	str	r2, [r3, #0]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e017      	b.n	800e8ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d101      	bne.n	800e8c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	689a      	ldr	r2, [r3, #8]
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	bf0c      	ite	eq
 800e8de:	2301      	moveq	r3, #1
 800e8e0:	2300      	movne	r3, #0
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	79fb      	ldrb	r3, [r7, #7]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d19b      	bne.n	800e824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20000014 	.word	0x20000014

0800e8fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08a      	sub	sp, #40	; 0x28
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
 800e908:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e90e:	f7fc fec3 	bl	800b698 <HAL_GetTick>
 800e912:	4602      	mov	r2, r0
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	4413      	add	r3, r2
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e91e:	f7fc febb 	bl	800b698 <HAL_GetTick>
 800e922:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	330c      	adds	r3, #12
 800e92a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e92c:	4b3d      	ldr	r3, [pc, #244]	; (800ea24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	4613      	mov	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4413      	add	r3, r2
 800e936:	00da      	lsls	r2, r3, #3
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	0d1b      	lsrs	r3, r3, #20
 800e93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93e:	fb02 f303 	mul.w	r3, r2, r3
 800e942:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e944:	e060      	b.n	800ea08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e94c:	d107      	bne.n	800e95e <SPI_WaitFifoStateUntilTimeout+0x62>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d104      	bne.n	800e95e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e95c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e964:	d050      	beq.n	800ea08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e966:	f7fc fe97 	bl	800b698 <HAL_GetTick>
 800e96a:	4602      	mov	r2, r0
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e972:	429a      	cmp	r2, r3
 800e974:	d902      	bls.n	800e97c <SPI_WaitFifoStateUntilTimeout+0x80>
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d13d      	bne.n	800e9f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e98a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e994:	d111      	bne.n	800e9ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e99e:	d004      	beq.n	800e9aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9a8:	d107      	bne.n	800e9ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9c2:	d10f      	bne.n	800e9e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	e010      	b.n	800ea1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689a      	ldr	r2, [r3, #8]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	4013      	ands	r3, r2
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d196      	bne.n	800e946 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3728      	adds	r7, #40	; 0x28
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20000014 	.word	0x20000014

0800ea28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b086      	sub	sp, #24
 800ea2c:	af02      	add	r7, sp, #8
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea3c:	d111      	bne.n	800ea62 <SPI_EndRxTransaction+0x3a>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea46:	d004      	beq.n	800ea52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea50:	d107      	bne.n	800ea62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea60:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2180      	movs	r1, #128	; 0x80
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f7ff febd 	bl	800e7ec <SPI_WaitFlagStateUntilTimeout>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d007      	beq.n	800ea88 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea7c:	f043 0220 	orr.w	r2, r3, #32
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea84:	2303      	movs	r3, #3
 800ea86:	e023      	b.n	800ead0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea90:	d11d      	bne.n	800eace <SPI_EndRxTransaction+0xa6>
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea9a:	d004      	beq.n	800eaa6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaa4:	d113      	bne.n	800eace <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7ff ff22 	bl	800e8fc <SPI_WaitFifoStateUntilTimeout>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eac2:	f043 0220 	orr.w	r2, r3, #32
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800eaca:	2303      	movs	r3, #3
 800eacc:	e000      	b.n	800ead0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af02      	add	r7, sp, #8
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f7ff ff03 	bl	800e8fc <SPI_WaitFifoStateUntilTimeout>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d007      	beq.n	800eb0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb00:	f043 0220 	orr.w	r2, r3, #32
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	e027      	b.n	800eb5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2200      	movs	r2, #0
 800eb14:	2180      	movs	r1, #128	; 0x80
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f7ff fe68 	bl	800e7ec <SPI_WaitFlagStateUntilTimeout>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d007      	beq.n	800eb32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb26:	f043 0220 	orr.w	r2, r3, #32
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e014      	b.n	800eb5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff fedc 	bl	800e8fc <SPI_WaitFifoStateUntilTimeout>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d007      	beq.n	800eb5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb4e:	f043 0220 	orr.w	r2, r3, #32
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb56:	2303      	movs	r3, #3
 800eb58:	e000      	b.n	800eb5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	e049      	b.n	800ec0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7f4 fa08 	bl	8002fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2202      	movs	r2, #2
 800eb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	4619      	mov	r1, r3
 800eba2:	4610      	mov	r0, r2
 800eba4:	f000 fae6 	bl	800f174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
	...

0800ec14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d001      	beq.n	800ec2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e033      	b.n	800ec94 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2202      	movs	r2, #2
 800ec30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a19      	ldr	r2, [pc, #100]	; (800eca0 <HAL_TIM_Base_Start+0x8c>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d009      	beq.n	800ec52 <HAL_TIM_Base_Start+0x3e>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec46:	d004      	beq.n	800ec52 <HAL_TIM_Base_Start+0x3e>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a15      	ldr	r2, [pc, #84]	; (800eca4 <HAL_TIM_Base_Start+0x90>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d115      	bne.n	800ec7e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	689a      	ldr	r2, [r3, #8]
 800ec58:	4b13      	ldr	r3, [pc, #76]	; (800eca8 <HAL_TIM_Base_Start+0x94>)
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b06      	cmp	r3, #6
 800ec62:	d015      	beq.n	800ec90 <HAL_TIM_Base_Start+0x7c>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec6a:	d011      	beq.n	800ec90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f042 0201 	orr.w	r2, r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec7c:	e008      	b.n	800ec90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f042 0201 	orr.w	r2, r2, #1
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	e000      	b.n	800ec92 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	40012c00 	.word	0x40012c00
 800eca4:	40014000 	.word	0x40014000
 800eca8:	00010007 	.word	0x00010007

0800ecac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b085      	sub	sp, #20
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d001      	beq.n	800ecc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e03b      	b.n	800ed3c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f042 0201 	orr.w	r2, r2, #1
 800ecda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a19      	ldr	r2, [pc, #100]	; (800ed48 <HAL_TIM_Base_Start_IT+0x9c>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d009      	beq.n	800ecfa <HAL_TIM_Base_Start_IT+0x4e>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecee:	d004      	beq.n	800ecfa <HAL_TIM_Base_Start_IT+0x4e>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a15      	ldr	r2, [pc, #84]	; (800ed4c <HAL_TIM_Base_Start_IT+0xa0>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d115      	bne.n	800ed26 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	689a      	ldr	r2, [r3, #8]
 800ed00:	4b13      	ldr	r3, [pc, #76]	; (800ed50 <HAL_TIM_Base_Start_IT+0xa4>)
 800ed02:	4013      	ands	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2b06      	cmp	r3, #6
 800ed0a:	d015      	beq.n	800ed38 <HAL_TIM_Base_Start_IT+0x8c>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed12:	d011      	beq.n	800ed38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0201 	orr.w	r2, r2, #1
 800ed22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed24:	e008      	b.n	800ed38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f042 0201 	orr.w	r2, r2, #1
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	e000      	b.n	800ed3a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr
 800ed48:	40012c00 	.word	0x40012c00
 800ed4c:	40014000 	.word	0x40014000
 800ed50:	00010007 	.word	0x00010007

0800ed54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	f003 0302 	and.w	r3, r3, #2
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d122      	bne.n	800edb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	f003 0302 	and.w	r3, r3, #2
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d11b      	bne.n	800edb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f06f 0202 	mvn.w	r2, #2
 800ed80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2201      	movs	r2, #1
 800ed86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	699b      	ldr	r3, [r3, #24]
 800ed8e:	f003 0303 	and.w	r3, r3, #3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d003      	beq.n	800ed9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f9ce 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800ed9c:	e005      	b.n	800edaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f9c0 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 f9d1 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	f003 0304 	and.w	r3, r3, #4
 800edba:	2b04      	cmp	r3, #4
 800edbc:	d122      	bne.n	800ee04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	f003 0304 	and.w	r3, r3, #4
 800edc8:	2b04      	cmp	r3, #4
 800edca:	d11b      	bne.n	800ee04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f06f 0204 	mvn.w	r2, #4
 800edd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2202      	movs	r2, #2
 800edda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d003      	beq.n	800edf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f9a4 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800edf0:	e005      	b.n	800edfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 f996 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 f9a7 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	f003 0308 	and.w	r3, r3, #8
 800ee0e:	2b08      	cmp	r3, #8
 800ee10:	d122      	bne.n	800ee58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	f003 0308 	and.w	r3, r3, #8
 800ee1c:	2b08      	cmp	r3, #8
 800ee1e:	d11b      	bne.n	800ee58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f06f 0208 	mvn.w	r2, #8
 800ee28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2204      	movs	r2, #4
 800ee2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	69db      	ldr	r3, [r3, #28]
 800ee36:	f003 0303 	and.w	r3, r3, #3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d003      	beq.n	800ee46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 f97a 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800ee44:	e005      	b.n	800ee52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f96c 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f97d 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	f003 0310 	and.w	r3, r3, #16
 800ee62:	2b10      	cmp	r3, #16
 800ee64:	d122      	bne.n	800eeac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	f003 0310 	and.w	r3, r3, #16
 800ee70:	2b10      	cmp	r3, #16
 800ee72:	d11b      	bne.n	800eeac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f06f 0210 	mvn.w	r2, #16
 800ee7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2208      	movs	r2, #8
 800ee82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	69db      	ldr	r3, [r3, #28]
 800ee8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d003      	beq.n	800ee9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f950 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800ee98:	e005      	b.n	800eea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f942 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 f953 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d10e      	bne.n	800eed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	f003 0301 	and.w	r3, r3, #1
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d107      	bne.n	800eed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f06f 0201 	mvn.w	r2, #1
 800eed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7f3 f902 	bl	80020dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eee2:	2b80      	cmp	r3, #128	; 0x80
 800eee4:	d10e      	bne.n	800ef04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eef0:	2b80      	cmp	r3, #128	; 0x80
 800eef2:	d107      	bne.n	800ef04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eefc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 faa6 	bl	800f450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef12:	d10e      	bne.n	800ef32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef1e:	2b80      	cmp	r3, #128	; 0x80
 800ef20:	d107      	bne.n	800ef32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 fa99 	bl	800f464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef3c:	2b40      	cmp	r3, #64	; 0x40
 800ef3e:	d10e      	bne.n	800ef5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef4a:	2b40      	cmp	r3, #64	; 0x40
 800ef4c:	d107      	bne.n	800ef5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 f901 	bl	800f160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	f003 0320 	and.w	r3, r3, #32
 800ef68:	2b20      	cmp	r3, #32
 800ef6a:	d10e      	bne.n	800ef8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	f003 0320 	and.w	r3, r3, #32
 800ef76:	2b20      	cmp	r3, #32
 800ef78:	d107      	bne.n	800ef8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f06f 0220 	mvn.w	r2, #32
 800ef82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fa59 	bl	800f43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef8a:	bf00      	nop
 800ef8c:	3708      	adds	r7, #8
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b084      	sub	sp, #16
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d101      	bne.n	800efae <HAL_TIM_ConfigClockSource+0x1c>
 800efaa:	2302      	movs	r3, #2
 800efac:	e0b6      	b.n	800f11c <HAL_TIM_ConfigClockSource+0x18a>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2201      	movs	r2, #1
 800efb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2202      	movs	r2, #2
 800efba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800efd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800efd8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efea:	d03e      	beq.n	800f06a <HAL_TIM_ConfigClockSource+0xd8>
 800efec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eff0:	f200 8087 	bhi.w	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800eff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eff8:	f000 8086 	beq.w	800f108 <HAL_TIM_ConfigClockSource+0x176>
 800effc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f000:	d87f      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f002:	2b70      	cmp	r3, #112	; 0x70
 800f004:	d01a      	beq.n	800f03c <HAL_TIM_ConfigClockSource+0xaa>
 800f006:	2b70      	cmp	r3, #112	; 0x70
 800f008:	d87b      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f00a:	2b60      	cmp	r3, #96	; 0x60
 800f00c:	d050      	beq.n	800f0b0 <HAL_TIM_ConfigClockSource+0x11e>
 800f00e:	2b60      	cmp	r3, #96	; 0x60
 800f010:	d877      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f012:	2b50      	cmp	r3, #80	; 0x50
 800f014:	d03c      	beq.n	800f090 <HAL_TIM_ConfigClockSource+0xfe>
 800f016:	2b50      	cmp	r3, #80	; 0x50
 800f018:	d873      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f01a:	2b40      	cmp	r3, #64	; 0x40
 800f01c:	d058      	beq.n	800f0d0 <HAL_TIM_ConfigClockSource+0x13e>
 800f01e:	2b40      	cmp	r3, #64	; 0x40
 800f020:	d86f      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f022:	2b30      	cmp	r3, #48	; 0x30
 800f024:	d064      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x15e>
 800f026:	2b30      	cmp	r3, #48	; 0x30
 800f028:	d86b      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f02a:	2b20      	cmp	r3, #32
 800f02c:	d060      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x15e>
 800f02e:	2b20      	cmp	r3, #32
 800f030:	d867      	bhi.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
 800f032:	2b00      	cmp	r3, #0
 800f034:	d05c      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x15e>
 800f036:	2b10      	cmp	r3, #16
 800f038:	d05a      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x15e>
 800f03a:	e062      	b.n	800f102 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	6899      	ldr	r1, [r3, #8]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f000 f970 	bl	800f330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f05e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	609a      	str	r2, [r3, #8]
      break;
 800f068:	e04f      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6818      	ldr	r0, [r3, #0]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	6899      	ldr	r1, [r3, #8]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	685a      	ldr	r2, [r3, #4]
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	f000 f959 	bl	800f330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689a      	ldr	r2, [r3, #8]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f08c:	609a      	str	r2, [r3, #8]
      break;
 800f08e:	e03c      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6818      	ldr	r0, [r3, #0]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	6859      	ldr	r1, [r3, #4]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	461a      	mov	r2, r3
 800f09e:	f000 f8cd 	bl	800f23c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2150      	movs	r1, #80	; 0x50
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f926 	bl	800f2fa <TIM_ITRx_SetConfig>
      break;
 800f0ae:	e02c      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6818      	ldr	r0, [r3, #0]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	6859      	ldr	r1, [r3, #4]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	f000 f8ec 	bl	800f29a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2160      	movs	r1, #96	; 0x60
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 f916 	bl	800f2fa <TIM_ITRx_SetConfig>
      break;
 800f0ce:	e01c      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	6859      	ldr	r1, [r3, #4]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	f000 f8ad 	bl	800f23c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2140      	movs	r1, #64	; 0x40
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 f906 	bl	800f2fa <TIM_ITRx_SetConfig>
      break;
 800f0ee:	e00c      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	f000 f8fd 	bl	800f2fa <TIM_ITRx_SetConfig>
      break;
 800f100:	e003      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	73fb      	strb	r3, [r7, #15]
      break;
 800f106:	e000      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2201      	movs	r2, #1
 800f10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f12c:	bf00      	nop
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a2a      	ldr	r2, [pc, #168]	; (800f230 <TIM_Base_SetConfig+0xbc>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d003      	beq.n	800f194 <TIM_Base_SetConfig+0x20>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f192:	d108      	bne.n	800f1a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f19a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a21      	ldr	r2, [pc, #132]	; (800f230 <TIM_Base_SetConfig+0xbc>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d00b      	beq.n	800f1c6 <TIM_Base_SetConfig+0x52>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1b4:	d007      	beq.n	800f1c6 <TIM_Base_SetConfig+0x52>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a1e      	ldr	r2, [pc, #120]	; (800f234 <TIM_Base_SetConfig+0xc0>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d003      	beq.n	800f1c6 <TIM_Base_SetConfig+0x52>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a1d      	ldr	r2, [pc, #116]	; (800f238 <TIM_Base_SetConfig+0xc4>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d108      	bne.n	800f1d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	695b      	ldr	r3, [r3, #20]
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	689a      	ldr	r2, [r3, #8]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4a0c      	ldr	r2, [pc, #48]	; (800f230 <TIM_Base_SetConfig+0xbc>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d007      	beq.n	800f214 <TIM_Base_SetConfig+0xa0>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a0b      	ldr	r2, [pc, #44]	; (800f234 <TIM_Base_SetConfig+0xc0>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d003      	beq.n	800f214 <TIM_Base_SetConfig+0xa0>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a0a      	ldr	r2, [pc, #40]	; (800f238 <TIM_Base_SetConfig+0xc4>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d103      	bne.n	800f21c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	691a      	ldr	r2, [r3, #16]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2201      	movs	r2, #1
 800f220:	615a      	str	r2, [r3, #20]
}
 800f222:	bf00      	nop
 800f224:	3714      	adds	r7, #20
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	40012c00 	.word	0x40012c00
 800f234:	40014000 	.word	0x40014000
 800f238:	40014400 	.word	0x40014400

0800f23c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b087      	sub	sp, #28
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6a1b      	ldr	r3, [r3, #32]
 800f24c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6a1b      	ldr	r3, [r3, #32]
 800f252:	f023 0201 	bic.w	r2, r3, #1
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	4313      	orrs	r3, r2
 800f270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	f023 030a 	bic.w	r3, r3, #10
 800f278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f27a:	697a      	ldr	r2, [r7, #20]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	4313      	orrs	r3, r2
 800f280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	693a      	ldr	r2, [r7, #16]
 800f286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	621a      	str	r2, [r3, #32]
}
 800f28e:	bf00      	nop
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b087      	sub	sp, #28
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	60b9      	str	r1, [r7, #8]
 800f2a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	f023 0210 	bic.w	r2, r3, #16
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
 800f2bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f2c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	031b      	lsls	r3, r3, #12
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f2d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	011b      	lsls	r3, r3, #4
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	697a      	ldr	r2, [r7, #20]
 800f2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	693a      	ldr	r2, [r7, #16]
 800f2ec:	621a      	str	r2, [r3, #32]
}
 800f2ee:	bf00      	nop
 800f2f0:	371c      	adds	r7, #28
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f2fa:	b480      	push	{r7}
 800f2fc:	b085      	sub	sp, #20
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	4313      	orrs	r3, r2
 800f318:	f043 0307 	orr.w	r3, r3, #7
 800f31c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	609a      	str	r2, [r3, #8]
}
 800f324:	bf00      	nop
 800f326:	3714      	adds	r7, #20
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f330:	b480      	push	{r7}
 800f332:	b087      	sub	sp, #28
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
 800f33c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f34a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	021a      	lsls	r2, r3, #8
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	431a      	orrs	r2, r3
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	4313      	orrs	r3, r2
 800f358:	697a      	ldr	r2, [r7, #20]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	697a      	ldr	r2, [r7, #20]
 800f362:	609a      	str	r2, [r3, #8]
}
 800f364:	bf00      	nop
 800f366:	371c      	adds	r7, #28
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f380:	2b01      	cmp	r3, #1
 800f382:	d101      	bne.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f384:	2302      	movs	r3, #2
 800f386:	e04f      	b.n	800f428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2202      	movs	r2, #2
 800f394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a21      	ldr	r2, [pc, #132]	; (800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d108      	bne.n	800f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f3b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a14      	ldr	r2, [pc, #80]	; (800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d009      	beq.n	800f3fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3f0:	d004      	beq.n	800f3fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4a10      	ldr	r2, [pc, #64]	; (800f438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d10c      	bne.n	800f416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	68ba      	ldr	r2, [r7, #8]
 800f40a:	4313      	orrs	r3, r2
 800f40c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2201      	movs	r2, #1
 800f41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	40012c00 	.word	0x40012c00
 800f438:	40014000 	.word	0x40014000

0800f43c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f46c:	bf00      	nop
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	e040      	b.n	800f50c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7f3 fc0c 	bl	8002cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2224      	movs	r2, #36	; 0x24
 800f4a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f022 0201 	bic.w	r2, r2, #1
 800f4b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fbe8 	bl	800fc8c <UART_SetConfig>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d101      	bne.n	800f4c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	e022      	b.n	800f50c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d002      	beq.n	800f4d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 fe36 	bl	8010140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f4e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	689a      	ldr	r2, [r3, #8]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f4f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f042 0201 	orr.w	r2, r2, #1
 800f502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 febd 	bl	8010284 <UART_CheckIdleState>
 800f50a:	4603      	mov	r3, r0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f514:	b480      	push	{r7}
 800f516:	b08b      	sub	sp, #44	; 0x2c
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	4613      	mov	r3, r2
 800f520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f526:	2b20      	cmp	r3, #32
 800f528:	d156      	bne.n	800f5d8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <HAL_UART_Transmit_IT+0x22>
 800f530:	88fb      	ldrh	r3, [r7, #6]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d101      	bne.n	800f53a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800f536:	2301      	movs	r3, #1
 800f538:	e04f      	b.n	800f5da <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f540:	2b01      	cmp	r3, #1
 800f542:	d101      	bne.n	800f548 <HAL_UART_Transmit_IT+0x34>
 800f544:	2302      	movs	r3, #2
 800f546:	e048      	b.n	800f5da <HAL_UART_Transmit_IT+0xc6>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2201      	movs	r2, #1
 800f54c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	68ba      	ldr	r2, [r7, #8]
 800f554:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	88fa      	ldrh	r2, [r7, #6]
 800f55a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	88fa      	ldrh	r2, [r7, #6]
 800f562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2221      	movs	r2, #33	; 0x21
 800f578:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	689b      	ldr	r3, [r3, #8]
 800f57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f582:	d107      	bne.n	800f594 <HAL_UART_Transmit_IT+0x80>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d103      	bne.n	800f594 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4a16      	ldr	r2, [pc, #88]	; (800f5e8 <HAL_UART_Transmit_IT+0xd4>)
 800f590:	669a      	str	r2, [r3, #104]	; 0x68
 800f592:	e002      	b.n	800f59a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	4a15      	ldr	r2, [pc, #84]	; (800f5ec <HAL_UART_Transmit_IT+0xd8>)
 800f598:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	e853 3f00 	ldrex	r3, [r3]
 800f5ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	623b      	str	r3, [r7, #32]
 800f5c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c4:	69f9      	ldr	r1, [r7, #28]
 800f5c6:	6a3a      	ldr	r2, [r7, #32]
 800f5c8:	e841 2300 	strex	r3, r2, [r1]
 800f5cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1e6      	bne.n	800f5a2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	e000      	b.n	800f5da <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800f5d8:	2302      	movs	r3, #2
  }
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	372c      	adds	r7, #44	; 0x2c
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	080107df 	.word	0x080107df
 800f5ec:	08010727 	.word	0x08010727

0800f5f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08a      	sub	sp, #40	; 0x28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f602:	2b20      	cmp	r3, #32
 800f604:	d142      	bne.n	800f68c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <HAL_UART_Receive_IT+0x22>
 800f60c:	88fb      	ldrh	r3, [r7, #6]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800f612:	2301      	movs	r3, #1
 800f614:	e03b      	b.n	800f68e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d101      	bne.n	800f624 <HAL_UART_Receive_IT+0x34>
 800f620:	2302      	movs	r3, #2
 800f622:	e034      	b.n	800f68e <HAL_UART_Receive_IT+0x9e>
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a18      	ldr	r2, [pc, #96]	; (800f698 <HAL_UART_Receive_IT+0xa8>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d01f      	beq.n	800f67c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f646:	2b00      	cmp	r3, #0
 800f648:	d018      	beq.n	800f67c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	e853 3f00 	ldrex	r3, [r3]
 800f656:	613b      	str	r3, [r7, #16]
   return(result);
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f65e:	627b      	str	r3, [r7, #36]	; 0x24
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	461a      	mov	r2, r3
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	623b      	str	r3, [r7, #32]
 800f66a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f66c:	69f9      	ldr	r1, [r7, #28]
 800f66e:	6a3a      	ldr	r2, [r7, #32]
 800f670:	e841 2300 	strex	r3, r2, [r1]
 800f674:	61bb      	str	r3, [r7, #24]
   return(result);
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1e6      	bne.n	800f64a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f67c:	88fb      	ldrh	r3, [r7, #6]
 800f67e:	461a      	mov	r2, r3
 800f680:	68b9      	ldr	r1, [r7, #8]
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f000 ff0c 	bl	80104a0 <UART_Start_Receive_IT>
 800f688:	4603      	mov	r3, r0
 800f68a:	e000      	b.n	800f68e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800f68c:	2302      	movs	r3, #2
  }
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3728      	adds	r7, #40	; 0x28
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	40008000 	.word	0x40008000

0800f69c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b0ba      	sub	sp, #232	; 0xe8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f6c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f6c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f6d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d115      	bne.n	800f704 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6dc:	f003 0320 	and.w	r3, r3, #32
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00f      	beq.n	800f704 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6e8:	f003 0320 	and.w	r3, r3, #32
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d009      	beq.n	800f704 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 82a6 	beq.w	800fc46 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	4798      	blx	r3
      }
      return;
 800f702:	e2a0      	b.n	800fc46 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800f704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 8117 	beq.w	800f93c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f70e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f712:	f003 0301 	and.w	r3, r3, #1
 800f716:	2b00      	cmp	r3, #0
 800f718:	d106      	bne.n	800f728 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f71a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f71e:	4b85      	ldr	r3, [pc, #532]	; (800f934 <HAL_UART_IRQHandler+0x298>)
 800f720:	4013      	ands	r3, r2
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 810a 	beq.w	800f93c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d011      	beq.n	800f758 <HAL_UART_IRQHandler+0xbc>
 800f734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00b      	beq.n	800f758 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2201      	movs	r2, #1
 800f746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f74e:	f043 0201 	orr.w	r2, r3, #1
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	2b00      	cmp	r3, #0
 800f762:	d011      	beq.n	800f788 <HAL_UART_IRQHandler+0xec>
 800f764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f768:	f003 0301 	and.w	r3, r3, #1
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00b      	beq.n	800f788 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2202      	movs	r2, #2
 800f776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f77e:	f043 0204 	orr.w	r2, r3, #4
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f78c:	f003 0304 	and.w	r3, r3, #4
 800f790:	2b00      	cmp	r3, #0
 800f792:	d011      	beq.n	800f7b8 <HAL_UART_IRQHandler+0x11c>
 800f794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f798:	f003 0301 	and.w	r3, r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00b      	beq.n	800f7b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2204      	movs	r2, #4
 800f7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7ae:	f043 0202 	orr.w	r2, r3, #2
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7bc:	f003 0308 	and.w	r3, r3, #8
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d017      	beq.n	800f7f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7c8:	f003 0320 	and.w	r3, r3, #32
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d105      	bne.n	800f7dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00b      	beq.n	800f7f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2208      	movs	r2, #8
 800f7e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7ea:	f043 0208 	orr.w	r2, r3, #8
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f7f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d012      	beq.n	800f826 <HAL_UART_IRQHandler+0x18a>
 800f800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00c      	beq.n	800f826 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f81c:	f043 0220 	orr.w	r2, r3, #32
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f000 820c 	beq.w	800fc4a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f836:	f003 0320 	and.w	r3, r3, #32
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00d      	beq.n	800f85a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f842:	f003 0320 	and.w	r3, r3, #32
 800f846:	2b00      	cmp	r3, #0
 800f848:	d007      	beq.n	800f85a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d003      	beq.n	800f85a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f860:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f86e:	2b40      	cmp	r3, #64	; 0x40
 800f870:	d005      	beq.n	800f87e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f876:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d04f      	beq.n	800f91e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 fed8 	bl	8010634 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f88e:	2b40      	cmp	r3, #64	; 0x40
 800f890:	d141      	bne.n	800f916 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3308      	adds	r3, #8
 800f898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8a0:	e853 3f00 	ldrex	r3, [r3]
 800f8a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f8a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	3308      	adds	r3, #8
 800f8ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f8be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f8c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f8ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f8ce:	e841 2300 	strex	r3, r2, [r1]
 800f8d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f8d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1d9      	bne.n	800f892 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d013      	beq.n	800f90e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ea:	4a13      	ldr	r2, [pc, #76]	; (800f938 <HAL_UART_IRQHandler+0x29c>)
 800f8ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fc f84f 	bl	800b996 <HAL_DMA_Abort_IT>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d017      	beq.n	800f92e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800f908:	4610      	mov	r0, r2
 800f90a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f90c:	e00f      	b.n	800f92e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f9a6 	bl	800fc60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f914:	e00b      	b.n	800f92e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f9a2 	bl	800fc60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f91c:	e007      	b.n	800f92e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f99e 	bl	800fc60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800f92c:	e18d      	b.n	800fc4a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f92e:	bf00      	nop
    return;
 800f930:	e18b      	b.n	800fc4a <HAL_UART_IRQHandler+0x5ae>
 800f932:	bf00      	nop
 800f934:	04000120 	.word	0x04000120
 800f938:	080106fb 	.word	0x080106fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f940:	2b01      	cmp	r3, #1
 800f942:	f040 8146 	bne.w	800fbd2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f94a:	f003 0310 	and.w	r3, r3, #16
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 813f 	beq.w	800fbd2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f958:	f003 0310 	and.w	r3, r3, #16
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 8138 	beq.w	800fbd2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2210      	movs	r2, #16
 800f968:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f974:	2b40      	cmp	r3, #64	; 0x40
 800f976:	f040 80b4 	bne.w	800fae2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f986:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 815f 	beq.w	800fc4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f99a:	429a      	cmp	r2, r3
 800f99c:	f080 8157 	bcs.w	800fc4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f9a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f003 0320 	and.w	r3, r3, #32
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f040 8085 	bne.w	800fac6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9c8:	e853 3f00 	ldrex	r3, [r3]
 800f9cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f9e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f9ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f9f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f9f6:	e841 2300 	strex	r3, r2, [r1]
 800f9fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f9fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1da      	bne.n	800f9bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3308      	adds	r3, #8
 800fa0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa10:	e853 3f00 	ldrex	r3, [r3]
 800fa14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fa16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa18:	f023 0301 	bic.w	r3, r3, #1
 800fa1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	3308      	adds	r3, #8
 800fa26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fa2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fa2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fa32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa36:	e841 2300 	strex	r3, r2, [r1]
 800fa3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fa3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1e1      	bne.n	800fa06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	3308      	adds	r3, #8
 800fa48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa4c:	e853 3f00 	ldrex	r3, [r3]
 800fa50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fa52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	3308      	adds	r3, #8
 800fa62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fa66:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fa68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fa6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fa6e:	e841 2300 	strex	r3, r2, [r1]
 800fa72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fa74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1e3      	bne.n	800fa42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2220      	movs	r2, #32
 800fa7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa8e:	e853 3f00 	ldrex	r3, [r3]
 800fa92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fa94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa96:	f023 0310 	bic.w	r3, r3, #16
 800fa9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800faa8:	65bb      	str	r3, [r7, #88]	; 0x58
 800faaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800faae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fab0:	e841 2300 	strex	r3, r2, [r1]
 800fab4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e4      	bne.n	800fa86 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fb ff2a 	bl	800b91a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	4619      	mov	r1, r3
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 f8ca 	bl	800fc74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fae0:	e0b5      	b.n	800fc4e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800faee:	b29b      	uxth	r3, r3
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 80a7 	beq.w	800fc52 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800fb04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 80a2 	beq.w	800fc52 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	e853 3f00 	ldrex	r3, [r3]
 800fb1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fb30:	647b      	str	r3, [r7, #68]	; 0x44
 800fb32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb38:	e841 2300 	strex	r3, r2, [r1]
 800fb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1e4      	bne.n	800fb0e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3308      	adds	r3, #8
 800fb4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4e:	e853 3f00 	ldrex	r3, [r3]
 800fb52:	623b      	str	r3, [r7, #32]
   return(result);
 800fb54:	6a3b      	ldr	r3, [r7, #32]
 800fb56:	f023 0301 	bic.w	r3, r3, #1
 800fb5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3308      	adds	r3, #8
 800fb64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fb68:	633a      	str	r2, [r7, #48]	; 0x30
 800fb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb70:	e841 2300 	strex	r3, r2, [r1]
 800fb74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1e3      	bne.n	800fb44 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2220      	movs	r2, #32
 800fb80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f023 0310 	bic.w	r3, r3, #16
 800fba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	461a      	mov	r2, r3
 800fbac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fbb0:	61fb      	str	r3, [r7, #28]
 800fbb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb4:	69b9      	ldr	r1, [r7, #24]
 800fbb6:	69fa      	ldr	r2, [r7, #28]
 800fbb8:	e841 2300 	strex	r3, r2, [r1]
 800fbbc:	617b      	str	r3, [r7, #20]
   return(result);
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1e4      	bne.n	800fb8e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fbc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f852 	bl	800fc74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fbd0:	e03f      	b.n	800fc52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00e      	beq.n	800fbfc <HAL_UART_IRQHandler+0x560>
 800fbde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fbe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d008      	beq.n	800fbfc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fbf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 ffdc 	bl	8010bb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fbfa:	e02d      	b.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fbfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00e      	beq.n	800fc26 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fc08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d008      	beq.n	800fc26 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d01c      	beq.n	800fc56 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	4798      	blx	r3
    }
    return;
 800fc24:	e017      	b.n	800fc56 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d012      	beq.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
 800fc32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00c      	beq.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 fe2d 	bl	801089e <UART_EndTransmit_IT>
    return;
 800fc44:	e008      	b.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
      return;
 800fc46:	bf00      	nop
 800fc48:	e006      	b.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
    return;
 800fc4a:	bf00      	nop
 800fc4c:	e004      	b.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
      return;
 800fc4e:	bf00      	nop
 800fc50:	e002      	b.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
      return;
 800fc52:	bf00      	nop
 800fc54:	e000      	b.n	800fc58 <HAL_UART_IRQHandler+0x5bc>
    return;
 800fc56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800fc58:	37e8      	adds	r7, #232	; 0xe8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop

0800fc60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fc68:	bf00      	nop
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fc80:	bf00      	nop
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fc8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc90:	b08a      	sub	sp, #40	; 0x28
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	689a      	ldr	r2, [r3, #8]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	431a      	orrs	r2, r3
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	695b      	ldr	r3, [r3, #20]
 800fcaa:	431a      	orrs	r2, r3
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	69db      	ldr	r3, [r3, #28]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	4b9e      	ldr	r3, [pc, #632]	; (800ff34 <UART_SetConfig+0x2a8>)
 800fcbc:	4013      	ands	r3, r2
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	6812      	ldr	r2, [r2, #0]
 800fcc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fcc4:	430b      	orrs	r3, r1
 800fcc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	68da      	ldr	r2, [r3, #12]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a93      	ldr	r2, [pc, #588]	; (800ff38 <UART_SetConfig+0x2ac>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d004      	beq.n	800fcf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	689b      	ldr	r3, [r3, #8]
 800fcfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd08:	430a      	orrs	r2, r1
 800fd0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a8a      	ldr	r2, [pc, #552]	; (800ff3c <UART_SetConfig+0x2b0>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d126      	bne.n	800fd64 <UART_SetConfig+0xd8>
 800fd16:	4b8a      	ldr	r3, [pc, #552]	; (800ff40 <UART_SetConfig+0x2b4>)
 800fd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd1c:	f003 0303 	and.w	r3, r3, #3
 800fd20:	2b03      	cmp	r3, #3
 800fd22:	d81b      	bhi.n	800fd5c <UART_SetConfig+0xd0>
 800fd24:	a201      	add	r2, pc, #4	; (adr r2, 800fd2c <UART_SetConfig+0xa0>)
 800fd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd2a:	bf00      	nop
 800fd2c:	0800fd3d 	.word	0x0800fd3d
 800fd30:	0800fd4d 	.word	0x0800fd4d
 800fd34:	0800fd45 	.word	0x0800fd45
 800fd38:	0800fd55 	.word	0x0800fd55
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fd42:	e0ab      	b.n	800fe9c <UART_SetConfig+0x210>
 800fd44:	2302      	movs	r3, #2
 800fd46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fd4a:	e0a7      	b.n	800fe9c <UART_SetConfig+0x210>
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fd52:	e0a3      	b.n	800fe9c <UART_SetConfig+0x210>
 800fd54:	2308      	movs	r3, #8
 800fd56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fd5a:	e09f      	b.n	800fe9c <UART_SetConfig+0x210>
 800fd5c:	2310      	movs	r3, #16
 800fd5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fd62:	e09b      	b.n	800fe9c <UART_SetConfig+0x210>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a76      	ldr	r2, [pc, #472]	; (800ff44 <UART_SetConfig+0x2b8>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d138      	bne.n	800fde0 <UART_SetConfig+0x154>
 800fd6e:	4b74      	ldr	r3, [pc, #464]	; (800ff40 <UART_SetConfig+0x2b4>)
 800fd70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd74:	f003 030c 	and.w	r3, r3, #12
 800fd78:	2b0c      	cmp	r3, #12
 800fd7a:	d82d      	bhi.n	800fdd8 <UART_SetConfig+0x14c>
 800fd7c:	a201      	add	r2, pc, #4	; (adr r2, 800fd84 <UART_SetConfig+0xf8>)
 800fd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd82:	bf00      	nop
 800fd84:	0800fdb9 	.word	0x0800fdb9
 800fd88:	0800fdd9 	.word	0x0800fdd9
 800fd8c:	0800fdd9 	.word	0x0800fdd9
 800fd90:	0800fdd9 	.word	0x0800fdd9
 800fd94:	0800fdc9 	.word	0x0800fdc9
 800fd98:	0800fdd9 	.word	0x0800fdd9
 800fd9c:	0800fdd9 	.word	0x0800fdd9
 800fda0:	0800fdd9 	.word	0x0800fdd9
 800fda4:	0800fdc1 	.word	0x0800fdc1
 800fda8:	0800fdd9 	.word	0x0800fdd9
 800fdac:	0800fdd9 	.word	0x0800fdd9
 800fdb0:	0800fdd9 	.word	0x0800fdd9
 800fdb4:	0800fdd1 	.word	0x0800fdd1
 800fdb8:	2300      	movs	r3, #0
 800fdba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fdbe:	e06d      	b.n	800fe9c <UART_SetConfig+0x210>
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fdc6:	e069      	b.n	800fe9c <UART_SetConfig+0x210>
 800fdc8:	2304      	movs	r3, #4
 800fdca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fdce:	e065      	b.n	800fe9c <UART_SetConfig+0x210>
 800fdd0:	2308      	movs	r3, #8
 800fdd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fdd6:	e061      	b.n	800fe9c <UART_SetConfig+0x210>
 800fdd8:	2310      	movs	r3, #16
 800fdda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fdde:	e05d      	b.n	800fe9c <UART_SetConfig+0x210>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a58      	ldr	r2, [pc, #352]	; (800ff48 <UART_SetConfig+0x2bc>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d125      	bne.n	800fe36 <UART_SetConfig+0x1aa>
 800fdea:	4b55      	ldr	r3, [pc, #340]	; (800ff40 <UART_SetConfig+0x2b4>)
 800fdec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fdf4:	2b30      	cmp	r3, #48	; 0x30
 800fdf6:	d016      	beq.n	800fe26 <UART_SetConfig+0x19a>
 800fdf8:	2b30      	cmp	r3, #48	; 0x30
 800fdfa:	d818      	bhi.n	800fe2e <UART_SetConfig+0x1a2>
 800fdfc:	2b20      	cmp	r3, #32
 800fdfe:	d00a      	beq.n	800fe16 <UART_SetConfig+0x18a>
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	d814      	bhi.n	800fe2e <UART_SetConfig+0x1a2>
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <UART_SetConfig+0x182>
 800fe08:	2b10      	cmp	r3, #16
 800fe0a:	d008      	beq.n	800fe1e <UART_SetConfig+0x192>
 800fe0c:	e00f      	b.n	800fe2e <UART_SetConfig+0x1a2>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe14:	e042      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe16:	2302      	movs	r3, #2
 800fe18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe1c:	e03e      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe1e:	2304      	movs	r3, #4
 800fe20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe24:	e03a      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe26:	2308      	movs	r3, #8
 800fe28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe2c:	e036      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe2e:	2310      	movs	r3, #16
 800fe30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe34:	e032      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a3f      	ldr	r2, [pc, #252]	; (800ff38 <UART_SetConfig+0x2ac>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d12a      	bne.n	800fe96 <UART_SetConfig+0x20a>
 800fe40:	4b3f      	ldr	r3, [pc, #252]	; (800ff40 <UART_SetConfig+0x2b4>)
 800fe42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fe4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fe4e:	d01a      	beq.n	800fe86 <UART_SetConfig+0x1fa>
 800fe50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fe54:	d81b      	bhi.n	800fe8e <UART_SetConfig+0x202>
 800fe56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe5a:	d00c      	beq.n	800fe76 <UART_SetConfig+0x1ea>
 800fe5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe60:	d815      	bhi.n	800fe8e <UART_SetConfig+0x202>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d003      	beq.n	800fe6e <UART_SetConfig+0x1e2>
 800fe66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe6a:	d008      	beq.n	800fe7e <UART_SetConfig+0x1f2>
 800fe6c:	e00f      	b.n	800fe8e <UART_SetConfig+0x202>
 800fe6e:	2300      	movs	r3, #0
 800fe70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe74:	e012      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe76:	2302      	movs	r3, #2
 800fe78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe7c:	e00e      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe7e:	2304      	movs	r3, #4
 800fe80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe84:	e00a      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe86:	2308      	movs	r3, #8
 800fe88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe8c:	e006      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe8e:	2310      	movs	r3, #16
 800fe90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fe94:	e002      	b.n	800fe9c <UART_SetConfig+0x210>
 800fe96:	2310      	movs	r3, #16
 800fe98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a25      	ldr	r2, [pc, #148]	; (800ff38 <UART_SetConfig+0x2ac>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	f040 808a 	bne.w	800ffbc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800feac:	2b08      	cmp	r3, #8
 800feae:	d824      	bhi.n	800fefa <UART_SetConfig+0x26e>
 800feb0:	a201      	add	r2, pc, #4	; (adr r2, 800feb8 <UART_SetConfig+0x22c>)
 800feb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb6:	bf00      	nop
 800feb8:	0800fedd 	.word	0x0800fedd
 800febc:	0800fefb 	.word	0x0800fefb
 800fec0:	0800fee5 	.word	0x0800fee5
 800fec4:	0800fefb 	.word	0x0800fefb
 800fec8:	0800feeb 	.word	0x0800feeb
 800fecc:	0800fefb 	.word	0x0800fefb
 800fed0:	0800fefb 	.word	0x0800fefb
 800fed4:	0800fefb 	.word	0x0800fefb
 800fed8:	0800fef3 	.word	0x0800fef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fedc:	f7fd fb6a 	bl	800d5b4 <HAL_RCC_GetPCLK1Freq>
 800fee0:	61f8      	str	r0, [r7, #28]
        break;
 800fee2:	e010      	b.n	800ff06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fee4:	4b19      	ldr	r3, [pc, #100]	; (800ff4c <UART_SetConfig+0x2c0>)
 800fee6:	61fb      	str	r3, [r7, #28]
        break;
 800fee8:	e00d      	b.n	800ff06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800feea:	f7fd facb 	bl	800d484 <HAL_RCC_GetSysClockFreq>
 800feee:	61f8      	str	r0, [r7, #28]
        break;
 800fef0:	e009      	b.n	800ff06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fef6:	61fb      	str	r3, [r7, #28]
        break;
 800fef8:	e005      	b.n	800ff06 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800fefa:	2300      	movs	r3, #0
 800fefc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ff04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f000 8109 	beq.w	8010120 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	685a      	ldr	r2, [r3, #4]
 800ff12:	4613      	mov	r3, r2
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	4413      	add	r3, r2
 800ff18:	69fa      	ldr	r2, [r7, #28]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d305      	bcc.n	800ff2a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ff24:	69fa      	ldr	r2, [r7, #28]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d912      	bls.n	800ff50 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ff30:	e0f6      	b.n	8010120 <UART_SetConfig+0x494>
 800ff32:	bf00      	nop
 800ff34:	efff69f3 	.word	0xefff69f3
 800ff38:	40008000 	.word	0x40008000
 800ff3c:	40013800 	.word	0x40013800
 800ff40:	40021000 	.word	0x40021000
 800ff44:	40004400 	.word	0x40004400
 800ff48:	40004800 	.word	0x40004800
 800ff4c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2200      	movs	r2, #0
 800ff54:	461c      	mov	r4, r3
 800ff56:	4615      	mov	r5, r2
 800ff58:	f04f 0200 	mov.w	r2, #0
 800ff5c:	f04f 0300 	mov.w	r3, #0
 800ff60:	022b      	lsls	r3, r5, #8
 800ff62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ff66:	0222      	lsls	r2, r4, #8
 800ff68:	68f9      	ldr	r1, [r7, #12]
 800ff6a:	6849      	ldr	r1, [r1, #4]
 800ff6c:	0849      	lsrs	r1, r1, #1
 800ff6e:	2000      	movs	r0, #0
 800ff70:	4688      	mov	r8, r1
 800ff72:	4681      	mov	r9, r0
 800ff74:	eb12 0a08 	adds.w	sl, r2, r8
 800ff78:	eb43 0b09 	adc.w	fp, r3, r9
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	603b      	str	r3, [r7, #0]
 800ff84:	607a      	str	r2, [r7, #4]
 800ff86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff8a:	4650      	mov	r0, sl
 800ff8c:	4659      	mov	r1, fp
 800ff8e:	f7f0 f977 	bl	8000280 <__aeabi_uldivmod>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	4613      	mov	r3, r2
 800ff98:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffa0:	d308      	bcc.n	800ffb4 <UART_SetConfig+0x328>
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffa8:	d204      	bcs.n	800ffb4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	69ba      	ldr	r2, [r7, #24]
 800ffb0:	60da      	str	r2, [r3, #12]
 800ffb2:	e0b5      	b.n	8010120 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ffba:	e0b1      	b.n	8010120 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	69db      	ldr	r3, [r3, #28]
 800ffc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffc4:	d15d      	bne.n	8010082 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800ffc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ffca:	2b08      	cmp	r3, #8
 800ffcc:	d827      	bhi.n	801001e <UART_SetConfig+0x392>
 800ffce:	a201      	add	r2, pc, #4	; (adr r2, 800ffd4 <UART_SetConfig+0x348>)
 800ffd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd4:	0800fff9 	.word	0x0800fff9
 800ffd8:	08010001 	.word	0x08010001
 800ffdc:	08010009 	.word	0x08010009
 800ffe0:	0801001f 	.word	0x0801001f
 800ffe4:	0801000f 	.word	0x0801000f
 800ffe8:	0801001f 	.word	0x0801001f
 800ffec:	0801001f 	.word	0x0801001f
 800fff0:	0801001f 	.word	0x0801001f
 800fff4:	08010017 	.word	0x08010017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fff8:	f7fd fadc 	bl	800d5b4 <HAL_RCC_GetPCLK1Freq>
 800fffc:	61f8      	str	r0, [r7, #28]
        break;
 800fffe:	e014      	b.n	801002a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010000:	f7fd faee 	bl	800d5e0 <HAL_RCC_GetPCLK2Freq>
 8010004:	61f8      	str	r0, [r7, #28]
        break;
 8010006:	e010      	b.n	801002a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010008:	4b4c      	ldr	r3, [pc, #304]	; (801013c <UART_SetConfig+0x4b0>)
 801000a:	61fb      	str	r3, [r7, #28]
        break;
 801000c:	e00d      	b.n	801002a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801000e:	f7fd fa39 	bl	800d484 <HAL_RCC_GetSysClockFreq>
 8010012:	61f8      	str	r0, [r7, #28]
        break;
 8010014:	e009      	b.n	801002a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801001a:	61fb      	str	r3, [r7, #28]
        break;
 801001c:	e005      	b.n	801002a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801001e:	2300      	movs	r3, #0
 8010020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010022:	2301      	movs	r3, #1
 8010024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8010028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d077      	beq.n	8010120 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	005a      	lsls	r2, r3, #1
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	085b      	lsrs	r3, r3, #1
 801003a:	441a      	add	r2, r3
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	fbb2 f3f3 	udiv	r3, r2, r3
 8010044:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	2b0f      	cmp	r3, #15
 801004a:	d916      	bls.n	801007a <UART_SetConfig+0x3ee>
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010052:	d212      	bcs.n	801007a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	b29b      	uxth	r3, r3
 8010058:	f023 030f 	bic.w	r3, r3, #15
 801005c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	085b      	lsrs	r3, r3, #1
 8010062:	b29b      	uxth	r3, r3
 8010064:	f003 0307 	and.w	r3, r3, #7
 8010068:	b29a      	uxth	r2, r3
 801006a:	8afb      	ldrh	r3, [r7, #22]
 801006c:	4313      	orrs	r3, r2
 801006e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	8afa      	ldrh	r2, [r7, #22]
 8010076:	60da      	str	r2, [r3, #12]
 8010078:	e052      	b.n	8010120 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801007a:	2301      	movs	r3, #1
 801007c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8010080:	e04e      	b.n	8010120 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010086:	2b08      	cmp	r3, #8
 8010088:	d827      	bhi.n	80100da <UART_SetConfig+0x44e>
 801008a:	a201      	add	r2, pc, #4	; (adr r2, 8010090 <UART_SetConfig+0x404>)
 801008c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010090:	080100b5 	.word	0x080100b5
 8010094:	080100bd 	.word	0x080100bd
 8010098:	080100c5 	.word	0x080100c5
 801009c:	080100db 	.word	0x080100db
 80100a0:	080100cb 	.word	0x080100cb
 80100a4:	080100db 	.word	0x080100db
 80100a8:	080100db 	.word	0x080100db
 80100ac:	080100db 	.word	0x080100db
 80100b0:	080100d3 	.word	0x080100d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100b4:	f7fd fa7e 	bl	800d5b4 <HAL_RCC_GetPCLK1Freq>
 80100b8:	61f8      	str	r0, [r7, #28]
        break;
 80100ba:	e014      	b.n	80100e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100bc:	f7fd fa90 	bl	800d5e0 <HAL_RCC_GetPCLK2Freq>
 80100c0:	61f8      	str	r0, [r7, #28]
        break;
 80100c2:	e010      	b.n	80100e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80100c4:	4b1d      	ldr	r3, [pc, #116]	; (801013c <UART_SetConfig+0x4b0>)
 80100c6:	61fb      	str	r3, [r7, #28]
        break;
 80100c8:	e00d      	b.n	80100e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80100ca:	f7fd f9db 	bl	800d484 <HAL_RCC_GetSysClockFreq>
 80100ce:	61f8      	str	r0, [r7, #28]
        break;
 80100d0:	e009      	b.n	80100e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100d6:	61fb      	str	r3, [r7, #28]
        break;
 80100d8:	e005      	b.n	80100e6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80100da:	2300      	movs	r3, #0
 80100dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80100de:	2301      	movs	r3, #1
 80100e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80100e4:	bf00      	nop
    }

    if (pclk != 0U)
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d019      	beq.n	8010120 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	085a      	lsrs	r2, r3, #1
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	441a      	add	r2, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80100fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	2b0f      	cmp	r3, #15
 8010104:	d909      	bls.n	801011a <UART_SetConfig+0x48e>
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801010c:	d205      	bcs.n	801011a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	b29a      	uxth	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	60da      	str	r2, [r3, #12]
 8010118:	e002      	b.n	8010120 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2200      	movs	r2, #0
 8010124:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801012c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8010130:	4618      	mov	r0, r3
 8010132:	3728      	adds	r7, #40	; 0x28
 8010134:	46bd      	mov	sp, r7
 8010136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801013a:	bf00      	nop
 801013c:	00f42400 	.word	0x00f42400

08010140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014c:	f003 0301 	and.w	r3, r3, #1
 8010150:	2b00      	cmp	r3, #0
 8010152:	d00a      	beq.n	801016a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	430a      	orrs	r2, r1
 8010168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016e:	f003 0302 	and.w	r3, r3, #2
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00a      	beq.n	801018c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	430a      	orrs	r2, r1
 801018a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010190:	f003 0304 	and.w	r3, r3, #4
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00a      	beq.n	80101ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	430a      	orrs	r2, r1
 80101ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b2:	f003 0308 	and.w	r3, r3, #8
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00a      	beq.n	80101d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	430a      	orrs	r2, r1
 80101ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d4:	f003 0310 	and.w	r3, r3, #16
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00a      	beq.n	80101f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	430a      	orrs	r2, r1
 80101f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f6:	f003 0320 	and.w	r3, r3, #32
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00a      	beq.n	8010214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	430a      	orrs	r2, r1
 8010212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801021c:	2b00      	cmp	r3, #0
 801021e:	d01a      	beq.n	8010256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	430a      	orrs	r2, r1
 8010234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801023a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801023e:	d10a      	bne.n	8010256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	430a      	orrs	r2, r1
 8010254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00a      	beq.n	8010278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	430a      	orrs	r2, r1
 8010276:	605a      	str	r2, [r3, #4]
  }
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b086      	sub	sp, #24
 8010288:	af02      	add	r7, sp, #8
 801028a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010294:	f7fb fa00 	bl	800b698 <HAL_GetTick>
 8010298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f003 0308 	and.w	r3, r3, #8
 80102a4:	2b08      	cmp	r3, #8
 80102a6:	d10e      	bne.n	80102c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 f82d 	bl	8010316 <UART_WaitOnFlagUntilTimeout>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102c2:	2303      	movs	r3, #3
 80102c4:	e023      	b.n	801030e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f003 0304 	and.w	r3, r3, #4
 80102d0:	2b04      	cmp	r3, #4
 80102d2:	d10e      	bne.n	80102f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2200      	movs	r2, #0
 80102de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f817 	bl	8010316 <UART_WaitOnFlagUntilTimeout>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d001      	beq.n	80102f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102ee:	2303      	movs	r3, #3
 80102f0:	e00d      	b.n	801030e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2220      	movs	r2, #32
 80102f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2220      	movs	r2, #32
 80102fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2200      	movs	r2, #0
 8010308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b09c      	sub	sp, #112	; 0x70
 801031a:	af00      	add	r7, sp, #0
 801031c:	60f8      	str	r0, [r7, #12]
 801031e:	60b9      	str	r1, [r7, #8]
 8010320:	603b      	str	r3, [r7, #0]
 8010322:	4613      	mov	r3, r2
 8010324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010326:	e0a5      	b.n	8010474 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801032a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032e:	f000 80a1 	beq.w	8010474 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010332:	f7fb f9b1 	bl	800b698 <HAL_GetTick>
 8010336:	4602      	mov	r2, r0
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801033e:	429a      	cmp	r2, r3
 8010340:	d302      	bcc.n	8010348 <UART_WaitOnFlagUntilTimeout+0x32>
 8010342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010344:	2b00      	cmp	r3, #0
 8010346:	d13e      	bne.n	80103c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010350:	e853 3f00 	ldrex	r3, [r3]
 8010354:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801035c:	667b      	str	r3, [r7, #100]	; 0x64
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010368:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801036c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801036e:	e841 2300 	strex	r3, r2, [r1]
 8010372:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010376:	2b00      	cmp	r3, #0
 8010378:	d1e6      	bne.n	8010348 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3308      	adds	r3, #8
 8010380:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801038a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038c:	f023 0301 	bic.w	r3, r3, #1
 8010390:	663b      	str	r3, [r7, #96]	; 0x60
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3308      	adds	r3, #8
 8010398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801039a:	64ba      	str	r2, [r7, #72]	; 0x48
 801039c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80103a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e5      	bne.n	801037a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2220      	movs	r2, #32
 80103b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2220      	movs	r2, #32
 80103b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80103c2:	2303      	movs	r3, #3
 80103c4:	e067      	b.n	8010496 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f003 0304 	and.w	r3, r3, #4
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d04f      	beq.n	8010474 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	69db      	ldr	r3, [r3, #28]
 80103da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80103e2:	d147      	bne.n	8010474 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f6:	e853 3f00 	ldrex	r3, [r3]
 80103fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	461a      	mov	r2, r3
 801040a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801040c:	637b      	str	r3, [r7, #52]	; 0x34
 801040e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010414:	e841 2300 	strex	r3, r2, [r1]
 8010418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e6      	bne.n	80103ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	3308      	adds	r3, #8
 8010426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	e853 3f00 	ldrex	r3, [r3]
 801042e:	613b      	str	r3, [r7, #16]
   return(result);
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	f023 0301 	bic.w	r3, r3, #1
 8010436:	66bb      	str	r3, [r7, #104]	; 0x68
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	3308      	adds	r3, #8
 801043e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010440:	623a      	str	r2, [r7, #32]
 8010442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010444:	69f9      	ldr	r1, [r7, #28]
 8010446:	6a3a      	ldr	r2, [r7, #32]
 8010448:	e841 2300 	strex	r3, r2, [r1]
 801044c:	61bb      	str	r3, [r7, #24]
   return(result);
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1e5      	bne.n	8010420 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2220      	movs	r2, #32
 8010458:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2220      	movs	r2, #32
 801045e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2220      	movs	r2, #32
 8010464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2200      	movs	r2, #0
 801046c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010470:	2303      	movs	r3, #3
 8010472:	e010      	b.n	8010496 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	69da      	ldr	r2, [r3, #28]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	4013      	ands	r3, r2
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	429a      	cmp	r2, r3
 8010482:	bf0c      	ite	eq
 8010484:	2301      	moveq	r3, #1
 8010486:	2300      	movne	r3, #0
 8010488:	b2db      	uxtb	r3, r3
 801048a:	461a      	mov	r2, r3
 801048c:	79fb      	ldrb	r3, [r7, #7]
 801048e:	429a      	cmp	r2, r3
 8010490:	f43f af4a 	beq.w	8010328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3770      	adds	r7, #112	; 0x70
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
	...

080104a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b097      	sub	sp, #92	; 0x5c
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	4613      	mov	r3, r2
 80104ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	68ba      	ldr	r2, [r7, #8]
 80104b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	88fa      	ldrh	r2, [r7, #6]
 80104b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	88fa      	ldrh	r2, [r7, #6]
 80104c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2200      	movs	r2, #0
 80104c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104d2:	d10e      	bne.n	80104f2 <UART_Start_Receive_IT+0x52>
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d105      	bne.n	80104e8 <UART_Start_Receive_IT+0x48>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80104e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80104e6:	e02d      	b.n	8010544 <UART_Start_Receive_IT+0xa4>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	22ff      	movs	r2, #255	; 0xff
 80104ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80104f0:	e028      	b.n	8010544 <UART_Start_Receive_IT+0xa4>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d10d      	bne.n	8010516 <UART_Start_Receive_IT+0x76>
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	691b      	ldr	r3, [r3, #16]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d104      	bne.n	801050c <UART_Start_Receive_IT+0x6c>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	22ff      	movs	r2, #255	; 0xff
 8010506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801050a:	e01b      	b.n	8010544 <UART_Start_Receive_IT+0xa4>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	227f      	movs	r2, #127	; 0x7f
 8010510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010514:	e016      	b.n	8010544 <UART_Start_Receive_IT+0xa4>
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801051e:	d10d      	bne.n	801053c <UART_Start_Receive_IT+0x9c>
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d104      	bne.n	8010532 <UART_Start_Receive_IT+0x92>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	227f      	movs	r2, #127	; 0x7f
 801052c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010530:	e008      	b.n	8010544 <UART_Start_Receive_IT+0xa4>
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	223f      	movs	r2, #63	; 0x3f
 8010536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801053a:	e003      	b.n	8010544 <UART_Start_Receive_IT+0xa4>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2222      	movs	r2, #34	; 0x22
 8010550:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	3308      	adds	r3, #8
 8010558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801055c:	e853 3f00 	ldrex	r3, [r3]
 8010560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010564:	f043 0301 	orr.w	r3, r3, #1
 8010568:	657b      	str	r3, [r7, #84]	; 0x54
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3308      	adds	r3, #8
 8010570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010572:	64ba      	str	r2, [r7, #72]	; 0x48
 8010574:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801057a:	e841 2300 	strex	r3, r2, [r1]
 801057e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1e5      	bne.n	8010552 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801058e:	d107      	bne.n	80105a0 <UART_Start_Receive_IT+0x100>
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	691b      	ldr	r3, [r3, #16]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d103      	bne.n	80105a0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	4a24      	ldr	r2, [pc, #144]	; (801062c <UART_Start_Receive_IT+0x18c>)
 801059c:	665a      	str	r2, [r3, #100]	; 0x64
 801059e:	e002      	b.n	80105a6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4a23      	ldr	r2, [pc, #140]	; (8010630 <UART_Start_Receive_IT+0x190>)
 80105a4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	691b      	ldr	r3, [r3, #16]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d019      	beq.n	80105ea <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	e853 3f00 	ldrex	r3, [r3]
 80105c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80105ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	461a      	mov	r2, r3
 80105d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d4:	637b      	str	r3, [r7, #52]	; 0x34
 80105d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105dc:	e841 2300 	strex	r3, r2, [r1]
 80105e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80105e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e6      	bne.n	80105b6 <UART_Start_Receive_IT+0x116>
 80105e8:	e018      	b.n	801061c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	e853 3f00 	ldrex	r3, [r3]
 80105f6:	613b      	str	r3, [r7, #16]
   return(result);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	f043 0320 	orr.w	r3, r3, #32
 80105fe:	653b      	str	r3, [r7, #80]	; 0x50
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	461a      	mov	r2, r3
 8010606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010608:	623b      	str	r3, [r7, #32]
 801060a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060c:	69f9      	ldr	r1, [r7, #28]
 801060e:	6a3a      	ldr	r2, [r7, #32]
 8010610:	e841 2300 	strex	r3, r2, [r1]
 8010614:	61bb      	str	r3, [r7, #24]
   return(result);
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1e6      	bne.n	80105ea <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801061c:	2300      	movs	r3, #0
}
 801061e:	4618      	mov	r0, r3
 8010620:	375c      	adds	r7, #92	; 0x5c
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	08010a53 	.word	0x08010a53
 8010630:	080108f3 	.word	0x080108f3

08010634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010634:	b480      	push	{r7}
 8010636:	b095      	sub	sp, #84	; 0x54
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	461a      	mov	r2, r3
 8010658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801065a:	643b      	str	r3, [r7, #64]	; 0x40
 801065c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e6      	bne.n	801063c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3308      	adds	r3, #8
 8010674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	e853 3f00 	ldrex	r3, [r3]
 801067c:	61fb      	str	r3, [r7, #28]
   return(result);
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	f023 0301 	bic.w	r3, r3, #1
 8010684:	64bb      	str	r3, [r7, #72]	; 0x48
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3308      	adds	r3, #8
 801068c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801068e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010696:	e841 2300 	strex	r3, r2, [r1]
 801069a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1e5      	bne.n	801066e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d118      	bne.n	80106dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	e853 3f00 	ldrex	r3, [r3]
 80106b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	f023 0310 	bic.w	r3, r3, #16
 80106be:	647b      	str	r3, [r7, #68]	; 0x44
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	461a      	mov	r2, r3
 80106c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106c8:	61bb      	str	r3, [r7, #24]
 80106ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106cc:	6979      	ldr	r1, [r7, #20]
 80106ce:	69ba      	ldr	r2, [r7, #24]
 80106d0:	e841 2300 	strex	r3, r2, [r1]
 80106d4:	613b      	str	r3, [r7, #16]
   return(result);
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d1e6      	bne.n	80106aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2220      	movs	r2, #32
 80106e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80106ee:	bf00      	nop
 80106f0:	3754      	adds	r7, #84	; 0x54
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2200      	movs	r2, #0
 801070c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2200      	movs	r2, #0
 8010714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010718:	68f8      	ldr	r0, [r7, #12]
 801071a:	f7ff faa1 	bl	800fc60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801071e:	bf00      	nop
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010726:	b480      	push	{r7}
 8010728:	b08f      	sub	sp, #60	; 0x3c
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010732:	2b21      	cmp	r3, #33	; 0x21
 8010734:	d14d      	bne.n	80107d2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801073c:	b29b      	uxth	r3, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	d132      	bne.n	80107a8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010748:	6a3b      	ldr	r3, [r7, #32]
 801074a:	e853 3f00 	ldrex	r3, [r3]
 801074e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010756:	637b      	str	r3, [r7, #52]	; 0x34
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	461a      	mov	r2, r3
 801075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010762:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010768:	e841 2300 	strex	r3, r2, [r1]
 801076c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1e6      	bne.n	8010742 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	e853 3f00 	ldrex	r3, [r3]
 8010780:	60bb      	str	r3, [r7, #8]
   return(result);
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010788:	633b      	str	r3, [r7, #48]	; 0x30
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	461a      	mov	r2, r3
 8010790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010792:	61bb      	str	r3, [r7, #24]
 8010794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010796:	6979      	ldr	r1, [r7, #20]
 8010798:	69ba      	ldr	r2, [r7, #24]
 801079a:	e841 2300 	strex	r3, r2, [r1]
 801079e:	613b      	str	r3, [r7, #16]
   return(result);
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1e6      	bne.n	8010774 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80107a6:	e014      	b.n	80107d2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ac:	781a      	ldrb	r2, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	b292      	uxth	r2, r2
 80107b4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ba:	1c5a      	adds	r2, r3, #1
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	3b01      	subs	r3, #1
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80107d2:	bf00      	nop
 80107d4:	373c      	adds	r7, #60	; 0x3c
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80107de:	b480      	push	{r7}
 80107e0:	b091      	sub	sp, #68	; 0x44
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107ea:	2b21      	cmp	r3, #33	; 0x21
 80107ec:	d151      	bne.n	8010892 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d132      	bne.n	8010860 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	e853 3f00 	ldrex	r3, [r3]
 8010806:	623b      	str	r3, [r7, #32]
   return(result);
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801080e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	461a      	mov	r2, r3
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	633b      	str	r3, [r7, #48]	; 0x30
 801081a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801081e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010820:	e841 2300 	strex	r3, r2, [r1]
 8010824:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1e6      	bne.n	80107fa <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	e853 3f00 	ldrex	r3, [r3]
 8010838:	60fb      	str	r3, [r7, #12]
   return(result);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010840:	637b      	str	r3, [r7, #52]	; 0x34
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	461a      	mov	r2, r3
 8010848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801084a:	61fb      	str	r3, [r7, #28]
 801084c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084e:	69b9      	ldr	r1, [r7, #24]
 8010850:	69fa      	ldr	r2, [r7, #28]
 8010852:	e841 2300 	strex	r3, r2, [r1]
 8010856:	617b      	str	r3, [r7, #20]
   return(result);
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1e6      	bne.n	801082c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801085e:	e018      	b.n	8010892 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010864:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010868:	881a      	ldrh	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010872:	b292      	uxth	r2, r2
 8010874:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801087a:	1c9a      	adds	r2, r3, #2
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010886:	b29b      	uxth	r3, r3
 8010888:	3b01      	subs	r3, #1
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8010892:	bf00      	nop
 8010894:	3744      	adds	r7, #68	; 0x44
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr

0801089e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b088      	sub	sp, #32
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	e853 3f00 	ldrex	r3, [r3]
 80108b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108ba:	61fb      	str	r3, [r7, #28]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	461a      	mov	r2, r3
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	61bb      	str	r3, [r7, #24]
 80108c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c8:	6979      	ldr	r1, [r7, #20]
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	e841 2300 	strex	r3, r2, [r1]
 80108d0:	613b      	str	r3, [r7, #16]
   return(result);
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1e6      	bne.n	80108a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2220      	movs	r2, #32
 80108dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2200      	movs	r2, #0
 80108e2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7f8 fe5f 	bl	80095a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108ea:	bf00      	nop
 80108ec:	3720      	adds	r7, #32
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}

080108f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80108f2:	b580      	push	{r7, lr}
 80108f4:	b096      	sub	sp, #88	; 0x58
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010900:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010908:	2b22      	cmp	r3, #34	; 0x22
 801090a:	f040 8094 	bne.w	8010a36 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010914:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010918:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801091c:	b2d9      	uxtb	r1, r3
 801091e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010922:	b2da      	uxtb	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010928:	400a      	ands	r2, r1
 801092a:	b2d2      	uxtb	r2, r2
 801092c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010932:	1c5a      	adds	r2, r3, #1
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801093e:	b29b      	uxth	r3, r3
 8010940:	3b01      	subs	r3, #1
 8010942:	b29a      	uxth	r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010950:	b29b      	uxth	r3, r3
 8010952:	2b00      	cmp	r3, #0
 8010954:	d179      	bne.n	8010a4a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095e:	e853 3f00 	ldrex	r3, [r3]
 8010962:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801096a:	653b      	str	r3, [r7, #80]	; 0x50
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	461a      	mov	r2, r3
 8010972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010974:	647b      	str	r3, [r7, #68]	; 0x44
 8010976:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801097a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801097c:	e841 2300 	strex	r3, r2, [r1]
 8010980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1e6      	bne.n	8010956 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3308      	adds	r3, #8
 801098e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	e853 3f00 	ldrex	r3, [r3]
 8010996:	623b      	str	r3, [r7, #32]
   return(result);
 8010998:	6a3b      	ldr	r3, [r7, #32]
 801099a:	f023 0301 	bic.w	r3, r3, #1
 801099e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	3308      	adds	r3, #8
 80109a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109a8:	633a      	str	r2, [r7, #48]	; 0x30
 80109aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109b0:	e841 2300 	strex	r3, r2, [r1]
 80109b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80109b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1e5      	bne.n	8010988 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2220      	movs	r2, #32
 80109c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109cc:	2b01      	cmp	r3, #1
 80109ce:	d12e      	bne.n	8010a2e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	e853 3f00 	ldrex	r3, [r3]
 80109e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f023 0310 	bic.w	r3, r3, #16
 80109ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	461a      	mov	r2, r3
 80109f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109f4:	61fb      	str	r3, [r7, #28]
 80109f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f8:	69b9      	ldr	r1, [r7, #24]
 80109fa:	69fa      	ldr	r2, [r7, #28]
 80109fc:	e841 2300 	strex	r3, r2, [r1]
 8010a00:	617b      	str	r3, [r7, #20]
   return(result);
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1e6      	bne.n	80109d6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	69db      	ldr	r3, [r3, #28]
 8010a0e:	f003 0310 	and.w	r3, r3, #16
 8010a12:	2b10      	cmp	r3, #16
 8010a14:	d103      	bne.n	8010a1e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2210      	movs	r2, #16
 8010a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010a24:	4619      	mov	r1, r3
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f7ff f924 	bl	800fc74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a2c:	e00d      	b.n	8010a4a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7f1 fbba 	bl	80021a8 <HAL_UART_RxCpltCallback>
}
 8010a34:	e009      	b.n	8010a4a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	8b1b      	ldrh	r3, [r3, #24]
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f042 0208 	orr.w	r2, r2, #8
 8010a46:	b292      	uxth	r2, r2
 8010a48:	831a      	strh	r2, [r3, #24]
}
 8010a4a:	bf00      	nop
 8010a4c:	3758      	adds	r7, #88	; 0x58
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b096      	sub	sp, #88	; 0x58
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a68:	2b22      	cmp	r3, #34	; 0x22
 8010a6a:	f040 8094 	bne.w	8010b96 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a7c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010a7e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010a82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010a86:	4013      	ands	r3, r2
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a92:	1c9a      	adds	r2, r3, #2
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d179      	bne.n	8010baa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010abe:	e853 3f00 	ldrex	r3, [r3]
 8010ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8010ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010adc:	e841 2300 	strex	r3, r2, [r1]
 8010ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1e6      	bne.n	8010ab6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3308      	adds	r3, #8
 8010aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af0:	6a3b      	ldr	r3, [r7, #32]
 8010af2:	e853 3f00 	ldrex	r3, [r3]
 8010af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	f023 0301 	bic.w	r3, r3, #1
 8010afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3308      	adds	r3, #8
 8010b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b10:	e841 2300 	strex	r3, r2, [r1]
 8010b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1e5      	bne.n	8010ae8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2220      	movs	r2, #32
 8010b20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d12e      	bne.n	8010b8e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	e853 3f00 	ldrex	r3, [r3]
 8010b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	f023 0310 	bic.w	r3, r3, #16
 8010b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	461a      	mov	r2, r3
 8010b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b54:	61bb      	str	r3, [r7, #24]
 8010b56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b58:	6979      	ldr	r1, [r7, #20]
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	e841 2300 	strex	r3, r2, [r1]
 8010b60:	613b      	str	r3, [r7, #16]
   return(result);
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e6      	bne.n	8010b36 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	69db      	ldr	r3, [r3, #28]
 8010b6e:	f003 0310 	and.w	r3, r3, #16
 8010b72:	2b10      	cmp	r3, #16
 8010b74:	d103      	bne.n	8010b7e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2210      	movs	r2, #16
 8010b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010b84:	4619      	mov	r1, r3
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f7ff f874 	bl	800fc74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b8c:	e00d      	b.n	8010baa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7f1 fb0a 	bl	80021a8 <HAL_UART_RxCpltCallback>
}
 8010b94:	e009      	b.n	8010baa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	8b1b      	ldrh	r3, [r3, #24]
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f042 0208 	orr.w	r2, r2, #8
 8010ba6:	b292      	uxth	r2, r2
 8010ba8:	831a      	strh	r2, [r3, #24]
}
 8010baa:	bf00      	nop
 8010bac:	3758      	adds	r7, #88	; 0x58
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010bb2:	b480      	push	{r7}
 8010bb4:	b083      	sub	sp, #12
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010bba:	bf00      	nop
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr

08010bc6 <_ZdlPvj>:
 8010bc6:	f000 b800 	b.w	8010bca <_ZdlPv>

08010bca <_ZdlPv>:
 8010bca:	f000 b82b 	b.w	8010c24 <free>
	...

08010bd0 <__errno>:
 8010bd0:	4b01      	ldr	r3, [pc, #4]	; (8010bd8 <__errno+0x8>)
 8010bd2:	6818      	ldr	r0, [r3, #0]
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	20000024 	.word	0x20000024

08010bdc <__libc_init_array>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	4d0d      	ldr	r5, [pc, #52]	; (8010c14 <__libc_init_array+0x38>)
 8010be0:	4c0d      	ldr	r4, [pc, #52]	; (8010c18 <__libc_init_array+0x3c>)
 8010be2:	1b64      	subs	r4, r4, r5
 8010be4:	10a4      	asrs	r4, r4, #2
 8010be6:	2600      	movs	r6, #0
 8010be8:	42a6      	cmp	r6, r4
 8010bea:	d109      	bne.n	8010c00 <__libc_init_array+0x24>
 8010bec:	4d0b      	ldr	r5, [pc, #44]	; (8010c1c <__libc_init_array+0x40>)
 8010bee:	4c0c      	ldr	r4, [pc, #48]	; (8010c20 <__libc_init_array+0x44>)
 8010bf0:	f000 fc96 	bl	8011520 <_init>
 8010bf4:	1b64      	subs	r4, r4, r5
 8010bf6:	10a4      	asrs	r4, r4, #2
 8010bf8:	2600      	movs	r6, #0
 8010bfa:	42a6      	cmp	r6, r4
 8010bfc:	d105      	bne.n	8010c0a <__libc_init_array+0x2e>
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}
 8010c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c04:	4798      	blx	r3
 8010c06:	3601      	adds	r6, #1
 8010c08:	e7ee      	b.n	8010be8 <__libc_init_array+0xc>
 8010c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c0e:	4798      	blx	r3
 8010c10:	3601      	adds	r6, #1
 8010c12:	e7f2      	b.n	8010bfa <__libc_init_array+0x1e>
 8010c14:	08011afc 	.word	0x08011afc
 8010c18:	08011afc 	.word	0x08011afc
 8010c1c:	08011afc 	.word	0x08011afc
 8010c20:	08011b04 	.word	0x08011b04

08010c24 <free>:
 8010c24:	4b02      	ldr	r3, [pc, #8]	; (8010c30 <free+0xc>)
 8010c26:	4601      	mov	r1, r0
 8010c28:	6818      	ldr	r0, [r3, #0]
 8010c2a:	f000 b819 	b.w	8010c60 <_free_r>
 8010c2e:	bf00      	nop
 8010c30:	20000024 	.word	0x20000024

08010c34 <memcpy>:
 8010c34:	440a      	add	r2, r1
 8010c36:	4291      	cmp	r1, r2
 8010c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c3c:	d100      	bne.n	8010c40 <memcpy+0xc>
 8010c3e:	4770      	bx	lr
 8010c40:	b510      	push	{r4, lr}
 8010c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c4a:	4291      	cmp	r1, r2
 8010c4c:	d1f9      	bne.n	8010c42 <memcpy+0xe>
 8010c4e:	bd10      	pop	{r4, pc}

08010c50 <memset>:
 8010c50:	4402      	add	r2, r0
 8010c52:	4603      	mov	r3, r0
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d100      	bne.n	8010c5a <memset+0xa>
 8010c58:	4770      	bx	lr
 8010c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8010c5e:	e7f9      	b.n	8010c54 <memset+0x4>

08010c60 <_free_r>:
 8010c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c62:	2900      	cmp	r1, #0
 8010c64:	d044      	beq.n	8010cf0 <_free_r+0x90>
 8010c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c6a:	9001      	str	r0, [sp, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8010c72:	bfb8      	it	lt
 8010c74:	18e4      	addlt	r4, r4, r3
 8010c76:	f000 f903 	bl	8010e80 <__malloc_lock>
 8010c7a:	4a1e      	ldr	r2, [pc, #120]	; (8010cf4 <_free_r+0x94>)
 8010c7c:	9801      	ldr	r0, [sp, #4]
 8010c7e:	6813      	ldr	r3, [r2, #0]
 8010c80:	b933      	cbnz	r3, 8010c90 <_free_r+0x30>
 8010c82:	6063      	str	r3, [r4, #4]
 8010c84:	6014      	str	r4, [r2, #0]
 8010c86:	b003      	add	sp, #12
 8010c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c8c:	f000 b8fe 	b.w	8010e8c <__malloc_unlock>
 8010c90:	42a3      	cmp	r3, r4
 8010c92:	d908      	bls.n	8010ca6 <_free_r+0x46>
 8010c94:	6825      	ldr	r5, [r4, #0]
 8010c96:	1961      	adds	r1, r4, r5
 8010c98:	428b      	cmp	r3, r1
 8010c9a:	bf01      	itttt	eq
 8010c9c:	6819      	ldreq	r1, [r3, #0]
 8010c9e:	685b      	ldreq	r3, [r3, #4]
 8010ca0:	1949      	addeq	r1, r1, r5
 8010ca2:	6021      	streq	r1, [r4, #0]
 8010ca4:	e7ed      	b.n	8010c82 <_free_r+0x22>
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	b10b      	cbz	r3, 8010cb0 <_free_r+0x50>
 8010cac:	42a3      	cmp	r3, r4
 8010cae:	d9fa      	bls.n	8010ca6 <_free_r+0x46>
 8010cb0:	6811      	ldr	r1, [r2, #0]
 8010cb2:	1855      	adds	r5, r2, r1
 8010cb4:	42a5      	cmp	r5, r4
 8010cb6:	d10b      	bne.n	8010cd0 <_free_r+0x70>
 8010cb8:	6824      	ldr	r4, [r4, #0]
 8010cba:	4421      	add	r1, r4
 8010cbc:	1854      	adds	r4, r2, r1
 8010cbe:	42a3      	cmp	r3, r4
 8010cc0:	6011      	str	r1, [r2, #0]
 8010cc2:	d1e0      	bne.n	8010c86 <_free_r+0x26>
 8010cc4:	681c      	ldr	r4, [r3, #0]
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	6053      	str	r3, [r2, #4]
 8010cca:	4421      	add	r1, r4
 8010ccc:	6011      	str	r1, [r2, #0]
 8010cce:	e7da      	b.n	8010c86 <_free_r+0x26>
 8010cd0:	d902      	bls.n	8010cd8 <_free_r+0x78>
 8010cd2:	230c      	movs	r3, #12
 8010cd4:	6003      	str	r3, [r0, #0]
 8010cd6:	e7d6      	b.n	8010c86 <_free_r+0x26>
 8010cd8:	6825      	ldr	r5, [r4, #0]
 8010cda:	1961      	adds	r1, r4, r5
 8010cdc:	428b      	cmp	r3, r1
 8010cde:	bf04      	itt	eq
 8010ce0:	6819      	ldreq	r1, [r3, #0]
 8010ce2:	685b      	ldreq	r3, [r3, #4]
 8010ce4:	6063      	str	r3, [r4, #4]
 8010ce6:	bf04      	itt	eq
 8010ce8:	1949      	addeq	r1, r1, r5
 8010cea:	6021      	streq	r1, [r4, #0]
 8010cec:	6054      	str	r4, [r2, #4]
 8010cee:	e7ca      	b.n	8010c86 <_free_r+0x26>
 8010cf0:	b003      	add	sp, #12
 8010cf2:	bd30      	pop	{r4, r5, pc}
 8010cf4:	20000f64 	.word	0x20000f64

08010cf8 <sbrk_aligned>:
 8010cf8:	b570      	push	{r4, r5, r6, lr}
 8010cfa:	4e0e      	ldr	r6, [pc, #56]	; (8010d34 <sbrk_aligned+0x3c>)
 8010cfc:	460c      	mov	r4, r1
 8010cfe:	6831      	ldr	r1, [r6, #0]
 8010d00:	4605      	mov	r5, r0
 8010d02:	b911      	cbnz	r1, 8010d0a <sbrk_aligned+0x12>
 8010d04:	f000 f88c 	bl	8010e20 <_sbrk_r>
 8010d08:	6030      	str	r0, [r6, #0]
 8010d0a:	4621      	mov	r1, r4
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	f000 f887 	bl	8010e20 <_sbrk_r>
 8010d12:	1c43      	adds	r3, r0, #1
 8010d14:	d00a      	beq.n	8010d2c <sbrk_aligned+0x34>
 8010d16:	1cc4      	adds	r4, r0, #3
 8010d18:	f024 0403 	bic.w	r4, r4, #3
 8010d1c:	42a0      	cmp	r0, r4
 8010d1e:	d007      	beq.n	8010d30 <sbrk_aligned+0x38>
 8010d20:	1a21      	subs	r1, r4, r0
 8010d22:	4628      	mov	r0, r5
 8010d24:	f000 f87c 	bl	8010e20 <_sbrk_r>
 8010d28:	3001      	adds	r0, #1
 8010d2a:	d101      	bne.n	8010d30 <sbrk_aligned+0x38>
 8010d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8010d30:	4620      	mov	r0, r4
 8010d32:	bd70      	pop	{r4, r5, r6, pc}
 8010d34:	20000f68 	.word	0x20000f68

08010d38 <_malloc_r>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	1ccd      	adds	r5, r1, #3
 8010d3e:	f025 0503 	bic.w	r5, r5, #3
 8010d42:	3508      	adds	r5, #8
 8010d44:	2d0c      	cmp	r5, #12
 8010d46:	bf38      	it	cc
 8010d48:	250c      	movcc	r5, #12
 8010d4a:	2d00      	cmp	r5, #0
 8010d4c:	4607      	mov	r7, r0
 8010d4e:	db01      	blt.n	8010d54 <_malloc_r+0x1c>
 8010d50:	42a9      	cmp	r1, r5
 8010d52:	d905      	bls.n	8010d60 <_malloc_r+0x28>
 8010d54:	230c      	movs	r3, #12
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	2600      	movs	r6, #0
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d60:	4e2e      	ldr	r6, [pc, #184]	; (8010e1c <_malloc_r+0xe4>)
 8010d62:	f000 f88d 	bl	8010e80 <__malloc_lock>
 8010d66:	6833      	ldr	r3, [r6, #0]
 8010d68:	461c      	mov	r4, r3
 8010d6a:	bb34      	cbnz	r4, 8010dba <_malloc_r+0x82>
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	4638      	mov	r0, r7
 8010d70:	f7ff ffc2 	bl	8010cf8 <sbrk_aligned>
 8010d74:	1c43      	adds	r3, r0, #1
 8010d76:	4604      	mov	r4, r0
 8010d78:	d14d      	bne.n	8010e16 <_malloc_r+0xde>
 8010d7a:	6834      	ldr	r4, [r6, #0]
 8010d7c:	4626      	mov	r6, r4
 8010d7e:	2e00      	cmp	r6, #0
 8010d80:	d140      	bne.n	8010e04 <_malloc_r+0xcc>
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	4631      	mov	r1, r6
 8010d86:	4638      	mov	r0, r7
 8010d88:	eb04 0803 	add.w	r8, r4, r3
 8010d8c:	f000 f848 	bl	8010e20 <_sbrk_r>
 8010d90:	4580      	cmp	r8, r0
 8010d92:	d13a      	bne.n	8010e0a <_malloc_r+0xd2>
 8010d94:	6821      	ldr	r1, [r4, #0]
 8010d96:	3503      	adds	r5, #3
 8010d98:	1a6d      	subs	r5, r5, r1
 8010d9a:	f025 0503 	bic.w	r5, r5, #3
 8010d9e:	3508      	adds	r5, #8
 8010da0:	2d0c      	cmp	r5, #12
 8010da2:	bf38      	it	cc
 8010da4:	250c      	movcc	r5, #12
 8010da6:	4629      	mov	r1, r5
 8010da8:	4638      	mov	r0, r7
 8010daa:	f7ff ffa5 	bl	8010cf8 <sbrk_aligned>
 8010dae:	3001      	adds	r0, #1
 8010db0:	d02b      	beq.n	8010e0a <_malloc_r+0xd2>
 8010db2:	6823      	ldr	r3, [r4, #0]
 8010db4:	442b      	add	r3, r5
 8010db6:	6023      	str	r3, [r4, #0]
 8010db8:	e00e      	b.n	8010dd8 <_malloc_r+0xa0>
 8010dba:	6822      	ldr	r2, [r4, #0]
 8010dbc:	1b52      	subs	r2, r2, r5
 8010dbe:	d41e      	bmi.n	8010dfe <_malloc_r+0xc6>
 8010dc0:	2a0b      	cmp	r2, #11
 8010dc2:	d916      	bls.n	8010df2 <_malloc_r+0xba>
 8010dc4:	1961      	adds	r1, r4, r5
 8010dc6:	42a3      	cmp	r3, r4
 8010dc8:	6025      	str	r5, [r4, #0]
 8010dca:	bf18      	it	ne
 8010dcc:	6059      	strne	r1, [r3, #4]
 8010dce:	6863      	ldr	r3, [r4, #4]
 8010dd0:	bf08      	it	eq
 8010dd2:	6031      	streq	r1, [r6, #0]
 8010dd4:	5162      	str	r2, [r4, r5]
 8010dd6:	604b      	str	r3, [r1, #4]
 8010dd8:	4638      	mov	r0, r7
 8010dda:	f104 060b 	add.w	r6, r4, #11
 8010dde:	f000 f855 	bl	8010e8c <__malloc_unlock>
 8010de2:	f026 0607 	bic.w	r6, r6, #7
 8010de6:	1d23      	adds	r3, r4, #4
 8010de8:	1af2      	subs	r2, r6, r3
 8010dea:	d0b6      	beq.n	8010d5a <_malloc_r+0x22>
 8010dec:	1b9b      	subs	r3, r3, r6
 8010dee:	50a3      	str	r3, [r4, r2]
 8010df0:	e7b3      	b.n	8010d5a <_malloc_r+0x22>
 8010df2:	6862      	ldr	r2, [r4, #4]
 8010df4:	42a3      	cmp	r3, r4
 8010df6:	bf0c      	ite	eq
 8010df8:	6032      	streq	r2, [r6, #0]
 8010dfa:	605a      	strne	r2, [r3, #4]
 8010dfc:	e7ec      	b.n	8010dd8 <_malloc_r+0xa0>
 8010dfe:	4623      	mov	r3, r4
 8010e00:	6864      	ldr	r4, [r4, #4]
 8010e02:	e7b2      	b.n	8010d6a <_malloc_r+0x32>
 8010e04:	4634      	mov	r4, r6
 8010e06:	6876      	ldr	r6, [r6, #4]
 8010e08:	e7b9      	b.n	8010d7e <_malloc_r+0x46>
 8010e0a:	230c      	movs	r3, #12
 8010e0c:	603b      	str	r3, [r7, #0]
 8010e0e:	4638      	mov	r0, r7
 8010e10:	f000 f83c 	bl	8010e8c <__malloc_unlock>
 8010e14:	e7a1      	b.n	8010d5a <_malloc_r+0x22>
 8010e16:	6025      	str	r5, [r4, #0]
 8010e18:	e7de      	b.n	8010dd8 <_malloc_r+0xa0>
 8010e1a:	bf00      	nop
 8010e1c:	20000f64 	.word	0x20000f64

08010e20 <_sbrk_r>:
 8010e20:	b538      	push	{r3, r4, r5, lr}
 8010e22:	4d06      	ldr	r5, [pc, #24]	; (8010e3c <_sbrk_r+0x1c>)
 8010e24:	2300      	movs	r3, #0
 8010e26:	4604      	mov	r4, r0
 8010e28:	4608      	mov	r0, r1
 8010e2a:	602b      	str	r3, [r5, #0]
 8010e2c:	f7f2 f976 	bl	800311c <_sbrk>
 8010e30:	1c43      	adds	r3, r0, #1
 8010e32:	d102      	bne.n	8010e3a <_sbrk_r+0x1a>
 8010e34:	682b      	ldr	r3, [r5, #0]
 8010e36:	b103      	cbz	r3, 8010e3a <_sbrk_r+0x1a>
 8010e38:	6023      	str	r3, [r4, #0]
 8010e3a:	bd38      	pop	{r3, r4, r5, pc}
 8010e3c:	20000f6c 	.word	0x20000f6c

08010e40 <siprintf>:
 8010e40:	b40e      	push	{r1, r2, r3}
 8010e42:	b500      	push	{lr}
 8010e44:	b09c      	sub	sp, #112	; 0x70
 8010e46:	ab1d      	add	r3, sp, #116	; 0x74
 8010e48:	9002      	str	r0, [sp, #8]
 8010e4a:	9006      	str	r0, [sp, #24]
 8010e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e50:	4809      	ldr	r0, [pc, #36]	; (8010e78 <siprintf+0x38>)
 8010e52:	9107      	str	r1, [sp, #28]
 8010e54:	9104      	str	r1, [sp, #16]
 8010e56:	4909      	ldr	r1, [pc, #36]	; (8010e7c <siprintf+0x3c>)
 8010e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e5c:	9105      	str	r1, [sp, #20]
 8010e5e:	6800      	ldr	r0, [r0, #0]
 8010e60:	9301      	str	r3, [sp, #4]
 8010e62:	a902      	add	r1, sp, #8
 8010e64:	f000 f874 	bl	8010f50 <_svfiprintf_r>
 8010e68:	9b02      	ldr	r3, [sp, #8]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	701a      	strb	r2, [r3, #0]
 8010e6e:	b01c      	add	sp, #112	; 0x70
 8010e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e74:	b003      	add	sp, #12
 8010e76:	4770      	bx	lr
 8010e78:	20000024 	.word	0x20000024
 8010e7c:	ffff0208 	.word	0xffff0208

08010e80 <__malloc_lock>:
 8010e80:	4801      	ldr	r0, [pc, #4]	; (8010e88 <__malloc_lock+0x8>)
 8010e82:	f000 baf9 	b.w	8011478 <__retarget_lock_acquire_recursive>
 8010e86:	bf00      	nop
 8010e88:	20000f70 	.word	0x20000f70

08010e8c <__malloc_unlock>:
 8010e8c:	4801      	ldr	r0, [pc, #4]	; (8010e94 <__malloc_unlock+0x8>)
 8010e8e:	f000 baf4 	b.w	801147a <__retarget_lock_release_recursive>
 8010e92:	bf00      	nop
 8010e94:	20000f70 	.word	0x20000f70

08010e98 <__ssputs_r>:
 8010e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e9c:	688e      	ldr	r6, [r1, #8]
 8010e9e:	429e      	cmp	r6, r3
 8010ea0:	4682      	mov	sl, r0
 8010ea2:	460c      	mov	r4, r1
 8010ea4:	4690      	mov	r8, r2
 8010ea6:	461f      	mov	r7, r3
 8010ea8:	d838      	bhi.n	8010f1c <__ssputs_r+0x84>
 8010eaa:	898a      	ldrh	r2, [r1, #12]
 8010eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010eb0:	d032      	beq.n	8010f18 <__ssputs_r+0x80>
 8010eb2:	6825      	ldr	r5, [r4, #0]
 8010eb4:	6909      	ldr	r1, [r1, #16]
 8010eb6:	eba5 0901 	sub.w	r9, r5, r1
 8010eba:	6965      	ldr	r5, [r4, #20]
 8010ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	444b      	add	r3, r9
 8010ec8:	106d      	asrs	r5, r5, #1
 8010eca:	429d      	cmp	r5, r3
 8010ecc:	bf38      	it	cc
 8010ece:	461d      	movcc	r5, r3
 8010ed0:	0553      	lsls	r3, r2, #21
 8010ed2:	d531      	bpl.n	8010f38 <__ssputs_r+0xa0>
 8010ed4:	4629      	mov	r1, r5
 8010ed6:	f7ff ff2f 	bl	8010d38 <_malloc_r>
 8010eda:	4606      	mov	r6, r0
 8010edc:	b950      	cbnz	r0, 8010ef4 <__ssputs_r+0x5c>
 8010ede:	230c      	movs	r3, #12
 8010ee0:	f8ca 3000 	str.w	r3, [sl]
 8010ee4:	89a3      	ldrh	r3, [r4, #12]
 8010ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eea:	81a3      	strh	r3, [r4, #12]
 8010eec:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef4:	6921      	ldr	r1, [r4, #16]
 8010ef6:	464a      	mov	r2, r9
 8010ef8:	f7ff fe9c 	bl	8010c34 <memcpy>
 8010efc:	89a3      	ldrh	r3, [r4, #12]
 8010efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f06:	81a3      	strh	r3, [r4, #12]
 8010f08:	6126      	str	r6, [r4, #16]
 8010f0a:	6165      	str	r5, [r4, #20]
 8010f0c:	444e      	add	r6, r9
 8010f0e:	eba5 0509 	sub.w	r5, r5, r9
 8010f12:	6026      	str	r6, [r4, #0]
 8010f14:	60a5      	str	r5, [r4, #8]
 8010f16:	463e      	mov	r6, r7
 8010f18:	42be      	cmp	r6, r7
 8010f1a:	d900      	bls.n	8010f1e <__ssputs_r+0x86>
 8010f1c:	463e      	mov	r6, r7
 8010f1e:	6820      	ldr	r0, [r4, #0]
 8010f20:	4632      	mov	r2, r6
 8010f22:	4641      	mov	r1, r8
 8010f24:	f000 faaa 	bl	801147c <memmove>
 8010f28:	68a3      	ldr	r3, [r4, #8]
 8010f2a:	1b9b      	subs	r3, r3, r6
 8010f2c:	60a3      	str	r3, [r4, #8]
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	4433      	add	r3, r6
 8010f32:	6023      	str	r3, [r4, #0]
 8010f34:	2000      	movs	r0, #0
 8010f36:	e7db      	b.n	8010ef0 <__ssputs_r+0x58>
 8010f38:	462a      	mov	r2, r5
 8010f3a:	f000 fab9 	bl	80114b0 <_realloc_r>
 8010f3e:	4606      	mov	r6, r0
 8010f40:	2800      	cmp	r0, #0
 8010f42:	d1e1      	bne.n	8010f08 <__ssputs_r+0x70>
 8010f44:	6921      	ldr	r1, [r4, #16]
 8010f46:	4650      	mov	r0, sl
 8010f48:	f7ff fe8a 	bl	8010c60 <_free_r>
 8010f4c:	e7c7      	b.n	8010ede <__ssputs_r+0x46>
	...

08010f50 <_svfiprintf_r>:
 8010f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	4698      	mov	r8, r3
 8010f56:	898b      	ldrh	r3, [r1, #12]
 8010f58:	061b      	lsls	r3, r3, #24
 8010f5a:	b09d      	sub	sp, #116	; 0x74
 8010f5c:	4607      	mov	r7, r0
 8010f5e:	460d      	mov	r5, r1
 8010f60:	4614      	mov	r4, r2
 8010f62:	d50e      	bpl.n	8010f82 <_svfiprintf_r+0x32>
 8010f64:	690b      	ldr	r3, [r1, #16]
 8010f66:	b963      	cbnz	r3, 8010f82 <_svfiprintf_r+0x32>
 8010f68:	2140      	movs	r1, #64	; 0x40
 8010f6a:	f7ff fee5 	bl	8010d38 <_malloc_r>
 8010f6e:	6028      	str	r0, [r5, #0]
 8010f70:	6128      	str	r0, [r5, #16]
 8010f72:	b920      	cbnz	r0, 8010f7e <_svfiprintf_r+0x2e>
 8010f74:	230c      	movs	r3, #12
 8010f76:	603b      	str	r3, [r7, #0]
 8010f78:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7c:	e0d1      	b.n	8011122 <_svfiprintf_r+0x1d2>
 8010f7e:	2340      	movs	r3, #64	; 0x40
 8010f80:	616b      	str	r3, [r5, #20]
 8010f82:	2300      	movs	r3, #0
 8010f84:	9309      	str	r3, [sp, #36]	; 0x24
 8010f86:	2320      	movs	r3, #32
 8010f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f90:	2330      	movs	r3, #48	; 0x30
 8010f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801113c <_svfiprintf_r+0x1ec>
 8010f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f9a:	f04f 0901 	mov.w	r9, #1
 8010f9e:	4623      	mov	r3, r4
 8010fa0:	469a      	mov	sl, r3
 8010fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fa6:	b10a      	cbz	r2, 8010fac <_svfiprintf_r+0x5c>
 8010fa8:	2a25      	cmp	r2, #37	; 0x25
 8010faa:	d1f9      	bne.n	8010fa0 <_svfiprintf_r+0x50>
 8010fac:	ebba 0b04 	subs.w	fp, sl, r4
 8010fb0:	d00b      	beq.n	8010fca <_svfiprintf_r+0x7a>
 8010fb2:	465b      	mov	r3, fp
 8010fb4:	4622      	mov	r2, r4
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f7ff ff6d 	bl	8010e98 <__ssputs_r>
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f000 80aa 	beq.w	8011118 <_svfiprintf_r+0x1c8>
 8010fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fc6:	445a      	add	r2, fp
 8010fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8010fca:	f89a 3000 	ldrb.w	r3, [sl]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f000 80a2 	beq.w	8011118 <_svfiprintf_r+0x1c8>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8010fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fde:	f10a 0a01 	add.w	sl, sl, #1
 8010fe2:	9304      	str	r3, [sp, #16]
 8010fe4:	9307      	str	r3, [sp, #28]
 8010fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fea:	931a      	str	r3, [sp, #104]	; 0x68
 8010fec:	4654      	mov	r4, sl
 8010fee:	2205      	movs	r2, #5
 8010ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ff4:	4851      	ldr	r0, [pc, #324]	; (801113c <_svfiprintf_r+0x1ec>)
 8010ff6:	f7ef f8f3 	bl	80001e0 <memchr>
 8010ffa:	9a04      	ldr	r2, [sp, #16]
 8010ffc:	b9d8      	cbnz	r0, 8011036 <_svfiprintf_r+0xe6>
 8010ffe:	06d0      	lsls	r0, r2, #27
 8011000:	bf44      	itt	mi
 8011002:	2320      	movmi	r3, #32
 8011004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011008:	0711      	lsls	r1, r2, #28
 801100a:	bf44      	itt	mi
 801100c:	232b      	movmi	r3, #43	; 0x2b
 801100e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011012:	f89a 3000 	ldrb.w	r3, [sl]
 8011016:	2b2a      	cmp	r3, #42	; 0x2a
 8011018:	d015      	beq.n	8011046 <_svfiprintf_r+0xf6>
 801101a:	9a07      	ldr	r2, [sp, #28]
 801101c:	4654      	mov	r4, sl
 801101e:	2000      	movs	r0, #0
 8011020:	f04f 0c0a 	mov.w	ip, #10
 8011024:	4621      	mov	r1, r4
 8011026:	f811 3b01 	ldrb.w	r3, [r1], #1
 801102a:	3b30      	subs	r3, #48	; 0x30
 801102c:	2b09      	cmp	r3, #9
 801102e:	d94e      	bls.n	80110ce <_svfiprintf_r+0x17e>
 8011030:	b1b0      	cbz	r0, 8011060 <_svfiprintf_r+0x110>
 8011032:	9207      	str	r2, [sp, #28]
 8011034:	e014      	b.n	8011060 <_svfiprintf_r+0x110>
 8011036:	eba0 0308 	sub.w	r3, r0, r8
 801103a:	fa09 f303 	lsl.w	r3, r9, r3
 801103e:	4313      	orrs	r3, r2
 8011040:	9304      	str	r3, [sp, #16]
 8011042:	46a2      	mov	sl, r4
 8011044:	e7d2      	b.n	8010fec <_svfiprintf_r+0x9c>
 8011046:	9b03      	ldr	r3, [sp, #12]
 8011048:	1d19      	adds	r1, r3, #4
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	9103      	str	r1, [sp, #12]
 801104e:	2b00      	cmp	r3, #0
 8011050:	bfbb      	ittet	lt
 8011052:	425b      	neglt	r3, r3
 8011054:	f042 0202 	orrlt.w	r2, r2, #2
 8011058:	9307      	strge	r3, [sp, #28]
 801105a:	9307      	strlt	r3, [sp, #28]
 801105c:	bfb8      	it	lt
 801105e:	9204      	strlt	r2, [sp, #16]
 8011060:	7823      	ldrb	r3, [r4, #0]
 8011062:	2b2e      	cmp	r3, #46	; 0x2e
 8011064:	d10c      	bne.n	8011080 <_svfiprintf_r+0x130>
 8011066:	7863      	ldrb	r3, [r4, #1]
 8011068:	2b2a      	cmp	r3, #42	; 0x2a
 801106a:	d135      	bne.n	80110d8 <_svfiprintf_r+0x188>
 801106c:	9b03      	ldr	r3, [sp, #12]
 801106e:	1d1a      	adds	r2, r3, #4
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	9203      	str	r2, [sp, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	bfb8      	it	lt
 8011078:	f04f 33ff 	movlt.w	r3, #4294967295
 801107c:	3402      	adds	r4, #2
 801107e:	9305      	str	r3, [sp, #20]
 8011080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801114c <_svfiprintf_r+0x1fc>
 8011084:	7821      	ldrb	r1, [r4, #0]
 8011086:	2203      	movs	r2, #3
 8011088:	4650      	mov	r0, sl
 801108a:	f7ef f8a9 	bl	80001e0 <memchr>
 801108e:	b140      	cbz	r0, 80110a2 <_svfiprintf_r+0x152>
 8011090:	2340      	movs	r3, #64	; 0x40
 8011092:	eba0 000a 	sub.w	r0, r0, sl
 8011096:	fa03 f000 	lsl.w	r0, r3, r0
 801109a:	9b04      	ldr	r3, [sp, #16]
 801109c:	4303      	orrs	r3, r0
 801109e:	3401      	adds	r4, #1
 80110a0:	9304      	str	r3, [sp, #16]
 80110a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110a6:	4826      	ldr	r0, [pc, #152]	; (8011140 <_svfiprintf_r+0x1f0>)
 80110a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110ac:	2206      	movs	r2, #6
 80110ae:	f7ef f897 	bl	80001e0 <memchr>
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d038      	beq.n	8011128 <_svfiprintf_r+0x1d8>
 80110b6:	4b23      	ldr	r3, [pc, #140]	; (8011144 <_svfiprintf_r+0x1f4>)
 80110b8:	bb1b      	cbnz	r3, 8011102 <_svfiprintf_r+0x1b2>
 80110ba:	9b03      	ldr	r3, [sp, #12]
 80110bc:	3307      	adds	r3, #7
 80110be:	f023 0307 	bic.w	r3, r3, #7
 80110c2:	3308      	adds	r3, #8
 80110c4:	9303      	str	r3, [sp, #12]
 80110c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110c8:	4433      	add	r3, r6
 80110ca:	9309      	str	r3, [sp, #36]	; 0x24
 80110cc:	e767      	b.n	8010f9e <_svfiprintf_r+0x4e>
 80110ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80110d2:	460c      	mov	r4, r1
 80110d4:	2001      	movs	r0, #1
 80110d6:	e7a5      	b.n	8011024 <_svfiprintf_r+0xd4>
 80110d8:	2300      	movs	r3, #0
 80110da:	3401      	adds	r4, #1
 80110dc:	9305      	str	r3, [sp, #20]
 80110de:	4619      	mov	r1, r3
 80110e0:	f04f 0c0a 	mov.w	ip, #10
 80110e4:	4620      	mov	r0, r4
 80110e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110ea:	3a30      	subs	r2, #48	; 0x30
 80110ec:	2a09      	cmp	r2, #9
 80110ee:	d903      	bls.n	80110f8 <_svfiprintf_r+0x1a8>
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d0c5      	beq.n	8011080 <_svfiprintf_r+0x130>
 80110f4:	9105      	str	r1, [sp, #20]
 80110f6:	e7c3      	b.n	8011080 <_svfiprintf_r+0x130>
 80110f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80110fc:	4604      	mov	r4, r0
 80110fe:	2301      	movs	r3, #1
 8011100:	e7f0      	b.n	80110e4 <_svfiprintf_r+0x194>
 8011102:	ab03      	add	r3, sp, #12
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	462a      	mov	r2, r5
 8011108:	4b0f      	ldr	r3, [pc, #60]	; (8011148 <_svfiprintf_r+0x1f8>)
 801110a:	a904      	add	r1, sp, #16
 801110c:	4638      	mov	r0, r7
 801110e:	f3af 8000 	nop.w
 8011112:	1c42      	adds	r2, r0, #1
 8011114:	4606      	mov	r6, r0
 8011116:	d1d6      	bne.n	80110c6 <_svfiprintf_r+0x176>
 8011118:	89ab      	ldrh	r3, [r5, #12]
 801111a:	065b      	lsls	r3, r3, #25
 801111c:	f53f af2c 	bmi.w	8010f78 <_svfiprintf_r+0x28>
 8011120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011122:	b01d      	add	sp, #116	; 0x74
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011128:	ab03      	add	r3, sp, #12
 801112a:	9300      	str	r3, [sp, #0]
 801112c:	462a      	mov	r2, r5
 801112e:	4b06      	ldr	r3, [pc, #24]	; (8011148 <_svfiprintf_r+0x1f8>)
 8011130:	a904      	add	r1, sp, #16
 8011132:	4638      	mov	r0, r7
 8011134:	f000 f87a 	bl	801122c <_printf_i>
 8011138:	e7eb      	b.n	8011112 <_svfiprintf_r+0x1c2>
 801113a:	bf00      	nop
 801113c:	08011ac0 	.word	0x08011ac0
 8011140:	08011aca 	.word	0x08011aca
 8011144:	00000000 	.word	0x00000000
 8011148:	08010e99 	.word	0x08010e99
 801114c:	08011ac6 	.word	0x08011ac6

08011150 <_printf_common>:
 8011150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011154:	4616      	mov	r6, r2
 8011156:	4699      	mov	r9, r3
 8011158:	688a      	ldr	r2, [r1, #8]
 801115a:	690b      	ldr	r3, [r1, #16]
 801115c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011160:	4293      	cmp	r3, r2
 8011162:	bfb8      	it	lt
 8011164:	4613      	movlt	r3, r2
 8011166:	6033      	str	r3, [r6, #0]
 8011168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801116c:	4607      	mov	r7, r0
 801116e:	460c      	mov	r4, r1
 8011170:	b10a      	cbz	r2, 8011176 <_printf_common+0x26>
 8011172:	3301      	adds	r3, #1
 8011174:	6033      	str	r3, [r6, #0]
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	0699      	lsls	r1, r3, #26
 801117a:	bf42      	ittt	mi
 801117c:	6833      	ldrmi	r3, [r6, #0]
 801117e:	3302      	addmi	r3, #2
 8011180:	6033      	strmi	r3, [r6, #0]
 8011182:	6825      	ldr	r5, [r4, #0]
 8011184:	f015 0506 	ands.w	r5, r5, #6
 8011188:	d106      	bne.n	8011198 <_printf_common+0x48>
 801118a:	f104 0a19 	add.w	sl, r4, #25
 801118e:	68e3      	ldr	r3, [r4, #12]
 8011190:	6832      	ldr	r2, [r6, #0]
 8011192:	1a9b      	subs	r3, r3, r2
 8011194:	42ab      	cmp	r3, r5
 8011196:	dc26      	bgt.n	80111e6 <_printf_common+0x96>
 8011198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801119c:	1e13      	subs	r3, r2, #0
 801119e:	6822      	ldr	r2, [r4, #0]
 80111a0:	bf18      	it	ne
 80111a2:	2301      	movne	r3, #1
 80111a4:	0692      	lsls	r2, r2, #26
 80111a6:	d42b      	bmi.n	8011200 <_printf_common+0xb0>
 80111a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80111ac:	4649      	mov	r1, r9
 80111ae:	4638      	mov	r0, r7
 80111b0:	47c0      	blx	r8
 80111b2:	3001      	adds	r0, #1
 80111b4:	d01e      	beq.n	80111f4 <_printf_common+0xa4>
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	68e5      	ldr	r5, [r4, #12]
 80111ba:	6832      	ldr	r2, [r6, #0]
 80111bc:	f003 0306 	and.w	r3, r3, #6
 80111c0:	2b04      	cmp	r3, #4
 80111c2:	bf08      	it	eq
 80111c4:	1aad      	subeq	r5, r5, r2
 80111c6:	68a3      	ldr	r3, [r4, #8]
 80111c8:	6922      	ldr	r2, [r4, #16]
 80111ca:	bf0c      	ite	eq
 80111cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111d0:	2500      	movne	r5, #0
 80111d2:	4293      	cmp	r3, r2
 80111d4:	bfc4      	itt	gt
 80111d6:	1a9b      	subgt	r3, r3, r2
 80111d8:	18ed      	addgt	r5, r5, r3
 80111da:	2600      	movs	r6, #0
 80111dc:	341a      	adds	r4, #26
 80111de:	42b5      	cmp	r5, r6
 80111e0:	d11a      	bne.n	8011218 <_printf_common+0xc8>
 80111e2:	2000      	movs	r0, #0
 80111e4:	e008      	b.n	80111f8 <_printf_common+0xa8>
 80111e6:	2301      	movs	r3, #1
 80111e8:	4652      	mov	r2, sl
 80111ea:	4649      	mov	r1, r9
 80111ec:	4638      	mov	r0, r7
 80111ee:	47c0      	blx	r8
 80111f0:	3001      	adds	r0, #1
 80111f2:	d103      	bne.n	80111fc <_printf_common+0xac>
 80111f4:	f04f 30ff 	mov.w	r0, #4294967295
 80111f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111fc:	3501      	adds	r5, #1
 80111fe:	e7c6      	b.n	801118e <_printf_common+0x3e>
 8011200:	18e1      	adds	r1, r4, r3
 8011202:	1c5a      	adds	r2, r3, #1
 8011204:	2030      	movs	r0, #48	; 0x30
 8011206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801120a:	4422      	add	r2, r4
 801120c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011214:	3302      	adds	r3, #2
 8011216:	e7c7      	b.n	80111a8 <_printf_common+0x58>
 8011218:	2301      	movs	r3, #1
 801121a:	4622      	mov	r2, r4
 801121c:	4649      	mov	r1, r9
 801121e:	4638      	mov	r0, r7
 8011220:	47c0      	blx	r8
 8011222:	3001      	adds	r0, #1
 8011224:	d0e6      	beq.n	80111f4 <_printf_common+0xa4>
 8011226:	3601      	adds	r6, #1
 8011228:	e7d9      	b.n	80111de <_printf_common+0x8e>
	...

0801122c <_printf_i>:
 801122c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011230:	7e0f      	ldrb	r7, [r1, #24]
 8011232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011234:	2f78      	cmp	r7, #120	; 0x78
 8011236:	4691      	mov	r9, r2
 8011238:	4680      	mov	r8, r0
 801123a:	460c      	mov	r4, r1
 801123c:	469a      	mov	sl, r3
 801123e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011242:	d807      	bhi.n	8011254 <_printf_i+0x28>
 8011244:	2f62      	cmp	r7, #98	; 0x62
 8011246:	d80a      	bhi.n	801125e <_printf_i+0x32>
 8011248:	2f00      	cmp	r7, #0
 801124a:	f000 80d8 	beq.w	80113fe <_printf_i+0x1d2>
 801124e:	2f58      	cmp	r7, #88	; 0x58
 8011250:	f000 80a3 	beq.w	801139a <_printf_i+0x16e>
 8011254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801125c:	e03a      	b.n	80112d4 <_printf_i+0xa8>
 801125e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011262:	2b15      	cmp	r3, #21
 8011264:	d8f6      	bhi.n	8011254 <_printf_i+0x28>
 8011266:	a101      	add	r1, pc, #4	; (adr r1, 801126c <_printf_i+0x40>)
 8011268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801126c:	080112c5 	.word	0x080112c5
 8011270:	080112d9 	.word	0x080112d9
 8011274:	08011255 	.word	0x08011255
 8011278:	08011255 	.word	0x08011255
 801127c:	08011255 	.word	0x08011255
 8011280:	08011255 	.word	0x08011255
 8011284:	080112d9 	.word	0x080112d9
 8011288:	08011255 	.word	0x08011255
 801128c:	08011255 	.word	0x08011255
 8011290:	08011255 	.word	0x08011255
 8011294:	08011255 	.word	0x08011255
 8011298:	080113e5 	.word	0x080113e5
 801129c:	08011309 	.word	0x08011309
 80112a0:	080113c7 	.word	0x080113c7
 80112a4:	08011255 	.word	0x08011255
 80112a8:	08011255 	.word	0x08011255
 80112ac:	08011407 	.word	0x08011407
 80112b0:	08011255 	.word	0x08011255
 80112b4:	08011309 	.word	0x08011309
 80112b8:	08011255 	.word	0x08011255
 80112bc:	08011255 	.word	0x08011255
 80112c0:	080113cf 	.word	0x080113cf
 80112c4:	682b      	ldr	r3, [r5, #0]
 80112c6:	1d1a      	adds	r2, r3, #4
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	602a      	str	r2, [r5, #0]
 80112cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112d4:	2301      	movs	r3, #1
 80112d6:	e0a3      	b.n	8011420 <_printf_i+0x1f4>
 80112d8:	6820      	ldr	r0, [r4, #0]
 80112da:	6829      	ldr	r1, [r5, #0]
 80112dc:	0606      	lsls	r6, r0, #24
 80112de:	f101 0304 	add.w	r3, r1, #4
 80112e2:	d50a      	bpl.n	80112fa <_printf_i+0xce>
 80112e4:	680e      	ldr	r6, [r1, #0]
 80112e6:	602b      	str	r3, [r5, #0]
 80112e8:	2e00      	cmp	r6, #0
 80112ea:	da03      	bge.n	80112f4 <_printf_i+0xc8>
 80112ec:	232d      	movs	r3, #45	; 0x2d
 80112ee:	4276      	negs	r6, r6
 80112f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112f4:	485e      	ldr	r0, [pc, #376]	; (8011470 <_printf_i+0x244>)
 80112f6:	230a      	movs	r3, #10
 80112f8:	e019      	b.n	801132e <_printf_i+0x102>
 80112fa:	680e      	ldr	r6, [r1, #0]
 80112fc:	602b      	str	r3, [r5, #0]
 80112fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011302:	bf18      	it	ne
 8011304:	b236      	sxthne	r6, r6
 8011306:	e7ef      	b.n	80112e8 <_printf_i+0xbc>
 8011308:	682b      	ldr	r3, [r5, #0]
 801130a:	6820      	ldr	r0, [r4, #0]
 801130c:	1d19      	adds	r1, r3, #4
 801130e:	6029      	str	r1, [r5, #0]
 8011310:	0601      	lsls	r1, r0, #24
 8011312:	d501      	bpl.n	8011318 <_printf_i+0xec>
 8011314:	681e      	ldr	r6, [r3, #0]
 8011316:	e002      	b.n	801131e <_printf_i+0xf2>
 8011318:	0646      	lsls	r6, r0, #25
 801131a:	d5fb      	bpl.n	8011314 <_printf_i+0xe8>
 801131c:	881e      	ldrh	r6, [r3, #0]
 801131e:	4854      	ldr	r0, [pc, #336]	; (8011470 <_printf_i+0x244>)
 8011320:	2f6f      	cmp	r7, #111	; 0x6f
 8011322:	bf0c      	ite	eq
 8011324:	2308      	moveq	r3, #8
 8011326:	230a      	movne	r3, #10
 8011328:	2100      	movs	r1, #0
 801132a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801132e:	6865      	ldr	r5, [r4, #4]
 8011330:	60a5      	str	r5, [r4, #8]
 8011332:	2d00      	cmp	r5, #0
 8011334:	bfa2      	ittt	ge
 8011336:	6821      	ldrge	r1, [r4, #0]
 8011338:	f021 0104 	bicge.w	r1, r1, #4
 801133c:	6021      	strge	r1, [r4, #0]
 801133e:	b90e      	cbnz	r6, 8011344 <_printf_i+0x118>
 8011340:	2d00      	cmp	r5, #0
 8011342:	d04d      	beq.n	80113e0 <_printf_i+0x1b4>
 8011344:	4615      	mov	r5, r2
 8011346:	fbb6 f1f3 	udiv	r1, r6, r3
 801134a:	fb03 6711 	mls	r7, r3, r1, r6
 801134e:	5dc7      	ldrb	r7, [r0, r7]
 8011350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011354:	4637      	mov	r7, r6
 8011356:	42bb      	cmp	r3, r7
 8011358:	460e      	mov	r6, r1
 801135a:	d9f4      	bls.n	8011346 <_printf_i+0x11a>
 801135c:	2b08      	cmp	r3, #8
 801135e:	d10b      	bne.n	8011378 <_printf_i+0x14c>
 8011360:	6823      	ldr	r3, [r4, #0]
 8011362:	07de      	lsls	r6, r3, #31
 8011364:	d508      	bpl.n	8011378 <_printf_i+0x14c>
 8011366:	6923      	ldr	r3, [r4, #16]
 8011368:	6861      	ldr	r1, [r4, #4]
 801136a:	4299      	cmp	r1, r3
 801136c:	bfde      	ittt	le
 801136e:	2330      	movle	r3, #48	; 0x30
 8011370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011378:	1b52      	subs	r2, r2, r5
 801137a:	6122      	str	r2, [r4, #16]
 801137c:	f8cd a000 	str.w	sl, [sp]
 8011380:	464b      	mov	r3, r9
 8011382:	aa03      	add	r2, sp, #12
 8011384:	4621      	mov	r1, r4
 8011386:	4640      	mov	r0, r8
 8011388:	f7ff fee2 	bl	8011150 <_printf_common>
 801138c:	3001      	adds	r0, #1
 801138e:	d14c      	bne.n	801142a <_printf_i+0x1fe>
 8011390:	f04f 30ff 	mov.w	r0, #4294967295
 8011394:	b004      	add	sp, #16
 8011396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801139a:	4835      	ldr	r0, [pc, #212]	; (8011470 <_printf_i+0x244>)
 801139c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80113a0:	6829      	ldr	r1, [r5, #0]
 80113a2:	6823      	ldr	r3, [r4, #0]
 80113a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80113a8:	6029      	str	r1, [r5, #0]
 80113aa:	061d      	lsls	r5, r3, #24
 80113ac:	d514      	bpl.n	80113d8 <_printf_i+0x1ac>
 80113ae:	07df      	lsls	r7, r3, #31
 80113b0:	bf44      	itt	mi
 80113b2:	f043 0320 	orrmi.w	r3, r3, #32
 80113b6:	6023      	strmi	r3, [r4, #0]
 80113b8:	b91e      	cbnz	r6, 80113c2 <_printf_i+0x196>
 80113ba:	6823      	ldr	r3, [r4, #0]
 80113bc:	f023 0320 	bic.w	r3, r3, #32
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	2310      	movs	r3, #16
 80113c4:	e7b0      	b.n	8011328 <_printf_i+0xfc>
 80113c6:	6823      	ldr	r3, [r4, #0]
 80113c8:	f043 0320 	orr.w	r3, r3, #32
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	2378      	movs	r3, #120	; 0x78
 80113d0:	4828      	ldr	r0, [pc, #160]	; (8011474 <_printf_i+0x248>)
 80113d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113d6:	e7e3      	b.n	80113a0 <_printf_i+0x174>
 80113d8:	0659      	lsls	r1, r3, #25
 80113da:	bf48      	it	mi
 80113dc:	b2b6      	uxthmi	r6, r6
 80113de:	e7e6      	b.n	80113ae <_printf_i+0x182>
 80113e0:	4615      	mov	r5, r2
 80113e2:	e7bb      	b.n	801135c <_printf_i+0x130>
 80113e4:	682b      	ldr	r3, [r5, #0]
 80113e6:	6826      	ldr	r6, [r4, #0]
 80113e8:	6961      	ldr	r1, [r4, #20]
 80113ea:	1d18      	adds	r0, r3, #4
 80113ec:	6028      	str	r0, [r5, #0]
 80113ee:	0635      	lsls	r5, r6, #24
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	d501      	bpl.n	80113f8 <_printf_i+0x1cc>
 80113f4:	6019      	str	r1, [r3, #0]
 80113f6:	e002      	b.n	80113fe <_printf_i+0x1d2>
 80113f8:	0670      	lsls	r0, r6, #25
 80113fa:	d5fb      	bpl.n	80113f4 <_printf_i+0x1c8>
 80113fc:	8019      	strh	r1, [r3, #0]
 80113fe:	2300      	movs	r3, #0
 8011400:	6123      	str	r3, [r4, #16]
 8011402:	4615      	mov	r5, r2
 8011404:	e7ba      	b.n	801137c <_printf_i+0x150>
 8011406:	682b      	ldr	r3, [r5, #0]
 8011408:	1d1a      	adds	r2, r3, #4
 801140a:	602a      	str	r2, [r5, #0]
 801140c:	681d      	ldr	r5, [r3, #0]
 801140e:	6862      	ldr	r2, [r4, #4]
 8011410:	2100      	movs	r1, #0
 8011412:	4628      	mov	r0, r5
 8011414:	f7ee fee4 	bl	80001e0 <memchr>
 8011418:	b108      	cbz	r0, 801141e <_printf_i+0x1f2>
 801141a:	1b40      	subs	r0, r0, r5
 801141c:	6060      	str	r0, [r4, #4]
 801141e:	6863      	ldr	r3, [r4, #4]
 8011420:	6123      	str	r3, [r4, #16]
 8011422:	2300      	movs	r3, #0
 8011424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011428:	e7a8      	b.n	801137c <_printf_i+0x150>
 801142a:	6923      	ldr	r3, [r4, #16]
 801142c:	462a      	mov	r2, r5
 801142e:	4649      	mov	r1, r9
 8011430:	4640      	mov	r0, r8
 8011432:	47d0      	blx	sl
 8011434:	3001      	adds	r0, #1
 8011436:	d0ab      	beq.n	8011390 <_printf_i+0x164>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	079b      	lsls	r3, r3, #30
 801143c:	d413      	bmi.n	8011466 <_printf_i+0x23a>
 801143e:	68e0      	ldr	r0, [r4, #12]
 8011440:	9b03      	ldr	r3, [sp, #12]
 8011442:	4298      	cmp	r0, r3
 8011444:	bfb8      	it	lt
 8011446:	4618      	movlt	r0, r3
 8011448:	e7a4      	b.n	8011394 <_printf_i+0x168>
 801144a:	2301      	movs	r3, #1
 801144c:	4632      	mov	r2, r6
 801144e:	4649      	mov	r1, r9
 8011450:	4640      	mov	r0, r8
 8011452:	47d0      	blx	sl
 8011454:	3001      	adds	r0, #1
 8011456:	d09b      	beq.n	8011390 <_printf_i+0x164>
 8011458:	3501      	adds	r5, #1
 801145a:	68e3      	ldr	r3, [r4, #12]
 801145c:	9903      	ldr	r1, [sp, #12]
 801145e:	1a5b      	subs	r3, r3, r1
 8011460:	42ab      	cmp	r3, r5
 8011462:	dcf2      	bgt.n	801144a <_printf_i+0x21e>
 8011464:	e7eb      	b.n	801143e <_printf_i+0x212>
 8011466:	2500      	movs	r5, #0
 8011468:	f104 0619 	add.w	r6, r4, #25
 801146c:	e7f5      	b.n	801145a <_printf_i+0x22e>
 801146e:	bf00      	nop
 8011470:	08011ad1 	.word	0x08011ad1
 8011474:	08011ae2 	.word	0x08011ae2

08011478 <__retarget_lock_acquire_recursive>:
 8011478:	4770      	bx	lr

0801147a <__retarget_lock_release_recursive>:
 801147a:	4770      	bx	lr

0801147c <memmove>:
 801147c:	4288      	cmp	r0, r1
 801147e:	b510      	push	{r4, lr}
 8011480:	eb01 0402 	add.w	r4, r1, r2
 8011484:	d902      	bls.n	801148c <memmove+0x10>
 8011486:	4284      	cmp	r4, r0
 8011488:	4623      	mov	r3, r4
 801148a:	d807      	bhi.n	801149c <memmove+0x20>
 801148c:	1e43      	subs	r3, r0, #1
 801148e:	42a1      	cmp	r1, r4
 8011490:	d008      	beq.n	80114a4 <memmove+0x28>
 8011492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011496:	f803 2f01 	strb.w	r2, [r3, #1]!
 801149a:	e7f8      	b.n	801148e <memmove+0x12>
 801149c:	4402      	add	r2, r0
 801149e:	4601      	mov	r1, r0
 80114a0:	428a      	cmp	r2, r1
 80114a2:	d100      	bne.n	80114a6 <memmove+0x2a>
 80114a4:	bd10      	pop	{r4, pc}
 80114a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114ae:	e7f7      	b.n	80114a0 <memmove+0x24>

080114b0 <_realloc_r>:
 80114b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b4:	4680      	mov	r8, r0
 80114b6:	4614      	mov	r4, r2
 80114b8:	460e      	mov	r6, r1
 80114ba:	b921      	cbnz	r1, 80114c6 <_realloc_r+0x16>
 80114bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114c0:	4611      	mov	r1, r2
 80114c2:	f7ff bc39 	b.w	8010d38 <_malloc_r>
 80114c6:	b92a      	cbnz	r2, 80114d4 <_realloc_r+0x24>
 80114c8:	f7ff fbca 	bl	8010c60 <_free_r>
 80114cc:	4625      	mov	r5, r4
 80114ce:	4628      	mov	r0, r5
 80114d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d4:	f000 f81b 	bl	801150e <_malloc_usable_size_r>
 80114d8:	4284      	cmp	r4, r0
 80114da:	4607      	mov	r7, r0
 80114dc:	d802      	bhi.n	80114e4 <_realloc_r+0x34>
 80114de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80114e2:	d812      	bhi.n	801150a <_realloc_r+0x5a>
 80114e4:	4621      	mov	r1, r4
 80114e6:	4640      	mov	r0, r8
 80114e8:	f7ff fc26 	bl	8010d38 <_malloc_r>
 80114ec:	4605      	mov	r5, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d0ed      	beq.n	80114ce <_realloc_r+0x1e>
 80114f2:	42bc      	cmp	r4, r7
 80114f4:	4622      	mov	r2, r4
 80114f6:	4631      	mov	r1, r6
 80114f8:	bf28      	it	cs
 80114fa:	463a      	movcs	r2, r7
 80114fc:	f7ff fb9a 	bl	8010c34 <memcpy>
 8011500:	4631      	mov	r1, r6
 8011502:	4640      	mov	r0, r8
 8011504:	f7ff fbac 	bl	8010c60 <_free_r>
 8011508:	e7e1      	b.n	80114ce <_realloc_r+0x1e>
 801150a:	4635      	mov	r5, r6
 801150c:	e7df      	b.n	80114ce <_realloc_r+0x1e>

0801150e <_malloc_usable_size_r>:
 801150e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011512:	1f18      	subs	r0, r3, #4
 8011514:	2b00      	cmp	r3, #0
 8011516:	bfbc      	itt	lt
 8011518:	580b      	ldrlt	r3, [r1, r0]
 801151a:	18c0      	addlt	r0, r0, r3
 801151c:	4770      	bx	lr
	...

08011520 <_init>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	bf00      	nop
 8011524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011526:	bc08      	pop	{r3}
 8011528:	469e      	mov	lr, r3
 801152a:	4770      	bx	lr

0801152c <_fini>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	bf00      	nop
 8011530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011532:	bc08      	pop	{r3}
 8011534:	469e      	mov	lr, r3
 8011536:	4770      	bx	lr
