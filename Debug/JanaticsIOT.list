
JanaticsIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08010b84  08010b84  00020b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801108c  0801108c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  0801108c  0801108c  0002108c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011094  08011094  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011094  08011094  00021094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801109c  0801109c  0002109c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080110a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb8  20000088  0801112c  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f40  0801112c  00030f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204c1  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000503a  00000000  00000000  00050579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  000555b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f8  00000000  00000000  00056f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007439  00000000  00000000  00058768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022fcc  00000000  00000000  0005fba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df0d6  00000000  00000000  00082b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e6c  00000000  00000000  00161c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b6c 	.word	0x08010b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08010b6c 	.word	0x08010b6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ESPRXDataSeg>:
uint8_t wifiusernamecheck[15] = {'N','A','V','E','E','N','P','H','O','N','E'};

void ReadOnlineData(void);

void ESPRXDataSeg(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	if(!RxCompleteU2C1WIFI){return;}
 8000588:	4bb6      	ldr	r3, [pc, #728]	; (8000864 <ESPRXDataSeg+0x2e0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	f000 81fc 	beq.w	800098a <ESPRXDataSeg+0x406>
	RxCompleteU2C1WIFI=0;
 8000592:	4bb4      	ldr	r3, [pc, #720]	; (8000864 <ESPRXDataSeg+0x2e0>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]

	Production_Total  	= Uart_rx_buffer[19]+(Uart_rx_buffer[18]*10)+(Uart_rx_buffer[17]*100)+(Uart_rx_buffer[16]*1000)+(Uart_rx_buffer[15]*10000);//Production
 8000598:	4bb3      	ldr	r3, [pc, #716]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800059a:	7cdb      	ldrb	r3, [r3, #19]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4bb2      	ldr	r3, [pc, #712]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005a0:	7c5b      	ldrb	r3, [r3, #17]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	0089      	lsls	r1, r1, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	4619      	mov	r1, r3
 80005ac:	0088      	lsls	r0, r1, #2
 80005ae:	4619      	mov	r1, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	b299      	uxth	r1, r3
 80005b8:	4bab      	ldr	r3, [pc, #684]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005ba:	7c9b      	ldrb	r3, [r3, #18]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	0080      	lsls	r0, r0, #2
 80005c2:	4403      	add	r3, r0
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	440b      	add	r3, r1
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4413      	add	r3, r2
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4ba5      	ldr	r3, [pc, #660]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005d2:	7bdb      	ldrb	r3, [r3, #15]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	0149      	lsls	r1, r1, #5
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	0089      	lsls	r1, r1, #2
 80005de:	440b      	add	r3, r1
 80005e0:	4619      	mov	r1, r3
 80005e2:	0088      	lsls	r0, r1, #2
 80005e4:	4619      	mov	r1, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	440b      	add	r3, r1
 80005ea:	011b      	lsls	r3, r3, #4
 80005ec:	b299      	uxth	r1, r3
 80005ee:	4b9e      	ldr	r3, [pc, #632]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005f0:	7c1b      	ldrb	r3, [r3, #16]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	0140      	lsls	r0, r0, #5
 80005f8:	1ac0      	subs	r0, r0, r3
 80005fa:	0080      	lsls	r0, r0, #2
 80005fc:	4403      	add	r3, r0
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	440b      	add	r3, r1
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b98      	ldr	r3, [pc, #608]	; (800086c <ESPRXDataSeg+0x2e8>)
 800060c:	801a      	strh	r2, [r3, #0]
	Rejection_Total 	= Uart_rx_buffer[24]+(Uart_rx_buffer[23]*10)+(Uart_rx_buffer[22]*100)+(Uart_rx_buffer[21]*1000)+(Uart_rx_buffer[20]*10000);//Rejection
 800060e:	4b96      	ldr	r3, [pc, #600]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000610:	7e1b      	ldrb	r3, [r3, #24]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b94      	ldr	r3, [pc, #592]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000616:	7d9b      	ldrb	r3, [r3, #22]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	0089      	lsls	r1, r1, #2
 800061e:	440b      	add	r3, r1
 8000620:	4619      	mov	r1, r3
 8000622:	0088      	lsls	r0, r1, #2
 8000624:	4619      	mov	r1, r3
 8000626:	4603      	mov	r3, r0
 8000628:	440b      	add	r3, r1
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	b299      	uxth	r1, r3
 800062e:	4b8e      	ldr	r3, [pc, #568]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000630:	7ddb      	ldrb	r3, [r3, #23]
 8000632:	b29b      	uxth	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	0080      	lsls	r0, r0, #2
 8000638:	4403      	add	r3, r0
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	440b      	add	r3, r1
 8000640:	b29b      	uxth	r3, r3
 8000642:	4413      	add	r3, r2
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b88      	ldr	r3, [pc, #544]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000648:	7d1b      	ldrb	r3, [r3, #20]
 800064a:	b29b      	uxth	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	0149      	lsls	r1, r1, #5
 8000650:	1ac9      	subs	r1, r1, r3
 8000652:	0089      	lsls	r1, r1, #2
 8000654:	440b      	add	r3, r1
 8000656:	4619      	mov	r1, r3
 8000658:	0088      	lsls	r0, r1, #2
 800065a:	4619      	mov	r1, r3
 800065c:	4603      	mov	r3, r0
 800065e:	440b      	add	r3, r1
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b299      	uxth	r1, r3
 8000664:	4b80      	ldr	r3, [pc, #512]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000666:	7d5b      	ldrb	r3, [r3, #21]
 8000668:	b29b      	uxth	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	0140      	lsls	r0, r0, #5
 800066e:	1ac0      	subs	r0, r0, r3
 8000670:	0080      	lsls	r0, r0, #2
 8000672:	4403      	add	r3, r0
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	b29b      	uxth	r3, r3
 8000678:	440b      	add	r3, r1
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <ESPRXDataSeg+0x2ec>)
 8000682:	801a      	strh	r2, [r3, #0]
	batchTargetquantity = Uart_rx_buffer[29]+(Uart_rx_buffer[28]*10)+(Uart_rx_buffer[27]*100)+(Uart_rx_buffer[26]*1000)+(Uart_rx_buffer[25]*10000); //
 8000684:	4b78      	ldr	r3, [pc, #480]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000686:	7f5b      	ldrb	r3, [r3, #29]
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b77      	ldr	r3, [pc, #476]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800068c:	7edb      	ldrb	r3, [r3, #27]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	0089      	lsls	r1, r1, #2
 8000694:	440b      	add	r3, r1
 8000696:	4619      	mov	r1, r3
 8000698:	0088      	lsls	r0, r1, #2
 800069a:	4619      	mov	r1, r3
 800069c:	4603      	mov	r3, r0
 800069e:	440b      	add	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	b299      	uxth	r1, r3
 80006a4:	4b70      	ldr	r3, [pc, #448]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006a6:	7f1b      	ldrb	r3, [r3, #28]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	0080      	lsls	r0, r0, #2
 80006ae:	4403      	add	r3, r0
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	440b      	add	r3, r1
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4413      	add	r3, r2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b6a      	ldr	r3, [pc, #424]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006be:	7e5b      	ldrb	r3, [r3, #25]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	0149      	lsls	r1, r1, #5
 80006c6:	1ac9      	subs	r1, r1, r3
 80006c8:	0089      	lsls	r1, r1, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	0088      	lsls	r0, r1, #2
 80006d0:	4619      	mov	r1, r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	440b      	add	r3, r1
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b299      	uxth	r1, r3
 80006da:	4b63      	ldr	r3, [pc, #396]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006dc:	7e9b      	ldrb	r3, [r3, #26]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	0140      	lsls	r0, r0, #5
 80006e4:	1ac0      	subs	r0, r0, r3
 80006e6:	0080      	lsls	r0, r0, #2
 80006e8:	4403      	add	r3, r0
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	440b      	add	r3, r1
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <ESPRXDataSeg+0x2f0>)
 80006f8:	801a      	strh	r2, [r3, #0]
	temperateSet 		= Uart_rx_buffer[32]+(Uart_rx_buffer[31]*10)+(Uart_rx_buffer[30]*100);//temperateSet
 80006fa:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b59      	ldr	r3, [pc, #356]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000704:	7f9b      	ldrb	r3, [r3, #30]
 8000706:	b29b      	uxth	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	0089      	lsls	r1, r1, #2
 800070c:	440b      	add	r3, r1
 800070e:	4619      	mov	r1, r3
 8000710:	0088      	lsls	r0, r1, #2
 8000712:	4619      	mov	r1, r3
 8000714:	4603      	mov	r3, r0
 8000716:	440b      	add	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	b299      	uxth	r1, r3
 800071c:	4b52      	ldr	r3, [pc, #328]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800071e:	7fdb      	ldrb	r3, [r3, #31]
 8000720:	b29b      	uxth	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	0080      	lsls	r0, r0, #2
 8000726:	4403      	add	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	440b      	add	r3, r1
 800072e:	b29b      	uxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b50      	ldr	r3, [pc, #320]	; (8000878 <ESPRXDataSeg+0x2f4>)
 8000736:	801a      	strh	r2, [r3, #0]
	temperateSetHigh 	= Uart_rx_buffer[35]+(Uart_rx_buffer[34]*10)+(Uart_rx_buffer[33]*100);//temperateSetHigh
 8000738:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800073a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000746:	b29b      	uxth	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	0089      	lsls	r1, r1, #2
 800074c:	440b      	add	r3, r1
 800074e:	4619      	mov	r1, r3
 8000750:	0088      	lsls	r0, r1, #2
 8000752:	4619      	mov	r1, r3
 8000754:	4603      	mov	r3, r0
 8000756:	440b      	add	r3, r1
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	b299      	uxth	r1, r3
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800075e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000762:	b29b      	uxth	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	0080      	lsls	r0, r0, #2
 8000768:	4403      	add	r3, r0
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	440b      	add	r3, r1
 8000770:	b29b      	uxth	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <ESPRXDataSeg+0x2f8>)
 8000778:	801a      	strh	r2, [r3, #0]
	temperateSetLow 	= Uart_rx_buffer[38]+(Uart_rx_buffer[37]*10)+(Uart_rx_buffer[36]*100);//temperateSetLow
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800077c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000788:	b29b      	uxth	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	0089      	lsls	r1, r1, #2
 800078e:	440b      	add	r3, r1
 8000790:	4619      	mov	r1, r3
 8000792:	0088      	lsls	r0, r1, #2
 8000794:	4619      	mov	r1, r3
 8000796:	4603      	mov	r3, r0
 8000798:	440b      	add	r3, r1
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	b299      	uxth	r1, r3
 800079e:	4b32      	ldr	r3, [pc, #200]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	0080      	lsls	r0, r0, #2
 80007aa:	4403      	add	r3, r0
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	440b      	add	r3, r1
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <ESPRXDataSeg+0x2fc>)
 80007ba:	801a      	strh	r2, [r3, #0]
	requirementId	 	= Uart_rx_buffer[44]+(Uart_rx_buffer[43]*10)+(Uart_rx_buffer[42]*100)+(Uart_rx_buffer[41]*1000)+(Uart_rx_buffer[40]*10000)+(Uart_rx_buffer[39]*100000);//requirementId
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	0089      	lsls	r1, r1, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	4619      	mov	r1, r3
 80007d4:	0088      	lsls	r0, r1, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	4603      	mov	r3, r0
 80007da:	440b      	add	r3, r1
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	b299      	uxth	r1, r3
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	0080      	lsls	r0, r0, #2
 80007ec:	4403      	add	r3, r0
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	440b      	add	r3, r1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000800:	b29b      	uxth	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	0149      	lsls	r1, r1, #5
 8000806:	1ac9      	subs	r1, r1, r3
 8000808:	0089      	lsls	r1, r1, #2
 800080a:	440b      	add	r3, r1
 800080c:	4619      	mov	r1, r3
 800080e:	0088      	lsls	r0, r1, #2
 8000810:	4619      	mov	r1, r3
 8000812:	4603      	mov	r3, r0
 8000814:	440b      	add	r3, r1
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	b299      	uxth	r1, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800081c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000820:	b29b      	uxth	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	0140      	lsls	r0, r0, #5
 8000826:	1ac0      	subs	r0, r0, r3
 8000828:	0080      	lsls	r0, r0, #2
 800082a:	4403      	add	r3, r0
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	b29b      	uxth	r3, r3
 8000830:	440b      	add	r3, r1
 8000832:	b29b      	uxth	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800083a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800083e:	b29b      	uxth	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	0049      	lsls	r1, r1, #1
 8000844:	4419      	add	r1, r3
 8000846:	4608      	mov	r0, r1
 8000848:	0100      	lsls	r0, r0, #4
 800084a:	1a41      	subs	r1, r0, r1
 800084c:	00c9      	lsls	r1, r1, #3
 800084e:	1acb      	subs	r3, r1, r3
 8000850:	4619      	mov	r1, r3
 8000852:	0089      	lsls	r1, r1, #2
 8000854:	1acb      	subs	r3, r1, r3
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	b29b      	uxth	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <ESPRXDataSeg+0x300>)
 8000860:	801a      	strh	r2, [r3, #0]
 8000862:	e011      	b.n	8000888 <ESPRXDataSeg+0x304>
 8000864:	200000ef 	.word	0x200000ef
 8000868:	200000a4 	.word	0x200000a4
 800086c:	200000fe 	.word	0x200000fe
 8000870:	20000100 	.word	0x20000100
 8000874:	20000102 	.word	0x20000102
 8000878:	20000104 	.word	0x20000104
 800087c:	20000106 	.word	0x20000106
 8000880:	20000108 	.word	0x20000108
 8000884:	2000010a 	.word	0x2000010a

	batchNumber  	 = Uart_rx_buffer[57]+(Uart_rx_buffer[56]*10)+(Uart_rx_buffer[55]*100);
 8000888:	4b42      	ldr	r3, [pc, #264]	; (8000994 <ESPRXDataSeg+0x410>)
 800088a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b40      	ldr	r3, [pc, #256]	; (8000994 <ESPRXDataSeg+0x410>)
 8000892:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000896:	b29b      	uxth	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	0089      	lsls	r1, r1, #2
 800089c:	440b      	add	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	0088      	lsls	r0, r1, #2
 80008a2:	4619      	mov	r1, r3
 80008a4:	4603      	mov	r3, r0
 80008a6:	440b      	add	r3, r1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	b299      	uxth	r1, r3
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <ESPRXDataSeg+0x410>)
 80008ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	0080      	lsls	r0, r0, #2
 80008b8:	4403      	add	r3, r0
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	b29b      	uxth	r3, r3
 80008be:	440b      	add	r3, r1
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <ESPRXDataSeg+0x414>)
 80008c8:	801a      	strh	r2, [r3, #0]
	resetStatus  	 = Uart_rx_buffer[59]+(Uart_rx_buffer[58]*10);
 80008ca:	4b32      	ldr	r3, [pc, #200]	; (8000994 <ESPRXDataSeg+0x410>)
 80008cc:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <ESPRXDataSeg+0x410>)
 80008d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008d6:	4619      	mov	r1, r3
 80008d8:	0089      	lsls	r1, r1, #2
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <ESPRXDataSeg+0x418>)
 80008e6:	701a      	strb	r2, [r3, #0]
	startStopStatus  = Uart_rx_buffer[61]+(Uart_rx_buffer[60]*10);
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <ESPRXDataSeg+0x410>)
 80008ea:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <ESPRXDataSeg+0x410>)
 80008f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f4:	4619      	mov	r1, r3
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <ESPRXDataSeg+0x41c>)
 8000904:	701a      	strb	r2, [r3, #0]
	//Date,Month,Year
	SW_Date = Uart_rx_buffer[4]+(Uart_rx_buffer[3]*10);//SW_Date
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <ESPRXDataSeg+0x410>)
 8000908:	791a      	ldrb	r2, [r3, #4]
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <ESPRXDataSeg+0x410>)
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	4619      	mov	r1, r3
 8000910:	0089      	lsls	r1, r1, #2
 8000912:	440b      	add	r3, r1
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <ESPRXDataSeg+0x420>)
 800091e:	701a      	strb	r2, [r3, #0]
	SW_Month = Uart_rx_buffer[6]+(Uart_rx_buffer[5]*10);//SW_Month
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <ESPRXDataSeg+0x410>)
 8000922:	799a      	ldrb	r2, [r3, #6]
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <ESPRXDataSeg+0x410>)
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	4619      	mov	r1, r3
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	440b      	add	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4413      	add	r3, r2
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <ESPRXDataSeg+0x424>)
 8000938:	701a      	strb	r2, [r3, #0]
	SW_Year = Uart_rx_buffer[8]+(Uart_rx_buffer[7]*10);//SW_Year
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <ESPRXDataSeg+0x410>)
 800093c:	7a1a      	ldrb	r2, [r3, #8]
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <ESPRXDataSeg+0x410>)
 8000940:	79db      	ldrb	r3, [r3, #7]
 8000942:	4619      	mov	r1, r3
 8000944:	0089      	lsls	r1, r1, #2
 8000946:	440b      	add	r3, r1
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4413      	add	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <ESPRXDataSeg+0x428>)
 8000952:	701a      	strb	r2, [r3, #0]
	SW_Hour = Uart_rx_buffer[10]+(Uart_rx_buffer[9]*10);//SW_Hour
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <ESPRXDataSeg+0x410>)
 8000956:	7a9a      	ldrb	r2, [r3, #10]
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <ESPRXDataSeg+0x410>)
 800095a:	7a5b      	ldrb	r3, [r3, #9]
 800095c:	4619      	mov	r1, r3
 800095e:	0089      	lsls	r1, r1, #2
 8000960:	440b      	add	r3, r1
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <ESPRXDataSeg+0x42c>)
 800096c:	701a      	strb	r2, [r3, #0]
	SW_Minute = Uart_rx_buffer[12]+(Uart_rx_buffer[11]*10);//SW_Minute
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <ESPRXDataSeg+0x410>)
 8000970:	7b1a      	ldrb	r2, [r3, #12]
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <ESPRXDataSeg+0x410>)
 8000974:	7adb      	ldrb	r3, [r3, #11]
 8000976:	4619      	mov	r1, r3
 8000978:	0089      	lsls	r1, r1, #2
 800097a:	440b      	add	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4413      	add	r3, r2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <ESPRXDataSeg+0x430>)
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e000      	b.n	800098c <ESPRXDataSeg+0x408>
	if(!RxCompleteU2C1WIFI){return;}
 800098a:	bf00      	nop

}
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	200000a4 	.word	0x200000a4
 8000998:	2000010c 	.word	0x2000010c
 800099c:	2000010e 	.word	0x2000010e
 80009a0:	2000010f 	.word	0x2000010f
 80009a4:	200000f3 	.word	0x200000f3
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	200000f5 	.word	0x200000f5
 80009b0:	200000f1 	.word	0x200000f1
 80009b4:	200000f2 	.word	0x200000f2

080009b8 <ESPRxDecoder>:
	productionhysNegSetOL   = FlashReadOLdata[9];
}


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4613      	mov	r3, r2
 80009c6:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	2b07      	cmp	r3, #7
 80009ce:	f201 8177 	bhi.w	8001cc0 <ESPRxDecoder+0x1308>
 80009d2:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <ESPRxDecoder+0x20>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	080009f9 	.word	0x080009f9
 80009dc:	08000b0f 	.word	0x08000b0f
 80009e0:	08000b4d 	.word	0x08000b4d
 80009e4:	08000db1 	.word	0x08000db1
 80009e8:	08000def 	.word	0x08000def
 80009ec:	08001007 	.word	0x08001007
 80009f0:	0800102d 	.word	0x0800102d
 80009f4:	08001c8b 	.word	0x08001c8b
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b4f      	cmp	r3, #79	; 0x4f
 80009fc:	d107      	bne.n	8000a0e <ESPRxDecoder+0x56>
 80009fe:	4b8e      	ldr	r3, [pc, #568]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d103      	bne.n	8000a0e <ESPRxDecoder+0x56>
			 {
			 	bufferptr=1;
 8000a06:	4b8c      	ldr	r3, [pc, #560]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e011      	b.n	8000a32 <ESPRxDecoder+0x7a>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b4b      	cmp	r3, #75	; 0x4b
 8000a12:	d10e      	bne.n	8000a32 <ESPRxDecoder+0x7a>
 8000a14:	4b88      	ldr	r3, [pc, #544]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d10a      	bne.n	8000a32 <ESPRxDecoder+0x7a>
			 {
			 	bufferptr=0;
 8000a1c:	4b86      	ldr	r3, [pc, #536]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000a26:	4b85      	ldr	r3, [pc, #532]	; (8000c3c <ESPRxDecoder+0x284>)
 8000a28:	221e      	movs	r2, #30
 8000a2a:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 8000a2c:	4b84      	ldr	r3, [pc, #528]	; (8000c40 <ESPRxDecoder+0x288>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b6e      	cmp	r3, #110	; 0x6e
 8000a36:	d107      	bne.n	8000a48 <ESPRxDecoder+0x90>
 8000a38:	4b7f      	ldr	r3, [pc, #508]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d103      	bne.n	8000a48 <ESPRxDecoder+0x90>
			 {
			 	bufferptr=1;
 8000a40:	4b7d      	ldr	r3, [pc, #500]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e060      	b.n	8000b0a <ESPRxDecoder+0x152>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b6f      	cmp	r3, #111	; 0x6f
 8000a4c:	d107      	bne.n	8000a5e <ESPRxDecoder+0xa6>
 8000a4e:	4b7a      	ldr	r3, [pc, #488]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d103      	bne.n	8000a5e <ESPRxDecoder+0xa6>
			 {
			 	bufferptr=2;
 8000a56:	4b78      	ldr	r3, [pc, #480]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e055      	b.n	8000b0a <ESPRxDecoder+0x152>
			 }
			 else if(bufferptr==2)
 8000a5e:	4b76      	ldr	r3, [pc, #472]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d104      	bne.n	8000a70 <ESPRxDecoder+0xb8>
			 {
			 	bufferptr=3;
 8000a66:	4b74      	ldr	r3, [pc, #464]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a68:	2203      	movs	r2, #3
 8000a6a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 8000a6c:	f001 b92a 	b.w	8001cc4 <ESPRxDecoder+0x130c>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b63      	cmp	r3, #99	; 0x63
 8000a74:	d107      	bne.n	8000a86 <ESPRxDecoder+0xce>
 8000a76:	4b70      	ldr	r3, [pc, #448]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d103      	bne.n	8000a86 <ESPRxDecoder+0xce>
			 	bufferptr=4;
 8000a7e:	4b6e      	ldr	r3, [pc, #440]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e041      	b.n	8000b0a <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b68      	cmp	r3, #104	; 0x68
 8000a8a:	d107      	bne.n	8000a9c <ESPRxDecoder+0xe4>
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d103      	bne.n	8000a9c <ESPRxDecoder+0xe4>
			 	bufferptr=5;
 8000a94:	4b68      	ldr	r3, [pc, #416]	; (8000c38 <ESPRxDecoder+0x280>)
 8000a96:	2205      	movs	r2, #5
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e036      	b.n	8000b0a <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b61      	cmp	r3, #97	; 0x61
 8000aa0:	d107      	bne.n	8000ab2 <ESPRxDecoder+0xfa>
 8000aa2:	4b65      	ldr	r3, [pc, #404]	; (8000c38 <ESPRxDecoder+0x280>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b05      	cmp	r3, #5
 8000aa8:	d103      	bne.n	8000ab2 <ESPRxDecoder+0xfa>
			 	bufferptr=6;
 8000aaa:	4b63      	ldr	r3, [pc, #396]	; (8000c38 <ESPRxDecoder+0x280>)
 8000aac:	2206      	movs	r2, #6
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e02b      	b.n	8000b0a <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b6e      	cmp	r3, #110	; 0x6e
 8000ab6:	d107      	bne.n	8000ac8 <ESPRxDecoder+0x110>
 8000ab8:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <ESPRxDecoder+0x280>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d103      	bne.n	8000ac8 <ESPRxDecoder+0x110>
			 	bufferptr=7;
 8000ac0:	4b5d      	ldr	r3, [pc, #372]	; (8000c38 <ESPRxDecoder+0x280>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e020      	b.n	8000b0a <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b67      	cmp	r3, #103	; 0x67
 8000acc:	d107      	bne.n	8000ade <ESPRxDecoder+0x126>
 8000ace:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <ESPRxDecoder+0x280>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d103      	bne.n	8000ade <ESPRxDecoder+0x126>
			 	bufferptr=8;
 8000ad6:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <ESPRxDecoder+0x280>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e015      	b.n	8000b0a <ESPRxDecoder+0x152>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b65      	cmp	r3, #101	; 0x65
 8000ae2:	f041 80ef 	bne.w	8001cc4 <ESPRxDecoder+0x130c>
 8000ae6:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <ESPRxDecoder+0x280>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	f041 80ea 	bne.w	8001cc4 <ESPRxDecoder+0x130c>
			 	bufferptr=0;
 8000af0:	4b51      	ldr	r3, [pc, #324]	; (8000c38 <ESPRxDecoder+0x280>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000afa:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <ESPRxDecoder+0x284>)
 8000afc:	221e      	movs	r2, #30
 8000afe:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 8000b00:	4b4f      	ldr	r3, [pc, #316]	; (8000c40 <ESPRxDecoder+0x288>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
		break;
 8000b06:	f001 b8dd 	b.w	8001cc4 <ESPRxDecoder+0x130c>
 8000b0a:	f001 b8db 	b.w	8001cc4 <ESPRxDecoder+0x130c>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b4f      	cmp	r3, #79	; 0x4f
 8000b12:	d108      	bne.n	8000b26 <ESPRxDecoder+0x16e>
 8000b14:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d104      	bne.n	8000b26 <ESPRxDecoder+0x16e>
			 {
			 	bufferptr=1;
 8000b1c:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=49;
			 }
		break;
 8000b22:	f001 b8d1 	b.w	8001cc8 <ESPRxDecoder+0x1310>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b4b      	cmp	r3, #75	; 0x4b
 8000b2a:	f041 80cd 	bne.w	8001cc8 <ESPRxDecoder+0x1310>
 8000b2e:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	f041 80c8 	bne.w	8001cc8 <ESPRxDecoder+0x1310>
			 	bufferptr=0;
 8000b38:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71bb      	strb	r3, [r7, #6]
				wifi_command=49;
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <ESPRxDecoder+0x284>)
 8000b44:	2231      	movs	r2, #49	; 0x31
 8000b46:	701a      	strb	r2, [r3, #0]
		break;
 8000b48:	f001 b8be 	b.w	8001cc8 <ESPRxDecoder+0x1310>
		case 3:
			//wifiusernamecheck[15] "define the username at top"
			//
			if((Rxwifi_data== wifiusernamecheck[0])&&(bufferptr==0))
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d107      	bne.n	8000b66 <ESPRxDecoder+0x1ae>
 8000b56:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <ESPRxDecoder+0x1ae>
			 {
				bufferptr=1;
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e0d6      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[1])&&(bufferptr==1))
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d107      	bne.n	8000b80 <ESPRxDecoder+0x1c8>
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d103      	bne.n	8000b80 <ESPRxDecoder+0x1c8>
			 {
				bufferptr=2;
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e0c9      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[2])&&(bufferptr==2))
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d107      	bne.n	8000b9a <ESPRxDecoder+0x1e2>
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d103      	bne.n	8000b9a <ESPRxDecoder+0x1e2>
			 {
				bufferptr=3;
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <ESPRxDecoder+0x280>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e0bc      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }

			 else if((Rxwifi_data== wifiusernamecheck[3])&&(bufferptr==3))
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000b9c:	78db      	ldrb	r3, [r3, #3]
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d107      	bne.n	8000bb4 <ESPRxDecoder+0x1fc>
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <ESPRxDecoder+0x280>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d103      	bne.n	8000bb4 <ESPRxDecoder+0x1fc>
			 {
				bufferptr=4;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <ESPRxDecoder+0x280>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e0af      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[4])&&(bufferptr==4))
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d107      	bne.n	8000bce <ESPRxDecoder+0x216>
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <ESPRxDecoder+0x280>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d103      	bne.n	8000bce <ESPRxDecoder+0x216>
			 {
				bufferptr=5;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <ESPRxDecoder+0x280>)
 8000bc8:	2205      	movs	r2, #5
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e0a2      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[5])&&(bufferptr==5))
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000bd0:	795b      	ldrb	r3, [r3, #5]
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d107      	bne.n	8000be8 <ESPRxDecoder+0x230>
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <ESPRxDecoder+0x280>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	d103      	bne.n	8000be8 <ESPRxDecoder+0x230>
			 {
				bufferptr=6;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <ESPRxDecoder+0x280>)
 8000be2:	2206      	movs	r2, #6
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e095      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[6])&&(bufferptr==6))
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d107      	bne.n	8000c02 <ESPRxDecoder+0x24a>
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <ESPRxDecoder+0x280>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d103      	bne.n	8000c02 <ESPRxDecoder+0x24a>
			 {
				bufferptr=7;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <ESPRxDecoder+0x280>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e088      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[7])&&(bufferptr==7))
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000c04:	79db      	ldrb	r3, [r3, #7]
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d107      	bne.n	8000c1c <ESPRxDecoder+0x264>
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <ESPRxDecoder+0x280>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b07      	cmp	r3, #7
 8000c12:	d103      	bne.n	8000c1c <ESPRxDecoder+0x264>
			 {
				bufferptr=8;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <ESPRxDecoder+0x280>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e07b      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[8])&&(bufferptr==8))
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <ESPRxDecoder+0x28c>)
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d110      	bne.n	8000c48 <ESPRxDecoder+0x290>
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <ESPRxDecoder+0x280>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d10c      	bne.n	8000c48 <ESPRxDecoder+0x290>
			 {
				bufferptr=9;
 8000c2e:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <ESPRxDecoder+0x280>)
 8000c30:	2209      	movs	r2, #9
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e06e      	b.n	8000d14 <ESPRxDecoder+0x35c>
 8000c36:	bf00      	nop
 8000c38:	20000bc8 	.word	0x20000bc8
 8000c3c:	20000a01 	.word	0x20000a01
 8000c40:	20000bca 	.word	0x20000bca
 8000c44:	20000004 	.word	0x20000004
			 }
			 else if((Rxwifi_data== wifiusernamecheck[9])&&(bufferptr==9))
 8000c48:	4b8a      	ldr	r3, [pc, #552]	; (8000e74 <ESPRxDecoder+0x4bc>)
 8000c4a:	7a5b      	ldrb	r3, [r3, #9]
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d115      	bne.n	8000c7e <ESPRxDecoder+0x2c6>
 8000c52:	4b89      	ldr	r3, [pc, #548]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	d111      	bne.n	8000c7e <ESPRxDecoder+0x2c6>
			 {
				 bufferptr=0;
 8000c5a:	4b87      	ldr	r3, [pc, #540]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000c60:	4b86      	ldr	r3, [pc, #536]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000c6a:	4b85      	ldr	r3, [pc, #532]	; (8000e80 <ESPRxDecoder+0x4c8>)
 8000c6c:	2246      	movs	r2, #70	; 0x46
 8000c6e:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000c70:	4b84      	ldr	r3, [pc, #528]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000c76:	4b84      	ldr	r3, [pc, #528]	; (8000e88 <ESPRxDecoder+0x4d0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e04a      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[10])&&(bufferptr==10))
 8000c7e:	4b7d      	ldr	r3, [pc, #500]	; (8000e74 <ESPRxDecoder+0x4bc>)
 8000c80:	7a9b      	ldrb	r3, [r3, #10]
 8000c82:	79fa      	ldrb	r2, [r7, #7]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d107      	bne.n	8000c98 <ESPRxDecoder+0x2e0>
 8000c88:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b0a      	cmp	r3, #10
 8000c8e:	d103      	bne.n	8000c98 <ESPRxDecoder+0x2e0>
			 {
				bufferptr=11;
 8000c90:	4b79      	ldr	r3, [pc, #484]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000c92:	220b      	movs	r2, #11
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e03d      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data== wifiusernamecheck[11])&&(bufferptr==11))
 8000c98:	4b76      	ldr	r3, [pc, #472]	; (8000e74 <ESPRxDecoder+0x4bc>)
 8000c9a:	7adb      	ldrb	r3, [r3, #11]
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d115      	bne.n	8000cce <ESPRxDecoder+0x316>
 8000ca2:	4b75      	ldr	r3, [pc, #468]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b0b      	cmp	r3, #11
 8000ca8:	d111      	bne.n	8000cce <ESPRxDecoder+0x316>
			 {
				//bufferptr=12;
				bufferptr=0;
 8000caa:	4b73      	ldr	r3, [pc, #460]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000cb0:	4b72      	ldr	r3, [pc, #456]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000cba:	4b71      	ldr	r3, [pc, #452]	; (8000e80 <ESPRxDecoder+0x4c8>)
 8000cbc:	2246      	movs	r2, #70	; 0x46
 8000cbe:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000cc0:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000cc6:	4b70      	ldr	r3, [pc, #448]	; (8000e88 <ESPRxDecoder+0x4d0>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e022      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data=='A')&&(bufferptr==12))
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b41      	cmp	r3, #65	; 0x41
 8000cd2:	d107      	bne.n	8000ce4 <ESPRxDecoder+0x32c>
 8000cd4:	4b68      	ldr	r3, [pc, #416]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b0c      	cmp	r3, #12
 8000cda:	d103      	bne.n	8000ce4 <ESPRxDecoder+0x32c>
			 {
				bufferptr=13;
 8000cdc:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000cde:	220d      	movs	r2, #13
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e017      	b.n	8000d14 <ESPRxDecoder+0x35c>
			 }
			 else if((Rxwifi_data=='X')&&(bufferptr==13))
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b58      	cmp	r3, #88	; 0x58
 8000ce8:	d114      	bne.n	8000d14 <ESPRxDecoder+0x35c>
 8000cea:	4b63      	ldr	r3, [pc, #396]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b0d      	cmp	r3, #13
 8000cf0:	d110      	bne.n	8000d14 <ESPRxDecoder+0x35c>
				 {
				bufferptr=0;
 8000cf2:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000d02:	4b5f      	ldr	r3, [pc, #380]	; (8000e80 <ESPRxDecoder+0x4c8>)
 8000d04:	2246      	movs	r2, #70	; 0x46
 8000d06:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000d08:	4b5e      	ldr	r3, [pc, #376]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000d0e:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <ESPRxDecoder+0x4d0>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 2;
			 }



			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b4e      	cmp	r3, #78	; 0x4e
 8000d18:	d107      	bne.n	8000d2a <ESPRxDecoder+0x372>
 8000d1a:	4b58      	ldr	r3, [pc, #352]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d103      	bne.n	8000d2a <ESPRxDecoder+0x372>
			 {
			 	Err_bufferptr=1;
 8000d22:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e040      	b.n	8000dac <ESPRxDecoder+0x3f4>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b6f      	cmp	r3, #111	; 0x6f
 8000d2e:	d107      	bne.n	8000d40 <ESPRxDecoder+0x388>
 8000d30:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d103      	bne.n	8000d40 <ESPRxDecoder+0x388>
			 {
			 	Err_bufferptr=2;
 8000d38:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e035      	b.n	8000dac <ESPRxDecoder+0x3f4>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b41      	cmp	r3, #65	; 0x41
 8000d44:	d107      	bne.n	8000d56 <ESPRxDecoder+0x39e>
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d103      	bne.n	8000d56 <ESPRxDecoder+0x39e>
			 {
			 	Err_bufferptr=3;
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e02a      	b.n	8000dac <ESPRxDecoder+0x3f4>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b50      	cmp	r3, #80	; 0x50
 8000d5a:	f040 87b7 	bne.w	8001ccc <ESPRxDecoder+0x1314>
 8000d5e:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	f040 87b2 	bne.w	8001ccc <ESPRxDecoder+0x1314>
			 {
			 	Err_bufferptr=0;
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <ESPRxDecoder+0x4c4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000d6e:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <ESPRxDecoder+0x4d0>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d804      	bhi.n	8000d9c <ESPRxDecoder+0x3e4>
				{
				   wifi_command=50;
 8000d92:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <ESPRxDecoder+0x4c8>)
 8000d94:	2232      	movs	r2, #50	; 0x32
 8000d96:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 8000d98:	f000 bf98 	b.w	8001ccc <ESPRxDecoder+0x1314>
				   wifi_command=10;
 8000d9c:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <ESPRxDecoder+0x4c8>)
 8000d9e:	220a      	movs	r2, #10
 8000da0:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <ESPRxDecoder+0x4cc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		break;
 8000da8:	f000 bf90 	b.w	8001ccc <ESPRxDecoder+0x1314>
 8000dac:	f000 bf8e 	b.w	8001ccc <ESPRxDecoder+0x1314>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b4f      	cmp	r3, #79	; 0x4f
 8000db4:	d108      	bne.n	8000dc8 <ESPRxDecoder+0x410>
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d104      	bne.n	8000dc8 <ESPRxDecoder+0x410>
			 {
			 	bufferptr=1;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 8000dc4:	f000 bf84 	b.w	8001cd0 <ESPRxDecoder+0x1318>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b4b      	cmp	r3, #75	; 0x4b
 8000dcc:	f040 8780 	bne.w	8001cd0 <ESPRxDecoder+0x1318>
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	f040 877b 	bne.w	8001cd0 <ESPRxDecoder+0x1318>
			 	bufferptr=0;
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <ESPRxDecoder+0x4c8>)
 8000de6:	2250      	movs	r2, #80	; 0x50
 8000de8:	701a      	strb	r2, [r3, #0]
		break;
 8000dea:	f000 bf71 	b.w	8001cd0 <ESPRxDecoder+0x1318>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b43      	cmp	r3, #67	; 0x43
 8000df2:	d107      	bne.n	8000e04 <ESPRxDecoder+0x44c>
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d103      	bne.n	8000e04 <ESPRxDecoder+0x44c>
			 {
			 	bufferptr=1;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e05b      	b.n	8000ebc <ESPRxDecoder+0x504>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b4f      	cmp	r3, #79	; 0x4f
 8000e08:	d107      	bne.n	8000e1a <ESPRxDecoder+0x462>
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d103      	bne.n	8000e1a <ESPRxDecoder+0x462>
			 {
			 	bufferptr=2;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e050      	b.n	8000ebc <ESPRxDecoder+0x504>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b4e      	cmp	r3, #78	; 0x4e
 8000e1e:	d107      	bne.n	8000e30 <ESPRxDecoder+0x478>
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d103      	bne.n	8000e30 <ESPRxDecoder+0x478>
			 {
			 	bufferptr=3;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e045      	b.n	8000ebc <ESPRxDecoder+0x504>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b4e      	cmp	r3, #78	; 0x4e
 8000e34:	d107      	bne.n	8000e46 <ESPRxDecoder+0x48e>
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d103      	bne.n	8000e46 <ESPRxDecoder+0x48e>
			 {
			 	bufferptr=4;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e40:	2204      	movs	r2, #4
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e03a      	b.n	8000ebc <ESPRxDecoder+0x504>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b45      	cmp	r3, #69	; 0x45
 8000e4a:	d107      	bne.n	8000e5c <ESPRxDecoder+0x4a4>
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d103      	bne.n	8000e5c <ESPRxDecoder+0x4a4>
			 {
			 	bufferptr=5;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e56:	2205      	movs	r2, #5
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e02f      	b.n	8000ebc <ESPRxDecoder+0x504>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b43      	cmp	r3, #67	; 0x43
 8000e60:	d114      	bne.n	8000e8c <ESPRxDecoder+0x4d4>
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	d110      	bne.n	8000e8c <ESPRxDecoder+0x4d4>
			 {
			 	bufferptr=6;
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <ESPRxDecoder+0x4c0>)
 8000e6c:	2206      	movs	r2, #6
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e024      	b.n	8000ebc <ESPRxDecoder+0x504>
 8000e72:	bf00      	nop
 8000e74:	20000004 	.word	0x20000004
 8000e78:	20000bc8 	.word	0x20000bc8
 8000e7c:	200000eb 	.word	0x200000eb
 8000e80:	20000a01 	.word	0x20000a01
 8000e84:	20000110 	.word	0x20000110
 8000e88:	200000ec 	.word	0x200000ec
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b54      	cmp	r3, #84	; 0x54
 8000e90:	d114      	bne.n	8000ebc <ESPRxDecoder+0x504>
 8000e92:	4b9a      	ldr	r3, [pc, #616]	; (80010fc <ESPRxDecoder+0x744>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d110      	bne.n	8000ebc <ESPRxDecoder+0x504>
			 {
			 	Rxseqdecoder=0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000e9e:	4b98      	ldr	r3, [pc, #608]	; (8001100 <ESPRxDecoder+0x748>)
 8000ea0:	225a      	movs	r2, #90	; 0x5a
 8000ea2:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000ea4:	4b95      	ldr	r3, [pc, #596]	; (80010fc <ESPRxDecoder+0x744>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000eaa:	4b96      	ldr	r3, [pc, #600]	; (8001104 <ESPRxDecoder+0x74c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 8000eb0:	4b95      	ldr	r3, [pc, #596]	; (8001108 <ESPRxDecoder+0x750>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 8000eb6:	4b95      	ldr	r3, [pc, #596]	; (800110c <ESPRxDecoder+0x754>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec0:	d107      	bne.n	8000ed2 <ESPRxDecoder+0x51a>
 8000ec2:	4b8e      	ldr	r3, [pc, #568]	; (80010fc <ESPRxDecoder+0x744>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <ESPRxDecoder+0x51a>
			 {
			 	bufferptr=1;
 8000eca:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <ESPRxDecoder+0x744>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e040      	b.n	8000f54 <ESPRxDecoder+0x59c>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b69      	cmp	r3, #105	; 0x69
 8000ed6:	d107      	bne.n	8000ee8 <ESPRxDecoder+0x530>
 8000ed8:	4b88      	ldr	r3, [pc, #544]	; (80010fc <ESPRxDecoder+0x744>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d103      	bne.n	8000ee8 <ESPRxDecoder+0x530>
			 {
			 	bufferptr=2;
 8000ee0:	4b86      	ldr	r3, [pc, #536]	; (80010fc <ESPRxDecoder+0x744>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e035      	b.n	8000f54 <ESPRxDecoder+0x59c>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b6e      	cmp	r3, #110	; 0x6e
 8000eec:	d107      	bne.n	8000efe <ESPRxDecoder+0x546>
 8000eee:	4b83      	ldr	r3, [pc, #524]	; (80010fc <ESPRxDecoder+0x744>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d103      	bne.n	8000efe <ESPRxDecoder+0x546>
			 {
			 	bufferptr=3;
 8000ef6:	4b81      	ldr	r3, [pc, #516]	; (80010fc <ESPRxDecoder+0x744>)
 8000ef8:	2203      	movs	r2, #3
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e02a      	b.n	8000f54 <ESPRxDecoder+0x59c>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b6b      	cmp	r3, #107	; 0x6b
 8000f02:	d107      	bne.n	8000f14 <ESPRxDecoder+0x55c>
 8000f04:	4b7d      	ldr	r3, [pc, #500]	; (80010fc <ESPRxDecoder+0x744>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d103      	bne.n	8000f14 <ESPRxDecoder+0x55c>
			 {
			 	bufferptr=4;
 8000f0c:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <ESPRxDecoder+0x744>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e01f      	b.n	8000f54 <ESPRxDecoder+0x59c>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b65      	cmp	r3, #101	; 0x65
 8000f18:	d107      	bne.n	8000f2a <ESPRxDecoder+0x572>
 8000f1a:	4b78      	ldr	r3, [pc, #480]	; (80010fc <ESPRxDecoder+0x744>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d103      	bne.n	8000f2a <ESPRxDecoder+0x572>
			 {
			 	bufferptr=5;
 8000f22:	4b76      	ldr	r3, [pc, #472]	; (80010fc <ESPRxDecoder+0x744>)
 8000f24:	2205      	movs	r2, #5
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e014      	b.n	8000f54 <ESPRxDecoder+0x59c>
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d111      	bne.n	8000f54 <ESPRxDecoder+0x59c>
 8000f30:	4b72      	ldr	r3, [pc, #456]	; (80010fc <ESPRxDecoder+0x744>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d10d      	bne.n	8000f54 <ESPRxDecoder+0x59c>
			 {
			 	Rxseqdecoder=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000f3c:	4b70      	ldr	r3, [pc, #448]	; (8001100 <ESPRxDecoder+0x748>)
 8000f3e:	225a      	movs	r2, #90	; 0x5a
 8000f40:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000f42:	4b6e      	ldr	r3, [pc, #440]	; (80010fc <ESPRxDecoder+0x744>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000f48:	4b6e      	ldr	r3, [pc, #440]	; (8001104 <ESPRxDecoder+0x74c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <ESPRxDecoder+0x750>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b45      	cmp	r3, #69	; 0x45
 8000f58:	d107      	bne.n	8000f6a <ESPRxDecoder+0x5b2>
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <ESPRxDecoder+0x750>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <ESPRxDecoder+0x5b2>
			 {
			 	Err_bufferptr=1;
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <ESPRxDecoder+0x750>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e04b      	b.n	8001002 <ESPRxDecoder+0x64a>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b52      	cmp	r3, #82	; 0x52
 8000f6e:	d107      	bne.n	8000f80 <ESPRxDecoder+0x5c8>
 8000f70:	4b65      	ldr	r3, [pc, #404]	; (8001108 <ESPRxDecoder+0x750>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d103      	bne.n	8000f80 <ESPRxDecoder+0x5c8>
			 {
			 	Err_bufferptr=2;
 8000f78:	4b63      	ldr	r3, [pc, #396]	; (8001108 <ESPRxDecoder+0x750>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e040      	b.n	8001002 <ESPRxDecoder+0x64a>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b52      	cmp	r3, #82	; 0x52
 8000f84:	d107      	bne.n	8000f96 <ESPRxDecoder+0x5de>
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <ESPRxDecoder+0x750>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d103      	bne.n	8000f96 <ESPRxDecoder+0x5de>
			 {
			 	Err_bufferptr=3;
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <ESPRxDecoder+0x750>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e035      	b.n	8001002 <ESPRxDecoder+0x64a>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b4f      	cmp	r3, #79	; 0x4f
 8000f9a:	d107      	bne.n	8000fac <ESPRxDecoder+0x5f4>
 8000f9c:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <ESPRxDecoder+0x750>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d103      	bne.n	8000fac <ESPRxDecoder+0x5f4>
			 {
			 	Err_bufferptr=4;
 8000fa4:	4b58      	ldr	r3, [pc, #352]	; (8001108 <ESPRxDecoder+0x750>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	e02a      	b.n	8001002 <ESPRxDecoder+0x64a>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b52      	cmp	r3, #82	; 0x52
 8000fb0:	f040 8690 	bne.w	8001cd4 <ESPRxDecoder+0x131c>
 8000fb4:	4b54      	ldr	r3, [pc, #336]	; (8001108 <ESPRxDecoder+0x750>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	f040 868b 	bne.w	8001cd4 <ESPRxDecoder+0x131c>
			 {
			   	Err_bufferptr=0;
 8000fbe:	4b52      	ldr	r3, [pc, #328]	; (8001108 <ESPRxDecoder+0x750>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <ESPRxDecoder+0x744>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8000fce:	4b4f      	ldr	r3, [pc, #316]	; (800110c <ESPRxDecoder+0x754>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <ESPRxDecoder+0x74c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b49      	ldr	r3, [pc, #292]	; (8001104 <ESPRxDecoder+0x74c>)
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <ESPRxDecoder+0x74c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d804      	bhi.n	8000ff2 <ESPRxDecoder+0x63a>
				{
				   wifi_command=80;
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <ESPRxDecoder+0x748>)
 8000fea:	2250      	movs	r2, #80	; 0x50
 8000fec:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 8000fee:	f000 be71 	b.w	8001cd4 <ESPRxDecoder+0x131c>
				   wifi_command=50;	 // modified by satheesh
 8000ff2:	4b43      	ldr	r3, [pc, #268]	; (8001100 <ESPRxDecoder+0x748>)
 8000ff4:	2232      	movs	r2, #50	; 0x32
 8000ff6:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <ESPRxDecoder+0x74c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
		break;
 8000ffe:	f000 be69 	b.w	8001cd4 <ESPRxDecoder+0x131c>
 8001002:	f000 be67 	b.w	8001cd4 <ESPRxDecoder+0x131c>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b3e      	cmp	r3, #62	; 0x3e
 800100a:	f040 8665 	bne.w	8001cd8 <ESPRxDecoder+0x1320>
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <ESPRxDecoder+0x744>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 8660 	bne.w	8001cd8 <ESPRxDecoder+0x1320>
			 {
			 	bufferptr=0;
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <ESPRxDecoder+0x744>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 800101e:	2300      	movs	r3, #0
 8001020:	71bb      	strb	r3, [r7, #6]
				wifi_command=100;
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <ESPRxDecoder+0x748>)
 8001024:	2264      	movs	r2, #100	; 0x64
 8001026:	701a      	strb	r2, [r3, #0]
			 }
		break;
 8001028:	f000 be56 	b.w	8001cd8 <ESPRxDecoder+0x1320>
		case 7:
			checkbuff[refinc]= Rxwifi_data;
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <ESPRxDecoder+0x758>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	4a38      	ldr	r2, [pc, #224]	; (8001114 <ESPRxDecoder+0x75c>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	5453      	strb	r3, [r2, r1]
			refinc++;
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <ESPRxDecoder+0x758>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <ESPRxDecoder+0x758>)
 8001042:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b24      	cmp	r3, #36	; 0x24
 8001048:	d10b      	bne.n	8001062 <ESPRxDecoder+0x6aa>
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <ESPRxDecoder+0x760>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d107      	bne.n	8001062 <ESPRxDecoder+0x6aa>
			{
				 Data_bufferptr=1;
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <ESPRxDecoder+0x760>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
				 Valid_DataWifi1= 1;
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <ESPRxDecoder+0x764>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	f000 bcba 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==1)
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <ESPRxDecoder+0x760>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10c      	bne.n	8001084 <ESPRxDecoder+0x6cc>
			 {
				Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fe45 	bl	8001cfc <DecToASCIIFun>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <ESPRxDecoder+0x768>)
 8001078:	701a      	strb	r2, [r3, #0]
				Data_bufferptr=2;
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <ESPRxDecoder+0x760>)
 800107c:	2202      	movs	r2, #2
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	f000 bca9 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==2)
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <ESPRxDecoder+0x760>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d10c      	bne.n	80010a6 <ESPRxDecoder+0x6ee>
			{
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fe34 	bl	8001cfc <DecToASCIIFun>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <ESPRxDecoder+0x768>)
 800109a:	705a      	strb	r2, [r3, #1]
				 Data_bufferptr=3;
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <ESPRxDecoder+0x760>)
 800109e:	2203      	movs	r2, #3
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	f000 bc98 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==3)//,
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <ESPRxDecoder+0x760>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d10c      	bne.n	80010c8 <ESPRxDecoder+0x710>
			{
				 Data_bufferptr=4;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <ESPRxDecoder+0x760>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);//cyclic time
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fe20 	bl	8001cfc <DecToASCIIFun>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <ESPRxDecoder+0x768>)
 80010c2:	709a      	strb	r2, [r3, #2]
 80010c4:	f000 bc87 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==4)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <ESPRxDecoder+0x760>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d104      	bne.n	80010da <ESPRxDecoder+0x722>
			{
				 Data_bufferptr=5;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <ESPRxDecoder+0x760>)
 80010d2:	2205      	movs	r2, #5
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	f000 bc7e 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==5)
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <ESPRxDecoder+0x760>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d120      	bne.n	8001124 <ESPRxDecoder+0x76c>
			{
				Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fe09 	bl	8001cfc <DecToASCIIFun>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <ESPRxDecoder+0x768>)
 80010f0:	70da      	strb	r2, [r3, #3]
				 Data_bufferptr=6;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <ESPRxDecoder+0x760>)
 80010f4:	2206      	movs	r2, #6
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	f000 bc6d 	b.w	80019d6 <ESPRxDecoder+0x101e>
 80010fc:	20000bc8 	.word	0x20000bc8
 8001100:	20000a01 	.word	0x20000a01
 8001104:	20000110 	.word	0x20000110
 8001108:	200000eb 	.word	0x200000eb
 800110c:	200000ec 	.word	0x200000ec
 8001110:	200001e0 	.word	0x200001e0
 8001114:	20000118 	.word	0x20000118
 8001118:	200000ea 	.word	0x200000ea
 800111c:	200000f0 	.word	0x200000f0
 8001120:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==6)
 8001124:	4ba6      	ldr	r3, [pc, #664]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b06      	cmp	r3, #6
 800112a:	d10c      	bne.n	8001146 <ESPRxDecoder+0x78e>
			{
				Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);//date
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fde4 	bl	8001cfc <DecToASCIIFun>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4ba2      	ldr	r3, [pc, #648]	; (80013c4 <ESPRxDecoder+0xa0c>)
 800113a:	711a      	strb	r2, [r3, #4]
				Data_bufferptr=7;
 800113c:	4ba0      	ldr	r3, [pc, #640]	; (80013c0 <ESPRxDecoder+0xa08>)
 800113e:	2207      	movs	r2, #7
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	f000 bc48 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==7)// '/'
 8001146:	4b9e      	ldr	r3, [pc, #632]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d104      	bne.n	8001158 <ESPRxDecoder+0x7a0>
			{
				 Data_bufferptr=8;
 800114e:	4b9c      	ldr	r3, [pc, #624]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001150:	2208      	movs	r2, #8
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	f000 bc3f 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==8)
 8001158:	4b99      	ldr	r3, [pc, #612]	; (80013c0 <ESPRxDecoder+0xa08>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b08      	cmp	r3, #8
 800115e:	d10c      	bne.n	800117a <ESPRxDecoder+0x7c2>
			{
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fdca 	bl	8001cfc <DecToASCIIFun>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b95      	ldr	r3, [pc, #596]	; (80013c4 <ESPRxDecoder+0xa0c>)
 800116e:	715a      	strb	r2, [r3, #5]
				 Data_bufferptr=9;
 8001170:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001172:	2209      	movs	r2, #9
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	f000 bc2e 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==9)
 800117a:	4b91      	ldr	r3, [pc, #580]	; (80013c0 <ESPRxDecoder+0xa08>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b09      	cmp	r3, #9
 8001180:	d10c      	bne.n	800119c <ESPRxDecoder+0x7e4>
			{
				Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fdb9 	bl	8001cfc <DecToASCIIFun>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b8d      	ldr	r3, [pc, #564]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001190:	719a      	strb	r2, [r3, #6]
				 Data_bufferptr=10;//month
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001194:	220a      	movs	r2, #10
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	f000 bc1d 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==10)
 800119c:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <ESPRxDecoder+0xa08>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d104      	bne.n	80011ae <ESPRxDecoder+0x7f6>
			{
				 Data_bufferptr=11;//month
 80011a4:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011a6:	220b      	movs	r2, #11
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	f000 bc14 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}

			else if(Data_bufferptr==11)// '/'
 80011ae:	4b84      	ldr	r3, [pc, #528]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b0b      	cmp	r3, #11
 80011b4:	d10c      	bne.n	80011d0 <ESPRxDecoder+0x818>
			 {
				Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fd9f 	bl	8001cfc <DecToASCIIFun>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <ESPRxDecoder+0xa0c>)
 80011c4:	71da      	strb	r2, [r3, #7]
				Data_bufferptr=12;
 80011c6:	4b7e      	ldr	r3, [pc, #504]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011c8:	220c      	movs	r2, #12
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	f000 bc03 	b.w	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==12)////year
 80011d0:	4b7b      	ldr	r3, [pc, #492]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d10b      	bne.n	80011f0 <ESPRxDecoder+0x838>
			{
				Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fd8e 	bl	8001cfc <DecToASCIIFun>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b77      	ldr	r3, [pc, #476]	; (80013c4 <ESPRxDecoder+0xa0c>)
 80011e6:	721a      	strb	r2, [r3, #8]
				 Data_bufferptr=13;
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011ea:	220d      	movs	r2, #13
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e3f2      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==13)//_
 80011f0:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b0d      	cmp	r3, #13
 80011f6:	d103      	bne.n	8001200 <ESPRxDecoder+0x848>
			{

				 Data_bufferptr=14;
 80011f8:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <ESPRxDecoder+0xa08>)
 80011fa:	220e      	movs	r2, #14
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e3ea      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==14)//
 8001200:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b0e      	cmp	r3, #14
 8001206:	d10b      	bne.n	8001220 <ESPRxDecoder+0x868>
			{
				Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fd76 	bl	8001cfc <DecToASCIIFun>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001216:	725a      	strb	r2, [r3, #9]
				Data_bufferptr=15;
 8001218:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <ESPRxDecoder+0xa08>)
 800121a:	220f      	movs	r2, #15
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e3da      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==15)
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d10b      	bne.n	8001240 <ESPRxDecoder+0x888>
			{
				Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fd66 	bl	8001cfc <DecToASCIIFun>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001236:	729a      	strb	r2, [r3, #10]
				Data_bufferptr=16;
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <ESPRxDecoder+0xa08>)
 800123a:	2210      	movs	r2, #16
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	e3ca      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}

			else if(Data_bufferptr==16)
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d103      	bne.n	8001250 <ESPRxDecoder+0x898>
			 {

				Data_bufferptr=17;//hour
 8001248:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <ESPRxDecoder+0xa08>)
 800124a:	2211      	movs	r2, #17
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e3c2      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==17)//:
 8001250:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b11      	cmp	r3, #17
 8001256:	d10b      	bne.n	8001270 <ESPRxDecoder+0x8b8>
			{
				Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fd4e 	bl	8001cfc <DecToASCIIFun>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001266:	72da      	strb	r2, [r3, #11]
				 Data_bufferptr=18;//minute
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <ESPRxDecoder+0xa08>)
 800126a:	2212      	movs	r2, #18
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e3b2      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==18)
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b12      	cmp	r3, #18
 8001276:	d10b      	bne.n	8001290 <ESPRxDecoder+0x8d8>
			{
				Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fd3e 	bl	8001cfc <DecToASCIIFun>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001286:	731a      	strb	r2, [r3, #12]
				Data_bufferptr=19;
 8001288:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <ESPRxDecoder+0xa08>)
 800128a:	2213      	movs	r2, #19
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e3a2      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==19)
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b13      	cmp	r3, #19
 8001296:	d103      	bne.n	80012a0 <ESPRxDecoder+0x8e8>
			{

				 Data_bufferptr=20;
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <ESPRxDecoder+0xa08>)
 800129a:	2214      	movs	r2, #20
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e39a      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==20)//:
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b14      	cmp	r3, #20
 80012a6:	d10b      	bne.n	80012c0 <ESPRxDecoder+0x908>
			{
				Data_bufferptr=21;
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012aa:	2215      	movs	r2, #21
 80012ac:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fd23 	bl	8001cfc <DecToASCIIFun>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <ESPRxDecoder+0xa0c>)
 80012bc:	735a      	strb	r2, [r3, #13]
 80012be:	e38a      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}

			else if(Data_bufferptr==21)       	//seconds
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b15      	cmp	r3, #21
 80012c6:	d10b      	bne.n	80012e0 <ESPRxDecoder+0x928>
			 {
				Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fd16 	bl	8001cfc <DecToASCIIFun>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <ESPRxDecoder+0xa0c>)
 80012d6:	739a      	strb	r2, [r3, #14]
				Data_bufferptr=22;
 80012d8:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012da:	2216      	movs	r2, #22
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e37a      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==22)
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b16      	cmp	r3, #22
 80012e6:	d103      	bne.n	80012f0 <ESPRxDecoder+0x938>
			{

				 Data_bufferptr=23;
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012ea:	2217      	movs	r2, #23
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e372      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==23)      //,(to seperate data)
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b17      	cmp	r3, #23
 80012f6:	d10b      	bne.n	8001310 <ESPRxDecoder+0x958>
			{
				 Data_bufferptr=24;
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <ESPRxDecoder+0xa08>)
 80012fa:	2218      	movs	r2, #24
 80012fc:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fcfb 	bl	8001cfc <DecToASCIIFun>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <ESPRxDecoder+0xa0c>)
 800130c:	73da      	strb	r2, [r3, #15]
 800130e:	e362      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==24)
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b18      	cmp	r3, #24
 8001316:	d10b      	bne.n	8001330 <ESPRxDecoder+0x978>
			{
				Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fcee 	bl	8001cfc <DecToASCIIFun>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001326:	741a      	strb	r2, [r3, #16]
				 Data_bufferptr=25;
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <ESPRxDecoder+0xa08>)
 800132a:	2219      	movs	r2, #25
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e352      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==25)
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b19      	cmp	r3, #25
 8001336:	d10b      	bne.n	8001350 <ESPRxDecoder+0x998>
			{
				Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fcde 	bl	8001cfc <DecToASCIIFun>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001346:	745a      	strb	r2, [r3, #17]
				 Data_bufferptr=26;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <ESPRxDecoder+0xa08>)
 800134a:	221a      	movs	r2, #26
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e342      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==26)
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b1a      	cmp	r3, #26
 8001356:	d10b      	bne.n	8001370 <ESPRxDecoder+0x9b8>
			{
				 Data_bufferptr=27;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <ESPRxDecoder+0xa08>)
 800135a:	221b      	movs	r2, #27
 800135c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fccb 	bl	8001cfc <DecToASCIIFun>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <ESPRxDecoder+0xa0c>)
 800136c:	749a      	strb	r2, [r3, #18]
 800136e:	e332      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==27)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b1b      	cmp	r3, #27
 8001376:	d10b      	bne.n	8001390 <ESPRxDecoder+0x9d8>
			 {
				Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fcbe 	bl	8001cfc <DecToASCIIFun>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <ESPRxDecoder+0xa0c>)
 8001386:	74da      	strb	r2, [r3, #19]
				Data_bufferptr=28;//production
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <ESPRxDecoder+0xa08>)
 800138a:	221c      	movs	r2, #28
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e322      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==28)//,
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <ESPRxDecoder+0xa08>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b1c      	cmp	r3, #28
 8001396:	d103      	bne.n	80013a0 <ESPRxDecoder+0x9e8>
			{

				 Data_bufferptr=29;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <ESPRxDecoder+0xa08>)
 800139a:	221d      	movs	r2, #29
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e31a      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==29)//rejection
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <ESPRxDecoder+0xa08>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b1d      	cmp	r3, #29
 80013a6:	d10f      	bne.n	80013c8 <ESPRxDecoder+0xa10>
			{
				 Data_bufferptr=30;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <ESPRxDecoder+0xa08>)
 80013aa:	221e      	movs	r2, #30
 80013ac:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fca3 	bl	8001cfc <DecToASCIIFun>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <ESPRxDecoder+0xa0c>)
 80013bc:	751a      	strb	r2, [r3, #20]
 80013be:	e30a      	b.n	80019d6 <ESPRxDecoder+0x101e>
 80013c0:	200000ea 	.word	0x200000ea
 80013c4:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==30)
 80013c8:	4ba3      	ldr	r3, [pc, #652]	; (8001658 <ESPRxDecoder+0xca0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b1e      	cmp	r3, #30
 80013ce:	d10b      	bne.n	80013e8 <ESPRxDecoder+0xa30>
			{
				Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fc92 	bl	8001cfc <DecToASCIIFun>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b9f      	ldr	r3, [pc, #636]	; (800165c <ESPRxDecoder+0xca4>)
 80013de:	755a      	strb	r2, [r3, #21]
				 Data_bufferptr=31;
 80013e0:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <ESPRxDecoder+0xca0>)
 80013e2:	221f      	movs	r2, #31
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e2f6      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==31)
 80013e8:	4b9b      	ldr	r3, [pc, #620]	; (8001658 <ESPRxDecoder+0xca0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b1f      	cmp	r3, #31
 80013ee:	d10b      	bne.n	8001408 <ESPRxDecoder+0xa50>
			{
				 Data_bufferptr=32;
 80013f0:	4b99      	ldr	r3, [pc, #612]	; (8001658 <ESPRxDecoder+0xca0>)
 80013f2:	2220      	movs	r2, #32
 80013f4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fc7f 	bl	8001cfc <DecToASCIIFun>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b96      	ldr	r3, [pc, #600]	; (800165c <ESPRxDecoder+0xca4>)
 8001404:	759a      	strb	r2, [r3, #22]
 8001406:	e2e6      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==32)
 8001408:	4b93      	ldr	r3, [pc, #588]	; (8001658 <ESPRxDecoder+0xca0>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b20      	cmp	r3, #32
 800140e:	d10b      	bne.n	8001428 <ESPRxDecoder+0xa70>
			{
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fc72 	bl	8001cfc <DecToASCIIFun>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b8f      	ldr	r3, [pc, #572]	; (800165c <ESPRxDecoder+0xca4>)
 800141e:	75da      	strb	r2, [r3, #23]
				 Data_bufferptr=33;
 8001420:	4b8d      	ldr	r3, [pc, #564]	; (8001658 <ESPRxDecoder+0xca0>)
 8001422:	2221      	movs	r2, #33	; 0x21
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e2d6      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==33)//rejection calculated in software
 8001428:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <ESPRxDecoder+0xca0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b21      	cmp	r3, #33	; 0x21
 800142e:	d10b      	bne.n	8001448 <ESPRxDecoder+0xa90>
			{
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fc62 	bl	8001cfc <DecToASCIIFun>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b87      	ldr	r3, [pc, #540]	; (800165c <ESPRxDecoder+0xca4>)
 800143e:	761a      	strb	r2, [r3, #24]
				 Data_bufferptr=34;
 8001440:	4b85      	ldr	r3, [pc, #532]	; (8001658 <ESPRxDecoder+0xca0>)
 8001442:	2222      	movs	r2, #34	; 0x22
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e2c6      	b.n	80019d6 <ESPRxDecoder+0x101e>
		/*		RefreshBlockInfo = 0;
				RxCompleteU2C1WIFI=1;
				Updatetimeinfo=1;*/
			}
			else if(Data_bufferptr==34)      //,
 8001448:	4b83      	ldr	r3, [pc, #524]	; (8001658 <ESPRxDecoder+0xca0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b22      	cmp	r3, #34	; 0x22
 800144e:	d103      	bne.n	8001458 <ESPRxDecoder+0xaa0>
			{
				Data_bufferptr=35;
 8001450:	4b81      	ldr	r3, [pc, #516]	; (8001658 <ESPRxDecoder+0xca0>)
 8001452:	2223      	movs	r2, #35	; 0x23
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	e2be      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==35)      //batchTargetquantity
 8001458:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <ESPRxDecoder+0xca0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b23      	cmp	r3, #35	; 0x23
 800145e:	d10b      	bne.n	8001478 <ESPRxDecoder+0xac0>
			 {
				Data_bufferptr=36;
 8001460:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <ESPRxDecoder+0xca0>)
 8001462:	2224      	movs	r2, #36	; 0x24
 8001464:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fc47 	bl	8001cfc <DecToASCIIFun>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b7a      	ldr	r3, [pc, #488]	; (800165c <ESPRxDecoder+0xca4>)
 8001474:	765a      	strb	r2, [r3, #25]
 8001476:	e2ae      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==36)
 8001478:	4b77      	ldr	r3, [pc, #476]	; (8001658 <ESPRxDecoder+0xca0>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b24      	cmp	r3, #36	; 0x24
 800147e:	d10b      	bne.n	8001498 <ESPRxDecoder+0xae0>
			 {
				Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fc3a 	bl	8001cfc <DecToASCIIFun>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b73      	ldr	r3, [pc, #460]	; (800165c <ESPRxDecoder+0xca4>)
 800148e:	769a      	strb	r2, [r3, #26]
				Data_bufferptr=37;
 8001490:	4b71      	ldr	r3, [pc, #452]	; (8001658 <ESPRxDecoder+0xca0>)
 8001492:	2225      	movs	r2, #37	; 0x25
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e29e      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==37)
 8001498:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <ESPRxDecoder+0xca0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b25      	cmp	r3, #37	; 0x25
 800149e:	d10b      	bne.n	80014b8 <ESPRxDecoder+0xb00>
			{
				Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fc2a 	bl	8001cfc <DecToASCIIFun>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b6b      	ldr	r3, [pc, #428]	; (800165c <ESPRxDecoder+0xca4>)
 80014ae:	76da      	strb	r2, [r3, #27]
				Data_bufferptr=38;
 80014b0:	4b69      	ldr	r3, [pc, #420]	; (8001658 <ESPRxDecoder+0xca0>)
 80014b2:	2226      	movs	r2, #38	; 0x26
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e28e      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==38)
 80014b8:	4b67      	ldr	r3, [pc, #412]	; (8001658 <ESPRxDecoder+0xca0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b26      	cmp	r3, #38	; 0x26
 80014be:	d10b      	bne.n	80014d8 <ESPRxDecoder+0xb20>
			{
				Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fc1a 	bl	8001cfc <DecToASCIIFun>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b63      	ldr	r3, [pc, #396]	; (800165c <ESPRxDecoder+0xca4>)
 80014ce:	771a      	strb	r2, [r3, #28]
				Data_bufferptr=39;
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <ESPRxDecoder+0xca0>)
 80014d2:	2227      	movs	r2, #39	; 0x27
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e27e      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==39)
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <ESPRxDecoder+0xca0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b27      	cmp	r3, #39	; 0x27
 80014de:	d10b      	bne.n	80014f8 <ESPRxDecoder+0xb40>
			{
				Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fc0a 	bl	8001cfc <DecToASCIIFun>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b5b      	ldr	r3, [pc, #364]	; (800165c <ESPRxDecoder+0xca4>)
 80014ee:	775a      	strb	r2, [r3, #29]
				Data_bufferptr=40;
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <ESPRxDecoder+0xca0>)
 80014f2:	2228      	movs	r2, #40	; 0x28
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e26e      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==40)//,
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <ESPRxDecoder+0xca0>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b28      	cmp	r3, #40	; 0x28
 80014fe:	d103      	bne.n	8001508 <ESPRxDecoder+0xb50>
			{
				Data_bufferptr=41;
 8001500:	4b55      	ldr	r3, [pc, #340]	; (8001658 <ESPRxDecoder+0xca0>)
 8001502:	2229      	movs	r2, #41	; 0x29
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e266      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==41)//temperateSet
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <ESPRxDecoder+0xca0>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b29      	cmp	r3, #41	; 0x29
 800150e:	d10b      	bne.n	8001528 <ESPRxDecoder+0xb70>
			{
				Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fbf2 	bl	8001cfc <DecToASCIIFun>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b4f      	ldr	r3, [pc, #316]	; (800165c <ESPRxDecoder+0xca4>)
 800151e:	779a      	strb	r2, [r3, #30]
				Data_bufferptr=42;
 8001520:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <ESPRxDecoder+0xca0>)
 8001522:	222a      	movs	r2, #42	; 0x2a
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e256      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==42)
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <ESPRxDecoder+0xca0>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b2a      	cmp	r3, #42	; 0x2a
 800152e:	d10b      	bne.n	8001548 <ESPRxDecoder+0xb90>
			{
				Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fbe2 	bl	8001cfc <DecToASCIIFun>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b47      	ldr	r3, [pc, #284]	; (800165c <ESPRxDecoder+0xca4>)
 800153e:	77da      	strb	r2, [r3, #31]
				Data_bufferptr=43;
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <ESPRxDecoder+0xca0>)
 8001542:	222b      	movs	r2, #43	; 0x2b
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	e246      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==43)
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <ESPRxDecoder+0xca0>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b2b      	cmp	r3, #43	; 0x2b
 800154e:	d10c      	bne.n	800156a <ESPRxDecoder+0xbb2>
			{
				Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fbd2 	bl	8001cfc <DecToASCIIFun>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b3f      	ldr	r3, [pc, #252]	; (800165c <ESPRxDecoder+0xca4>)
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
				Data_bufferptr=44;
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <ESPRxDecoder+0xca0>)
 8001564:	222c      	movs	r2, #44	; 0x2c
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e235      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==44)//,
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <ESPRxDecoder+0xca0>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b2c      	cmp	r3, #44	; 0x2c
 8001570:	d103      	bne.n	800157a <ESPRxDecoder+0xbc2>
			{
				Data_bufferptr=45;
 8001572:	4b39      	ldr	r3, [pc, #228]	; (8001658 <ESPRxDecoder+0xca0>)
 8001574:	222d      	movs	r2, #45	; 0x2d
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e22d      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==45)//temperateSetHigh
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <ESPRxDecoder+0xca0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b2d      	cmp	r3, #45	; 0x2d
 8001580:	d10c      	bne.n	800159c <ESPRxDecoder+0xbe4>
			{
				Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fbb9 	bl	8001cfc <DecToASCIIFun>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <ESPRxDecoder+0xca4>)
 8001590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				Data_bufferptr=46;
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <ESPRxDecoder+0xca0>)
 8001596:	222e      	movs	r2, #46	; 0x2e
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e21c      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==46)
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <ESPRxDecoder+0xca0>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b2e      	cmp	r3, #46	; 0x2e
 80015a2:	d10c      	bne.n	80015be <ESPRxDecoder+0xc06>
			{
				Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fba8 	bl	8001cfc <DecToASCIIFun>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <ESPRxDecoder+0xca4>)
 80015b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Data_bufferptr=47;
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <ESPRxDecoder+0xca0>)
 80015b8:	222f      	movs	r2, #47	; 0x2f
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e20b      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==47)
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <ESPRxDecoder+0xca0>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b2f      	cmp	r3, #47	; 0x2f
 80015c4:	d10c      	bne.n	80015e0 <ESPRxDecoder+0xc28>
			{
				Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fb97 	bl	8001cfc <DecToASCIIFun>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <ESPRxDecoder+0xca4>)
 80015d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				Data_bufferptr=48;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <ESPRxDecoder+0xca0>)
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	e1fa      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==48)//,
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <ESPRxDecoder+0xca0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b30      	cmp	r3, #48	; 0x30
 80015e6:	d103      	bne.n	80015f0 <ESPRxDecoder+0xc38>
			{
				Data_bufferptr=49;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <ESPRxDecoder+0xca0>)
 80015ea:	2231      	movs	r2, #49	; 0x31
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e1f2      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==49)//temperateSetLow
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <ESPRxDecoder+0xca0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b31      	cmp	r3, #49	; 0x31
 80015f6:	d10c      	bne.n	8001612 <ESPRxDecoder+0xc5a>
			{
				Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fb7e 	bl	8001cfc <DecToASCIIFun>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <ESPRxDecoder+0xca4>)
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Data_bufferptr=50;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <ESPRxDecoder+0xca0>)
 800160c:	2232      	movs	r2, #50	; 0x32
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e1e1      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==50)
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <ESPRxDecoder+0xca0>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b32      	cmp	r3, #50	; 0x32
 8001618:	d10c      	bne.n	8001634 <ESPRxDecoder+0xc7c>
			{
				Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fb6d 	bl	8001cfc <DecToASCIIFun>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <ESPRxDecoder+0xca4>)
 8001628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				Data_bufferptr=51;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <ESPRxDecoder+0xca0>)
 800162e:	2233      	movs	r2, #51	; 0x33
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e1d0      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==51)
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <ESPRxDecoder+0xca0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b33      	cmp	r3, #51	; 0x33
 800163a:	d111      	bne.n	8001660 <ESPRxDecoder+0xca8>
			{
				Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb5c 	bl	8001cfc <DecToASCIIFun>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <ESPRxDecoder+0xca4>)
 800164a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				Data_bufferptr=52;
 800164e:	4b02      	ldr	r3, [pc, #8]	; (8001658 <ESPRxDecoder+0xca0>)
 8001650:	2234      	movs	r2, #52	; 0x34
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e1bf      	b.n	80019d6 <ESPRxDecoder+0x101e>
 8001656:	bf00      	nop
 8001658:	200000ea 	.word	0x200000ea
 800165c:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==52)//,
 8001660:	4ba4      	ldr	r3, [pc, #656]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b34      	cmp	r3, #52	; 0x34
 8001666:	d103      	bne.n	8001670 <ESPRxDecoder+0xcb8>
			{
				Data_bufferptr=53;
 8001668:	4ba2      	ldr	r3, [pc, #648]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800166a:	2235      	movs	r2, #53	; 0x35
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e1b2      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==53)//requirementId
 8001670:	4ba0      	ldr	r3, [pc, #640]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b35      	cmp	r3, #53	; 0x35
 8001676:	d10c      	bne.n	8001692 <ESPRxDecoder+0xcda>
			{
				Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fb3e 	bl	8001cfc <DecToASCIIFun>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	4b9c      	ldr	r3, [pc, #624]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001686:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Data_bufferptr=54;
 800168a:	4b9a      	ldr	r3, [pc, #616]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800168c:	2236      	movs	r2, #54	; 0x36
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e1a1      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==54)
 8001692:	4b98      	ldr	r3, [pc, #608]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b36      	cmp	r3, #54	; 0x36
 8001698:	d10c      	bne.n	80016b4 <ESPRxDecoder+0xcfc>
			{
				Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb2d 	bl	8001cfc <DecToASCIIFun>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <ESPRxDecoder+0xf40>)
 80016a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				Data_bufferptr=55;
 80016ac:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80016ae:	2237      	movs	r2, #55	; 0x37
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e190      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==55)
 80016b4:	4b8f      	ldr	r3, [pc, #572]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b37      	cmp	r3, #55	; 0x37
 80016ba:	d10c      	bne.n	80016d6 <ESPRxDecoder+0xd1e>
			{
				Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fb1c 	bl	8001cfc <DecToASCIIFun>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <ESPRxDecoder+0xf40>)
 80016ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				Data_bufferptr=56;
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80016d0:	2238      	movs	r2, #56	; 0x38
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e17f      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==56)
 80016d6:	4b87      	ldr	r3, [pc, #540]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b38      	cmp	r3, #56	; 0x38
 80016dc:	d10c      	bne.n	80016f8 <ESPRxDecoder+0xd40>
			{
				Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fb0b 	bl	8001cfc <DecToASCIIFun>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <ESPRxDecoder+0xf40>)
 80016ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				Data_bufferptr=57;
 80016f0:	4b80      	ldr	r3, [pc, #512]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80016f2:	2239      	movs	r2, #57	; 0x39
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e16e      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==57)
 80016f8:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b39      	cmp	r3, #57	; 0x39
 80016fe:	d10c      	bne.n	800171a <ESPRxDecoder+0xd62>
			{
				Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fafa 	bl	8001cfc <DecToASCIIFun>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <ESPRxDecoder+0xf40>)
 800170e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				Data_bufferptr=58;
 8001712:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001714:	223a      	movs	r2, #58	; 0x3a
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e15d      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==58)
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b3a      	cmp	r3, #58	; 0x3a
 8001720:	d10c      	bne.n	800173c <ESPRxDecoder+0xd84>
			{
				Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fae9 	bl	8001cfc <DecToASCIIFun>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				Data_bufferptr=59;
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001736:	223b      	movs	r2, #59	; 0x3b
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e14c      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==59)//,
 800173c:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b3b      	cmp	r3, #59	; 0x3b
 8001742:	d103      	bne.n	800174c <ESPRxDecoder+0xd94>
			{
				Data_bufferptr=60;
 8001744:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001746:	223c      	movs	r2, #60	; 0x3c
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e144      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==60)//itemNumber
 800174c:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b3c      	cmp	r3, #60	; 0x3c
 8001752:	d10c      	bne.n	800176e <ESPRxDecoder+0xdb6>
			{
				Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fad0 	bl	8001cfc <DecToASCIIFun>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001762:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Data_bufferptr=61;
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001768:	223d      	movs	r2, #61	; 0x3d
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e133      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==61)
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b3d      	cmp	r3, #61	; 0x3d
 8001774:	d10c      	bne.n	8001790 <ESPRxDecoder+0xdd8>
			{
				Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fabf 	bl	8001cfc <DecToASCIIFun>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001784:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				Data_bufferptr=62;
 8001788:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800178a:	223e      	movs	r2, #62	; 0x3e
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	e122      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==62)
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b3e      	cmp	r3, #62	; 0x3e
 8001796:	d10c      	bne.n	80017b2 <ESPRxDecoder+0xdfa>
			{
				Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 faae 	bl	8001cfc <DecToASCIIFun>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <ESPRxDecoder+0xf40>)
 80017a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				Data_bufferptr=63;
 80017aa:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80017ac:	223f      	movs	r2, #63	; 0x3f
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e111      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==63)
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b3f      	cmp	r3, #63	; 0x3f
 80017b8:	d10c      	bne.n	80017d4 <ESPRxDecoder+0xe1c>
			{
				Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fa9d 	bl	8001cfc <DecToASCIIFun>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <ESPRxDecoder+0xf40>)
 80017c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				Data_bufferptr=64;
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e100      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==64)
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b40      	cmp	r3, #64	; 0x40
 80017da:	d10c      	bne.n	80017f6 <ESPRxDecoder+0xe3e>
			{
				Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fa8c 	bl	8001cfc <DecToASCIIFun>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <ESPRxDecoder+0xf40>)
 80017ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				Data_bufferptr=65;
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80017f0:	2241      	movs	r2, #65	; 0x41
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e0ef      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==65)
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b41      	cmp	r3, #65	; 0x41
 80017fc:	d10c      	bne.n	8001818 <ESPRxDecoder+0xe60>
			{
				Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fa7b 	bl	8001cfc <DecToASCIIFun>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <ESPRxDecoder+0xf40>)
 800180c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				Data_bufferptr=66;
 8001810:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001812:	2242      	movs	r2, #66	; 0x42
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	e0de      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==66)
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b42      	cmp	r3, #66	; 0x42
 800181e:	d10c      	bne.n	800183a <ESPRxDecoder+0xe82>
			{
				Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fa6a 	bl	8001cfc <DecToASCIIFun>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <ESPRxDecoder+0xf40>)
 800182e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				Data_bufferptr=67;
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001834:	2243      	movs	r2, #67	; 0x43
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	e0cd      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==67)
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b43      	cmp	r3, #67	; 0x43
 8001840:	d10c      	bne.n	800185c <ESPRxDecoder+0xea4>
			{
				Uart_rx_buffer[52] = DecToASCIIFun(Rxwifi_data);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fa59 	bl	8001cfc <DecToASCIIFun>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				Data_bufferptr=68;
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001856:	2244      	movs	r2, #68	; 0x44
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e0bc      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==68)
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b44      	cmp	r3, #68	; 0x44
 8001862:	d10c      	bne.n	800187e <ESPRxDecoder+0xec6>
			{
				Uart_rx_buffer[53] = DecToASCIIFun(Rxwifi_data);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fa48 	bl	8001cfc <DecToASCIIFun>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				Data_bufferptr=69;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001878:	2245      	movs	r2, #69	; 0x45
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e0ab      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==69)
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <ESPRxDecoder+0xf3c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b45      	cmp	r3, #69	; 0x45
 8001884:	d10c      	bne.n	80018a0 <ESPRxDecoder+0xee8>
			{
				Uart_rx_buffer[54] = DecToASCIIFun(Rxwifi_data);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fa37 	bl	8001cfc <DecToASCIIFun>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <ESPRxDecoder+0xf40>)
 8001894:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				Data_bufferptr=70;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <ESPRxDecoder+0xf3c>)
 800189a:	2246      	movs	r2, #70	; 0x46
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e09a      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==70)//,
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b46      	cmp	r3, #70	; 0x46
 80018a6:	d103      	bne.n	80018b0 <ESPRxDecoder+0xef8>
			{
				Data_bufferptr=71;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80018aa:	2247      	movs	r2, #71	; 0x47
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e092      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==71)//batchNumber
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b47      	cmp	r3, #71	; 0x47
 80018b6:	d10c      	bne.n	80018d2 <ESPRxDecoder+0xf1a>
			{
				Uart_rx_buffer[55] = DecToASCIIFun(Rxwifi_data);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fa1e 	bl	8001cfc <DecToASCIIFun>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <ESPRxDecoder+0xf40>)
 80018c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				Data_bufferptr=72;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80018cc:	2248      	movs	r2, #72	; 0x48
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e081      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==72)
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b48      	cmp	r3, #72	; 0x48
 80018d8:	d110      	bne.n	80018fc <ESPRxDecoder+0xf44>
			{
				Uart_rx_buffer[56] = DecToASCIIFun(Rxwifi_data);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fa0d 	bl	8001cfc <DecToASCIIFun>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <ESPRxDecoder+0xf40>)
 80018e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				Data_bufferptr=73;
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <ESPRxDecoder+0xf3c>)
 80018ee:	2249      	movs	r2, #73	; 0x49
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e070      	b.n	80019d6 <ESPRxDecoder+0x101e>
 80018f4:	200000ea 	.word	0x200000ea
 80018f8:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==73)
 80018fc:	4b96      	ldr	r3, [pc, #600]	; (8001b58 <ESPRxDecoder+0x11a0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b49      	cmp	r3, #73	; 0x49
 8001902:	d10c      	bne.n	800191e <ESPRxDecoder+0xf66>
			{
				Uart_rx_buffer[57] = DecToASCIIFun(Rxwifi_data);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f9f8 	bl	8001cfc <DecToASCIIFun>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <ESPRxDecoder+0x11a4>)
 8001912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				Data_bufferptr=74;
 8001916:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001918:	224a      	movs	r2, #74	; 0x4a
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	e05b      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==74)//,
 800191e:	4b8e      	ldr	r3, [pc, #568]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b4a      	cmp	r3, #74	; 0x4a
 8001924:	d103      	bne.n	800192e <ESPRxDecoder+0xf76>
			{
				Data_bufferptr=75;
 8001926:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001928:	224b      	movs	r2, #75	; 0x4b
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e053      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==75)//resetStatus
 800192e:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b4b      	cmp	r3, #75	; 0x4b
 8001934:	d10c      	bne.n	8001950 <ESPRxDecoder+0xf98>
			{
				Uart_rx_buffer[58] = DecToASCIIFun(Rxwifi_data);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f9df 	bl	8001cfc <DecToASCIIFun>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <ESPRxDecoder+0x11a4>)
 8001944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				Data_bufferptr=76;
 8001948:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <ESPRxDecoder+0x11a0>)
 800194a:	224c      	movs	r2, #76	; 0x4c
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e042      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==76)
 8001950:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b4c      	cmp	r3, #76	; 0x4c
 8001956:	d10c      	bne.n	8001972 <ESPRxDecoder+0xfba>
			{
				Uart_rx_buffer[59] = DecToASCIIFun(Rxwifi_data);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f9ce 	bl	8001cfc <DecToASCIIFun>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b7d      	ldr	r3, [pc, #500]	; (8001b5c <ESPRxDecoder+0x11a4>)
 8001966:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				Data_bufferptr=77;
 800196a:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <ESPRxDecoder+0x11a0>)
 800196c:	224d      	movs	r2, #77	; 0x4d
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e031      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==77)//,
 8001972:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b4d      	cmp	r3, #77	; 0x4d
 8001978:	d103      	bne.n	8001982 <ESPRxDecoder+0xfca>
			{
				Data_bufferptr=78;
 800197a:	4b77      	ldr	r3, [pc, #476]	; (8001b58 <ESPRxDecoder+0x11a0>)
 800197c:	224e      	movs	r2, #78	; 0x4e
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e029      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==78)//resetStatus
 8001982:	4b75      	ldr	r3, [pc, #468]	; (8001b58 <ESPRxDecoder+0x11a0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b4e      	cmp	r3, #78	; 0x4e
 8001988:	d10c      	bne.n	80019a4 <ESPRxDecoder+0xfec>
			{
				Uart_rx_buffer[60] = DecToASCIIFun(Rxwifi_data);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f9b5 	bl	8001cfc <DecToASCIIFun>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b71      	ldr	r3, [pc, #452]	; (8001b5c <ESPRxDecoder+0x11a4>)
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				Data_bufferptr=79;
 800199c:	4b6e      	ldr	r3, [pc, #440]	; (8001b58 <ESPRxDecoder+0x11a0>)
 800199e:	224f      	movs	r2, #79	; 0x4f
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e018      	b.n	80019d6 <ESPRxDecoder+0x101e>
			}
			else if(Data_bufferptr==79)
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <ESPRxDecoder+0x11a0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b4f      	cmp	r3, #79	; 0x4f
 80019aa:	d114      	bne.n	80019d6 <ESPRxDecoder+0x101e>
			{
				Uart_rx_buffer[61] = DecToASCIIFun(Rxwifi_data);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f9a4 	bl	8001cfc <DecToASCIIFun>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <ESPRxDecoder+0x11a4>)
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				Data_bufferptr=0;
 80019be:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <ESPRxDecoder+0x11a0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 80019c4:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <ESPRxDecoder+0x11a8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 80019ca:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <ESPRxDecoder+0x11ac>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 80019d0:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <ESPRxDecoder+0x11b0>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
			}

		   if(Valid_DataWifi1)
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <ESPRxDecoder+0x11b4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 809b 	beq.w	8001b16 <ESPRxDecoder+0x115e>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b55      	cmp	r3, #85	; 0x55
 80019e4:	d107      	bne.n	80019f6 <ESPRxDecoder+0x103e>
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <ESPRxDecoder+0x11b8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <ESPRxDecoder+0x103e>
			 {
			 	bufferptr=1;
 80019ee:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <ESPRxDecoder+0x11b8>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	e040      	b.n	8001a78 <ESPRxDecoder+0x10c0>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b6e      	cmp	r3, #110	; 0x6e
 80019fa:	d107      	bne.n	8001a0c <ESPRxDecoder+0x1054>
 80019fc:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <ESPRxDecoder+0x11b8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d103      	bne.n	8001a0c <ESPRxDecoder+0x1054>
			 {
			 	bufferptr=2;
 8001a04:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e035      	b.n	8001a78 <ESPRxDecoder+0x10c0>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b6c      	cmp	r3, #108	; 0x6c
 8001a10:	d107      	bne.n	8001a22 <ESPRxDecoder+0x106a>
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d103      	bne.n	8001a22 <ESPRxDecoder+0x106a>
			 {
			    bufferptr=3;
 8001a1a:	4b55      	ldr	r3, [pc, #340]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e02a      	b.n	8001a78 <ESPRxDecoder+0x10c0>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b69      	cmp	r3, #105	; 0x69
 8001a26:	d107      	bne.n	8001a38 <ESPRxDecoder+0x1080>
 8001a28:	4b51      	ldr	r3, [pc, #324]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d103      	bne.n	8001a38 <ESPRxDecoder+0x1080>
			 {
			    bufferptr=4;
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e01f      	b.n	8001a78 <ESPRxDecoder+0x10c0>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b6e      	cmp	r3, #110	; 0x6e
 8001a3c:	d107      	bne.n	8001a4e <ESPRxDecoder+0x1096>
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d103      	bne.n	8001a4e <ESPRxDecoder+0x1096>
			 {
			    bufferptr=5;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a48:	2205      	movs	r2, #5
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e014      	b.n	8001a78 <ESPRxDecoder+0x10c0>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b6b      	cmp	r3, #107	; 0x6b
 8001a52:	d111      	bne.n	8001a78 <ESPRxDecoder+0x10c0>
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d10d      	bne.n	8001a78 <ESPRxDecoder+0x10c0>
			 {
			    bufferptr=0;
 8001a5c:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <ESPRxDecoder+0x11bc>)
 8001a68:	2266      	movs	r2, #102	; 0x66
 8001a6a:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <ESPRxDecoder+0x11c0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001a72:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <ESPRxDecoder+0x11b4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2b43      	cmp	r3, #67	; 0x43
 8001a7c:	d107      	bne.n	8001a8e <ESPRxDecoder+0x10d6>
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <ESPRxDecoder+0x10d6>
			 {
			 	bufferptr=1;
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	e0fc      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b4c      	cmp	r3, #76	; 0x4c
 8001a92:	d107      	bne.n	8001aa4 <ESPRxDecoder+0x10ec>
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d103      	bne.n	8001aa4 <ESPRxDecoder+0x10ec>
			 {
			 	bufferptr=2;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e0f1      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b4f      	cmp	r3, #79	; 0x4f
 8001aa8:	d107      	bne.n	8001aba <ESPRxDecoder+0x1102>
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d103      	bne.n	8001aba <ESPRxDecoder+0x1102>
			 {
			    bufferptr=3;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e0e6      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b53      	cmp	r3, #83	; 0x53
 8001abe:	d107      	bne.n	8001ad0 <ESPRxDecoder+0x1118>
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d103      	bne.n	8001ad0 <ESPRxDecoder+0x1118>
			 {
			    bufferptr=4;
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001aca:	2204      	movs	r2, #4
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e0db      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b45      	cmp	r3, #69	; 0x45
 8001ad4:	d107      	bne.n	8001ae6 <ESPRxDecoder+0x112e>
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d103      	bne.n	8001ae6 <ESPRxDecoder+0x112e>
			 {
			    bufferptr=5;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e0d0      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b44      	cmp	r3, #68	; 0x44
 8001aea:	f040 80f7 	bne.w	8001cdc <ESPRxDecoder+0x1324>
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	f040 80f2 	bne.w	8001cdc <ESPRxDecoder+0x1324>
			 {
			    bufferptr=0;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <ESPRxDecoder+0x11bc>)
 8001b04:	2266      	movs	r2, #102	; 0x66
 8001b06:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <ESPRxDecoder+0x11c0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <ESPRxDecoder+0x11b4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8001b14:	e0e2      	b.n	8001cdc <ESPRxDecoder+0x1324>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b55      	cmp	r3, #85	; 0x55
 8001b1a:	d107      	bne.n	8001b2c <ESPRxDecoder+0x1174>
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <ESPRxDecoder+0x1174>
			 	bufferptr=1;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e052      	b.n	8001bd2 <ESPRxDecoder+0x121a>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b6e      	cmp	r3, #110	; 0x6e
 8001b30:	d107      	bne.n	8001b42 <ESPRxDecoder+0x118a>
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d103      	bne.n	8001b42 <ESPRxDecoder+0x118a>
			 	bufferptr=2;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e047      	b.n	8001bd2 <ESPRxDecoder+0x121a>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b6c      	cmp	r3, #108	; 0x6c
 8001b46:	d119      	bne.n	8001b7c <ESPRxDecoder+0x11c4>
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d115      	bne.n	8001b7c <ESPRxDecoder+0x11c4>
			    bufferptr=3;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <ESPRxDecoder+0x11b8>)
 8001b52:	2203      	movs	r2, #3
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e03c      	b.n	8001bd2 <ESPRxDecoder+0x121a>
 8001b58:	200000ea 	.word	0x200000ea
 8001b5c:	200000a4 	.word	0x200000a4
 8001b60:	20000bd2 	.word	0x20000bd2
 8001b64:	200000ef 	.word	0x200000ef
 8001b68:	200000ee 	.word	0x200000ee
 8001b6c:	200000f0 	.word	0x200000f0
 8001b70:	20000bc8 	.word	0x20000bc8
 8001b74:	20000a01 	.word	0x20000a01
 8001b78:	200000ed 	.word	0x200000ed
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b69      	cmp	r3, #105	; 0x69
 8001b80:	d107      	bne.n	8001b92 <ESPRxDecoder+0x11da>
 8001b82:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <ESPRxDecoder+0x1334>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d103      	bne.n	8001b92 <ESPRxDecoder+0x11da>
			    bufferptr=4;
 8001b8a:	4b58      	ldr	r3, [pc, #352]	; (8001cec <ESPRxDecoder+0x1334>)
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e01f      	b.n	8001bd2 <ESPRxDecoder+0x121a>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b6e      	cmp	r3, #110	; 0x6e
 8001b96:	d107      	bne.n	8001ba8 <ESPRxDecoder+0x11f0>
 8001b98:	4b54      	ldr	r3, [pc, #336]	; (8001cec <ESPRxDecoder+0x1334>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d103      	bne.n	8001ba8 <ESPRxDecoder+0x11f0>
			    bufferptr=5;
 8001ba0:	4b52      	ldr	r3, [pc, #328]	; (8001cec <ESPRxDecoder+0x1334>)
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	e014      	b.n	8001bd2 <ESPRxDecoder+0x121a>
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b6b      	cmp	r3, #107	; 0x6b
 8001bac:	d111      	bne.n	8001bd2 <ESPRxDecoder+0x121a>
 8001bae:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <ESPRxDecoder+0x1334>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10d      	bne.n	8001bd2 <ESPRxDecoder+0x121a>
			    bufferptr=0;
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <ESPRxDecoder+0x1334>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <ESPRxDecoder+0x1338>)
 8001bc2:	2266      	movs	r2, #102	; 0x66
 8001bc4:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <ESPRxDecoder+0x133c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <ESPRxDecoder+0x1340>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b43      	cmp	r3, #67	; 0x43
 8001bd6:	d107      	bne.n	8001be8 <ESPRxDecoder+0x1230>
 8001bd8:	4b44      	ldr	r3, [pc, #272]	; (8001cec <ESPRxDecoder+0x1334>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <ESPRxDecoder+0x1230>
			 	bufferptr=1;
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <ESPRxDecoder+0x1334>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e04f      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b4c      	cmp	r3, #76	; 0x4c
 8001bec:	d107      	bne.n	8001bfe <ESPRxDecoder+0x1246>
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <ESPRxDecoder+0x1334>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d103      	bne.n	8001bfe <ESPRxDecoder+0x1246>
			 	bufferptr=2;
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <ESPRxDecoder+0x1334>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e044      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b4f      	cmp	r3, #79	; 0x4f
 8001c02:	d107      	bne.n	8001c14 <ESPRxDecoder+0x125c>
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d103      	bne.n	8001c14 <ESPRxDecoder+0x125c>
			    bufferptr=3;
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e039      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b53      	cmp	r3, #83	; 0x53
 8001c18:	d107      	bne.n	8001c2a <ESPRxDecoder+0x1272>
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d103      	bne.n	8001c2a <ESPRxDecoder+0x1272>
			    bufferptr=4;
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e02e      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b45      	cmp	r3, #69	; 0x45
 8001c2e:	d107      	bne.n	8001c40 <ESPRxDecoder+0x1288>
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d103      	bne.n	8001c40 <ESPRxDecoder+0x1288>
			    bufferptr=5;
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e023      	b.n	8001c88 <ESPRxDecoder+0x12d0>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b44      	cmp	r3, #68	; 0x44
 8001c44:	d14a      	bne.n	8001cdc <ESPRxDecoder+0x1324>
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d146      	bne.n	8001cdc <ESPRxDecoder+0x1324>
			    bufferptr=0;
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <ESPRxDecoder+0x133c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <ESPRxDecoder+0x133c>)
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <ESPRxDecoder+0x133c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d906      	bls.n	8001c7a <ESPRxDecoder+0x12c2>
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <ESPRxDecoder+0x1338>)
 8001c6e:	220a      	movs	r2, #10
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <ESPRxDecoder+0x133c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e002      	b.n	8001c80 <ESPRxDecoder+0x12c8>
					wifi_command=102;}
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <ESPRxDecoder+0x1338>)
 8001c7c:	2266      	movs	r2, #102	; 0x66
 8001c7e:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <ESPRxDecoder+0x1340>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
		break;
 8001c86:	e029      	b.n	8001cdc <ESPRxDecoder+0x1324>
 8001c88:	e028      	b.n	8001cdc <ESPRxDecoder+0x1324>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b4f      	cmp	r3, #79	; 0x4f
 8001c8e:	d107      	bne.n	8001ca0 <ESPRxDecoder+0x12e8>
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <ESPRxDecoder+0x12e8>
			 {
			 	bufferptr=1;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <ESPRxDecoder+0x1334>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8001c9e:	e01f      	b.n	8001ce0 <ESPRxDecoder+0x1328>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b4b      	cmp	r3, #75	; 0x4b
 8001ca4:	d11c      	bne.n	8001ce0 <ESPRxDecoder+0x1328>
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <ESPRxDecoder+0x1334>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d118      	bne.n	8001ce0 <ESPRxDecoder+0x1328>
			 	bufferptr=0;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <ESPRxDecoder+0x1334>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <ESPRxDecoder+0x1338>)
 8001cba:	2214      	movs	r2, #20
 8001cbc:	701a      	strb	r2, [r3, #0]
		break;
 8001cbe:	e00f      	b.n	8001ce0 <ESPRxDecoder+0x1328>
	   	default:
		break;
 8001cc0:	bf00      	nop
 8001cc2:	e00e      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001cc4:	bf00      	nop
 8001cc6:	e00c      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001cc8:	bf00      	nop
 8001cca:	e00a      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001ccc:	bf00      	nop
 8001cce:	e008      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001cd0:	bf00      	nop
 8001cd2:	e006      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001cd4:	bf00      	nop
 8001cd6:	e004      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001cd8:	bf00      	nop
 8001cda:	e002      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <ESPRxDecoder+0x132a>
		break;
 8001ce0:	bf00      	nop
		}
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000bc8 	.word	0x20000bc8
 8001cf0:	20000a01 	.word	0x20000a01
 8001cf4:	200000ed 	.word	0x200000ed
 8001cf8:	200000f0 	.word	0x200000f0

08001cfc <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	3b30      	subs	r3, #48	; 0x30
 8001d0a:	2b16      	cmp	r3, #22
 8001d0c:	d860      	bhi.n	8001dd0 <DecToASCIIFun+0xd4>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <DecToASCIIFun+0x18>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d71 	.word	0x08001d71
 8001d18:	08001d77 	.word	0x08001d77
 8001d1c:	08001d7d 	.word	0x08001d7d
 8001d20:	08001d83 	.word	0x08001d83
 8001d24:	08001d89 	.word	0x08001d89
 8001d28:	08001d8f 	.word	0x08001d8f
 8001d2c:	08001d95 	.word	0x08001d95
 8001d30:	08001d9b 	.word	0x08001d9b
 8001d34:	08001da1 	.word	0x08001da1
 8001d38:	08001da7 	.word	0x08001da7
 8001d3c:	08001dd1 	.word	0x08001dd1
 8001d40:	08001dd1 	.word	0x08001dd1
 8001d44:	08001dd1 	.word	0x08001dd1
 8001d48:	08001dd1 	.word	0x08001dd1
 8001d4c:	08001dd1 	.word	0x08001dd1
 8001d50:	08001dd1 	.word	0x08001dd1
 8001d54:	08001dd1 	.word	0x08001dd1
 8001d58:	08001dad 	.word	0x08001dad
 8001d5c:	08001db3 	.word	0x08001db3
 8001d60:	08001db9 	.word	0x08001db9
 8001d64:	08001dbf 	.word	0x08001dbf
 8001d68:	08001dc5 	.word	0x08001dc5
 8001d6c:	08001dcb 	.word	0x08001dcb
	{
	case 48:
			ASCIIHex = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
			break;
 8001d74:	e02c      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
			break;
 8001d7a:	e029      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	73fb      	strb	r3, [r7, #15]
			break;
 8001d80:	e026      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8001d82:	2303      	movs	r3, #3
 8001d84:	73fb      	strb	r3, [r7, #15]
			break;
 8001d86:	e023      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	73fb      	strb	r3, [r7, #15]
			break;
 8001d8c:	e020      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	73fb      	strb	r3, [r7, #15]
			break;
 8001d92:	e01d      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8001d94:	2306      	movs	r3, #6
 8001d96:	73fb      	strb	r3, [r7, #15]
			break;
 8001d98:	e01a      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	73fb      	strb	r3, [r7, #15]
			break;
 8001d9e:	e017      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8001da0:	2308      	movs	r3, #8
 8001da2:	73fb      	strb	r3, [r7, #15]
			break;
 8001da4:	e014      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8001da6:	2309      	movs	r3, #9
 8001da8:	73fb      	strb	r3, [r7, #15]
			break;
 8001daa:	e011      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8001dac:	230a      	movs	r3, #10
 8001dae:	73fb      	strb	r3, [r7, #15]
			break;
 8001db0:	e00e      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8001db2:	230b      	movs	r3, #11
 8001db4:	73fb      	strb	r3, [r7, #15]
			break;
 8001db6:	e00b      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8001db8:	230c      	movs	r3, #12
 8001dba:	73fb      	strb	r3, [r7, #15]
			break;
 8001dbc:	e008      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8001dbe:	230d      	movs	r3, #13
 8001dc0:	73fb      	strb	r3, [r7, #15]
			break;
 8001dc2:	e005      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8001dc4:	230e      	movs	r3, #14
 8001dc6:	73fb      	strb	r3, [r7, #15]
			break;
 8001dc8:	e002      	b.n	8001dd0 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	73fb      	strb	r3, [r7, #15]
			break;
 8001dce:	bf00      	nop
	}
	return (ASCIIHex);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <HAL_TIM_PeriodElapsedCallback>:
 extern uint8_t MAC_A_Prod_Input1_StartTimer;
 extern uint16_t MAC_A_Prod_Input1_CountBase;
 extern GPIO_PinState Sim_Trigger;
 
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d102      	bne.n	8001df6 <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d130      	bne.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
 		Flag100milliSeconds=1;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 		if(++LocCount1S >= 10)
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b09      	cmp	r3, #9
 8001e16:	d919      	bls.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			LocCount1S=0;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b13      	cmp	r3, #19
 8001e30:	d909      	bls.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				SimCount=0;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 8001e38:	2120      	movs	r1, #32
 8001e3a:	4811      	ldr	r0, [pc, #68]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e3c:	f009 faba 	bl	800b3b4 <HAL_GPIO_TogglePin>
				Sim_Trigger = GPIO_PIN_RESET;
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
			}
			Flag1Second =1;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		}
		if(MAC_A_Prod_Input1_StartTimer)
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
		   ++MAC_A_Prod_Input1_CountBase;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e5e:	801a      	strh	r2, [r3, #0]
		}

	}
 
 }
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000700 	.word	0x20000700
 8001e6c:	20000111 	.word	0x20000111
 8001e70:	200006b4 	.word	0x200006b4
 8001e74:	20000113 	.word	0x20000113
 8001e78:	20000115 	.word	0x20000115
 8001e7c:	20000114 	.word	0x20000114
 8001e80:	48000800 	.word	0x48000800
 8001e84:	2000078b 	.word	0x2000078b
 8001e88:	20000112 	.word	0x20000112
 8001e8c:	2000078c 	.word	0x2000078c
 8001e90:	2000078e 	.word	0x2000078e

08001e94 <HAL_UART_RxCpltCallback>:
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);
void DwinFrameDecode(uint8_t Dwindatarx);


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3e      	ldr	r2, [pc, #248]	; (8001f98 <HAL_UART_RxCpltCallback+0x104>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d10c      	bne.n	8001ebe <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_UART_RxCpltCallback+0x108>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <HAL_UART_RxCpltCallback+0x10c>)
 8001eaa:	7812      	ldrb	r2, [r2, #0]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fd82 	bl	80009b8 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4939      	ldr	r1, [pc, #228]	; (8001f9c <HAL_UART_RxCpltCallback+0x108>)
 8001eb8:	4837      	ldr	r0, [pc, #220]	; (8001f98 <HAL_UART_RxCpltCallback+0x104>)
 8001eba:	f00c febf 	bl	800ec3c <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_UART_RxCpltCallback+0x110>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d141      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0xb6>
	{
		if((u8rxbuf[0]==1)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 8001ec6:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d11c      	bne.n	8001f08 <HAL_UART_RxCpltCallback+0x74>
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d118      	bne.n	8001f08 <HAL_UART_RxCpltCallback+0x74>
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d114      	bne.n	8001f08 <HAL_UART_RxCpltCallback+0x74>
		{
			Dye_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <HAL_UART_RxCpltCallback+0x118>)
 8001ef4:	801a      	strh	r2, [r3, #0]
			Dye_Temperature = Dye_Temperature/10;
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_UART_RxCpltCallback+0x118>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <HAL_UART_RxCpltCallback+0x11c>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_UART_RxCpltCallback+0x118>)
 8001f06:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0]==2)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d11c      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0xb6>
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d118      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0xb6>
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001f1a:	789b      	ldrb	r3, [r3, #2]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d114      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0xb6>
		{
			Connector_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001f22:	78db      	ldrb	r3, [r3, #3]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_UART_RxCpltCallback+0x114>)
 8001f2a:	791b      	ldrb	r3, [r3, #4]
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_UART_RxCpltCallback+0x120>)
 8001f36:	801a      	strh	r2, [r3, #0]
			Connector_Temperature = Connector_Temperature/10;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_UART_RxCpltCallback+0x120>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_UART_RxCpltCallback+0x11c>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	08db      	lsrs	r3, r3, #3
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_UART_RxCpltCallback+0x120>)
 8001f48:	801a      	strh	r2, [r3, #0]
		}
	}

	if(huart == &huart2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_UART_RxCpltCallback+0x124>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11d      	bne.n	8001f8e <HAL_UART_RxCpltCallback+0xfa>
	{
		DwinFrameDecode(rxDwinBuff[0]);
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_UART_RxCpltCallback+0x128>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f836 	bl	8001fc8 <DwinFrameDecode>
		check[trackpoint]=rxDwinBuff[0];
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_UART_RxCpltCallback+0x128>)
 8001f64:	7819      	ldrb	r1, [r3, #0]
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_UART_RxCpltCallback+0x130>)
 8001f68:	5499      	strb	r1, [r3, r2]
		if(++trackpoint>200){trackpoint=0;}
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2bc8      	cmp	r3, #200	; 0xc8
 8001f7c:	d902      	bls.n	8001f84 <HAL_UART_RxCpltCallback+0xf0>
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rxDwinBuff,1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	490d      	ldr	r1, [pc, #52]	; (8001fbc <HAL_UART_RxCpltCallback+0x128>)
 8001f88:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <HAL_UART_RxCpltCallback+0x124>)
 8001f8a:	f00c fe57 	bl	800ec3c <HAL_UART_Receive_IT>
	}
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000414 	.word	0x20000414
 8001f9c:	2000074c 	.word	0x2000074c
 8001fa0:	20000bc9 	.word	0x20000bc9
 8001fa4:	20000498 	.word	0x20000498
 8001fa8:	200007fc 	.word	0x200007fc
 8001fac:	200001e2 	.word	0x200001e2
 8001fb0:	cccccccd 	.word	0xcccccccd
 8001fb4:	200001e4 	.word	0x200001e4
 8001fb8:	2000051c 	.word	0x2000051c
 8001fbc:	20000754 	.word	0x20000754
 8001fc0:	200002ba 	.word	0x200002ba
 8001fc4:	200001e8 	.word	0x200001e8

08001fc8 <DwinFrameDecode>:

void DwinFrameDecode(uint8_t Dwindatarx){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]

	switch(Dwinseq)
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <DwinFrameDecode+0x108>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d870      	bhi.n	80020bc <DwinFrameDecode+0xf4>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <DwinFrameDecode+0x18>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08001ffd 	.word	0x08001ffd
 8001fe4:	08002013 	.word	0x08002013
 8001fe8:	08002029 	.word	0x08002029
 8001fec:	0800203b 	.word	0x0800203b
 8001ff0:	08002051 	.word	0x08002051
 8001ff4:	08002067 	.word	0x08002067
 8001ff8:	08002083 	.word	0x08002083
	{
		case 0:
			if(Dwindatarx == 0x5A){
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b5a      	cmp	r3, #90	; 0x5a
 8002000:	d103      	bne.n	800200a <DwinFrameDecode+0x42>
				Dwinseq=1;
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <DwinFrameDecode+0x108>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 8002008:	e05b      	b.n	80020c2 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 800200a:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <DwinFrameDecode+0x108>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
		break;
 8002010:	e057      	b.n	80020c2 <DwinFrameDecode+0xfa>
		case 1:
			if(Dwindatarx == 0xA5){
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2ba5      	cmp	r3, #165	; 0xa5
 8002016:	d103      	bne.n	8002020 <DwinFrameDecode+0x58>
				Dwinseq=2;
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <DwinFrameDecode+0x108>)
 800201a:	2202      	movs	r2, #2
 800201c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 800201e:	e050      	b.n	80020c2 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <DwinFrameDecode+0x108>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
		break;
 8002026:	e04c      	b.n	80020c2 <DwinFrameDecode+0xfa>
		case 2:
			NoOfDwinRxdata = Dwindatarx-3;
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	3b03      	subs	r3, #3
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <DwinFrameDecode+0x10c>)
 8002030:	701a      	strb	r2, [r3, #0]
			Dwinseq=3;
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <DwinFrameDecode+0x108>)
 8002034:	2203      	movs	r2, #3
 8002036:	701a      	strb	r2, [r3, #0]
		break;
 8002038:	e043      	b.n	80020c2 <DwinFrameDecode+0xfa>
		case 3:
			if(Dwindatarx == 0x83){
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b83      	cmp	r3, #131	; 0x83
 800203e:	d103      	bne.n	8002048 <DwinFrameDecode+0x80>
			Dwinseq=4;}
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <DwinFrameDecode+0x108>)
 8002042:	2204      	movs	r2, #4
 8002044:	701a      	strb	r2, [r3, #0]
			else{
				Dwinseq=0;
			}
		break;
 8002046:	e03c      	b.n	80020c2 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <DwinFrameDecode+0x108>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
		break;
 800204e:	e038      	b.n	80020c2 <DwinFrameDecode+0xfa>
		case 4:
			if(Dwindatarx == 0x30){
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b30      	cmp	r3, #48	; 0x30
 8002054:	d103      	bne.n	800205e <DwinFrameDecode+0x96>
				Dwinseq=5;
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <DwinFrameDecode+0x108>)
 8002058:	2205      	movs	r2, #5
 800205a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 800205c:	e031      	b.n	80020c2 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <DwinFrameDecode+0x108>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
		break;
 8002064:	e02d      	b.n	80020c2 <DwinFrameDecode+0xfa>
		case 5:
			if(Dwindatarx == 0x00){
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <DwinFrameDecode+0xb2>
				Dwinseq=6;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <DwinFrameDecode+0x108>)
 800206e:	2206      	movs	r2, #6
 8002070:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point=0;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <DwinFrameDecode+0x110>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 8002078:	e023      	b.n	80020c2 <DwinFrameDecode+0xfa>
				Dwinseq=0;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <DwinFrameDecode+0x108>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
		break;
 8002080:	e01f      	b.n	80020c2 <DwinFrameDecode+0xfa>
		case 6:
				DwinDatabuffer[Rx_Dwin_Data_Buff_Point]=Dwindatarx;
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <DwinFrameDecode+0x110>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <DwinFrameDecode+0x114>)
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	5453      	strb	r3, [r2, r1]
				NoOfDwinRxdata= NoOfDwinRxdata-1;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <DwinFrameDecode+0x10c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	3b01      	subs	r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <DwinFrameDecode+0x10c>)
 8002098:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point = Rx_Dwin_Data_Buff_Point+1;
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <DwinFrameDecode+0x110>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <DwinFrameDecode+0x110>)
 80020a4:	701a      	strb	r2, [r3, #0]
				if(NoOfDwinRxdata == 0){
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <DwinFrameDecode+0x10c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <DwinFrameDecode+0xf8>
					Dwinseq=0;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <DwinFrameDecode+0x108>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
					Rx_Dwin_Complete=1;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <DwinFrameDecode+0x118>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
				}
		break;
 80020ba:	e001      	b.n	80020c0 <DwinFrameDecode+0xf8>
		default:
		break;
 80020bc:	bf00      	nop
 80020be:	e000      	b.n	80020c2 <DwinFrameDecode+0xfa>
		break;
 80020c0:	bf00      	nop
	}
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200007f6 	.word	0x200007f6
 80020d4:	200002bb 	.word	0x200002bb
 80020d8:	200002bc 	.word	0x200002bc
 80020dc:	200002c0 	.word	0x200002c0
 80020e0:	200002bd 	.word	0x200002bd

080020e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e8:	f008 fd92 	bl	800ac10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ec:	f000 f84c 	bl	8002188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f0:	f000 faba 	bl	8002668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020f4:	f000 f936 	bl	8002364 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020f8:	f000 f898 	bl	800222c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80020fc:	f000 f902 	bl	8002304 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002100:	f000 fa44 	bl	800258c <MX_TIM6_Init>
  MX_SPI2_Init();
 8002104:	f000 f9a6 	bl	8002454 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002108:	f000 f9ec 	bl	80024e4 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 800210c:	f000 f8ce 	bl	80022ac <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002110:	f000 f958 	bl	80023c4 <MX_SPI1_Init>
  MX_TIM7_Init();
 8002114:	f000 fa70 	bl	80025f8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002118:	4814      	ldr	r0, [pc, #80]	; (800216c <main+0x88>)
 800211a:	f00c f8ed 	bl	800e2f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <main+0x8c>)
 8002120:	f00c f8ea 	bl	800e2f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <main+0x90>)
 8002126:	f00c f89b 	bl	800e260 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002134:	f009 f926 	bl	800b384 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8002138:	2002      	movs	r0, #2
 800213a:	f008 fddd 	bl	800acf8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002148:	f009 f91c 	bl	800b384 <HAL_GPIO_WritePin>
  {
	  while(1);
  }
#endif
 // HAL_UART_Transmit_IT(&huart1,data,sizeof(data));
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 800214c:	2201      	movs	r2, #1
 800214e:	490a      	ldr	r1, [pc, #40]	; (8002178 <main+0x94>)
 8002150:	480a      	ldr	r0, [pc, #40]	; (800217c <main+0x98>)
 8002152:	f00c fd73 	bl	800ec3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,rxDwinBuff,1);
 8002156:	2201      	movs	r2, #1
 8002158:	4909      	ldr	r1, [pc, #36]	; (8002180 <main+0x9c>)
 800215a:	480a      	ldr	r0, [pc, #40]	; (8002184 <main+0xa0>)
 800215c:	f00c fd6e 	bl	800ec3c <HAL_UART_Receive_IT>
  W25qxx_Init();
 8002160:	f001 f884 	bl	800326c <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  while (1)
  {
	  cppMain();
 8002164:	f008 fca6 	bl	800aab4 <cppMain>
 8002168:	e7fc      	b.n	8002164 <main+0x80>
 800216a:	bf00      	nop
 800216c:	200006b4 	.word	0x200006b4
 8002170:	20000700 	.word	0x20000700
 8002174:	20000668 	.word	0x20000668
 8002178:	2000074c 	.word	0x2000074c
 800217c:	20000414 	.word	0x20000414
 8002180:	20000754 	.word	0x20000754
 8002184:	2000051c 	.word	0x2000051c

08002188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b096      	sub	sp, #88	; 0x58
 800218c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	2244      	movs	r2, #68	; 0x44
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f00e f880 	bl	801029c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ae:	f009 ff25 	bl	800bffc <HAL_PWREx_ControlVoltageScaling>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021b8:	f000 fb48 	bl	800284c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021bc:	2310      	movs	r3, #16
 80021be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021c8:	2360      	movs	r3, #96	; 0x60
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021cc:	2302      	movs	r3, #2
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021d0:	2301      	movs	r3, #1
 80021d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 80021d8:	2356      	movs	r3, #86	; 0x56
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021dc:	2307      	movs	r3, #7
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80021e4:	2308      	movs	r3, #8
 80021e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4618      	mov	r0, r3
 80021ee:	f009 ff5b 	bl	800c0a8 <HAL_RCC_OscConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80021f8:	f000 fb28 	bl	800284c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fc:	230f      	movs	r3, #15
 80021fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002200:	2303      	movs	r3, #3
 8002202:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002210:	463b      	mov	r3, r7
 8002212:	2102      	movs	r1, #2
 8002214:	4618      	mov	r0, r3
 8002216:	f00a fb5b 	bl	800c8d0 <HAL_RCC_ClockConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002220:	f000 fb14 	bl	800284c <Error_Handler>
  }
}
 8002224:	bf00      	nop
 8002226:	3758      	adds	r7, #88	; 0x58
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <MX_I2C1_Init+0x78>)
 8002234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <MX_I2C1_Init+0x7c>)
 800223a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_I2C1_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002244:	2201      	movs	r2, #1
 8002246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_I2C1_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_I2C1_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002266:	480e      	ldr	r0, [pc, #56]	; (80022a0 <MX_I2C1_Init+0x74>)
 8002268:	f009 f8be 	bl	800b3e8 <HAL_I2C_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002272:	f000 faeb 	bl	800284c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002276:	2100      	movs	r1, #0
 8002278:	4809      	ldr	r0, [pc, #36]	; (80022a0 <MX_I2C1_Init+0x74>)
 800227a:	f009 fe19 	bl	800beb0 <HAL_I2CEx_ConfigAnalogFilter>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002284:	f000 fae2 	bl	800284c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_I2C1_Init+0x74>)
 800228c:	f009 fe5b 	bl	800bf46 <HAL_I2CEx_ConfigDigitalFilter>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002296:	f000 fad9 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200003c0 	.word	0x200003c0
 80022a4:	40005400 	.word	0x40005400
 80022a8:	00a0a7fd 	.word	0x00a0a7fd

080022ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <MX_LPUART1_UART_Init+0x54>)
 80022b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_LPUART1_UART_Init+0x50>)
 80022ea:	f00c fbeb 	bl	800eac4 <HAL_UART_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80022f4:	f000 faaa 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000414 	.word	0x20000414
 8002300:	40008000 	.word	0x40008000

08002304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <MX_USART1_UART_Init+0x58>)
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <MX_USART1_UART_Init+0x5c>)
 800230c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002310:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <MX_USART1_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_USART1_UART_Init+0x58>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <MX_USART1_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_USART1_UART_Init+0x58>)
 8002348:	f00c fbbc 	bl	800eac4 <HAL_UART_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002352:	f000 fa7b 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000498 	.word	0x20000498
 8002360:	40013800 	.word	0x40013800

08002364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <MX_USART2_UART_Init+0x58>)
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <MX_USART2_UART_Init+0x5c>)
 800236c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_USART2_UART_Init+0x58>)
 8002370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_USART2_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_USART2_UART_Init+0x58>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_USART2_UART_Init+0x58>)
 800238a:	220c      	movs	r2, #12
 800238c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MX_USART2_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_USART2_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MX_USART2_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_USART2_UART_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_USART2_UART_Init+0x58>)
 80023a8:	f00c fb8c 	bl	800eac4 <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023b2:	f000 fa4b 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000051c 	.word	0x2000051c
 80023c0:	40004400 	.word	0x40004400

080023c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023c8:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <MX_SPI1_Init+0x84>)
 80023ca:	4a20      	ldr	r2, [pc, #128]	; (800244c <MX_SPI1_Init+0x88>)
 80023cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <MX_SPI1_Init+0x84>)
 80023d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <MX_SPI1_Init+0x84>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <MX_SPI1_Init+0x84>)
 80023de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_SPI1_Init+0x84>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <MX_SPI1_Init+0x84>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <MX_SPI1_Init+0x84>)
 80023f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <MX_SPI1_Init+0x84>)
 80023fa:	2210      	movs	r2, #16
 80023fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_SPI1_Init+0x84>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <MX_SPI1_Init+0x84>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_SPI1_Init+0x84>)
 800240c:	2200      	movs	r2, #0
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <MX_SPI1_Init+0x84>)
 8002412:	2207      	movs	r2, #7
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_SPI1_Init+0x84>)
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <MX_SPI1_Init+0x84>)
 800241e:	2208      	movs	r2, #8
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002422:	4809      	ldr	r0, [pc, #36]	; (8002448 <MX_SPI1_Init+0x84>)
 8002424:	f00a ffb4 	bl	800d390 <HAL_SPI_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800242e:	f000 fa0d 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <MX_SPI1_Init+0x8c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <MX_SPI1_Init+0x8c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200005a0 	.word	0x200005a0
 800244c:	40013000 	.word	0x40013000
 8002450:	20000604 	.word	0x20000604

08002454 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <MX_SPI2_Init+0x84>)
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <MX_SPI2_Init+0x88>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <MX_SPI2_Init+0x84>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <MX_SPI2_Init+0x84>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <MX_SPI2_Init+0x84>)
 800246e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002472:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_SPI2_Init+0x84>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_SPI2_Init+0x84>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <MX_SPI2_Init+0x84>)
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <MX_SPI2_Init+0x84>)
 800248a:	2208      	movs	r2, #8
 800248c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_SPI2_Init+0x84>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <MX_SPI2_Init+0x84>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_SPI2_Init+0x84>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <MX_SPI2_Init+0x84>)
 80024a2:	2207      	movs	r2, #7
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_SPI2_Init+0x84>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_SPI2_Init+0x84>)
 80024ae:	2208      	movs	r2, #8
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024b2:	4809      	ldr	r0, [pc, #36]	; (80024d8 <MX_SPI2_Init+0x84>)
 80024b4:	f00a ff6c 	bl	800d390 <HAL_SPI_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024be:	f000 f9c5 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <MX_SPI2_Init+0x8c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <MX_SPI2_Init+0x8c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000604 	.word	0x20000604
 80024dc:	40003800 	.word	0x40003800
 80024e0:	200005a0 	.word	0x200005a0

080024e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002504:	4a20      	ldr	r2, [pc, #128]	; (8002588 <MX_TIM1_Init+0xa4>)
 8002506:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <MX_TIM1_Init+0xa0>)
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_TIM1_Init+0xa0>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_TIM1_Init+0xa0>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800252e:	4815      	ldr	r0, [pc, #84]	; (8002584 <MX_TIM1_Init+0xa0>)
 8002530:	f00b fe3e 	bl	800e1b0 <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800253a:	f000 f987 	bl	800284c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4619      	mov	r1, r3
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <MX_TIM1_Init+0xa0>)
 800254c:	f00c f847 	bl	800e5de <HAL_TIM_ConfigClockSource>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002556:	f000 f979 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <MX_TIM1_Init+0xa0>)
 800256c:	f00c fa26 	bl	800e9bc <HAL_TIMEx_MasterConfigSynchronization>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002576:	f000 f969 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000668 	.word	0x20000668
 8002588:	40012c00 	.word	0x40012c00

0800258c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_TIM6_Init+0x64>)
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <MX_TIM6_Init+0x68>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_TIM6_Init+0x64>)
 80025a4:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 80025a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_TIM6_Init+0x64>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_TIM6_Init+0x64>)
 80025b2:	2264      	movs	r2, #100	; 0x64
 80025b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_TIM6_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <MX_TIM6_Init+0x64>)
 80025be:	f00b fdf7 	bl	800e1b0 <HAL_TIM_Base_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025c8:	f000 f940 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_TIM6_Init+0x64>)
 80025da:	f00c f9ef 	bl	800e9bc <HAL_TIMEx_MasterConfigSynchronization>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025e4:	f000 f932 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200006b4 	.word	0x200006b4
 80025f4:	40001000 	.word	0x40001000

080025f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <MX_TIM7_Init+0x68>)
 800260a:	4a16      	ldr	r2, [pc, #88]	; (8002664 <MX_TIM7_Init+0x6c>)
 800260c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <MX_TIM7_Init+0x68>)
 8002610:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002614:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <MX_TIM7_Init+0x68>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <MX_TIM7_Init+0x68>)
 800261e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002622:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <MX_TIM7_Init+0x68>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <MX_TIM7_Init+0x68>)
 800262c:	f00b fdc0 	bl	800e1b0 <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002636:	f000 f909 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <MX_TIM7_Init+0x68>)
 8002648:	f00c f9b8 	bl	800e9bc <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002652:	f000 f8fb 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000700 	.word	0x20000700
 8002664:	40001400 	.word	0x40001400

08002668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <MX_GPIO_Init+0x1d4>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <MX_GPIO_Init+0x1d4>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800268a:	4b6c      	ldr	r3, [pc, #432]	; (800283c <MX_GPIO_Init+0x1d4>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	4b69      	ldr	r3, [pc, #420]	; (800283c <MX_GPIO_Init+0x1d4>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	4a68      	ldr	r2, [pc, #416]	; (800283c <MX_GPIO_Init+0x1d4>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a2:	4b66      	ldr	r3, [pc, #408]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a62      	ldr	r2, [pc, #392]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b60      	ldr	r3, [pc, #384]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c6:	4b5d      	ldr	r3, [pc, #372]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a5c      	ldr	r2, [pc, #368]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <MX_GPIO_Init+0x1d4>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 80026de:	2200      	movs	r2, #0
 80026e0:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80026e4:	4856      	ldr	r0, [pc, #344]	; (8002840 <MX_GPIO_Init+0x1d8>)
 80026e6:	f008 fe4d 	bl	800b384 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2112      	movs	r1, #18
 80026ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f2:	f008 fe47 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2125      	movs	r1, #37	; 0x25
 80026fa:	4852      	ldr	r0, [pc, #328]	; (8002844 <MX_GPIO_Init+0x1dc>)
 80026fc:	f008 fe42 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002706:	484f      	ldr	r0, [pc, #316]	; (8002844 <MX_GPIO_Init+0x1dc>)
 8002708:	f008 fe3c 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 800270c:	2201      	movs	r2, #1
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	484b      	ldr	r0, [pc, #300]	; (8002840 <MX_GPIO_Init+0x1d8>)
 8002712:	f008 fe37 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800271c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002720:	f008 fe30 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2104      	movs	r1, #4
 8002728:	4847      	ldr	r0, [pc, #284]	; (8002848 <MX_GPIO_Init+0x1e0>)
 800272a:	f008 fe2b 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 800272e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002732:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	483e      	ldr	r0, [pc, #248]	; (8002840 <MX_GPIO_Init+0x1d8>)
 8002748:	f008 fc8a 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 800274c:	f241 0302 	movw	r3, #4098	; 0x1002
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	2301      	movs	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002768:	f008 fc7a 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 800276c:	2310      	movs	r3, #16
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002770:	2301      	movs	r3, #1
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002774:	2301      	movs	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002786:	f008 fc6b 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 800278a:	2325      	movs	r3, #37	; 0x25
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4828      	ldr	r0, [pc, #160]	; (8002844 <MX_GPIO_Init+0x1dc>)
 80027a2:	f008 fc5d 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 80027a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b4:	2302      	movs	r3, #2
 80027b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4821      	ldr	r0, [pc, #132]	; (8002844 <MX_GPIO_Init+0x1dc>)
 80027c0:	f008 fc4e 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 80027c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4819      	ldr	r0, [pc, #100]	; (8002840 <MX_GPIO_Init+0x1d8>)
 80027da:	f008 fc41 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 80027de:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f6:	f008 fc33 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 80027fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002800:	2301      	movs	r3, #1
 8002802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002804:	2301      	movs	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	480b      	ldr	r0, [pc, #44]	; (8002840 <MX_GPIO_Init+0x1d8>)
 8002814:	f008 fc24 	bl	800b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8002818:	2304      	movs	r3, #4
 800281a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281c:	2301      	movs	r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002820:	2301      	movs	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <MX_GPIO_Init+0x1e0>)
 8002830:	f008 fc16 	bl	800b060 <HAL_GPIO_Init>

}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	48000800 	.word	0x48000800
 8002844:	48000400 	.word	0x48000400
 8002848:	48000c00 	.word	0x48000c00

0800284c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
}
 8002852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002854:	e7fe      	b.n	8002854 <Error_Handler+0x8>
	...

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_MspInit+0x44>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <HAL_MspInit+0x44>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6613      	str	r3, [r2, #96]	; 0x60
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_MspInit+0x44>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_MspInit+0x44>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_MspInit+0x44>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_MspInit+0x44>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0a2      	sub	sp, #136	; 0x88
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2260      	movs	r2, #96	; 0x60
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00d fceb 	bl	801029c <memset>
  if(hi2c->Instance==I2C1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_I2C_MspInit+0xac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d138      	bne.n	8002942 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	4618      	mov	r0, r3
 80028de:	f00a fa1b 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028e8:	f7ff ffb0 	bl	800284c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_I2C_MspInit+0xb0>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_I2C_MspInit+0xb0>)
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_I2C_MspInit+0xb0>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002904:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002908:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290a:	2312      	movs	r3, #18
 800290c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002918:	2304      	movs	r3, #4
 800291a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002922:	4619      	mov	r1, r3
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <HAL_I2C_MspInit+0xb4>)
 8002926:	f008 fb9b 	bl	800b060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_I2C_MspInit+0xb0>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_I2C_MspInit+0xb0>)
 8002930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_I2C_MspInit+0xb0>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3788      	adds	r7, #136	; 0x88
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40005400 	.word	0x40005400
 8002950:	40021000 	.word	0x40021000
 8002954:	48000400 	.word	0x48000400

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0a6      	sub	sp, #152	; 0x98
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002974:	2260      	movs	r2, #96	; 0x60
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f00d fc8f 	bl	801029c <memset>
  if(huart->Instance==LPUART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <HAL_UART_MspInit+0x1e8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d144      	bne.n	8002a12 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002988:	2320      	movs	r3, #32
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800298c:	2300      	movs	r3, #0
 800298e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4618      	mov	r0, r3
 8002996:	f00a f9bf 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029a0:	f7ff ff54 	bl	800284c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	4a66      	ldr	r2, [pc, #408]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	65d3      	str	r3, [r2, #92]	; 0x5c
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c0:	4a60      	ldr	r2, [pc, #384]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c8:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80029ee:	2308      	movs	r3, #8
 80029f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029f8:	4619      	mov	r1, r3
 80029fa:	4853      	ldr	r0, [pc, #332]	; (8002b48 <HAL_UART_MspInit+0x1f0>)
 80029fc:	f008 fb30 	bl	800b060 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	2046      	movs	r0, #70	; 0x46
 8002a06:	f008 fa76 	bl	800aef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002a0a:	2046      	movs	r0, #70	; 0x46
 8002a0c:	f008 fa8f 	bl	800af2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a10:	e091      	b.n	8002b36 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4d      	ldr	r2, [pc, #308]	; (8002b4c <HAL_UART_MspInit+0x1f4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d143      	bne.n	8002aa4 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a20:	2300      	movs	r3, #0
 8002a22:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f00a f975 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002a34:	f7ff ff0a 	bl	800284c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a42:	6613      	str	r3, [r2, #96]	; 0x60
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a50:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a68:	23c0      	movs	r3, #192	; 0xc0
 8002a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a80:	2307      	movs	r3, #7
 8002a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	482e      	ldr	r0, [pc, #184]	; (8002b48 <HAL_UART_MspInit+0x1f0>)
 8002a8e:	f008 fae7 	bl	800b060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2025      	movs	r0, #37	; 0x25
 8002a98:	f008 fa2d 	bl	800aef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a9c:	2025      	movs	r0, #37	; 0x25
 8002a9e:	f008 fa46 	bl	800af2e <HAL_NVIC_EnableIRQ>
}
 8002aa2:	e048      	b.n	8002b36 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_UART_MspInit+0x1f8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d143      	bne.n	8002b36 <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aba:	4618      	mov	r0, r3
 8002abc:	f00a f92c 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002ac6:	f7ff fec1 	bl	800284c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_UART_MspInit+0x1ec>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002afa:	230c      	movs	r3, #12
 8002afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b12:	2307      	movs	r3, #7
 8002b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f008 fa9d 	bl	800b060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2026      	movs	r0, #38	; 0x26
 8002b2c:	f008 f9e3 	bl	800aef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b30:	2026      	movs	r0, #38	; 0x26
 8002b32:	f008 f9fc 	bl	800af2e <HAL_NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3798      	adds	r7, #152	; 0x98
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40008000 	.word	0x40008000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40004400 	.word	0x40004400

08002b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2f      	ldr	r2, [pc, #188]	; (8002c30 <HAL_SPI_MspInit+0xdc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d129      	bne.n	8002bca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b80:	6613      	str	r3, [r2, #96]	; 0x60
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ba6:	23e0      	movs	r3, #224	; 0xe0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc4:	f008 fa4c 	bl	800b060 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bc8:	e02d      	b.n	8002c26 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_SPI_MspInit+0xe4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d128      	bne.n	8002c26 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bd4:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_SPI_MspInit+0xe0>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c04:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c16:	2305      	movs	r3, #5
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4806      	ldr	r0, [pc, #24]	; (8002c3c <HAL_SPI_MspInit+0xe8>)
 8002c22:	f008 fa1d 	bl	800b060 <HAL_GPIO_Init>
}
 8002c26:	bf00      	nop
 8002c28:	3730      	adds	r7, #48	; 0x30
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40013000 	.word	0x40013000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40003800 	.word	0x40003800
 8002c3c:	48000400 	.word	0x48000400

08002c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_TIM_Base_MspInit+0x9c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10c      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c52:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002c6a:	e032      	b.n	8002cd2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d114      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c7c:	f043 0310 	orr.w	r3, r3, #16
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2036      	movs	r0, #54	; 0x36
 8002c94:	f008 f92f 	bl	800aef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c98:	2036      	movs	r0, #54	; 0x36
 8002c9a:	f008 f948 	bl	800af2e <HAL_NVIC_EnableIRQ>
}
 8002c9e:	e018      	b.n	8002cd2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d113      	bne.n	8002cd2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa0>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2037      	movs	r0, #55	; 0x37
 8002cc8:	f008 f915 	bl	800aef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ccc:	2037      	movs	r0, #55	; 0x37
 8002cce:	f008 f92e 	bl	800af2e <HAL_NVIC_EnableIRQ>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40001000 	.word	0x40001000
 8002ce8:	40001400 	.word	0x40001400

08002cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <NMI_Handler+0x4>

08002cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <HardFault_Handler+0x4>

08002cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <MemManage_Handler+0x4>

08002cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <BusFault_Handler+0x4>

08002d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <UsageFault_Handler+0x4>

08002d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d38:	f007 ffbe 	bl	800acb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <USART1_IRQHandler+0x10>)
 8002d46:	f00b ffcf 	bl	800ece8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000498 	.word	0x20000498

08002d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <USART2_IRQHandler+0x10>)
 8002d5a:	f00b ffc5 	bl	800ece8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000051c 	.word	0x2000051c

08002d68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM6_DAC_IRQHandler+0x10>)
 8002d6e:	f00b fb17 	bl	800e3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200006b4 	.word	0x200006b4

08002d7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <TIM7_IRQHandler+0x10>)
 8002d82:	f00b fb0d 	bl	800e3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000700 	.word	0x20000700

08002d90 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <LPUART1_IRQHandler+0x10>)
 8002d96:	f00b ffa7 	bl	800ece8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000414 	.word	0x20000414

08002da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <_sbrk+0x5c>)
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <_sbrk+0x60>)
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <_sbrk+0x64>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <_sbrk+0x64>)
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <_sbrk+0x68>)
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d207      	bcs.n	8002de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd4:	f00d fa22 	bl	801021c <__errno>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	220c      	movs	r2, #12
 8002ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	e009      	b.n	8002df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <_sbrk+0x64>)
 8002df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20010000 	.word	0x20010000
 8002e04:	00000400 	.word	0x00000400
 8002e08:	2000075c 	.word	0x2000075c
 8002e0c:	20000f40 	.word	0x20000f40

08002e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <SystemInit+0x20>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <SystemInit+0x20>)
 8002e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	b2db      	uxtb	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <bin2bcd+0x44>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	08db      	lsrs	r3, r3, #3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	b258      	sxtb	r0, r3
 8002e82:	79fa      	ldrb	r2, [r7, #7]
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <bin2bcd+0x44>)
 8002e86:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8a:	08d9      	lsrs	r1, r3, #3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	4303      	orrs	r3, r0
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	cccccccd 	.word	0xcccccccd

08002eb0 <rtc_get_time>:

	rtc_write(0x07,rs);
}

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8002ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec0:	9302      	str	r3, [sp, #8]
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8002ed4:	480f      	ldr	r0, [pc, #60]	; (8002f14 <rtc_get_time+0x64>)
 8002ed6:	f008 fc2b 	bl	800b730 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*sec=bcd2bin(data[0]);
 8002eda:	7d3b      	ldrb	r3, [r7, #20]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ffa9 	bl	8002e34 <bcd2bin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8002eea:	7d7b      	ldrb	r3, [r7, #21]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ffa1 	bl	8002e34 <bcd2bin>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8002efa:	7dbb      	ldrb	r3, [r7, #22]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff99 	bl	8002e34 <bcd2bin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	701a      	strb	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200003c0 	.word	0x200003c0

08002f18 <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	460b      	mov	r3, r1
 8002f24:	71bb      	strb	r3, [r7, #6]
 8002f26:	4613      	mov	r3, r2
 8002f28:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 8002f2a:	797b      	ldrb	r3, [r7, #5]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff9b 	bl	8002e68 <bin2bcd>
 8002f32:	4603      	mov	r3, r0
 8002f34:	733b      	strb	r3, [r7, #12]
 8002f36:	79bb      	ldrb	r3, [r7, #6]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff95 	bl	8002e68 <bin2bcd>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	737b      	strb	r3, [r7, #13]
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff8f 	bl	8002e68 <bin2bcd>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8002f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	2303      	movs	r3, #3
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	2200      	movs	r2, #0
 8002f62:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8002f66:	4803      	ldr	r0, [pc, #12]	; (8002f74 <rtc_set_time+0x5c>)
 8002f68:	f008 face 	bl	800b508 <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200003c0 	.word	0x200003c0

08002f78 <rtc_get_date>:

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af04      	add	r7, sp, #16
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8002f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8e:	9302      	str	r3, [sp, #8]
 8002f90:	2304      	movs	r3, #4
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8002fa2:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <rtc_get_date+0x70>)
 8002fa4:	f008 fbc4 	bl	800b730 <HAL_I2C_Mem_Read>
	//	_Error_Handler(__FILE__,__LINE__);
	}

	*week_day=data[0];
 8002fa8:	7d3a      	ldrb	r2, [r7, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff3f 	bl	8002e34 <bcd2bin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8002fbe:	7dbb      	ldrb	r3, [r7, #22]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff37 	bl	8002e34 <bcd2bin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff2f 	bl	8002e34 <bcd2bin>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200003c0 	.word	0x200003c0

08002fec <rtc_set_date>:

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	71fb      	strb	r3, [r7, #7]
 8002ffe:	4603      	mov	r3, r0
 8003000:	71bb      	strb	r3, [r7, #6]
 8003002:	460b      	mov	r3, r1
 8003004:	717b      	strb	r3, [r7, #5]
 8003006:	4613      	mov	r3, r2
 8003008:	713b      	strb	r3, [r7, #4]
	uint8_t data[4]={week_day,bin2bcd(day),bin2bcd(month),bin2bcd(year)};
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	733b      	strb	r3, [r7, #12]
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff29 	bl	8002e68 <bin2bcd>
 8003016:	4603      	mov	r3, r0
 8003018:	737b      	strb	r3, [r7, #13]
 800301a:	797b      	ldrb	r3, [r7, #5]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff23 	bl	8002e68 <bin2bcd>
 8003022:	4603      	mov	r3, r0
 8003024:	73bb      	strb	r3, [r7, #14]
 8003026:	793b      	ldrb	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff1d 	bl	8002e68 <bin2bcd>
 800302e:	4603      	mov	r3, r0
 8003030:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8003032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	2304      	movs	r3, #4
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2301      	movs	r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800304a:	4803      	ldr	r0, [pc, #12]	; (8003058 <rtc_set_date+0x6c>)
 800304c:	f008 fa5c 	bl	800b508 <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	200003c0 	.word	0x200003c0

0800305c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af02      	add	r7, sp, #8
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003066:	f107 020f 	add.w	r2, r7, #15
 800306a:	1df9      	adds	r1, r7, #7
 800306c:	2364      	movs	r3, #100	; 0x64
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2301      	movs	r3, #1
 8003072:	4804      	ldr	r0, [pc, #16]	; (8003084 <W25qxx_Spi+0x28>)
 8003074:	f00a fccd 	bl	800da12 <HAL_SPI_TransmitReceive>
	return ret;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200005a0 	.word	0x200005a0

08003088 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	2101      	movs	r1, #1
 80030a2:	4813      	ldr	r0, [pc, #76]	; (80030f0 <W25qxx_ReadID+0x68>)
 80030a4:	f008 f96e 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80030a8:	209f      	movs	r0, #159	; 0x9f
 80030aa:	f7ff ffd7 	bl	800305c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030ae:	20a5      	movs	r0, #165	; 0xa5
 80030b0:	f7ff ffd4 	bl	800305c <W25qxx_Spi>
 80030b4:	4603      	mov	r3, r0
 80030b6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030b8:	20a5      	movs	r0, #165	; 0xa5
 80030ba:	f7ff ffcf 	bl	800305c <W25qxx_Spi>
 80030be:	4603      	mov	r3, r0
 80030c0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030c2:	20a5      	movs	r0, #165	; 0xa5
 80030c4:	f7ff ffca 	bl	800305c <W25qxx_Spi>
 80030c8:	4603      	mov	r3, r0
 80030ca:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80030cc:	2201      	movs	r2, #1
 80030ce:	2101      	movs	r1, #1
 80030d0:	4807      	ldr	r0, [pc, #28]	; (80030f0 <W25qxx_ReadID+0x68>)
 80030d2:	f008 f957 	bl	800b384 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	041a      	lsls	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	4313      	orrs	r3, r2
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	48000400 	.word	0x48000400

080030f4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2101      	movs	r1, #1
 80030fe:	4816      	ldr	r0, [pc, #88]	; (8003158 <W25qxx_ReadUniqID+0x64>)
 8003100:	f008 f940 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003104:	204b      	movs	r0, #75	; 0x4b
 8003106:	f7ff ffa9 	bl	800305c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	e005      	b.n	800311c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003110:	20a5      	movs	r0, #165	; 0xa5
 8003112:	f7ff ffa3 	bl	800305c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	3301      	adds	r3, #1
 800311a:	71fb      	strb	r3, [r7, #7]
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d9f6      	bls.n	8003110 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	71bb      	strb	r3, [r7, #6]
 8003126:	e00b      	b.n	8003140 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003128:	79bc      	ldrb	r4, [r7, #6]
 800312a:	20a5      	movs	r0, #165	; 0xa5
 800312c:	f7ff ff96 	bl	800305c <W25qxx_Spi>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <W25qxx_ReadUniqID+0x68>)
 8003136:	4423      	add	r3, r4
 8003138:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800313a:	79bb      	ldrb	r3, [r7, #6]
 800313c:	3301      	adds	r3, #1
 800313e:	71bb      	strb	r3, [r7, #6]
 8003140:	79bb      	ldrb	r3, [r7, #6]
 8003142:	2b07      	cmp	r3, #7
 8003144:	d9f0      	bls.n	8003128 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003146:	2201      	movs	r2, #1
 8003148:	2101      	movs	r1, #1
 800314a:	4803      	ldr	r0, [pc, #12]	; (8003158 <W25qxx_ReadUniqID+0x64>)
 800314c:	f008 f91a 	bl	800b384 <HAL_GPIO_WritePin>
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	48000400 	.word	0x48000400
 800315c:	20000760 	.word	0x20000760

08003160 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003164:	2200      	movs	r2, #0
 8003166:	2101      	movs	r1, #1
 8003168:	4807      	ldr	r0, [pc, #28]	; (8003188 <W25qxx_WriteEnable+0x28>)
 800316a:	f008 f90b 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800316e:	2006      	movs	r0, #6
 8003170:	f7ff ff74 	bl	800305c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003174:	2201      	movs	r2, #1
 8003176:	2101      	movs	r1, #1
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <W25qxx_WriteEnable+0x28>)
 800317a:	f008 f903 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800317e:	2001      	movs	r0, #1
 8003180:	f007 fdba 	bl	800acf8 <HAL_Delay>
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	48000400 	.word	0x48000400

0800318c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	2101      	movs	r1, #1
 800319e:	481c      	ldr	r0, [pc, #112]	; (8003210 <W25qxx_ReadStatusRegister+0x84>)
 80031a0:	f008 f8f0 	bl	800b384 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10c      	bne.n	80031c4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80031aa:	2005      	movs	r0, #5
 80031ac:	f7ff ff56 	bl	800305c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031b0:	20a5      	movs	r0, #165	; 0xa5
 80031b2:	f7ff ff53 	bl	800305c <W25qxx_Spi>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <W25qxx_ReadStatusRegister+0x88>)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80031c2:	e01b      	b.n	80031fc <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d10c      	bne.n	80031e4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80031ca:	2035      	movs	r0, #53	; 0x35
 80031cc:	f7ff ff46 	bl	800305c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031d0:	20a5      	movs	r0, #165	; 0xa5
 80031d2:	f7ff ff43 	bl	800305c <W25qxx_Spi>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <W25qxx_ReadStatusRegister+0x88>)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80031e2:	e00b      	b.n	80031fc <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80031e4:	2015      	movs	r0, #21
 80031e6:	f7ff ff39 	bl	800305c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031ea:	20a5      	movs	r0, #165	; 0xa5
 80031ec:	f7ff ff36 	bl	800305c <W25qxx_Spi>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <W25qxx_ReadStatusRegister+0x88>)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80031fc:	2201      	movs	r2, #1
 80031fe:	2101      	movs	r1, #1
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <W25qxx_ReadStatusRegister+0x84>)
 8003202:	f008 f8bf 	bl	800b384 <HAL_GPIO_WritePin>
	return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	48000400 	.word	0x48000400
 8003214:	20000760 	.word	0x20000760

08003218 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f007 fd6b 	bl	800acf8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003222:	2200      	movs	r2, #0
 8003224:	2101      	movs	r1, #1
 8003226:	480f      	ldr	r0, [pc, #60]	; (8003264 <W25qxx_WaitForWriteEnd+0x4c>)
 8003228:	f008 f8ac 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800322c:	2005      	movs	r0, #5
 800322e:	f7ff ff15 	bl	800305c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003232:	20a5      	movs	r0, #165	; 0xa5
 8003234:	f7ff ff12 	bl	800305c <W25qxx_Spi>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <W25qxx_WaitForWriteEnd+0x50>)
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f007 fd58 	bl	800acf8 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <W25qxx_WaitForWriteEnd+0x50>)
 800324a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ed      	bne.n	8003232 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003256:	2201      	movs	r2, #1
 8003258:	2101      	movs	r1, #1
 800325a:	4802      	ldr	r0, [pc, #8]	; (8003264 <W25qxx_WaitForWriteEnd+0x4c>)
 800325c:	f008 f892 	bl	800b384 <HAL_GPIO_WritePin>
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	48000400 	.word	0x48000400
 8003268:	20000760 	.word	0x20000760

0800326c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003272:	4b65      	ldr	r3, [pc, #404]	; (8003408 <W25qxx_Init+0x19c>)
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800327a:	e002      	b.n	8003282 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800327c:	2001      	movs	r0, #1
 800327e:	f007 fd3b 	bl	800acf8 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003282:	f007 fd2d 	bl	800ace0 <HAL_GetTick>
 8003286:	4603      	mov	r3, r0
 8003288:	2b63      	cmp	r3, #99	; 0x63
 800328a:	d9f7      	bls.n	800327c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800328c:	2201      	movs	r2, #1
 800328e:	2101      	movs	r1, #1
 8003290:	485e      	ldr	r0, [pc, #376]	; (800340c <W25qxx_Init+0x1a0>)
 8003292:	f008 f877 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003296:	2064      	movs	r0, #100	; 0x64
 8003298:	f007 fd2e 	bl	800acf8 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800329c:	f7ff fef4 	bl	8003088 <W25qxx_ReadID>
 80032a0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3b11      	subs	r3, #17
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d86c      	bhi.n	8003386 <W25qxx_Init+0x11a>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <W25qxx_Init+0x48>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	08003379 	.word	0x08003379
 80032b8:	0800336b 	.word	0x0800336b
 80032bc:	0800335d 	.word	0x0800335d
 80032c0:	0800334f 	.word	0x0800334f
 80032c4:	08003341 	.word	0x08003341
 80032c8:	08003333 	.word	0x08003333
 80032cc:	08003325 	.word	0x08003325
 80032d0:	08003315 	.word	0x08003315
 80032d4:	08003305 	.word	0x08003305
 80032d8:	08003387 	.word	0x08003387
 80032dc:	08003387 	.word	0x08003387
 80032e0:	08003387 	.word	0x08003387
 80032e4:	08003387 	.word	0x08003387
 80032e8:	08003387 	.word	0x08003387
 80032ec:	08003387 	.word	0x08003387
 80032f0:	080032f5 	.word	0x080032f5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <W25qxx_Init+0x19c>)
 80032f6:	220a      	movs	r2, #10
 80032f8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80032fa:	4b43      	ldr	r3, [pc, #268]	; (8003408 <W25qxx_Init+0x19c>)
 80032fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003300:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8003302:	e046      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003304:	4b40      	ldr	r3, [pc, #256]	; (8003408 <W25qxx_Init+0x19c>)
 8003306:	2209      	movs	r2, #9
 8003308:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <W25qxx_Init+0x19c>)
 800330c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003310:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003312:	e03e      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003314:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <W25qxx_Init+0x19c>)
 8003316:	2208      	movs	r2, #8
 8003318:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <W25qxx_Init+0x19c>)
 800331c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003320:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003322:	e036      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <W25qxx_Init+0x19c>)
 8003326:	2207      	movs	r2, #7
 8003328:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <W25qxx_Init+0x19c>)
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003330:	e02f      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <W25qxx_Init+0x19c>)
 8003334:	2206      	movs	r2, #6
 8003336:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <W25qxx_Init+0x19c>)
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800333e:	e028      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <W25qxx_Init+0x19c>)
 8003342:	2205      	movs	r2, #5
 8003344:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <W25qxx_Init+0x19c>)
 8003348:	2220      	movs	r2, #32
 800334a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800334c:	e021      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <W25qxx_Init+0x19c>)
 8003350:	2204      	movs	r2, #4
 8003352:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <W25qxx_Init+0x19c>)
 8003356:	2210      	movs	r2, #16
 8003358:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800335a:	e01a      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <W25qxx_Init+0x19c>)
 800335e:	2203      	movs	r2, #3
 8003360:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <W25qxx_Init+0x19c>)
 8003364:	2208      	movs	r2, #8
 8003366:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003368:	e013      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <W25qxx_Init+0x19c>)
 800336c:	2202      	movs	r2, #2
 800336e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <W25qxx_Init+0x19c>)
 8003372:	2204      	movs	r2, #4
 8003374:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003376:	e00c      	b.n	8003392 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003378:	4b23      	ldr	r3, [pc, #140]	; (8003408 <W25qxx_Init+0x19c>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800337e:	4b22      	ldr	r3, [pc, #136]	; (8003408 <W25qxx_Init+0x19c>)
 8003380:	2202      	movs	r2, #2
 8003382:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003384:	e005      	b.n	8003392 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <W25qxx_Init+0x19c>)
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800338e:	2300      	movs	r3, #0
 8003390:	e036      	b.n	8003400 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <W25qxx_Init+0x19c>)
 8003394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003398:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <W25qxx_Init+0x19c>)
 800339c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033a0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <W25qxx_Init+0x19c>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <W25qxx_Init+0x19c>)
 80033aa:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <W25qxx_Init+0x19c>)
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <W25qxx_Init+0x19c>)
 80033b2:	6912      	ldr	r2, [r2, #16]
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <W25qxx_Init+0x19c>)
 80033ba:	8952      	ldrh	r2, [r2, #10]
 80033bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80033c0:	4a11      	ldr	r2, [pc, #68]	; (8003408 <W25qxx_Init+0x19c>)
 80033c2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <W25qxx_Init+0x19c>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <W25qxx_Init+0x19c>)
 80033cc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <W25qxx_Init+0x19c>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <W25qxx_Init+0x19c>)
 80033d4:	6912      	ldr	r2, [r2, #16]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	0a9b      	lsrs	r3, r3, #10
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <W25qxx_Init+0x19c>)
 80033de:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80033e0:	f7ff fe88 	bl	80030f4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80033e4:	2001      	movs	r0, #1
 80033e6:	f7ff fed1 	bl	800318c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80033ea:	2002      	movs	r0, #2
 80033ec:	f7ff fece 	bl	800318c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f7ff fecb 	bl	800318c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <W25qxx_Init+0x19c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000760 	.word	0x20000760
 800340c:	48000400 	.word	0x48000400

08003410 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003418:	e002      	b.n	8003420 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800341a:	2001      	movs	r0, #1
 800341c:	f007 fc6c 	bl	800acf8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <W25qxx_EraseSector+0xa8>)
 8003422:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003426:	2b01      	cmp	r3, #1
 8003428:	d0f7      	beq.n	800341a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <W25qxx_EraseSector+0xa8>)
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8003432:	f7ff fef1 	bl	8003218 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <W25qxx_EraseSector+0xa8>)
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003442:	f7ff fe8d 	bl	8003160 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	2101      	movs	r1, #1
 800344a:	481c      	ldr	r0, [pc, #112]	; (80034bc <W25qxx_EraseSector+0xac>)
 800344c:	f007 ff9a 	bl	800b384 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <W25qxx_EraseSector+0xa8>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d909      	bls.n	800346c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003458:	2021      	movs	r0, #33	; 0x21
 800345a:	f7ff fdff 	bl	800305c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0e1b      	lsrs	r3, r3, #24
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fdf9 	bl	800305c <W25qxx_Spi>
 800346a:	e002      	b.n	8003472 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800346c:	2020      	movs	r0, #32
 800346e:	f7ff fdf5 	bl	800305c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	b2db      	uxtb	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fdef 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fde9 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fde4 	bl	800305c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003494:	2201      	movs	r2, #1
 8003496:	2101      	movs	r1, #1
 8003498:	4808      	ldr	r0, [pc, #32]	; (80034bc <W25qxx_EraseSector+0xac>)
 800349a:	f007 ff73 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800349e:	f7ff febb 	bl	8003218 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f007 fc28 	bl	800acf8 <HAL_Delay>
	w25qxx.Lock = 0;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <W25qxx_EraseSector+0xa8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000760 	.word	0x20000760
 80034bc:	48000400 	.word	0x48000400

080034c0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <W25qxx_SectorToPage+0x28>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	4a05      	ldr	r2, [pc, #20]	; (80034e8 <W25qxx_SectorToPage+0x28>)
 80034d4:	8952      	ldrh	r2, [r2, #10]
 80034d6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000760 	.word	0x20000760

080034ec <W25qxx_IsEmptySector>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b090      	sub	sp, #64	; 0x40
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 80034f8:	e002      	b.n	8003500 <W25qxx_IsEmptySector+0x14>
		W25qxx_Delay(1);
 80034fa:	2001      	movs	r0, #1
 80034fc:	f007 fbfc 	bl	800acf8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003500:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003502:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003506:	2b01      	cmp	r3, #1
 8003508:	d0f7      	beq.n	80034fa <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock = 1;
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToCheck_up_to_SectorSize == 0))
 8003512:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d802      	bhi.n	8003522 <W25qxx_IsEmptySector+0x36>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8003522:	4b64      	ldr	r3, [pc, #400]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	607b      	str	r3, [r7, #4]
	uint32_t StartTime = HAL_GetTick();
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	e055      	b.n	80035da <W25qxx_IsEmptySector+0xee>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800352e:	2200      	movs	r2, #0
 8003530:	2101      	movs	r1, #1
 8003532:	4861      	ldr	r0, [pc, #388]	; (80036b8 <W25qxx_IsEmptySector+0x1cc>)
 8003534:	f007 ff26 	bl	800b384 <HAL_GPIO_WritePin>
		WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8003538:	4b5e      	ldr	r3, [pc, #376]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003544:	4413      	add	r3, r2
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
		if (w25qxx.ID >= W25Q256)
 8003548:	4b5a      	ldr	r3, [pc, #360]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d909      	bls.n	8003564 <W25qxx_IsEmptySector+0x78>
		{
			W25qxx_Spi(0x0C);
 8003550:	200c      	movs	r0, #12
 8003552:	f7ff fd83 	bl	800305c <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	0e1b      	lsrs	r3, r3, #24
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fd7d 	bl	800305c <W25qxx_Spi>
 8003562:	e002      	b.n	800356a <W25qxx_IsEmptySector+0x7e>
		}
		else
		{
			W25qxx_Spi(0x0B);
 8003564:	200b      	movs	r0, #11
 8003566:	f7ff fd79 	bl	800305c <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fd73 	bl	800305c <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fd6d 	bl	800305c <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fd68 	bl	800305c <W25qxx_Spi>
		W25qxx_Spi(0);
 800358c:	2000      	movs	r0, #0
 800358e:	f7ff fd65 	bl	800305c <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 8003592:	f107 0114 	add.w	r1, r7, #20
 8003596:	2364      	movs	r3, #100	; 0x64
 8003598:	2220      	movs	r2, #32
 800359a:	4848      	ldr	r0, [pc, #288]	; (80036bc <W25qxx_IsEmptySector+0x1d0>)
 800359c:	f00a f909 	bl	800d7b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80035a0:	2201      	movs	r2, #1
 80035a2:	2101      	movs	r1, #1
 80035a4:	4844      	ldr	r0, [pc, #272]	; (80036b8 <W25qxx_IsEmptySector+0x1cc>)
 80035a6:	f007 feed 	bl	800b384 <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80035b0:	e00c      	b.n	80035cc <W25qxx_IsEmptySector+0xe0>
		{
			if (pBuffer[x] != 0xFF)
 80035b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80035b6:	3340      	adds	r3, #64	; 0x40
 80035b8:	443b      	add	r3, r7
 80035ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d16b      	bne.n	800369a <W25qxx_IsEmptySector+0x1ae>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 80035c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80035c6:	3301      	adds	r3, #1
 80035c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80035cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80035d0:	2b1f      	cmp	r3, #31
 80035d2:	d9ee      	bls.n	80035b2 <W25qxx_IsEmptySector+0xc6>
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 80035d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d6:	3320      	adds	r3, #32
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3a4      	bcc.n	800352e <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0)
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4413      	add	r3, r2
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d04c      	beq.n	800368e <W25qxx_IsEmptySector+0x1a2>
	{
		i -= sizeof(pBuffer);
 80035f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f6:	3b20      	subs	r3, #32
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.SectorSize; i++)
 80035fa:	e043      	b.n	8003684 <W25qxx_IsEmptySector+0x198>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2101      	movs	r1, #1
 8003600:	482d      	ldr	r0, [pc, #180]	; (80036b8 <W25qxx_IsEmptySector+0x1cc>)
 8003602:	f007 febf 	bl	800b384 <HAL_GPIO_WritePin>
			WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003612:	4413      	add	r3, r2
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
			if (w25qxx.ID >= W25Q256)
 8003616:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b08      	cmp	r3, #8
 800361c:	d909      	bls.n	8003632 <W25qxx_IsEmptySector+0x146>
			{
				W25qxx_Spi(0x0C);
 800361e:	200c      	movs	r0, #12
 8003620:	f7ff fd1c 	bl	800305c <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	0e1b      	lsrs	r3, r3, #24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fd16 	bl	800305c <W25qxx_Spi>
 8003630:	e002      	b.n	8003638 <W25qxx_IsEmptySector+0x14c>
			}
			else
			{
				W25qxx_Spi(0x0B);
 8003632:	200b      	movs	r0, #11
 8003634:	f7ff fd12 	bl	800305c <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fd0c 	bl	800305c <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	b2db      	uxtb	r3, r3
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fd06 	bl	800305c <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fd01 	bl	800305c <W25qxx_Spi>
			W25qxx_Spi(0);
 800365a:	2000      	movs	r0, #0
 800365c:	f7ff fcfe 	bl	800305c <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 8003660:	f107 0114 	add.w	r1, r7, #20
 8003664:	2364      	movs	r3, #100	; 0x64
 8003666:	2201      	movs	r2, #1
 8003668:	4814      	ldr	r0, [pc, #80]	; (80036bc <W25qxx_IsEmptySector+0x1d0>)
 800366a:	f00a f8a2 	bl	800d7b2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800366e:	2201      	movs	r2, #1
 8003670:	2101      	movs	r1, #1
 8003672:	4811      	ldr	r0, [pc, #68]	; (80036b8 <W25qxx_IsEmptySector+0x1cc>)
 8003674:	f007 fe86 	bl	800b384 <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 8003678:	7d3b      	ldrb	r3, [r7, #20]
 800367a:	2bff      	cmp	r3, #255	; 0xff
 800367c:	d10f      	bne.n	800369e <W25qxx_IsEmptySector+0x1b2>
		for (; i < w25qxx.SectorSize; i++)
 800367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003680:	3301      	adds	r3, #1
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368a:	429a      	cmp	r2, r3
 800368c:	d3b6      	bcc.n	80035fc <W25qxx_IsEmptySector+0x110>
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <W25qxx_IsEmptySector+0x1be>
				goto NOT_EMPTY;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <W25qxx_IsEmptySector+0x1b4>
				goto NOT_EMPTY;
 800369e:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <W25qxx_IsEmptySector+0x1c8>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3740      	adds	r7, #64	; 0x40
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000760 	.word	0x20000760
 80036b8:	48000400 	.word	0x48000400
 80036bc:	200005a0 	.word	0x200005a0

080036c0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80036ce:	e002      	b.n	80036d6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80036d0:	2001      	movs	r0, #1
 80036d2:	f007 fb11 	bl	800acf8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <W25qxx_WritePage+0xfc>)
 80036d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d0f7      	beq.n	80036d0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <W25qxx_WritePage+0xfc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a33      	ldr	r2, [pc, #204]	; (80037bc <W25qxx_WritePage+0xfc>)
 80036f0:	8952      	ldrh	r2, [r2, #10]
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d802      	bhi.n	80036fc <W25qxx_WritePage+0x3c>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <W25qxx_WritePage+0xfc>)
 80036fe:	895b      	ldrh	r3, [r3, #10]
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	4413      	add	r3, r2
 800370e:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <W25qxx_WritePage+0xfc>)
 8003710:	8952      	ldrh	r2, [r2, #10]
 8003712:	4293      	cmp	r3, r2
 8003714:	d905      	bls.n	8003722 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <W25qxx_WritePage+0xfc>)
 8003718:	895b      	ldrh	r3, [r3, #10]
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8003722:	f7ff fd79 	bl	8003218 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003726:	f7ff fd1b 	bl	8003160 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	2101      	movs	r1, #1
 800372e:	4824      	ldr	r0, [pc, #144]	; (80037c0 <W25qxx_WritePage+0x100>)
 8003730:	f007 fe28 	bl	800b384 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <W25qxx_WritePage+0xfc>)
 8003736:	895b      	ldrh	r3, [r3, #10]
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <W25qxx_WritePage+0xfc>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b08      	cmp	r3, #8
 800374c:	d909      	bls.n	8003762 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800374e:	2012      	movs	r0, #18
 8003750:	f7ff fc84 	bl	800305c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	0e1b      	lsrs	r3, r3, #24
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fc7e 	bl	800305c <W25qxx_Spi>
 8003760:	e002      	b.n	8003768 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003762:	2002      	movs	r0, #2
 8003764:	f7ff fc7a 	bl	800305c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	b2db      	uxtb	r3, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fc74 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fc6e 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fc69 	bl	800305c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b29a      	uxth	r2, r3
 800378e:	2364      	movs	r3, #100	; 0x64
 8003790:	68f9      	ldr	r1, [r7, #12]
 8003792:	480c      	ldr	r0, [pc, #48]	; (80037c4 <W25qxx_WritePage+0x104>)
 8003794:	f009 fe9f 	bl	800d4d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003798:	2201      	movs	r2, #1
 800379a:	2101      	movs	r1, #1
 800379c:	4808      	ldr	r0, [pc, #32]	; (80037c0 <W25qxx_WritePage+0x100>)
 800379e:	f007 fdf1 	bl	800b384 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80037a2:	f7ff fd39 	bl	8003218 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f007 faa6 	bl	800acf8 <HAL_Delay>
	w25qxx.Lock = 0;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <W25qxx_WritePage+0xfc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000760 	.word	0x20000760
 80037c0:	48000400 	.word	0x48000400
 80037c4:	200005a0 	.word	0x200005a0

080037c8 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <W25qxx_WriteSector+0xc0>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d802      	bhi.n	80037e6 <W25qxx_WriteSector+0x1e>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <W25qxx_WriteSector+0xc0>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80037ec:	4b26      	ldr	r3, [pc, #152]	; (8003888 <W25qxx_WriteSector+0xc0>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d243      	bcs.n	800387e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	441a      	add	r2, r3
 80037fc:	4b22      	ldr	r3, [pc, #136]	; (8003888 <W25qxx_WriteSector+0xc0>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d905      	bls.n	8003810 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003804:	4b20      	ldr	r3, [pc, #128]	; (8003888 <W25qxx_WriteSector+0xc0>)
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e001      	b.n	8003814 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003814:	68b8      	ldr	r0, [r7, #8]
 8003816:	f7ff fe53 	bl	80034c0 <W25qxx_SectorToPage>
 800381a:	4602      	mov	r2, r0
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <W25qxx_WriteSector+0xc0>)
 800381e:	895b      	ldrh	r3, [r3, #10]
 8003820:	4619      	mov	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fbb3 f3f1 	udiv	r3, r3, r1
 8003828:	4413      	add	r3, r2
 800382a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <W25qxx_WriteSector+0xc0>)
 800382e:	895b      	ldrh	r3, [r3, #10]
 8003830:	461a      	mov	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	fbb3 f1f2 	udiv	r1, r3, r2
 8003838:	fb01 f202 	mul.w	r2, r1, r2
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	69f9      	ldr	r1, [r7, #28]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff ff3a 	bl	80036c0 <W25qxx_WritePage>
		StartPage++;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <W25qxx_WriteSector+0xc0>)
 8003854:	895b      	ldrh	r3, [r3, #10]
 8003856:	461a      	mov	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	1a9a      	subs	r2, r3, r2
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <W25qxx_WriteSector+0xc0>)
 8003864:	895b      	ldrh	r3, [r3, #10]
 8003866:	461a      	mov	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	dce1      	bgt.n	8003840 <W25qxx_WriteSector+0x78>
 800387c:	e000      	b.n	8003880 <W25qxx_WriteSector+0xb8>
		return;
 800387e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000760 	.word	0x20000760

0800388c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800389a:	e002      	b.n	80038a2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800389c:	2001      	movs	r0, #1
 800389e:	f007 fa2b 	bl	800acf8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038a4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d0f7      	beq.n	800389c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038b6:	895b      	ldrh	r3, [r3, #10]
 80038b8:	461a      	mov	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	4293      	cmp	r3, r2
 80038be:	d802      	bhi.n	80038c6 <W25qxx_ReadPage+0x3a>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80038c6:	4b2d      	ldr	r3, [pc, #180]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038c8:	895b      	ldrh	r3, [r3, #10]
 80038ca:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038d4:	8952      	ldrh	r2, [r2, #10]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d905      	bls.n	80038e6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80038da:	4b28      	ldr	r3, [pc, #160]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038dc:	895b      	ldrh	r3, [r3, #10]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80038e6:	4b25      	ldr	r3, [pc, #148]	; (800397c <W25qxx_ReadPage+0xf0>)
 80038e8:	895b      	ldrh	r3, [r3, #10]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2101      	movs	r1, #1
 80038fc:	4820      	ldr	r0, [pc, #128]	; (8003980 <W25qxx_ReadPage+0xf4>)
 80038fe:	f007 fd41 	bl	800b384 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <W25qxx_ReadPage+0xf0>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b08      	cmp	r3, #8
 8003908:	d909      	bls.n	800391e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800390a:	200c      	movs	r0, #12
 800390c:	f7ff fba6 	bl	800305c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0e1b      	lsrs	r3, r3, #24
 8003914:	b2db      	uxtb	r3, r3
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fba0 	bl	800305c <W25qxx_Spi>
 800391c:	e002      	b.n	8003924 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800391e:	200b      	movs	r0, #11
 8003920:	f7ff fb9c 	bl	800305c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fb96 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fb90 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fb8b 	bl	800305c <W25qxx_Spi>
	W25qxx_Spi(0);
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff fb88 	bl	800305c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b29a      	uxth	r2, r3
 8003950:	2364      	movs	r3, #100	; 0x64
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	480b      	ldr	r0, [pc, #44]	; (8003984 <W25qxx_ReadPage+0xf8>)
 8003956:	f009 ff2c 	bl	800d7b2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800395a:	2201      	movs	r2, #1
 800395c:	2101      	movs	r1, #1
 800395e:	4808      	ldr	r0, [pc, #32]	; (8003980 <W25qxx_ReadPage+0xf4>)
 8003960:	f007 fd10 	bl	800b384 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003964:	2001      	movs	r0, #1
 8003966:	f007 f9c7 	bl	800acf8 <HAL_Delay>
	w25qxx.Lock = 0;
 800396a:	4b04      	ldr	r3, [pc, #16]	; (800397c <W25qxx_ReadPage+0xf0>)
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000760 	.word	0x20000760
 8003980:	48000400 	.word	0x48000400
 8003984:	200005a0 	.word	0x200005a0

08003988 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d802      	bhi.n	80039a6 <W25qxx_ReadSector+0x1e>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80039a6:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80039ac:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d243      	bcs.n	8003a3e <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	441a      	add	r2, r3
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d905      	bls.n	80039d0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e001      	b.n	80039d4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f7ff fd73 	bl	80034c0 <W25qxx_SectorToPage>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 80039de:	895b      	ldrh	r3, [r3, #10]
 80039e0:	4619      	mov	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80039e8:	4413      	add	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 80039ee:	895b      	ldrh	r3, [r3, #10]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039f8:	fb01 f202 	mul.w	r2, r1, r2
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff ff40 	bl	800388c <W25qxx_ReadPage>
		StartPage++;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 8003a14:	895b      	ldrh	r3, [r3, #10]
 8003a16:	461a      	mov	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	1a9a      	subs	r2, r3, r2
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <W25qxx_ReadSector+0xc0>)
 8003a24:	895b      	ldrh	r3, [r3, #10]
 8003a26:	461a      	mov	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dce1      	bgt.n	8003a00 <W25qxx_ReadSector+0x78>
 8003a3c:	e000      	b.n	8003a40 <W25qxx_ReadSector+0xb8>
		return;
 8003a3e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000760 	.word	0x20000760

08003a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a50:	f7ff f9de 	bl	8002e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a54:	480c      	ldr	r0, [pc, #48]	; (8003a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a56:	490d      	ldr	r1, [pc, #52]	; (8003a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <LoopForever+0xe>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a5c:	e002      	b.n	8003a64 <LoopCopyDataInit>

08003a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a62:	3304      	adds	r3, #4

08003a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a68:	d3f9      	bcc.n	8003a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a6c:	4c0a      	ldr	r4, [pc, #40]	; (8003a98 <LoopForever+0x16>)
  movs r3, #0
 8003a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a70:	e001      	b.n	8003a76 <LoopFillZerobss>

08003a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a74:	3204      	adds	r2, #4

08003a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a78:	d3fb      	bcc.n	8003a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a7a:	f00c fbd5 	bl	8010228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a7e:	f7fe fb31 	bl	80020e4 <main>

08003a82 <LoopForever>:

LoopForever:
    b LoopForever
 8003a82:	e7fe      	b.n	8003a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a8c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003a90:	080110a4 	.word	0x080110a4
  ldr r2, =_sbss
 8003a94:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003a98:	20000f40 	.word	0x20000f40

08003a9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a9c:	e7fe      	b.n	8003a9c <ADC1_IRQHandler>
	...

08003aa0 <_ZN9LpdcLogicC1Ev>:
uint16_t requirementIdK1;
uint16_t productionTarget;
uint8_t triggerStartForReq;


LpdcLogic::LpdcLogic() {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <_ZN9LpdcLogicC1Ev+0x24>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	721a      	strb	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	08010fc0 	.word	0x08010fc0

08003ac8 <_ZN9LpdcLogicD1Ev>:

LpdcLogic::~LpdcLogic() {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <_ZN9LpdcLogicD1Ev+0x1c>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	08010fc0 	.word	0x08010fc0

08003ae8 <_ZN9LpdcLogicD0Ev>:
LpdcLogic::~LpdcLogic() {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
}
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ffe9 	bl	8003ac8 <_ZN9LpdcLogicD1Ev>
 8003af6:	210c      	movs	r1, #12
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f00c fb8a 	bl	8010212 <_ZdlPvj>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_ZN9LpdcLogic3runEv>:

void LpdcLogic::run()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	shiftChange();
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f813 	bl	8003b3c <_ZN9LpdcLogic11shiftChangeEv>
	machineControl();
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f914 	bl	8003d44 <_ZN9LpdcLogic14machineControlEv>
	productChange();
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f84d 	bl	8003bbc <_ZN9LpdcLogic13productChangeEv>
	production();
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f882 	bl	8003c2c <_ZN9LpdcLogic10productionEv>
	manualRejection();
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8cb 	bl	8003cc4 <_ZN9LpdcLogic15manualRejectionEv>
	mAlarmControl();
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8fe 	bl	8003d30 <_ZN9LpdcLogic13mAlarmControlEv>
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZN9LpdcLogic11shiftChangeEv>:

void LpdcLogic::shiftChange()
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	if((CurrentShift != CurrentShift_K1)&&(UpdateShiftInfo==1))
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d01c      	beq.n	8003b8a <_ZN9LpdcLogic11shiftChangeEv+0x4e>
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d118      	bne.n	8003b8a <_ZN9LpdcLogic11shiftChangeEv+0x4e>
	{
		MAC_Gen_Prod_Input1_Production=0;
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <_ZN9LpdcLogic11shiftChangeEv+0x68>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <_ZN9LpdcLogic11shiftChangeEv+0x6c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <_ZN9LpdcLogic11shiftChangeEv+0x70>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <_ZN9LpdcLogic11shiftChangeEv+0x74>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <_ZN9LpdcLogic11shiftChangeEv+0x78>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	801a      	strh	r2, [r3, #0]
		UpdateShiftInfo=0;
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
		CurrentShift_K1= CurrentShift;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 8003b82:	701a      	strb	r2, [r3, #0]
		IsCurrentShiftUpdated=1;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <_ZN9LpdcLogic11shiftChangeEv+0x7c>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200009ff 	.word	0x200009ff
 8003b9c:	2000079a 	.word	0x2000079a
 8003ba0:	20000a00 	.word	0x20000a00
 8003ba4:	20000790 	.word	0x20000790
 8003ba8:	20000794 	.word	0x20000794
 8003bac:	20000798 	.word	0x20000798
 8003bb0:	20000792 	.word	0x20000792
 8003bb4:	20000796 	.word	0x20000796
 8003bb8:	2000079b 	.word	0x2000079b

08003bbc <_ZN9LpdcLogic13productChangeEv>:

void LpdcLogic::productChange()
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	if((productChangeOL ==1)&&(Debounce_productChangeOL ==1))	  /*reset due to product change*/
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <_ZN9LpdcLogic13productChangeEv+0x58>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d116      	bne.n	8003bfa <_ZN9LpdcLogic13productChangeEv+0x3e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7a1b      	ldrb	r3, [r3, #8]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d112      	bne.n	8003bfa <_ZN9LpdcLogic13productChangeEv+0x3e>
	  {
		MAC_Gen_Prod_Input1_Production=0;
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <_ZN9LpdcLogic13productChangeEv+0x5c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <_ZN9LpdcLogic13productChangeEv+0x60>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <_ZN9LpdcLogic13productChangeEv+0x64>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <_ZN9LpdcLogic13productChangeEv+0x68>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <_ZN9LpdcLogic13productChangeEv+0x6c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	801a      	strh	r2, [r3, #0]
		Debounce_productChangeOL=0;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	721a      	strb	r2, [r3, #8]
	  }
	  else if(productChangeOL==0)
	  {
	  	Debounce_productChangeOL=1;
	  }
}
 8003bf8:	e006      	b.n	8003c08 <_ZN9LpdcLogic13productChangeEv+0x4c>
	  else if(productChangeOL==0)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <_ZN9LpdcLogic13productChangeEv+0x58>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <_ZN9LpdcLogic13productChangeEv+0x4c>
	  	Debounce_productChangeOL=1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	721a      	strb	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	200000fc 	.word	0x200000fc
 8003c18:	20000790 	.word	0x20000790
 8003c1c:	20000794 	.word	0x20000794
 8003c20:	20000798 	.word	0x20000798
 8003c24:	20000792 	.word	0x20000792
 8003c28:	20000796 	.word	0x20000796

08003c2c <_ZN9LpdcLogic10productionEv>:

void LpdcLogic::production()
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

GPIO_PinStateMac = GPIO_PIN_RESET;//HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <_ZN9LpdcLogic10productionEv+0x7c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
GPIO_PinStateEjection = Sim_Trigger;//HAL_GPIO_ReadPin(GPIOC,InputMachine2_Pin);
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <_ZN9LpdcLogic10productionEv+0x80>)
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <_ZN9LpdcLogic10productionEv+0x84>)
 8003c40:	701a      	strb	r2, [r3, #0]
if(GPIO_PinStateMac == GPIO_PIN_RESET){
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <_ZN9LpdcLogic10productionEv+0x7c>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d128      	bne.n	8003c9c <_ZN9LpdcLogic10productionEv+0x70>
	if((GPIO_PinStateEjection ==GPIO_PIN_RESET)&&(MAC_A_Prod_Input1_DeBounce))
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <_ZN9LpdcLogic10productionEv+0x84>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d119      	bne.n	8003c86 <_ZN9LpdcLogic10productionEv+0x5a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	791b      	ldrb	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d015      	beq.n	8003c86 <_ZN9LpdcLogic10productionEv+0x5a>
	{
		Sim_Trigger= GPIO_PIN_SET;
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <_ZN9LpdcLogic10productionEv+0x80>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
		  MAC_A_Prod_Input1_DeBounce	= 0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	711a      	strb	r2, [r3, #4]
		  MAC_Gen_Prod_Input1_Production =1;
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <_ZN9LpdcLogic10productionEv+0x88>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	801a      	strh	r2, [r3, #0]
		  productionInc = productionInc+1;
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <_ZN9LpdcLogic10productionEv+0x8c>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <_ZN9LpdcLogic10productionEv+0x8c>)
 8003c76:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production = 0;
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <_ZN9LpdcLogic10productionEv+0x90>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <_ZN9LpdcLogic10productionEv+0x94>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	701a      	strb	r2, [r3, #0]

	}
	else{}
}

}
 8003c84:	e00a      	b.n	8003c9c <_ZN9LpdcLogic10productionEv+0x70>
	else if((GPIO_PinStateEjection==GPIO_PIN_SET)&&(!MAC_A_Prod_Input1_DeBounce))
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <_ZN9LpdcLogic10productionEv+0x84>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d106      	bne.n	8003c9c <_ZN9LpdcLogic10productionEv+0x70>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	791b      	ldrb	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <_ZN9LpdcLogic10productionEv+0x70>
		   MAC_A_Prod_Input1_DeBounce	 =1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	711a      	strb	r2, [r3, #4]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	20000788 	.word	0x20000788
 8003cac:	2000078b 	.word	0x2000078b
 8003cb0:	20000789 	.word	0x20000789
 8003cb4:	20000790 	.word	0x20000790
 8003cb8:	2000079e 	.word	0x2000079e
 8003cbc:	20000794 	.word	0x20000794
 8003cc0:	2000079c 	.word	0x2000079c

08003cc4 <_ZN9LpdcLogic15manualRejectionEv>:

void LpdcLogic::manualRejection()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	GPIO_PinStateRej = HAL_GPIO_ReadPin(GPIOA,InputMachine3_Pin);
 8003ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd4:	f007 fb3e 	bl	800b354 <HAL_GPIO_ReadPin>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <_ZN9LpdcLogic15manualRejectionEv+0x5c>)
 8003cde:	701a      	strb	r2, [r3, #0]
	if((GPIO_PinStateRej ==GPIO_PIN_RESET)&&(DebounceMACA_Rej))
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <_ZN9LpdcLogic15manualRejectionEv+0x5c>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d110      	bne.n	8003d0a <_ZN9LpdcLogic15manualRejectionEv+0x46>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	795b      	ldrb	r3, [r3, #5]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <_ZN9LpdcLogic15manualRejectionEv+0x46>
	 {
		  DebounceMACA_Rej=0;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	715a      	strb	r2, [r3, #5]
		  //Manual_RejectionCount	=  Manual_RejectionCount+1;
		  MAC_Gen_Prod_Input1_Production =0;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <_ZN9LpdcLogic15manualRejectionEv+0x60>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production = 1;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <_ZN9LpdcLogic15manualRejectionEv+0x64>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <_ZN9LpdcLogic15manualRejectionEv+0x68>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
	 }
	 else if(GPIO_PinStateRej ==GPIO_PIN_SET)
	 {
		 DebounceMACA_Rej=1;
	 }
}
 8003d08:	e006      	b.n	8003d18 <_ZN9LpdcLogic15manualRejectionEv+0x54>
	 else if(GPIO_PinStateRej ==GPIO_PIN_SET)
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <_ZN9LpdcLogic15manualRejectionEv+0x5c>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <_ZN9LpdcLogic15manualRejectionEv+0x54>
		 DebounceMACA_Rej=1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	715a      	strb	r2, [r3, #5]
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2000078a 	.word	0x2000078a
 8003d24:	20000790 	.word	0x20000790
 8003d28:	20000794 	.word	0x20000794
 8003d2c:	2000079c 	.word	0x2000079c

08003d30 <_ZN9LpdcLogic13mAlarmControlEv>:

void LpdcLogic::mAlarmControl(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	}
	else
	{
	//	HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
	}
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_ZN9LpdcLogic14machineControlEv>:

void LpdcLogic::machineControl(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	if(requirementId != requirementIdK1){
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <_ZN9LpdcLogic14machineControlEv+0x88>)
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <_ZN9LpdcLogic14machineControlEv+0x8c>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d010      	beq.n	8003d7a <_ZN9LpdcLogic14machineControlEv+0x36>
		productionInc 		= 0;
 8003d58:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <_ZN9LpdcLogic14machineControlEv+0x90>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	801a      	strh	r2, [r3, #0]
		requirementIdK1 	= requirementId;
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <_ZN9LpdcLogic14machineControlEv+0x88>)
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <_ZN9LpdcLogic14machineControlEv+0x8c>)
 8003d64:	801a      	strh	r2, [r3, #0]
		updateMemProcCtrl	= 1;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <_ZN9LpdcLogic14machineControlEv+0x94>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
		triggerStartForReq  = 1;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <_ZN9LpdcLogic14machineControlEv+0x98>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
		productionTarget 	= batchTargetquantity;
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <_ZN9LpdcLogic14machineControlEv+0x9c>)
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <_ZN9LpdcLogic14machineControlEv+0xa0>)
 8003d78:	801a      	strh	r2, [r3, #0]
	}

	if(triggerStartForReq==1){
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <_ZN9LpdcLogic14machineControlEv+0x98>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <_ZN9LpdcLogic14machineControlEv+0x4e>
		if(startStopStatus ==1){
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <_ZN9LpdcLogic14machineControlEv+0xa4>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d11c      	bne.n	8003dc4 <_ZN9LpdcLogic14machineControlEv+0x80>
			triggerStartForReq=2;
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <_ZN9LpdcLogic14machineControlEv+0x98>)
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	701a      	strb	r2, [r3, #0]
		{
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
		}
	}

}
 8003d90:	e018      	b.n	8003dc4 <_ZN9LpdcLogic14machineControlEv+0x80>
	else if(triggerStartForReq==2){
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <_ZN9LpdcLogic14machineControlEv+0x98>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d114      	bne.n	8003dc4 <_ZN9LpdcLogic14machineControlEv+0x80>
		if((productionInc <= productionTarget)&&(startStopStatus!=2))
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <_ZN9LpdcLogic14machineControlEv+0x90>)
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <_ZN9LpdcLogic14machineControlEv+0xa0>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d809      	bhi.n	8003dba <_ZN9LpdcLogic14machineControlEv+0x76>
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <_ZN9LpdcLogic14machineControlEv+0xa4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d005      	beq.n	8003dba <_ZN9LpdcLogic14machineControlEv+0x76>
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_SET);
 8003dae:	2201      	movs	r2, #1
 8003db0:	2120      	movs	r1, #32
 8003db2:	480e      	ldr	r0, [pc, #56]	; (8003dec <_ZN9LpdcLogic14machineControlEv+0xa8>)
 8003db4:	f007 fae6 	bl	800b384 <HAL_GPIO_WritePin>
}
 8003db8:	e004      	b.n	8003dc4 <_ZN9LpdcLogic14machineControlEv+0x80>
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	480b      	ldr	r0, [pc, #44]	; (8003dec <_ZN9LpdcLogic14machineControlEv+0xa8>)
 8003dc0:	f007 fae0 	bl	800b384 <HAL_GPIO_WritePin>
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000010a 	.word	0x2000010a
 8003dd0:	200007a0 	.word	0x200007a0
 8003dd4:	2000079e 	.word	0x2000079e
 8003dd8:	2000079d 	.word	0x2000079d
 8003ddc:	200007a4 	.word	0x200007a4
 8003de0:	20000102 	.word	0x20000102
 8003de4:	200007a2 	.word	0x200007a2
 8003de8:	2000010f 	.word	0x2000010f
 8003dec:	48000800 	.word	0x48000800

08003df0 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <_ZN6commonC1Ev+0x1c>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	08010fd0 	.word	0x08010fd0

08003e10 <_ZN6commonD1Ev>:

common::~common() {
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <_ZN6commonD1Ev+0x1c>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	08010fd0 	.word	0x08010fd0

08003e30 <_ZN6commonD0Ev>:
common::~common() {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
}
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ffe9 	bl	8003e10 <_ZN6commonD1Ev>
 8003e3e:	2104      	movs	r1, #4
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f00c f9e6 	bl	8010212 <_ZdlPvj>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <_ZN14DisplayRoutineC1Ev>:
extern uint16_t productiontimeSetOL;

char GLCDNumericArray[2];
char gLCDNumericArraySize_4[4];

DisplayRoutine::DisplayRoutine() {
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <_ZN14DisplayRoutineC1Ev+0xa4>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fa2a 	bl	80042bc <_ZN4GLCDC1Ev>
 8003e68:	687d      	ldr	r5, [r7, #4]
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <_ZN14DisplayRoutineC1Ev+0xa8>)
 8003e6c:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8003e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e72:	c407      	stmia	r4!, {r0, r1, r2}
 8003e74:	8023      	strh	r3, [r4, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <_ZN14DisplayRoutineC1Ev+0xac>)
 8003e80:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	491d      	ldr	r1, [pc, #116]	; (8003f00 <_ZN14DisplayRoutineC1Ev+0xb0>)
 8003e8c:	f603 2219 	addw	r2, r3, #2585	; 0xa19
 8003e90:	8808      	ldrh	r0, [r1, #0]
 8003e92:	7889      	ldrb	r1, [r1, #2]
 8003e94:	8010      	strh	r0, [r2, #0]
 8003e96:	7091      	strb	r1, [r2, #2]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <_ZN14DisplayRoutineC1Ev+0xb4>)
 8003ea2:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8003ea6:	8812      	ldrh	r2, [r2, #0]
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	687d      	ldr	r5, [r7, #4]
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <_ZN14DisplayRoutineC1Ev+0xb8>)
 8003eae:	f605 241f 	addw	r4, r5, #2591	; 0xa1f
 8003eb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003eb4:	6020      	str	r0, [r4, #0]
 8003eb6:	6061      	str	r1, [r4, #4]
 8003eb8:	60a2      	str	r2, [r4, #8]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f885 3a2b 	strb.w	r3, [r5, #2603]	; 0xa2b
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <_ZN14DisplayRoutineC1Ev+0xbc>)
 8003ec4:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 8003ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 8003ed4:	687d      	ldr	r5, [r7, #4]
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <_ZN14DisplayRoutineC1Ev+0xc0>)
 8003ed8:	f605 2439 	addw	r4, r5, #2617	; 0xa39
 8003edc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ede:	6020      	str	r0, [r4, #0]
 8003ee0:	6061      	str	r1, [r4, #4]
 8003ee2:	60a2      	str	r2, [r4, #8]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f885 3a45 	strb.w	r3, [r5, #2629]	; 0xa45
	// TODO Auto-generated constructor stub

}
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ef4:	08010fe0 	.word	0x08010fe0
 8003ef8:	08010b84 	.word	0x08010b84
 8003efc:	08010b94 	.word	0x08010b94
 8003f00:	08010b98 	.word	0x08010b98
 8003f04:	08010b9c 	.word	0x08010b9c
 8003f08:	08010ba0 	.word	0x08010ba0
 8003f0c:	08010bb0 	.word	0x08010bb0
 8003f10:	08010bc0 	.word	0x08010bc0

08003f14 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <_ZN14DisplayRoutineD1Ev+0x24>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 f944 	bl	80081b4 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	08010fe0 	.word	0x08010fe0

08003f3c <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
}
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ffe5 	bl	8003f14 <_ZN14DisplayRoutineD1Ev>
 8003f4a:	f640 2148 	movw	r1, #2632	; 0xa48
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f00c f95f 	bl	8010212 <_ZdlPvj>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1d18      	adds	r0, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8003f72:	2201      	movs	r2, #1
 8003f74:	2100      	movs	r1, #0
 8003f76:	f004 fbdd 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(hour_t,2,0);
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <_ZN14DisplayRoutine3runEv+0x160>)
 8003f7c:	7819      	ldrb	r1, [r3, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2202      	movs	r2, #2
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8b2 	bl	80040ec <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(15,2,colon);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1d18      	adds	r0, r3, #4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8003f92:	2202      	movs	r2, #2
 8003f94:	210f      	movs	r1, #15
 8003f96:	f004 fbcd 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(min_t,2,20);
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <_ZN14DisplayRoutine3runEv+0x164>)
 8003f9c:	7819      	ldrb	r1, [r3, #0]
 8003f9e:	2314      	movs	r3, #20
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8a2 	bl	80040ec <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(35,2,colon);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	1d18      	adds	r0, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	2123      	movs	r1, #35	; 0x23
 8003fb6:	f004 fbbd 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(sec_t,2,40);
 8003fba:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <_ZN14DisplayRoutine3runEv+0x168>)
 8003fbc:	7819      	ldrb	r1, [r3, #0]
 8003fbe:	2328      	movs	r3, #40	; 0x28
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f892 	bl	80040ec <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(54,2,space);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	2136      	movs	r1, #54	; 0x36
 8003fd6:	f004 fbad 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(date_Rtc,2,65);
 8003fda:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <_ZN14DisplayRoutine3runEv+0x16c>)
 8003fdc:	7819      	ldrb	r1, [r3, #0]
 8003fde:	2341      	movs	r3, #65	; 0x41
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f882 	bl	80040ec <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(81,2,backslash);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1d18      	adds	r0, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	2151      	movs	r1, #81	; 0x51
 8003ff6:	f004 fb9d 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(month_Rtc,2,86);
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <_ZN14DisplayRoutine3runEv+0x170>)
 8003ffc:	7819      	ldrb	r1, [r3, #0]
 8003ffe:	2356      	movs	r3, #86	; 0x56
 8004000:	2202      	movs	r2, #2
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f872 	bl	80040ec <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(103,2,backslash);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1d18      	adds	r0, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8004012:	2202      	movs	r2, #2
 8004014:	2167      	movs	r1, #103	; 0x67
 8004016:	f004 fb8d 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(year_Rtc,2,110);
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <_ZN14DisplayRoutine3runEv+0x174>)
 800401c:	7819      	ldrb	r1, [r3, #0]
 800401e:	236e      	movs	r3, #110	; 0x6e
 8004020:	2202      	movs	r2, #2
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f862 	bl	80040ec <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(0,3,production);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1d18      	adds	r0, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f603 231f 	addw	r3, r3, #2591	; 0xa1f
 8004032:	2203      	movs	r2, #3
 8004034:	2100      	movs	r1, #0
 8004036:	f004 fb7d 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Production_Total,3,85);
 800403a:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <_ZN14DisplayRoutine3runEv+0x178>)
 800403c:	8819      	ldrh	r1, [r3, #0]
 800403e:	2355      	movs	r3, #85	; 0x55
 8004040:	2203      	movs	r2, #3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f892 	bl	800416c <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	1d18      	adds	r0, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8004052:	2204      	movs	r2, #4
 8004054:	2100      	movs	r1, #0
 8004056:	f004 fb6d 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Rejection_Total,4,85);
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <_ZN14DisplayRoutine3runEv+0x17c>)
 800405c:	8819      	ldrh	r1, [r3, #0]
 800405e:	2355      	movs	r3, #85	; 0x55
 8004060:	2204      	movs	r2, #4
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f882 	bl	800416c <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1d18      	adds	r0, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f603 2339 	addw	r3, r3, #2617	; 0xa39
 8004072:	2205      	movs	r2, #5
 8004074:	2100      	movs	r1, #0
 8004076:	f004 fb5d 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(productiontimeSetOL,5,90);
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <_ZN14DisplayRoutine3runEv+0x180>)
 800407c:	8819      	ldrh	r1, [r3, #0]
 800407e:	235a      	movs	r3, #90	; 0x5a
 8004080:	2205      	movs	r2, #5
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f872 	bl	800416c <_ZN14DisplayRoutine11value4DigitEthh>
	value4Digit(wifi_command,6,0);
 8004088:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <_ZN14DisplayRoutine3runEv+0x184>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b299      	uxth	r1, r3
 800408e:	2300      	movs	r3, #0
 8004090:	2206      	movs	r2, #6
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f86a 	bl	800416c <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(40,6,space);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1d18      	adds	r0, r3, #4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 80040a2:	2206      	movs	r2, #6
 80040a4:	2128      	movs	r1, #40	; 0x28
 80040a6:	f004 fb45 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(SectorPos,6,80);
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <_ZN14DisplayRoutine3runEv+0x188>)
 80040ac:	8819      	ldrh	r1, [r3, #0]
 80040ae:	2350      	movs	r3, #80	; 0x50
 80040b0:	2206      	movs	r2, #6
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f85a 	bl	800416c <_ZN14DisplayRoutine11value4DigitEthh>

}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	200009f8 	.word	0x200009f8
 80040c4:	200009f9 	.word	0x200009f9
 80040c8:	200009fa 	.word	0x200009fa
 80040cc:	200009fc 	.word	0x200009fc
 80040d0:	200009fd 	.word	0x200009fd
 80040d4:	200009fe 	.word	0x200009fe
 80040d8:	200000fe 	.word	0x200000fe
 80040dc:	20000100 	.word	0x20000100
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000a01 	.word	0x20000a01
 80040e8:	200009ca 	.word	0x200009ca

080040ec <_ZN14DisplayRoutine11value2DigitEhhh>:

void DisplayRoutine::value2Digit(uint8_t value,uint8_t posLine,uint8_t posCol)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	70fb      	strb	r3, [r7, #3]
 80040fe:	460b      	mov	r3, r1
 8004100:	70bb      	strb	r3, [r7, #2]
 8004102:	4613      	mov	r3, r2
 8004104:	707b      	strb	r3, [r7, #1]
	GLCDNumericArray[0] =(unsigned char)(((value%100)/10)+0x30);
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	4a15      	ldr	r2, [pc, #84]	; (8004160 <_ZN14DisplayRoutine11value2DigitEhhh+0x74>)
 800410a:	fba2 1203 	umull	r1, r2, r2, r3
 800410e:	0952      	lsrs	r2, r2, #5
 8004110:	2164      	movs	r1, #100	; 0x64
 8004112:	fb01 f202 	mul.w	r2, r1, r2
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	b2db      	uxtb	r3, r3
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	3330      	adds	r3, #48	; 0x30
 8004126:	b2da      	uxtb	r2, r3
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 800412a:	701a      	strb	r2, [r3, #0]
    GLCDNumericArray[1] =(unsigned char)((value%10)+0x30);
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	08d9      	lsrs	r1, r3, #3
 8004136:	460b      	mov	r3, r1
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	3330      	adds	r3, #48	; 0x30
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8004148:	705a      	strb	r2, [r3, #1]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	1d18      	adds	r0, r3, #4
 800414e:	78ba      	ldrb	r2, [r7, #2]
 8004150:	7879      	ldrb	r1, [r7, #1]
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8004154:	f004 faee 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	51eb851f 	.word	0x51eb851f
 8004164:	cccccccd 	.word	0xcccccccd
 8004168:	200007a8 	.word	0x200007a8

0800416c <_ZN14DisplayRoutine11value4DigitEthh>:
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	4603      	mov	r3, r0
 800417c:	807b      	strh	r3, [r7, #2]
 800417e:	460b      	mov	r3, r1
 8004180:	707b      	strb	r3, [r7, #1]
 8004182:	4613      	mov	r3, r2
 8004184:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <_ZN14DisplayRoutine11value4DigitEthh+0xcc>)
 800418a:	fba2 1203 	umull	r1, r2, r2, r3
 800418e:	0b52      	lsrs	r2, r2, #13
 8004190:	f242 7110 	movw	r1, #10000	; 0x2710
 8004194:	fb01 f202 	mul.w	r2, r1, r2
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3330      	adds	r3, #48	; 0x30
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b24      	ldr	r3, [pc, #144]	; (8004240 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80041ae:	701a      	strb	r2, [r3, #0]
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	4a22      	ldr	r2, [pc, #136]	; (800423c <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 80041b4:	fba2 1203 	umull	r1, r2, r2, r3
 80041b8:	0992      	lsrs	r2, r2, #6
 80041ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041be:	fb01 f202 	mul.w	r2, r1, r2
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3330      	adds	r3, #48	; 0x30
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80041d8:	705a      	strb	r2, [r3, #1]
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80041de:	fba2 1203 	umull	r1, r2, r2, r3
 80041e2:	0952      	lsrs	r2, r2, #5
 80041e4:	2164      	movs	r1, #100	; 0x64
 80041e6:	fb01 f202 	mul.w	r2, r1, r2
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4a16      	ldr	r2, [pc, #88]	; (8004248 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	08db      	lsrs	r3, r3, #3
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3330      	adds	r3, #48	; 0x30
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8004200:	709a      	strb	r2, [r3, #2]
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8004206:	fba3 1302 	umull	r1, r3, r3, r2
 800420a:	08d9      	lsrs	r1, r3, #3
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	b29b      	uxth	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3330      	adds	r3, #48	; 0x30
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8004220:	70da      	strb	r2, [r3, #3]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1d18      	adds	r0, r3, #4
 8004226:	787a      	ldrb	r2, [r7, #1]
 8004228:	7839      	ldrb	r1, [r7, #0]
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 800422c:	f004 fa82 	bl	8008734 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	d1b71759 	.word	0xd1b71759
 800423c:	10624dd3 	.word	0x10624dd3
 8004240:	200007ac 	.word	0x200007ac
 8004244:	51eb851f 	.word	0x51eb851f
 8004248:	cccccccd 	.word	0xcccccccd

0800424c <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f004 f88d 	bl	8008378 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f004 f989 	bl	800857c <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f004 faa0 	bl	80087b4 <_ZN4GLCD8m_clrlcdEv>


}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
 8004288:	4613      	mov	r3, r2
 800428a:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	78bb      	ldrb	r3, [r7, #2]
 800429a:	4013      	ands	r3, r2
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e001      	b.n	80042ac <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
	}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <_ZN4GLCDC1Ev>:
#include "main.h"
#include <string.h>
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
uint8_t length;
GLCD::GLCD() {
 80042bc:	b5b0      	push	{r4, r5, r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fd92 	bl	8003df0 <_ZN6commonC1Ev>
 80042cc:	4ac8      	ldr	r2, [pc, #800]	; (80045f0 <_ZN4GLCDC1Ev+0x334>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	687d      	ldr	r5, [r7, #4]
 80042d4:	4bc7      	ldr	r3, [pc, #796]	; (80045f4 <_ZN4GLCDC1Ev+0x338>)
 80042d6:	1d2c      	adds	r4, r5, #4
 80042d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042da:	c407      	stmia	r4!, {r0, r1, r2}
 80042dc:	8023      	strh	r3, [r4, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	74ab      	strb	r3, [r5, #18]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	615a      	str	r2, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	775a      	strb	r2, [r3, #29]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	331e      	adds	r3, #30
 80042f8:	f640 0208 	movw	r2, #2056	; 0x808
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f00b ffcc 	bl	801029c <memset>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	227e      	movs	r2, #126	; 0x7e
 8004308:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2281      	movs	r2, #129	; 0x81
 8004310:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2295      	movs	r2, #149	; 0x95
 8004318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	22b1      	movs	r2, #177	; 0xb1
 8004320:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	22b1      	movs	r2, #177	; 0xb1
 8004328:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2295      	movs	r2, #149	; 0x95
 8004330:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2281      	movs	r2, #129	; 0x81
 8004338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	227e      	movs	r2, #126	; 0x7e
 8004340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	227e      	movs	r2, #126	; 0x7e
 8004348:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	22ff      	movs	r2, #255	; 0xff
 8004350:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	22eb      	movs	r2, #235	; 0xeb
 8004358:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	22cf      	movs	r2, #207	; 0xcf
 8004360:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	22cf      	movs	r2, #207	; 0xcf
 8004368:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	22eb      	movs	r2, #235	; 0xeb
 8004370:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	22ff      	movs	r2, #255	; 0xff
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	227e      	movs	r2, #126	; 0x7e
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	220e      	movs	r2, #14
 8004388:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	221f      	movs	r2, #31
 8004390:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223f      	movs	r2, #63	; 0x3f
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	227e      	movs	r2, #126	; 0x7e
 80043a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	223f      	movs	r2, #63	; 0x3f
 80043a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	221f      	movs	r2, #31
 80043b0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	220e      	movs	r2, #14
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2208      	movs	r2, #8
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	221c      	movs	r2, #28
 80043c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	223e      	movs	r2, #62	; 0x3e
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	227f      	movs	r2, #127	; 0x7f
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	223e      	movs	r2, #62	; 0x3e
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	221c      	movs	r2, #28
 80043e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2208      	movs	r2, #8
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2218      	movs	r2, #24
 80043f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	22ba      	movs	r2, #186	; 0xba
 8004400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	22ba      	movs	r2, #186	; 0xba
 8004420:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2218      	movs	r2, #24
 8004428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2210      	movs	r2, #16
 8004430:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	22b8      	movs	r2, #184	; 0xb8
 8004438:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	22fc      	movs	r2, #252	; 0xfc
 8004440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	22ff      	movs	r2, #255	; 0xff
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	22fc      	movs	r2, #252	; 0xfc
 8004450:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	22b8      	movs	r2, #184	; 0xb8
 8004458:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2210      	movs	r2, #16
 8004460:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2218      	movs	r2, #24
 8004468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	223c      	movs	r2, #60	; 0x3c
 8004470:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	223c      	movs	r2, #60	; 0x3c
 8004478:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2218      	movs	r2, #24
 8004480:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	22ff      	movs	r2, #255	; 0xff
 8004488:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	22ff      	movs	r2, #255	; 0xff
 8004490:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	22e7      	movs	r2, #231	; 0xe7
 8004498:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	22c3      	movs	r2, #195	; 0xc3
 80044a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	22c3      	movs	r2, #195	; 0xc3
 80044a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	22e7      	movs	r2, #231	; 0xe7
 80044b0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	22ff      	movs	r2, #255	; 0xff
 80044c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	223c      	movs	r2, #60	; 0x3c
 80044c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2266      	movs	r2, #102	; 0x66
 80044d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2242      	movs	r2, #66	; 0x42
 80044d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2242      	movs	r2, #66	; 0x42
 80044e0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2266      	movs	r2, #102	; 0x66
 80044e8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	223c      	movs	r2, #60	; 0x3c
 80044f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	22c3      	movs	r2, #195	; 0xc3
 8004500:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2299      	movs	r2, #153	; 0x99
 8004508:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	22bd      	movs	r2, #189	; 0xbd
 8004510:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	22bd      	movs	r2, #189	; 0xbd
 8004518:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2299      	movs	r2, #153	; 0x99
 8004520:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	22c3      	movs	r2, #195	; 0xc3
 8004528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	22ff      	movs	r2, #255	; 0xff
 8004530:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2270      	movs	r2, #112	; 0x70
 8004538:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	22f8      	movs	r2, #248	; 0xf8
 8004540:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2288      	movs	r2, #136	; 0x88
 8004548:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2288      	movs	r2, #136	; 0x88
 8004550:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	22fd      	movs	r2, #253	; 0xfd
 8004558:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	227f      	movs	r2, #127	; 0x7f
 8004560:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2207      	movs	r2, #7
 8004568:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	220f      	movs	r2, #15
 8004570:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	224e      	movs	r2, #78	; 0x4e
 8004578:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	225f      	movs	r2, #95	; 0x5f
 8004580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	22f1      	movs	r2, #241	; 0xf1
 8004588:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	22f1      	movs	r2, #241	; 0xf1
 8004590:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	225f      	movs	r2, #95	; 0x5f
 8004598:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	224e      	movs	r2, #78	; 0x4e
 80045a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	22c0      	movs	r2, #192	; 0xc0
 80045a8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	22e0      	movs	r2, #224	; 0xe0
 80045b0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	22ff      	movs	r2, #255	; 0xff
 80045b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	227f      	movs	r2, #127	; 0x7f
 80045c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2205      	movs	r2, #5
 80045c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2205      	movs	r2, #5
 80045d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2207      	movs	r2, #7
 80045d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2207      	movs	r2, #7
 80045e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	22c0      	movs	r2, #192	; 0xc0
 80045e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80045ec:	e004      	b.n	80045f8 <_ZN4GLCDC1Ev+0x33c>
 80045ee:	bf00      	nop
 80045f0:	08010ff0 	.word	0x08010ff0
 80045f4:	08010bd0 	.word	0x08010bd0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	22ff      	movs	r2, #255	; 0xff
 80045fc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	227f      	movs	r2, #127	; 0x7f
 8004604:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2205      	movs	r2, #5
 800460c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2205      	movs	r2, #5
 8004614:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2265      	movs	r2, #101	; 0x65
 800461c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	227f      	movs	r2, #127	; 0x7f
 8004624:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	223f      	movs	r2, #63	; 0x3f
 800462c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2299      	movs	r2, #153	; 0x99
 8004634:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	225a      	movs	r2, #90	; 0x5a
 800463c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	223c      	movs	r2, #60	; 0x3c
 8004644:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	22e7      	movs	r2, #231	; 0xe7
 800464c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	22e7      	movs	r2, #231	; 0xe7
 8004654:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	223c      	movs	r2, #60	; 0x3c
 800465c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	225a      	movs	r2, #90	; 0x5a
 8004664:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2299      	movs	r2, #153	; 0x99
 800466c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	227f      	movs	r2, #127	; 0x7f
 8004674:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	223e      	movs	r2, #62	; 0x3e
 800467c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	223e      	movs	r2, #62	; 0x3e
 8004684:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	221c      	movs	r2, #28
 800468c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	221c      	movs	r2, #28
 8004694:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2208      	movs	r2, #8
 800469c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2208      	movs	r2, #8
 80046a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2208      	movs	r2, #8
 80046ac:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2208      	movs	r2, #8
 80046b4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	221c      	movs	r2, #28
 80046bc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	221c      	movs	r2, #28
 80046c4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	223e      	movs	r2, #62	; 0x3e
 80046cc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	223e      	movs	r2, #62	; 0x3e
 80046d4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	227f      	movs	r2, #127	; 0x7f
 80046dc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2266      	movs	r2, #102	; 0x66
 80046ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	22ff      	movs	r2, #255	; 0xff
 80046fc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2266      	movs	r2, #102	; 0x66
 8004704:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	225f      	movs	r2, #95	; 0x5f
 8004714:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	225f      	movs	r2, #95	; 0x5f
 800471c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	225f      	movs	r2, #95	; 0x5f
 8004724:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	225f      	movs	r2, #95	; 0x5f
 800472c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2206      	movs	r2, #6
 8004734:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	220f      	movs	r2, #15
 800473c:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2209      	movs	r2, #9
 8004744:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	227f      	movs	r2, #127	; 0x7f
 800474c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	227f      	movs	r2, #127	; 0x7f
 8004754:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	227f      	movs	r2, #127	; 0x7f
 8004764:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	227f      	movs	r2, #127	; 0x7f
 800476c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2240      	movs	r2, #64	; 0x40
 8004774:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	22da      	movs	r2, #218	; 0xda
 800477c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	22bf      	movs	r2, #191	; 0xbf
 8004784:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	22a5      	movs	r2, #165	; 0xa5
 800478c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	22fd      	movs	r2, #253	; 0xfd
 8004794:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2259      	movs	r2, #89	; 0x59
 800479c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2270      	movs	r2, #112	; 0x70
 80047b4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2270      	movs	r2, #112	; 0x70
 80047bc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2270      	movs	r2, #112	; 0x70
 80047c4:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2270      	movs	r2, #112	; 0x70
 80047cc:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2270      	movs	r2, #112	; 0x70
 80047d4:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2270      	movs	r2, #112	; 0x70
 80047dc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2280      	movs	r2, #128	; 0x80
 80047e4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2294      	movs	r2, #148	; 0x94
 80047ec:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	22b6      	movs	r2, #182	; 0xb6
 80047f4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	22ff      	movs	r2, #255	; 0xff
 80047fc:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	22ff      	movs	r2, #255	; 0xff
 8004804:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	22b6      	movs	r2, #182	; 0xb6
 800480c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2294      	movs	r2, #148	; 0x94
 8004814:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2204      	movs	r2, #4
 8004824:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2206      	movs	r2, #6
 800482c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	227f      	movs	r2, #127	; 0x7f
 8004834:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	227f      	movs	r2, #127	; 0x7f
 800483c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2206      	movs	r2, #6
 8004844:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2204      	movs	r2, #4
 800484c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2210      	movs	r2, #16
 8004854:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2230      	movs	r2, #48	; 0x30
 800485c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	227f      	movs	r2, #127	; 0x7f
 8004864:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	227f      	movs	r2, #127	; 0x7f
 800486c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2230      	movs	r2, #48	; 0x30
 8004874:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2210      	movs	r2, #16
 800487c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2208      	movs	r2, #8
 8004884:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2208      	movs	r2, #8
 800488c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2208      	movs	r2, #8
 8004894:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	222a      	movs	r2, #42	; 0x2a
 800489c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	223e      	movs	r2, #62	; 0x3e
 80048a4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	221c      	movs	r2, #28
 80048ac:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2208      	movs	r2, #8
 80048b4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2208      	movs	r2, #8
 80048bc:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	221c      	movs	r2, #28
 80048c4:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	223e      	movs	r2, #62	; 0x3e
 80048cc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	222a      	movs	r2, #42	; 0x2a
 80048d4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2208      	movs	r2, #8
 80048dc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2208      	movs	r2, #8
 80048e4:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2208      	movs	r2, #8
 80048ec:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	223c      	movs	r2, #60	; 0x3c
 80048f4:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	223c      	movs	r2, #60	; 0x3c
 80048fc:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2208      	movs	r2, #8
 800492c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	221c      	movs	r2, #28
 8004934:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	223e      	movs	r2, #62	; 0x3e
 800493c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2208      	movs	r2, #8
 8004944:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2208      	movs	r2, #8
 800494c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	223e      	movs	r2, #62	; 0x3e
 8004954:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	221c      	movs	r2, #28
 800495c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2208      	movs	r2, #8
 8004964:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2230      	movs	r2, #48	; 0x30
 800496c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2238      	movs	r2, #56	; 0x38
 8004974:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	223c      	movs	r2, #60	; 0x3c
 800497c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	223e      	movs	r2, #62	; 0x3e
 8004984:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223e      	movs	r2, #62	; 0x3e
 800498c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	223c      	movs	r2, #60	; 0x3c
 8004994:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2238      	movs	r2, #56	; 0x38
 800499c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2230      	movs	r2, #48	; 0x30
 80049a4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2206      	movs	r2, #6
 80049ac:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	220e      	movs	r2, #14
 80049b4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	221e      	movs	r2, #30
 80049bc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	223e      	movs	r2, #62	; 0x3e
 80049c4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	223e      	movs	r2, #62	; 0x3e
 80049cc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	221e      	movs	r2, #30
 80049d4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	220e      	movs	r2, #14
 80049dc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2206      	movs	r2, #6
 80049e4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2206      	movs	r2, #6
 80049ec:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	225f      	movs	r2, #95	; 0x5f
 80049f4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	225f      	movs	r2, #95	; 0x5f
 80049fc:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2206      	movs	r2, #6
 8004a04:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2207      	movs	r2, #7
 8004a0c:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2207      	movs	r2, #7
 8004a14:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2207      	movs	r2, #7
 8004a24:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2214      	movs	r2, #20
 8004a2c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	227f      	movs	r2, #127	; 0x7f
 8004a34:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	227f      	movs	r2, #127	; 0x7f
 8004a3c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2214      	movs	r2, #20
 8004a44:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	227f      	movs	r2, #127	; 0x7f
 8004a4c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	227f      	movs	r2, #127	; 0x7f
 8004a54:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2214      	movs	r2, #20
 8004a5c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	; 0x24
 8004a64:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	222e      	movs	r2, #46	; 0x2e
 8004a6c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	226b      	movs	r2, #107	; 0x6b
 8004a74:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	226b      	movs	r2, #107	; 0x6b
 8004a7c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	223a      	movs	r2, #58	; 0x3a
 8004a84:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2212      	movs	r2, #18
 8004a8c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2246      	movs	r2, #70	; 0x46
 8004a94:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2266      	movs	r2, #102	; 0x66
 8004a9c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2230      	movs	r2, #48	; 0x30
 8004aa4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2218      	movs	r2, #24
 8004aac:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	220c      	movs	r2, #12
 8004ab4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2266      	movs	r2, #102	; 0x66
 8004abc:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2262      	movs	r2, #98	; 0x62
 8004ac4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2230      	movs	r2, #48	; 0x30
 8004acc:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	227a      	movs	r2, #122	; 0x7a
 8004ad4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	224f      	movs	r2, #79	; 0x4f
 8004adc:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	225d      	movs	r2, #93	; 0x5d
 8004ae4:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2237      	movs	r2, #55	; 0x37
 8004aec:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	227a      	movs	r2, #122	; 0x7a
 8004af4:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2248      	movs	r2, #72	; 0x48
 8004afc:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2204      	movs	r2, #4
 8004b04:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2203      	movs	r2, #3
 8004b14:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	221c      	movs	r2, #28
 8004b1c:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	223e      	movs	r2, #62	; 0x3e
 8004b24:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2263      	movs	r2, #99	; 0x63
 8004b2c:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2241      	movs	r2, #65	; 0x41
 8004b34:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2241      	movs	r2, #65	; 0x41
 8004b3c:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2263      	movs	r2, #99	; 0x63
 8004b44:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	223e      	movs	r2, #62	; 0x3e
 8004b4c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	221c      	movs	r2, #28
 8004b54:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	222a      	movs	r2, #42	; 0x2a
 8004b64:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	223e      	movs	r2, #62	; 0x3e
 8004b6c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	221c      	movs	r2, #28
 8004b74:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	221c      	movs	r2, #28
 8004b7c:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	223e      	movs	r2, #62	; 0x3e
 8004b84:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	222a      	movs	r2, #42	; 0x2a
 8004b8c:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2208      	movs	r2, #8
 8004b94:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	223e      	movs	r2, #62	; 0x3e
 8004bac:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	223e      	movs	r2, #62	; 0x3e
 8004bb4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2208      	movs	r2, #8
 8004bbc:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	22e0      	movs	r2, #224	; 0xe0
 8004bd4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2260      	movs	r2, #96	; 0x60
 8004bdc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2208      	movs	r2, #8
 8004be4:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2208      	movs	r2, #8
 8004bec:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2208      	movs	r2, #8
 8004c04:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2260      	movs	r2, #96	; 0x60
 8004c14:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2260      	movs	r2, #96	; 0x60
 8004c1c:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2260      	movs	r2, #96	; 0x60
 8004c24:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2230      	movs	r2, #48	; 0x30
 8004c2c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2218      	movs	r2, #24
 8004c34:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	220c      	movs	r2, #12
 8004c3c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2206      	movs	r2, #6
 8004c44:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	223e      	movs	r2, #62	; 0x3e
 8004c5c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	227f      	movs	r2, #127	; 0x7f
 8004c64:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2271      	movs	r2, #113	; 0x71
 8004c6c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2259      	movs	r2, #89	; 0x59
 8004c74:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	224d      	movs	r2, #77	; 0x4d
 8004c7c:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	227f      	movs	r2, #127	; 0x7f
 8004c84:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	223e      	movs	r2, #62	; 0x3e
 8004c8c:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2240      	movs	r2, #64	; 0x40
 8004c94:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2242      	movs	r2, #66	; 0x42
 8004c9c:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	227f      	movs	r2, #127	; 0x7f
 8004ca4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	227f      	movs	r2, #127	; 0x7f
 8004cac:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2240      	movs	r2, #64	; 0x40
 8004cb4:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2262      	movs	r2, #98	; 0x62
 8004cc4:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2273      	movs	r2, #115	; 0x73
 8004ccc:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2259      	movs	r2, #89	; 0x59
 8004cd4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2249      	movs	r2, #73	; 0x49
 8004cdc:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	226f      	movs	r2, #111	; 0x6f
 8004ce4:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2266      	movs	r2, #102	; 0x66
 8004cec:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2222      	movs	r2, #34	; 0x22
 8004cf4:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2263      	movs	r2, #99	; 0x63
 8004cfc:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2249      	movs	r2, #73	; 0x49
 8004d04:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2249      	movs	r2, #73	; 0x49
 8004d0c:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	227f      	movs	r2, #127	; 0x7f
 8004d14:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2236      	movs	r2, #54	; 0x36
 8004d1c:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2218      	movs	r2, #24
 8004d24:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	221c      	movs	r2, #28
 8004d2c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2216      	movs	r2, #22
 8004d34:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2253      	movs	r2, #83	; 0x53
 8004d3c:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	227f      	movs	r2, #127	; 0x7f
 8004d44:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	227f      	movs	r2, #127	; 0x7f
 8004d4c:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2250      	movs	r2, #80	; 0x50
 8004d54:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2227      	movs	r2, #39	; 0x27
 8004d5c:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2267      	movs	r2, #103	; 0x67
 8004d64:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2245      	movs	r2, #69	; 0x45
 8004d6c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2245      	movs	r2, #69	; 0x45
 8004d74:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	227d      	movs	r2, #125	; 0x7d
 8004d7c:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2239      	movs	r2, #57	; 0x39
 8004d84:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	223c      	movs	r2, #60	; 0x3c
 8004d8c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	227e      	movs	r2, #126	; 0x7e
 8004d94:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	224b      	movs	r2, #75	; 0x4b
 8004d9c:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2249      	movs	r2, #73	; 0x49
 8004da4:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2279      	movs	r2, #121	; 0x79
 8004dac:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2230      	movs	r2, #48	; 0x30
 8004db4:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2203      	movs	r2, #3
 8004dbc:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2271      	movs	r2, #113	; 0x71
 8004dcc:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2279      	movs	r2, #121	; 0x79
 8004dd4:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	220f      	movs	r2, #15
 8004ddc:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2207      	movs	r2, #7
 8004de4:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2236      	movs	r2, #54	; 0x36
 8004dec:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	227f      	movs	r2, #127	; 0x7f
 8004df4:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2249      	movs	r2, #73	; 0x49
 8004dfc:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2249      	movs	r2, #73	; 0x49
 8004e04:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	227f      	movs	r2, #127	; 0x7f
 8004e0c:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2236      	movs	r2, #54	; 0x36
 8004e14:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2206      	movs	r2, #6
 8004e1c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	224f      	movs	r2, #79	; 0x4f
 8004e24:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2249      	movs	r2, #73	; 0x49
 8004e2c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2269      	movs	r2, #105	; 0x69
 8004e34:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	223f      	movs	r2, #63	; 0x3f
 8004e3c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	221e      	movs	r2, #30
 8004e44:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2266      	movs	r2, #102	; 0x66
 8004e4c:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2266      	movs	r2, #102	; 0x66
 8004e54:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2280      	movs	r2, #128	; 0x80
 8004e5c:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	22e6      	movs	r2, #230	; 0xe6
 8004e64:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2266      	movs	r2, #102	; 0x66
 8004e6c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2208      	movs	r2, #8
 8004e74:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	221c      	movs	r2, #28
 8004e7c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2236      	movs	r2, #54	; 0x36
 8004e84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2263      	movs	r2, #99	; 0x63
 8004e8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2241      	movs	r2, #65	; 0x41
 8004e94:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2224      	movs	r2, #36	; 0x24
 8004ebc:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2241      	movs	r2, #65	; 0x41
 8004ecc:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2263      	movs	r2, #99	; 0x63
 8004ed4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2236      	movs	r2, #54	; 0x36
 8004edc:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	221c      	movs	r2, #28
 8004ee4:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2208      	movs	r2, #8
 8004eec:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2203      	movs	r2, #3
 8004efc:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2251      	movs	r2, #81	; 0x51
 8004f04:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2259      	movs	r2, #89	; 0x59
 8004f0c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	220f      	movs	r2, #15
 8004f14:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2206      	movs	r2, #6
 8004f1c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	223e      	movs	r2, #62	; 0x3e
 8004f24:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	227f      	movs	r2, #127	; 0x7f
 8004f2c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2241      	movs	r2, #65	; 0x41
 8004f34:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	225d      	movs	r2, #93	; 0x5d
 8004f3c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	225d      	movs	r2, #93	; 0x5d
 8004f44:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	221f      	movs	r2, #31
 8004f4c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	221e      	movs	r2, #30
 8004f54:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	227c      	movs	r2, #124	; 0x7c
 8004f5c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	227e      	movs	r2, #126	; 0x7e
 8004f64:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2213      	movs	r2, #19
 8004f6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2213      	movs	r2, #19
 8004f74:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	227e      	movs	r2, #126	; 0x7e
 8004f7c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	227c      	movs	r2, #124	; 0x7c
 8004f84:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2241      	movs	r2, #65	; 0x41
 8004f8c:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	227f      	movs	r2, #127	; 0x7f
 8004f94:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	227f      	movs	r2, #127	; 0x7f
 8004f9c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2249      	movs	r2, #73	; 0x49
 8004fa4:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2249      	movs	r2, #73	; 0x49
 8004fac:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	227f      	movs	r2, #127	; 0x7f
 8004fb4:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2236      	movs	r2, #54	; 0x36
 8004fbc:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	221c      	movs	r2, #28
 8004fc4:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	223e      	movs	r2, #62	; 0x3e
 8004fcc:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2263      	movs	r2, #99	; 0x63
 8004fd4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2241      	movs	r2, #65	; 0x41
 8004fdc:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2241      	movs	r2, #65	; 0x41
 8004fe4:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2263      	movs	r2, #99	; 0x63
 8004fec:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2222      	movs	r2, #34	; 0x22
 8004ff4:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2241      	movs	r2, #65	; 0x41
 8004ffc:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	227f      	movs	r2, #127	; 0x7f
 8005004:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	227f      	movs	r2, #127	; 0x7f
 800500c:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2241      	movs	r2, #65	; 0x41
 8005014:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2263      	movs	r2, #99	; 0x63
 800501c:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	223e      	movs	r2, #62	; 0x3e
 8005024:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	221c      	movs	r2, #28
 800502c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2241      	movs	r2, #65	; 0x41
 8005034:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	227f      	movs	r2, #127	; 0x7f
 800503c:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	227f      	movs	r2, #127	; 0x7f
 8005044:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2249      	movs	r2, #73	; 0x49
 800504c:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	225d      	movs	r2, #93	; 0x5d
 8005054:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2241      	movs	r2, #65	; 0x41
 800505c:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2263      	movs	r2, #99	; 0x63
 8005064:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2241      	movs	r2, #65	; 0x41
 800506c:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	227f      	movs	r2, #127	; 0x7f
 8005074:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	227f      	movs	r2, #127	; 0x7f
 800507c:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2249      	movs	r2, #73	; 0x49
 8005084:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	221d      	movs	r2, #29
 800508c:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2203      	movs	r2, #3
 800509c:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	221c      	movs	r2, #28
 80050a4:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	223e      	movs	r2, #62	; 0x3e
 80050ac:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2263      	movs	r2, #99	; 0x63
 80050b4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2241      	movs	r2, #65	; 0x41
 80050bc:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2251      	movs	r2, #81	; 0x51
 80050c4:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2273      	movs	r2, #115	; 0x73
 80050cc:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2272      	movs	r2, #114	; 0x72
 80050d4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	227f      	movs	r2, #127	; 0x7f
 80050dc:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	227f      	movs	r2, #127	; 0x7f
 80050e4:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2208      	movs	r2, #8
 80050ec:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2208      	movs	r2, #8
 80050f4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	227f      	movs	r2, #127	; 0x7f
 80050fc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	227f      	movs	r2, #127	; 0x7f
 8005104:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2241      	movs	r2, #65	; 0x41
 800510c:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	227f      	movs	r2, #127	; 0x7f
 8005114:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	227f      	movs	r2, #127	; 0x7f
 800511c:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2241      	movs	r2, #65	; 0x41
 8005124:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2230      	movs	r2, #48	; 0x30
 800512c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2270      	movs	r2, #112	; 0x70
 8005134:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2240      	movs	r2, #64	; 0x40
 800513c:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2241      	movs	r2, #65	; 0x41
 8005144:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	227f      	movs	r2, #127	; 0x7f
 800514c:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	223f      	movs	r2, #63	; 0x3f
 8005154:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2241      	movs	r2, #65	; 0x41
 8005164:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	227f      	movs	r2, #127	; 0x7f
 800516c:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	227f      	movs	r2, #127	; 0x7f
 8005174:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2208      	movs	r2, #8
 800517c:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	221c      	movs	r2, #28
 8005184:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2277      	movs	r2, #119	; 0x77
 800518c:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2263      	movs	r2, #99	; 0x63
 8005194:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2241      	movs	r2, #65	; 0x41
 800519c:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	227f      	movs	r2, #127	; 0x7f
 80051a4:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	227f      	movs	r2, #127	; 0x7f
 80051ac:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2241      	movs	r2, #65	; 0x41
 80051b4:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2260      	movs	r2, #96	; 0x60
 80051c4:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2270      	movs	r2, #112	; 0x70
 80051cc:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	227f      	movs	r2, #127	; 0x7f
 80051d4:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	227f      	movs	r2, #127	; 0x7f
 80051dc:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	220e      	movs	r2, #14
 80051e4:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	221c      	movs	r2, #28
 80051ec:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	220e      	movs	r2, #14
 80051f4:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	227f      	movs	r2, #127	; 0x7f
 80051fc:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	227f      	movs	r2, #127	; 0x7f
 8005204:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	227f      	movs	r2, #127	; 0x7f
 800520c:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	227f      	movs	r2, #127	; 0x7f
 8005214:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2206      	movs	r2, #6
 800521c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	220c      	movs	r2, #12
 8005224:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2218      	movs	r2, #24
 800522c:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	227f      	movs	r2, #127	; 0x7f
 8005234:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	227f      	movs	r2, #127	; 0x7f
 800523c:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	221c      	movs	r2, #28
 8005244:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	223e      	movs	r2, #62	; 0x3e
 800524c:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2263      	movs	r2, #99	; 0x63
 8005254:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2241      	movs	r2, #65	; 0x41
 800525c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2263      	movs	r2, #99	; 0x63
 8005264:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	223e      	movs	r2, #62	; 0x3e
 800526c:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	221c      	movs	r2, #28
 8005274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2241      	movs	r2, #65	; 0x41
 800527c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	227f      	movs	r2, #127	; 0x7f
 8005284:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	227f      	movs	r2, #127	; 0x7f
 800528c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2249      	movs	r2, #73	; 0x49
 8005294:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2209      	movs	r2, #9
 800529c:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	220f      	movs	r2, #15
 80052a4:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2206      	movs	r2, #6
 80052ac:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	221e      	movs	r2, #30
 80052b4:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	223f      	movs	r2, #63	; 0x3f
 80052bc:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2221      	movs	r2, #33	; 0x21
 80052c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2271      	movs	r2, #113	; 0x71
 80052cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	227f      	movs	r2, #127	; 0x7f
 80052d4:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	225e      	movs	r2, #94	; 0x5e
 80052dc:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2241      	movs	r2, #65	; 0x41
 80052e4:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	227f      	movs	r2, #127	; 0x7f
 80052ec:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	227f      	movs	r2, #127	; 0x7f
 80052f4:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2209      	movs	r2, #9
 80052fc:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2219      	movs	r2, #25
 8005304:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	227f      	movs	r2, #127	; 0x7f
 800530c:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2266      	movs	r2, #102	; 0x66
 8005314:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2226      	movs	r2, #38	; 0x26
 800531c:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	226f      	movs	r2, #111	; 0x6f
 8005324:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	224d      	movs	r2, #77	; 0x4d
 800532c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2259      	movs	r2, #89	; 0x59
 8005334:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2273      	movs	r2, #115	; 0x73
 800533c:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2232      	movs	r2, #50	; 0x32
 8005344:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2203      	movs	r2, #3
 800534c:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2241      	movs	r2, #65	; 0x41
 8005354:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	227f      	movs	r2, #127	; 0x7f
 800535c:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	227f      	movs	r2, #127	; 0x7f
 8005364:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2241      	movs	r2, #65	; 0x41
 800536c:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2203      	movs	r2, #3
 8005374:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	227f      	movs	r2, #127	; 0x7f
 800537c:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	227f      	movs	r2, #127	; 0x7f
 8005384:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2240      	movs	r2, #64	; 0x40
 800538c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2240      	movs	r2, #64	; 0x40
 8005394:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	227f      	movs	r2, #127	; 0x7f
 800539c:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	227f      	movs	r2, #127	; 0x7f
 80053a4:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	221f      	movs	r2, #31
 80053ac:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	223f      	movs	r2, #63	; 0x3f
 80053b4:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2260      	movs	r2, #96	; 0x60
 80053bc:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2260      	movs	r2, #96	; 0x60
 80053c4:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	223f      	movs	r2, #63	; 0x3f
 80053cc:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	221f      	movs	r2, #31
 80053d4:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	227f      	movs	r2, #127	; 0x7f
 80053dc:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	227f      	movs	r2, #127	; 0x7f
 80053e4:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2230      	movs	r2, #48	; 0x30
 80053ec:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2218      	movs	r2, #24
 80053f4:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2230      	movs	r2, #48	; 0x30
 80053fc:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	227f      	movs	r2, #127	; 0x7f
 8005404:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	227f      	movs	r2, #127	; 0x7f
 800540c:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2243      	movs	r2, #67	; 0x43
 8005414:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2267      	movs	r2, #103	; 0x67
 800541c:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	223c      	movs	r2, #60	; 0x3c
 8005424:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2218      	movs	r2, #24
 800542c:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	223c      	movs	r2, #60	; 0x3c
 8005434:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2267      	movs	r2, #103	; 0x67
 800543c:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2243      	movs	r2, #67	; 0x43
 8005444:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2207      	movs	r2, #7
 800544c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	224f      	movs	r2, #79	; 0x4f
 8005454:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2278      	movs	r2, #120	; 0x78
 800545c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2278      	movs	r2, #120	; 0x78
 8005464:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	224f      	movs	r2, #79	; 0x4f
 800546c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2207      	movs	r2, #7
 8005474:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2247      	movs	r2, #71	; 0x47
 800547c:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2263      	movs	r2, #99	; 0x63
 8005484:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2271      	movs	r2, #113	; 0x71
 800548c:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2259      	movs	r2, #89	; 0x59
 8005494:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	224d      	movs	r2, #77	; 0x4d
 800549c:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2267      	movs	r2, #103	; 0x67
 80054a4:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2273      	movs	r2, #115	; 0x73
 80054ac:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	227f      	movs	r2, #127	; 0x7f
 80054b4:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	227f      	movs	r2, #127	; 0x7f
 80054bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2241      	movs	r2, #65	; 0x41
 80054c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2241      	movs	r2, #65	; 0x41
 80054cc:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2203      	movs	r2, #3
 80054dc:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2206      	movs	r2, #6
 80054e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	220c      	movs	r2, #12
 80054ec:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2218      	movs	r2, #24
 80054f4:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2230      	movs	r2, #48	; 0x30
 80054fc:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2260      	movs	r2, #96	; 0x60
 8005504:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2241      	movs	r2, #65	; 0x41
 800550c:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2241      	movs	r2, #65	; 0x41
 8005514:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	227f      	movs	r2, #127	; 0x7f
 800551c:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	227f      	movs	r2, #127	; 0x7f
 8005524:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2208      	movs	r2, #8
 800552c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	220c      	movs	r2, #12
 8005534:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2206      	movs	r2, #6
 800553c:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2203      	movs	r2, #3
 8005544:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2206      	movs	r2, #6
 800554c:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	220c      	movs	r2, #12
 8005554:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2208      	movs	r2, #8
 800555c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2280      	movs	r2, #128	; 0x80
 8005564:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2280      	movs	r2, #128	; 0x80
 800556c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2280      	movs	r2, #128	; 0x80
 8005574:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2203      	movs	r2, #3
 80055a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2207      	movs	r2, #7
 80055ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2204      	movs	r2, #4
 80055b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2274      	movs	r2, #116	; 0x74
 80055c4:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2254      	movs	r2, #84	; 0x54
 80055cc:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2254      	movs	r2, #84	; 0x54
 80055d4:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	223c      	movs	r2, #60	; 0x3c
 80055dc:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2278      	movs	r2, #120	; 0x78
 80055e4:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2241      	movs	r2, #65	; 0x41
 80055f4:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	227f      	movs	r2, #127	; 0x7f
 80055fc:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	223f      	movs	r2, #63	; 0x3f
 8005604:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2248      	movs	r2, #72	; 0x48
 800560c:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2248      	movs	r2, #72	; 0x48
 8005614:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2278      	movs	r2, #120	; 0x78
 800561c:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2230      	movs	r2, #48	; 0x30
 8005624:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2238      	movs	r2, #56	; 0x38
 800562c:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	227c      	movs	r2, #124	; 0x7c
 8005634:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2244      	movs	r2, #68	; 0x44
 800563c:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2244      	movs	r2, #68	; 0x44
 8005644:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	226c      	movs	r2, #108	; 0x6c
 800564c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2228      	movs	r2, #40	; 0x28
 8005654:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2230      	movs	r2, #48	; 0x30
 800565c:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2278      	movs	r2, #120	; 0x78
 8005664:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2248      	movs	r2, #72	; 0x48
 800566c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2249      	movs	r2, #73	; 0x49
 8005674:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	223f      	movs	r2, #63	; 0x3f
 800567c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	227f      	movs	r2, #127	; 0x7f
 8005684:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2238      	movs	r2, #56	; 0x38
 8005694:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	227c      	movs	r2, #124	; 0x7c
 800569c:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2254      	movs	r2, #84	; 0x54
 80056a4:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2254      	movs	r2, #84	; 0x54
 80056ac:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	225c      	movs	r2, #92	; 0x5c
 80056b4:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2218      	movs	r2, #24
 80056bc:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2248      	movs	r2, #72	; 0x48
 80056c4:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	227e      	movs	r2, #126	; 0x7e
 80056cc:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	227f      	movs	r2, #127	; 0x7f
 80056d4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2249      	movs	r2, #73	; 0x49
 80056dc:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2203      	movs	r2, #3
 80056e4:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2298      	movs	r2, #152	; 0x98
 80056f4:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	22bc      	movs	r2, #188	; 0xbc
 80056fc:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	22a4      	movs	r2, #164	; 0xa4
 8005704:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	22a4      	movs	r2, #164	; 0xa4
 800570c:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	22f8      	movs	r2, #248	; 0xf8
 8005714:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	227c      	movs	r2, #124	; 0x7c
 800571c:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2204      	movs	r2, #4
 8005724:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2241      	movs	r2, #65	; 0x41
 800572c:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	227f      	movs	r2, #127	; 0x7f
 8005734:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	227f      	movs	r2, #127	; 0x7f
 800573c:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2208      	movs	r2, #8
 8005744:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2204      	movs	r2, #4
 800574c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	227c      	movs	r2, #124	; 0x7c
 8005754:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2278      	movs	r2, #120	; 0x78
 800575c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2244      	movs	r2, #68	; 0x44
 8005764:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	227d      	movs	r2, #125	; 0x7d
 800576c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	227d      	movs	r2, #125	; 0x7d
 8005774:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2240      	movs	r2, #64	; 0x40
 800577c:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2260      	movs	r2, #96	; 0x60
 8005784:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	22e0      	movs	r2, #224	; 0xe0
 800578c:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2280      	movs	r2, #128	; 0x80
 8005794:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	22fd      	movs	r2, #253	; 0xfd
 80057a4:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	227d      	movs	r2, #125	; 0x7d
 80057ac:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2241      	movs	r2, #65	; 0x41
 80057b4:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	227f      	movs	r2, #127	; 0x7f
 80057bc:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	227f      	movs	r2, #127	; 0x7f
 80057c4:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2210      	movs	r2, #16
 80057cc:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2238      	movs	r2, #56	; 0x38
 80057d4:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	226c      	movs	r2, #108	; 0x6c
 80057dc:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2244      	movs	r2, #68	; 0x44
 80057e4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2241      	movs	r2, #65	; 0x41
 80057ec:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	227f      	movs	r2, #127	; 0x7f
 80057f4:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	227f      	movs	r2, #127	; 0x7f
 80057fc:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	227c      	movs	r2, #124	; 0x7c
 800580c:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	227c      	movs	r2, #124	; 0x7c
 8005814:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2218      	movs	r2, #24
 800581c:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2238      	movs	r2, #56	; 0x38
 8005824:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	221c      	movs	r2, #28
 800582c:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	227c      	movs	r2, #124	; 0x7c
 8005834:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2278      	movs	r2, #120	; 0x78
 800583c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	227c      	movs	r2, #124	; 0x7c
 8005844:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	227c      	movs	r2, #124	; 0x7c
 800584c:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2204      	movs	r2, #4
 8005854:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2204      	movs	r2, #4
 800585c:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	227c      	movs	r2, #124	; 0x7c
 8005864:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2278      	movs	r2, #120	; 0x78
 800586c:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2238      	movs	r2, #56	; 0x38
 8005874:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	227c      	movs	r2, #124	; 0x7c
 800587c:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2244      	movs	r2, #68	; 0x44
 8005884:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2244      	movs	r2, #68	; 0x44
 800588c:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	227c      	movs	r2, #124	; 0x7c
 8005894:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2238      	movs	r2, #56	; 0x38
 800589c:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2284      	movs	r2, #132	; 0x84
 80058a4:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	22fc      	movs	r2, #252	; 0xfc
 80058ac:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	22f8      	movs	r2, #248	; 0xf8
 80058b4:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	22a4      	movs	r2, #164	; 0xa4
 80058bc:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	223c      	movs	r2, #60	; 0x3c
 80058cc:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2218      	movs	r2, #24
 80058d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2218      	movs	r2, #24
 80058dc:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	223c      	movs	r2, #60	; 0x3c
 80058e4:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2224      	movs	r2, #36	; 0x24
 80058ec:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	22a4      	movs	r2, #164	; 0xa4
 80058f4:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	22f8      	movs	r2, #248	; 0xf8
 80058fc:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	22fc      	movs	r2, #252	; 0xfc
 8005904:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2284      	movs	r2, #132	; 0x84
 800590c:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2244      	movs	r2, #68	; 0x44
 8005914:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	227c      	movs	r2, #124	; 0x7c
 800591c:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2278      	movs	r2, #120	; 0x78
 8005924:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	224c      	movs	r2, #76	; 0x4c
 800592c:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2204      	movs	r2, #4
 8005934:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	221c      	movs	r2, #28
 800593c:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2218      	movs	r2, #24
 8005944:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2248      	movs	r2, #72	; 0x48
 800594c:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	225c      	movs	r2, #92	; 0x5c
 8005954:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2254      	movs	r2, #84	; 0x54
 800595c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2254      	movs	r2, #84	; 0x54
 8005964:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2274      	movs	r2, #116	; 0x74
 800596c:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2224      	movs	r2, #36	; 0x24
 8005974:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2204      	movs	r2, #4
 800597c:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	223e      	movs	r2, #62	; 0x3e
 8005984:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	227f      	movs	r2, #127	; 0x7f
 800598c:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2244      	movs	r2, #68	; 0x44
 8005994:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	; 0x24
 800599c:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	223c      	movs	r2, #60	; 0x3c
 80059a4:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	227c      	movs	r2, #124	; 0x7c
 80059ac:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2240      	movs	r2, #64	; 0x40
 80059bc:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	223c      	movs	r2, #60	; 0x3c
 80059c4:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	227c      	movs	r2, #124	; 0x7c
 80059cc:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	221c      	movs	r2, #28
 80059dc:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	223c      	movs	r2, #60	; 0x3c
 80059e4:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2260      	movs	r2, #96	; 0x60
 80059ec:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2260      	movs	r2, #96	; 0x60
 80059f4:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	223c      	movs	r2, #60	; 0x3c
 80059fc:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	221c      	movs	r2, #28
 8005a04:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	223c      	movs	r2, #60	; 0x3c
 8005a0c:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	227c      	movs	r2, #124	; 0x7c
 8005a14:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2270      	movs	r2, #112	; 0x70
 8005a1c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2238      	movs	r2, #56	; 0x38
 8005a24:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2270      	movs	r2, #112	; 0x70
 8005a2c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	227c      	movs	r2, #124	; 0x7c
 8005a34:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	223c      	movs	r2, #60	; 0x3c
 8005a3c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2244      	movs	r2, #68	; 0x44
 8005a44:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	226c      	movs	r2, #108	; 0x6c
 8005a4c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2238      	movs	r2, #56	; 0x38
 8005a54:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2238      	movs	r2, #56	; 0x38
 8005a64:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	226c      	movs	r2, #108	; 0x6c
 8005a6c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2244      	movs	r2, #68	; 0x44
 8005a74:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	229c      	movs	r2, #156	; 0x9c
 8005a7c:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	22bc      	movs	r2, #188	; 0xbc
 8005a84:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	22a0      	movs	r2, #160	; 0xa0
 8005a8c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	22a0      	movs	r2, #160	; 0xa0
 8005a94:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	22fc      	movs	r2, #252	; 0xfc
 8005a9c:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	227c      	movs	r2, #124	; 0x7c
 8005aa4:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	224c      	movs	r2, #76	; 0x4c
 8005aac:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2264      	movs	r2, #100	; 0x64
 8005ab4:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2274      	movs	r2, #116	; 0x74
 8005abc:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	225c      	movs	r2, #92	; 0x5c
 8005ac4:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	224c      	movs	r2, #76	; 0x4c
 8005acc:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2264      	movs	r2, #100	; 0x64
 8005ad4:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2208      	movs	r2, #8
 8005adc:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	223e      	movs	r2, #62	; 0x3e
 8005aec:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2277      	movs	r2, #119	; 0x77
 8005af4:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2241      	movs	r2, #65	; 0x41
 8005afc:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2241      	movs	r2, #65	; 0x41
 8005b04:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2277      	movs	r2, #119	; 0x77
 8005b0c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2277      	movs	r2, #119	; 0x77
 8005b14:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2241      	movs	r2, #65	; 0x41
 8005b1c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2241      	movs	r2, #65	; 0x41
 8005b24:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2277      	movs	r2, #119	; 0x77
 8005b2c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	223e      	movs	r2, #62	; 0x3e
 8005b34:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2208      	movs	r2, #8
 8005b44:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2203      	movs	r2, #3
 8005b54:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2203      	movs	r2, #3
 8005b64:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2203      	movs	r2, #3
 8005b74:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2270      	movs	r2, #112	; 0x70
 8005b84:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2278      	movs	r2, #120	; 0x78
 8005b8c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	224c      	movs	r2, #76	; 0x4c
 8005b94:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2246      	movs	r2, #70	; 0x46
 8005b9c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	224c      	movs	r2, #76	; 0x4c
 8005ba4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2278      	movs	r2, #120	; 0x78
 8005bac:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2270      	movs	r2, #112	; 0x70
 8005bb4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	220e      	movs	r2, #14
 8005bbc:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	229f      	movs	r2, #159	; 0x9f
 8005bc4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2291      	movs	r2, #145	; 0x91
 8005bcc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	22b1      	movs	r2, #177	; 0xb1
 8005bd4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	22fb      	movs	r2, #251	; 0xfb
 8005bdc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	224a      	movs	r2, #74	; 0x4a
 8005be4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	223a      	movs	r2, #58	; 0x3a
 8005bec:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	227a      	movs	r2, #122	; 0x7a
 8005bf4:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2240      	movs	r2, #64	; 0x40
 8005bfc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	227a      	movs	r2, #122	; 0x7a
 8005c0c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	227a      	movs	r2, #122	; 0x7a
 8005c14:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2240      	movs	r2, #64	; 0x40
 8005c1c:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2238      	movs	r2, #56	; 0x38
 8005c24:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	227c      	movs	r2, #124	; 0x7c
 8005c2c:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2254      	movs	r2, #84	; 0x54
 8005c34:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2255      	movs	r2, #85	; 0x55
 8005c3c:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	225d      	movs	r2, #93	; 0x5d
 8005c44:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2219      	movs	r2, #25
 8005c4c:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2223      	movs	r2, #35	; 0x23
 8005c5c:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2275      	movs	r2, #117	; 0x75
 8005c64:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2255      	movs	r2, #85	; 0x55
 8005c6c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2255      	movs	r2, #85	; 0x55
 8005c74:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	227d      	movs	r2, #125	; 0x7d
 8005c7c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	227b      	movs	r2, #123	; 0x7b
 8005c84:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2242      	movs	r2, #66	; 0x42
 8005c8c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2221      	movs	r2, #33	; 0x21
 8005c94:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2275      	movs	r2, #117	; 0x75
 8005c9c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2254      	movs	r2, #84	; 0x54
 8005ca4:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2254      	movs	r2, #84	; 0x54
 8005cac:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	227d      	movs	r2, #125	; 0x7d
 8005cb4:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2279      	movs	r2, #121	; 0x79
 8005cbc:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2240      	movs	r2, #64	; 0x40
 8005cc4:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2221      	movs	r2, #33	; 0x21
 8005ccc:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2275      	movs	r2, #117	; 0x75
 8005cd4:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2255      	movs	r2, #85	; 0x55
 8005cdc:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2254      	movs	r2, #84	; 0x54
 8005ce4:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	227c      	movs	r2, #124	; 0x7c
 8005cec:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2278      	movs	r2, #120	; 0x78
 8005cf4:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2274      	movs	r2, #116	; 0x74
 8005d0c:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2257      	movs	r2, #87	; 0x57
 8005d14:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2257      	movs	r2, #87	; 0x57
 8005d1c:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	227c      	movs	r2, #124	; 0x7c
 8005d24:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2278      	movs	r2, #120	; 0x78
 8005d2c:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2240      	movs	r2, #64	; 0x40
 8005d34:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2218      	movs	r2, #24
 8005d3c:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	223c      	movs	r2, #60	; 0x3c
 8005d44:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	22a4      	movs	r2, #164	; 0xa4
 8005d4c:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	22a4      	movs	r2, #164	; 0xa4
 8005d54:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	22e4      	movs	r2, #228	; 0xe4
 8005d5c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	223b      	movs	r2, #59	; 0x3b
 8005d74:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	227d      	movs	r2, #125	; 0x7d
 8005d7c:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2255      	movs	r2, #85	; 0x55
 8005d84:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2255      	movs	r2, #85	; 0x55
 8005d8c:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	225d      	movs	r2, #93	; 0x5d
 8005d94:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	221b      	movs	r2, #27
 8005d9c:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2239      	movs	r2, #57	; 0x39
 8005dac:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	227d      	movs	r2, #125	; 0x7d
 8005db4:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2254      	movs	r2, #84	; 0x54
 8005dbc:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2254      	movs	r2, #84	; 0x54
 8005dc4:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	225d      	movs	r2, #93	; 0x5d
 8005dcc:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2219      	movs	r2, #25
 8005dd4:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2239      	movs	r2, #57	; 0x39
 8005ddc:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	227d      	movs	r2, #125	; 0x7d
 8005de4:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2255      	movs	r2, #85	; 0x55
 8005dec:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2254      	movs	r2, #84	; 0x54
 8005df4:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	225c      	movs	r2, #92	; 0x5c
 8005dfc:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2218      	movs	r2, #24
 8005e04:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2245      	movs	r2, #69	; 0x45
 8005e14:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	227c      	movs	r2, #124	; 0x7c
 8005e1c:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	227c      	movs	r2, #124	; 0x7c
 8005e24:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2241      	movs	r2, #65	; 0x41
 8005e2c:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2203      	movs	r2, #3
 8005e44:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2245      	movs	r2, #69	; 0x45
 8005e4c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	227d      	movs	r2, #125	; 0x7d
 8005e54:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	227d      	movs	r2, #125	; 0x7d
 8005e5c:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2243      	movs	r2, #67	; 0x43
 8005e64:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2245      	movs	r2, #69	; 0x45
 8005e7c:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	227d      	movs	r2, #125	; 0x7d
 8005e84:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	227c      	movs	r2, #124	; 0x7c
 8005e8c:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2279      	movs	r2, #121	; 0x79
 8005e9c:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	227d      	movs	r2, #125	; 0x7d
 8005ea4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2216      	movs	r2, #22
 8005eac:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2212      	movs	r2, #18
 8005eb4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2216      	movs	r2, #22
 8005ebc:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	227d      	movs	r2, #125	; 0x7d
 8005ec4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2279      	movs	r2, #121	; 0x79
 8005ecc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2270      	movs	r2, #112	; 0x70
 8005ed4:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2278      	movs	r2, #120	; 0x78
 8005edc:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	222b      	movs	r2, #43	; 0x2b
 8005ee4:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	222b      	movs	r2, #43	; 0x2b
 8005eec:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2278      	movs	r2, #120	; 0x78
 8005ef4:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2270      	movs	r2, #112	; 0x70
 8005efc:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2244      	movs	r2, #68	; 0x44
 8005f04:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	227c      	movs	r2, #124	; 0x7c
 8005f0c:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	227c      	movs	r2, #124	; 0x7c
 8005f14:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2255      	movs	r2, #85	; 0x55
 8005f1c:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2255      	movs	r2, #85	; 0x55
 8005f24:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2245      	movs	r2, #69	; 0x45
 8005f2c:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2274      	movs	r2, #116	; 0x74
 8005f3c:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2254      	movs	r2, #84	; 0x54
 8005f44:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2254      	movs	r2, #84	; 0x54
 8005f4c:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	227c      	movs	r2, #124	; 0x7c
 8005f54:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	227c      	movs	r2, #124	; 0x7c
 8005f5c:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2254      	movs	r2, #84	; 0x54
 8005f64:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2254      	movs	r2, #84	; 0x54
 8005f6c:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	227c      	movs	r2, #124	; 0x7c
 8005f74:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	227e      	movs	r2, #126	; 0x7e
 8005f7c:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	220b      	movs	r2, #11
 8005f84:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2209      	movs	r2, #9
 8005f8c:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	227f      	movs	r2, #127	; 0x7f
 8005f94:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	227f      	movs	r2, #127	; 0x7f
 8005f9c:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2249      	movs	r2, #73	; 0x49
 8005fa4:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2232      	movs	r2, #50	; 0x32
 8005fac:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	227b      	movs	r2, #123	; 0x7b
 8005fb4:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2249      	movs	r2, #73	; 0x49
 8005fbc:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2249      	movs	r2, #73	; 0x49
 8005fc4:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	227b      	movs	r2, #123	; 0x7b
 8005fcc:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2232      	movs	r2, #50	; 0x32
 8005fd4:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2232      	movs	r2, #50	; 0x32
 8005fdc:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	227a      	movs	r2, #122	; 0x7a
 8005fe4:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2248      	movs	r2, #72	; 0x48
 8005fec:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2248      	movs	r2, #72	; 0x48
 8005ff4:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	227a      	movs	r2, #122	; 0x7a
 8005ffc:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2232      	movs	r2, #50	; 0x32
 8006004:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2232      	movs	r2, #50	; 0x32
 800600c:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	227a      	movs	r2, #122	; 0x7a
 8006014:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	224a      	movs	r2, #74	; 0x4a
 800601c:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2248      	movs	r2, #72	; 0x48
 8006024:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2278      	movs	r2, #120	; 0x78
 800602c:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2230      	movs	r2, #48	; 0x30
 8006034:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	223a      	movs	r2, #58	; 0x3a
 800603c:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	227b      	movs	r2, #123	; 0x7b
 8006044:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2241      	movs	r2, #65	; 0x41
 800604c:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2241      	movs	r2, #65	; 0x41
 8006054:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	227b      	movs	r2, #123	; 0x7b
 800605c:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	227a      	movs	r2, #122	; 0x7a
 8006064:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	223a      	movs	r2, #58	; 0x3a
 8006074:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	227a      	movs	r2, #122	; 0x7a
 800607c:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2242      	movs	r2, #66	; 0x42
 8006084:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2240      	movs	r2, #64	; 0x40
 800608c:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2278      	movs	r2, #120	; 0x78
 8006094:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2278      	movs	r2, #120	; 0x78
 800609c:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2240      	movs	r2, #64	; 0x40
 80060a4:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	229a      	movs	r2, #154	; 0x9a
 80060ac:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	22ba      	movs	r2, #186	; 0xba
 80060b4:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	22a0      	movs	r2, #160	; 0xa0
 80060bc:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	22a0      	movs	r2, #160	; 0xa0
 80060c4:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	22fa      	movs	r2, #250	; 0xfa
 80060cc:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	227a      	movs	r2, #122	; 0x7a
 80060d4:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2219      	movs	r2, #25
 80060e4:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	223c      	movs	r2, #60	; 0x3c
 80060ec:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2266      	movs	r2, #102	; 0x66
 80060f4:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2266      	movs	r2, #102	; 0x66
 80060fc:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	223c      	movs	r2, #60	; 0x3c
 8006104:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2219      	movs	r2, #25
 800610c:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	223d      	movs	r2, #61	; 0x3d
 800611c:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	227d      	movs	r2, #125	; 0x7d
 8006124:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2240      	movs	r2, #64	; 0x40
 8006134:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	227d      	movs	r2, #125	; 0x7d
 800613c:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	223d      	movs	r2, #61	; 0x3d
 8006144:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2218      	movs	r2, #24
 800614c:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	223c      	movs	r2, #60	; 0x3c
 8006154:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2224      	movs	r2, #36	; 0x24
 800615c:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	22e7      	movs	r2, #231	; 0xe7
 8006164:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	22e7      	movs	r2, #231	; 0xe7
 800616c:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2268      	movs	r2, #104	; 0x68
 8006184:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	227e      	movs	r2, #126	; 0x7e
 800618c:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	227f      	movs	r2, #127	; 0x7f
 8006194:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2249      	movs	r2, #73	; 0x49
 800619c:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2243      	movs	r2, #67	; 0x43
 80061a4:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2266      	movs	r2, #102	; 0x66
 80061ac:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	222b      	movs	r2, #43	; 0x2b
 80061bc:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	222f      	movs	r2, #47	; 0x2f
 80061c4:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	22fc      	movs	r2, #252	; 0xfc
 80061cc:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	22fc      	movs	r2, #252	; 0xfc
 80061d4:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	222f      	movs	r2, #47	; 0x2f
 80061dc:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	222b      	movs	r2, #43	; 0x2b
 80061e4:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	22ff      	movs	r2, #255	; 0xff
 80061ec:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2209      	movs	r2, #9
 80061fc:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2209      	movs	r2, #9
 8006204:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	222f      	movs	r2, #47	; 0x2f
 800620c:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	22f6      	movs	r2, #246	; 0xf6
 8006214:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	22f8      	movs	r2, #248	; 0xf8
 800621c:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	22a0      	movs	r2, #160	; 0xa0
 8006224:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	22c0      	movs	r2, #192	; 0xc0
 8006234:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2288      	movs	r2, #136	; 0x88
 800623c:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	22fe      	movs	r2, #254	; 0xfe
 8006244:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	227f      	movs	r2, #127	; 0x7f
 800624c:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2209      	movs	r2, #9
 8006254:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2203      	movs	r2, #3
 800625c:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2274      	movs	r2, #116	; 0x74
 8006274:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2254      	movs	r2, #84	; 0x54
 800627c:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2255      	movs	r2, #85	; 0x55
 8006284:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	227d      	movs	r2, #125	; 0x7d
 800628c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2279      	movs	r2, #121	; 0x79
 8006294:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2240      	movs	r2, #64	; 0x40
 800629c:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2244      	movs	r2, #68	; 0x44
 80062a4:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	227d      	movs	r2, #125	; 0x7d
 80062ac:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	227d      	movs	r2, #125	; 0x7d
 80062b4:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2241      	movs	r2, #65	; 0x41
 80062bc:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2230      	movs	r2, #48	; 0x30
 80062c4:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2278      	movs	r2, #120	; 0x78
 80062cc:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2248      	movs	r2, #72	; 0x48
 80062d4:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	224a      	movs	r2, #74	; 0x4a
 80062dc:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	227a      	movs	r2, #122	; 0x7a
 80062e4:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2232      	movs	r2, #50	; 0x32
 80062ec:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2238      	movs	r2, #56	; 0x38
 80062f4:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2278      	movs	r2, #120	; 0x78
 80062fc:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2242      	movs	r2, #66	; 0x42
 800630c:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	227a      	movs	r2, #122	; 0x7a
 8006314:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	227a      	movs	r2, #122	; 0x7a
 800631c:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2240      	movs	r2, #64	; 0x40
 8006324:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	227a      	movs	r2, #122	; 0x7a
 800632c:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	227a      	movs	r2, #122	; 0x7a
 8006334:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	220a      	movs	r2, #10
 800633c:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	220a      	movs	r2, #10
 8006344:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	227a      	movs	r2, #122	; 0x7a
 800634c:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2270      	movs	r2, #112	; 0x70
 8006354:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	227d      	movs	r2, #125	; 0x7d
 800635c:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	227d      	movs	r2, #125	; 0x7d
 8006364:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2219      	movs	r2, #25
 800636c:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2231      	movs	r2, #49	; 0x31
 8006374:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	227d      	movs	r2, #125	; 0x7d
 800637c:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	227d      	movs	r2, #125	; 0x7d
 8006384:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2226      	movs	r2, #38	; 0x26
 800638c:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	222f      	movs	r2, #47	; 0x2f
 8006394:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2229      	movs	r2, #41	; 0x29
 800639c:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	222f      	movs	r2, #47	; 0x2f
 80063a4:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	222f      	movs	r2, #47	; 0x2f
 80063ac:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2228      	movs	r2, #40	; 0x28
 80063b4:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2226      	movs	r2, #38	; 0x26
 80063bc:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	222f      	movs	r2, #47	; 0x2f
 80063c4:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2229      	movs	r2, #41	; 0x29
 80063cc:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	222f      	movs	r2, #47	; 0x2f
 80063d4:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2226      	movs	r2, #38	; 0x26
 80063dc:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2230      	movs	r2, #48	; 0x30
 80063e4:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2278      	movs	r2, #120	; 0x78
 80063ec:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	224d      	movs	r2, #77	; 0x4d
 80063f4:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2245      	movs	r2, #69	; 0x45
 80063fc:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2260      	movs	r2, #96	; 0x60
 8006404:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2238      	movs	r2, #56	; 0x38
 8006414:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2238      	movs	r2, #56	; 0x38
 800641c:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2208      	movs	r2, #8
 8006424:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2208      	movs	r2, #8
 800642c:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2208      	movs	r2, #8
 8006434:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2208      	movs	r2, #8
 800643c:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2208      	movs	r2, #8
 8006444:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2208      	movs	r2, #8
 800644c:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2208      	movs	r2, #8
 8006454:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2208      	movs	r2, #8
 800645c:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2238      	movs	r2, #56	; 0x38
 8006464:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2238      	movs	r2, #56	; 0x38
 800646c:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	224f      	movs	r2, #79	; 0x4f
 8006474:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	226f      	movs	r2, #111	; 0x6f
 800647c:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2230      	movs	r2, #48	; 0x30
 8006484:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2218      	movs	r2, #24
 800648c:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	22cc      	movs	r2, #204	; 0xcc
 8006494:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	22ee      	movs	r2, #238	; 0xee
 800649c:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	22bb      	movs	r2, #187	; 0xbb
 80064a4:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2291      	movs	r2, #145	; 0x91
 80064ac:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	224f      	movs	r2, #79	; 0x4f
 80064b4:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	226f      	movs	r2, #111	; 0x6f
 80064bc:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2230      	movs	r2, #48	; 0x30
 80064c4:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2218      	movs	r2, #24
 80064cc:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	226c      	movs	r2, #108	; 0x6c
 80064d4:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2276      	movs	r2, #118	; 0x76
 80064dc:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	22fb      	movs	r2, #251	; 0xfb
 80064e4:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	22f9      	movs	r2, #249	; 0xf9
 80064ec:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	227b      	movs	r2, #123	; 0x7b
 80064f4:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	227b      	movs	r2, #123	; 0x7b
 80064fc:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2208      	movs	r2, #8
 8006504:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	221c      	movs	r2, #28
 800650c:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2236      	movs	r2, #54	; 0x36
 8006514:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2222      	movs	r2, #34	; 0x22
 800651c:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2208      	movs	r2, #8
 8006524:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	221c      	movs	r2, #28
 800652c:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2236      	movs	r2, #54	; 0x36
 8006534:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2222      	movs	r2, #34	; 0x22
 800653c:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2222      	movs	r2, #34	; 0x22
 8006544:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2236      	movs	r2, #54	; 0x36
 800654c:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	221c      	movs	r2, #28
 8006554:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2208      	movs	r2, #8
 800655c:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2222      	movs	r2, #34	; 0x22
 8006564:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2236      	movs	r2, #54	; 0x36
 800656c:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	221c      	movs	r2, #28
 8006574:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2208      	movs	r2, #8
 800657c:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	22aa      	movs	r2, #170	; 0xaa
 8006584:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2255      	movs	r2, #85	; 0x55
 800658c:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	22aa      	movs	r2, #170	; 0xaa
 8006594:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2255      	movs	r2, #85	; 0x55
 800659c:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	22aa      	movs	r2, #170	; 0xaa
 80065a4:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2255      	movs	r2, #85	; 0x55
 80065ac:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	22aa      	movs	r2, #170	; 0xaa
 80065b4:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2255      	movs	r2, #85	; 0x55
 80065bc:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	22aa      	movs	r2, #170	; 0xaa
 80065c4:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2255      	movs	r2, #85	; 0x55
 80065cc:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	22aa      	movs	r2, #170	; 0xaa
 80065d4:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2255      	movs	r2, #85	; 0x55
 80065dc:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	22dd      	movs	r2, #221	; 0xdd
 80065e4:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	22ff      	movs	r2, #255	; 0xff
 80065ec:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	22aa      	movs	r2, #170	; 0xaa
 80065f4:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2277      	movs	r2, #119	; 0x77
 80065fc:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	22dd      	movs	r2, #221	; 0xdd
 8006604:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	22aa      	movs	r2, #170	; 0xaa
 800660c:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	22ff      	movs	r2, #255	; 0xff
 8006614:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2277      	movs	r2, #119	; 0x77
 800661c:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	22ff      	movs	r2, #255	; 0xff
 8006624:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	22ff      	movs	r2, #255	; 0xff
 800662c:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2210      	movs	r2, #16
 8006634:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2210      	movs	r2, #16
 800663c:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2210      	movs	r2, #16
 8006644:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	22ff      	movs	r2, #255	; 0xff
 800664c:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	22ff      	movs	r2, #255	; 0xff
 8006654:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2214      	movs	r2, #20
 800665c:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2214      	movs	r2, #20
 8006664:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2214      	movs	r2, #20
 800666c:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	22ff      	movs	r2, #255	; 0xff
 8006674:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	22ff      	movs	r2, #255	; 0xff
 800667c:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2210      	movs	r2, #16
 8006684:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2210      	movs	r2, #16
 800668c:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	22ff      	movs	r2, #255	; 0xff
 8006694:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	22ff      	movs	r2, #255	; 0xff
 800669c:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	22ff      	movs	r2, #255	; 0xff
 80066a4:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2210      	movs	r2, #16
 80066b4:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2210      	movs	r2, #16
 80066bc:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	22f0      	movs	r2, #240	; 0xf0
 80066c4:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	22f0      	movs	r2, #240	; 0xf0
 80066cc:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2210      	movs	r2, #16
 80066d4:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	22f0      	movs	r2, #240	; 0xf0
 80066dc:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	22f0      	movs	r2, #240	; 0xf0
 80066e4:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2214      	movs	r2, #20
 80066ec:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2214      	movs	r2, #20
 80066f4:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2214      	movs	r2, #20
 80066fc:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	22fc      	movs	r2, #252	; 0xfc
 8006704:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	22fc      	movs	r2, #252	; 0xfc
 800670c:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2214      	movs	r2, #20
 8006714:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2214      	movs	r2, #20
 800671c:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	22f7      	movs	r2, #247	; 0xf7
 8006724:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	22f7      	movs	r2, #247	; 0xf7
 800672c:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	22ff      	movs	r2, #255	; 0xff
 8006734:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	22ff      	movs	r2, #255	; 0xff
 8006744:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	22ff      	movs	r2, #255	; 0xff
 8006754:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	22ff      	movs	r2, #255	; 0xff
 800675c:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2214      	movs	r2, #20
 8006764:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2214      	movs	r2, #20
 800676c:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	22f4      	movs	r2, #244	; 0xf4
 8006774:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	22f4      	movs	r2, #244	; 0xf4
 800677c:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2204      	movs	r2, #4
 8006784:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	22fc      	movs	r2, #252	; 0xfc
 800678c:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	22fc      	movs	r2, #252	; 0xfc
 8006794:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2214      	movs	r2, #20
 800679c:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2214      	movs	r2, #20
 80067a4:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2217      	movs	r2, #23
 80067ac:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2217      	movs	r2, #23
 80067b4:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2210      	movs	r2, #16
 80067bc:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	221f      	movs	r2, #31
 80067c4:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	221f      	movs	r2, #31
 80067cc:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2210      	movs	r2, #16
 80067d4:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2210      	movs	r2, #16
 80067dc:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	221f      	movs	r2, #31
 80067e4:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	221f      	movs	r2, #31
 80067ec:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2210      	movs	r2, #16
 80067f4:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	221f      	movs	r2, #31
 80067fc:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	221f      	movs	r2, #31
 8006804:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2214      	movs	r2, #20
 800680c:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2214      	movs	r2, #20
 8006814:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2214      	movs	r2, #20
 800681c:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	221f      	movs	r2, #31
 8006824:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	221f      	movs	r2, #31
 800682c:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2210      	movs	r2, #16
 8006834:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2210      	movs	r2, #16
 800683c:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2210      	movs	r2, #16
 8006844:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	22f0      	movs	r2, #240	; 0xf0
 800684c:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	22f0      	movs	r2, #240	; 0xf0
 8006854:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	221f      	movs	r2, #31
 800685c:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	221f      	movs	r2, #31
 8006864:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2210      	movs	r2, #16
 800686c:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2210      	movs	r2, #16
 8006874:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2210      	movs	r2, #16
 800687c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2210      	movs	r2, #16
 8006884:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2210      	movs	r2, #16
 800688c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2210      	movs	r2, #16
 8006894:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	221f      	movs	r2, #31
 800689c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	221f      	movs	r2, #31
 80068a4:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2210      	movs	r2, #16
 80068ac:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2210      	movs	r2, #16
 80068b4:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2210      	movs	r2, #16
 80068bc:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2210      	movs	r2, #16
 80068c4:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2210      	movs	r2, #16
 80068cc:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2210      	movs	r2, #16
 80068d4:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	22f0      	movs	r2, #240	; 0xf0
 80068dc:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	22f0      	movs	r2, #240	; 0xf0
 80068e4:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2210      	movs	r2, #16
 80068ec:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2210      	movs	r2, #16
 80068f4:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2210      	movs	r2, #16
 80068fc:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	22ff      	movs	r2, #255	; 0xff
 8006904:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	22ff      	movs	r2, #255	; 0xff
 800690c:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2210      	movs	r2, #16
 8006914:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2210      	movs	r2, #16
 800691c:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2210      	movs	r2, #16
 8006924:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2210      	movs	r2, #16
 800692c:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2210      	movs	r2, #16
 8006934:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2210      	movs	r2, #16
 800693c:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2210      	movs	r2, #16
 8006944:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2210      	movs	r2, #16
 800694c:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2210      	movs	r2, #16
 8006954:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2210      	movs	r2, #16
 800695c:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2210      	movs	r2, #16
 8006964:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2210      	movs	r2, #16
 800696c:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2210      	movs	r2, #16
 8006974:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2210      	movs	r2, #16
 800697c:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	22ff      	movs	r2, #255	; 0xff
 8006984:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	22ff      	movs	r2, #255	; 0xff
 800698c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2210      	movs	r2, #16
 8006994:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2210      	movs	r2, #16
 800699c:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2210      	movs	r2, #16
 80069a4:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	22ff      	movs	r2, #255	; 0xff
 80069ac:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	22ff      	movs	r2, #255	; 0xff
 80069b4:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2214      	movs	r2, #20
 80069bc:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2214      	movs	r2, #20
 80069c4:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2214      	movs	r2, #20
 80069cc:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	22ff      	movs	r2, #255	; 0xff
 80069d4:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	22ff      	movs	r2, #255	; 0xff
 80069dc:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	22ff      	movs	r2, #255	; 0xff
 80069ec:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2210      	movs	r2, #16
 80069f4:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	221f      	movs	r2, #31
 80069fc:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	221f      	movs	r2, #31
 8006a04:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2217      	movs	r2, #23
 8006a14:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2217      	movs	r2, #23
 8006a1c:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2214      	movs	r2, #20
 8006a24:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	22fc      	movs	r2, #252	; 0xfc
 8006a2c:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	22fc      	movs	r2, #252	; 0xfc
 8006a34:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	22f4      	movs	r2, #244	; 0xf4
 8006a44:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	22f4      	movs	r2, #244	; 0xf4
 8006a4c:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2214      	movs	r2, #20
 8006a54:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2214      	movs	r2, #20
 8006a5c:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2214      	movs	r2, #20
 8006a64:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2217      	movs	r2, #23
 8006a6c:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2217      	movs	r2, #23
 8006a74:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2217      	movs	r2, #23
 8006a84:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2217      	movs	r2, #23
 8006a8c:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2214      	movs	r2, #20
 8006a94:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2214      	movs	r2, #20
 8006a9c:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2214      	movs	r2, #20
 8006aa4:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	22f4      	movs	r2, #244	; 0xf4
 8006aac:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	22f4      	movs	r2, #244	; 0xf4
 8006ab4:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	22f4      	movs	r2, #244	; 0xf4
 8006ac4:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	22f4      	movs	r2, #244	; 0xf4
 8006acc:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2214      	movs	r2, #20
 8006ad4:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	22ff      	movs	r2, #255	; 0xff
 8006adc:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	22ff      	movs	r2, #255	; 0xff
 8006ae4:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	22f7      	movs	r2, #247	; 0xf7
 8006aec:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	22f7      	movs	r2, #247	; 0xf7
 8006af4:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2214      	movs	r2, #20
 8006afc:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2214      	movs	r2, #20
 8006b04:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2214      	movs	r2, #20
 8006b0c:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2214      	movs	r2, #20
 8006b14:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2214      	movs	r2, #20
 8006b1c:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2214      	movs	r2, #20
 8006b24:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2214      	movs	r2, #20
 8006b2c:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2214      	movs	r2, #20
 8006b34:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2214      	movs	r2, #20
 8006b3c:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2214      	movs	r2, #20
 8006b44:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2214      	movs	r2, #20
 8006b4c:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	22f7      	movs	r2, #247	; 0xf7
 8006b54:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	22f7      	movs	r2, #247	; 0xf7
 8006b5c:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	22f7      	movs	r2, #247	; 0xf7
 8006b64:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	22f7      	movs	r2, #247	; 0xf7
 8006b6c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2214      	movs	r2, #20
 8006b74:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2214      	movs	r2, #20
 8006b7c:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2214      	movs	r2, #20
 8006b84:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2214      	movs	r2, #20
 8006b8c:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2217      	movs	r2, #23
 8006b94:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2217      	movs	r2, #23
 8006b9c:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2214      	movs	r2, #20
 8006ba4:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2214      	movs	r2, #20
 8006bac:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2214      	movs	r2, #20
 8006bb4:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2210      	movs	r2, #16
 8006bbc:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	221f      	movs	r2, #31
 8006bcc:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	221f      	movs	r2, #31
 8006bd4:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2210      	movs	r2, #16
 8006bdc:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	221f      	movs	r2, #31
 8006be4:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	221f      	movs	r2, #31
 8006bec:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2214      	movs	r2, #20
 8006bfc:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2214      	movs	r2, #20
 8006c04:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2214      	movs	r2, #20
 8006c0c:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	22f4      	movs	r2, #244	; 0xf4
 8006c14:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	22f4      	movs	r2, #244	; 0xf4
 8006c1c:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2214      	movs	r2, #20
 8006c24:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2214      	movs	r2, #20
 8006c2c:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2214      	movs	r2, #20
 8006c34:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2210      	movs	r2, #16
 8006c44:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	22f0      	movs	r2, #240	; 0xf0
 8006c4c:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	22f0      	movs	r2, #240	; 0xf0
 8006c54:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	22f0      	movs	r2, #240	; 0xf0
 8006c64:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	22f0      	movs	r2, #240	; 0xf0
 8006c6c:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2210      	movs	r2, #16
 8006c74:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	221f      	movs	r2, #31
 8006c7c:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	221f      	movs	r2, #31
 8006c84:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	221f      	movs	r2, #31
 8006c94:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	221f      	movs	r2, #31
 8006c9c:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	221f      	movs	r2, #31
 8006cac:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	221f      	movs	r2, #31
 8006cb4:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2214      	movs	r2, #20
 8006cbc:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2214      	movs	r2, #20
 8006cc4:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2214      	movs	r2, #20
 8006ccc:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	22fc      	movs	r2, #252	; 0xfc
 8006cd4:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	22fc      	movs	r2, #252	; 0xfc
 8006cdc:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2214      	movs	r2, #20
 8006ce4:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2214      	movs	r2, #20
 8006cec:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2214      	movs	r2, #20
 8006cf4:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22f0      	movs	r2, #240	; 0xf0
 8006cfc:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	22f0      	movs	r2, #240	; 0xf0
 8006d04:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	22f0      	movs	r2, #240	; 0xf0
 8006d14:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	22f0      	movs	r2, #240	; 0xf0
 8006d1c:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2210      	movs	r2, #16
 8006d24:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2210      	movs	r2, #16
 8006d34:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	22ff      	movs	r2, #255	; 0xff
 8006d3c:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2210      	movs	r2, #16
 8006d64:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2214      	movs	r2, #20
 8006d6c:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2214      	movs	r2, #20
 8006d74:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2214      	movs	r2, #20
 8006d7c:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	22ff      	movs	r2, #255	; 0xff
 8006d84:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2214      	movs	r2, #20
 8006d94:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2214      	movs	r2, #20
 8006d9c:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2214      	movs	r2, #20
 8006da4:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2210      	movs	r2, #16
 8006dac:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2210      	movs	r2, #16
 8006db4:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	221f      	movs	r2, #31
 8006dc4:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	221f      	movs	r2, #31
 8006dcc:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	22f0      	movs	r2, #240	; 0xf0
 8006dd4:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	22f0      	movs	r2, #240	; 0xf0
 8006ddc:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2210      	movs	r2, #16
 8006de4:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2210      	movs	r2, #16
 8006dec:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2210      	movs	r2, #16
 8006df4:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	22ff      	movs	r2, #255	; 0xff
 8006dfc:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	22ff      	movs	r2, #255	; 0xff
 8006e0c:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	22ff      	movs	r2, #255	; 0xff
 8006e14:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	22ff      	movs	r2, #255	; 0xff
 8006e1c:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	22ff      	movs	r2, #255	; 0xff
 8006e24:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	22ff      	movs	r2, #255	; 0xff
 8006e2c:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	22ff      	movs	r2, #255	; 0xff
 8006e34:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	22f0      	movs	r2, #240	; 0xf0
 8006e3c:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	22f0      	movs	r2, #240	; 0xf0
 8006e44:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	22f0      	movs	r2, #240	; 0xf0
 8006e4c:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	22f0      	movs	r2, #240	; 0xf0
 8006e54:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	22f0      	movs	r2, #240	; 0xf0
 8006e5c:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	22f0      	movs	r2, #240	; 0xf0
 8006e64:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	22f0      	movs	r2, #240	; 0xf0
 8006e6c:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	22f0      	movs	r2, #240	; 0xf0
 8006e74:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	22ff      	movs	r2, #255	; 0xff
 8006e7c:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	22ff      	movs	r2, #255	; 0xff
 8006e84:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	22ff      	movs	r2, #255	; 0xff
 8006e8c:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	22ff      	movs	r2, #255	; 0xff
 8006e94:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	22ff      	movs	r2, #255	; 0xff
 8006e9c:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	22ff      	movs	r2, #255	; 0xff
 8006ea4:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	22ff      	movs	r2, #255	; 0xff
 8006eac:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	220f      	movs	r2, #15
 8006ebc:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	220f      	movs	r2, #15
 8006ec4:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220f      	movs	r2, #15
 8006ecc:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	220f      	movs	r2, #15
 8006ed4:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	220f      	movs	r2, #15
 8006edc:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	220f      	movs	r2, #15
 8006ee4:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	220f      	movs	r2, #15
 8006eec:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220f      	movs	r2, #15
 8006ef4:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2238      	movs	r2, #56	; 0x38
 8006efc:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	227c      	movs	r2, #124	; 0x7c
 8006f04:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2244      	movs	r2, #68	; 0x44
 8006f0c:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	226c      	movs	r2, #108	; 0x6c
 8006f14:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2238      	movs	r2, #56	; 0x38
 8006f1c:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	226c      	movs	r2, #108	; 0x6c
 8006f24:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2244      	movs	r2, #68	; 0x44
 8006f2c:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	22fc      	movs	r2, #252	; 0xfc
 8006f34:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	22fe      	movs	r2, #254	; 0xfe
 8006f3c:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	222a      	movs	r2, #42	; 0x2a
 8006f44:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	222a      	movs	r2, #42	; 0x2a
 8006f4c:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	223e      	movs	r2, #62	; 0x3e
 8006f54:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2214      	movs	r2, #20
 8006f5c:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	227e      	movs	r2, #126	; 0x7e
 8006f64:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	227e      	movs	r2, #126	; 0x7e
 8006f6c:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2206      	movs	r2, #6
 8006f84:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	227e      	movs	r2, #126	; 0x7e
 8006f9c:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	227e      	movs	r2, #126	; 0x7e
 8006fa4:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	227e      	movs	r2, #126	; 0x7e
 8006fb4:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	227e      	movs	r2, #126	; 0x7e
 8006fbc:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2263      	movs	r2, #99	; 0x63
 8006fcc:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2277      	movs	r2, #119	; 0x77
 8006fd4:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	225d      	movs	r2, #93	; 0x5d
 8006fdc:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2249      	movs	r2, #73	; 0x49
 8006fe4:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2263      	movs	r2, #99	; 0x63
 8006fec:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2263      	movs	r2, #99	; 0x63
 8006ff4:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2238      	movs	r2, #56	; 0x38
 8006ffc:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	227c      	movs	r2, #124	; 0x7c
 8007004:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2244      	movs	r2, #68	; 0x44
 800700c:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	227c      	movs	r2, #124	; 0x7c
 8007014:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	223c      	movs	r2, #60	; 0x3c
 800701c:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2204      	movs	r2, #4
 8007024:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2204      	movs	r2, #4
 800702c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	22fe      	movs	r2, #254	; 0xfe
 800703c:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	227e      	movs	r2, #126	; 0x7e
 8007044:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	223e      	movs	r2, #62	; 0x3e
 800705c:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	221e      	movs	r2, #30
 8007064:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2204      	movs	r2, #4
 800706c:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2206      	movs	r2, #6
 8007074:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	227e      	movs	r2, #126	; 0x7e
 8007084:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	227c      	movs	r2, #124	; 0x7c
 800708c:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2206      	movs	r2, #6
 8007094:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2299      	movs	r2, #153	; 0x99
 80070a4:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	22bd      	movs	r2, #189	; 0xbd
 80070ac:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	22e7      	movs	r2, #231	; 0xe7
 80070b4:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	22e7      	movs	r2, #231	; 0xe7
 80070bc:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	22bd      	movs	r2, #189	; 0xbd
 80070c4:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2299      	movs	r2, #153	; 0x99
 80070cc:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	221c      	movs	r2, #28
 80070d4:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	223e      	movs	r2, #62	; 0x3e
 80070dc:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	226b      	movs	r2, #107	; 0x6b
 80070e4:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2249      	movs	r2, #73	; 0x49
 80070ec:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	226b      	movs	r2, #107	; 0x6b
 80070f4:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	223e      	movs	r2, #62	; 0x3e
 80070fc:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	221c      	movs	r2, #28
 8007104:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	224c      	movs	r2, #76	; 0x4c
 800710c:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	227e      	movs	r2, #126	; 0x7e
 8007114:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2273      	movs	r2, #115	; 0x73
 800711c:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2273      	movs	r2, #115	; 0x73
 800712c:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	227e      	movs	r2, #126	; 0x7e
 8007134:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	224c      	movs	r2, #76	; 0x4c
 800713c:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2230      	movs	r2, #48	; 0x30
 8007144:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2278      	movs	r2, #120	; 0x78
 800714c:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	224a      	movs	r2, #74	; 0x4a
 8007154:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	224f      	movs	r2, #79	; 0x4f
 800715c:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	227d      	movs	r2, #125	; 0x7d
 8007164:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2239      	movs	r2, #57	; 0x39
 800716c:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2218      	movs	r2, #24
 8007174:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	223c      	movs	r2, #60	; 0x3c
 800717c:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2224      	movs	r2, #36	; 0x24
 8007184:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	223c      	movs	r2, #60	; 0x3c
 800718c:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	223c      	movs	r2, #60	; 0x3c
 8007194:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	; 0x24
 800719c:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	223c      	movs	r2, #60	; 0x3c
 80071a4:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2218      	movs	r2, #24
 80071ac:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2298      	movs	r2, #152	; 0x98
 80071b4:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	22fc      	movs	r2, #252	; 0xfc
 80071bc:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2264      	movs	r2, #100	; 0x64
 80071c4:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	223c      	movs	r2, #60	; 0x3c
 80071cc:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	223e      	movs	r2, #62	; 0x3e
 80071d4:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2227      	movs	r2, #39	; 0x27
 80071dc:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	223d      	movs	r2, #61	; 0x3d
 80071e4:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2218      	movs	r2, #24
 80071ec:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	221c      	movs	r2, #28
 80071f4:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	223e      	movs	r2, #62	; 0x3e
 80071fc:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	226b      	movs	r2, #107	; 0x6b
 8007204:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2249      	movs	r2, #73	; 0x49
 800720c:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2249      	movs	r2, #73	; 0x49
 8007214:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	227e      	movs	r2, #126	; 0x7e
 800721c:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	227f      	movs	r2, #127	; 0x7f
 8007224:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	227f      	movs	r2, #127	; 0x7f
 800723c:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	227e      	movs	r2, #126	; 0x7e
 8007244:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	222a      	movs	r2, #42	; 0x2a
 800724c:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	222a      	movs	r2, #42	; 0x2a
 8007254:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	222a      	movs	r2, #42	; 0x2a
 800725c:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	222a      	movs	r2, #42	; 0x2a
 8007264:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	222a      	movs	r2, #42	; 0x2a
 800726c:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	222a      	movs	r2, #42	; 0x2a
 8007274:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2244      	movs	r2, #68	; 0x44
 800727c:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2244      	movs	r2, #68	; 0x44
 8007284:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	225f      	movs	r2, #95	; 0x5f
 800728c:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	225f      	movs	r2, #95	; 0x5f
 8007294:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2244      	movs	r2, #68	; 0x44
 800729c:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2244      	movs	r2, #68	; 0x44
 80072a4:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2240      	movs	r2, #64	; 0x40
 80072ac:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2251      	movs	r2, #81	; 0x51
 80072b4:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	225b      	movs	r2, #91	; 0x5b
 80072bc:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	224e      	movs	r2, #78	; 0x4e
 80072c4:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2244      	movs	r2, #68	; 0x44
 80072cc:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2240      	movs	r2, #64	; 0x40
 80072d4:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2244      	movs	r2, #68	; 0x44
 80072e4:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	224e      	movs	r2, #78	; 0x4e
 80072ec:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	225b      	movs	r2, #91	; 0x5b
 80072f4:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2251      	movs	r2, #81	; 0x51
 80072fc:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2240      	movs	r2, #64	; 0x40
 8007304:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	22fe      	movs	r2, #254	; 0xfe
 800730c:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	22ff      	movs	r2, #255	; 0xff
 8007314:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2207      	movs	r2, #7
 8007324:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2206      	movs	r2, #6
 800732c:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2260      	movs	r2, #96	; 0x60
 8007334:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	22e0      	movs	r2, #224	; 0xe0
 800733c:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2280      	movs	r2, #128	; 0x80
 8007344:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	22ff      	movs	r2, #255	; 0xff
 800734c:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	227f      	movs	r2, #127	; 0x7f
 8007354:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2208      	movs	r2, #8
 800735c:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2208      	movs	r2, #8
 8007364:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	226b      	movs	r2, #107	; 0x6b
 800736c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	226b      	movs	r2, #107	; 0x6b
 8007374:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2208      	movs	r2, #8
 800737c:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2208      	movs	r2, #8
 8007384:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2224      	movs	r2, #36	; 0x24
 800738c:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2236      	movs	r2, #54	; 0x36
 8007394:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2212      	movs	r2, #18
 800739c:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2236      	movs	r2, #54	; 0x36
 80073a4:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2224      	movs	r2, #36	; 0x24
 80073ac:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2236      	movs	r2, #54	; 0x36
 80073b4:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2212      	movs	r2, #18
 80073bc:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2206      	movs	r2, #6
 80073c4:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	220f      	movs	r2, #15
 80073cc:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2209      	movs	r2, #9
 80073d4:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	220f      	movs	r2, #15
 80073dc:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2206      	movs	r2, #6
 80073e4:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2218      	movs	r2, #24
 80073ec:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2218      	movs	r2, #24
 80073f4:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2210      	movs	r2, #16
 80073fc:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2210      	movs	r2, #16
 8007404:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2210      	movs	r2, #16
 800740c:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2230      	movs	r2, #48	; 0x30
 8007414:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2270      	movs	r2, #112	; 0x70
 800741c:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	22c0      	movs	r2, #192	; 0xc0
 8007424:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	22ff      	movs	r2, #255	; 0xff
 8007434:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	221f      	movs	r2, #31
 800744c:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	221f      	movs	r2, #31
 8007454:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	221f      	movs	r2, #31
 8007464:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	221e      	movs	r2, #30
 800746c:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2219      	movs	r2, #25
 8007474:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	221d      	movs	r2, #29
 800747c:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2217      	movs	r2, #23
 8007484:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2212      	movs	r2, #18
 800748c:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	223c      	movs	r2, #60	; 0x3c
 8007494:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	223c      	movs	r2, #60	; 0x3c
 800749c:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	223c      	movs	r2, #60	; 0x3c
 80074a4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	223c      	movs	r2, #60	; 0x3c
 80074ac:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f603 0326 	addw	r3, r3, #2086	; 0x826
 80074b6:	f240 12db 	movw	r2, #475	; 0x1db
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f008 feed 	bl	801029c <memset>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	225f      	movs	r2, #95	; 0x5f
 80074c6:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2207      	movs	r2, #7
 80074ce:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2207      	movs	r2, #7
 80074d6:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2214      	movs	r2, #20
 80074de:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	227f      	movs	r2, #127	; 0x7f
 80074e6:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2214      	movs	r2, #20
 80074ee:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	227f      	movs	r2, #127	; 0x7f
 80074f6:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2214      	movs	r2, #20
 80074fe:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2224      	movs	r2, #36	; 0x24
 8007506:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	222a      	movs	r2, #42	; 0x2a
 800750e:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	227f      	movs	r2, #127	; 0x7f
 8007516:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	222a      	movs	r2, #42	; 0x2a
 800751e:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2212      	movs	r2, #18
 8007526:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2223      	movs	r2, #35	; 0x23
 800752e:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2213      	movs	r2, #19
 8007536:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2208      	movs	r2, #8
 800753e:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2264      	movs	r2, #100	; 0x64
 8007546:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2262      	movs	r2, #98	; 0x62
 800754e:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2236      	movs	r2, #54	; 0x36
 8007556:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2249      	movs	r2, #73	; 0x49
 800755e:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2255      	movs	r2, #85	; 0x55
 8007566:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2222      	movs	r2, #34	; 0x22
 800756e:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2250      	movs	r2, #80	; 0x50
 8007576:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2205      	movs	r2, #5
 800757e:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2203      	movs	r2, #3
 8007586:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	221c      	movs	r2, #28
 800758e:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2222      	movs	r2, #34	; 0x22
 8007596:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2241      	movs	r2, #65	; 0x41
 800759e:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2241      	movs	r2, #65	; 0x41
 80075a6:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2222      	movs	r2, #34	; 0x22
 80075ae:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	221c      	movs	r2, #28
 80075b6:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2208      	movs	r2, #8
 80075be:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	222a      	movs	r2, #42	; 0x2a
 80075c6:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	221c      	movs	r2, #28
 80075ce:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	222a      	movs	r2, #42	; 0x2a
 80075d6:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2208      	movs	r2, #8
 80075de:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2208      	movs	r2, #8
 80075e6:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	223e      	movs	r2, #62	; 0x3e
 80075f6:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2208      	movs	r2, #8
 80075fe:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2208      	movs	r2, #8
 8007606:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2250      	movs	r2, #80	; 0x50
 800760e:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2230      	movs	r2, #48	; 0x30
 8007616:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2208      	movs	r2, #8
 800761e:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2208      	movs	r2, #8
 8007626:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2208      	movs	r2, #8
 800762e:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2208      	movs	r2, #8
 8007636:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2208      	movs	r2, #8
 800763e:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2230      	movs	r2, #48	; 0x30
 8007646:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2230      	movs	r2, #48	; 0x30
 800764e:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2210      	movs	r2, #16
 800765e:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2208      	movs	r2, #8
 8007666:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2204      	movs	r2, #4
 800766e:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	223e      	movs	r2, #62	; 0x3e
 800767e:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2251      	movs	r2, #81	; 0x51
 8007686:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2249      	movs	r2, #73	; 0x49
 800768e:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2245      	movs	r2, #69	; 0x45
 8007696:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	223e      	movs	r2, #62	; 0x3e
 800769e:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2242      	movs	r2, #66	; 0x42
 80076a6:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	227f      	movs	r2, #127	; 0x7f
 80076ae:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2240      	movs	r2, #64	; 0x40
 80076b6:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2242      	movs	r2, #66	; 0x42
 80076be:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2261      	movs	r2, #97	; 0x61
 80076c6:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2251      	movs	r2, #81	; 0x51
 80076ce:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2249      	movs	r2, #73	; 0x49
 80076d6:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2246      	movs	r2, #70	; 0x46
 80076de:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2221      	movs	r2, #33	; 0x21
 80076e6:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2241      	movs	r2, #65	; 0x41
 80076ee:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2245      	movs	r2, #69	; 0x45
 80076f6:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	224b      	movs	r2, #75	; 0x4b
 80076fe:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2231      	movs	r2, #49	; 0x31
 8007706:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2218      	movs	r2, #24
 800770e:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2214      	movs	r2, #20
 8007716:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2212      	movs	r2, #18
 800771e:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	227f      	movs	r2, #127	; 0x7f
 8007726:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2210      	movs	r2, #16
 800772e:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2227      	movs	r2, #39	; 0x27
 8007736:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2245      	movs	r2, #69	; 0x45
 800773e:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2245      	movs	r2, #69	; 0x45
 8007746:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2245      	movs	r2, #69	; 0x45
 800774e:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2239      	movs	r2, #57	; 0x39
 8007756:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	223c      	movs	r2, #60	; 0x3c
 800775e:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	224a      	movs	r2, #74	; 0x4a
 8007766:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2249      	movs	r2, #73	; 0x49
 800776e:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2249      	movs	r2, #73	; 0x49
 8007776:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2230      	movs	r2, #48	; 0x30
 800777e:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2271      	movs	r2, #113	; 0x71
 800778e:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2209      	movs	r2, #9
 8007796:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2205      	movs	r2, #5
 800779e:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2203      	movs	r2, #3
 80077a6:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2236      	movs	r2, #54	; 0x36
 80077ae:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2249      	movs	r2, #73	; 0x49
 80077b6:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2249      	movs	r2, #73	; 0x49
 80077be:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2249      	movs	r2, #73	; 0x49
 80077c6:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2236      	movs	r2, #54	; 0x36
 80077ce:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2206      	movs	r2, #6
 80077d6:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2249      	movs	r2, #73	; 0x49
 80077de:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2249      	movs	r2, #73	; 0x49
 80077e6:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2229      	movs	r2, #41	; 0x29
 80077ee:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	221e      	movs	r2, #30
 80077f6:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2236      	movs	r2, #54	; 0x36
 80077fe:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2236      	movs	r2, #54	; 0x36
 8007806:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2256      	movs	r2, #86	; 0x56
 800780e:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2236      	movs	r2, #54	; 0x36
 8007816:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2208      	movs	r2, #8
 800781e:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2214      	movs	r2, #20
 8007826:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2222      	movs	r2, #34	; 0x22
 800782e:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2241      	movs	r2, #65	; 0x41
 8007836:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2214      	movs	r2, #20
 800783e:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2214      	movs	r2, #20
 8007846:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2214      	movs	r2, #20
 800784e:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2214      	movs	r2, #20
 8007856:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2214      	movs	r2, #20
 800785e:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2241      	movs	r2, #65	; 0x41
 8007866:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2222      	movs	r2, #34	; 0x22
 800786e:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2214      	movs	r2, #20
 8007876:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2208      	movs	r2, #8
 800787e:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2202      	movs	r2, #2
 8007886:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2251      	movs	r2, #81	; 0x51
 8007896:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2209      	movs	r2, #9
 800789e:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2206      	movs	r2, #6
 80078a6:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2232      	movs	r2, #50	; 0x32
 80078ae:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2249      	movs	r2, #73	; 0x49
 80078b6:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2279      	movs	r2, #121	; 0x79
 80078be:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2241      	movs	r2, #65	; 0x41
 80078c6:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	223e      	movs	r2, #62	; 0x3e
 80078ce:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	227e      	movs	r2, #126	; 0x7e
 80078d6:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2211      	movs	r2, #17
 80078de:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2211      	movs	r2, #17
 80078e6:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2211      	movs	r2, #17
 80078ee:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	227e      	movs	r2, #126	; 0x7e
 80078f6:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	227f      	movs	r2, #127	; 0x7f
 80078fe:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2249      	movs	r2, #73	; 0x49
 8007906:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2249      	movs	r2, #73	; 0x49
 800790e:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2249      	movs	r2, #73	; 0x49
 8007916:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2236      	movs	r2, #54	; 0x36
 800791e:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	223e      	movs	r2, #62	; 0x3e
 8007926:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2241      	movs	r2, #65	; 0x41
 800792e:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2241      	movs	r2, #65	; 0x41
 8007936:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2241      	movs	r2, #65	; 0x41
 800793e:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2222      	movs	r2, #34	; 0x22
 8007946:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	227f      	movs	r2, #127	; 0x7f
 800794e:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2241      	movs	r2, #65	; 0x41
 8007956:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2241      	movs	r2, #65	; 0x41
 800795e:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2222      	movs	r2, #34	; 0x22
 8007966:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	221c      	movs	r2, #28
 800796e:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	227f      	movs	r2, #127	; 0x7f
 8007976:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2249      	movs	r2, #73	; 0x49
 800797e:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2249      	movs	r2, #73	; 0x49
 8007986:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2249      	movs	r2, #73	; 0x49
 800798e:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2241      	movs	r2, #65	; 0x41
 8007996:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	227f      	movs	r2, #127	; 0x7f
 800799e:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2209      	movs	r2, #9
 80079a6:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2209      	movs	r2, #9
 80079ae:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	223e      	movs	r2, #62	; 0x3e
 80079c6:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2241      	movs	r2, #65	; 0x41
 80079ce:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2241      	movs	r2, #65	; 0x41
 80079d6:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2251      	movs	r2, #81	; 0x51
 80079de:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2232      	movs	r2, #50	; 0x32
 80079e6:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	227f      	movs	r2, #127	; 0x7f
 80079ee:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2208      	movs	r2, #8
 80079f6:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2208      	movs	r2, #8
 80079fe:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2208      	movs	r2, #8
 8007a06:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	227f      	movs	r2, #127	; 0x7f
 8007a0e:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2241      	movs	r2, #65	; 0x41
 8007a16:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	227f      	movs	r2, #127	; 0x7f
 8007a1e:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2241      	movs	r2, #65	; 0x41
 8007a26:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2240      	movs	r2, #64	; 0x40
 8007a36:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2241      	movs	r2, #65	; 0x41
 8007a3e:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	223f      	movs	r2, #63	; 0x3f
 8007a46:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	227f      	movs	r2, #127	; 0x7f
 8007a56:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2214      	movs	r2, #20
 8007a66:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2222      	movs	r2, #34	; 0x22
 8007a6e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2241      	movs	r2, #65	; 0x41
 8007a76:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	227f      	movs	r2, #127	; 0x7f
 8007a7e:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2240      	movs	r2, #64	; 0x40
 8007a86:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2240      	movs	r2, #64	; 0x40
 8007a8e:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2240      	movs	r2, #64	; 0x40
 8007a96:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2240      	movs	r2, #64	; 0x40
 8007a9e:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	227f      	movs	r2, #127	; 0x7f
 8007aa6:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	227f      	movs	r2, #127	; 0x7f
 8007ac6:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	227f      	movs	r2, #127	; 0x7f
 8007ace:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2208      	movs	r2, #8
 8007ade:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	227f      	movs	r2, #127	; 0x7f
 8007aee:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	223e      	movs	r2, #62	; 0x3e
 8007af6:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2241      	movs	r2, #65	; 0x41
 8007afe:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2241      	movs	r2, #65	; 0x41
 8007b06:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2241      	movs	r2, #65	; 0x41
 8007b0e:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	223e      	movs	r2, #62	; 0x3e
 8007b16:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	227f      	movs	r2, #127	; 0x7f
 8007b1e:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2209      	movs	r2, #9
 8007b26:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2209      	movs	r2, #9
 8007b2e:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2209      	movs	r2, #9
 8007b36:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2206      	movs	r2, #6
 8007b3e:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	223e      	movs	r2, #62	; 0x3e
 8007b46:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2241      	movs	r2, #65	; 0x41
 8007b4e:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2251      	movs	r2, #81	; 0x51
 8007b56:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2221      	movs	r2, #33	; 0x21
 8007b5e:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	225e      	movs	r2, #94	; 0x5e
 8007b66:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	227f      	movs	r2, #127	; 0x7f
 8007b6e:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2209      	movs	r2, #9
 8007b76:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2219      	movs	r2, #25
 8007b7e:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2229      	movs	r2, #41	; 0x29
 8007b86:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2246      	movs	r2, #70	; 0x46
 8007b8e:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2246      	movs	r2, #70	; 0x46
 8007b96:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2249      	movs	r2, #73	; 0x49
 8007b9e:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2249      	movs	r2, #73	; 0x49
 8007ba6:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2249      	movs	r2, #73	; 0x49
 8007bae:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2231      	movs	r2, #49	; 0x31
 8007bb6:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	227f      	movs	r2, #127	; 0x7f
 8007bce:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	223f      	movs	r2, #63	; 0x3f
 8007be6:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2240      	movs	r2, #64	; 0x40
 8007bee:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2240      	movs	r2, #64	; 0x40
 8007bf6:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2240      	movs	r2, #64	; 0x40
 8007bfe:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	223f      	movs	r2, #63	; 0x3f
 8007c06:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	221f      	movs	r2, #31
 8007c0e:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2240      	movs	r2, #64	; 0x40
 8007c1e:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	221f      	movs	r2, #31
 8007c2e:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	227f      	movs	r2, #127	; 0x7f
 8007c36:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2218      	movs	r2, #24
 8007c46:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	227f      	movs	r2, #127	; 0x7f
 8007c56:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2263      	movs	r2, #99	; 0x63
 8007c5e:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2214      	movs	r2, #20
 8007c66:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2214      	movs	r2, #20
 8007c76:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2263      	movs	r2, #99	; 0x63
 8007c7e:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2278      	movs	r2, #120	; 0x78
 8007c96:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2261      	movs	r2, #97	; 0x61
 8007cae:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2251      	movs	r2, #81	; 0x51
 8007cb6:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2249      	movs	r2, #73	; 0x49
 8007cbe:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2245      	movs	r2, #69	; 0x45
 8007cc6:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2243      	movs	r2, #67	; 0x43
 8007cce:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	227f      	movs	r2, #127	; 0x7f
 8007cd6:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2241      	movs	r2, #65	; 0x41
 8007cde:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2241      	movs	r2, #65	; 0x41
 8007ce6:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2210      	movs	r2, #16
 8007d06:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2241      	movs	r2, #65	; 0x41
 8007d16:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2241      	movs	r2, #65	; 0x41
 8007d1e:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	227f      	movs	r2, #127	; 0x7f
 8007d26:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2240      	movs	r2, #64	; 0x40
 8007d56:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2240      	movs	r2, #64	; 0x40
 8007d66:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2240      	movs	r2, #64	; 0x40
 8007d6e:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2240      	movs	r2, #64	; 0x40
 8007d76:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2254      	movs	r2, #84	; 0x54
 8007d9e:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2254      	movs	r2, #84	; 0x54
 8007da6:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2254      	movs	r2, #84	; 0x54
 8007dae:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2278      	movs	r2, #120	; 0x78
 8007db6:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	227f      	movs	r2, #127	; 0x7f
 8007dbe:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2248      	movs	r2, #72	; 0x48
 8007dc6:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2244      	movs	r2, #68	; 0x44
 8007dce:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2244      	movs	r2, #68	; 0x44
 8007dd6:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2238      	movs	r2, #56	; 0x38
 8007dde:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2238      	movs	r2, #56	; 0x38
 8007de6:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2244      	movs	r2, #68	; 0x44
 8007dee:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2244      	movs	r2, #68	; 0x44
 8007df6:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2244      	movs	r2, #68	; 0x44
 8007dfe:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2238      	movs	r2, #56	; 0x38
 8007e0e:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2244      	movs	r2, #68	; 0x44
 8007e16:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2244      	movs	r2, #68	; 0x44
 8007e1e:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2248      	movs	r2, #72	; 0x48
 8007e26:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	227f      	movs	r2, #127	; 0x7f
 8007e2e:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2238      	movs	r2, #56	; 0x38
 8007e36:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2254      	movs	r2, #84	; 0x54
 8007e3e:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2254      	movs	r2, #84	; 0x54
 8007e46:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2254      	movs	r2, #84	; 0x54
 8007e4e:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2218      	movs	r2, #24
 8007e56:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	227e      	movs	r2, #126	; 0x7e
 8007e66:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2209      	movs	r2, #9
 8007e6e:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2208      	movs	r2, #8
 8007e86:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2214      	movs	r2, #20
 8007e8e:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2254      	movs	r2, #84	; 0x54
 8007e96:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2254      	movs	r2, #84	; 0x54
 8007e9e:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	223c      	movs	r2, #60	; 0x3c
 8007ea6:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	227f      	movs	r2, #127	; 0x7f
 8007eae:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2278      	movs	r2, #120	; 0x78
 8007ece:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2244      	movs	r2, #68	; 0x44
 8007ed6:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	227d      	movs	r2, #125	; 0x7d
 8007ede:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2240      	movs	r2, #64	; 0x40
 8007ef6:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2244      	movs	r2, #68	; 0x44
 8007efe:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	223d      	movs	r2, #61	; 0x3d
 8007f06:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	227f      	movs	r2, #127	; 0x7f
 8007f0e:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2210      	movs	r2, #16
 8007f16:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2228      	movs	r2, #40	; 0x28
 8007f1e:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2244      	movs	r2, #68	; 0x44
 8007f26:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2241      	movs	r2, #65	; 0x41
 8007f2e:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	227f      	movs	r2, #127	; 0x7f
 8007f36:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2240      	movs	r2, #64	; 0x40
 8007f3e:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	227c      	movs	r2, #124	; 0x7c
 8007f46:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2218      	movs	r2, #24
 8007f56:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2278      	movs	r2, #120	; 0x78
 8007f66:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	227c      	movs	r2, #124	; 0x7c
 8007f6e:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2208      	movs	r2, #8
 8007f76:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2204      	movs	r2, #4
 8007f86:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2278      	movs	r2, #120	; 0x78
 8007f8e:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2238      	movs	r2, #56	; 0x38
 8007f96:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2244      	movs	r2, #68	; 0x44
 8007f9e:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2244      	movs	r2, #68	; 0x44
 8007fa6:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2244      	movs	r2, #68	; 0x44
 8007fae:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2238      	movs	r2, #56	; 0x38
 8007fb6:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	227c      	movs	r2, #124	; 0x7c
 8007fbe:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2214      	movs	r2, #20
 8007fc6:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2214      	movs	r2, #20
 8007fce:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2214      	movs	r2, #20
 8007fd6:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2214      	movs	r2, #20
 8007fee:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2214      	movs	r2, #20
 8007ff6:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2218      	movs	r2, #24
 8007ffe:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	227c      	movs	r2, #124	; 0x7c
 8008006:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	227c      	movs	r2, #124	; 0x7c
 800800e:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2208      	movs	r2, #8
 8008016:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2204      	movs	r2, #4
 800801e:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2204      	movs	r2, #4
 8008026:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2208      	movs	r2, #8
 800802e:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2248      	movs	r2, #72	; 0x48
 8008036:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2254      	movs	r2, #84	; 0x54
 800803e:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2254      	movs	r2, #84	; 0x54
 8008046:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2254      	movs	r2, #84	; 0x54
 800804e:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2204      	movs	r2, #4
 800805e:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	223f      	movs	r2, #63	; 0x3f
 8008066:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2244      	movs	r2, #68	; 0x44
 800806e:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2240      	movs	r2, #64	; 0x40
 8008076:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	223c      	movs	r2, #60	; 0x3c
 8008086:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2240      	movs	r2, #64	; 0x40
 800808e:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2240      	movs	r2, #64	; 0x40
 8008096:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	227c      	movs	r2, #124	; 0x7c
 80080a6:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	221c      	movs	r2, #28
 80080ae:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2240      	movs	r2, #64	; 0x40
 80080be:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	221c      	movs	r2, #28
 80080ce:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	223c      	movs	r2, #60	; 0x3c
 80080d6:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2240      	movs	r2, #64	; 0x40
 80080de:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2230      	movs	r2, #48	; 0x30
 80080e6:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2240      	movs	r2, #64	; 0x40
 80080ee:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	223c      	movs	r2, #60	; 0x3c
 80080f6:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2244      	movs	r2, #68	; 0x44
 80080fe:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2228      	movs	r2, #40	; 0x28
 8008106:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2210      	movs	r2, #16
 800810e:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2228      	movs	r2, #40	; 0x28
 8008116:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2244      	movs	r2, #68	; 0x44
 800811e:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	220c      	movs	r2, #12
 8008126:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2250      	movs	r2, #80	; 0x50
 800812e:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2250      	movs	r2, #80	; 0x50
 8008136:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2250      	movs	r2, #80	; 0x50
 800813e:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	223c      	movs	r2, #60	; 0x3c
 8008146:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2244      	movs	r2, #68	; 0x44
 800814e:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2264      	movs	r2, #100	; 0x64
 8008156:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2254      	movs	r2, #84	; 0x54
 800815e:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	224c      	movs	r2, #76	; 0x4c
 8008166:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2244      	movs	r2, #68	; 0x44
 800816e:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2208      	movs	r2, #8
 8008176:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2236      	movs	r2, #54	; 0x36
 800817e:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2241      	movs	r2, #65	; 0x41
 8008186:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	227f      	movs	r2, #127	; 0x7f
 800818e:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2241      	movs	r2, #65	; 0x41
 8008196:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2236      	movs	r2, #54	; 0x36
 800819e:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2208      	movs	r2, #8
 80081a6:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bdb0      	pop	{r4, r5, r7, pc}

080081b4 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	4a05      	ldr	r2, [pc, #20]	; (80081d4 <_ZN4GLCDD1Ev+0x20>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fb fe23 	bl	8003e10 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	08010ff0 	.word	0x08010ff0

080081d8 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
}
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ffe7 	bl	80081b4 <_ZN4GLCDD1Ev>
 80081e6:	f640 2104 	movw	r1, #2564	; 0xa04
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f008 f811 	bl	8010212 <_ZdlPvj>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008204:	2200      	movs	r2, #0
 8008206:	2110      	movs	r1, #16
 8008208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800820c:	f003 f8ba 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008210:	2200      	movs	r2, #0
 8008212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008216:	480c      	ldr	r0, [pc, #48]	; (8008248 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008218:	f003 f8b4 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800821c:	2200      	movs	r2, #0
 800821e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008222:	4809      	ldr	r0, [pc, #36]	; (8008248 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008224:	f003 f8ae 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008228:	2200      	movs	r2, #0
 800822a:	2104      	movs	r1, #4
 800822c:	4807      	ldr	r0, [pc, #28]	; (800824c <_ZN4GLCD9m_ctrloffEv+0x50>)
 800822e:	f003 f8a9 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008232:	2200      	movs	r2, #0
 8008234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008238:	4803      	ldr	r0, [pc, #12]	; (8008248 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 800823a:	f003 f8a3 	bl	800b384 <HAL_GPIO_WritePin>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	48000800 	.word	0x48000800
 800824c:	48000c00 	.word	0x48000c00

08008250 <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	d20d      	bcs.n	8008286 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	429a      	cmp	r2, r3
 8008274:	d203      	bcs.n	800827e <_ZN4GLCD7m_delayEjh+0x2e>
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	3301      	adds	r3, #1
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	e7f7      	b.n	800826e <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	3301      	adds	r3, #1
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e7ed      	b.n	8008262 <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 8008286:	bf00      	nop
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
	...

08008294 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	2100      	movs	r1, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fb ffe8 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80082ac:	4603      	mov	r3, r0
 80082ae:	461a      	mov	r2, r3
 80082b0:	2108      	movs	r1, #8
 80082b2:	482f      	ldr	r0, [pc, #188]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80082b4:	f003 f866 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	2101      	movs	r1, #1
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fb ffdc 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	2104      	movs	r1, #4
 80082ca:	4829      	ldr	r0, [pc, #164]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80082cc:	f003 f85a 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	2102      	movs	r1, #2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fb ffd0 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	2102      	movs	r1, #2
 80082e2:	4823      	ldr	r0, [pc, #140]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80082e4:	f003 f84e 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	2103      	movs	r1, #3
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fb ffc4 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	2101      	movs	r1, #1
 80082fa:	481d      	ldr	r0, [pc, #116]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80082fc:	f003 f842 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	2104      	movs	r1, #4
 8008306:	4618      	mov	r0, r3
 8008308:	f7fb ffb8 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008314:	4816      	ldr	r0, [pc, #88]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008316:	f003 f835 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	2105      	movs	r1, #5
 8008320:	4618      	mov	r0, r3
 8008322:	f7fb ffab 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800832e:	4810      	ldr	r0, [pc, #64]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008330:	f003 f828 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	2106      	movs	r1, #6
 800833a:	4618      	mov	r0, r3
 800833c:	f7fb ff9e 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 800834a:	f003 f81b 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	2107      	movs	r1, #7
 8008354:	4618      	mov	r0, r3
 8008356:	f7fb ff91 	bl	800427c <_ZN6common26ReadtheValueAssignPinstateEhh>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	2120      	movs	r1, #32
 8008360:	4804      	ldr	r0, [pc, #16]	; (8008374 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8008362:	f003 f80f 	bl	800b384 <HAL_GPIO_WritePin>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	48000800 	.word	0x48000800
 8008374:	48000400 	.word	0x48000400

08008378 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff ff3b 	bl	80081fc <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 8008386:	213f      	movs	r1, #63	; 0x3f
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff ff83 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 800838e:	2201      	movs	r2, #1
 8008390:	2104      	movs	r1, #4
 8008392:	4815      	ldr	r0, [pc, #84]	; (80083e8 <_ZN4GLCD11m_displayonEv+0x70>)
 8008394:	f002 fff6 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008398:	2201      	movs	r2, #1
 800839a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800839e:	4813      	ldr	r0, [pc, #76]	; (80083ec <_ZN4GLCD11m_displayonEv+0x74>)
 80083a0:	f002 fff0 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80083a4:	2200      	movs	r2, #0
 80083a6:	2110      	movs	r1, #16
 80083a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083ac:	f002 ffea 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80083b0:	2200      	movs	r2, #0
 80083b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083b6:	480d      	ldr	r0, [pc, #52]	; (80083ec <_ZN4GLCD11m_displayonEv+0x74>)
 80083b8:	f002 ffe4 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80083bc:	2201      	movs	r2, #1
 80083be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083c2:	480a      	ldr	r0, [pc, #40]	; (80083ec <_ZN4GLCD11m_displayonEv+0x74>)
 80083c4:	f002 ffde 	bl	800b384 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80083c8:	2264      	movs	r2, #100	; 0x64
 80083ca:	210a      	movs	r1, #10
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ff3f 	bl	8008250 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80083d2:	2200      	movs	r2, #0
 80083d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083d8:	4804      	ldr	r0, [pc, #16]	; (80083ec <_ZN4GLCD11m_displayonEv+0x74>)
 80083da:	f002 ffd3 	bl	800b384 <HAL_GPIO_WritePin>
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	48000c00 	.word	0x48000c00
 80083ec:	48000800 	.word	0x48000800

080083f0 <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	2b3f      	cmp	r3, #63	; 0x3f
 8008400:	d839      	bhi.n	8008476 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fefa 	bl	80081fc <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800841a:	b2db      	uxtb	r3, r3
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ff38 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008424:	2201      	movs	r2, #1
 8008426:	2104      	movs	r1, #4
 8008428:	4831      	ldr	r0, [pc, #196]	; (80084f0 <_ZN4GLCD11m_setcolumnEh+0x100>)
 800842a:	f002 ffab 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800842e:	2200      	movs	r2, #0
 8008430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008434:	482f      	ldr	r0, [pc, #188]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008436:	f002 ffa5 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 800843a:	2200      	movs	r2, #0
 800843c:	2110      	movs	r1, #16
 800843e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008442:	f002 ff9f 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008446:	2200      	movs	r2, #0
 8008448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800844c:	4829      	ldr	r0, [pc, #164]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800844e:	f002 ff99 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008452:	2201      	movs	r2, #1
 8008454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008458:	4826      	ldr	r0, [pc, #152]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800845a:	f002 ff93 	bl	800b384 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 800845e:	2264      	movs	r2, #100	; 0x64
 8008460:	210a      	movs	r1, #10
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fef4 	bl	8008250 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008468:	2200      	movs	r2, #0
 800846a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800846e:	4821      	ldr	r0, [pc, #132]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008470:	f002 ff88 	bl	800b384 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8008474:	e038      	b.n	80084e8 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	78fa      	ldrb	r2, [r7, #3]
 800847a:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 800847c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008484:	b25b      	sxtb	r3, r3
 8008486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848a:	b25b      	sxtb	r3, r3
 800848c:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fefe 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008498:	2200      	movs	r2, #0
 800849a:	2104      	movs	r1, #4
 800849c:	4814      	ldr	r0, [pc, #80]	; (80084f0 <_ZN4GLCD11m_setcolumnEh+0x100>)
 800849e:	f002 ff71 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80084a2:	2201      	movs	r2, #1
 80084a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80084a8:	4812      	ldr	r0, [pc, #72]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80084aa:	f002 ff6b 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2110      	movs	r1, #16
 80084b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084b6:	f002 ff65 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80084ba:	2200      	movs	r2, #0
 80084bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084c0:	480c      	ldr	r0, [pc, #48]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80084c2:	f002 ff5f 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80084c6:	2201      	movs	r2, #1
 80084c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084cc:	4809      	ldr	r0, [pc, #36]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80084ce:	f002 ff59 	bl	800b384 <HAL_GPIO_WritePin>
		m_delay(10,100);
 80084d2:	2264      	movs	r2, #100	; 0x64
 80084d4:	210a      	movs	r1, #10
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff feba 	bl	8008250 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80084dc:	2200      	movs	r2, #0
 80084de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084e2:	4804      	ldr	r0, [pc, #16]	; (80084f4 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80084e4:	f002 ff4e 	bl	800b384 <HAL_GPIO_WritePin>
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	48000c00 	.word	0x48000c00
 80084f4:	48000800 	.word	0x48000800

080084f8 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fe79 	bl	80081fc <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	f063 0347 	orn	r3, r3, #71	; 0x47
 8008510:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff febc 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 800851c:	2201      	movs	r2, #1
 800851e:	2104      	movs	r1, #4
 8008520:	4814      	ldr	r0, [pc, #80]	; (8008574 <_ZN4GLCD9m_setpageEh+0x7c>)
 8008522:	f002 ff2f 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008526:	2201      	movs	r2, #1
 8008528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800852c:	4812      	ldr	r0, [pc, #72]	; (8008578 <_ZN4GLCD9m_setpageEh+0x80>)
 800852e:	f002 ff29 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008532:	2200      	movs	r2, #0
 8008534:	2110      	movs	r1, #16
 8008536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800853a:	f002 ff23 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800853e:	2200      	movs	r2, #0
 8008540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008544:	480c      	ldr	r0, [pc, #48]	; (8008578 <_ZN4GLCD9m_setpageEh+0x80>)
 8008546:	f002 ff1d 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800854a:	2201      	movs	r2, #1
 800854c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008550:	4809      	ldr	r0, [pc, #36]	; (8008578 <_ZN4GLCD9m_setpageEh+0x80>)
 8008552:	f002 ff17 	bl	800b384 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8008556:	2264      	movs	r2, #100	; 0x64
 8008558:	210a      	movs	r1, #10
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fe78 	bl	8008250 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008560:	2200      	movs	r2, #0
 8008562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008566:	4804      	ldr	r0, [pc, #16]	; (8008578 <_ZN4GLCD9m_setpageEh+0x80>)
 8008568:	f002 ff0c 	bl	800b384 <HAL_GPIO_WritePin>
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	48000c00 	.word	0x48000c00
 8008578:	48000800 	.word	0x48000800

0800857c <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff fe37 	bl	80081fc <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008594:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff fe7a 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80085a0:	2201      	movs	r2, #1
 80085a2:	2104      	movs	r1, #4
 80085a4:	4814      	ldr	r0, [pc, #80]	; (80085f8 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 80085a6:	f002 feed 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80085aa:	2201      	movs	r2, #1
 80085ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80085b0:	4812      	ldr	r0, [pc, #72]	; (80085fc <_ZN4GLCD14m_setstartlineEh+0x80>)
 80085b2:	f002 fee7 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80085b6:	2200      	movs	r2, #0
 80085b8:	2110      	movs	r1, #16
 80085ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085be:	f002 fee1 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80085c2:	2200      	movs	r2, #0
 80085c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085c8:	480c      	ldr	r0, [pc, #48]	; (80085fc <_ZN4GLCD14m_setstartlineEh+0x80>)
 80085ca:	f002 fedb 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80085ce:	2201      	movs	r2, #1
 80085d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085d4:	4809      	ldr	r0, [pc, #36]	; (80085fc <_ZN4GLCD14m_setstartlineEh+0x80>)
 80085d6:	f002 fed5 	bl	800b384 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80085da:	2264      	movs	r2, #100	; 0x64
 80085dc:	210a      	movs	r1, #10
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fe36 	bl	8008250 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80085e4:	2200      	movs	r2, #0
 80085e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085ea:	4804      	ldr	r0, [pc, #16]	; (80085fc <_ZN4GLCD14m_setstartlineEh+0x80>)
 80085ec:	f002 feca 	bl	800b384 <HAL_GPIO_WritePin>
}
 80085f0:	bf00      	nop
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	48000c00 	.word	0x48000c00
 80085fc:	48000800 	.word	0x48000800

08008600 <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 800860e:	2300      	movs	r3, #0
 8008610:	82fb      	strh	r3, [r7, #22]
 8008612:	8afa      	ldrh	r2, [r7, #22]
 8008614:	88fb      	ldrh	r3, [r7, #6]
 8008616:	429a      	cmp	r2, r3
 8008618:	f080 8085 	bcs.w	8008726 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	7f1b      	ldrb	r3, [r3, #28]
 8008620:	2b3f      	cmp	r3, #63	; 0x3f
 8008622:	d838      	bhi.n	8008696 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8008624:	8afb      	ldrh	r3, [r7, #22]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	4413      	add	r3, r2
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 800862e:	7d7b      	ldrb	r3, [r7, #21]
 8008630:	4619      	mov	r1, r3
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff fe2e 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008638:	2201      	movs	r2, #1
 800863a:	2104      	movs	r1, #4
 800863c:	483b      	ldr	r0, [pc, #236]	; (800872c <_ZN4GLCD9m_lcddataEPht+0x12c>)
 800863e:	f002 fea1 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008642:	2200      	movs	r2, #0
 8008644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008648:	4839      	ldr	r0, [pc, #228]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 800864a:	f002 fe9b 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 800864e:	2201      	movs	r2, #1
 8008650:	2110      	movs	r1, #16
 8008652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008656:	f002 fe95 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800865a:	2200      	movs	r2, #0
 800865c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008660:	4833      	ldr	r0, [pc, #204]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008662:	f002 fe8f 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008666:	2201      	movs	r2, #1
 8008668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800866c:	4830      	ldr	r0, [pc, #192]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 800866e:	f002 fe89 	bl	800b384 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008672:	2264      	movs	r2, #100	; 0x64
 8008674:	210a      	movs	r1, #10
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fdea 	bl	8008250 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800867c:	2200      	movs	r2, #0
 800867e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008682:	482b      	ldr	r0, [pc, #172]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008684:	f002 fe7e 	bl	800b384 <HAL_GPIO_WritePin>
			c++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	7f1b      	ldrb	r3, [r3, #28]
 800868c:	3301      	adds	r3, #1
 800868e:	b2da      	uxtb	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	771a      	strb	r2, [r3, #28]
 8008694:	e03d      	b.n	8008712 <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	7f1b      	ldrb	r3, [r3, #28]
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fea7 	bl	80083f0 <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 80086a2:	8afb      	ldrh	r3, [r7, #22]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	4413      	add	r3, r2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 80086ac:	7d7b      	ldrb	r3, [r7, #21]
 80086ae:	4619      	mov	r1, r3
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f7ff fdef 	bl	8008294 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80086b6:	2200      	movs	r2, #0
 80086b8:	2104      	movs	r1, #4
 80086ba:	481c      	ldr	r0, [pc, #112]	; (800872c <_ZN4GLCD9m_lcddataEPht+0x12c>)
 80086bc:	f002 fe62 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80086c0:	2201      	movs	r2, #1
 80086c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086c6:	481a      	ldr	r0, [pc, #104]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80086c8:	f002 fe5c 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 80086cc:	2201      	movs	r2, #1
 80086ce:	2110      	movs	r1, #16
 80086d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80086d4:	f002 fe56 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80086d8:	2200      	movs	r2, #0
 80086da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086de:	4814      	ldr	r0, [pc, #80]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80086e0:	f002 fe50 	bl	800b384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80086e4:	2201      	movs	r2, #1
 80086e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086ea:	4811      	ldr	r0, [pc, #68]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80086ec:	f002 fe4a 	bl	800b384 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 80086f0:	2264      	movs	r2, #100	; 0x64
 80086f2:	210a      	movs	r1, #10
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff fdab 	bl	8008250 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80086fa:	2200      	movs	r2, #0
 80086fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008700:	480b      	ldr	r0, [pc, #44]	; (8008730 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008702:	f002 fe3f 	bl	800b384 <HAL_GPIO_WritePin>
			c++;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	7f1b      	ldrb	r3, [r3, #28]
 800870a:	3301      	adds	r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	7f1b      	ldrb	r3, [r3, #28]
 8008716:	b25b      	sxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	db03      	blt.n	8008724 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 800871c:	8afb      	ldrh	r3, [r7, #22]
 800871e:	3301      	adds	r3, #1
 8008720:	82fb      	strh	r3, [r7, #22]
 8008722:	e776      	b.n	8008612 <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8008724:	bf00      	nop
	}
}
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	48000c00 	.word	0x48000c00
 8008730:	48000800 	.word	0x48000800

08008734 <_ZN4GLCD10m_lcdputs1EhhPc>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,char *str)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	607b      	str	r3, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	72fb      	strb	r3, [r7, #11]
 8008742:	4613      	mov	r3, r2
 8008744:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	4619      	mov	r1, r3
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fe50 	bl	80083f0 <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8008750:	7abb      	ldrb	r3, [r7, #10]
 8008752:	4619      	mov	r1, r3
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7ff fecf 	bl	80084f8 <_ZN4GLCD9m_setpageEh>
	//for(i=0;str[i]!=0;i++)
	length =strlen(str);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7f7 fd38 	bl	80001d0 <strlen>
 8008760:	4603      	mov	r3, r0
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <_ZN4GLCD10m_lcdputs1EhhPc+0x7c>)
 8008766:	701a      	strb	r2, [r3, #0]
	for(i=0;i< strlen(str);i++)
 8008768:	2300      	movs	r3, #0
 800876a:	75fb      	strb	r3, [r7, #23]
 800876c:	7dfc      	ldrb	r4, [r7, #23]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7f7 fd2e 	bl	80001d0 <strlen>
 8008774:	4603      	mov	r3, r0
 8008776:	429c      	cmp	r4, r3
 8008778:	d215      	bcs.n	80087a6 <_ZN4GLCD10m_lcdputs1EhhPc+0x72>
	{
		a=(*(str+i));
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4413      	add	r3, r2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8008784:	8abb      	ldrh	r3, [r7, #20]
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 800878a:	8abb      	ldrh	r3, [r7, #20]
 800878c:	3318      	adds	r3, #24
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	3306      	adds	r3, #6
 8008794:	2208      	movs	r2, #8
 8008796:	4619      	mov	r1, r3
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7ff ff31 	bl	8008600 <_ZN4GLCD9m_lcddataEPht>
	for(i=0;i< strlen(str);i++)
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	3301      	adds	r3, #1
 80087a2:	75fb      	strb	r3, [r7, #23]
 80087a4:	e7e2      	b.n	800876c <_ZN4GLCD10m_lcdputs1EhhPc+0x38>
	}
}
 80087a6:	bf00      	nop
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd90      	pop	{r4, r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200007b0 	.word	0x200007b0

080087b4 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b07      	cmp	r3, #7
 80087c4:	d81d      	bhi.n	8008802 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fe94 	bl	80084f8 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fe0c 	bl	80083f0 <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 80087d8:	2300      	movs	r3, #0
 80087da:	73bb      	strb	r3, [r7, #14]
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	db0a      	blt.n	80087fa <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	331d      	adds	r3, #29
 80087e8:	2201      	movs	r2, #1
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff ff07 	bl	8008600 <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	3301      	adds	r3, #1
 80087f6:	73bb      	strb	r3, [r7, #14]
 80087f8:	e7f0      	b.n	80087dc <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	3301      	adds	r3, #1
 80087fe:	73fb      	strb	r3, [r7, #15]
 8008800:	e7de      	b.n	80087c0 <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <_ZN7DwinhmiC1Ev>:
uint8_t passwordWifi[20];
uint8_t shiftP,len_i;

uint8_t Dwinseq;

Dwinhmi::Dwinhmi() {
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	4a06      	ldr	r2, [pc, #24]	; (8008830 <_ZN7DwinhmiC1Ev+0x24>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	// TODO Auto-generated constructor stub

}
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	08011000 	.word	0x08011000

08008834 <_ZN7DwinhmiD1Ev>:

Dwinhmi::~Dwinhmi() {
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	4a04      	ldr	r2, [pc, #16]	; (8008850 <_ZN7DwinhmiD1Ev+0x1c>)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	08011000 	.word	0x08011000

08008854 <_ZN7DwinhmiD0Ev>:
Dwinhmi::~Dwinhmi() {
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
}
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ffe9 	bl	8008834 <_ZN7DwinhmiD1Ev>
 8008862:	2130      	movs	r1, #48	; 0x30
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f007 fcd4 	bl	8010212 <_ZdlPvj>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <_ZN7Dwinhmi9dwinFrameEv>:

void Dwinhmi::dwinFrame()
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	switch(Cntid_dwin)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008882:	2b02      	cmp	r3, #2
 8008884:	f000 80e8 	beq.w	8008a58 <_ZN7Dwinhmi9dwinFrameEv+0x1e4>
 8008888:	2b02      	cmp	r3, #2
 800888a:	f300 810b 	bgt.w	8008aa4 <_ZN7Dwinhmi9dwinFrameEv+0x230>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <_ZN7Dwinhmi9dwinFrameEv+0x24>
 8008892:	2b01      	cmp	r3, #1
 8008894:	d070      	beq.n	8008978 <_ZN7Dwinhmi9dwinFrameEv+0x104>
			Dwinseq=0;
			noOfDataDwin=7;
			Cntid_dwin=0;
		break;
		default:
		break;
 8008896:	e105      	b.n	8008aa4 <_ZN7Dwinhmi9dwinFrameEv+0x230>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	225a      	movs	r2, #90	; 0x5a
 800889c:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	22a5      	movs	r2, #165	; 0xa5
 80088a2:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2217      	movs	r2, #23
 80088a8:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2282      	movs	r2, #130	; 0x82
 80088ae:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x20;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x00;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	729a      	strb	r2, [r3, #10]
			u8ModbusRegisterdwin[7] = date_Rtc;
 80088c2:	4b80      	ldr	r3, [pc, #512]	; (8008ac4 <_ZN7Dwinhmi9dwinFrameEv+0x250>)
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	72da      	strb	r2, [r3, #11]
			u8ModbusRegisterdwin[8] = 0x00;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	731a      	strb	r2, [r3, #12]
			u8ModbusRegisterdwin[9] = month_Rtc;
 80088d0:	4b7d      	ldr	r3, [pc, #500]	; (8008ac8 <_ZN7Dwinhmi9dwinFrameEv+0x254>)
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	735a      	strb	r2, [r3, #13]
			u8ModbusRegisterdwin[10] = 0x00;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	739a      	strb	r2, [r3, #14]
			u8ModbusRegisterdwin[11] = year_Rtc;
 80088de:	4b7b      	ldr	r3, [pc, #492]	; (8008acc <_ZN7Dwinhmi9dwinFrameEv+0x258>)
 80088e0:	781a      	ldrb	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	73da      	strb	r2, [r3, #15]
			u8ModbusRegisterdwin[12] = 0x00;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	741a      	strb	r2, [r3, #16]
			u8ModbusRegisterdwin[13] = hour_t;
 80088ec:	4b78      	ldr	r3, [pc, #480]	; (8008ad0 <_ZN7Dwinhmi9dwinFrameEv+0x25c>)
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	745a      	strb	r2, [r3, #17]
			u8ModbusRegisterdwin[14] = 0x00;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	749a      	strb	r2, [r3, #18]
			u8ModbusRegisterdwin[15] = min_t;
 80088fa:	4b76      	ldr	r3, [pc, #472]	; (8008ad4 <_ZN7Dwinhmi9dwinFrameEv+0x260>)
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	74da      	strb	r2, [r3, #19]
			u8ModbusRegisterdwin[16] = 0x00;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	751a      	strb	r2, [r3, #20]
			u8ModbusRegisterdwin[17] = sec_t;
 8008908:	4b73      	ldr	r3, [pc, #460]	; (8008ad8 <_ZN7Dwinhmi9dwinFrameEv+0x264>)
 800890a:	781a      	ldrb	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	755a      	strb	r2, [r3, #21]
			u8ModbusRegisterdwin[18] = highByte(Production_Total);
 8008910:	4b72      	ldr	r3, [pc, #456]	; (8008adc <_ZN7Dwinhmi9dwinFrameEv+0x268>)
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	0a1b      	lsrs	r3, r3, #8
 8008916:	b29b      	uxth	r3, r3
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	759a      	strb	r2, [r3, #22]
			u8ModbusRegisterdwin[19] = lowByte(Production_Total);
 800891e:	4b6f      	ldr	r3, [pc, #444]	; (8008adc <_ZN7Dwinhmi9dwinFrameEv+0x268>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b2da      	uxtb	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	75da      	strb	r2, [r3, #23]
			u8ModbusRegisterdwin[20] = highByte(Rejection_Total);
 8008928:	4b6d      	ldr	r3, [pc, #436]	; (8008ae0 <_ZN7Dwinhmi9dwinFrameEv+0x26c>)
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	0a1b      	lsrs	r3, r3, #8
 800892e:	b29b      	uxth	r3, r3
 8008930:	b2da      	uxtb	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	761a      	strb	r2, [r3, #24]
			u8ModbusRegisterdwin[21] = lowByte(Rejection_Total);
 8008936:	4b6a      	ldr	r3, [pc, #424]	; (8008ae0 <_ZN7Dwinhmi9dwinFrameEv+0x26c>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b2da      	uxtb	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	765a      	strb	r2, [r3, #25]
			u8ModbusRegisterdwin[23] = 0;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	76da      	strb	r2, [r3, #27]
			u8ModbusRegisterdwin[24] = 1;//wifi
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	771a      	strb	r2, [r3, #28]
			u8ModbusRegisterdwin[25] = 0;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	775a      	strb	r2, [r3, #29]
			u8ModbusRegisterdwin[26] = 1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	779a      	strb	r2, [r3, #30]
			u8ModbusRegisterdwin[27] = 0;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	77da      	strb	r2, [r3, #31]
			u8ModbusRegisterdwin[28] = 1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2020 	strb.w	r2, [r3, #32]
			noOfDataDwin=29;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	221d      	movs	r2, #29
 800896a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   			Cntid_dwin=1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8008976:	e096      	b.n	8008aa6 <_ZN7Dwinhmi9dwinFrameEv+0x232>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	225a      	movs	r2, #90	; 0x5a
 800897c:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	22a5      	movs	r2, #165	; 0xa5
 8008982:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2217      	movs	r2, #23
 8008988:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2282      	movs	r2, #130	; 0x82
 800898e:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x20;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x00;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	729a      	strb	r2, [r3, #10]
			u8ModbusRegisterdwin[7] = date_Rtc;
 80089a2:	4b48      	ldr	r3, [pc, #288]	; (8008ac4 <_ZN7Dwinhmi9dwinFrameEv+0x250>)
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	72da      	strb	r2, [r3, #11]
			u8ModbusRegisterdwin[8] = 0x00;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	731a      	strb	r2, [r3, #12]
			u8ModbusRegisterdwin[9] = month_Rtc;
 80089b0:	4b45      	ldr	r3, [pc, #276]	; (8008ac8 <_ZN7Dwinhmi9dwinFrameEv+0x254>)
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	735a      	strb	r2, [r3, #13]
			u8ModbusRegisterdwin[10] = 0x00;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	739a      	strb	r2, [r3, #14]
			u8ModbusRegisterdwin[11] = year_Rtc;
 80089be:	4b43      	ldr	r3, [pc, #268]	; (8008acc <_ZN7Dwinhmi9dwinFrameEv+0x258>)
 80089c0:	781a      	ldrb	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	73da      	strb	r2, [r3, #15]
			u8ModbusRegisterdwin[12] = 0x00;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	741a      	strb	r2, [r3, #16]
			u8ModbusRegisterdwin[13] = hour_t;
 80089cc:	4b40      	ldr	r3, [pc, #256]	; (8008ad0 <_ZN7Dwinhmi9dwinFrameEv+0x25c>)
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	745a      	strb	r2, [r3, #17]
			u8ModbusRegisterdwin[14] = 0x00;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	749a      	strb	r2, [r3, #18]
			u8ModbusRegisterdwin[15] = min_t;
 80089da:	4b3e      	ldr	r3, [pc, #248]	; (8008ad4 <_ZN7Dwinhmi9dwinFrameEv+0x260>)
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	74da      	strb	r2, [r3, #19]
			u8ModbusRegisterdwin[16] = 0x00;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	751a      	strb	r2, [r3, #20]
			u8ModbusRegisterdwin[17] = sec_t;
 80089e8:	4b3b      	ldr	r3, [pc, #236]	; (8008ad8 <_ZN7Dwinhmi9dwinFrameEv+0x264>)
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	755a      	strb	r2, [r3, #21]
			u8ModbusRegisterdwin[18] = highByte(Production_Total);
 80089f0:	4b3a      	ldr	r3, [pc, #232]	; (8008adc <_ZN7Dwinhmi9dwinFrameEv+0x268>)
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	759a      	strb	r2, [r3, #22]
			u8ModbusRegisterdwin[19] = lowByte(Production_Total);
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <_ZN7Dwinhmi9dwinFrameEv+0x268>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	75da      	strb	r2, [r3, #23]
			u8ModbusRegisterdwin[20] = highByte(Rejection_Total);
 8008a08:	4b35      	ldr	r3, [pc, #212]	; (8008ae0 <_ZN7Dwinhmi9dwinFrameEv+0x26c>)
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	0a1b      	lsrs	r3, r3, #8
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	761a      	strb	r2, [r3, #24]
			u8ModbusRegisterdwin[21] = lowByte(Rejection_Total);
 8008a16:	4b32      	ldr	r3, [pc, #200]	; (8008ae0 <_ZN7Dwinhmi9dwinFrameEv+0x26c>)
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	765a      	strb	r2, [r3, #25]
			u8ModbusRegisterdwin[23] = 0;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	76da      	strb	r2, [r3, #27]
			u8ModbusRegisterdwin[24] = 1;//wifi
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	771a      	strb	r2, [r3, #28]
			u8ModbusRegisterdwin[25] = 0;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	775a      	strb	r2, [r3, #29]
			u8ModbusRegisterdwin[26] = 1;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	779a      	strb	r2, [r3, #30]
			u8ModbusRegisterdwin[27] = 0;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	77da      	strb	r2, [r3, #31]
			u8ModbusRegisterdwin[28] = 1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2020 	strb.w	r2, [r3, #32]
			noOfDataDwin=29;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	221d      	movs	r2, #29
 8008a4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			Cntid_dwin=2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8008a56:	e026      	b.n	8008aa6 <_ZN7Dwinhmi9dwinFrameEv+0x232>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	225a      	movs	r2, #90	; 0x5a
 8008a5c:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	22a5      	movs	r2, #165	; 0xa5
 8008a62:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleReadRequestH;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2204      	movs	r2, #4
 8008a68:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleReadRequestL;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2283      	movs	r2, #131	; 0x83
 8008a6e:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x30;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2230      	movs	r2, #48	; 0x30
 8008a74:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x1e;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	221e      	movs	r2, #30
 8008a80:	729a      	strb	r2, [r3, #10]
			memset(DwinDatabuffer,0,255);
 8008a82:	22ff      	movs	r2, #255	; 0xff
 8008a84:	2100      	movs	r1, #0
 8008a86:	4817      	ldr	r0, [pc, #92]	; (8008ae4 <_ZN7Dwinhmi9dwinFrameEv+0x270>)
 8008a88:	f007 fc08 	bl	801029c <memset>
			Dwinseq=0;
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <_ZN7Dwinhmi9dwinFrameEv+0x274>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
			noOfDataDwin=7;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2207      	movs	r2, #7
 8008a96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			Cntid_dwin=0;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8008aa2:	e000      	b.n	8008aa6 <_ZN7Dwinhmi9dwinFrameEv+0x232>
		break;
 8008aa4:	bf00      	nop
	}
	HAL_UART_Transmit_IT(&huart2,u8ModbusRegisterdwin,noOfDataDwin);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	1d19      	adds	r1, r3, #4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	480d      	ldr	r0, [pc, #52]	; (8008aec <_ZN7Dwinhmi9dwinFrameEv+0x278>)
 8008ab6:	f006 f853 	bl	800eb60 <HAL_UART_Transmit_IT>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200009fc 	.word	0x200009fc
 8008ac8:	200009fd 	.word	0x200009fd
 8008acc:	200009fe 	.word	0x200009fe
 8008ad0:	200009f8 	.word	0x200009f8
 8008ad4:	200009f9 	.word	0x200009f9
 8008ad8:	200009fa 	.word	0x200009fa
 8008adc:	200000fe 	.word	0x200000fe
 8008ae0:	20000100 	.word	0x20000100
 8008ae4:	200002c0 	.word	0x200002c0
 8008ae8:	200007f6 	.word	0x200007f6
 8008aec:	2000051c 	.word	0x2000051c

08008af0 <_ZN7Dwinhmi11dwinDecoderEv>:


void Dwinhmi::dwinDecoder()
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	if(!Rx_Dwin_Complete){return;}
 8008af8:	4b53      	ldr	r3, [pc, #332]	; (8008c48 <_ZN7Dwinhmi11dwinDecoderEv+0x158>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 809a 	beq.w	8008c36 <_ZN7Dwinhmi11dwinDecoderEv+0x146>
	Rx_Dwin_Complete=0;
 8008b02:	4b51      	ldr	r3, [pc, #324]	; (8008c48 <_ZN7Dwinhmi11dwinDecoderEv+0x158>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]

	machineId = ((DwinDatabuffer[25]<<8)|DwinDatabuffer[26]);
 8008b08:	4b50      	ldr	r3, [pc, #320]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008b0a:	7e5b      	ldrb	r3, [r3, #25]
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	b21a      	sxth	r2, r3
 8008b10:	4b4e      	ldr	r3, [pc, #312]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008b12:	7e9b      	ldrb	r3, [r3, #26]
 8008b14:	b21b      	sxth	r3, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	4b4c      	ldr	r3, [pc, #304]	; (8008c50 <_ZN7Dwinhmi11dwinDecoderEv+0x160>)
 8008b1e:	801a      	strh	r2, [r3, #0]
	if(machineId > 0){
 8008b20:	4b4b      	ldr	r3, [pc, #300]	; (8008c50 <_ZN7Dwinhmi11dwinDecoderEv+0x160>)
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 8089 	beq.w	8008c3c <_ZN7Dwinhmi11dwinDecoderEv+0x14c>
		portNumber = ((DwinDatabuffer[23]<<8)|DwinDatabuffer[24]);
 8008b2a:	4b48      	ldr	r3, [pc, #288]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008b2c:	7ddb      	ldrb	r3, [r3, #23]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	b21a      	sxth	r2, r3
 8008b32:	4b46      	ldr	r3, [pc, #280]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008b34:	7e1b      	ldrb	r3, [r3, #24]
 8008b36:	b21b      	sxth	r3, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	4b45      	ldr	r3, [pc, #276]	; (8008c54 <_ZN7Dwinhmi11dwinDecoderEv+0x164>)
 8008b40:	801a      	strh	r2, [r3, #0]
		for(shiftP=1,len_i=0;shiftP<=22;shiftP++,len_i++){
 8008b42:	4b45      	ldr	r3, [pc, #276]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	4b44      	ldr	r3, [pc, #272]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	4b42      	ldr	r3, [pc, #264]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b16      	cmp	r3, #22
 8008b54:	d81e      	bhi.n	8008b94 <_ZN7Dwinhmi11dwinDecoderEv+0xa4>
			if(DwinDatabuffer[shiftP] == 0xff){break;}
 8008b56:	4b40      	ldr	r3, [pc, #256]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b3b      	ldr	r3, [pc, #236]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008b5e:	5c9b      	ldrb	r3, [r3, r2]
 8008b60:	2bff      	cmp	r3, #255	; 0xff
 8008b62:	d016      	beq.n	8008b92 <_ZN7Dwinhmi11dwinDecoderEv+0xa2>
			serverAddress[len_i] = DwinDatabuffer[shiftP];
 8008b64:	4b3c      	ldr	r3, [pc, #240]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4b3c      	ldr	r3, [pc, #240]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4b36      	ldr	r3, [pc, #216]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008b72:	5c59      	ldrb	r1, [r3, r1]
 8008b74:	4b3a      	ldr	r3, [pc, #232]	; (8008c60 <_ZN7Dwinhmi11dwinDecoderEv+0x170>)
 8008b76:	5499      	strb	r1, [r3, r2]
		for(shiftP=1,len_i=0;shiftP<=22;shiftP++,len_i++){
 8008b78:	4b37      	ldr	r3, [pc, #220]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	4b35      	ldr	r3, [pc, #212]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	4b33      	ldr	r3, [pc, #204]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e7dd      	b.n	8008b4e <_ZN7Dwinhmi11dwinDecoderEv+0x5e>
			if(DwinDatabuffer[shiftP] == 0xff){break;}
 8008b92:	bf00      	nop
		}
		for(shiftP=29,len_i=0;shiftP<=49;shiftP++,len_i++){
 8008b94:	4b30      	ldr	r3, [pc, #192]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008b96:	221d      	movs	r2, #29
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	4b30      	ldr	r3, [pc, #192]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	4b2d      	ldr	r3, [pc, #180]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b31      	cmp	r3, #49	; 0x31
 8008ba6:	d81e      	bhi.n	8008be6 <_ZN7Dwinhmi11dwinDecoderEv+0xf6>
			if(DwinDatabuffer[shiftP] == 0xff){break;}
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008bb0:	5c9b      	ldrb	r3, [r3, r2]
 8008bb2:	2bff      	cmp	r3, #255	; 0xff
 8008bb4:	d016      	beq.n	8008be4 <_ZN7Dwinhmi11dwinDecoderEv+0xf4>
			userNameWifi[len_i] = DwinDatabuffer[shiftP];
 8008bb6:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4b27      	ldr	r3, [pc, #156]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4b22      	ldr	r3, [pc, #136]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008bc4:	5c59      	ldrb	r1, [r3, r1]
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <_ZN7Dwinhmi11dwinDecoderEv+0x174>)
 8008bc8:	5499      	strb	r1, [r3, r2]
		for(shiftP=29,len_i=0;shiftP<=49;shiftP++,len_i++){
 8008bca:	4b23      	ldr	r3, [pc, #140]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	4b21      	ldr	r3, [pc, #132]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	4b21      	ldr	r3, [pc, #132]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b1f      	ldr	r3, [pc, #124]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e7dd      	b.n	8008ba0 <_ZN7Dwinhmi11dwinDecoderEv+0xb0>
			if(DwinDatabuffer[shiftP] == 0xff){break;}
 8008be4:	bf00      	nop
		}
		for(shiftP=34,len_i=0;shiftP<=30;shiftP++,len_i++){
 8008be6:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008be8:	2222      	movs	r2, #34	; 0x22
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	4b1b      	ldr	r3, [pc, #108]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b1e      	cmp	r3, #30
 8008bf8:	d820      	bhi.n	8008c3c <_ZN7Dwinhmi11dwinDecoderEv+0x14c>
			if(DwinDatabuffer[shiftP] == 0xff){break;}
 8008bfa:	4b17      	ldr	r3, [pc, #92]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008c02:	5c9b      	ldrb	r3, [r3, r2]
 8008c04:	2bff      	cmp	r3, #255	; 0xff
 8008c06:	d018      	beq.n	8008c3a <_ZN7Dwinhmi11dwinDecoderEv+0x14a>
			passwordWifi[len_i] = DwinDatabuffer[shiftP];
 8008c08:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4b13      	ldr	r3, [pc, #76]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <_ZN7Dwinhmi11dwinDecoderEv+0x15c>)
 8008c16:	5c59      	ldrb	r1, [r3, r1]
 8008c18:	4b13      	ldr	r3, [pc, #76]	; (8008c68 <_ZN7Dwinhmi11dwinDecoderEv+0x178>)
 8008c1a:	5499      	strb	r1, [r3, r2]
		for(shiftP=34,len_i=0;shiftP<=30;shiftP++,len_i++){
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	3301      	adds	r3, #1
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <_ZN7Dwinhmi11dwinDecoderEv+0x168>)
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <_ZN7Dwinhmi11dwinDecoderEv+0x16c>)
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	e7dd      	b.n	8008bf2 <_ZN7Dwinhmi11dwinDecoderEv+0x102>
	if(!Rx_Dwin_Complete){return;}
 8008c36:	bf00      	nop
 8008c38:	e000      	b.n	8008c3c <_ZN7Dwinhmi11dwinDecoderEv+0x14c>
			if(DwinDatabuffer[shiftP] == 0xff){break;}
 8008c3a:	bf00      	nop
		}

	}

}
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	200002bd 	.word	0x200002bd
 8008c4c:	200002c0 	.word	0x200002c0
 8008c50:	200007b2 	.word	0x200007b2
 8008c54:	200007b4 	.word	0x200007b4
 8008c58:	200007f4 	.word	0x200007f4
 8008c5c:	200007f5 	.word	0x200007f5
 8008c60:	200007b8 	.word	0x200007b8
 8008c64:	200007cc 	.word	0x200007cc
 8008c68:	200007e0 	.word	0x200007e0

08008c6c <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	4a04      	ldr	r2, [pc, #16]	; (8008c88 <_ZN10W5500ClassC1Ev+0x1c>)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	08011010 	.word	0x08011010

08008c8c <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	4a04      	ldr	r2, [pc, #16]	; (8008ca8 <_ZN10W5500ClassD1Ev+0x1c>)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	08011010 	.word	0x08011010

08008cac <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
}
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff ffe9 	bl	8008c8c <_ZN10W5500ClassD1Ev>
 8008cba:	2104      	movs	r1, #4
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f007 faa8 	bl	8010212 <_ZdlPvj>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_Z41__static_initialization_and_destruction_0ii>:
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d107      	bne.n	8008cec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d102      	bne.n	8008cec <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8008ce6:	4809      	ldr	r0, [pc, #36]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008ce8:	f7ff ffc0 	bl	8008c6c <_ZN10W5500ClassC1Ev>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d107      	bne.n	8008d02 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d102      	bne.n	8008d02 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008cfe:	f7ff ffc5 	bl	8008c8c <_ZN10W5500ClassD1Ev>
}
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	200007f8 	.word	0x200007f8

08008d10 <_GLOBAL__sub_I_w5500>:
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d18:	2001      	movs	r0, #1
 8008d1a:	f7ff ffd7 	bl	8008ccc <_Z41__static_initialization_and_destruction_0ii>
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <_GLOBAL__sub_D_w5500>:
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f7ff ffcf 	bl	8008ccc <_Z41__static_initialization_and_destruction_0ii>
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <_ZN9ModbusrtuC1Ev>:
#include "Modbus_types.h"

extern uint16_t temperatureSetOL,temperaturehighSetOL,temperatureLowSetOL;

uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	4a0e      	ldr	r2, [pc, #56]	; (8008d74 <_ZN9ModbusrtuC1Ev+0x44>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	761a      	strb	r2, [r3, #24]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a0c      	ldr	r2, [pc, #48]	; (8008d78 <_ZN9ModbusrtuC1Ev+0x48>)
 8008d48:	3319      	adds	r3, #25
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d50:	4618      	mov	r0, r3
 8008d52:	f007 fa95 	bl	8010280 <memcpy>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a08      	ldr	r2, [pc, #32]	; (8008d7c <_ZN9ModbusrtuC1Ev+0x4c>)
 8008d5a:	f203 1319 	addw	r3, r3, #281	; 0x119
 8008d5e:	4611      	mov	r1, r2
 8008d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d64:	4618      	mov	r0, r3
 8008d66:	f007 fa8b 	bl	8010280 <memcpy>
	// TODO Auto-generated constructor stub

}
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	08011020 	.word	0x08011020
 8008d78:	08010be0 	.word	0x08010be0
 8008d7c:	08010ce0 	.word	0x08010ce0

08008d80 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	4a04      	ldr	r2, [pc, #16]	; (8008d9c <_ZN9ModbusrtuD1Ev+0x1c>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	08011020 	.word	0x08011020

08008da0 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
}
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ffe9 	bl	8008d80 <_ZN9ModbusrtuD1Ev>
 8008dae:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f007 fa2d 	bl	8010212 <_ZdlPvj>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	//read_rxint_set out_read_rxint_set;
	switch(Cntid)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	791b      	ldrb	r3, [r3, #4]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	f200 8135 	bhi.w	8009040 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x27c>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <_ZN9Modbusrtu21ModbusReadTransactionEv+0x18>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008e7d 	.word	0x08008e7d
 8008de4:	08008f07 	.word	0x08008f07
 8008de8:	08008f91 	.word	0x08008f91
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7e1a      	ldrb	r2, [r3, #24]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x03;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2203      	movs	r2, #3
 8008df8:	719a      	strb	r2, [r3, #6]
		_u16ReadAddress 	= 0x00;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x04;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2204      	movs	r2, #4
 8008e04:	819a      	strh	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	795a      	ldrb	r2, [r3, #5]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	799a      	ldrb	r2, [r3, #6]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	891b      	ldrh	r3, [r3, #8]
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	891b      	ldrh	r3, [r3, #8]
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadQty & 0xff00)>>8);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	899b      	ldrh	r3, [r3, #12]
 8008e32:	0a1b      	lsrs	r3, r3, #8
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadQty & 0x00ff);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	899b      	ldrh	r3, [r3, #12]
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3310      	adds	r3, #16
 8008e4a:	2206      	movs	r2, #6
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f922 	bl	8009098 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	89db      	ldrh	r3, [r3, #14]
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	89db      	ldrh	r3, [r3, #14]
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	75da      	strb	r2, [r3, #23]

		Cntid=1;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	711a      	strb	r2, [r3, #4]
	break;
 8008e7a:	e0e8      	b.n	800904e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 1:
		_u8MBSlave 			= mTemperatureSensorId;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7e1a      	ldrb	r2, [r3, #24]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x06;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2206      	movs	r2, #6
 8008e88:	719a      	strb	r2, [r3, #6]
		_u16WriteAddress 	= 0x00;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	815a      	strh	r2, [r3, #10]
		u8ModbusRegister[0] = _u8MBSlave;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	795a      	ldrb	r2, [r3, #5]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	799a      	ldrb	r2, [r3, #6]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	895b      	ldrh	r3, [r3, #10]
 8008ea4:	0a1b      	lsrs	r3, r3, #8
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	895b      	ldrh	r3, [r3, #10]
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((temperatureSetOL & 0xff00)>>8);
 8008eb8:	4b6a      	ldr	r3, [pc, #424]	; (8009064 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	0a1b      	lsrs	r3, r3, #8
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(temperatureSetOL & 0x00ff);
 8008ec6:	4b67      	ldr	r3, [pc, #412]	; (8009064 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3310      	adds	r3, #16
 8008ed4:	2206      	movs	r2, #6
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8dd 	bl	8009098 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	89db      	ldrh	r3, [r3, #14]
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	89db      	ldrh	r3, [r3, #14]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	75da      	strb	r2, [r3, #23]
		Cntid=2;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	711a      	strb	r2, [r3, #4]
	break;
 8008f04:	e0a3      	b.n	800904e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 2:
			_u8MBSlave 			= mTemperatureSensorId;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7e1a      	ldrb	r2, [r3, #24]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2206      	movs	r2, #6
 8008f12:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x01;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	795a      	ldrb	r2, [r3, #5]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	799a      	ldrb	r2, [r3, #6]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	895b      	ldrh	r3, [r3, #10]
 8008f2e:	0a1b      	lsrs	r3, r3, #8
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	895b      	ldrh	r3, [r3, #10]
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperaturehighSetOL & 0xff00)>>8);
 8008f42:	4b49      	ldr	r3, [pc, #292]	; (8009068 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperaturehighSetOL & 0x00ff);
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	2206      	movs	r2, #6
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f898 	bl	8009098 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	89db      	ldrh	r3, [r3, #14]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	89db      	ldrh	r3, [r3, #14]
 8008f7e:	0a1b      	lsrs	r3, r3, #8
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	75da      	strb	r2, [r3, #23]
			Cntid=3;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	711a      	strb	r2, [r3, #4]
		break;
 8008f8e:	e05e      	b.n	800904e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 3:
			_u8MBSlave 			= mTemperatureSensorId;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7e1a      	ldrb	r2, [r3, #24]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x02;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	795a      	ldrb	r2, [r3, #5]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	799a      	ldrb	r2, [r3, #6]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	895b      	ldrh	r3, [r3, #10]
 8008fb8:	0a1b      	lsrs	r3, r3, #8
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	895b      	ldrh	r3, [r3, #10]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperatureLowSetOL & 0xff00)>>8);
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	0a1b      	lsrs	r3, r3, #8
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperatureLowSetOL & 0x00ff);
 8008fda:	4b24      	ldr	r3, [pc, #144]	; (800906c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3310      	adds	r3, #16
 8008fe8:	2206      	movs	r2, #6
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f853 	bl	8009098 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	89db      	ldrh	r3, [r3, #14]
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	89db      	ldrh	r3, [r3, #14]
 8009008:	0a1b      	lsrs	r3, r3, #8
 800900a:	b29b      	uxth	r3, r3
 800900c:	b2da      	uxtb	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	75da      	strb	r2, [r3, #23]
			Cntid=0;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	711a      	strb	r2, [r3, #4]
			if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7e1b      	ldrb	r3, [r3, #24]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d103      	bne.n	8009028 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x264>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	761a      	strb	r2, [r3, #24]
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
			else{mTemperatureSensorId=1;}
		break;
 8009026:	e012      	b.n	800904e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	7e1b      	ldrb	r3, [r3, #24]
 800902c:	2b02      	cmp	r3, #2
 800902e:	d103      	bne.n	8009038 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x274>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2203      	movs	r2, #3
 8009034:	761a      	strb	r2, [r3, #24]
		break;
 8009036:	e00a      	b.n	800904e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else{mTemperatureSensorId=1;}
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	761a      	strb	r2, [r3, #24]
		break;
 800903e:	e006      	b.n	800904e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	default:
		Cntid=0;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	761a      	strb	r2, [r3, #24]
	break;
 800904c:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,sizeof(u8ModbusRegister));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3310      	adds	r3, #16
 8009052:	2208      	movs	r2, #8
 8009054:	4619      	mov	r1, r3
 8009056:	4806      	ldr	r0, [pc, #24]	; (8009070 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2ac>)
 8009058:	f005 fd82 	bl	800eb60 <HAL_UART_Transmit_IT>

}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	200000f6 	.word	0x200000f6
 8009068:	200000f8 	.word	0x200000f8
 800906c:	200000fa 	.word	0x200000fa
 8009070:	20000498 	.word	0x20000498

08009074 <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
 800907c:	220d      	movs	r2, #13
 800907e:	4904      	ldr	r1, [pc, #16]	; (8009090 <HAL_UART_TxCpltCallback+0x1c>)
 8009080:	4804      	ldr	r0, [pc, #16]	; (8009094 <HAL_UART_TxCpltCallback+0x20>)
 8009082:	f005 fddb 	bl	800ec3c <HAL_UART_Receive_IT>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	200007fc 	.word	0x200007fc
 8009094:	20000498 	.word	0x20000498

08009098 <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 80090a6:	23ff      	movs	r3, #255	; 0xff
 80090a8:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 80090aa:	23ff      	movs	r3, #255	; 0xff
 80090ac:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]
 80090b6:	7dfa      	ldrb	r2, [r7, #23]
 80090b8:	7d3b      	ldrb	r3, [r7, #20]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d217      	bcs.n	80090ee <_ZN9Modbusrtu11ASCChecksumEPhh+0x56>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	60ba      	str	r2, [r7, #8]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	7dbb      	ldrb	r3, [r7, #22]
 80090c8:	4053      	eors	r3, r2
 80090ca:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 80090cc:	7cfb      	ldrb	r3, [r7, #19]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	7e5a      	ldrb	r2, [r3, #25]
 80090d4:	7d7b      	ldrb	r3, [r7, #21]
 80090d6:	4053      	eors	r3, r2
 80090d8:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 80090da:	7cfb      	ldrb	r3, [r7, #19]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 80090e4:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	3301      	adds	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
 80090ec:	e7e3      	b.n	80090b6 <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 80090ee:	7d7b      	ldrb	r3, [r7, #21]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	b21a      	sxth	r2, r3
 80090f4:	7dbb      	ldrb	r3, [r7, #22]
 80090f6:	b21b      	sxth	r3, r3
 80090f8:	4313      	orrs	r3, r2
 80090fa:	b21b      	sxth	r3, r3
 80090fc:	b29b      	uxth	r3, r3
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <_ZN14OfflineStorageC1Ev>:
extern uint8_t triggerStartForReq,startStopStatus;
uint16_t productionIncK1;
uint8_t triggerStartForReqK1;
uint8_t startStopStatusK1;
//uint8_t Checkbuf[100];
OfflineStorage::OfflineStorage() {
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	4a04      	ldr	r2, [pc, #16]	; (8009128 <_ZN14OfflineStorageC1Ev+0x1c>)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	08011030 	.word	0x08011030

0800912c <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	4a04      	ldr	r2, [pc, #16]	; (8009148 <_ZN14OfflineStorageD1Ev+0x1c>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	08011030 	.word	0x08011030

0800914c <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
}
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ffe9 	bl	800912c <_ZN14OfflineStorageD1Ev>
 800915a:	214c      	movs	r1, #76	; 0x4c
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f007 f858 	bl	8010212 <_ZdlPvj>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 800916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916e:	b097      	sub	sp, #92	; 0x5c
 8009170:	af0e      	add	r7, sp, #56	; 0x38
 8009172:	61f8      	str	r0, [r7, #28]
	if(UpdateStorage==0){return;}
 8009174:	4b8c      	ldr	r3, [pc, #560]	; (80093a8 <_ZN14OfflineStorage3runEv+0x23c>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8224 	beq.w	80095c6 <_ZN14OfflineStorage3runEv+0x45a>
	UpdateStorage=0;
 800917e:	4b8a      	ldr	r3, [pc, #552]	; (80093a8 <_ZN14OfflineStorage3runEv+0x23c>)
 8009180:	2200      	movs	r2, #0
 8009182:	701a      	strb	r2, [r3, #0]

	ProductionSet_charFormat[100]={'\0'};
 8009184:	4b89      	ldr	r3, [pc, #548]	; (80093ac <_ZN14OfflineStorage3runEv+0x240>)
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	/*high limit check for system data*/
	CurrentShift = (CurrentShift > 4)?4:CurrentShift;
 800918c:	4b88      	ldr	r3, [pc, #544]	; (80093b0 <_ZN14OfflineStorage3runEv+0x244>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b04      	cmp	r3, #4
 8009192:	bf28      	it	cs
 8009194:	2304      	movcs	r3, #4
 8009196:	b2da      	uxtb	r2, r3
 8009198:	4b85      	ldr	r3, [pc, #532]	; (80093b0 <_ZN14OfflineStorage3runEv+0x244>)
 800919a:	701a      	strb	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production = (MAC_Gen_Prod_Input1_Production >2)?0:MAC_Gen_Prod_Input1_Production;
 800919c:	4b85      	ldr	r3, [pc, #532]	; (80093b4 <_ZN14OfflineStorage3runEv+0x248>)
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d802      	bhi.n	80091aa <_ZN14OfflineStorage3runEv+0x3e>
 80091a4:	4b83      	ldr	r3, [pc, #524]	; (80093b4 <_ZN14OfflineStorage3runEv+0x248>)
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	e000      	b.n	80091ac <_ZN14OfflineStorage3runEv+0x40>
 80091aa:	2300      	movs	r3, #0
 80091ac:	4a81      	ldr	r2, [pc, #516]	; (80093b4 <_ZN14OfflineStorage3runEv+0x248>)
 80091ae:	8013      	strh	r3, [r2, #0]
	MAC_Gen_Rej_Input_Production =(MAC_Gen_Rej_Input_Production >2)?0:MAC_Gen_Rej_Input_Production;
 80091b0:	4b81      	ldr	r3, [pc, #516]	; (80093b8 <_ZN14OfflineStorage3runEv+0x24c>)
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d802      	bhi.n	80091be <_ZN14OfflineStorage3runEv+0x52>
 80091b8:	4b7f      	ldr	r3, [pc, #508]	; (80093b8 <_ZN14OfflineStorage3runEv+0x24c>)
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	e000      	b.n	80091c0 <_ZN14OfflineStorage3runEv+0x54>
 80091be:	2300      	movs	r3, #0
 80091c0:	4a7d      	ldr	r2, [pc, #500]	; (80093b8 <_ZN14OfflineStorage3runEv+0x24c>)
 80091c2:	8013      	strh	r3, [r2, #0]
	Dye_Temperature =(Dye_Temperature >30)?30:Dye_Temperature;
 80091c4:	4b7d      	ldr	r3, [pc, #500]	; (80093bc <_ZN14OfflineStorage3runEv+0x250>)
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	2b1e      	cmp	r3, #30
 80091ca:	bf28      	it	cs
 80091cc:	231e      	movcs	r3, #30
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	4b7a      	ldr	r3, [pc, #488]	; (80093bc <_ZN14OfflineStorage3runEv+0x250>)
 80091d2:	801a      	strh	r2, [r3, #0]
	Connector_Temperature =(Connector_Temperature>30)?30:Connector_Temperature;
 80091d4:	4b7a      	ldr	r3, [pc, #488]	; (80093c0 <_ZN14OfflineStorage3runEv+0x254>)
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	2b1e      	cmp	r3, #30
 80091da:	bf28      	it	cs
 80091dc:	231e      	movcs	r3, #30
 80091de:	b29a      	uxth	r2, r3
 80091e0:	4b77      	ldr	r3, [pc, #476]	; (80093c0 <_ZN14OfflineStorage3runEv+0x254>)
 80091e2:	801a      	strh	r2, [r3, #0]
	hour_t =(hour_t >25)?70:hour_t;
 80091e4:	4b77      	ldr	r3, [pc, #476]	; (80093c4 <_ZN14OfflineStorage3runEv+0x258>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b19      	cmp	r3, #25
 80091ea:	d802      	bhi.n	80091f2 <_ZN14OfflineStorage3runEv+0x86>
 80091ec:	4b75      	ldr	r3, [pc, #468]	; (80093c4 <_ZN14OfflineStorage3runEv+0x258>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	e000      	b.n	80091f4 <_ZN14OfflineStorage3runEv+0x88>
 80091f2:	2346      	movs	r3, #70	; 0x46
 80091f4:	4a73      	ldr	r2, [pc, #460]	; (80093c4 <_ZN14OfflineStorage3runEv+0x258>)
 80091f6:	7013      	strb	r3, [r2, #0]
	min_t=(min_t > 70)?70:min_t;
 80091f8:	4b73      	ldr	r3, [pc, #460]	; (80093c8 <_ZN14OfflineStorage3runEv+0x25c>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b46      	cmp	r3, #70	; 0x46
 80091fe:	bf28      	it	cs
 8009200:	2346      	movcs	r3, #70	; 0x46
 8009202:	b2da      	uxtb	r2, r3
 8009204:	4b70      	ldr	r3, [pc, #448]	; (80093c8 <_ZN14OfflineStorage3runEv+0x25c>)
 8009206:	701a      	strb	r2, [r3, #0]
	sec_t=(sec_t >70)?70:sec_t;
 8009208:	4b70      	ldr	r3, [pc, #448]	; (80093cc <_ZN14OfflineStorage3runEv+0x260>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b46      	cmp	r3, #70	; 0x46
 800920e:	bf28      	it	cs
 8009210:	2346      	movcs	r3, #70	; 0x46
 8009212:	b2da      	uxtb	r2, r3
 8009214:	4b6d      	ldr	r3, [pc, #436]	; (80093cc <_ZN14OfflineStorage3runEv+0x260>)
 8009216:	701a      	strb	r2, [r3, #0]
	date_Rtc=(date_Rtc >32)?70:date_Rtc;
 8009218:	4b6d      	ldr	r3, [pc, #436]	; (80093d0 <_ZN14OfflineStorage3runEv+0x264>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b20      	cmp	r3, #32
 800921e:	d802      	bhi.n	8009226 <_ZN14OfflineStorage3runEv+0xba>
 8009220:	4b6b      	ldr	r3, [pc, #428]	; (80093d0 <_ZN14OfflineStorage3runEv+0x264>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	e000      	b.n	8009228 <_ZN14OfflineStorage3runEv+0xbc>
 8009226:	2346      	movs	r3, #70	; 0x46
 8009228:	4a69      	ldr	r2, [pc, #420]	; (80093d0 <_ZN14OfflineStorage3runEv+0x264>)
 800922a:	7013      	strb	r3, [r2, #0]
	month_Rtc =(month_Rtc>13)?70:month_Rtc;
 800922c:	4b69      	ldr	r3, [pc, #420]	; (80093d4 <_ZN14OfflineStorage3runEv+0x268>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b0d      	cmp	r3, #13
 8009232:	d802      	bhi.n	800923a <_ZN14OfflineStorage3runEv+0xce>
 8009234:	4b67      	ldr	r3, [pc, #412]	; (80093d4 <_ZN14OfflineStorage3runEv+0x268>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	e000      	b.n	800923c <_ZN14OfflineStorage3runEv+0xd0>
 800923a:	2346      	movs	r3, #70	; 0x46
 800923c:	4a65      	ldr	r2, [pc, #404]	; (80093d4 <_ZN14OfflineStorage3runEv+0x268>)
 800923e:	7013      	strb	r3, [r2, #0]
	year_Rtc = (year_Rtc>90)?70:year_Rtc;
 8009240:	4b65      	ldr	r3, [pc, #404]	; (80093d8 <_ZN14OfflineStorage3runEv+0x26c>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b5a      	cmp	r3, #90	; 0x5a
 8009246:	d802      	bhi.n	800924e <_ZN14OfflineStorage3runEv+0xe2>
 8009248:	4b63      	ldr	r3, [pc, #396]	; (80093d8 <_ZN14OfflineStorage3runEv+0x26c>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	e000      	b.n	8009250 <_ZN14OfflineStorage3runEv+0xe4>
 800924e:	2346      	movs	r3, #70	; 0x46
 8009250:	4a61      	ldr	r2, [pc, #388]	; (80093d8 <_ZN14OfflineStorage3runEv+0x26c>)
 8009252:	7013      	strb	r3, [r2, #0]
	Manual_RejectionCount = (Manual_RejectionCount >2)?2:Manual_RejectionCount;
 8009254:	4b61      	ldr	r3, [pc, #388]	; (80093dc <_ZN14OfflineStorage3runEv+0x270>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b02      	cmp	r3, #2
 800925a:	bf28      	it	cs
 800925c:	2302      	movcs	r3, #2
 800925e:	b2da      	uxtb	r2, r3
 8009260:	4b5e      	ldr	r3, [pc, #376]	; (80093dc <_ZN14OfflineStorage3runEv+0x270>)
 8009262:	701a      	strb	r2, [r3, #0]
	Production_Zeit =(Production_Zeit>10)?1:Production_Zeit;
 8009264:	4b5e      	ldr	r3, [pc, #376]	; (80093e0 <_ZN14OfflineStorage3runEv+0x274>)
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	2b0a      	cmp	r3, #10
 800926a:	d802      	bhi.n	8009272 <_ZN14OfflineStorage3runEv+0x106>
 800926c:	4b5c      	ldr	r3, [pc, #368]	; (80093e0 <_ZN14OfflineStorage3runEv+0x274>)
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	e000      	b.n	8009274 <_ZN14OfflineStorage3runEv+0x108>
 8009272:	2301      	movs	r3, #1
 8009274:	4a5a      	ldr	r2, [pc, #360]	; (80093e0 <_ZN14OfflineStorage3runEv+0x274>)
 8009276:	8013      	strh	r3, [r2, #0]
	Rejection_Zeit = (Rejection_Zeit>10)?1:Rejection_Zeit;
 8009278:	4b5a      	ldr	r3, [pc, #360]	; (80093e4 <_ZN14OfflineStorage3runEv+0x278>)
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	2b0a      	cmp	r3, #10
 800927e:	d802      	bhi.n	8009286 <_ZN14OfflineStorage3runEv+0x11a>
 8009280:	4b58      	ldr	r3, [pc, #352]	; (80093e4 <_ZN14OfflineStorage3runEv+0x278>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	e000      	b.n	8009288 <_ZN14OfflineStorage3runEv+0x11c>
 8009286:	2301      	movs	r3, #1
 8009288:	4a56      	ldr	r2, [pc, #344]	; (80093e4 <_ZN14OfflineStorage3runEv+0x278>)
 800928a:	8013      	strh	r3, [r2, #0]
	SectorPos = (SectorPos > 900)?1:SectorPos;
 800928c:	4b56      	ldr	r3, [pc, #344]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009294:	d802      	bhi.n	800929c <_ZN14OfflineStorage3runEv+0x130>
 8009296:	4b54      	ldr	r3, [pc, #336]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	e000      	b.n	800929e <_ZN14OfflineStorage3runEv+0x132>
 800929c:	2301      	movs	r3, #1
 800929e:	4a52      	ldr	r2, [pc, #328]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 80092a0:	8013      	strh	r3, [r2, #0]
/*high limit check for system data*/
	sprintf(ProductionSet_charFormat,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',CurrentShift,MAC_Gen_Prod_Input1_Production,
 80092a2:	4b43      	ldr	r3, [pc, #268]	; (80093b0 <_ZN14OfflineStorage3runEv+0x244>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	469c      	mov	ip, r3
 80092a8:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <_ZN14OfflineStorage3runEv+0x248>)
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	4b42      	ldr	r3, [pc, #264]	; (80093b8 <_ZN14OfflineStorage3runEv+0x24c>)
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	4619      	mov	r1, r3
 80092b4:	4b41      	ldr	r3, [pc, #260]	; (80093bc <_ZN14OfflineStorage3runEv+0x250>)
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	4b41      	ldr	r3, [pc, #260]	; (80093c0 <_ZN14OfflineStorage3runEv+0x254>)
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	461c      	mov	r4, r3
 80092c0:	4b40      	ldr	r3, [pc, #256]	; (80093c4 <_ZN14OfflineStorage3runEv+0x258>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	461d      	mov	r5, r3
 80092c6:	4b40      	ldr	r3, [pc, #256]	; (80093c8 <_ZN14OfflineStorage3runEv+0x25c>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	461e      	mov	r6, r3
 80092cc:	4b3f      	ldr	r3, [pc, #252]	; (80093cc <_ZN14OfflineStorage3runEv+0x260>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	61bb      	str	r3, [r7, #24]
 80092d2:	4b3f      	ldr	r3, [pc, #252]	; (80093d0 <_ZN14OfflineStorage3runEv+0x264>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	4b3e      	ldr	r3, [pc, #248]	; (80093d4 <_ZN14OfflineStorage3runEv+0x268>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	4b3e      	ldr	r3, [pc, #248]	; (80093d8 <_ZN14OfflineStorage3runEv+0x26c>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	4b3d      	ldr	r3, [pc, #244]	; (80093dc <_ZN14OfflineStorage3runEv+0x270>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	60bb      	str	r3, [r7, #8]
 80092ea:	4b3f      	ldr	r3, [pc, #252]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	607b      	str	r3, [r7, #4]
 80092f0:	2322      	movs	r3, #34	; 0x22
 80092f2:	930d      	str	r3, [sp, #52]	; 0x34
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	930c      	str	r3, [sp, #48]	; 0x30
 80092f8:	237b      	movs	r3, #123	; 0x7b
 80092fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	9308      	str	r3, [sp, #32]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	9306      	str	r3, [sp, #24]
 8009310:	9605      	str	r6, [sp, #20]
 8009312:	9504      	str	r5, [sp, #16]
 8009314:	9403      	str	r4, [sp, #12]
 8009316:	9002      	str	r0, [sp, #8]
 8009318:	9101      	str	r1, [sp, #4]
 800931a:	9200      	str	r2, [sp, #0]
 800931c:	4663      	mov	r3, ip
 800931e:	2222      	movs	r2, #34	; 0x22
 8009320:	4932      	ldr	r1, [pc, #200]	; (80093ec <_ZN14OfflineStorage3runEv+0x280>)
 8009322:	4822      	ldr	r0, [pc, #136]	; (80093ac <_ZN14OfflineStorage3runEv+0x240>)
 8009324:	f007 f8b2 	bl	801048c <siprintf>
			MAC_Gen_Rej_Input_Production,Dye_Temperature,Connector_Temperature,hour_t,
			min_t,sec_t,date_Rtc,month_Rtc,year_Rtc,Manual_RejectionCount,123,SectorPos,'"');

	//Fix the size
	NoofData = strlen(ProductionSet_charFormat);
 8009328:	4820      	ldr	r0, [pc, #128]	; (80093ac <_ZN14OfflineStorage3runEv+0x240>)
 800932a:	f7f6 ff51 	bl	80001d0 <strlen>
 800932e:	4603      	mov	r3, r0
 8009330:	b29a      	uxth	r2, r3
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	memcpy(ProductionSet_uintFormat,ProductionSet_charFormat,NoofData);
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800933e:	461a      	mov	r2, r3
 8009340:	491a      	ldr	r1, [pc, #104]	; (80093ac <_ZN14OfflineStorage3runEv+0x240>)
 8009342:	482b      	ldr	r0, [pc, #172]	; (80093f0 <_ZN14OfflineStorage3runEv+0x284>)
 8009344:	f006 ff9c 	bl	8010280 <memcpy>

	SectorPos = SectorPos+1;
 8009348:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	4b25      	ldr	r3, [pc, #148]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 8009352:	801a      	strh	r2, [r3, #0]

	if((SectorPos % 16)==0)
 8009354:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	f003 030f 	and.w	r3, r3, #15
 800935c:	2b00      	cmp	r3, #0
 800935e:	d160      	bne.n	8009422 <_ZN14OfflineStorage3runEv+0x2b6>
	{
		tempBlockcalc = SectorPos/16;
 8009360:	4b21      	ldr	r3, [pc, #132]	; (80093e8 <_ZN14OfflineStorage3runEv+0x27c>)
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	091b      	lsrs	r3, r3, #4
 8009366:	b29b      	uxth	r3, r3
 8009368:	b2da      	uxtb	r2, r3
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		BlockStatusOffline[tempBlockcalc-1]	=1;
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009376:	3b01      	subs	r3, #1
 8009378:	4a1e      	ldr	r2, [pc, #120]	; (80093f4 <_ZN14OfflineStorage3runEv+0x288>)
 800937a:	2101      	movs	r1, #1
 800937c:	54d1      	strb	r1, [r2, r3]
		updateInBlockFill=1;
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		if(tempBlockcalc >= MAXNOOFBLOCK)
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800938c:	2b1f      	cmp	r3, #31
 800938e:	d933      	bls.n	80093f8 <_ZN14OfflineStorage3runEv+0x28c>
		{
			tempBlockcalc=0;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			BlockStatusOffline[tempBlockcalc]	=2;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800939e:	461a      	mov	r2, r3
 80093a0:	4b14      	ldr	r3, [pc, #80]	; (80093f4 <_ZN14OfflineStorage3runEv+0x288>)
 80093a2:	2102      	movs	r1, #2
 80093a4:	5499      	strb	r1, [r3, r2]
 80093a6:	e02e      	b.n	8009406 <_ZN14OfflineStorage3runEv+0x29a>
 80093a8:	2000079c 	.word	0x2000079c
 80093ac:	20000960 	.word	0x20000960
 80093b0:	200009ff 	.word	0x200009ff
 80093b4:	20000790 	.word	0x20000790
 80093b8:	20000794 	.word	0x20000794
 80093bc:	200001e2 	.word	0x200001e2
 80093c0:	200001e4 	.word	0x200001e4
 80093c4:	200009f8 	.word	0x200009f8
 80093c8:	200009f9 	.word	0x200009f9
 80093cc:	200009fa 	.word	0x200009fa
 80093d0:	200009fc 	.word	0x200009fc
 80093d4:	200009fd 	.word	0x200009fd
 80093d8:	200009fe 	.word	0x200009fe
 80093dc:	20000798 	.word	0x20000798
 80093e0:	20000792 	.word	0x20000792
 80093e4:	20000796 	.word	0x20000796
 80093e8:	200009ca 	.word	0x200009ca
 80093ec:	08010de0 	.word	0x08010de0
 80093f0:	200008fc 	.word	0x200008fc
 80093f4:	200009cc 	.word	0x200009cc
		}
		else
		{
			BlockStatusOffline[tempBlockcalc]	=2;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80093fe:	461a      	mov	r2, r3
 8009400:	4b73      	ldr	r3, [pc, #460]	; (80095d0 <_ZN14OfflineStorage3runEv+0x464>)
 8009402:	2102      	movs	r1, #2
 8009404:	5499      	strb	r1, [r3, r2]
		}
		if(SectorPos >= 512){SectorPos=0;}
 8009406:	4b73      	ldr	r3, [pc, #460]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940e:	d302      	bcc.n	8009416 <_ZN14OfflineStorage3runEv+0x2aa>
 8009410:	4b70      	ldr	r3, [pc, #448]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009412:	2200      	movs	r2, #0
 8009414:	801a      	strh	r2, [r3, #0]
		SectorPos = SectorPos+1;
 8009416:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	4b6d      	ldr	r3, [pc, #436]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009420:	801a      	strh	r2, [r3, #0]
	}


	W25qxx_EraseSector(SectorPos-1);
 8009422:	4b6c      	ldr	r3, [pc, #432]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	3b01      	subs	r3, #1
 8009428:	4618      	mov	r0, r3
 800942a:	f7f9 fff1 	bl	8003410 <W25qxx_EraseSector>
	W25qxx_WriteSector(ProductionSet_uintFormat,(SectorPos-1),0,NoofData);
 800942e:	4b69      	ldr	r3, [pc, #420]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	3b01      	subs	r3, #1
 8009434:	4619      	mov	r1, r3
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800943c:	2200      	movs	r2, #0
 800943e:	4866      	ldr	r0, [pc, #408]	; (80095d8 <_ZN14OfflineStorage3runEv+0x46c>)
 8009440:	f7fa f9c2 	bl	80037c8 <W25qxx_WriteSector>
	MAC_Gen_Prod_Input1_Production=0;
 8009444:	4b65      	ldr	r3, [pc, #404]	; (80095dc <_ZN14OfflineStorage3runEv+0x470>)
 8009446:	2200      	movs	r2, #0
 8009448:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production=0;
 800944a:	4b65      	ldr	r3, [pc, #404]	; (80095e0 <_ZN14OfflineStorage3runEv+0x474>)
 800944c:	2200      	movs	r2, #0
 800944e:	801a      	strh	r2, [r3, #0]

	MAC_Gen_Prod_Input1_Production_K1 = MAC_Gen_Prod_Input1_Production;
 8009450:	4b62      	ldr	r3, [pc, #392]	; (80095dc <_ZN14OfflineStorage3runEv+0x470>)
 8009452:	881a      	ldrh	r2, [r3, #0]
 8009454:	4b63      	ldr	r3, [pc, #396]	; (80095e4 <_ZN14OfflineStorage3runEv+0x478>)
 8009456:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1   = MAC_Gen_Rej_Input_Production;
 8009458:	4b61      	ldr	r3, [pc, #388]	; (80095e0 <_ZN14OfflineStorage3runEv+0x474>)
 800945a:	881a      	ldrh	r2, [r3, #0]
 800945c:	4b62      	ldr	r3, [pc, #392]	; (80095e8 <_ZN14OfflineStorage3runEv+0x47c>)
 800945e:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount_K1          = Manual_RejectionCount;
 8009460:	4b62      	ldr	r3, [pc, #392]	; (80095ec <_ZN14OfflineStorage3runEv+0x480>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	b29a      	uxth	r2, r3
 8009466:	4b62      	ldr	r3, [pc, #392]	; (80095f0 <_ZN14OfflineStorage3runEv+0x484>)
 8009468:	801a      	strh	r2, [r3, #0]
	IsCurrentShiftUpdated=0;
 800946a:	4b62      	ldr	r3, [pc, #392]	; (80095f4 <_ZN14OfflineStorage3runEv+0x488>)
 800946c:	2200      	movs	r2, #0
 800946e:	701a      	strb	r2, [r3, #0]

	FlashMemProductiondata[0] = (uint8_t)MAC_Gen_Prod_Input1_Production&0x00ff;
 8009470:	4b5a      	ldr	r3, [pc, #360]	; (80095dc <_ZN14OfflineStorage3runEv+0x470>)
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	711a      	strb	r2, [r3, #4]
	FlashMemProductiondata[1] = (uint8_t)(MAC_Gen_Prod_Input1_Production>>8)&0x00ff;
 800947a:	4b58      	ldr	r3, [pc, #352]	; (80095dc <_ZN14OfflineStorage3runEv+0x470>)
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	b29b      	uxth	r3, r3
 8009482:	b2da      	uxtb	r2, r3
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	715a      	strb	r2, [r3, #5]
	FlashMemProductiondata[2] = (uint8_t)MAC_Gen_Prod_Input1_Production_K1&0x00ff;
 8009488:	4b56      	ldr	r3, [pc, #344]	; (80095e4 <_ZN14OfflineStorage3runEv+0x478>)
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b2da      	uxtb	r2, r3
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	719a      	strb	r2, [r3, #6]
	FlashMemProductiondata[3] = (uint8_t)(MAC_Gen_Prod_Input1_Production_K1>>8)&0x00ff;
 8009492:	4b54      	ldr	r3, [pc, #336]	; (80095e4 <_ZN14OfflineStorage3runEv+0x478>)
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	b29b      	uxth	r3, r3
 800949a:	b2da      	uxtb	r2, r3
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	71da      	strb	r2, [r3, #7]
	FlashMemProductiondata[4] = (uint8_t)MAC_Gen_Rej_Input_Production&0x00ff;
 80094a0:	4b4f      	ldr	r3, [pc, #316]	; (80095e0 <_ZN14OfflineStorage3runEv+0x474>)
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	721a      	strb	r2, [r3, #8]
	FlashMemProductiondata[5] = (uint8_t)(MAC_Gen_Rej_Input_Production>>8)&0x00ff;
 80094aa:	4b4d      	ldr	r3, [pc, #308]	; (80095e0 <_ZN14OfflineStorage3runEv+0x474>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	0a1b      	lsrs	r3, r3, #8
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	725a      	strb	r2, [r3, #9]
	FlashMemProductiondata[6] = (uint8_t)MAC_Gen_Rej_Input_Production_K1&0x00ff;
 80094b8:	4b4b      	ldr	r3, [pc, #300]	; (80095e8 <_ZN14OfflineStorage3runEv+0x47c>)
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	729a      	strb	r2, [r3, #10]
	FlashMemProductiondata[7] = (uint8_t)(MAC_Gen_Rej_Input_Production_K1>>8)&0x00ff;
 80094c2:	4b49      	ldr	r3, [pc, #292]	; (80095e8 <_ZN14OfflineStorage3runEv+0x47c>)
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	72da      	strb	r2, [r3, #11]
	FlashMemProductiondata[8] = (uint8_t)Production_Zeit&0x00ff;
 80094d0:	4b49      	ldr	r3, [pc, #292]	; (80095f8 <_ZN14OfflineStorage3runEv+0x48c>)
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	731a      	strb	r2, [r3, #12]
	FlashMemProductiondata[9] = (uint8_t)(Production_Zeit>>8)&0x00ff;
 80094da:	4b47      	ldr	r3, [pc, #284]	; (80095f8 <_ZN14OfflineStorage3runEv+0x48c>)
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	735a      	strb	r2, [r3, #13]
	FlashMemProductiondata[10] = (uint8_t)Rejection_Zeit&0x00ff;
 80094e8:	4b44      	ldr	r3, [pc, #272]	; (80095fc <_ZN14OfflineStorage3runEv+0x490>)
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	739a      	strb	r2, [r3, #14]
	FlashMemProductiondata[11] = (uint8_t)(Rejection_Zeit>>8)&0x00ff;
 80094f2:	4b42      	ldr	r3, [pc, #264]	; (80095fc <_ZN14OfflineStorage3runEv+0x490>)
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	0a1b      	lsrs	r3, r3, #8
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	73da      	strb	r2, [r3, #15]
	FlashMemProductiondata[12] = (hour_t);
 8009500:	4b3f      	ldr	r3, [pc, #252]	; (8009600 <_ZN14OfflineStorage3runEv+0x494>)
 8009502:	781a      	ldrb	r2, [r3, #0]
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	741a      	strb	r2, [r3, #16]
	FlashMemProductiondata[13] = (min_t);
 8009508:	4b3e      	ldr	r3, [pc, #248]	; (8009604 <_ZN14OfflineStorage3runEv+0x498>)
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	745a      	strb	r2, [r3, #17]
	FlashMemProductiondata[14] = (sec_t);
 8009510:	4b3d      	ldr	r3, [pc, #244]	; (8009608 <_ZN14OfflineStorage3runEv+0x49c>)
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	749a      	strb	r2, [r3, #18]
	FlashMemProductiondata[15] = date_Rtc;
 8009518:	4b3c      	ldr	r3, [pc, #240]	; (800960c <_ZN14OfflineStorage3runEv+0x4a0>)
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	74da      	strb	r2, [r3, #19]
	FlashMemProductiondata[16] = month_Rtc;
 8009520:	4b3b      	ldr	r3, [pc, #236]	; (8009610 <_ZN14OfflineStorage3runEv+0x4a4>)
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	751a      	strb	r2, [r3, #20]
	FlashMemProductiondata[17] = year_Rtc;
 8009528:	4b3a      	ldr	r3, [pc, #232]	; (8009614 <_ZN14OfflineStorage3runEv+0x4a8>)
 800952a:	781a      	ldrb	r2, [r3, #0]
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	755a      	strb	r2, [r3, #21]
	FlashMemProductiondata[18] = (uint8_t)SectorPos&0x00ff;
 8009530:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	759a      	strb	r2, [r3, #22]
	FlashMemProductiondata[19] = (uint8_t)(SectorPos>>8)&0x00ff;
 800953a:	4b26      	ldr	r3, [pc, #152]	; (80095d4 <_ZN14OfflineStorage3runEv+0x468>)
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	b29b      	uxth	r3, r3
 8009542:	b2da      	uxtb	r2, r3
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	75da      	strb	r2, [r3, #23]
	FlashMemProductiondata[20] = (uint8_t)Manual_RejectionCount&0x00ff;
 8009548:	4b28      	ldr	r3, [pc, #160]	; (80095ec <_ZN14OfflineStorage3runEv+0x480>)
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	761a      	strb	r2, [r3, #24]
	FlashMemProductiondata[21] = (uint8_t)(Manual_RejectionCount>>8)&0x00ff;
 8009550:	4b26      	ldr	r3, [pc, #152]	; (80095ec <_ZN14OfflineStorage3runEv+0x480>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	121b      	asrs	r3, r3, #8
 8009556:	b2da      	uxtb	r2, r3
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	765a      	strb	r2, [r3, #25]
	FlashMemProductiondata[22] = (uint8_t)Manual_RejectionCount_K1&0x00ff;
 800955c:	4b24      	ldr	r3, [pc, #144]	; (80095f0 <_ZN14OfflineStorage3runEv+0x484>)
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b2da      	uxtb	r2, r3
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	769a      	strb	r2, [r3, #26]
	FlashMemProductiondata[23] = (uint8_t)(Manual_RejectionCount_K1>>8)&0x00ff;
 8009566:	4b22      	ldr	r3, [pc, #136]	; (80095f0 <_ZN14OfflineStorage3runEv+0x484>)
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	b2da      	uxtb	r2, r3
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	76da      	strb	r2, [r3, #27]
	FlashMemProductiondata[24] = CurrentShift;
 8009574:	4b28      	ldr	r3, [pc, #160]	; (8009618 <_ZN14OfflineStorage3runEv+0x4ac>)
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	771a      	strb	r2, [r3, #28]
	FlashMemProductiondata[25] = CurrentShift_K1;
 800957c:	4b27      	ldr	r3, [pc, #156]	; (800961c <_ZN14OfflineStorage3runEv+0x4b0>)
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	775a      	strb	r2, [r3, #29]
	W25qxx_EraseSector(600);
 8009584:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009588:	f7f9 ff42 	bl	8003410 <W25qxx_EraseSector>
	W25qxx_WriteSector(FlashMemProductiondata,600,0,26);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	1d18      	adds	r0, r3, #4
 8009590:	231a      	movs	r3, #26
 8009592:	2200      	movs	r2, #0
 8009594:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009598:	f7fa f916 	bl	80037c8 <W25qxx_WriteSector>

	if(updateInBlockFill)
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d010      	beq.n	80095c8 <_ZN14OfflineStorage3runEv+0x45c>
	{
		updateInBlockFill=0;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		W25qxx_EraseSector(601);
 80095ae:	f240 2059 	movw	r0, #601	; 0x259
 80095b2:	f7f9 ff2d 	bl	8003410 <W25qxx_EraseSector>
		W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 80095b6:	2328      	movs	r3, #40	; 0x28
 80095b8:	2200      	movs	r2, #0
 80095ba:	f240 2159 	movw	r1, #601	; 0x259
 80095be:	4804      	ldr	r0, [pc, #16]	; (80095d0 <_ZN14OfflineStorage3runEv+0x464>)
 80095c0:	f7fa f902 	bl	80037c8 <W25qxx_WriteSector>
 80095c4:	e000      	b.n	80095c8 <_ZN14OfflineStorage3runEv+0x45c>
	if(UpdateStorage==0){return;}
 80095c6:	bf00      	nop
	}

}
 80095c8:	3724      	adds	r7, #36	; 0x24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ce:	bf00      	nop
 80095d0:	200009cc 	.word	0x200009cc
 80095d4:	200009ca 	.word	0x200009ca
 80095d8:	200008fc 	.word	0x200008fc
 80095dc:	20000790 	.word	0x20000790
 80095e0:	20000794 	.word	0x20000794
 80095e4:	200009c4 	.word	0x200009c4
 80095e8:	200009c6 	.word	0x200009c6
 80095ec:	20000798 	.word	0x20000798
 80095f0:	200009c8 	.word	0x200009c8
 80095f4:	2000079b 	.word	0x2000079b
 80095f8:	20000792 	.word	0x20000792
 80095fc:	20000796 	.word	0x20000796
 8009600:	200009f8 	.word	0x200009f8
 8009604:	200009f9 	.word	0x200009f9
 8009608:	200009fa 	.word	0x200009fa
 800960c:	200009fc 	.word	0x200009fc
 8009610:	200009fd 	.word	0x200009fd
 8009614:	200009fe 	.word	0x200009fe
 8009618:	200009ff 	.word	0x200009ff
 800961c:	2000079a 	.word	0x2000079a

08009620 <_ZN14OfflineStorage19specialMacDataWriteEv>:
void OfflineStorage::specialMacDataWrite()
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	if(productionInc != productionIncK1){
 8009628:	4b13      	ldr	r3, [pc, #76]	; (8009678 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 800962a:	881a      	ldrh	r2, [r3, #0]
 800962c:	4b13      	ldr	r3, [pc, #76]	; (800967c <_ZN14OfflineStorage19specialMacDataWriteEv+0x5c>)
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d01c      	beq.n	800966e <_ZN14OfflineStorage19specialMacDataWriteEv+0x4e>
	specialMacData[0] = (uint8_t)productionInc&0x00ff;
 8009634:	4b10      	ldr	r3, [pc, #64]	; (8009678 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b2da      	uxtb	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	769a      	strb	r2, [r3, #26]
	specialMacData[1] = (uint8_t)(productionInc>>8)&0x00ff;
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	b29b      	uxth	r3, r3
 8009646:	b2da      	uxtb	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	76da      	strb	r2, [r3, #27]

	productionIncK1 = productionInc;
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 800964e:	881a      	ldrh	r2, [r3, #0]
 8009650:	4b0a      	ldr	r3, [pc, #40]	; (800967c <_ZN14OfflineStorage19specialMacDataWriteEv+0x5c>)
 8009652:	801a      	strh	r2, [r3, #0]
	W25qxx_EraseSector(602);
 8009654:	f240 205a 	movw	r0, #602	; 0x25a
 8009658:	f7f9 feda 	bl	8003410 <W25qxx_EraseSector>
	W25qxx_WriteSector(specialMacData,602,0,2);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f103 001a 	add.w	r0, r3, #26
 8009662:	2302      	movs	r3, #2
 8009664:	2200      	movs	r2, #0
 8009666:	f240 215a 	movw	r1, #602	; 0x25a
 800966a:	f7fa f8ad 	bl	80037c8 <W25qxx_WriteSector>
	}
}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2000079e 	.word	0x2000079e
 800967c:	200009f4 	.word	0x200009f4

08009680 <_ZN14OfflineStorage16processDataWriteEv>:
void OfflineStorage::processDataWrite()
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
	if((updateMemProcCtrl==1)||(triggerStartForReq != triggerStartForReqK1)||
 8009688:	4b2f      	ldr	r3, [pc, #188]	; (8009748 <_ZN14OfflineStorage16processDataWriteEv+0xc8>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d00b      	beq.n	80096a8 <_ZN14OfflineStorage16processDataWriteEv+0x28>
 8009690:	4b2e      	ldr	r3, [pc, #184]	; (800974c <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	4b2e      	ldr	r3, [pc, #184]	; (8009750 <_ZN14OfflineStorage16processDataWriteEv+0xd0>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d105      	bne.n	80096a8 <_ZN14OfflineStorage16processDataWriteEv+0x28>
		(startStopStatus != startStopStatusK1)){
 800969c:	4b2d      	ldr	r3, [pc, #180]	; (8009754 <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 800969e:	781a      	ldrb	r2, [r3, #0]
 80096a0:	4b2d      	ldr	r3, [pc, #180]	; (8009758 <_ZN14OfflineStorage16processDataWriteEv+0xd8>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
	if((updateMemProcCtrl==1)||(triggerStartForReq != triggerStartForReqK1)||
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d04b      	beq.n	8009740 <_ZN14OfflineStorage16processDataWriteEv+0xc0>
	updateMemProcCtrl=0;
 80096a8:	4b27      	ldr	r3, [pc, #156]	; (8009748 <_ZN14OfflineStorage16processDataWriteEv+0xc8>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	701a      	strb	r2, [r3, #0]
	processData[0] = (uint8_t)requirementId&0x00ff;
 80096ae:	4b2b      	ldr	r3, [pc, #172]	; (800975c <_ZN14OfflineStorage16processDataWriteEv+0xdc>)
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	processData[1] = (uint8_t)(requirementId>>8)&0x00ff;
 80096ba:	4b28      	ldr	r3, [pc, #160]	; (800975c <_ZN14OfflineStorage16processDataWriteEv+0xdc>)
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	processData[2] = (uint8_t)requirementIdK1&0x00ff;
 80096ca:	4b25      	ldr	r3, [pc, #148]	; (8009760 <_ZN14OfflineStorage16processDataWriteEv+0xe0>)
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	processData[3] = (uint8_t)(requirementIdK1>>8)&0x00ff;
 80096d6:	4b22      	ldr	r3, [pc, #136]	; (8009760 <_ZN14OfflineStorage16processDataWriteEv+0xe0>)
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	0a1b      	lsrs	r3, r3, #8
 80096dc:	b29b      	uxth	r3, r3
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	processData[4] = (uint8_t)productionTarget&0x00ff;
 80096e6:	4b1f      	ldr	r3, [pc, #124]	; (8009764 <_ZN14OfflineStorage16processDataWriteEv+0xe4>)
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	processData[5] = (uint8_t)(productionTarget>>8)&0x00ff;
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <_ZN14OfflineStorage16processDataWriteEv+0xe4>)
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	processData[6] = triggerStartForReq;
 8009702:	4b12      	ldr	r3, [pc, #72]	; (800974c <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	processData[7] = startStopStatus;
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	triggerStartForReqK1= triggerStartForReq;
 8009716:	4b0d      	ldr	r3, [pc, #52]	; (800974c <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009718:	781a      	ldrb	r2, [r3, #0]
 800971a:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <_ZN14OfflineStorage16processDataWriteEv+0xd0>)
 800971c:	701a      	strb	r2, [r3, #0]
	startStopStatusK1 = startStopStatus;
 800971e:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <_ZN14OfflineStorage16processDataWriteEv+0xd8>)
 8009724:	701a      	strb	r2, [r3, #0]

	W25qxx_EraseSector(603);
 8009726:	f240 205b 	movw	r0, #603	; 0x25b
 800972a:	f7f9 fe71 	bl	8003410 <W25qxx_EraseSector>
	W25qxx_WriteSector(processData,603,0,8);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009734:	2308      	movs	r3, #8
 8009736:	2200      	movs	r2, #0
 8009738:	f240 215b 	movw	r1, #603	; 0x25b
 800973c:	f7fa f844 	bl	80037c8 <W25qxx_WriteSector>
	}
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	2000079d 	.word	0x2000079d
 800974c:	200007a4 	.word	0x200007a4
 8009750:	200009f6 	.word	0x200009f6
 8009754:	2000010f 	.word	0x2000010f
 8009758:	200009f7 	.word	0x200009f7
 800975c:	2000010a 	.word	0x2000010a
 8009760:	200007a0 	.word	0x200007a0
 8009764:	200007a2 	.word	0x200007a2

08009768 <_ZN14OfflineStorage18specialMacDataReadEv>:

void OfflineStorage::specialMacDataRead()
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(specialMacData,602,0,2);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f103 001a 	add.w	r0, r3, #26
 8009776:	2302      	movs	r3, #2
 8009778:	2200      	movs	r2, #0
 800977a:	f240 215a 	movw	r1, #602	; 0x25a
 800977e:	f7fa f903 	bl	8003988 <W25qxx_ReadSector>
	productionInc = (specialMacData[1]<<8|specialMacData[0]);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7edb      	ldrb	r3, [r3, #27]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	b21a      	sxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	7e9b      	ldrb	r3, [r3, #26]
 800978e:	b21b      	sxth	r3, r3
 8009790:	4313      	orrs	r3, r2
 8009792:	b21b      	sxth	r3, r3
 8009794:	b29a      	uxth	r2, r3
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <_ZN14OfflineStorage18specialMacDataReadEv+0x44>)
 8009798:	801a      	strh	r2, [r3, #0]
	productionIncK1 = productionInc;
 800979a:	4b04      	ldr	r3, [pc, #16]	; (80097ac <_ZN14OfflineStorage18specialMacDataReadEv+0x44>)
 800979c:	881a      	ldrh	r2, [r3, #0]
 800979e:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <_ZN14OfflineStorage18specialMacDataReadEv+0x48>)
 80097a0:	801a      	strh	r2, [r3, #0]
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	2000079e 	.word	0x2000079e
 80097b0:	200009f4 	.word	0x200009f4

080097b4 <_ZN14OfflineStorage15processDataReadEv>:

void OfflineStorage::processDataRead()
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(processData,603,0,8);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80097c2:	2308      	movs	r3, #8
 80097c4:	2200      	movs	r2, #0
 80097c6:	f240 215b 	movw	r1, #603	; 0x25b
 80097ca:	f7fa f8dd 	bl	8003988 <W25qxx_ReadSector>
	requirementId = (processData[1]<<8|processData[0]);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	b21a      	sxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097de:	b21b      	sxth	r3, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	b21b      	sxth	r3, r3
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <_ZN14OfflineStorage15processDataReadEv+0x9c>)
 80097e8:	801a      	strh	r2, [r3, #0]
	requirementIdK1 = (processData[3]<<8|processData[2]);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80097f0:	021b      	lsls	r3, r3, #8
 80097f2:	b21a      	sxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80097fa:	b21b      	sxth	r3, r3
 80097fc:	4313      	orrs	r3, r2
 80097fe:	b21b      	sxth	r3, r3
 8009800:	b29a      	uxth	r2, r3
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <_ZN14OfflineStorage15processDataReadEv+0xa0>)
 8009804:	801a      	strh	r2, [r3, #0]
	productionTarget = (processData[5]<<8|processData[4]);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	b21a      	sxth	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009816:	b21b      	sxth	r3, r3
 8009818:	4313      	orrs	r3, r2
 800981a:	b21b      	sxth	r3, r3
 800981c:	b29a      	uxth	r2, r3
 800981e:	4b0e      	ldr	r3, [pc, #56]	; (8009858 <_ZN14OfflineStorage15processDataReadEv+0xa4>)
 8009820:	801a      	strh	r2, [r3, #0]
	triggerStartForReq = processData[6];
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <_ZN14OfflineStorage15processDataReadEv+0xa8>)
 800982a:	701a      	strb	r2, [r3, #0]
	startStopStatus = processData[7];
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <_ZN14OfflineStorage15processDataReadEv+0xac>)
 8009834:	701a      	strb	r2, [r3, #0]
	triggerStartForReqK1= triggerStartForReq;
 8009836:	4b09      	ldr	r3, [pc, #36]	; (800985c <_ZN14OfflineStorage15processDataReadEv+0xa8>)
 8009838:	781a      	ldrb	r2, [r3, #0]
 800983a:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <_ZN14OfflineStorage15processDataReadEv+0xb0>)
 800983c:	701a      	strb	r2, [r3, #0]
	startStopStatusK1 = startStopStatus;
 800983e:	4b08      	ldr	r3, [pc, #32]	; (8009860 <_ZN14OfflineStorage15processDataReadEv+0xac>)
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <_ZN14OfflineStorage15processDataReadEv+0xb4>)
 8009844:	701a      	strb	r2, [r3, #0]
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	2000010a 	.word	0x2000010a
 8009854:	200007a0 	.word	0x200007a0
 8009858:	200007a2 	.word	0x200007a2
 800985c:	200007a4 	.word	0x200007a4
 8009860:	2000010f 	.word	0x2000010f
 8009864:	200009f6 	.word	0x200009f6
 8009868:	200009f7 	.word	0x200009f7

0800986c <_ZN14OfflineStorage19ReadOfflinedataInitEv>:

void OfflineStorage::ReadOfflinedataInit()
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(FlashMemProductiondata,600,0,26);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	1d18      	adds	r0, r3, #4
 8009878:	231a      	movs	r3, #26
 800987a:	2200      	movs	r2, #0
 800987c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009880:	f7fa f882 	bl	8003988 <W25qxx_ReadSector>
	MAC_Gen_Prod_Input1_Production 		= 0;//(FlashMemProductiondata[1]<<8|FlashMemProductiondata[0]);
 8009884:	4b39      	ldr	r3, [pc, #228]	; (800996c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x100>)
 8009886:	2200      	movs	r2, #0
 8009888:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production_K1 	= (FlashMemProductiondata[3]<<8|FlashMemProductiondata[2]);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	79db      	ldrb	r3, [r3, #7]
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	b21a      	sxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	799b      	ldrb	r3, [r3, #6]
 8009896:	b21b      	sxth	r3, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	b21b      	sxth	r3, r3
 800989c:	b29a      	uxth	r2, r3
 800989e:	4b34      	ldr	r3, [pc, #208]	; (8009970 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x104>)
 80098a0:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production 		= 0;//(FlashMemProductiondata[5]<<8|FlashMemProductiondata[4]);
 80098a2:	4b34      	ldr	r3, [pc, #208]	; (8009974 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x108>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1 	= (FlashMemProductiondata[7]<<8|FlashMemProductiondata[6]);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7adb      	ldrb	r3, [r3, #11]
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	b21a      	sxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7a9b      	ldrb	r3, [r3, #10]
 80098b4:	b21b      	sxth	r3, r3
 80098b6:	4313      	orrs	r3, r2
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x10c>)
 80098be:	801a      	strh	r2, [r3, #0]
	Production_Zeit 					= (FlashMemProductiondata[9]<<8|FlashMemProductiondata[8]);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7b5b      	ldrb	r3, [r3, #13]
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	b21a      	sxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7b1b      	ldrb	r3, [r3, #12]
 80098cc:	b21b      	sxth	r3, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	4b29      	ldr	r3, [pc, #164]	; (800997c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x110>)
 80098d6:	801a      	strh	r2, [r3, #0]
	Rejection_Zeit 						= (FlashMemProductiondata[11]<<8|FlashMemProductiondata[10]);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7bdb      	ldrb	r3, [r3, #15]
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	b21a      	sxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	7b9b      	ldrb	r3, [r3, #14]
 80098e4:	b21b      	sxth	r3, r3
 80098e6:	4313      	orrs	r3, r2
 80098e8:	b21b      	sxth	r3, r3
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	4b24      	ldr	r3, [pc, #144]	; (8009980 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x114>)
 80098ee:	801a      	strh	r2, [r3, #0]
	hour_t								= FlashMemProductiondata[12];
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	7c1a      	ldrb	r2, [r3, #16]
 80098f4:	4b23      	ldr	r3, [pc, #140]	; (8009984 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x118>)
 80098f6:	701a      	strb	r2, [r3, #0]
	min_t								= FlashMemProductiondata[13];
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7c5a      	ldrb	r2, [r3, #17]
 80098fc:	4b22      	ldr	r3, [pc, #136]	; (8009988 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x11c>)
 80098fe:	701a      	strb	r2, [r3, #0]
	sec_t								= FlashMemProductiondata[14];
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7c9a      	ldrb	r2, [r3, #18]
 8009904:	4b21      	ldr	r3, [pc, #132]	; (800998c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x120>)
 8009906:	701a      	strb	r2, [r3, #0]
	date_Rtc							= FlashMemProductiondata[15];
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7cda      	ldrb	r2, [r3, #19]
 800990c:	4b20      	ldr	r3, [pc, #128]	; (8009990 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x124>)
 800990e:	701a      	strb	r2, [r3, #0]
	month_Rtc							= FlashMemProductiondata[16];
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7d1a      	ldrb	r2, [r3, #20]
 8009914:	4b1f      	ldr	r3, [pc, #124]	; (8009994 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x128>)
 8009916:	701a      	strb	r2, [r3, #0]
	year_Rtc							= FlashMemProductiondata[17];
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	7d5a      	ldrb	r2, [r3, #21]
 800991c:	4b1e      	ldr	r3, [pc, #120]	; (8009998 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x12c>)
 800991e:	701a      	strb	r2, [r3, #0]
	SectorPos 							= (FlashMemProductiondata[19]<<8|FlashMemProductiondata[18]);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7ddb      	ldrb	r3, [r3, #23]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	b21a      	sxth	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	7d9b      	ldrb	r3, [r3, #22]
 800992c:	b21b      	sxth	r3, r3
 800992e:	4313      	orrs	r3, r2
 8009930:	b21b      	sxth	r3, r3
 8009932:	b29a      	uxth	r2, r3
 8009934:	4b19      	ldr	r3, [pc, #100]	; (800999c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x130>)
 8009936:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount				= 0;(FlashMemProductiondata[21]<<8|FlashMemProductiondata[20]);
 8009938:	4b19      	ldr	r3, [pc, #100]	; (80099a0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x134>)
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
	Manual_RejectionCount_K1	        = 0;(FlashMemProductiondata[23]<<8|FlashMemProductiondata[22]);
 800993e:	4b19      	ldr	r3, [pc, #100]	; (80099a4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x138>)
 8009940:	2200      	movs	r2, #0
 8009942:	801a      	strh	r2, [r3, #0]
	CurrentShift						= FlashMemProductiondata[24];
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	7f1a      	ldrb	r2, [r3, #28]
 8009948:	4b17      	ldr	r3, [pc, #92]	; (80099a8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x13c>)
 800994a:	701a      	strb	r2, [r3, #0]
	CurrentShift_K1						= FlashMemProductiondata[25];
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7f5a      	ldrb	r2, [r3, #29]
 8009950:	4b16      	ldr	r3, [pc, #88]	; (80099ac <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x140>)
 8009952:	701a      	strb	r2, [r3, #0]

	W25qxx_ReadSector(BlockStatusOffline,601,0,40);
 8009954:	2328      	movs	r3, #40	; 0x28
 8009956:	2200      	movs	r2, #0
 8009958:	f240 2159 	movw	r1, #601	; 0x259
 800995c:	4814      	ldr	r0, [pc, #80]	; (80099b0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x144>)
 800995e:	f7fa f813 	bl	8003988 <W25qxx_ReadSector>


	//if(SectorPos)

//	W25qxx_EraseBlock(23);
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000790 	.word	0x20000790
 8009970:	200009c4 	.word	0x200009c4
 8009974:	20000794 	.word	0x20000794
 8009978:	200009c6 	.word	0x200009c6
 800997c:	20000792 	.word	0x20000792
 8009980:	20000796 	.word	0x20000796
 8009984:	200009f8 	.word	0x200009f8
 8009988:	200009f9 	.word	0x200009f9
 800998c:	200009fa 	.word	0x200009fa
 8009990:	200009fc 	.word	0x200009fc
 8009994:	200009fd 	.word	0x200009fd
 8009998:	200009fe 	.word	0x200009fe
 800999c:	200009ca 	.word	0x200009ca
 80099a0:	20000798 	.word	0x20000798
 80099a4:	200009c8 	.word	0x200009c8
 80099a8:	200009ff 	.word	0x200009ff
 80099ac:	2000079a 	.word	0x2000079a
 80099b0:	200009cc 	.word	0x200009cc

080099b4 <_ZN5SHIFTC1Ev>:

extern uint8_t SW_Hour,SW_Minute;
extern uint8_t Updatetimeinfo;
extern uint8_t SW_Date,SW_Month,SW_Year;

SHIFT::SHIFT() {
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	4a04      	ldr	r2, [pc, #16]	; (80099d0 <_ZN5SHIFTC1Ev+0x1c>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	08011040 	.word	0x08011040

080099d4 <_ZN5SHIFTD1Ev>:

SHIFT::~SHIFT() {
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	4a04      	ldr	r2, [pc, #16]	; (80099f0 <_ZN5SHIFTD1Ev+0x1c>)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	08011040 	.word	0x08011040

080099f4 <_ZN5SHIFTD0Ev>:
SHIFT::~SHIFT() {
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
}
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ffe9 	bl	80099d4 <_ZN5SHIFTD1Ev>
 8009a02:	2118      	movs	r1, #24
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f006 fc04 	bl	8010212 <_ZdlPvj>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <_ZN5SHIFT16shiftCalculationEv>:

void SHIFT::shiftCalculation(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	rtc_get_time(&hour_t,&min_t,&sec_t);
 8009a1c:	4a61      	ldr	r2, [pc, #388]	; (8009ba4 <_ZN5SHIFT16shiftCalculationEv+0x190>)
 8009a1e:	4962      	ldr	r1, [pc, #392]	; (8009ba8 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 8009a20:	4862      	ldr	r0, [pc, #392]	; (8009bac <_ZN5SHIFT16shiftCalculationEv+0x198>)
 8009a22:	f7f9 fa45 	bl	8002eb0 <rtc_get_time>
	rtc_get_date(&Wdate_Rtc,&date_Rtc,&month_Rtc,&year_Rtc);
 8009a26:	4b62      	ldr	r3, [pc, #392]	; (8009bb0 <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 8009a28:	4a62      	ldr	r2, [pc, #392]	; (8009bb4 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 8009a2a:	4963      	ldr	r1, [pc, #396]	; (8009bb8 <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 8009a2c:	4863      	ldr	r0, [pc, #396]	; (8009bbc <_ZN5SHIFT16shiftCalculationEv+0x1a8>)
 8009a2e:	f7f9 faa3 	bl	8002f78 <rtc_get_date>

	if(Updatetimeinfo)
 8009a32:	4b63      	ldr	r3, [pc, #396]	; (8009bc0 <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d051      	beq.n	8009ade <_ZN5SHIFT16shiftCalculationEv+0xca>
	{
		Updatetimeinfo=0;
 8009a3a:	4b61      	ldr	r3, [pc, #388]	; (8009bc0 <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
		locTimeTotal    =  (((hour_t)*(60))+(min_t));
 8009a40:	4b5a      	ldr	r3, [pc, #360]	; (8009bac <_ZN5SHIFT16shiftCalculationEv+0x198>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	0112      	lsls	r2, r2, #4
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	4b55      	ldr	r3, [pc, #340]	; (8009ba8 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	4413      	add	r3, r2
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	829a      	strh	r2, [r3, #20]
		onlineTimeTotal =  (((SW_Hour)*(60))+(SW_Minute));
 8009a5e:	4b59      	ldr	r3, [pc, #356]	; (8009bc4 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	0112      	lsls	r2, r2, #4
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	4b56      	ldr	r3, [pc, #344]	; (8009bc8 <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	4413      	add	r3, r2
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	82da      	strh	r2, [r3, #22]
		if((locTimeTotal <= (onlineTimeTotal-3)) || (locTimeTotal >= (onlineTimeTotal+3)))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	8adb      	ldrh	r3, [r3, #22]
 8009a80:	3b02      	subs	r3, #2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	8a92      	ldrh	r2, [r2, #20]
 8009a86:	4293      	cmp	r3, r2
 8009a88:	dc06      	bgt.n	8009a98 <_ZN5SHIFT16shiftCalculationEv+0x84>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	8adb      	ldrh	r3, [r3, #22]
 8009a8e:	3302      	adds	r3, #2
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	8a92      	ldrh	r2, [r2, #20]
 8009a94:	4293      	cmp	r3, r2
 8009a96:	da07      	bge.n	8009aa8 <_ZN5SHIFT16shiftCalculationEv+0x94>
		{
			  rtc_set_time(SW_Hour,SW_Minute,30);
 8009a98:	4b4a      	ldr	r3, [pc, #296]	; (8009bc4 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	4a4a      	ldr	r2, [pc, #296]	; (8009bc8 <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 8009a9e:	7811      	ldrb	r1, [r2, #0]
 8009aa0:	221e      	movs	r2, #30
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7f9 fa38 	bl	8002f18 <rtc_set_time>
		}
		if((date_Rtc != SW_Date) || (month_Rtc != SW_Month) || (year_Rtc != SW_Year))
 8009aa8:	4b43      	ldr	r3, [pc, #268]	; (8009bb8 <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 8009aaa:	781a      	ldrb	r2, [r3, #0]
 8009aac:	4b47      	ldr	r3, [pc, #284]	; (8009bcc <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d10b      	bne.n	8009acc <_ZN5SHIFT16shiftCalculationEv+0xb8>
 8009ab4:	4b3f      	ldr	r3, [pc, #252]	; (8009bb4 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 8009ab6:	781a      	ldrb	r2, [r3, #0]
 8009ab8:	4b45      	ldr	r3, [pc, #276]	; (8009bd0 <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d105      	bne.n	8009acc <_ZN5SHIFT16shiftCalculationEv+0xb8>
 8009ac0:	4b3b      	ldr	r3, [pc, #236]	; (8009bb0 <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 8009ac2:	781a      	ldrb	r2, [r3, #0]
 8009ac4:	4b43      	ldr	r3, [pc, #268]	; (8009bd4 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d008      	beq.n	8009ade <_ZN5SHIFT16shiftCalculationEv+0xca>
		{
			rtc_set_date(2,SW_Date,SW_Month,SW_Year);
 8009acc:	4b3f      	ldr	r3, [pc, #252]	; (8009bcc <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 8009ace:	7819      	ldrb	r1, [r3, #0]
 8009ad0:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	4b3f      	ldr	r3, [pc, #252]	; (8009bd4 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2002      	movs	r0, #2
 8009ada:	f7f9 fa87 	bl	8002fec <rtc_set_date>
		}
	}
	TotalMinutesvar = (((hour_t)*(60))+(min_t));
 8009ade:	4b33      	ldr	r3, [pc, #204]	; (8009bac <_ZN5SHIFT16shiftCalculationEv+0x198>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	0112      	lsls	r2, r2, #4
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	4b2e      	ldr	r3, [pc, #184]	; (8009ba8 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	809a      	strh	r2, [r3, #4]
	Shift1_OnTime = (((8)*(60))+(31));	  //495
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009b02:	80da      	strh	r2, [r3, #6]
	Shift1_OffTime = (((16)*(60))+(30)); //974
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f240 32de 	movw	r2, #990	; 0x3de
 8009b0a:	811a      	strh	r2, [r3, #8]

	Shift2_OnTime = (((16)*(60))+(31));	 //975
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f240 32df 	movw	r2, #991	; 0x3df
 8009b12:	815a      	strh	r2, [r3, #10]
	shift2_buffer_time_1 = (((23)*(60))+(59)); // 1439
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f240 529f 	movw	r2, #1439	; 0x59f
 8009b1a:	819a      	strh	r2, [r3, #12]
	Shift2_OffTime = (((0)*(60))+(30));	 //14
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	221e      	movs	r2, #30
 8009b20:	81da      	strh	r2, [r3, #14]

	Shift3_OnTime = (((0)*(60))+(31));	//15
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	221f      	movs	r2, #31
 8009b26:	821a      	strh	r2, [r3, #16]
	Shift3_OffTime = (((8)*(60))+(30));	 //494
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8009b2e:	825a      	strh	r2, [r3, #18]

	if((TotalMinutesvar >=  Shift1_OnTime)&&(TotalMinutesvar <= Shift1_OffTime))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	889a      	ldrh	r2, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	88db      	ldrh	r3, [r3, #6]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d309      	bcc.n	8009b50 <_ZN5SHIFT16shiftCalculationEv+0x13c>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	889a      	ldrh	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	891b      	ldrh	r3, [r3, #8]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d803      	bhi.n	8009b50 <_ZN5SHIFT16shiftCalculationEv+0x13c>
	{
	   CurrentShift=1;
 8009b48:	4b23      	ldr	r3, [pc, #140]	; (8009bd8 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	e025      	b.n	8009b9c <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if(((TotalMinutesvar >=  Shift2_OnTime)&&(TotalMinutesvar <= shift2_buffer_time_1))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	889a      	ldrh	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	895b      	ldrh	r3, [r3, #10]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d305      	bcc.n	8009b68 <_ZN5SHIFT16shiftCalculationEv+0x154>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	889a      	ldrh	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	899b      	ldrh	r3, [r3, #12]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d905      	bls.n	8009b74 <_ZN5SHIFT16shiftCalculationEv+0x160>
				||((TotalMinutesvar>= 0)&&(TotalMinutesvar<=Shift2_OffTime)))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	889a      	ldrh	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	89db      	ldrh	r3, [r3, #14]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d803      	bhi.n	8009b7c <_ZN5SHIFT16shiftCalculationEv+0x168>
	{//Included one brace to solve warning?
		CurrentShift=2;
 8009b74:	4b18      	ldr	r3, [pc, #96]	; (8009bd8 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 8009b76:	2202      	movs	r2, #2
 8009b78:	701a      	strb	r2, [r3, #0]
 8009b7a:	e00f      	b.n	8009b9c <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if((TotalMinutesvar >=  Shift3_OnTime)&&(TotalMinutesvar <= Shift3_OffTime))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	889a      	ldrh	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8a1b      	ldrh	r3, [r3, #16]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d309      	bcc.n	8009b9c <_ZN5SHIFT16shiftCalculationEv+0x188>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	889a      	ldrh	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8a5b      	ldrh	r3, [r3, #18]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d803      	bhi.n	8009b9c <_ZN5SHIFT16shiftCalculationEv+0x188>
	{
		CurrentShift=3;
 8009b94:	4b10      	ldr	r3, [pc, #64]	; (8009bd8 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 8009b96:	2203      	movs	r2, #3
 8009b98:	701a      	strb	r2, [r3, #0]
	else
	{
	/*Error return*/
	}
	//UpdateShiftInfo =1;
}
 8009b9a:	e7ff      	b.n	8009b9c <_ZN5SHIFT16shiftCalculationEv+0x188>
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	200009fa 	.word	0x200009fa
 8009ba8:	200009f9 	.word	0x200009f9
 8009bac:	200009f8 	.word	0x200009f8
 8009bb0:	200009fe 	.word	0x200009fe
 8009bb4:	200009fd 	.word	0x200009fd
 8009bb8:	200009fc 	.word	0x200009fc
 8009bbc:	200009fb 	.word	0x200009fb
 8009bc0:	200000ee 	.word	0x200000ee
 8009bc4:	200000f1 	.word	0x200000f1
 8009bc8:	200000f2 	.word	0x200000f2
 8009bcc:	200000f3 	.word	0x200000f3
 8009bd0:	200000f4 	.word	0x200000f4
 8009bd4:	200000f5 	.word	0x200000f5
 8009bd8:	200009ff 	.word	0x200009ff

08009bdc <_ZN5SHIFT3runEv>:

void SHIFT::run()
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	shiftCalculation();
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff15 	bl	8009a14 <_ZN5SHIFT16shiftCalculationEv>
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <_ZN7ESP8266C1Ev>:
extern uint8_t ProductionSet_uintFormat[200];
uint8_t ProductionSet_uintFormat_MEM[850]={0};
uint8_t len=137;


ESP8266::ESP8266() {
 8009bf4:	b5b0      	push	{r4, r5, r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	4ac9      	ldr	r2, [pc, #804]	; (8009f24 <_ZN7ESP8266C1Ev+0x330>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	49c8      	ldr	r1, [pc, #800]	; (8009f28 <_ZN7ESP8266C1Ev+0x334>)
 8009c06:	f103 020e 	add.w	r2, r3, #14
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	cb03      	ldmia	r3!, {r0, r1}
 8009c0e:	6010      	str	r0, [r2, #0]
 8009c10:	6051      	str	r1, [r2, #4]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	7213      	strb	r3, [r2, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4ac4      	ldr	r2, [pc, #784]	; (8009f2c <_ZN7ESP8266C1Ev+0x338>)
 8009c1a:	3317      	adds	r3, #23
 8009c1c:	6810      	ldr	r0, [r2, #0]
 8009c1e:	6018      	str	r0, [r3, #0]
 8009c20:	8891      	ldrh	r1, [r2, #4]
 8009c22:	7992      	ldrb	r2, [r2, #6]
 8009c24:	8099      	strh	r1, [r3, #4]
 8009c26:	719a      	strb	r2, [r3, #6]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	49c1      	ldr	r1, [pc, #772]	; (8009f30 <_ZN7ESP8266C1Ev+0x33c>)
 8009c2c:	f103 021e 	add.w	r2, r3, #30
 8009c30:	6808      	ldr	r0, [r1, #0]
 8009c32:	6010      	str	r0, [r2, #0]
 8009c34:	7909      	ldrb	r1, [r1, #4]
 8009c36:	7111      	strb	r1, [r2, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8009c3e:	687d      	ldr	r5, [r7, #4]
 8009c40:	4bbc      	ldr	r3, [pc, #752]	; (8009f34 <_ZN7ESP8266C1Ev+0x340>)
 8009c42:	f105 0424 	add.w	r4, r5, #36	; 0x24
 8009c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c48:	c407      	stmia	r4!, {r0, r1, r2}
 8009c4a:	8023      	strh	r3, [r4, #0]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3333      	adds	r3, #51	; 0x33
 8009c56:	222d      	movs	r2, #45	; 0x2d
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f006 fb1e 	bl	801029c <memset>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2241      	movs	r2, #65	; 0x41
 8009c64:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2254      	movs	r2, #84	; 0x54
 8009c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	222b      	movs	r2, #43	; 0x2b
 8009c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2243      	movs	r2, #67	; 0x43
 8009c7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2257      	movs	r2, #87	; 0x57
 8009c84:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	224a      	movs	r2, #74	; 0x4a
 8009c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2241      	movs	r2, #65	; 0x41
 8009c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2250      	movs	r2, #80	; 0x50
 8009c9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	223d      	movs	r2, #61	; 0x3d
 8009ca4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2222      	movs	r2, #34	; 0x22
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	224e      	movs	r2, #78	; 0x4e
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2241      	movs	r2, #65	; 0x41
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2256      	movs	r2, #86	; 0x56
 8009cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2245      	movs	r2, #69	; 0x45
 8009ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2245      	movs	r2, #69	; 0x45
 8009cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	224e      	movs	r2, #78	; 0x4e
 8009cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2250      	movs	r2, #80	; 0x50
 8009ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2248      	movs	r2, #72	; 0x48
 8009cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	224f      	movs	r2, #79	; 0x4f
 8009cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	224e      	movs	r2, #78	; 0x4e
 8009cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2245      	movs	r2, #69	; 0x45
 8009d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2222      	movs	r2, #34	; 0x22
 8009d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	222c      	movs	r2, #44	; 0x2c
 8009d14:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2222      	movs	r2, #34	; 0x22
 8009d1c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2239      	movs	r2, #57	; 0x39
 8009d24:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2235      	movs	r2, #53	; 0x35
 8009d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2230      	movs	r2, #48	; 0x30
 8009d34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2230      	movs	r2, #48	; 0x30
 8009d3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2238      	movs	r2, #56	; 0x38
 8009d44:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2237      	movs	r2, #55	; 0x37
 8009d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2230      	movs	r2, #48	; 0x30
 8009d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2233      	movs	r2, #51	; 0x33
 8009d5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2239      	movs	r2, #57	; 0x39
 8009d64:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2238      	movs	r2, #56	; 0x38
 8009d6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2222      	movs	r2, #34	; 0x22
 8009d74:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	220d      	movs	r2, #13
 8009d7c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	220a      	movs	r2, #10
 8009d84:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a6b      	ldr	r2, [pc, #428]	; (8009f38 <_ZN7ESP8266C1Ev+0x344>)
 8009d8c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8009d90:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009d9c:	687d      	ldr	r5, [r7, #4]
 8009d9e:	4b67      	ldr	r3, [pc, #412]	; (8009f3c <_ZN7ESP8266C1Ev+0x348>)
 8009da0:	f105 046d 	add.w	r4, r5, #109	; 0x6d
 8009da4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009da6:	6020      	str	r0, [r4, #0]
 8009da8:	6061      	str	r1, [r4, #4]
 8009daa:	60a2      	str	r2, [r4, #8]
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	2300      	movs	r3, #0
 8009db2:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	337c      	adds	r3, #124	; 0x7c
 8009dba:	2232      	movs	r2, #50	; 0x32
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f006 fa6c 	bl	801029c <memset>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2241      	movs	r2, #65	; 0x41
 8009dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2254      	movs	r2, #84	; 0x54
 8009dd0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	222b      	movs	r2, #43	; 0x2b
 8009dd8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2243      	movs	r2, #67	; 0x43
 8009de0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2249      	movs	r2, #73	; 0x49
 8009de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2250      	movs	r2, #80	; 0x50
 8009df0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2253      	movs	r2, #83	; 0x53
 8009df8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2254      	movs	r2, #84	; 0x54
 8009e00:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2241      	movs	r2, #65	; 0x41
 8009e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2252      	movs	r2, #82	; 0x52
 8009e10:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2254      	movs	r2, #84	; 0x54
 8009e18:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	223d      	movs	r2, #61	; 0x3d
 8009e20:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2222      	movs	r2, #34	; 0x22
 8009e28:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2254      	movs	r2, #84	; 0x54
 8009e30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2243      	movs	r2, #67	; 0x43
 8009e38:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2250      	movs	r2, #80	; 0x50
 8009e40:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2222      	movs	r2, #34	; 0x22
 8009e48:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	222c      	movs	r2, #44	; 0x2c
 8009e50:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2222      	movs	r2, #34	; 0x22
 8009e58:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2231      	movs	r2, #49	; 0x31
 8009e60:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2232      	movs	r2, #50	; 0x32
 8009e68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2232      	movs	r2, #50	; 0x32
 8009e70:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	222e      	movs	r2, #46	; 0x2e
 8009e78:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2231      	movs	r2, #49	; 0x31
 8009e80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2236      	movs	r2, #54	; 0x36
 8009e88:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2235      	movs	r2, #53	; 0x35
 8009e90:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	222e      	movs	r2, #46	; 0x2e
 8009e98:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2232      	movs	r2, #50	; 0x32
 8009ea0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2230      	movs	r2, #48	; 0x30
 8009ea8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2236      	movs	r2, #54	; 0x36
 8009eb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	222e      	movs	r2, #46	; 0x2e
 8009eb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2231      	movs	r2, #49	; 0x31
 8009ec0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2233      	movs	r2, #51	; 0x33
 8009ec8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2236      	movs	r2, #54	; 0x36
 8009ed0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2222      	movs	r2, #34	; 0x22
 8009ed8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	222c      	movs	r2, #44	; 0x2c
 8009ee0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2239      	movs	r2, #57	; 0x39
 8009ee8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2230      	movs	r2, #48	; 0x30
 8009ef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2230      	movs	r2, #48	; 0x30
 8009ef8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2235      	movs	r2, #53	; 0x35
 8009f00:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	220d      	movs	r2, #13
 8009f08:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	220a      	movs	r2, #10
 8009f10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	33c2      	adds	r3, #194	; 0xc2
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	605a      	str	r2, [r3, #4]
 8009f1e:	609a      	str	r2, [r3, #8]
 8009f20:	60da      	str	r2, [r3, #12]
 8009f22:	e00d      	b.n	8009f40 <_ZN7ESP8266C1Ev+0x34c>
 8009f24:	08011050 	.word	0x08011050
 8009f28:	08010e2c 	.word	0x08010e2c
 8009f2c:	08010e38 	.word	0x08010e38
 8009f30:	08010e40 	.word	0x08010e40
 8009f34:	08010e48 	.word	0x08010e48
 8009f38:	08010e58 	.word	0x08010e58
 8009f3c:	08010e68 	.word	0x08010e68
 8009f40:	611a      	str	r2, [r3, #16]
 8009f42:	687d      	ldr	r5, [r7, #4]
 8009f44:	4b08      	ldr	r3, [pc, #32]	; (8009f68 <_ZN7ESP8266C1Ev+0x374>)
 8009f46:	f205 248e 	addw	r4, r5, #654	; 0x28e
 8009f4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f4c:	6020      	str	r0, [r4, #0]
 8009f4e:	6061      	str	r1, [r4, #4]
 8009f50:	60a2      	str	r2, [r4, #8]
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	2300      	movs	r3, #0
 8009f58:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
	// TODO Auto-generated constructor stub

}
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bdb0      	pop	{r4, r5, r7, pc}
 8009f66:	bf00      	nop
 8009f68:	08010e78 	.word	0x08010e78

08009f6c <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	4a04      	ldr	r2, [pc, #16]	; (8009f88 <_ZN7ESP8266D1Ev+0x1c>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	08011050 	.word	0x08011050

08009f8c <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
}
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ffe9 	bl	8009f6c <_ZN7ESP8266D1Ev>
 8009f9a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f006 f937 	bl	8010212 <_ZdlPvj>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
	RefreshWifiData();
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fc06 	bl	800a7c8 <_ZN7ESP826615RefreshWifiDataEv>
	Send_WifiCmd();
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f805 	bl	8009fcc <_ZN7ESP826612Send_WifiCmdEv>

}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	switch(wifi_command)
 8009fd4:	4bc0      	ldr	r3, [pc, #768]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	3b05      	subs	r3, #5
 8009fda:	2b73      	cmp	r3, #115	; 0x73
 8009fdc:	f200 83b5 	bhi.w	800a74a <_ZN7ESP826612Send_WifiCmdEv+0x77e>
 8009fe0:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	0800a1b9 	.word	0x0800a1b9
 8009fec:	0800a74b 	.word	0x0800a74b
 8009ff0:	0800a74b 	.word	0x0800a74b
 8009ff4:	0800a74b 	.word	0x0800a74b
 8009ff8:	0800a74b 	.word	0x0800a74b
 8009ffc:	0800a1dd 	.word	0x0800a1dd
 800a000:	0800a207 	.word	0x0800a207
 800a004:	0800a235 	.word	0x0800a235
 800a008:	0800a259 	.word	0x0800a259
 800a00c:	0800a287 	.word	0x0800a287
 800a010:	0800a2b1 	.word	0x0800a2b1
 800a014:	0800a74b 	.word	0x0800a74b
 800a018:	0800a74b 	.word	0x0800a74b
 800a01c:	0800a74b 	.word	0x0800a74b
 800a020:	0800a74b 	.word	0x0800a74b
 800a024:	0800a2f5 	.word	0x0800a2f5
 800a028:	0800a331 	.word	0x0800a331
 800a02c:	0800a74b 	.word	0x0800a74b
 800a030:	0800a74b 	.word	0x0800a74b
 800a034:	0800a74b 	.word	0x0800a74b
 800a038:	0800a74b 	.word	0x0800a74b
 800a03c:	0800a74b 	.word	0x0800a74b
 800a040:	0800a74b 	.word	0x0800a74b
 800a044:	0800a74b 	.word	0x0800a74b
 800a048:	0800a74b 	.word	0x0800a74b
 800a04c:	0800a375 	.word	0x0800a375
 800a050:	0800a74b 	.word	0x0800a74b
 800a054:	0800a74b 	.word	0x0800a74b
 800a058:	0800a74b 	.word	0x0800a74b
 800a05c:	0800a74b 	.word	0x0800a74b
 800a060:	0800a74b 	.word	0x0800a74b
 800a064:	0800a74b 	.word	0x0800a74b
 800a068:	0800a74b 	.word	0x0800a74b
 800a06c:	0800a74b 	.word	0x0800a74b
 800a070:	0800a74b 	.word	0x0800a74b
 800a074:	0800a74b 	.word	0x0800a74b
 800a078:	0800a3a5 	.word	0x0800a3a5
 800a07c:	0800a74b 	.word	0x0800a74b
 800a080:	0800a74b 	.word	0x0800a74b
 800a084:	0800a74b 	.word	0x0800a74b
 800a088:	0800a74b 	.word	0x0800a74b
 800a08c:	0800a74b 	.word	0x0800a74b
 800a090:	0800a74b 	.word	0x0800a74b
 800a094:	0800a74b 	.word	0x0800a74b
 800a098:	0800a3d3 	.word	0x0800a3d3
 800a09c:	0800a401 	.word	0x0800a401
 800a0a0:	0800a42b 	.word	0x0800a42b
 800a0a4:	0800a74b 	.word	0x0800a74b
 800a0a8:	0800a74b 	.word	0x0800a74b
 800a0ac:	0800a74b 	.word	0x0800a74b
 800a0b0:	0800a74b 	.word	0x0800a74b
 800a0b4:	0800a74b 	.word	0x0800a74b
 800a0b8:	0800a74b 	.word	0x0800a74b
 800a0bc:	0800a74b 	.word	0x0800a74b
 800a0c0:	0800a74b 	.word	0x0800a74b
 800a0c4:	0800a74b 	.word	0x0800a74b
 800a0c8:	0800a74b 	.word	0x0800a74b
 800a0cc:	0800a74b 	.word	0x0800a74b
 800a0d0:	0800a74b 	.word	0x0800a74b
 800a0d4:	0800a74b 	.word	0x0800a74b
 800a0d8:	0800a74b 	.word	0x0800a74b
 800a0dc:	0800a74b 	.word	0x0800a74b
 800a0e0:	0800a74b 	.word	0x0800a74b
 800a0e4:	0800a74b 	.word	0x0800a74b
 800a0e8:	0800a74b 	.word	0x0800a74b
 800a0ec:	0800a459 	.word	0x0800a459
 800a0f0:	0800a483 	.word	0x0800a483
 800a0f4:	0800a74b 	.word	0x0800a74b
 800a0f8:	0800a74b 	.word	0x0800a74b
 800a0fc:	0800a74b 	.word	0x0800a74b
 800a100:	0800a74b 	.word	0x0800a74b
 800a104:	0800a74b 	.word	0x0800a74b
 800a108:	0800a74b 	.word	0x0800a74b
 800a10c:	0800a74b 	.word	0x0800a74b
 800a110:	0800a74b 	.word	0x0800a74b
 800a114:	0800a4b1 	.word	0x0800a4b1
 800a118:	0800a4db 	.word	0x0800a4db
 800a11c:	0800a74b 	.word	0x0800a74b
 800a120:	0800a74b 	.word	0x0800a74b
 800a124:	0800a74b 	.word	0x0800a74b
 800a128:	0800a74b 	.word	0x0800a74b
 800a12c:	0800a74b 	.word	0x0800a74b
 800a130:	0800a74b 	.word	0x0800a74b
 800a134:	0800a74b 	.word	0x0800a74b
 800a138:	0800a74b 	.word	0x0800a74b
 800a13c:	0800a525 	.word	0x0800a525
 800a140:	0800a5bb 	.word	0x0800a5bb
 800a144:	0800a74b 	.word	0x0800a74b
 800a148:	0800a74b 	.word	0x0800a74b
 800a14c:	0800a74b 	.word	0x0800a74b
 800a150:	0800a74b 	.word	0x0800a74b
 800a154:	0800a74b 	.word	0x0800a74b
 800a158:	0800a74b 	.word	0x0800a74b
 800a15c:	0800a74b 	.word	0x0800a74b
 800a160:	0800a74b 	.word	0x0800a74b
 800a164:	0800a5e9 	.word	0x0800a5e9
 800a168:	0800a64d 	.word	0x0800a64d
 800a16c:	0800a6d3 	.word	0x0800a6d3
 800a170:	0800a6ff 	.word	0x0800a6ff
 800a174:	0800a66b 	.word	0x0800a66b
 800a178:	0800a6a7 	.word	0x0800a6a7
 800a17c:	0800a74b 	.word	0x0800a74b
 800a180:	0800a74b 	.word	0x0800a74b
 800a184:	0800a74b 	.word	0x0800a74b
 800a188:	0800a74b 	.word	0x0800a74b
 800a18c:	0800a72b 	.word	0x0800a72b
 800a190:	0800a74b 	.word	0x0800a74b
 800a194:	0800a74b 	.word	0x0800a74b
 800a198:	0800a74b 	.word	0x0800a74b
 800a19c:	0800a74b 	.word	0x0800a74b
 800a1a0:	0800a74b 	.word	0x0800a74b
 800a1a4:	0800a74b 	.word	0x0800a74b
 800a1a8:	0800a74b 	.word	0x0800a74b
 800a1ac:	0800a74b 	.word	0x0800a74b
 800a1b0:	0800a74b 	.word	0x0800a74b
 800a1b4:	0800a753 	.word	0x0800a753
	{
	case 5:
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	2104      	movs	r1, #4
 800a1bc:	4847      	ldr	r0, [pc, #284]	; (800a2dc <_ZN7ESP826612Send_WifiCmdEv+0x310>)
 800a1be:	f001 f8e1 	bl	800b384 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800a1c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1c6:	f000 fd97 	bl	800acf8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2104      	movs	r1, #4
 800a1ce:	4843      	ldr	r0, [pc, #268]	; (800a2dc <_ZN7ESP826612Send_WifiCmdEv+0x310>)
 800a1d0:	f001 f8d8 	bl	800b384 <HAL_GPIO_WritePin>
		wifi_command=13;
 800a1d4:	4b40      	ldr	r3, [pc, #256]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800a1d6:	220d      	movs	r2, #13
 800a1d8:	701a      	strb	r2, [r3, #0]

	break;
 800a1da:	e2d5      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 10://reset
	NoOfdata_byte=7;
 800a1dc:	4b40      	ldr	r3, [pc, #256]	; (800a2e0 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a1de:	2207      	movs	r2, #7
 800a1e0:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800a1e2:	4b3d      	ldr	r3, [pc, #244]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800a1e4:	220d      	movs	r2, #13
 800a1e6:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a1e8:	4b3e      	ldr	r3, [pc, #248]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800a1ee:	4b3e      	ldr	r3, [pc, #248]	; (800a2e8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	330e      	adds	r3, #14
 800a1f8:	4a39      	ldr	r2, [pc, #228]	; (800a2e0 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a1fa:	8812      	ldrh	r2, [r2, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	483b      	ldr	r0, [pc, #236]	; (800a2ec <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800a200:	f004 fcae 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a204:	e2c0      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 11:
	if(++Timerdelay >6)
 800a206:	4b37      	ldr	r3, [pc, #220]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	4b35      	ldr	r3, [pc, #212]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	4b34      	ldr	r3, [pc, #208]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b06      	cmp	r3, #6
 800a218:	bf8c      	ite	hi
 800a21a:	2301      	movhi	r3, #1
 800a21c:	2300      	movls	r3, #0
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 8298 	beq.w	800a756 <_ZN7ESP826612Send_WifiCmdEv+0x78a>
	{
		Timerdelay=0;
 800a226:	4b2f      	ldr	r3, [pc, #188]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 800a22c:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800a22e:	220e      	movs	r2, #14
 800a230:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a232:	e290      	b.n	800a756 <_ZN7ESP826612Send_WifiCmdEv+0x78a>
	case 12:
	NoOfdata_byte=6;
 800a234:	4b2a      	ldr	r3, [pc, #168]	; (800a2e0 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a236:	2206      	movs	r2, #6
 800a238:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800a23a:	4b27      	ldr	r3, [pc, #156]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800a23c:	220d      	movs	r2, #13
 800a23e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a240:	4b28      	ldr	r3, [pc, #160]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a242:	2200      	movs	r2, #0
 800a244:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3317      	adds	r3, #23
 800a24a:	4a25      	ldr	r2, [pc, #148]	; (800a2e0 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a24c:	8812      	ldrh	r2, [r2, #0]
 800a24e:	4619      	mov	r1, r3
 800a250:	4826      	ldr	r0, [pc, #152]	; (800a2ec <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800a252:	f004 fc85 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a256:	e297      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 13:
	if(++Timerdelay >12)
 800a258:	4b22      	ldr	r3, [pc, #136]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b0c      	cmp	r3, #12
 800a26a:	bf8c      	ite	hi
 800a26c:	2301      	movhi	r3, #1
 800a26e:	2300      	movls	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 8271 	beq.w	800a75a <_ZN7ESP826612Send_WifiCmdEv+0x78e>
	{
		Timerdelay=0;
 800a278:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 800a27e:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800a280:	2214      	movs	r2, #20
 800a282:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a284:	e269      	b.n	800a75a <_ZN7ESP826612Send_WifiCmdEv+0x78e>
	case 14:
	NoOfdata_byte=4;
 800a286:	4b16      	ldr	r3, [pc, #88]	; (800a2e0 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a288:	2204      	movs	r2, #4
 800a28a:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 800a28c:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 800a28e:	2208      	movs	r2, #8
 800a290:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 800a292:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800a294:	2214      	movs	r2, #20
 800a296:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a298:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	331e      	adds	r3, #30
 800a2a2:	4a0f      	ldr	r2, [pc, #60]	; (800a2e0 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800a2a4:	8812      	ldrh	r2, [r2, #0]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4810      	ldr	r0, [pc, #64]	; (800a2ec <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800a2aa:	f004 fc59 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a2ae:	e26b      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 15:
	if(++Timerdelay >2)
 800a2b0:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	bf8c      	ite	hi
 800a2c4:	2301      	movhi	r3, #1
 800a2c6:	2300      	movls	r3, #0
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8247 	beq.w	800a75e <_ZN7ESP826612Send_WifiCmdEv+0x792>
	{
		Timerdelay=0;
 800a2d0:	4b04      	ldr	r3, [pc, #16]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a2d6:	e242      	b.n	800a75e <_ZN7ESP826612Send_WifiCmdEv+0x792>
 800a2d8:	20000a01 	.word	0x20000a01
 800a2dc:	48000400 	.word	0x48000400
 800a2e0:	20000bcc 	.word	0x20000bcc
 800a2e4:	20000bce 	.word	0x20000bce
 800a2e8:	20000bc8 	.word	0x20000bc8
 800a2ec:	20000414 	.word	0x20000414
 800a2f0:	20000bc9 	.word	0x20000bc9
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 800a2f4:	4b84      	ldr	r3, [pc, #528]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a2f6:	220d      	movs	r2, #13
 800a2f8:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 800a2fa:	4b84      	ldr	r3, [pc, #528]	; (800a50c <_ZN7ESP826612Send_WifiCmdEv+0x540>)
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a300:	4b83      	ldr	r3, [pc, #524]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a302:	2200      	movs	r2, #0
 800a304:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800a306:	4b83      	ldr	r3, [pc, #524]	; (800a514 <_ZN7ESP826612Send_WifiCmdEv+0x548>)
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3324      	adds	r3, #36	; 0x24
 800a310:	4a7d      	ldr	r2, [pc, #500]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a312:	8812      	ldrh	r2, [r2, #0]
 800a314:	4619      	mov	r1, r3
 800a316:	4880      	ldr	r0, [pc, #512]	; (800a518 <_ZN7ESP826612Send_WifiCmdEv+0x54c>)
 800a318:	f004 fc22 	bl	800eb60 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 800a31c:	4b7f      	ldr	r3, [pc, #508]	; (800a51c <_ZN7ESP826612Send_WifiCmdEv+0x550>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4b7d      	ldr	r3, [pc, #500]	; (800a51c <_ZN7ESP826612Send_WifiCmdEv+0x550>)
 800a326:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 800a328:	4b7d      	ldr	r3, [pc, #500]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a32a:	2215      	movs	r2, #21
 800a32c:	701a      	strb	r2, [r3, #0]

	break;
 800a32e:	e22b      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >5)
 800a330:	4b77      	ldr	r3, [pc, #476]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	b2da      	uxtb	r2, r3
 800a338:	4b75      	ldr	r3, [pc, #468]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	4b74      	ldr	r3, [pc, #464]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b05      	cmp	r3, #5
 800a342:	bf8c      	ite	hi
 800a344:	2301      	movhi	r3, #1
 800a346:	2300      	movls	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8209 	beq.w	800a762 <_ZN7ESP826612Send_WifiCmdEv+0x796>
	{
		Timerdelay=0;
 800a350:	4b6f      	ldr	r3, [pc, #444]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a352:	2200      	movs	r2, #0
 800a354:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 800a356:	4b71      	ldr	r3, [pc, #452]	; (800a51c <_ZN7ESP826612Send_WifiCmdEv+0x550>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	d106      	bne.n	800a36c <_ZN7ESP826612Send_WifiCmdEv+0x3a0>
		{
			wifi_command=5;	 //Hardware reset
 800a35e:	4b70      	ldr	r3, [pc, #448]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a360:	2205      	movs	r2, #5
 800a362:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 800a364:	4b6d      	ldr	r3, [pc, #436]	; (800a51c <_ZN7ESP826612Send_WifiCmdEv+0x550>)
 800a366:	2200      	movs	r2, #0
 800a368:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 800a36a:	e1fa      	b.n	800a762 <_ZN7ESP826612Send_WifiCmdEv+0x796>
			wifi_command=10;
 800a36c:	4b6c      	ldr	r3, [pc, #432]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a36e:	220a      	movs	r2, #10
 800a370:	701a      	strb	r2, [r3, #0]
	break;
 800a372:	e1f6      	b.n	800a762 <_ZN7ESP826612Send_WifiCmdEv+0x796>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	NoOfdata_byte=45;//41;//32;
 800a374:	4b64      	ldr	r3, [pc, #400]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a376:	222d      	movs	r2, #45	; 0x2d
 800a378:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=2;
 800a37a:	4b64      	ldr	r3, [pc, #400]	; (800a50c <_ZN7ESP826612Send_WifiCmdEv+0x540>)
 800a37c:	2202      	movs	r2, #2
 800a37e:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 800a380:	4b67      	ldr	r3, [pc, #412]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a382:	2229      	movs	r2, #41	; 0x29
 800a384:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a386:	4b62      	ldr	r3, [pc, #392]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a388:	2200      	movs	r2, #0
 800a38a:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800a38c:	4b61      	ldr	r3, [pc, #388]	; (800a514 <_ZN7ESP826612Send_WifiCmdEv+0x548>)
 800a38e:	2200      	movs	r2, #0
 800a390:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePsw,NoOfdata_byte);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3333      	adds	r3, #51	; 0x33
 800a396:	4a5c      	ldr	r2, [pc, #368]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a398:	8812      	ldrh	r2, [r2, #0]
 800a39a:	4619      	mov	r1, r3
 800a39c:	485e      	ldr	r0, [pc, #376]	; (800a518 <_ZN7ESP826612Send_WifiCmdEv+0x54c>)
 800a39e:	f004 fbdf 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;		   //add retry
 800a3a2:	e1f1      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 41:	   //resend if o replay
	if(++Timerdelay >30)
 800a3a4:	4b5a      	ldr	r3, [pc, #360]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	4b58      	ldr	r3, [pc, #352]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3ae:	701a      	strb	r2, [r3, #0]
 800a3b0:	4b57      	ldr	r3, [pc, #348]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b1e      	cmp	r3, #30
 800a3b6:	bf8c      	ite	hi
 800a3b8:	2301      	movhi	r3, #1
 800a3ba:	2300      	movls	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 81d1 	beq.w	800a766 <_ZN7ESP826612Send_WifiCmdEv+0x79a>
	{
		Timerdelay=0;
 800a3c4:	4b52      	ldr	r3, [pc, #328]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 800a3ca:	4b55      	ldr	r3, [pc, #340]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a3cc:	220a      	movs	r2, #10
 800a3ce:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a3d0:	e1c9      	b.n	800a766 <_ZN7ESP826612Send_WifiCmdEv+0x79a>
	case 49:
	if(++Timerdelay >8)
 800a3d2:	4b4f      	ldr	r3, [pc, #316]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	4b4d      	ldr	r3, [pc, #308]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	4b4c      	ldr	r3, [pc, #304]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	bf8c      	ite	hi
 800a3e6:	2301      	movhi	r3, #1
 800a3e8:	2300      	movls	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 81bc 	beq.w	800a76a <_ZN7ESP826612Send_WifiCmdEv+0x79e>
	{
		Timerdelay=0;
 800a3f2:	4b47      	ldr	r3, [pc, #284]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800a3f8:	4b49      	ldr	r3, [pc, #292]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a3fa:	2232      	movs	r2, #50	; 0x32
 800a3fc:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a3fe:	e1b4      	b.n	800a76a <_ZN7ESP826612Send_WifiCmdEv+0x79e>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 800a400:	4b41      	ldr	r3, [pc, #260]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a402:	220b      	movs	r2, #11
 800a404:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 800a406:	4b46      	ldr	r3, [pc, #280]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a408:	2233      	movs	r2, #51	; 0x33
 800a40a:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 800a40c:	4b3f      	ldr	r3, [pc, #252]	; (800a50c <_ZN7ESP826612Send_WifiCmdEv+0x540>)
 800a40e:	2203      	movs	r2, #3
 800a410:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a412:	4b3f      	ldr	r3, [pc, #252]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3360      	adds	r3, #96	; 0x60
 800a41c:	4a3a      	ldr	r2, [pc, #232]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a41e:	8812      	ldrh	r2, [r2, #0]
 800a420:	4619      	mov	r1, r3
 800a422:	483d      	ldr	r0, [pc, #244]	; (800a518 <_ZN7ESP826612Send_WifiCmdEv+0x54c>)
 800a424:	f004 fb9c 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a428:	e1ae      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 51:
	if(++Timerdelay >15)
 800a42a:	4b39      	ldr	r3, [pc, #228]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	4b37      	ldr	r3, [pc, #220]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	4b36      	ldr	r3, [pc, #216]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b0f      	cmp	r3, #15
 800a43c:	bf8c      	ite	hi
 800a43e:	2301      	movhi	r3, #1
 800a440:	2300      	movls	r3, #0
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8192 	beq.w	800a76e <_ZN7ESP826612Send_WifiCmdEv+0x7a2>
	{
		Timerdelay=0;
 800a44a:	4b31      	ldr	r3, [pc, #196]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 800a450:	4b33      	ldr	r3, [pc, #204]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a452:	220a      	movs	r2, #10
 800a454:	701a      	strb	r2, [r3, #0]
	}

	break;
 800a456:	e18a      	b.n	800a76e <_ZN7ESP826612Send_WifiCmdEv+0x7a2>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 800a458:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a45a:	220d      	movs	r2, #13
 800a45c:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 800a45e:	4b30      	ldr	r3, [pc, #192]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a460:	2247      	movs	r2, #71	; 0x47
 800a462:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 800a464:	4b29      	ldr	r3, [pc, #164]	; (800a50c <_ZN7ESP826612Send_WifiCmdEv+0x540>)
 800a466:	2204      	movs	r2, #4
 800a468:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a46a:	4b29      	ldr	r3, [pc, #164]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	336d      	adds	r3, #109	; 0x6d
 800a474:	4a24      	ldr	r2, [pc, #144]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a476:	8812      	ldrh	r2, [r2, #0]
 800a478:	4619      	mov	r1, r3
 800a47a:	4827      	ldr	r0, [pc, #156]	; (800a518 <_ZN7ESP826612Send_WifiCmdEv+0x54c>)
 800a47c:	f004 fb70 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;	  //2sec
 800a480:	e182      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 71:
	if(++Timerdelay >15)
 800a482:	4b23      	ldr	r3, [pc, #140]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	3301      	adds	r3, #1
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	4b21      	ldr	r3, [pc, #132]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	4b20      	ldr	r3, [pc, #128]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b0f      	cmp	r3, #15
 800a494:	bf8c      	ite	hi
 800a496:	2301      	movhi	r3, #1
 800a498:	2300      	movls	r3, #0
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 8168 	beq.w	800a772 <_ZN7ESP826612Send_WifiCmdEv+0x7a6>
	{
		Timerdelay=0;
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a4ae:	e160      	b.n	800a772 <_ZN7ESP826612Send_WifiCmdEv+0x7a6>
	case 80:
	NoOfdata_byte=42;//41;//55;
 800a4b0:	4b15      	ldr	r3, [pc, #84]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a4b2:	222a      	movs	r2, #42	; 0x2a
 800a4b4:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 800a4b6:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a4b8:	2251      	movs	r2, #81	; 0x51
 800a4ba:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 800a4bc:	4b13      	ldr	r3, [pc, #76]	; (800a50c <_ZN7ESP826612Send_WifiCmdEv+0x540>)
 800a4be:	2205      	movs	r2, #5
 800a4c0:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a4c2:	4b13      	ldr	r3, [pc, #76]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	337c      	adds	r3, #124	; 0x7c
 800a4cc:	4a0e      	ldr	r2, [pc, #56]	; (800a508 <_ZN7ESP826612Send_WifiCmdEv+0x53c>)
 800a4ce:	8812      	ldrh	r2, [r2, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4811      	ldr	r0, [pc, #68]	; (800a518 <_ZN7ESP826612Send_WifiCmdEv+0x54c>)
 800a4d4:	f004 fb44 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a4d8:	e156      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 81:					//5sec
	if(++Timerdelay >20)
 800a4da:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a4e4:	701a      	strb	r2, [r3, #0]
 800a4e6:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b14      	cmp	r3, #20
 800a4ec:	bf8c      	ite	hi
 800a4ee:	2301      	movhi	r3, #1
 800a4f0:	2300      	movls	r3, #0
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 813e 	beq.w	800a776 <_ZN7ESP826612Send_WifiCmdEv+0x7aa>
	{
		Timerdelay=0;
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <_ZN7ESP826612Send_WifiCmdEv+0x544>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <_ZN7ESP826612Send_WifiCmdEv+0x554>)
 800a502:	220a      	movs	r2, #10
 800a504:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a506:	e136      	b.n	800a776 <_ZN7ESP826612Send_WifiCmdEv+0x7aa>
 800a508:	20000bcc 	.word	0x20000bcc
 800a50c:	20000bc9 	.word	0x20000bc9
 800a510:	20000bce 	.word	0x20000bce
 800a514:	20000bc8 	.word	0x20000bc8
 800a518:	20000414 	.word	0x20000414
 800a51c:	20000bca 	.word	0x20000bca
 800a520:	20000a01 	.word	0x20000a01
	case 90:   //CIPSEND

	ContentLength = 811;//106
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f240 322b 	movw	r2, #811	; 0x32b
 800a52a:	819a      	strh	r2, [r3, #12]
	len = sprintf(PostUrl_CharFormat,"POST /production?mac=1001 HTTP/1.1\r\n"
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
												"Host: 122.165.206.136:9005\r\n"
												"Accept: text/html\r\n"
												"Content-Type: application/json\r\n"
												"Content-Length: %d\r\n\r\n[",ContentLength);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	899b      	ldrh	r3, [r3, #12]
	len = sprintf(PostUrl_CharFormat,"POST /production?mac=1001 HTTP/1.1\r\n"
 800a536:	461a      	mov	r2, r3
 800a538:	4995      	ldr	r1, [pc, #596]	; (800a790 <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 800a53a:	f005 ffa7 	bl	801048c <siprintf>
 800a53e:	4603      	mov	r3, r0
 800a540:	b2da      	uxtb	r2, r3
 800a542:	4b94      	ldr	r3, [pc, #592]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 800a544:	701a      	strb	r2, [r3, #0]
	Dyn_data_calc = len+(ContentLength);
 800a546:	4b93      	ldr	r3, [pc, #588]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	899b      	ldrh	r3, [r3, #12]
 800a550:	4413      	add	r3, r2
 800a552:	b29a      	uxth	r2, r3
 800a554:	4b90      	ldr	r3, [pc, #576]	; (800a798 <_ZN7ESP826612Send_WifiCmdEv+0x7cc>)
 800a556:	801a      	strh	r2, [r3, #0]
	Framecheck=0;
 800a558:	4b90      	ldr	r3, [pc, #576]	; (800a79c <_ZN7ESP826612Send_WifiCmdEv+0x7d0>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= 16;
 800a55e:	4b90      	ldr	r3, [pc, #576]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a560:	2210      	movs	r2, #16
 800a562:	801a      	strh	r2, [r3, #0]
	sprintf(SendData_charFormat,"AT+CIPSEND=%d\r\n",Dyn_data_calc);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	33c2      	adds	r3, #194	; 0xc2
 800a568:	4a8b      	ldr	r2, [pc, #556]	; (800a798 <_ZN7ESP826612Send_WifiCmdEv+0x7cc>)
 800a56a:	8812      	ldrh	r2, [r2, #0]
 800a56c:	498d      	ldr	r1, [pc, #564]	; (800a7a4 <_ZN7ESP826612Send_WifiCmdEv+0x7d8>)
 800a56e:	4618      	mov	r0, r3
 800a570:	f005 ff8c 	bl	801048c <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f103 00ae 	add.w	r0, r3, #174	; 0xae
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	33c2      	adds	r3, #194	; 0xc2
 800a57e:	4a88      	ldr	r2, [pc, #544]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a580:	8812      	ldrh	r2, [r2, #0]
 800a582:	4619      	mov	r1, r3
 800a584:	f005 fe7c 	bl	8010280 <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	33ae      	adds	r3, #174	; 0xae
 800a58c:	4a84      	ldr	r2, [pc, #528]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a58e:	8812      	ldrh	r2, [r2, #0]
 800a590:	4619      	mov	r1, r3
 800a592:	4885      	ldr	r0, [pc, #532]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 800a594:	f004 fae4 	bl	800eb60 <HAL_UART_Transmit_IT>
	wifi_command=91;
 800a598:	4b84      	ldr	r3, [pc, #528]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a59a:	225b      	movs	r2, #91	; 0x5b
 800a59c:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 800a59e:	4b84      	ldr	r3, [pc, #528]	; (800a7b0 <_ZN7ESP826612Send_WifiCmdEv+0x7e4>)
 800a5a0:	2206      	movs	r2, #6
 800a5a2:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a5a4:	4b83      	ldr	r3, [pc, #524]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 800a5aa:	4b7d      	ldr	r3, [pc, #500]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4981      	ldr	r1, [pc, #516]	; (800a7b8 <_ZN7ESP826612Send_WifiCmdEv+0x7ec>)
 800a5b2:	487d      	ldr	r0, [pc, #500]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 800a5b4:	f004 fad4 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a5b8:	e0e6      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 91:
	if(++Timerdelay >15)
 800a5ba:	4b7e      	ldr	r3, [pc, #504]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	4b7c      	ldr	r3, [pc, #496]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	4b7b      	ldr	r3, [pc, #492]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b0f      	cmp	r3, #15
 800a5cc:	bf8c      	ite	hi
 800a5ce:	2301      	movhi	r3, #1
 800a5d0:	2300      	movls	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 80d0 	beq.w	800a77a <_ZN7ESP826612Send_WifiCmdEv+0x7ae>
	{
		Timerdelay=0;
 800a5da:	4b76      	ldr	r3, [pc, #472]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a5e0:	4b72      	ldr	r3, [pc, #456]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a5e2:	220a      	movs	r2, #10
 800a5e4:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a5e6:	e0c8      	b.n	800a77a <_ZN7ESP826612Send_WifiCmdEv+0x7ae>
	case 100:

		len = sprintf(PostUrl_CharFormat,"POST /production?mac=1001 HTTP/1.1\r\n"
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
									"Host: 122.165.206.136:9005\r\n"
									"Accept: text/html\r\n"
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",ContentLength);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	899b      	ldrh	r3, [r3, #12]
		len = sprintf(PostUrl_CharFormat,"POST /production?mac=1001 HTTP/1.1\r\n"
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	4966      	ldr	r1, [pc, #408]	; (800a790 <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 800a5f6:	f005 ff49 	bl	801048c <siprintf>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	4b65      	ldr	r3, [pc, #404]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 800a600:	701a      	strb	r2, [r3, #0]
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f503 70d9 	add.w	r0, r3, #434	; 0x1b2
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	33d6      	adds	r3, #214	; 0xd6
 800a60c:	4a61      	ldr	r2, [pc, #388]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	4619      	mov	r1, r3
 800a612:	f005 fe35 	bl	8010280 <memcpy>
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",ContentLength);
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len); */


	NoOfdata_byte	= 	url_buffer;
 800a616:	4b69      	ldr	r3, [pc, #420]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	4b60      	ldr	r3, [pc, #384]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a61e:	801a      	strh	r2, [r3, #0]
	wifi_command	=	101;
 800a620:	4b62      	ldr	r3, [pc, #392]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a622:	2265      	movs	r2, #101	; 0x65
 800a624:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= url_buffer;
 800a626:	4b65      	ldr	r3, [pc, #404]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	4b5c      	ldr	r3, [pc, #368]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a62e:	801a      	strh	r2, [r3, #0]
	Timerdelay=0;
 800a630:	4b60      	ldr	r3, [pc, #384]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,len);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f503 73d9 	add.w	r3, r3, #434	; 0x1b2
 800a63c:	4a55      	ldr	r2, [pc, #340]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 800a63e:	7812      	ldrb	r2, [r2, #0]
 800a640:	b292      	uxth	r2, r2
 800a642:	4619      	mov	r1, r3
 800a644:	4858      	ldr	r0, [pc, #352]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 800a646:	f004 fa8b 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a64a:	e09d      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 101:
		NoOfdata_byte = 809;//34
 800a64c:	4b54      	ldr	r3, [pc, #336]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a64e:	f240 3229 	movw	r2, #809	; 0x329
 800a652:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,ProductionSet_uintFormat_MEM,NoOfdata_byte);
 800a654:	4b52      	ldr	r3, [pc, #328]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	4959      	ldr	r1, [pc, #356]	; (800a7c0 <_ZN7ESP826612Send_WifiCmdEv+0x7f4>)
 800a65c:	4852      	ldr	r0, [pc, #328]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 800a65e:	f004 fa7f 	bl	800eb60 <HAL_UART_Transmit_IT>
		wifi_command=104;
 800a662:	4b52      	ldr	r3, [pc, #328]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a664:	2268      	movs	r2, #104	; 0x68
 800a666:	701a      	strb	r2, [r3, #0]
	break;
 800a668:	e08e      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 104:
		url_buffer=0;
 800a66a:	4b54      	ldr	r3, [pc, #336]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	701a      	strb	r2, [r3, #0]
		OnlineData_buffer[url_buffer] =  ']';
 800a670:	4b52      	ldr	r3, [pc, #328]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	461a      	mov	r2, r3
 800a676:	4b53      	ldr	r3, [pc, #332]	; (800a7c4 <_ZN7ESP826612Send_WifiCmdEv+0x7f8>)
 800a678:	215d      	movs	r1, #93	; 0x5d
 800a67a:	5499      	strb	r1, [r3, r2]
		url_buffer++;
 800a67c:	4b4f      	ldr	r3, [pc, #316]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	b2da      	uxtb	r2, r3
 800a684:	4b4d      	ldr	r3, [pc, #308]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a686:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 800a688:	4b4c      	ldr	r3, [pc, #304]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	494c      	ldr	r1, [pc, #304]	; (800a7c4 <_ZN7ESP826612Send_WifiCmdEv+0x7f8>)
 800a692:	4845      	ldr	r0, [pc, #276]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 800a694:	f004 fa64 	bl	800eb60 <HAL_UART_Transmit_IT>
		Rxseqdecoder=7;
 800a698:	4b45      	ldr	r3, [pc, #276]	; (800a7b0 <_ZN7ESP826612Send_WifiCmdEv+0x7e4>)
 800a69a:	2207      	movs	r2, #7
 800a69c:	701a      	strb	r2, [r3, #0]
		wifi_command=105;
 800a69e:	4b43      	ldr	r3, [pc, #268]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a6a0:	2269      	movs	r2, #105	; 0x69
 800a6a2:	701a      	strb	r2, [r3, #0]
	break;
 800a6a4:	e070      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 105:
		if(++Timerdelay>30)
 800a6a6:	4b43      	ldr	r3, [pc, #268]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	4b41      	ldr	r3, [pc, #260]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6b0:	701a      	strb	r2, [r3, #0]
 800a6b2:	4b40      	ldr	r3, [pc, #256]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b1e      	cmp	r3, #30
 800a6b8:	bf8c      	ite	hi
 800a6ba:	2301      	movhi	r3, #1
 800a6bc:	2300      	movls	r3, #0
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d05c      	beq.n	800a77e <_ZN7ESP826612Send_WifiCmdEv+0x7b2>
	   {
		Timerdelay=0;
 800a6c4:	4b3b      	ldr	r3, [pc, #236]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a6ca:	4b38      	ldr	r3, [pc, #224]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a6d0:	e055      	b.n	800a77e <_ZN7ESP826612Send_WifiCmdEv+0x7b2>
	case 102:

	   if(++Timerdelay>5)
 800a6d2:	4b38      	ldr	r3, [pc, #224]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6dc:	701a      	strb	r2, [r3, #0]
 800a6de:	4b35      	ldr	r3, [pc, #212]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b05      	cmp	r3, #5
 800a6e4:	bf8c      	ite	hi
 800a6e6:	2301      	movhi	r3, #1
 800a6e8:	2300      	movls	r3, #0
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d048      	beq.n	800a782 <_ZN7ESP826612Send_WifiCmdEv+0x7b6>
	   {
		Timerdelay=0;
 800a6f0:	4b30      	ldr	r3, [pc, #192]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800a6f6:	4b2d      	ldr	r3, [pc, #180]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a6f8:	2232      	movs	r2, #50	; 0x32
 800a6fa:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a6fc:	e041      	b.n	800a782 <_ZN7ESP826612Send_WifiCmdEv+0x7b6>
	case 103:
	   if(++Timerdelay>2)
 800a6fe:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	b2da      	uxtb	r2, r3
 800a706:	4b2b      	ldr	r3, [pc, #172]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	4b2a      	ldr	r3, [pc, #168]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	bf8c      	ite	hi
 800a712:	2301      	movhi	r3, #1
 800a714:	2300      	movls	r3, #0
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d034      	beq.n	800a786 <_ZN7ESP826612Send_WifiCmdEv+0x7ba>
	   {
		Timerdelay=0;
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a722:	4b22      	ldr	r3, [pc, #136]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a724:	220a      	movs	r2, #10
 800a726:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a728:	e02d      	b.n	800a786 <_ZN7ESP826612Send_WifiCmdEv+0x7ba>
	case 110:
	NoOfdata_byte=12;
 800a72a:	4b1d      	ldr	r3, [pc, #116]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a72c:	220c      	movs	r2, #12
 800a72e:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 800a730:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a732:	2232      	movs	r2, #50	; 0x32
 800a734:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f203 238e 	addw	r3, r3, #654	; 0x28e
 800a73c:	4a18      	ldr	r2, [pc, #96]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800a73e:	8812      	ldrh	r2, [r2, #0]
 800a740:	4619      	mov	r1, r3
 800a742:	4819      	ldr	r0, [pc, #100]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 800a744:	f004 fa0c 	bl	800eb60 <HAL_UART_Transmit_IT>
	break;
 800a748:	e01e      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 120:
	break;
	default:
	wifi_command=5;
 800a74a:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800a74c:	2205      	movs	r2, #5
 800a74e:	701a      	strb	r2, [r3, #0]
	break;
 800a750:	e01a      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a752:	bf00      	nop
 800a754:	e018      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a756:	bf00      	nop
 800a758:	e016      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a75a:	bf00      	nop
 800a75c:	e014      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a75e:	bf00      	nop
 800a760:	e012      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a762:	bf00      	nop
 800a764:	e010      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a766:	bf00      	nop
 800a768:	e00e      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a76a:	bf00      	nop
 800a76c:	e00c      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a76e:	bf00      	nop
 800a770:	e00a      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a772:	bf00      	nop
 800a774:	e008      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a776:	bf00      	nop
 800a778:	e006      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a77a:	bf00      	nop
 800a77c:	e004      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a77e:	bf00      	nop
 800a780:	e002      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a782:	bf00      	nop
 800a784:	e000      	b.n	800a788 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 800a786:	bf00      	nop
 }
}
 800a788:	bf00      	nop
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	08010e88 	.word	0x08010e88
 800a794:	20000018 	.word	0x20000018
 800a798:	20000bd0 	.word	0x20000bd0
 800a79c:	20000bd4 	.word	0x20000bd4
 800a7a0:	20000bcc 	.word	0x20000bcc
 800a7a4:	08010f14 	.word	0x08010f14
 800a7a8:	20000414 	.word	0x20000414
 800a7ac:	20000a01 	.word	0x20000a01
 800a7b0:	20000bc9 	.word	0x20000bc9
 800a7b4:	20000bce 	.word	0x20000bce
 800a7b8:	20000a04 	.word	0x20000a04
 800a7bc:	20000bcf 	.word	0x20000bcf
 800a7c0:	20000bd8 	.word	0x20000bd8
 800a7c4:	20000b00 	.word	0x20000b00

0800a7c8 <_ZN7ESP826615RefreshWifiDataEv>:

void ESP8266::RefreshWifiData()
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b090      	sub	sp, #64	; 0x40
 800a7cc:	af0e      	add	r7, sp, #56	; 0x38
 800a7ce:	6078      	str	r0, [r7, #4]

	if((RefreshBlockInfo==0)||(powercycleRefresh==1))
 800a7d0:	4b93      	ldr	r3, [pc, #588]	; (800aa20 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d004      	beq.n	800a7e2 <_ZN7ESP826615RefreshWifiDataEv+0x1a>
 800a7d8:	4b92      	ldr	r3, [pc, #584]	; (800aa24 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	f040 811a 	bne.w	800aa16 <_ZN7ESP826615RefreshWifiDataEv+0x24e>
	{
		RefreshBlockInfo=1;
 800a7e2:	4b8f      	ldr	r3, [pc, #572]	; (800aa20 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	701a      	strb	r2, [r3, #0]
		if((currentdata==0)&&(powercycleRefresh==0))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d115      	bne.n	800a81e <_ZN7ESP826615RefreshWifiDataEv+0x56>
 800a7f2:	4b8c      	ldr	r3, [pc, #560]	; (800aa24 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d111      	bne.n	800a81e <_ZN7ESP826615RefreshWifiDataEv+0x56>
		{
			BlockStatusOffline[sectorTosend]=0;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800a800:	461a      	mov	r2, r3
 800a802:	4b89      	ldr	r3, [pc, #548]	; (800aa28 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800a804:	2100      	movs	r1, #0
 800a806:	5499      	strb	r1, [r3, r2]
			W25qxx_EraseSector(601);
 800a808:	f240 2059 	movw	r0, #601	; 0x259
 800a80c:	f7f8 fe00 	bl	8003410 <W25qxx_EraseSector>
			W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 800a810:	2328      	movs	r3, #40	; 0x28
 800a812:	2200      	movs	r2, #0
 800a814:	f240 2159 	movw	r1, #601	; 0x259
 800a818:	4883      	ldr	r0, [pc, #524]	; (800aa28 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800a81a:	f7f8 ffd5 	bl	80037c8 <W25qxx_WriteSector>
		}
		powercycleRefresh=0;
 800a81e:	4b81      	ldr	r3, [pc, #516]	; (800aa24 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800a820:	2200      	movs	r2, #0
 800a822:	701a      	strb	r2, [r3, #0]
		for(j=0;j<=32;j++)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	729a      	strb	r2, [r3, #10]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	7a9b      	ldrb	r3, [r3, #10]
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d827      	bhi.n	800a882 <_ZN7ESP826615RefreshWifiDataEv+0xba>
		{
			if(BlockStatusOffline[j] == 1)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7a9b      	ldrb	r3, [r3, #10]
 800a836:	461a      	mov	r2, r3
 800a838:	4b7b      	ldr	r3, [pc, #492]	; (800aa28 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800a83a:	5c9b      	ldrb	r3, [r3, r2]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d109      	bne.n	800a854 <_ZN7ESP826615RefreshWifiDataEv+0x8c>
			{
				sectorTosend=j;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	7a9a      	ldrb	r2, [r3, #10]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
				currentdata=0;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
				break;
 800a852:	e016      	b.n	800a882 <_ZN7ESP826615RefreshWifiDataEv+0xba>
			}
			if(BlockStatusOffline[j] == 2)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7a9b      	ldrb	r3, [r3, #10]
 800a858:	461a      	mov	r2, r3
 800a85a:	4b73      	ldr	r3, [pc, #460]	; (800aa28 <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800a85c:	5c9b      	ldrb	r3, [r3, r2]
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d108      	bne.n	800a874 <_ZN7ESP826615RefreshWifiDataEv+0xac>
			{
				sectorTosend=j;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	7a9a      	ldrb	r2, [r3, #10]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
				currentdata=1;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
		for(j=0;j<=32;j++)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	7a9b      	ldrb	r3, [r3, #10]
 800a878:	3301      	adds	r3, #1
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	729a      	strb	r2, [r3, #10]
 800a880:	e7d3      	b.n	800a82a <_ZN7ESP826615RefreshWifiDataEv+0x62>
			}
		}

		sectorRead = 16*sectorTosend;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800a888:	b29b      	uxth	r3, r3
 800a88a:	011b      	lsls	r3, r3, #4
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
		if(W25qxx_IsEmptySector(sectorRead,0,53))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800a89a:	2235      	movs	r2, #53	; 0x35
 800a89c:	2100      	movs	r1, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f8 fe24 	bl	80034ec <W25qxx_IsEmptySector>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d008      	beq.n	800a8bc <_ZN7ESP826615RefreshWifiDataEv+0xf4>
		{
			memcpy(ProductionSet_uintFormat_MEM,dummydata,54);}
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f203 23a6 	addw	r3, r3, #678	; 0x2a6
 800a8b0:	2236      	movs	r2, #54	; 0x36
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	485d      	ldr	r0, [pc, #372]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a8b6:	f005 fce3 	bl	8010280 <memcpy>
 800a8ba:	e00b      	b.n	800a8d4 <_ZN7ESP826615RefreshWifiDataEv+0x10c>
		else
		{
			W25qxx_ReadSector(ProductionSet_uintFormat_MEM,sectorRead,0,53);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	2335      	movs	r3, #53	; 0x35
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4858      	ldr	r0, [pc, #352]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a8ca:	f7f9 f85d 	bl	8003988 <W25qxx_ReadSector>
			if(ProductionSet_uintFormat_MEM[0] != 34 || ProductionSet_uintFormat_MEM[52] != 34)
 800a8ce:	4b57      	ldr	r3, [pc, #348]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b22      	cmp	r3, #34	; 0x22
			{
			//	memcpy(ProductionSet_uintFormat_MEM,dummydata,54);
			}
		}
		sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f203 20a6 	addw	r0, r3, #678	; 0x2a6
 800a8da:	4b55      	ldr	r3, [pc, #340]	; (800aa30 <_ZN7ESP826615RefreshWifiDataEv+0x268>)
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	2322      	movs	r3, #34	; 0x22
 800a8e2:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e4:	920c      	str	r2, [sp, #48]	; 0x30
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9308      	str	r3, [sp, #32]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9307      	str	r3, [sp, #28]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9306      	str	r3, [sp, #24]
 800a8fe:	2300      	movs	r3, #0
 800a900:	9305      	str	r3, [sp, #20]
 800a902:	2300      	movs	r3, #0
 800a904:	9304      	str	r3, [sp, #16]
 800a906:	2300      	movs	r3, #0
 800a908:	9303      	str	r3, [sp, #12]
 800a90a:	2300      	movs	r3, #0
 800a90c:	9302      	str	r3, [sp, #8]
 800a90e:	2300      	movs	r3, #0
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	2300      	movs	r3, #0
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	2300      	movs	r3, #0
 800a918:	2222      	movs	r2, #34	; 0x22
 800a91a:	4946      	ldr	r1, [pc, #280]	; (800aa34 <_ZN7ESP826615RefreshWifiDataEv+0x26c>)
 800a91c:	f005 fdb6 	bl	801048c <siprintf>
						0,0,0,0,0,0,0,0,0,0,0,SectorPos,'"');
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a92e:	2b0e      	cmp	r3, #14
 800a930:	d871      	bhi.n	800aa16 <_ZN7ESP826615RefreshWifiDataEv+0x24e>
		{
			ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a938:	461a      	mov	r2, r3
 800a93a:	2336      	movs	r3, #54	; 0x36
 800a93c:	fb02 f303 	mul.w	r3, r2, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	4a3a      	ldr	r2, [pc, #232]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a944:	212c      	movs	r1, #44	; 0x2c
 800a946:	54d1      	strb	r1, [r2, r3]
			if(W25qxx_IsEmptySector(sectorRead+scanForUrl,0,53))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800a94e:	461a      	mov	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a956:	4413      	add	r3, r2
 800a958:	2235      	movs	r2, #53	; 0x35
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7f8 fdc5 	bl	80034ec <W25qxx_IsEmptySector>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d010      	beq.n	800a98a <_ZN7ESP826615RefreshWifiDataEv+0x1c2>
			{
				memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a96e:	461a      	mov	r2, r3
 800a970:	2336      	movs	r3, #54	; 0x36
 800a972:	fb02 f303 	mul.w	r3, r2, r3
 800a976:	4a2d      	ldr	r2, [pc, #180]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a978:	1898      	adds	r0, r3, r2
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f203 23a6 	addw	r3, r3, #678	; 0x2a6
 800a980:	2236      	movs	r2, #54	; 0x36
 800a982:	4619      	mov	r1, r3
 800a984:	f005 fc7c 	bl	8010280 <memcpy>
 800a988:	e03c      	b.n	800aa04 <_ZN7ESP826615RefreshWifiDataEv+0x23c>
	//			W25qxx_EraseSector(sectorRead+scanForUrl);
	//			W25qxx_WriteSector(ProductionSet_uintFormat_MEM,(sectorRead+scanForUrl),0,54);
			}
			else
			{
				W25qxx_ReadSector(&ProductionSet_uintFormat_MEM[54*scanForUrl],sectorRead+scanForUrl,0,53);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a990:	461a      	mov	r2, r3
 800a992:	2336      	movs	r3, #54	; 0x36
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	4a24      	ldr	r2, [pc, #144]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a99a:	1898      	adds	r0, r3, r2
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a9aa:	4413      	add	r3, r2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	2335      	movs	r3, #53	; 0x35
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f7f8 ffe9 	bl	8003988 <W25qxx_ReadSector>
				if(ProductionSet_uintFormat_MEM[54*scanForUrl] != 34 || ProductionSet_uintFormat_MEM[(54*scanForUrl)+52] != 34)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a9bc:	461a      	mov	r2, r3
 800a9be:	2336      	movs	r3, #54	; 0x36
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
 800a9c4:	4a19      	ldr	r2, [pc, #100]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a9c6:	5cd3      	ldrb	r3, [r2, r3]
 800a9c8:	2b22      	cmp	r3, #34	; 0x22
 800a9ca:	d10b      	bne.n	800a9e4 <_ZN7ESP826615RefreshWifiDataEv+0x21c>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	2336      	movs	r3, #54	; 0x36
 800a9d6:	fb02 f303 	mul.w	r3, r2, r3
 800a9da:	3334      	adds	r3, #52	; 0x34
 800a9dc:	4a13      	ldr	r2, [pc, #76]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a9de:	5cd3      	ldrb	r3, [r2, r3]
 800a9e0:	2b22      	cmp	r3, #34	; 0x22
 800a9e2:	d00f      	beq.n	800aa04 <_ZN7ESP826615RefreshWifiDataEv+0x23c>
				{
					memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	2336      	movs	r3, #54	; 0x36
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	4a0e      	ldr	r2, [pc, #56]	; (800aa2c <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800a9f4:	1898      	adds	r0, r3, r2
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f203 23a6 	addw	r3, r3, #678	; 0x2a6
 800a9fc:	2236      	movs	r2, #54	; 0x36
 800a9fe:	4619      	mov	r1, r3
 800aa00:	f005 fc3e 	bl	8010280 <memcpy>
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 800aa14:	e788      	b.n	800a928 <_ZN7ESP826615RefreshWifiDataEv+0x160>
	{
		ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
		memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
	}
#endif
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000bd2 	.word	0x20000bd2
 800aa24:	20000bd3 	.word	0x20000bd3
 800aa28:	200009cc 	.word	0x200009cc
 800aa2c:	20000bd8 	.word	0x20000bd8
 800aa30:	200009ca 	.word	0x200009ca
 800aa34:	08010f24 	.word	0x08010f24

0800aa38 <_ZN7ESP82664InitEv>:

void ESP8266::Init(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b090      	sub	sp, #64	; 0x40
 800aa3c:	af0e      	add	r7, sp, #56	; 0x38
 800aa3e:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f203 20a6 	addw	r0, r3, #678	; 0x2a6
 800aa46:	2322      	movs	r3, #34	; 0x22
 800aa48:	930d      	str	r3, [sp, #52]	; 0x34
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	930c      	str	r3, [sp, #48]	; 0x30
 800aa4e:	2300      	movs	r3, #0
 800aa50:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa52:	2300      	movs	r3, #0
 800aa54:	930a      	str	r3, [sp, #40]	; 0x28
 800aa56:	2300      	movs	r3, #0
 800aa58:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9308      	str	r3, [sp, #32]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	9307      	str	r3, [sp, #28]
 800aa62:	2300      	movs	r3, #0
 800aa64:	9306      	str	r3, [sp, #24]
 800aa66:	2300      	movs	r3, #0
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9304      	str	r3, [sp, #16]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9303      	str	r3, [sp, #12]
 800aa72:	2300      	movs	r3, #0
 800aa74:	9302      	str	r3, [sp, #8]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2222      	movs	r2, #34	; 0x22
 800aa82:	4908      	ldr	r1, [pc, #32]	; (800aaa4 <_ZN7ESP82664InitEv+0x6c>)
 800aa84:	f005 fd02 	bl	801048c <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <_ZN7ESP82664InitEv+0x70>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 800aa8e:	4b07      	ldr	r3, [pc, #28]	; (800aaac <_ZN7ESP82664InitEv+0x74>)
 800aa90:	2205      	movs	r2, #5
 800aa92:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 800aa94:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <_ZN7ESP82664InitEv+0x78>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	08010f24 	.word	0x08010f24
 800aaa8:	20000bd3 	.word	0x20000bd3
 800aaac:	20000a01 	.word	0x20000a01
 800aab0:	20000bd2 	.word	0x20000bd2

0800aab4 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	f5ad 5dcf 	sub.w	sp, sp, #6624	; 0x19e0
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
	GLCD glcd;
 800aabe:	f607 73e4 	addw	r3, r7, #4068	; 0xfe4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f9 fbfa 	bl	80042bc <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 800aac8:	f607 53c8 	addw	r3, r7, #3528	; 0xdc8
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe f92f 	bl	8008d30 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 800aad2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800aad6:	3b08      	subs	r3, #8
 800aad8:	4618      	mov	r0, r3
 800aada:	f7f9 f9b9 	bl	8003e50 <_ZN14DisplayRoutineC1Ev>
	LpdcLogic lpdcLogicInst;
 800aade:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800aae2:	3b14      	subs	r3, #20
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7f8 ffdb 	bl	8003aa0 <_ZN9LpdcLogicC1Ev>
	OfflineStorage offlineStorageInst;
 800aaea:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fb0c 	bl	800910c <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 800aaf4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aaf8:	3b1c      	subs	r3, #28
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff f87a 	bl	8009bf4 <_ZN7ESP8266C1Ev>
	SHIFT shiftInst;
 800ab00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ab04:	3b14      	subs	r3, #20
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe ff54 	bl	80099b4 <_ZN5SHIFTC1Ev>
	Dwinhmi dwinhmi;
 800ab0c:	f107 0308 	add.w	r3, r7, #8
 800ab10:	3b04      	subs	r3, #4
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fd fe7a 	bl	800880c <_ZN7DwinhmiC1Ev>

	displayRoutineInst.Init();
 800ab18:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800ab1c:	3b08      	subs	r3, #8
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f9 fb94 	bl	800424c <_ZN14DisplayRoutine4InitEv>
	//offlineStorageInst.ECUProductionInit();/* Not needed*/
	offlineStorageInst.ReadOfflinedataInit();
 800ab24:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fe9f 	bl	800986c <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	offlineStorageInst.specialMacDataRead();
 800ab2e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fe18 	bl	8009768 <_ZN14OfflineStorage18specialMacDataReadEv>
	offlineStorageInst.processDataRead();
 800ab38:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fe39 	bl	80097b4 <_ZN14OfflineStorage15processDataReadEv>
	esp8266Inst.Init();
 800ab42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ab46:	3b1c      	subs	r3, #28
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff ff75 	bl	800aa38 <_ZN7ESP82664InitEv>
	TxSeqComplete=1;
 800ab4e:	4b2b      	ldr	r3, [pc, #172]	; (800abfc <cppMain+0x148>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	701a      	strb	r2, [r3, #0]
	Sim_Trigger = GPIO_PIN_SET;
 800ab54:	4b2a      	ldr	r3, [pc, #168]	; (800ac00 <cppMain+0x14c>)
 800ab56:	2201      	movs	r2, #1
 800ab58:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(Flag1MS)
 800ab5a:	4b2a      	ldr	r3, [pc, #168]	; (800ac04 <cppMain+0x150>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d008      	beq.n	800ab74 <cppMain+0xc0>
		{
			Flag1MS=0;
 800ab62:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <cppMain+0x150>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	701a      	strb	r2, [r3, #0]
			lpdcLogicInst.run();
 800ab68:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800ab6c:	3b14      	subs	r3, #20
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7f8 ffca 	bl	8003b08 <_ZN9LpdcLogic3runEv>
		}
 		if(Flag100milliSeconds)
 800ab74:	4b24      	ldr	r3, [pc, #144]	; (800ac08 <cppMain+0x154>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01c      	beq.n	800abb6 <cppMain+0x102>
		{
			Flag100milliSeconds=0;
 800ab7c:	4b22      	ldr	r3, [pc, #136]	; (800ac08 <cppMain+0x154>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 800ab82:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe faf0 	bl	800916c <_ZN14OfflineStorage3runEv>
			offlineStorageInst.processDataWrite();
 800ab8c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe fd75 	bl	8009680 <_ZN14OfflineStorage16processDataWriteEv>
			offlineStorageInst.specialMacDataWrite();
 800ab96:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fd40 	bl	8009620 <_ZN14OfflineStorage19specialMacDataWriteEv>
			ModbusInst.ModbusReadTransaction();
 800aba0:	f607 53c8 	addw	r3, r7, #3528	; 0xdc8
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe f90d 	bl	8008dc4 <_ZN9Modbusrtu21ModbusReadTransactionEv>
			dwinhmi.dwinFrame();
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	3b04      	subs	r3, #4
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fd fe5f 	bl	8008874 <_ZN7Dwinhmi9dwinFrameEv>
		}
		if(Flag1Second)
 800abb6:	4b15      	ldr	r3, [pc, #84]	; (800ac0c <cppMain+0x158>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01a      	beq.n	800abf4 <cppMain+0x140>
		{
			Flag1Second=0;
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <cppMain+0x158>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 800abc4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800abc8:	3b08      	subs	r3, #8
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f9 f9c8 	bl	8003f60 <_ZN14DisplayRoutine3runEv>
			esp8266Inst.run();
 800abd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800abd4:	3b1c      	subs	r3, #28
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f9e9 	bl	8009fae <_ZN7ESP82663runEv>
			shiftInst.run();
 800abdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800abe0:	3b14      	subs	r3, #20
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fffa 	bl	8009bdc <_ZN5SHIFT3runEv>
			dwinhmi.dwinDecoder();
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	3b04      	subs	r3, #4
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fd ff7e 	bl	8008af0 <_ZN7Dwinhmi11dwinDecoderEv>
		}
		ESPRXDataSeg();
 800abf4:	f7f5 fcc6 	bl	8000584 <ESPRXDataSeg>
		if(Flag1MS)
 800abf8:	e7af      	b.n	800ab5a <cppMain+0xa6>
 800abfa:	bf00      	nop
 800abfc:	200008fb 	.word	0x200008fb
 800ac00:	2000078b 	.word	0x2000078b
 800ac04:	20000111 	.word	0x20000111
 800ac08:	20000113 	.word	0x20000113
 800ac0c:	20000112 	.word	0x20000112

0800ac10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac1a:	2003      	movs	r0, #3
 800ac1c:	f000 f960 	bl	800aee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ac20:	200f      	movs	r0, #15
 800ac22:	f000 f80d 	bl	800ac40 <HAL_InitTick>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	71fb      	strb	r3, [r7, #7]
 800ac30:	e001      	b.n	800ac36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ac32:	f7f7 fe11 	bl	8002858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ac36:	79fb      	ldrb	r3, [r7, #7]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ac4c:	4b17      	ldr	r3, [pc, #92]	; (800acac <HAL_InitTick+0x6c>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d023      	beq.n	800ac9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ac54:	4b16      	ldr	r3, [pc, #88]	; (800acb0 <HAL_InitTick+0x70>)
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4b14      	ldr	r3, [pc, #80]	; (800acac <HAL_InitTick+0x6c>)
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac62:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 f96d 	bl	800af4a <HAL_SYSTICK_Config>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10f      	bne.n	800ac96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b0f      	cmp	r3, #15
 800ac7a:	d809      	bhi.n	800ac90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	f000 f937 	bl	800aef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ac88:	4a0a      	ldr	r2, [pc, #40]	; (800acb4 <HAL_InitTick+0x74>)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	e007      	b.n	800aca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	73fb      	strb	r3, [r7, #15]
 800ac94:	e004      	b.n	800aca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	73fb      	strb	r3, [r7, #15]
 800ac9a:	e001      	b.n	800aca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000020 	.word	0x20000020
 800acb0:	20000014 	.word	0x20000014
 800acb4:	2000001c 	.word	0x2000001c

0800acb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <HAL_IncTick+0x20>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	461a      	mov	r2, r3
 800acc2:	4b06      	ldr	r3, [pc, #24]	; (800acdc <HAL_IncTick+0x24>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4413      	add	r3, r2
 800acc8:	4a04      	ldr	r2, [pc, #16]	; (800acdc <HAL_IncTick+0x24>)
 800acca:	6013      	str	r3, [r2, #0]
}
 800accc:	bf00      	nop
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	20000020 	.word	0x20000020
 800acdc:	20000f2c 	.word	0x20000f2c

0800ace0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
  return uwTick;
 800ace4:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <HAL_GetTick+0x14>)
 800ace6:	681b      	ldr	r3, [r3, #0]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000f2c 	.word	0x20000f2c

0800acf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ad00:	f7ff ffee 	bl	800ace0 <HAL_GetTick>
 800ad04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d005      	beq.n	800ad1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ad12:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <HAL_Delay+0x44>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ad1e:	bf00      	nop
 800ad20:	f7ff ffde 	bl	800ace0 <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d8f7      	bhi.n	800ad20 <HAL_Delay+0x28>
  {
  }
}
 800ad30:	bf00      	nop
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000020 	.word	0x20000020

0800ad40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ad50:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <__NVIC_SetPriorityGrouping+0x44>)
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ad68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ad6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ad72:	4a04      	ldr	r2, [pc, #16]	; (800ad84 <__NVIC_SetPriorityGrouping+0x44>)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	60d3      	str	r3, [r2, #12]
}
 800ad78:	bf00      	nop
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	e000ed00 	.word	0xe000ed00

0800ad88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ad8c:	4b04      	ldr	r3, [pc, #16]	; (800ada0 <__NVIC_GetPriorityGrouping+0x18>)
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	0a1b      	lsrs	r3, r3, #8
 800ad92:	f003 0307 	and.w	r3, r3, #7
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	e000ed00 	.word	0xe000ed00

0800ada4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	db0b      	blt.n	800adce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	f003 021f 	and.w	r2, r3, #31
 800adbc:	4907      	ldr	r1, [pc, #28]	; (800addc <__NVIC_EnableIRQ+0x38>)
 800adbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adc2:	095b      	lsrs	r3, r3, #5
 800adc4:	2001      	movs	r0, #1
 800adc6:	fa00 f202 	lsl.w	r2, r0, r2
 800adca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800adce:	bf00      	nop
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	e000e100 	.word	0xe000e100

0800ade0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	db0a      	blt.n	800ae0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	490c      	ldr	r1, [pc, #48]	; (800ae2c <__NVIC_SetPriority+0x4c>)
 800adfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adfe:	0112      	lsls	r2, r2, #4
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	440b      	add	r3, r1
 800ae04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ae08:	e00a      	b.n	800ae20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	4908      	ldr	r1, [pc, #32]	; (800ae30 <__NVIC_SetPriority+0x50>)
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	f003 030f 	and.w	r3, r3, #15
 800ae16:	3b04      	subs	r3, #4
 800ae18:	0112      	lsls	r2, r2, #4
 800ae1a:	b2d2      	uxtb	r2, r2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	761a      	strb	r2, [r3, #24]
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	e000e100 	.word	0xe000e100
 800ae30:	e000ed00 	.word	0xe000ed00

0800ae34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b089      	sub	sp, #36	; 0x24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	f1c3 0307 	rsb	r3, r3, #7
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	bf28      	it	cs
 800ae52:	2304      	movcs	r3, #4
 800ae54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	2b06      	cmp	r3, #6
 800ae5c:	d902      	bls.n	800ae64 <NVIC_EncodePriority+0x30>
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	3b03      	subs	r3, #3
 800ae62:	e000      	b.n	800ae66 <NVIC_EncodePriority+0x32>
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae68:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae72:	43da      	mvns	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	401a      	ands	r2, r3
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ae7c:	f04f 31ff 	mov.w	r1, #4294967295
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	fa01 f303 	lsl.w	r3, r1, r3
 800ae86:	43d9      	mvns	r1, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae8c:	4313      	orrs	r3, r2
         );
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3724      	adds	r7, #36	; 0x24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aeac:	d301      	bcc.n	800aeb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e00f      	b.n	800aed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aeb2:	4a0a      	ldr	r2, [pc, #40]	; (800aedc <SysTick_Config+0x40>)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aeba:	210f      	movs	r1, #15
 800aebc:	f04f 30ff 	mov.w	r0, #4294967295
 800aec0:	f7ff ff8e 	bl	800ade0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <SysTick_Config+0x40>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aeca:	4b04      	ldr	r3, [pc, #16]	; (800aedc <SysTick_Config+0x40>)
 800aecc:	2207      	movs	r2, #7
 800aece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	e000e010 	.word	0xe000e010

0800aee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ff29 	bl	800ad40 <__NVIC_SetPriorityGrouping>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	4603      	mov	r3, r0
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800af04:	2300      	movs	r3, #0
 800af06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800af08:	f7ff ff3e 	bl	800ad88 <__NVIC_GetPriorityGrouping>
 800af0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	6978      	ldr	r0, [r7, #20]
 800af14:	f7ff ff8e 	bl	800ae34 <NVIC_EncodePriority>
 800af18:	4602      	mov	r2, r0
 800af1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ff5d 	bl	800ade0 <__NVIC_SetPriority>
}
 800af26:	bf00      	nop
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	4603      	mov	r3, r0
 800af36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800af38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff ff31 	bl	800ada4 <__NVIC_EnableIRQ>
}
 800af42:	bf00      	nop
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff ffa2 	bl	800ae9c <SysTick_Config>
 800af58:	4603      	mov	r3, r0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800af62:	b480      	push	{r7}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d008      	beq.n	800af8c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2204      	movs	r2, #4
 800af7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e022      	b.n	800afd2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 020e 	bic.w	r2, r2, #14
 800af9a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 0201 	bic.w	r2, r2, #1
 800afaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb0:	f003 021c 	and.w	r2, r3, #28
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	2101      	movs	r1, #1
 800afba:	fa01 f202 	lsl.w	r2, r1, r2
 800afbe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d005      	beq.n	800b002 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2204      	movs	r2, #4
 800affa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	73fb      	strb	r3, [r7, #15]
 800b000:	e029      	b.n	800b056 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f022 020e 	bic.w	r2, r2, #14
 800b010:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0201 	bic.w	r2, r2, #1
 800b020:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b026:	f003 021c 	and.w	r2, r3, #28
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	2101      	movs	r1, #1
 800b030:	fa01 f202 	lsl.w	r2, r1, r2
 800b034:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
    }
  }
  return status;
 800b056:	7bfb      	ldrb	r3, [r7, #15]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b060:	b480      	push	{r7}
 800b062:	b087      	sub	sp, #28
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b06e:	e154      	b.n	800b31a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	2101      	movs	r1, #1
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	fa01 f303 	lsl.w	r3, r1, r3
 800b07c:	4013      	ands	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 8146 	beq.w	800b314 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	f003 0303 	and.w	r3, r3, #3
 800b090:	2b01      	cmp	r3, #1
 800b092:	d005      	beq.n	800b0a0 <HAL_GPIO_Init+0x40>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	f003 0303 	and.w	r3, r3, #3
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d130      	bne.n	800b102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b0:	43db      	mvns	r3, r3
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	43db      	mvns	r3, r3
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	091b      	lsrs	r3, r3, #4
 800b0ec:	f003 0201 	and.w	r2, r3, #1
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f003 0303 	and.w	r3, r3, #3
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d017      	beq.n	800b13e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	2203      	movs	r2, #3
 800b11a:	fa02 f303 	lsl.w	r3, r2, r3
 800b11e:	43db      	mvns	r3, r3
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4013      	ands	r3, r2
 800b124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	689a      	ldr	r2, [r3, #8]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	fa02 f303 	lsl.w	r3, r2, r3
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f003 0303 	and.w	r3, r3, #3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d123      	bne.n	800b192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	08da      	lsrs	r2, r3, #3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3208      	adds	r2, #8
 800b152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	220f      	movs	r2, #15
 800b162:	fa02 f303 	lsl.w	r3, r2, r3
 800b166:	43db      	mvns	r3, r3
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	4013      	ands	r3, r2
 800b16c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	691a      	ldr	r2, [r3, #16]
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	fa02 f303 	lsl.w	r3, r2, r3
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	4313      	orrs	r3, r2
 800b182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	08da      	lsrs	r2, r3, #3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3208      	adds	r2, #8
 800b18c:	6939      	ldr	r1, [r7, #16]
 800b18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	2203      	movs	r2, #3
 800b19e:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a2:	43db      	mvns	r3, r3
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f003 0203 	and.w	r2, r3, #3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80a0 	beq.w	800b314 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1d4:	4b58      	ldr	r3, [pc, #352]	; (800b338 <HAL_GPIO_Init+0x2d8>)
 800b1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d8:	4a57      	ldr	r2, [pc, #348]	; (800b338 <HAL_GPIO_Init+0x2d8>)
 800b1da:	f043 0301 	orr.w	r3, r3, #1
 800b1de:	6613      	str	r3, [r2, #96]	; 0x60
 800b1e0:	4b55      	ldr	r3, [pc, #340]	; (800b338 <HAL_GPIO_Init+0x2d8>)
 800b1e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	60bb      	str	r3, [r7, #8]
 800b1ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b1ec:	4a53      	ldr	r2, [pc, #332]	; (800b33c <HAL_GPIO_Init+0x2dc>)
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	089b      	lsrs	r3, r3, #2
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	220f      	movs	r2, #15
 800b204:	fa02 f303 	lsl.w	r3, r2, r3
 800b208:	43db      	mvns	r3, r3
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	4013      	ands	r3, r2
 800b20e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b216:	d019      	beq.n	800b24c <HAL_GPIO_Init+0x1ec>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a49      	ldr	r2, [pc, #292]	; (800b340 <HAL_GPIO_Init+0x2e0>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d013      	beq.n	800b248 <HAL_GPIO_Init+0x1e8>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a48      	ldr	r2, [pc, #288]	; (800b344 <HAL_GPIO_Init+0x2e4>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00d      	beq.n	800b244 <HAL_GPIO_Init+0x1e4>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a47      	ldr	r2, [pc, #284]	; (800b348 <HAL_GPIO_Init+0x2e8>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d007      	beq.n	800b240 <HAL_GPIO_Init+0x1e0>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a46      	ldr	r2, [pc, #280]	; (800b34c <HAL_GPIO_Init+0x2ec>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d101      	bne.n	800b23c <HAL_GPIO_Init+0x1dc>
 800b238:	2304      	movs	r3, #4
 800b23a:	e008      	b.n	800b24e <HAL_GPIO_Init+0x1ee>
 800b23c:	2307      	movs	r3, #7
 800b23e:	e006      	b.n	800b24e <HAL_GPIO_Init+0x1ee>
 800b240:	2303      	movs	r3, #3
 800b242:	e004      	b.n	800b24e <HAL_GPIO_Init+0x1ee>
 800b244:	2302      	movs	r3, #2
 800b246:	e002      	b.n	800b24e <HAL_GPIO_Init+0x1ee>
 800b248:	2301      	movs	r3, #1
 800b24a:	e000      	b.n	800b24e <HAL_GPIO_Init+0x1ee>
 800b24c:	2300      	movs	r3, #0
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	f002 0203 	and.w	r2, r2, #3
 800b254:	0092      	lsls	r2, r2, #2
 800b256:	4093      	lsls	r3, r2
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b25e:	4937      	ldr	r1, [pc, #220]	; (800b33c <HAL_GPIO_Init+0x2dc>)
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	089b      	lsrs	r3, r3, #2
 800b264:	3302      	adds	r3, #2
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b26c:	4b38      	ldr	r3, [pc, #224]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	43db      	mvns	r3, r3
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	4013      	ands	r3, r2
 800b27a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b290:	4a2f      	ldr	r2, [pc, #188]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b296:	4b2e      	ldr	r3, [pc, #184]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	43db      	mvns	r3, r3
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b2ba:	4a25      	ldr	r2, [pc, #148]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b2c0:	4b23      	ldr	r3, [pc, #140]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	43db      	mvns	r3, r3
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b2e4:	4a1a      	ldr	r2, [pc, #104]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b2ea:	4b19      	ldr	r3, [pc, #100]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	43db      	mvns	r3, r3
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b30e:	4a10      	ldr	r2, [pc, #64]	; (800b350 <HAL_GPIO_Init+0x2f0>)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	3301      	adds	r3, #1
 800b318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
 800b324:	2b00      	cmp	r3, #0
 800b326:	f47f aea3 	bne.w	800b070 <HAL_GPIO_Init+0x10>
  }
}
 800b32a:	bf00      	nop
 800b32c:	bf00      	nop
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	40021000 	.word	0x40021000
 800b33c:	40010000 	.word	0x40010000
 800b340:	48000400 	.word	0x48000400
 800b344:	48000800 	.word	0x48000800
 800b348:	48000c00 	.word	0x48000c00
 800b34c:	48001000 	.word	0x48001000
 800b350:	40010400 	.word	0x40010400

0800b354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	887b      	ldrh	r3, [r7, #2]
 800b366:	4013      	ands	r3, r2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b36c:	2301      	movs	r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]
 800b370:	e001      	b.n	800b376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b376:	7bfb      	ldrb	r3, [r7, #15]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	807b      	strh	r3, [r7, #2]
 800b390:	4613      	mov	r3, r2
 800b392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b394:	787b      	ldrb	r3, [r7, #1]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b39a:	887a      	ldrh	r2, [r7, #2]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b3a0:	e002      	b.n	800b3a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b3a2:	887a      	ldrh	r2, [r7, #2]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b3c6:	887a      	ldrh	r2, [r7, #2]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	041a      	lsls	r2, r3, #16
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	43d9      	mvns	r1, r3
 800b3d2:	887b      	ldrh	r3, [r7, #2]
 800b3d4:	400b      	ands	r3, r1
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	619a      	str	r2, [r3, #24]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e081      	b.n	800b4fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7f7 fa46 	bl	80028a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2224      	movs	r2, #36	; 0x24
 800b418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f022 0201 	bic.w	r2, r2, #1
 800b42a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685a      	ldr	r2, [r3, #4]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d107      	bne.n	800b462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b45e:	609a      	str	r2, [r3, #8]
 800b460:	e006      	b.n	800b470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689a      	ldr	r2, [r3, #8]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b46e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d104      	bne.n	800b482 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b480:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6812      	ldr	r2, [r2, #0]
 800b48c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b494:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68da      	ldr	r2, [r3, #12]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	69d9      	ldr	r1, [r3, #28]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a1a      	ldr	r2, [r3, #32]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	430a      	orrs	r2, r1
 800b4ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f042 0201 	orr.w	r2, r2, #1
 800b4de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b088      	sub	sp, #32
 800b50c:	af02      	add	r7, sp, #8
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	461a      	mov	r2, r3
 800b516:	4603      	mov	r3, r0
 800b518:	817b      	strh	r3, [r7, #10]
 800b51a:	460b      	mov	r3, r1
 800b51c:	813b      	strh	r3, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b20      	cmp	r3, #32
 800b52c:	f040 80f9 	bne.w	800b722 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <HAL_I2C_Mem_Write+0x34>
 800b536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d105      	bne.n	800b548 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b542:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e0ed      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d101      	bne.n	800b556 <HAL_I2C_Mem_Write+0x4e>
 800b552:	2302      	movs	r3, #2
 800b554:	e0e6      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b55e:	f7ff fbbf 	bl	800ace0 <HAL_GetTick>
 800b562:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	2319      	movs	r3, #25
 800b56a:	2201      	movs	r2, #1
 800b56c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 fac3 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0d1      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2221      	movs	r2, #33	; 0x21
 800b584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2240      	movs	r2, #64	; 0x40
 800b58c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6a3a      	ldr	r2, [r7, #32]
 800b59a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5a8:	88f8      	ldrh	r0, [r7, #6]
 800b5aa:	893a      	ldrh	r2, [r7, #8]
 800b5ac:	8979      	ldrh	r1, [r7, #10]
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f9d3 	bl	800b964 <I2C_RequestMemoryWrite>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d005      	beq.n	800b5d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e0a9      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	2bff      	cmp	r3, #255	; 0xff
 800b5d8:	d90e      	bls.n	800b5f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	22ff      	movs	r2, #255	; 0xff
 800b5de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	8979      	ldrh	r1, [r7, #10]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 fc2b 	bl	800be4c <I2C_TransferConfig>
 800b5f6:	e00f      	b.n	800b618 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b606:	b2da      	uxtb	r2, r3
 800b608:	8979      	ldrh	r1, [r7, #10]
 800b60a:	2300      	movs	r3, #0
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fc1a 	bl	800be4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 faad 	bl	800bb7c <I2C_WaitOnTXISFlagUntilTimeout>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e07b      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	781a      	ldrb	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b646:	b29b      	uxth	r3, r3
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d034      	beq.n	800b6d0 <HAL_I2C_Mem_Write+0x1c8>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d130      	bne.n	800b6d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	2200      	movs	r2, #0
 800b676:	2180      	movs	r1, #128	; 0x80
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 fa3f 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e04d      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2bff      	cmp	r3, #255	; 0xff
 800b690:	d90e      	bls.n	800b6b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	22ff      	movs	r2, #255	; 0xff
 800b696:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	8979      	ldrh	r1, [r7, #10]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 fbcf 	bl	800be4c <I2C_TransferConfig>
 800b6ae:	e00f      	b.n	800b6d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	8979      	ldrh	r1, [r7, #10]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 fbbe 	bl	800be4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d19e      	bne.n	800b618 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 fa8c 	bl	800bbfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e01a      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2220      	movs	r2, #32
 800b6f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6859      	ldr	r1, [r3, #4]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <HAL_I2C_Mem_Write+0x224>)
 800b702:	400b      	ands	r3, r1
 800b704:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2220      	movs	r2, #32
 800b70a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	e000      	b.n	800b724 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b722:	2302      	movs	r3, #2
  }
}
 800b724:	4618      	mov	r0, r3
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	fe00e800 	.word	0xfe00e800

0800b730 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af02      	add	r7, sp, #8
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	461a      	mov	r2, r3
 800b73e:	4603      	mov	r3, r0
 800b740:	817b      	strh	r3, [r7, #10]
 800b742:	460b      	mov	r3, r1
 800b744:	813b      	strh	r3, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b20      	cmp	r3, #32
 800b754:	f040 80fd 	bne.w	800b952 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d002      	beq.n	800b764 <HAL_I2C_Mem_Read+0x34>
 800b75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b760:	2b00      	cmp	r3, #0
 800b762:	d105      	bne.n	800b770 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b76a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e0f1      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b776:	2b01      	cmp	r3, #1
 800b778:	d101      	bne.n	800b77e <HAL_I2C_Mem_Read+0x4e>
 800b77a:	2302      	movs	r3, #2
 800b77c:	e0ea      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b786:	f7ff faab 	bl	800ace0 <HAL_GetTick>
 800b78a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	2319      	movs	r3, #25
 800b792:	2201      	movs	r2, #1
 800b794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f9af 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e0d5      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2222      	movs	r2, #34	; 0x22
 800b7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2240      	movs	r2, #64	; 0x40
 800b7b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6a3a      	ldr	r2, [r7, #32]
 800b7c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b7d0:	88f8      	ldrh	r0, [r7, #6]
 800b7d2:	893a      	ldrh	r2, [r7, #8]
 800b7d4:	8979      	ldrh	r1, [r7, #10]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	4603      	mov	r3, r0
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f913 	bl	800ba0c <I2C_RequestMemoryRead>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e0ad      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	2bff      	cmp	r3, #255	; 0xff
 800b800:	d90e      	bls.n	800b820 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	22ff      	movs	r2, #255	; 0xff
 800b806:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	8979      	ldrh	r1, [r7, #10]
 800b810:	4b52      	ldr	r3, [pc, #328]	; (800b95c <HAL_I2C_Mem_Read+0x22c>)
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fb17 	bl	800be4c <I2C_TransferConfig>
 800b81e:	e00f      	b.n	800b840 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b824:	b29a      	uxth	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	8979      	ldrh	r1, [r7, #10]
 800b832:	4b4a      	ldr	r3, [pc, #296]	; (800b95c <HAL_I2C_Mem_Read+0x22c>)
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 fb06 	bl	800be4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	2200      	movs	r2, #0
 800b848:	2104      	movs	r1, #4
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 f956 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e07c      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b876:	3b01      	subs	r3, #1
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d034      	beq.n	800b900 <HAL_I2C_Mem_Read+0x1d0>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d130      	bne.n	800b900 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2180      	movs	r1, #128	; 0x80
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 f927 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e04d      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	2bff      	cmp	r3, #255	; 0xff
 800b8c0:	d90e      	bls.n	800b8e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	22ff      	movs	r2, #255	; 0xff
 800b8c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	8979      	ldrh	r1, [r7, #10]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fab7 	bl	800be4c <I2C_TransferConfig>
 800b8de:	e00f      	b.n	800b900 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	8979      	ldrh	r1, [r7, #10]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 faa6 	bl	800be4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b904:	b29b      	uxth	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d19a      	bne.n	800b840 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f974 	bl	800bbfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e01a      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2220      	movs	r2, #32
 800b924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	6859      	ldr	r1, [r3, #4]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <HAL_I2C_Mem_Read+0x230>)
 800b932:	400b      	ands	r3, r1
 800b934:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2220      	movs	r2, #32
 800b93a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	e000      	b.n	800b954 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b952:	2302      	movs	r3, #2
  }
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	80002400 	.word	0x80002400
 800b960:	fe00e800 	.word	0xfe00e800

0800b964 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af02      	add	r7, sp, #8
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	4608      	mov	r0, r1
 800b96e:	4611      	mov	r1, r2
 800b970:	461a      	mov	r2, r3
 800b972:	4603      	mov	r3, r0
 800b974:	817b      	strh	r3, [r7, #10]
 800b976:	460b      	mov	r3, r1
 800b978:	813b      	strh	r3, [r7, #8]
 800b97a:	4613      	mov	r3, r2
 800b97c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	b2da      	uxtb	r2, r3
 800b982:	8979      	ldrh	r1, [r7, #10]
 800b984:	4b20      	ldr	r3, [pc, #128]	; (800ba08 <I2C_RequestMemoryWrite+0xa4>)
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 fa5d 	bl	800be4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b992:	69fa      	ldr	r2, [r7, #28]
 800b994:	69b9      	ldr	r1, [r7, #24]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f8f0 	bl	800bb7c <I2C_WaitOnTXISFlagUntilTimeout>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e02c      	b.n	800ba00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b9a6:	88fb      	ldrh	r3, [r7, #6]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d105      	bne.n	800b9b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9ac:	893b      	ldrh	r3, [r7, #8]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	629a      	str	r2, [r3, #40]	; 0x28
 800b9b6:	e015      	b.n	800b9e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b9b8:	893b      	ldrh	r3, [r7, #8]
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	69b9      	ldr	r1, [r7, #24]
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 f8d6 	bl	800bb7c <I2C_WaitOnTXISFlagUntilTimeout>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e012      	b.n	800ba00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9da:	893b      	ldrh	r3, [r7, #8]
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2180      	movs	r1, #128	; 0x80
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 f884 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	80002000 	.word	0x80002000

0800ba0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	4608      	mov	r0, r1
 800ba16:	4611      	mov	r1, r2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	817b      	strh	r3, [r7, #10]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	813b      	strh	r3, [r7, #8]
 800ba22:	4613      	mov	r3, r2
 800ba24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	8979      	ldrh	r1, [r7, #10]
 800ba2c:	4b20      	ldr	r3, [pc, #128]	; (800bab0 <I2C_RequestMemoryRead+0xa4>)
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	2300      	movs	r3, #0
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 fa0a 	bl	800be4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba38:	69fa      	ldr	r2, [r7, #28]
 800ba3a:	69b9      	ldr	r1, [r7, #24]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f89d 	bl	800bb7c <I2C_WaitOnTXISFlagUntilTimeout>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e02c      	b.n	800baa6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d105      	bne.n	800ba5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba52:	893b      	ldrh	r3, [r7, #8]
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	629a      	str	r2, [r3, #40]	; 0x28
 800ba5c:	e015      	b.n	800ba8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba5e:	893b      	ldrh	r3, [r7, #8]
 800ba60:	0a1b      	lsrs	r3, r3, #8
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba6c:	69fa      	ldr	r2, [r7, #28]
 800ba6e:	69b9      	ldr	r1, [r7, #24]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 f883 	bl	800bb7c <I2C_WaitOnTXISFlagUntilTimeout>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e012      	b.n	800baa6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba80:	893b      	ldrh	r3, [r7, #8]
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	2200      	movs	r2, #0
 800ba92:	2140      	movs	r1, #64	; 0x40
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 f831 	bl	800bafc <I2C_WaitOnFlagUntilTimeout>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e000      	b.n	800baa6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	80002000 	.word	0x80002000

0800bab4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d103      	bne.n	800bad2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2200      	movs	r2, #0
 800bad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	2b01      	cmp	r3, #1
 800bade:	d007      	beq.n	800baf0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699a      	ldr	r2, [r3, #24]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f042 0201 	orr.w	r2, r2, #1
 800baee:	619a      	str	r2, [r3, #24]
  }
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	603b      	str	r3, [r7, #0]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb0c:	e022      	b.n	800bb54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb14:	d01e      	beq.n	800bb54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb16:	f7ff f8e3 	bl	800ace0 <HAL_GetTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d302      	bcc.n	800bb2c <I2C_WaitOnFlagUntilTimeout+0x30>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d113      	bne.n	800bb54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb30:	f043 0220 	orr.w	r2, r3, #32
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e00f      	b.n	800bb74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	699a      	ldr	r2, [r3, #24]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	bf0c      	ite	eq
 800bb64:	2301      	moveq	r3, #1
 800bb66:	2300      	movne	r3, #0
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d0cd      	beq.n	800bb0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb88:	e02c      	b.n	800bbe4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 f870 	bl	800bc74 <I2C_IsErrorOccurred>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e02a      	b.n	800bbf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba4:	d01e      	beq.n	800bbe4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bba6:	f7ff f89b 	bl	800ace0 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d302      	bcc.n	800bbbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d113      	bne.n	800bbe4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc0:	f043 0220 	orr.w	r2, r3, #32
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e007      	b.n	800bbf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	f003 0302 	and.w	r3, r3, #2
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d1cb      	bne.n	800bb8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc08:	e028      	b.n	800bc5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 f830 	bl	800bc74 <I2C_IsErrorOccurred>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e026      	b.n	800bc6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1e:	f7ff f85f 	bl	800ace0 <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d302      	bcc.n	800bc34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d113      	bne.n	800bc5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc38:	f043 0220 	orr.w	r2, r3, #32
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e007      	b.n	800bc6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	f003 0320 	and.w	r3, r3, #32
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	d1cf      	bne.n	800bc0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08a      	sub	sp, #40	; 0x28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	f003 0310 	and.w	r3, r3, #16
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d075      	beq.n	800bd8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2210      	movs	r2, #16
 800bca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bca8:	e056      	b.n	800bd58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb0:	d052      	beq.n	800bd58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bcb2:	f7ff f815 	bl	800ace0 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d302      	bcc.n	800bcc8 <I2C_IsErrorOccurred+0x54>
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d147      	bne.n	800bd58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcea:	d12e      	bne.n	800bd4a <I2C_IsErrorOccurred+0xd6>
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcf2:	d02a      	beq.n	800bd4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800bcf4:	7cfb      	ldrb	r3, [r7, #19]
 800bcf6:	2b20      	cmp	r3, #32
 800bcf8:	d027      	beq.n	800bd4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bd0a:	f7fe ffe9 	bl	800ace0 <HAL_GetTick>
 800bd0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd10:	e01b      	b.n	800bd4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bd12:	f7fe ffe5 	bl	800ace0 <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b19      	cmp	r3, #25
 800bd1e:	d914      	bls.n	800bd4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd24:	f043 0220 	orr.w	r2, r3, #32
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	f003 0320 	and.w	r3, r3, #32
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	d1dc      	bne.n	800bd12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	f003 0320 	and.w	r3, r3, #32
 800bd62:	2b20      	cmp	r3, #32
 800bd64:	d003      	beq.n	800bd6e <I2C_IsErrorOccurred+0xfa>
 800bd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d09d      	beq.n	800bcaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bd6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	f043 0304 	orr.w	r3, r3, #4
 800bd84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	f043 0301 	orr.w	r3, r3, #1
 800bda4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	f043 0308 	orr.w	r3, r3, #8
 800bdc6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00b      	beq.n	800bdfa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	f043 0302 	orr.w	r3, r3, #2
 800bde8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01c      	beq.n	800be3c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7ff fe56 	bl	800bab4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6859      	ldr	r1, [r3, #4]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <I2C_IsErrorOccurred+0x1d4>)
 800be14:	400b      	ands	r3, r1
 800be16:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	431a      	orrs	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2220      	movs	r2, #32
 800be28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800be3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be40:	4618      	mov	r0, r3
 800be42:	3728      	adds	r7, #40	; 0x28
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	fe00e800 	.word	0xfe00e800

0800be4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	460b      	mov	r3, r1
 800be58:	817b      	strh	r3, [r7, #10]
 800be5a:	4613      	mov	r3, r2
 800be5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be5e:	897b      	ldrh	r3, [r7, #10]
 800be60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be64:	7a7b      	ldrb	r3, [r7, #9]
 800be66:	041b      	lsls	r3, r3, #16
 800be68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	4313      	orrs	r3, r2
 800be76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	0d5b      	lsrs	r3, r3, #21
 800be86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800be8a:	4b08      	ldr	r3, [pc, #32]	; (800beac <I2C_TransferConfig+0x60>)
 800be8c:	430b      	orrs	r3, r1
 800be8e:	43db      	mvns	r3, r3
 800be90:	ea02 0103 	and.w	r1, r2, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	430a      	orrs	r2, r1
 800be9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	03ff63ff 	.word	0x03ff63ff

0800beb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	d138      	bne.n	800bf38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800becc:	2b01      	cmp	r3, #1
 800bece:	d101      	bne.n	800bed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bed0:	2302      	movs	r3, #2
 800bed2:	e032      	b.n	800bf3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2224      	movs	r2, #36	; 0x24
 800bee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f022 0201 	bic.w	r2, r2, #1
 800bef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6819      	ldr	r1, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	430a      	orrs	r2, r1
 800bf12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f042 0201 	orr.w	r2, r2, #1
 800bf22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	e000      	b.n	800bf3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bf38:	2302      	movs	r3, #2
  }
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d139      	bne.n	800bfd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d101      	bne.n	800bf6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bf66:	2302      	movs	r3, #2
 800bf68:	e033      	b.n	800bfd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2224      	movs	r2, #36	; 0x24
 800bf76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f022 0201 	bic.w	r2, r2, #1
 800bf88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bf98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	021b      	lsls	r3, r3, #8
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f042 0201 	orr.w	r2, r2, #1
 800bfba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e000      	b.n	800bfd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bfd0:	2302      	movs	r3, #2
  }
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
	...

0800bfe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bfe4:	4b04      	ldr	r3, [pc, #16]	; (800bff8 <HAL_PWREx_GetVoltageRange+0x18>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	40007000 	.word	0x40007000

0800bffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c00a:	d130      	bne.n	800c06e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c00c:	4b23      	ldr	r3, [pc, #140]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c018:	d038      	beq.n	800c08c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c01a:	4b20      	ldr	r3, [pc, #128]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c022:	4a1e      	ldr	r2, [pc, #120]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c02a:	4b1d      	ldr	r3, [pc, #116]	; (800c0a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2232      	movs	r2, #50	; 0x32
 800c030:	fb02 f303 	mul.w	r3, r2, r3
 800c034:	4a1b      	ldr	r2, [pc, #108]	; (800c0a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c036:	fba2 2303 	umull	r2, r3, r2, r3
 800c03a:	0c9b      	lsrs	r3, r3, #18
 800c03c:	3301      	adds	r3, #1
 800c03e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c040:	e002      	b.n	800c048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3b01      	subs	r3, #1
 800c046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c048:	4b14      	ldr	r3, [pc, #80]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c054:	d102      	bne.n	800c05c <HAL_PWREx_ControlVoltageScaling+0x60>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f2      	bne.n	800c042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c05c:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c068:	d110      	bne.n	800c08c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e00f      	b.n	800c08e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c06e:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c07a:	d007      	beq.n	800c08c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c07c:	4b07      	ldr	r3, [pc, #28]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c084:	4a05      	ldr	r2, [pc, #20]	; (800c09c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c08a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	40007000 	.word	0x40007000
 800c0a0:	20000014 	.word	0x20000014
 800c0a4:	431bde83 	.word	0x431bde83

0800c0a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	f000 bc02 	b.w	800c8c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c0bc:	4b96      	ldr	r3, [pc, #600]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f003 030c 	and.w	r3, r3, #12
 800c0c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c0c6:	4b94      	ldr	r3, [pc, #592]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	f003 0303 	and.w	r3, r3, #3
 800c0ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0310 	and.w	r3, r3, #16
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 80e4 	beq.w	800c2a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d007      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x4c>
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	2b0c      	cmp	r3, #12
 800c0e8:	f040 808b 	bne.w	800c202 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	f040 8087 	bne.w	800c202 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c0f4:	4b88      	ldr	r3, [pc, #544]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 0302 	and.w	r3, r3, #2
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <HAL_RCC_OscConfig+0x64>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	e3d9      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a1a      	ldr	r2, [r3, #32]
 800c110:	4b81      	ldr	r3, [pc, #516]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0308 	and.w	r3, r3, #8
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <HAL_RCC_OscConfig+0x7e>
 800c11c:	4b7e      	ldr	r3, [pc, #504]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c124:	e005      	b.n	800c132 <HAL_RCC_OscConfig+0x8a>
 800c126:	4b7c      	ldr	r3, [pc, #496]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c12c:	091b      	lsrs	r3, r3, #4
 800c12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c132:	4293      	cmp	r3, r2
 800c134:	d223      	bcs.n	800c17e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fd8c 	bl	800cc58 <RCC_SetFlashLatencyFromMSIRange>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e3ba      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c14a:	4b73      	ldr	r3, [pc, #460]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a72      	ldr	r2, [pc, #456]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c150:	f043 0308 	orr.w	r3, r3, #8
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	4b70      	ldr	r3, [pc, #448]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a1b      	ldr	r3, [r3, #32]
 800c162:	496d      	ldr	r1, [pc, #436]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c164:	4313      	orrs	r3, r2
 800c166:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c168:	4b6b      	ldr	r3, [pc, #428]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	69db      	ldr	r3, [r3, #28]
 800c174:	021b      	lsls	r3, r3, #8
 800c176:	4968      	ldr	r1, [pc, #416]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c178:	4313      	orrs	r3, r2
 800c17a:	604b      	str	r3, [r1, #4]
 800c17c:	e025      	b.n	800c1ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c17e:	4b66      	ldr	r3, [pc, #408]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a65      	ldr	r2, [pc, #404]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c184:	f043 0308 	orr.w	r3, r3, #8
 800c188:	6013      	str	r3, [r2, #0]
 800c18a:	4b63      	ldr	r3, [pc, #396]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	4960      	ldr	r1, [pc, #384]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c198:	4313      	orrs	r3, r2
 800c19a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c19c:	4b5e      	ldr	r3, [pc, #376]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	021b      	lsls	r3, r3, #8
 800c1aa:	495b      	ldr	r1, [pc, #364]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d109      	bne.n	800c1ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fd4c 	bl	800cc58 <RCC_SetFlashLatencyFromMSIRange>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e37a      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c1ca:	f000 fc81 	bl	800cad0 <HAL_RCC_GetSysClockFreq>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b51      	ldr	r3, [pc, #324]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	091b      	lsrs	r3, r3, #4
 800c1d6:	f003 030f 	and.w	r3, r3, #15
 800c1da:	4950      	ldr	r1, [pc, #320]	; (800c31c <HAL_RCC_OscConfig+0x274>)
 800c1dc:	5ccb      	ldrb	r3, [r1, r3]
 800c1de:	f003 031f 	and.w	r3, r3, #31
 800c1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e6:	4a4e      	ldr	r2, [pc, #312]	; (800c320 <HAL_RCC_OscConfig+0x278>)
 800c1e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c1ea:	4b4e      	ldr	r3, [pc, #312]	; (800c324 <HAL_RCC_OscConfig+0x27c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fd26 	bl	800ac40 <HAL_InitTick>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d052      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
 800c200:	e35e      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d032      	beq.n	800c270 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c20a:	4b43      	ldr	r3, [pc, #268]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a42      	ldr	r2, [pc, #264]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c210:	f043 0301 	orr.w	r3, r3, #1
 800c214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c216:	f7fe fd63 	bl	800ace0 <HAL_GetTick>
 800c21a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c21c:	e008      	b.n	800c230 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c21e:	f7fe fd5f 	bl	800ace0 <HAL_GetTick>
 800c222:	4602      	mov	r2, r0
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d901      	bls.n	800c230 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e347      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c230:	4b39      	ldr	r3, [pc, #228]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0302 	and.w	r3, r3, #2
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d0f0      	beq.n	800c21e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c23c:	4b36      	ldr	r3, [pc, #216]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a35      	ldr	r2, [pc, #212]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c242:	f043 0308 	orr.w	r3, r3, #8
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	4b33      	ldr	r3, [pc, #204]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a1b      	ldr	r3, [r3, #32]
 800c254:	4930      	ldr	r1, [pc, #192]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c256:	4313      	orrs	r3, r2
 800c258:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c25a:	4b2f      	ldr	r3, [pc, #188]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	492b      	ldr	r1, [pc, #172]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c26a:	4313      	orrs	r3, r2
 800c26c:	604b      	str	r3, [r1, #4]
 800c26e:	e01a      	b.n	800c2a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c270:	4b29      	ldr	r3, [pc, #164]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a28      	ldr	r2, [pc, #160]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c276:	f023 0301 	bic.w	r3, r3, #1
 800c27a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c27c:	f7fe fd30 	bl	800ace0 <HAL_GetTick>
 800c280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c282:	e008      	b.n	800c296 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c284:	f7fe fd2c 	bl	800ace0 <HAL_GetTick>
 800c288:	4602      	mov	r2, r0
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d901      	bls.n	800c296 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e314      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c296:	4b20      	ldr	r3, [pc, #128]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1f0      	bne.n	800c284 <HAL_RCC_OscConfig+0x1dc>
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c2a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 0301 	and.w	r3, r3, #1
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d073      	beq.n	800c39a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	2b08      	cmp	r3, #8
 800c2b6:	d005      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x21c>
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	2b0c      	cmp	r3, #12
 800c2bc:	d10e      	bne.n	800c2dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d10b      	bne.n	800c2dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2c4:	4b14      	ldr	r3, [pc, #80]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d063      	beq.n	800c398 <HAL_RCC_OscConfig+0x2f0>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d15f      	bne.n	800c398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e2f1      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e4:	d106      	bne.n	800c2f4 <HAL_RCC_OscConfig+0x24c>
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a0b      	ldr	r2, [pc, #44]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c2ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	e025      	b.n	800c340 <HAL_RCC_OscConfig+0x298>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2fc:	d114      	bne.n	800c328 <HAL_RCC_OscConfig+0x280>
 800c2fe:	4b06      	ldr	r3, [pc, #24]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a05      	ldr	r2, [pc, #20]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	4b03      	ldr	r3, [pc, #12]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a02      	ldr	r2, [pc, #8]	; (800c318 <HAL_RCC_OscConfig+0x270>)
 800c310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	e013      	b.n	800c340 <HAL_RCC_OscConfig+0x298>
 800c318:	40021000 	.word	0x40021000
 800c31c:	08010f70 	.word	0x08010f70
 800c320:	20000014 	.word	0x20000014
 800c324:	2000001c 	.word	0x2000001c
 800c328:	4ba0      	ldr	r3, [pc, #640]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a9f      	ldr	r2, [pc, #636]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c32e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	4b9d      	ldr	r3, [pc, #628]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a9c      	ldr	r2, [pc, #624]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c33a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c33e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d013      	beq.n	800c370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c348:	f7fe fcca 	bl	800ace0 <HAL_GetTick>
 800c34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c34e:	e008      	b.n	800c362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c350:	f7fe fcc6 	bl	800ace0 <HAL_GetTick>
 800c354:	4602      	mov	r2, r0
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	2b64      	cmp	r3, #100	; 0x64
 800c35c:	d901      	bls.n	800c362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e2ae      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c362:	4b92      	ldr	r3, [pc, #584]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0f0      	beq.n	800c350 <HAL_RCC_OscConfig+0x2a8>
 800c36e:	e014      	b.n	800c39a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c370:	f7fe fcb6 	bl	800ace0 <HAL_GetTick>
 800c374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c376:	e008      	b.n	800c38a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c378:	f7fe fcb2 	bl	800ace0 <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b64      	cmp	r3, #100	; 0x64
 800c384:	d901      	bls.n	800c38a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e29a      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c38a:	4b88      	ldr	r3, [pc, #544]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1f0      	bne.n	800c378 <HAL_RCC_OscConfig+0x2d0>
 800c396:	e000      	b.n	800c39a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d060      	beq.n	800c468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	2b04      	cmp	r3, #4
 800c3aa:	d005      	beq.n	800c3b8 <HAL_RCC_OscConfig+0x310>
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	2b0c      	cmp	r3, #12
 800c3b0:	d119      	bne.n	800c3e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d116      	bne.n	800c3e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3b8:	4b7c      	ldr	r3, [pc, #496]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x328>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e277      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3d0:	4b76      	ldr	r3, [pc, #472]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	061b      	lsls	r3, r3, #24
 800c3de:	4973      	ldr	r1, [pc, #460]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3e4:	e040      	b.n	800c468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d023      	beq.n	800c436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3ee:	4b6f      	ldr	r3, [pc, #444]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a6e      	ldr	r2, [pc, #440]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3fa:	f7fe fc71 	bl	800ace0 <HAL_GetTick>
 800c3fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c400:	e008      	b.n	800c414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c402:	f7fe fc6d 	bl	800ace0 <HAL_GetTick>
 800c406:	4602      	mov	r2, r0
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d901      	bls.n	800c414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c410:	2303      	movs	r3, #3
 800c412:	e255      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c414:	4b65      	ldr	r3, [pc, #404]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d0f0      	beq.n	800c402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c420:	4b62      	ldr	r3, [pc, #392]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	061b      	lsls	r3, r3, #24
 800c42e:	495f      	ldr	r1, [pc, #380]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c430:	4313      	orrs	r3, r2
 800c432:	604b      	str	r3, [r1, #4]
 800c434:	e018      	b.n	800c468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c436:	4b5d      	ldr	r3, [pc, #372]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a5c      	ldr	r2, [pc, #368]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c442:	f7fe fc4d 	bl	800ace0 <HAL_GetTick>
 800c446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c448:	e008      	b.n	800c45c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c44a:	f7fe fc49 	bl	800ace0 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	2b02      	cmp	r3, #2
 800c456:	d901      	bls.n	800c45c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e231      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c45c:	4b53      	ldr	r3, [pc, #332]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1f0      	bne.n	800c44a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 0308 	and.w	r3, r3, #8
 800c470:	2b00      	cmp	r3, #0
 800c472:	d03c      	beq.n	800c4ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d01c      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c47c:	4b4b      	ldr	r3, [pc, #300]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c482:	4a4a      	ldr	r2, [pc, #296]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c484:	f043 0301 	orr.w	r3, r3, #1
 800c488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c48c:	f7fe fc28 	bl	800ace0 <HAL_GetTick>
 800c490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c492:	e008      	b.n	800c4a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c494:	f7fe fc24 	bl	800ace0 <HAL_GetTick>
 800c498:	4602      	mov	r2, r0
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d901      	bls.n	800c4a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	e20c      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4a6:	4b41      	ldr	r3, [pc, #260]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c4a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4ac:	f003 0302 	and.w	r3, r3, #2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d0ef      	beq.n	800c494 <HAL_RCC_OscConfig+0x3ec>
 800c4b4:	e01b      	b.n	800c4ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4b6:	4b3d      	ldr	r3, [pc, #244]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c4b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4bc:	4a3b      	ldr	r2, [pc, #236]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c4be:	f023 0301 	bic.w	r3, r3, #1
 800c4c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4c6:	f7fe fc0b 	bl	800ace0 <HAL_GetTick>
 800c4ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4cc:	e008      	b.n	800c4e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4ce:	f7fe fc07 	bl	800ace0 <HAL_GetTick>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d901      	bls.n	800c4e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e1ef      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4e0:	4b32      	ldr	r3, [pc, #200]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c4e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4e6:	f003 0302 	and.w	r3, r3, #2
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1ef      	bne.n	800c4ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 80a6 	beq.w	800c648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c500:	4b2a      	ldr	r3, [pc, #168]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10d      	bne.n	800c528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c50c:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c510:	4a26      	ldr	r2, [pc, #152]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c516:	6593      	str	r3, [r2, #88]	; 0x58
 800c518:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c51c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c520:	60bb      	str	r3, [r7, #8]
 800c522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c524:	2301      	movs	r3, #1
 800c526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c528:	4b21      	ldr	r3, [pc, #132]	; (800c5b0 <HAL_RCC_OscConfig+0x508>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c530:	2b00      	cmp	r3, #0
 800c532:	d118      	bne.n	800c566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c534:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <HAL_RCC_OscConfig+0x508>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a1d      	ldr	r2, [pc, #116]	; (800c5b0 <HAL_RCC_OscConfig+0x508>)
 800c53a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c53e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c540:	f7fe fbce 	bl	800ace0 <HAL_GetTick>
 800c544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c546:	e008      	b.n	800c55a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c548:	f7fe fbca 	bl	800ace0 <HAL_GetTick>
 800c54c:	4602      	mov	r2, r0
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	2b02      	cmp	r3, #2
 800c554:	d901      	bls.n	800c55a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c556:	2303      	movs	r3, #3
 800c558:	e1b2      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c55a:	4b15      	ldr	r3, [pc, #84]	; (800c5b0 <HAL_RCC_OscConfig+0x508>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0f0      	beq.n	800c548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d108      	bne.n	800c580 <HAL_RCC_OscConfig+0x4d8>
 800c56e:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c574:	4a0d      	ldr	r2, [pc, #52]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c576:	f043 0301 	orr.w	r3, r3, #1
 800c57a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c57e:	e029      	b.n	800c5d4 <HAL_RCC_OscConfig+0x52c>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	2b05      	cmp	r3, #5
 800c586:	d115      	bne.n	800c5b4 <HAL_RCC_OscConfig+0x50c>
 800c588:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c58e:	4a07      	ldr	r2, [pc, #28]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c590:	f043 0304 	orr.w	r3, r3, #4
 800c594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c598:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59e:	4a03      	ldr	r2, [pc, #12]	; (800c5ac <HAL_RCC_OscConfig+0x504>)
 800c5a0:	f043 0301 	orr.w	r3, r3, #1
 800c5a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5a8:	e014      	b.n	800c5d4 <HAL_RCC_OscConfig+0x52c>
 800c5aa:	bf00      	nop
 800c5ac:	40021000 	.word	0x40021000
 800c5b0:	40007000 	.word	0x40007000
 800c5b4:	4b9a      	ldr	r3, [pc, #616]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ba:	4a99      	ldr	r2, [pc, #612]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c5bc:	f023 0301 	bic.w	r3, r3, #1
 800c5c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5c4:	4b96      	ldr	r3, [pc, #600]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c5c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ca:	4a95      	ldr	r2, [pc, #596]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c5cc:	f023 0304 	bic.w	r3, r3, #4
 800c5d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d016      	beq.n	800c60a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5dc:	f7fe fb80 	bl	800ace0 <HAL_GetTick>
 800c5e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5e2:	e00a      	b.n	800c5fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5e4:	f7fe fb7c 	bl	800ace0 <HAL_GetTick>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d901      	bls.n	800c5fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e162      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5fa:	4b89      	ldr	r3, [pc, #548]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c600:	f003 0302 	and.w	r3, r3, #2
 800c604:	2b00      	cmp	r3, #0
 800c606:	d0ed      	beq.n	800c5e4 <HAL_RCC_OscConfig+0x53c>
 800c608:	e015      	b.n	800c636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c60a:	f7fe fb69 	bl	800ace0 <HAL_GetTick>
 800c60e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c610:	e00a      	b.n	800c628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c612:	f7fe fb65 	bl	800ace0 <HAL_GetTick>
 800c616:	4602      	mov	r2, r0
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c620:	4293      	cmp	r3, r2
 800c622:	d901      	bls.n	800c628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c624:	2303      	movs	r3, #3
 800c626:	e14b      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c628:	4b7d      	ldr	r3, [pc, #500]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1ed      	bne.n	800c612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c636:	7ffb      	ldrb	r3, [r7, #31]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d105      	bne.n	800c648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c63c:	4b78      	ldr	r3, [pc, #480]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c640:	4a77      	ldr	r2, [pc, #476]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0320 	and.w	r3, r3, #32
 800c650:	2b00      	cmp	r3, #0
 800c652:	d03c      	beq.n	800c6ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01c      	beq.n	800c696 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c65c:	4b70      	ldr	r3, [pc, #448]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c65e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c662:	4a6f      	ldr	r2, [pc, #444]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c664:	f043 0301 	orr.w	r3, r3, #1
 800c668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66c:	f7fe fb38 	bl	800ace0 <HAL_GetTick>
 800c670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c672:	e008      	b.n	800c686 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c674:	f7fe fb34 	bl	800ace0 <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d901      	bls.n	800c686 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e11c      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c686:	4b66      	ldr	r3, [pc, #408]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c68c:	f003 0302 	and.w	r3, r3, #2
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0ef      	beq.n	800c674 <HAL_RCC_OscConfig+0x5cc>
 800c694:	e01b      	b.n	800c6ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c696:	4b62      	ldr	r3, [pc, #392]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c69c:	4a60      	ldr	r2, [pc, #384]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c69e:	f023 0301 	bic.w	r3, r3, #1
 800c6a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a6:	f7fe fb1b 	bl	800ace0 <HAL_GetTick>
 800c6aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6ac:	e008      	b.n	800c6c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6ae:	f7fe fb17 	bl	800ace0 <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d901      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e0ff      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6c0:	4b57      	ldr	r3, [pc, #348]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c6c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1ef      	bne.n	800c6ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80f3 	beq.w	800c8be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	f040 80c9 	bne.w	800c874 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c6e2:	4b4f      	ldr	r3, [pc, #316]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f003 0203 	and.w	r2, r3, #3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d12c      	bne.n	800c750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c700:	3b01      	subs	r3, #1
 800c702:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c704:	429a      	cmp	r2, r3
 800c706:	d123      	bne.n	800c750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c712:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c714:	429a      	cmp	r2, r3
 800c716:	d11b      	bne.n	800c750 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c724:	429a      	cmp	r2, r3
 800c726:	d113      	bne.n	800c750 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c732:	085b      	lsrs	r3, r3, #1
 800c734:	3b01      	subs	r3, #1
 800c736:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c738:	429a      	cmp	r2, r3
 800c73a:	d109      	bne.n	800c750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c746:	085b      	lsrs	r3, r3, #1
 800c748:	3b01      	subs	r3, #1
 800c74a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d06b      	beq.n	800c828 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	2b0c      	cmp	r3, #12
 800c754:	d062      	beq.n	800c81c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c756:	4b32      	ldr	r3, [pc, #200]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e0ac      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c766:	4b2e      	ldr	r3, [pc, #184]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a2d      	ldr	r2, [pc, #180]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c76c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c770:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c772:	f7fe fab5 	bl	800ace0 <HAL_GetTick>
 800c776:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c778:	e008      	b.n	800c78c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c77a:	f7fe fab1 	bl	800ace0 <HAL_GetTick>
 800c77e:	4602      	mov	r2, r0
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	2b02      	cmp	r3, #2
 800c786:	d901      	bls.n	800c78c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c788:	2303      	movs	r3, #3
 800c78a:	e099      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c78c:	4b24      	ldr	r3, [pc, #144]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1f0      	bne.n	800c77a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c798:	4b21      	ldr	r3, [pc, #132]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	4b21      	ldr	r3, [pc, #132]	; (800c824 <HAL_RCC_OscConfig+0x77c>)
 800c79e:	4013      	ands	r3, r2
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c7a8:	3a01      	subs	r2, #1
 800c7aa:	0112      	lsls	r2, r2, #4
 800c7ac:	4311      	orrs	r1, r2
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c7b2:	0212      	lsls	r2, r2, #8
 800c7b4:	4311      	orrs	r1, r2
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c7ba:	0852      	lsrs	r2, r2, #1
 800c7bc:	3a01      	subs	r2, #1
 800c7be:	0552      	lsls	r2, r2, #21
 800c7c0:	4311      	orrs	r1, r2
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c7c6:	0852      	lsrs	r2, r2, #1
 800c7c8:	3a01      	subs	r2, #1
 800c7ca:	0652      	lsls	r2, r2, #25
 800c7cc:	4311      	orrs	r1, r2
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c7d2:	06d2      	lsls	r2, r2, #27
 800c7d4:	430a      	orrs	r2, r1
 800c7d6:	4912      	ldr	r1, [pc, #72]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c7dc:	4b10      	ldr	r3, [pc, #64]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a0f      	ldr	r2, [pc, #60]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c7e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	4a0c      	ldr	r2, [pc, #48]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c7ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c7f4:	f7fe fa74 	bl	800ace0 <HAL_GetTick>
 800c7f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7fa:	e008      	b.n	800c80e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7fc:	f7fe fa70 	bl	800ace0 <HAL_GetTick>
 800c800:	4602      	mov	r2, r0
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	2b02      	cmp	r3, #2
 800c808:	d901      	bls.n	800c80e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c80a:	2303      	movs	r3, #3
 800c80c:	e058      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c80e:	4b04      	ldr	r3, [pc, #16]	; (800c820 <HAL_RCC_OscConfig+0x778>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d0f0      	beq.n	800c7fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c81a:	e050      	b.n	800c8be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e04f      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
 800c820:	40021000 	.word	0x40021000
 800c824:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c828:	4b27      	ldr	r3, [pc, #156]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d144      	bne.n	800c8be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c834:	4b24      	ldr	r3, [pc, #144]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a23      	ldr	r2, [pc, #140]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c83a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c83e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c840:	4b21      	ldr	r3, [pc, #132]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	4a20      	ldr	r2, [pc, #128]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c84a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c84c:	f7fe fa48 	bl	800ace0 <HAL_GetTick>
 800c850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c852:	e008      	b.n	800c866 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c854:	f7fe fa44 	bl	800ace0 <HAL_GetTick>
 800c858:	4602      	mov	r2, r0
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d901      	bls.n	800c866 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c862:	2303      	movs	r3, #3
 800c864:	e02c      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c866:	4b18      	ldr	r3, [pc, #96]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0f0      	beq.n	800c854 <HAL_RCC_OscConfig+0x7ac>
 800c872:	e024      	b.n	800c8be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	2b0c      	cmp	r3, #12
 800c878:	d01f      	beq.n	800c8ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c87a:	4b13      	ldr	r3, [pc, #76]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a12      	ldr	r2, [pc, #72]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c886:	f7fe fa2b 	bl	800ace0 <HAL_GetTick>
 800c88a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c88c:	e008      	b.n	800c8a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c88e:	f7fe fa27 	bl	800ace0 <HAL_GetTick>
 800c892:	4602      	mov	r2, r0
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d901      	bls.n	800c8a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	e00f      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8a0:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1f0      	bne.n	800c88e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c8ac:	4b06      	ldr	r3, [pc, #24]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c8ae:	68da      	ldr	r2, [r3, #12]
 800c8b0:	4905      	ldr	r1, [pc, #20]	; (800c8c8 <HAL_RCC_OscConfig+0x820>)
 800c8b2:	4b06      	ldr	r3, [pc, #24]	; (800c8cc <HAL_RCC_OscConfig+0x824>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	60cb      	str	r3, [r1, #12]
 800c8b8:	e001      	b.n	800c8be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e000      	b.n	800c8c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3720      	adds	r7, #32
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	40021000 	.word	0x40021000
 800c8cc:	feeefffc 	.word	0xfeeefffc

0800c8d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e0e7      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c8e4:	4b75      	ldr	r3, [pc, #468]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0307 	and.w	r3, r3, #7
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d910      	bls.n	800c914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8f2:	4b72      	ldr	r3, [pc, #456]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f023 0207 	bic.w	r2, r3, #7
 800c8fa:	4970      	ldr	r1, [pc, #448]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c902:	4b6e      	ldr	r3, [pc, #440]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d001      	beq.n	800c914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e0cf      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0302 	and.w	r3, r3, #2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d010      	beq.n	800c942 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	689a      	ldr	r2, [r3, #8]
 800c924:	4b66      	ldr	r3, [pc, #408]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d908      	bls.n	800c942 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c930:	4b63      	ldr	r3, [pc, #396]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	4960      	ldr	r1, [pc, #384]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d04c      	beq.n	800c9e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	2b03      	cmp	r3, #3
 800c954:	d107      	bne.n	800c966 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c956:	4b5a      	ldr	r3, [pc, #360]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d121      	bne.n	800c9a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	e0a6      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d107      	bne.n	800c97e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c96e:	4b54      	ldr	r3, [pc, #336]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c976:	2b00      	cmp	r3, #0
 800c978:	d115      	bne.n	800c9a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e09a      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d107      	bne.n	800c996 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c986:	4b4e      	ldr	r3, [pc, #312]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f003 0302 	and.w	r3, r3, #2
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d109      	bne.n	800c9a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e08e      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c996:	4b4a      	ldr	r3, [pc, #296]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e086      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c9a6:	4b46      	ldr	r3, [pc, #280]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f023 0203 	bic.w	r2, r3, #3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	4943      	ldr	r1, [pc, #268]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9b8:	f7fe f992 	bl	800ace0 <HAL_GetTick>
 800c9bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9be:	e00a      	b.n	800c9d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9c0:	f7fe f98e 	bl	800ace0 <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d901      	bls.n	800c9d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e06e      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9d6:	4b3a      	ldr	r3, [pc, #232]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f003 020c 	and.w	r2, r3, #12
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d1eb      	bne.n	800c9c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 0302 	and.w	r3, r3, #2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d010      	beq.n	800ca16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	4b31      	ldr	r3, [pc, #196]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d208      	bcs.n	800ca16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca04:	4b2e      	ldr	r3, [pc, #184]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	492b      	ldr	r1, [pc, #172]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca12:	4313      	orrs	r3, r2
 800ca14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ca16:	4b29      	ldr	r3, [pc, #164]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0307 	and.w	r3, r3, #7
 800ca1e:	683a      	ldr	r2, [r7, #0]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d210      	bcs.n	800ca46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca24:	4b25      	ldr	r3, [pc, #148]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f023 0207 	bic.w	r2, r3, #7
 800ca2c:	4923      	ldr	r1, [pc, #140]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca34:	4b21      	ldr	r3, [pc, #132]	; (800cabc <HAL_RCC_ClockConfig+0x1ec>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f003 0307 	and.w	r3, r3, #7
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d001      	beq.n	800ca46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e036      	b.n	800cab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 0304 	and.w	r3, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d008      	beq.n	800ca64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca52:	4b1b      	ldr	r3, [pc, #108]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	4918      	ldr	r1, [pc, #96]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca60:	4313      	orrs	r3, r2
 800ca62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0308 	and.w	r3, r3, #8
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ca70:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	4910      	ldr	r1, [pc, #64]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca80:	4313      	orrs	r3, r2
 800ca82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ca84:	f000 f824 	bl	800cad0 <HAL_RCC_GetSysClockFreq>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <HAL_RCC_ClockConfig+0x1f0>)
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	091b      	lsrs	r3, r3, #4
 800ca90:	f003 030f 	and.w	r3, r3, #15
 800ca94:	490b      	ldr	r1, [pc, #44]	; (800cac4 <HAL_RCC_ClockConfig+0x1f4>)
 800ca96:	5ccb      	ldrb	r3, [r1, r3]
 800ca98:	f003 031f 	and.w	r3, r3, #31
 800ca9c:	fa22 f303 	lsr.w	r3, r2, r3
 800caa0:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <HAL_RCC_ClockConfig+0x1f8>)
 800caa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800caa4:	4b09      	ldr	r3, [pc, #36]	; (800cacc <HAL_RCC_ClockConfig+0x1fc>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe f8c9 	bl	800ac40 <HAL_InitTick>
 800caae:	4603      	mov	r3, r0
 800cab0:	72fb      	strb	r3, [r7, #11]

  return status;
 800cab2:	7afb      	ldrb	r3, [r7, #11]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	40022000 	.word	0x40022000
 800cac0:	40021000 	.word	0x40021000
 800cac4:	08010f70 	.word	0x08010f70
 800cac8:	20000014 	.word	0x20000014
 800cacc:	2000001c 	.word	0x2000001c

0800cad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b089      	sub	sp, #36	; 0x24
 800cad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	2300      	movs	r3, #0
 800cadc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cade:	4b3e      	ldr	r3, [pc, #248]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f003 030c 	and.w	r3, r3, #12
 800cae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cae8:	4b3b      	ldr	r3, [pc, #236]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0303 	and.w	r3, r3, #3
 800caf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d005      	beq.n	800cb04 <HAL_RCC_GetSysClockFreq+0x34>
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b0c      	cmp	r3, #12
 800cafc:	d121      	bne.n	800cb42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d11e      	bne.n	800cb42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800cb04:	4b34      	ldr	r3, [pc, #208]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0308 	and.w	r3, r3, #8
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d107      	bne.n	800cb20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800cb10:	4b31      	ldr	r3, [pc, #196]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	f003 030f 	and.w	r3, r3, #15
 800cb1c:	61fb      	str	r3, [r7, #28]
 800cb1e:	e005      	b.n	800cb2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800cb20:	4b2d      	ldr	r3, [pc, #180]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	091b      	lsrs	r3, r3, #4
 800cb26:	f003 030f 	and.w	r3, r3, #15
 800cb2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800cb2c:	4a2b      	ldr	r2, [pc, #172]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x10c>)
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10d      	bne.n	800cb58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cb40:	e00a      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d102      	bne.n	800cb4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb48:	4b25      	ldr	r3, [pc, #148]	; (800cbe0 <HAL_RCC_GetSysClockFreq+0x110>)
 800cb4a:	61bb      	str	r3, [r7, #24]
 800cb4c:	e004      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d101      	bne.n	800cb58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cb54:	4b23      	ldr	r3, [pc, #140]	; (800cbe4 <HAL_RCC_GetSysClockFreq+0x114>)
 800cb56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	2b0c      	cmp	r3, #12
 800cb5c:	d134      	bne.n	800cbc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cb5e:	4b1e      	ldr	r3, [pc, #120]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	f003 0303 	and.w	r3, r3, #3
 800cb66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d003      	beq.n	800cb76 <HAL_RCC_GetSysClockFreq+0xa6>
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d003      	beq.n	800cb7c <HAL_RCC_GetSysClockFreq+0xac>
 800cb74:	e005      	b.n	800cb82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800cb76:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <HAL_RCC_GetSysClockFreq+0x110>)
 800cb78:	617b      	str	r3, [r7, #20]
      break;
 800cb7a:	e005      	b.n	800cb88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800cb7c:	4b19      	ldr	r3, [pc, #100]	; (800cbe4 <HAL_RCC_GetSysClockFreq+0x114>)
 800cb7e:	617b      	str	r3, [r7, #20]
      break;
 800cb80:	e002      	b.n	800cb88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	617b      	str	r3, [r7, #20]
      break;
 800cb86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cb88:	4b13      	ldr	r3, [pc, #76]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	091b      	lsrs	r3, r3, #4
 800cb8e:	f003 0307 	and.w	r3, r3, #7
 800cb92:	3301      	adds	r3, #1
 800cb94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800cb96:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	0a1b      	lsrs	r3, r3, #8
 800cb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	fb03 f202 	mul.w	r2, r3, r2
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cbae:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	0e5b      	lsrs	r3, r3, #25
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	3301      	adds	r3, #1
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cbc8:	69bb      	ldr	r3, [r7, #24]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3724      	adds	r7, #36	; 0x24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	40021000 	.word	0x40021000
 800cbdc:	08010f88 	.word	0x08010f88
 800cbe0:	00f42400 	.word	0x00f42400
 800cbe4:	007a1200 	.word	0x007a1200

0800cbe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cbec:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <HAL_RCC_GetHCLKFreq+0x14>)
 800cbee:	681b      	ldr	r3, [r3, #0]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20000014 	.word	0x20000014

0800cc00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cc04:	f7ff fff0 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	0a1b      	lsrs	r3, r3, #8
 800cc10:	f003 0307 	and.w	r3, r3, #7
 800cc14:	4904      	ldr	r1, [pc, #16]	; (800cc28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc16:	5ccb      	ldrb	r3, [r1, r3]
 800cc18:	f003 031f 	and.w	r3, r3, #31
 800cc1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	40021000 	.word	0x40021000
 800cc28:	08010f80 	.word	0x08010f80

0800cc2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cc30:	f7ff ffda 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc34:	4602      	mov	r2, r0
 800cc36:	4b06      	ldr	r3, [pc, #24]	; (800cc50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	0adb      	lsrs	r3, r3, #11
 800cc3c:	f003 0307 	and.w	r3, r3, #7
 800cc40:	4904      	ldr	r1, [pc, #16]	; (800cc54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc42:	5ccb      	ldrb	r3, [r1, r3]
 800cc44:	f003 031f 	and.w	r3, r3, #31
 800cc48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	40021000 	.word	0x40021000
 800cc54:	08010f80 	.word	0x08010f80

0800cc58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cc60:	2300      	movs	r3, #0
 800cc62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cc64:	4b2a      	ldr	r3, [pc, #168]	; (800cd10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cc70:	f7ff f9b6 	bl	800bfe0 <HAL_PWREx_GetVoltageRange>
 800cc74:	6178      	str	r0, [r7, #20]
 800cc76:	e014      	b.n	800cca2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc78:	4b25      	ldr	r3, [pc, #148]	; (800cd10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc7c:	4a24      	ldr	r2, [pc, #144]	; (800cd10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc82:	6593      	str	r3, [r2, #88]	; 0x58
 800cc84:	4b22      	ldr	r3, [pc, #136]	; (800cd10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc8c:	60fb      	str	r3, [r7, #12]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cc90:	f7ff f9a6 	bl	800bfe0 <HAL_PWREx_GetVoltageRange>
 800cc94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cc96:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc9a:	4a1d      	ldr	r2, [pc, #116]	; (800cd10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cca0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cca8:	d10b      	bne.n	800ccc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b80      	cmp	r3, #128	; 0x80
 800ccae:	d919      	bls.n	800cce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2ba0      	cmp	r3, #160	; 0xa0
 800ccb4:	d902      	bls.n	800ccbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	613b      	str	r3, [r7, #16]
 800ccba:	e013      	b.n	800cce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	613b      	str	r3, [r7, #16]
 800ccc0:	e010      	b.n	800cce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b80      	cmp	r3, #128	; 0x80
 800ccc6:	d902      	bls.n	800ccce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ccc8:	2303      	movs	r3, #3
 800ccca:	613b      	str	r3, [r7, #16]
 800cccc:	e00a      	b.n	800cce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b80      	cmp	r3, #128	; 0x80
 800ccd2:	d102      	bne.n	800ccda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	613b      	str	r3, [r7, #16]
 800ccd8:	e004      	b.n	800cce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b70      	cmp	r3, #112	; 0x70
 800ccde:	d101      	bne.n	800cce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cce0:	2301      	movs	r3, #1
 800cce2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cce4:	4b0b      	ldr	r3, [pc, #44]	; (800cd14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f023 0207 	bic.w	r2, r3, #7
 800ccec:	4909      	ldr	r1, [pc, #36]	; (800cd14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ccf4:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0307 	and.w	r3, r3, #7
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d001      	beq.n	800cd06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	40021000 	.word	0x40021000
 800cd14:	40022000 	.word	0x40022000

0800cd18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd20:	2300      	movs	r3, #0
 800cd22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd24:	2300      	movs	r3, #0
 800cd26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d031      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cd3c:	d01a      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800cd3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cd42:	d814      	bhi.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d009      	beq.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cd48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd4c:	d10f      	bne.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800cd4e:	4b5d      	ldr	r3, [pc, #372]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	4a5c      	ldr	r2, [pc, #368]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cd54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cd5a:	e00c      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	2100      	movs	r1, #0
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 fa22 	bl	800d1ac <RCCEx_PLLSAI1_Config>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cd6c:	e003      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	74fb      	strb	r3, [r7, #19]
      break;
 800cd72:	e000      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800cd74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd76:	7cfb      	ldrb	r3, [r7, #19]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10b      	bne.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd7c:	4b51      	ldr	r3, [pc, #324]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cd7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8a:	494e      	ldr	r1, [pc, #312]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cd92:	e001      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd94:	7cfb      	ldrb	r3, [r7, #19]
 800cd96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 809e 	beq.w	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cda6:	2300      	movs	r3, #0
 800cda8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cdaa:	4b46      	ldr	r3, [pc, #280]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00d      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cdc0:	4b40      	ldr	r3, [pc, #256]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdc4:	4a3f      	ldr	r2, [pc, #252]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdca:	6593      	str	r3, [r2, #88]	; 0x58
 800cdcc:	4b3d      	ldr	r3, [pc, #244]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdd4:	60bb      	str	r3, [r7, #8]
 800cdd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cddc:	4b3a      	ldr	r3, [pc, #232]	; (800cec8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a39      	ldr	r2, [pc, #228]	; (800cec8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800cde2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cde6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cde8:	f7fd ff7a 	bl	800ace0 <HAL_GetTick>
 800cdec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cdee:	e009      	b.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdf0:	f7fd ff76 	bl	800ace0 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d902      	bls.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	74fb      	strb	r3, [r7, #19]
        break;
 800ce02:	e005      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ce04:	4b30      	ldr	r3, [pc, #192]	; (800cec8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0ef      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800ce10:	7cfb      	ldrb	r3, [r7, #19]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d15a      	bne.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ce16:	4b2b      	ldr	r3, [pc, #172]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d01e      	beq.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d019      	beq.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ce32:	4b24      	ldr	r3, [pc, #144]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ce3e:	4b21      	ldr	r3, [pc, #132]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce44:	4a1f      	ldr	r2, [pc, #124]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce4e:	4b1d      	ldr	r3, [pc, #116]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce54:	4a1b      	ldr	r2, [pc, #108]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ce5e:	4a19      	ldr	r2, [pc, #100]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d016      	beq.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce70:	f7fd ff36 	bl	800ace0 <HAL_GetTick>
 800ce74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce76:	e00b      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce78:	f7fd ff32 	bl	800ace0 <HAL_GetTick>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d902      	bls.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	74fb      	strb	r3, [r7, #19]
            break;
 800ce8e:	e006      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce90:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d0ec      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800ce9e:	7cfb      	ldrb	r3, [r7, #19]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10b      	bne.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cea4:	4b07      	ldr	r3, [pc, #28]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceb2:	4904      	ldr	r1, [pc, #16]	; (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ceba:	e009      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cebc:	7cfb      	ldrb	r3, [r7, #19]
 800cebe:	74bb      	strb	r3, [r7, #18]
 800cec0:	e006      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800cec2:	bf00      	nop
 800cec4:	40021000 	.word	0x40021000
 800cec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cecc:	7cfb      	ldrb	r3, [r7, #19]
 800cece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ced0:	7c7b      	ldrb	r3, [r7, #17]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d105      	bne.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ced6:	4b8d      	ldr	r3, [pc, #564]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ced8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceda:	4a8c      	ldr	r2, [pc, #560]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cedc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00a      	beq.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ceee:	4b87      	ldr	r3, [pc, #540]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef4:	f023 0203 	bic.w	r2, r3, #3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	4983      	ldr	r1, [pc, #524]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cefe:	4313      	orrs	r3, r2
 800cf00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00a      	beq.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cf10:	4b7e      	ldr	r3, [pc, #504]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf16:	f023 020c 	bic.w	r2, r3, #12
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1e:	497b      	ldr	r1, [pc, #492]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 0304 	and.w	r3, r3, #4
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00a      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cf32:	4b76      	ldr	r3, [pc, #472]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf40:	4972      	ldr	r1, [pc, #456]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf42:	4313      	orrs	r3, r2
 800cf44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 0320 	and.w	r3, r3, #32
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00a      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf54:	4b6d      	ldr	r3, [pc, #436]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	496a      	ldr	r1, [pc, #424]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf64:	4313      	orrs	r3, r2
 800cf66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf76:	4b65      	ldr	r3, [pc, #404]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf84:	4961      	ldr	r1, [pc, #388]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf86:	4313      	orrs	r3, r2
 800cf88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00a      	beq.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf98:	4b5c      	ldr	r3, [pc, #368]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cf9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa6:	4959      	ldr	r1, [pc, #356]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d00a      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfba:	4b54      	ldr	r3, [pc, #336]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cfbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc8:	4950      	ldr	r1, [pc, #320]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfdc:	4b4b      	ldr	r3, [pc, #300]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfea:	4948      	ldr	r1, [pc, #288]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800cfec:	4313      	orrs	r3, r2
 800cfee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00a      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cffe:	4b43      	ldr	r3, [pc, #268]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00c:	493f      	ldr	r1, [pc, #252]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d028      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d020:	4b3a      	ldr	r3, [pc, #232]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d02e:	4937      	ldr	r1, [pc, #220]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d030:	4313      	orrs	r3, r2
 800d032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d03a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d03e:	d106      	bne.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d040:	4b32      	ldr	r3, [pc, #200]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	4a31      	ldr	r2, [pc, #196]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d04a:	60d3      	str	r3, [r2, #12]
 800d04c:	e011      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d056:	d10c      	bne.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	3304      	adds	r3, #4
 800d05c:	2101      	movs	r1, #1
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 f8a4 	bl	800d1ac <RCCEx_PLLSAI1_Config>
 800d064:	4603      	mov	r3, r0
 800d066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d068:	7cfb      	ldrb	r3, [r7, #19]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800d06e:	7cfb      	ldrb	r3, [r7, #19]
 800d070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d028      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d07e:	4b23      	ldr	r3, [pc, #140]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d08c:	491f      	ldr	r1, [pc, #124]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d09c:	d106      	bne.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d09e:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	4a1a      	ldr	r2, [pc, #104]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d0a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0a8:	60d3      	str	r3, [r2, #12]
 800d0aa:	e011      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0b4:	d10c      	bne.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 f875 	bl	800d1ac <RCCEx_PLLSAI1_Config>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0c6:	7cfb      	ldrb	r3, [r7, #19]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800d0cc:	7cfb      	ldrb	r3, [r7, #19]
 800d0ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d02b      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0dc:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ea:	4908      	ldr	r1, [pc, #32]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0fa:	d109      	bne.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0fc:	4b03      	ldr	r3, [pc, #12]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	4a02      	ldr	r2, [pc, #8]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800d102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d106:	60d3      	str	r3, [r2, #12]
 800d108:	e014      	b.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800d10a:	bf00      	nop
 800d10c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d118:	d10c      	bne.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3304      	adds	r3, #4
 800d11e:	2101      	movs	r1, #1
 800d120:	4618      	mov	r0, r3
 800d122:	f000 f843 	bl	800d1ac <RCCEx_PLLSAI1_Config>
 800d126:	4603      	mov	r3, r0
 800d128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d12a:	7cfb      	ldrb	r3, [r7, #19]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800d130:	7cfb      	ldrb	r3, [r7, #19]
 800d132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01c      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d140:	4b19      	ldr	r3, [pc, #100]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14e:	4916      	ldr	r1, [pc, #88]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d150:	4313      	orrs	r3, r2
 800d152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d15a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d15e:	d10c      	bne.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	3304      	adds	r3, #4
 800d164:	2102      	movs	r1, #2
 800d166:	4618      	mov	r0, r3
 800d168:	f000 f820 	bl	800d1ac <RCCEx_PLLSAI1_Config>
 800d16c:	4603      	mov	r3, r0
 800d16e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d170:	7cfb      	ldrb	r3, [r7, #19]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800d176:	7cfb      	ldrb	r3, [r7, #19]
 800d178:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d186:	4b08      	ldr	r3, [pc, #32]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d18c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d194:	4904      	ldr	r1, [pc, #16]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d196:	4313      	orrs	r3, r2
 800d198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d19c:	7cbb      	ldrb	r3, [r7, #18]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40021000 	.word	0x40021000

0800d1ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d1ba:	4b74      	ldr	r3, [pc, #464]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	f003 0303 	and.w	r3, r3, #3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d018      	beq.n	800d1f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d1c6:	4b71      	ldr	r3, [pc, #452]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	f003 0203 	and.w	r2, r3, #3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d10d      	bne.n	800d1f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
       ||
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d1de:	4b6b      	ldr	r3, [pc, #428]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	091b      	lsrs	r3, r3, #4
 800d1e4:	f003 0307 	and.w	r3, r3, #7
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	685b      	ldr	r3, [r3, #4]
       ||
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d047      	beq.n	800d282 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	73fb      	strb	r3, [r7, #15]
 800d1f6:	e044      	b.n	800d282 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d018      	beq.n	800d232 <RCCEx_PLLSAI1_Config+0x86>
 800d200:	2b03      	cmp	r3, #3
 800d202:	d825      	bhi.n	800d250 <RCCEx_PLLSAI1_Config+0xa4>
 800d204:	2b01      	cmp	r3, #1
 800d206:	d002      	beq.n	800d20e <RCCEx_PLLSAI1_Config+0x62>
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d009      	beq.n	800d220 <RCCEx_PLLSAI1_Config+0x74>
 800d20c:	e020      	b.n	800d250 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d20e:	4b5f      	ldr	r3, [pc, #380]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d11d      	bne.n	800d256 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d21e:	e01a      	b.n	800d256 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d220:	4b5a      	ldr	r3, [pc, #360]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d116      	bne.n	800d25a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d230:	e013      	b.n	800d25a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d232:	4b56      	ldr	r3, [pc, #344]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10f      	bne.n	800d25e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d23e:	4b53      	ldr	r3, [pc, #332]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d246:	2b00      	cmp	r3, #0
 800d248:	d109      	bne.n	800d25e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d24e:	e006      	b.n	800d25e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	73fb      	strb	r3, [r7, #15]
      break;
 800d254:	e004      	b.n	800d260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d256:	bf00      	nop
 800d258:	e002      	b.n	800d260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d25a:	bf00      	nop
 800d25c:	e000      	b.n	800d260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d25e:	bf00      	nop
    }

    if(status == HAL_OK)
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10d      	bne.n	800d282 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d266:	4b49      	ldr	r3, [pc, #292]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6819      	ldr	r1, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	3b01      	subs	r3, #1
 800d278:	011b      	lsls	r3, r3, #4
 800d27a:	430b      	orrs	r3, r1
 800d27c:	4943      	ldr	r1, [pc, #268]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d27e:	4313      	orrs	r3, r2
 800d280:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d17c      	bne.n	800d382 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d288:	4b40      	ldr	r3, [pc, #256]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a3f      	ldr	r2, [pc, #252]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d28e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d294:	f7fd fd24 	bl	800ace0 <HAL_GetTick>
 800d298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d29a:	e009      	b.n	800d2b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d29c:	f7fd fd20 	bl	800ace0 <HAL_GetTick>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d902      	bls.n	800d2b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	73fb      	strb	r3, [r7, #15]
        break;
 800d2ae:	e005      	b.n	800d2bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d2b0:	4b36      	ldr	r3, [pc, #216]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1ef      	bne.n	800d29c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d15f      	bne.n	800d382 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d110      	bne.n	800d2ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2c8:	4b30      	ldr	r3, [pc, #192]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d2d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	6892      	ldr	r2, [r2, #8]
 800d2d8:	0211      	lsls	r1, r2, #8
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	68d2      	ldr	r2, [r2, #12]
 800d2de:	06d2      	lsls	r2, r2, #27
 800d2e0:	430a      	orrs	r2, r1
 800d2e2:	492a      	ldr	r1, [pc, #168]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	610b      	str	r3, [r1, #16]
 800d2e8:	e027      	b.n	800d33a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d112      	bne.n	800d316 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2f0:	4b26      	ldr	r3, [pc, #152]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d2f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	6892      	ldr	r2, [r2, #8]
 800d300:	0211      	lsls	r1, r2, #8
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	6912      	ldr	r2, [r2, #16]
 800d306:	0852      	lsrs	r2, r2, #1
 800d308:	3a01      	subs	r2, #1
 800d30a:	0552      	lsls	r2, r2, #21
 800d30c:	430a      	orrs	r2, r1
 800d30e:	491f      	ldr	r1, [pc, #124]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d310:	4313      	orrs	r3, r2
 800d312:	610b      	str	r3, [r1, #16]
 800d314:	e011      	b.n	800d33a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d316:	4b1d      	ldr	r3, [pc, #116]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d31e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	6892      	ldr	r2, [r2, #8]
 800d326:	0211      	lsls	r1, r2, #8
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6952      	ldr	r2, [r2, #20]
 800d32c:	0852      	lsrs	r2, r2, #1
 800d32e:	3a01      	subs	r2, #1
 800d330:	0652      	lsls	r2, r2, #25
 800d332:	430a      	orrs	r2, r1
 800d334:	4915      	ldr	r1, [pc, #84]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d336:	4313      	orrs	r3, r2
 800d338:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d33a:	4b14      	ldr	r3, [pc, #80]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a13      	ldr	r2, [pc, #76]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d344:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d346:	f7fd fccb 	bl	800ace0 <HAL_GetTick>
 800d34a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d34c:	e009      	b.n	800d362 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d34e:	f7fd fcc7 	bl	800ace0 <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d902      	bls.n	800d362 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d35c:	2303      	movs	r3, #3
 800d35e:	73fb      	strb	r3, [r7, #15]
          break;
 800d360:	e005      	b.n	800d36e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d362:	4b0a      	ldr	r3, [pc, #40]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d0ef      	beq.n	800d34e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d106      	bne.n	800d382 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d374:	4b05      	ldr	r3, [pc, #20]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d376:	691a      	ldr	r2, [r3, #16]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	4903      	ldr	r1, [pc, #12]	; (800d38c <RCCEx_PLLSAI1_Config+0x1e0>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d382:	7bfb      	ldrb	r3, [r7, #15]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	40021000 	.word	0x40021000

0800d390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e095      	b.n	800d4ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d108      	bne.n	800d3bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3b2:	d009      	beq.n	800d3c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	61da      	str	r2, [r3, #28]
 800d3ba:	e005      	b.n	800d3c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7f5 fbb6 	bl	8002b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d408:	d902      	bls.n	800d410 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	e002      	b.n	800d416 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d414:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d41e:	d007      	beq.n	800d430 <HAL_SPI_Init+0xa0>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d428:	d002      	beq.n	800d430 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d440:	431a      	orrs	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	431a      	orrs	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	431a      	orrs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d45e:	431a      	orrs	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	69db      	ldr	r3, [r3, #28]
 800d464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d472:	ea42 0103 	orr.w	r1, r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	430a      	orrs	r2, r1
 800d484:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	f003 0204 	and.w	r2, r3, #4
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d494:	f003 0310 	and.w	r3, r3, #16
 800d498:	431a      	orrs	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49e:	f003 0308 	and.w	r3, r3, #8
 800d4a2:	431a      	orrs	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d4ac:	ea42 0103 	orr.w	r1, r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b088      	sub	sp, #32
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	603b      	str	r3, [r7, #0]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d101      	bne.n	800d4f8 <HAL_SPI_Transmit+0x22>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e158      	b.n	800d7aa <HAL_SPI_Transmit+0x2d4>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d500:	f7fd fbee 	bl	800ace0 <HAL_GetTick>
 800d504:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d506:	88fb      	ldrh	r3, [r7, #6]
 800d508:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b01      	cmp	r3, #1
 800d514:	d002      	beq.n	800d51c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d516:	2302      	movs	r3, #2
 800d518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d51a:	e13d      	b.n	800d798 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <HAL_SPI_Transmit+0x52>
 800d522:	88fb      	ldrh	r3, [r7, #6]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d102      	bne.n	800d52e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d528:	2301      	movs	r3, #1
 800d52a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d52c:	e134      	b.n	800d798 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2203      	movs	r2, #3
 800d532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	88fa      	ldrh	r2, [r7, #6]
 800d546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	88fa      	ldrh	r2, [r7, #6]
 800d54c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d578:	d10f      	bne.n	800d59a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d598:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a4:	2b40      	cmp	r3, #64	; 0x40
 800d5a6:	d007      	beq.n	800d5b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d5c0:	d94b      	bls.n	800d65a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <HAL_SPI_Transmit+0xfa>
 800d5ca:	8afb      	ldrh	r3, [r7, #22]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d13e      	bne.n	800d64e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	881a      	ldrh	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e0:	1c9a      	adds	r2, r3, #2
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d5f4:	e02b      	b.n	800d64e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	f003 0302 	and.w	r3, r3, #2
 800d600:	2b02      	cmp	r3, #2
 800d602:	d112      	bne.n	800d62a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d608:	881a      	ldrh	r2, [r3, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d614:	1c9a      	adds	r2, r3, #2
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d61e:	b29b      	uxth	r3, r3
 800d620:	3b01      	subs	r3, #1
 800d622:	b29a      	uxth	r2, r3
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d628:	e011      	b.n	800d64e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d62a:	f7fd fb59 	bl	800ace0 <HAL_GetTick>
 800d62e:	4602      	mov	r2, r0
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d803      	bhi.n	800d642 <HAL_SPI_Transmit+0x16c>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d640:	d102      	bne.n	800d648 <HAL_SPI_Transmit+0x172>
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d648:	2303      	movs	r3, #3
 800d64a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d64c:	e0a4      	b.n	800d798 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d652:	b29b      	uxth	r3, r3
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1ce      	bne.n	800d5f6 <HAL_SPI_Transmit+0x120>
 800d658:	e07c      	b.n	800d754 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d002      	beq.n	800d668 <HAL_SPI_Transmit+0x192>
 800d662:	8afb      	ldrh	r3, [r7, #22]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d170      	bne.n	800d74a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d912      	bls.n	800d698 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d676:	881a      	ldrh	r2, [r3, #0]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d682:	1c9a      	adds	r2, r3, #2
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	3b02      	subs	r3, #2
 800d690:	b29a      	uxth	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d696:	e058      	b.n	800d74a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	330c      	adds	r3, #12
 800d6a2:	7812      	ldrb	r2, [r2, #0]
 800d6a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d6be:	e044      	b.n	800d74a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d12b      	bne.n	800d726 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d912      	bls.n	800d6fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6dc:	881a      	ldrh	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e8:	1c9a      	adds	r2, r3, #2
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3b02      	subs	r3, #2
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d6fc:	e025      	b.n	800d74a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	330c      	adds	r3, #12
 800d708:	7812      	ldrb	r2, [r2, #0]
 800d70a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d710:	1c5a      	adds	r2, r3, #1
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	3b01      	subs	r3, #1
 800d71e:	b29a      	uxth	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d724:	e011      	b.n	800d74a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d726:	f7fd fadb 	bl	800ace0 <HAL_GetTick>
 800d72a:	4602      	mov	r2, r0
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	683a      	ldr	r2, [r7, #0]
 800d732:	429a      	cmp	r2, r3
 800d734:	d803      	bhi.n	800d73e <HAL_SPI_Transmit+0x268>
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d102      	bne.n	800d744 <HAL_SPI_Transmit+0x26e>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d102      	bne.n	800d74a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d748:	e026      	b.n	800d798 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d74e:	b29b      	uxth	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1b5      	bne.n	800d6c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f000 fce3 	bl	800e124 <SPI_EndRxTxTransaction>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2220      	movs	r2, #32
 800d768:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10a      	bne.n	800d788 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d772:	2300      	movs	r3, #0
 800d774:	613b      	str	r3, [r7, #16]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	613b      	str	r3, [r7, #16]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	613b      	str	r3, [r7, #16]
 800d786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	77fb      	strb	r3, [r7, #31]
 800d794:	e000      	b.n	800d798 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800d796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d7a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b088      	sub	sp, #32
 800d7b6:	af02      	add	r7, sp, #8
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	60b9      	str	r1, [r7, #8]
 800d7bc:	603b      	str	r3, [r7, #0]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7ce:	d112      	bne.n	800d7f6 <HAL_SPI_Receive+0x44>
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10e      	bne.n	800d7f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2204      	movs	r2, #4
 800d7dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f000 f910 	bl	800da12 <HAL_SPI_TransmitReceive>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	e109      	b.n	800da0a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d101      	bne.n	800d804 <HAL_SPI_Receive+0x52>
 800d800:	2302      	movs	r3, #2
 800d802:	e102      	b.n	800da0a <HAL_SPI_Receive+0x258>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d80c:	f7fd fa68 	bl	800ace0 <HAL_GetTick>
 800d810:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d002      	beq.n	800d824 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d81e:	2302      	movs	r3, #2
 800d820:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d822:	e0e9      	b.n	800d9f8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <HAL_SPI_Receive+0x7e>
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d834:	e0e0      	b.n	800d9f8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2204      	movs	r2, #4
 800d83a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2200      	movs	r2, #0
 800d842:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	88fa      	ldrh	r2, [r7, #6]
 800d84e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	88fa      	ldrh	r2, [r7, #6]
 800d856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2200      	movs	r2, #0
 800d85e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d880:	d908      	bls.n	800d894 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d890:	605a      	str	r2, [r3, #4]
 800d892:	e007      	b.n	800d8a4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	685a      	ldr	r2, [r3, #4]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d8a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8ac:	d10f      	bne.n	800d8ce <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d8cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d8:	2b40      	cmp	r3, #64	; 0x40
 800d8da:	d007      	beq.n	800d8ec <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8f4:	d867      	bhi.n	800d9c6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d8f6:	e030      	b.n	800d95a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b01      	cmp	r3, #1
 800d904:	d117      	bne.n	800d936 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f103 020c 	add.w	r2, r3, #12
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d912:	7812      	ldrb	r2, [r2, #0]
 800d914:	b2d2      	uxtb	r2, r2
 800d916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91c:	1c5a      	adds	r2, r3, #1
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d928:	b29b      	uxth	r3, r3
 800d92a:	3b01      	subs	r3, #1
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d934:	e011      	b.n	800d95a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d936:	f7fd f9d3 	bl	800ace0 <HAL_GetTick>
 800d93a:	4602      	mov	r2, r0
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	683a      	ldr	r2, [r7, #0]
 800d942:	429a      	cmp	r2, r3
 800d944:	d803      	bhi.n	800d94e <HAL_SPI_Receive+0x19c>
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94c:	d102      	bne.n	800d954 <HAL_SPI_Receive+0x1a2>
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d102      	bne.n	800d95a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800d954:	2303      	movs	r3, #3
 800d956:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d958:	e04e      	b.n	800d9f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d960:	b29b      	uxth	r3, r3
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1c8      	bne.n	800d8f8 <HAL_SPI_Receive+0x146>
 800d966:	e034      	b.n	800d9d2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	f003 0301 	and.w	r3, r3, #1
 800d972:	2b01      	cmp	r3, #1
 800d974:	d115      	bne.n	800d9a2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68da      	ldr	r2, [r3, #12]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d980:	b292      	uxth	r2, r2
 800d982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d988:	1c9a      	adds	r2, r3, #2
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d994:	b29b      	uxth	r3, r3
 800d996:	3b01      	subs	r3, #1
 800d998:	b29a      	uxth	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d9a0:	e011      	b.n	800d9c6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9a2:	f7fd f99d 	bl	800ace0 <HAL_GetTick>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	1ad3      	subs	r3, r2, r3
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d803      	bhi.n	800d9ba <HAL_SPI_Receive+0x208>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b8:	d102      	bne.n	800d9c0 <HAL_SPI_Receive+0x20e>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d102      	bne.n	800d9c6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d9c4:	e018      	b.n	800d9f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1ca      	bne.n	800d968 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f000 fb4c 	bl	800e074 <SPI_EndRxTransaction>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2220      	movs	r2, #32
 800d9e6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	75fb      	strb	r3, [r7, #23]
 800d9f4:	e000      	b.n	800d9f8 <HAL_SPI_Receive+0x246>
  }

error :
 800d9f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800da08:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b08a      	sub	sp, #40	; 0x28
 800da16:	af00      	add	r7, sp, #0
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	607a      	str	r2, [r7, #4]
 800da1e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800da20:	2301      	movs	r3, #1
 800da22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800da30:	2b01      	cmp	r3, #1
 800da32:	d101      	bne.n	800da38 <HAL_SPI_TransmitReceive+0x26>
 800da34:	2302      	movs	r3, #2
 800da36:	e1fb      	b.n	800de30 <HAL_SPI_TransmitReceive+0x41e>
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da40:	f7fd f94e 	bl	800ace0 <HAL_GetTick>
 800da44:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da4c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800da54:	887b      	ldrh	r3, [r7, #2]
 800da56:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800da58:	887b      	ldrh	r3, [r7, #2]
 800da5a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800da5c:	7efb      	ldrb	r3, [r7, #27]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d00e      	beq.n	800da80 <HAL_SPI_TransmitReceive+0x6e>
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da68:	d106      	bne.n	800da78 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d102      	bne.n	800da78 <HAL_SPI_TransmitReceive+0x66>
 800da72:	7efb      	ldrb	r3, [r7, #27]
 800da74:	2b04      	cmp	r3, #4
 800da76:	d003      	beq.n	800da80 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800da78:	2302      	movs	r3, #2
 800da7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800da7e:	e1cd      	b.n	800de1c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d005      	beq.n	800da92 <HAL_SPI_TransmitReceive+0x80>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <HAL_SPI_TransmitReceive+0x80>
 800da8c:	887b      	ldrh	r3, [r7, #2]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d103      	bne.n	800da9a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800da98:	e1c0      	b.n	800de1c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b04      	cmp	r3, #4
 800daa4:	d003      	beq.n	800daae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2205      	movs	r2, #5
 800daaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	887a      	ldrh	r2, [r7, #2]
 800dabe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	887a      	ldrh	r2, [r7, #2]
 800dac6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	887a      	ldrh	r2, [r7, #2]
 800dad4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	887a      	ldrh	r2, [r7, #2]
 800dada:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800daf0:	d802      	bhi.n	800daf8 <HAL_SPI_TransmitReceive+0xe6>
 800daf2:	8a3b      	ldrh	r3, [r7, #16]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d908      	bls.n	800db0a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800db06:	605a      	str	r2, [r3, #4]
 800db08:	e007      	b.n	800db1a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db18:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db24:	2b40      	cmp	r3, #64	; 0x40
 800db26:	d007      	beq.n	800db38 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db40:	d97c      	bls.n	800dc3c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d002      	beq.n	800db50 <HAL_SPI_TransmitReceive+0x13e>
 800db4a:	8a7b      	ldrh	r3, [r7, #18]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d169      	bne.n	800dc24 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db54:	881a      	ldrh	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	1c9a      	adds	r2, r3, #2
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	3b01      	subs	r3, #1
 800db6e:	b29a      	uxth	r2, r3
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db74:	e056      	b.n	800dc24 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f003 0302 	and.w	r3, r3, #2
 800db80:	2b02      	cmp	r3, #2
 800db82:	d11b      	bne.n	800dbbc <HAL_SPI_TransmitReceive+0x1aa>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db88:	b29b      	uxth	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d016      	beq.n	800dbbc <HAL_SPI_TransmitReceive+0x1aa>
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	2b01      	cmp	r3, #1
 800db92:	d113      	bne.n	800dbbc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	881a      	ldrh	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba4:	1c9a      	adds	r2, r3, #2
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d11c      	bne.n	800dc04 <HAL_SPI_TransmitReceive+0x1f2>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d016      	beq.n	800dc04 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68da      	ldr	r2, [r3, #12]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe0:	b292      	uxth	r2, r2
 800dbe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe8:	1c9a      	adds	r2, r3, #2
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc00:	2301      	movs	r3, #1
 800dc02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dc04:	f7fd f86c 	bl	800ace0 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d807      	bhi.n	800dc24 <HAL_SPI_TransmitReceive+0x212>
 800dc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1a:	d003      	beq.n	800dc24 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dc22:	e0fb      	b.n	800de1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1a3      	bne.n	800db76 <HAL_SPI_TransmitReceive+0x164>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d19d      	bne.n	800db76 <HAL_SPI_TransmitReceive+0x164>
 800dc3a:	e0df      	b.n	800ddfc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d003      	beq.n	800dc4c <HAL_SPI_TransmitReceive+0x23a>
 800dc44:	8a7b      	ldrh	r3, [r7, #18]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	f040 80cb 	bne.w	800dde2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d912      	bls.n	800dc7c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5a:	881a      	ldrh	r2, [r3, #0]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc66:	1c9a      	adds	r2, r3, #2
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	3b02      	subs	r3, #2
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc7a:	e0b2      	b.n	800dde2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	330c      	adds	r3, #12
 800dc86:	7812      	ldrb	r2, [r2, #0]
 800dc88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dca2:	e09e      	b.n	800dde2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	f003 0302 	and.w	r3, r3, #2
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	d134      	bne.n	800dd1c <HAL_SPI_TransmitReceive+0x30a>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d02f      	beq.n	800dd1c <HAL_SPI_TransmitReceive+0x30a>
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d12c      	bne.n	800dd1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d912      	bls.n	800dcf2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd0:	881a      	ldrh	r2, [r3, #0]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcdc:	1c9a      	adds	r2, r3, #2
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	3b02      	subs	r3, #2
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dcf0:	e012      	b.n	800dd18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	330c      	adds	r3, #12
 800dcfc:	7812      	ldrb	r2, [r2, #0]
 800dcfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd04:	1c5a      	adds	r2, r3, #1
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	3b01      	subs	r3, #1
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d148      	bne.n	800ddbc <HAL_SPI_TransmitReceive+0x3aa>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d042      	beq.n	800ddbc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d923      	bls.n	800dd8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68da      	ldr	r2, [r3, #12]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4c:	b292      	uxth	r2, r2
 800dd4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd54:	1c9a      	adds	r2, r3, #2
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	3b02      	subs	r3, #2
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d81f      	bhi.n	800ddb8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	685a      	ldr	r2, [r3, #4]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd86:	605a      	str	r2, [r3, #4]
 800dd88:	e016      	b.n	800ddb8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f103 020c 	add.w	r2, r3, #12
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd96:	7812      	ldrb	r2, [r2, #0]
 800dd98:	b2d2      	uxtb	r2, r2
 800dd9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ddbc:	f7fc ff90 	bl	800ace0 <HAL_GetTick>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d803      	bhi.n	800ddd4 <HAL_SPI_TransmitReceive+0x3c2>
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd2:	d102      	bne.n	800ddda <HAL_SPI_TransmitReceive+0x3c8>
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d103      	bne.n	800dde2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ddda:	2303      	movs	r3, #3
 800dddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dde0:	e01c      	b.n	800de1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f47f af5b 	bne.w	800dca4 <HAL_SPI_TransmitReceive+0x292>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f47f af54 	bne.w	800dca4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ddfc:	69fa      	ldr	r2, [r7, #28]
 800ddfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f000 f98f 	bl	800e124 <SPI_EndRxTxTransaction>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d006      	beq.n	800de1a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2220      	movs	r2, #32
 800de16:	661a      	str	r2, [r3, #96]	; 0x60
 800de18:	e000      	b.n	800de1c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800de1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2200      	movs	r2, #0
 800de28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800de2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800de30:	4618      	mov	r0, r3
 800de32:	3728      	adds	r7, #40	; 0x28
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	4613      	mov	r3, r2
 800de46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800de48:	f7fc ff4a 	bl	800ace0 <HAL_GetTick>
 800de4c:	4602      	mov	r2, r0
 800de4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de50:	1a9b      	subs	r3, r3, r2
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	4413      	add	r3, r2
 800de56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800de58:	f7fc ff42 	bl	800ace0 <HAL_GetTick>
 800de5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800de5e:	4b39      	ldr	r3, [pc, #228]	; (800df44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	015b      	lsls	r3, r3, #5
 800de64:	0d1b      	lsrs	r3, r3, #20
 800de66:	69fa      	ldr	r2, [r7, #28]
 800de68:	fb02 f303 	mul.w	r3, r2, r3
 800de6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de6e:	e054      	b.n	800df1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de76:	d050      	beq.n	800df1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de78:	f7fc ff32 	bl	800ace0 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	69fa      	ldr	r2, [r7, #28]
 800de84:	429a      	cmp	r2, r3
 800de86:	d902      	bls.n	800de8e <SPI_WaitFlagStateUntilTimeout+0x56>
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d13d      	bne.n	800df0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dea6:	d111      	bne.n	800decc <SPI_WaitFlagStateUntilTimeout+0x94>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb0:	d004      	beq.n	800debc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800deba:	d107      	bne.n	800decc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ded4:	d10f      	bne.n	800def6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800def4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2201      	movs	r2, #1
 800defa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800df06:	2303      	movs	r3, #3
 800df08:	e017      	b.n	800df3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800df10:	2300      	movs	r3, #0
 800df12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	3b01      	subs	r3, #1
 800df18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	689a      	ldr	r2, [r3, #8]
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	4013      	ands	r3, r2
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	429a      	cmp	r2, r3
 800df28:	bf0c      	ite	eq
 800df2a:	2301      	moveq	r3, #1
 800df2c:	2300      	movne	r3, #0
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	461a      	mov	r2, r3
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	429a      	cmp	r2, r3
 800df36:	d19b      	bne.n	800de70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3720      	adds	r7, #32
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	20000014 	.word	0x20000014

0800df48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08a      	sub	sp, #40	; 0x28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800df5a:	f7fc fec1 	bl	800ace0 <HAL_GetTick>
 800df5e:	4602      	mov	r2, r0
 800df60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df62:	1a9b      	subs	r3, r3, r2
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	4413      	add	r3, r2
 800df68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800df6a:	f7fc feb9 	bl	800ace0 <HAL_GetTick>
 800df6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	330c      	adds	r3, #12
 800df76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800df78:	4b3d      	ldr	r3, [pc, #244]	; (800e070 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	4613      	mov	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	00da      	lsls	r2, r3, #3
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	0d1b      	lsrs	r3, r3, #20
 800df88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df8a:	fb02 f303 	mul.w	r3, r2, r3
 800df8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800df90:	e060      	b.n	800e054 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800df98:	d107      	bne.n	800dfaa <SPI_WaitFifoStateUntilTimeout+0x62>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d104      	bne.n	800dfaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dfa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb0:	d050      	beq.n	800e054 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dfb2:	f7fc fe95 	bl	800ace0 <HAL_GetTick>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	1ad3      	subs	r3, r2, r3
 800dfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d902      	bls.n	800dfc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d13d      	bne.n	800e044 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	685a      	ldr	r2, [r3, #4]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dfd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfe0:	d111      	bne.n	800e006 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfea:	d004      	beq.n	800dff6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dff4:	d107      	bne.n	800e006 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e00e:	d10f      	bne.n	800e030 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e02e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	e010      	b.n	800e066 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e04a:	2300      	movs	r3, #0
 800e04c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	3b01      	subs	r3, #1
 800e052:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	689a      	ldr	r2, [r3, #8]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	4013      	ands	r3, r2
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	429a      	cmp	r2, r3
 800e062:	d196      	bne.n	800df92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3728      	adds	r7, #40	; 0x28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20000014 	.word	0x20000014

0800e074 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af02      	add	r7, sp, #8
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e088:	d111      	bne.n	800e0ae <SPI_EndRxTransaction+0x3a>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e092:	d004      	beq.n	800e09e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e09c:	d107      	bne.n	800e0ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0ac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2180      	movs	r1, #128	; 0x80
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f7ff febd 	bl	800de38 <SPI_WaitFlagStateUntilTimeout>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c8:	f043 0220 	orr.w	r2, r3, #32
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	e023      	b.n	800e11c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0dc:	d11d      	bne.n	800e11a <SPI_EndRxTransaction+0xa6>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0e6:	d004      	beq.n	800e0f2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0f0:	d113      	bne.n	800e11a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7ff ff22 	bl	800df48 <SPI_WaitFifoStateUntilTimeout>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d007      	beq.n	800e11a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e10e:	f043 0220 	orr.w	r2, r3, #32
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e116:	2303      	movs	r3, #3
 800e118:	e000      	b.n	800e11c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af02      	add	r7, sp, #8
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	2200      	movs	r2, #0
 800e138:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff ff03 	bl	800df48 <SPI_WaitFifoStateUntilTimeout>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d007      	beq.n	800e158 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e14c:	f043 0220 	orr.w	r2, r3, #32
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e154:	2303      	movs	r3, #3
 800e156:	e027      	b.n	800e1a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	2200      	movs	r2, #0
 800e160:	2180      	movs	r1, #128	; 0x80
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7ff fe68 	bl	800de38 <SPI_WaitFlagStateUntilTimeout>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e172:	f043 0220 	orr.w	r2, r3, #32
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e17a:	2303      	movs	r3, #3
 800e17c:	e014      	b.n	800e1a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2200      	movs	r2, #0
 800e186:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f7ff fedc 	bl	800df48 <SPI_WaitFifoStateUntilTimeout>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d007      	beq.n	800e1a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e19a:	f043 0220 	orr.w	r2, r3, #32
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	e000      	b.n	800e1a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e049      	b.n	800e256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d106      	bne.n	800e1dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7f4 fd32 	bl	8002c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2202      	movs	r2, #2
 800e1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	f000 fae6 	bl	800e7c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2201      	movs	r2, #1
 800e238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b01      	cmp	r3, #1
 800e272:	d001      	beq.n	800e278 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	e033      	b.n	800e2e0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2202      	movs	r2, #2
 800e27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a19      	ldr	r2, [pc, #100]	; (800e2ec <HAL_TIM_Base_Start+0x8c>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d009      	beq.n	800e29e <HAL_TIM_Base_Start+0x3e>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e292:	d004      	beq.n	800e29e <HAL_TIM_Base_Start+0x3e>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a15      	ldr	r2, [pc, #84]	; (800e2f0 <HAL_TIM_Base_Start+0x90>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d115      	bne.n	800e2ca <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	4b13      	ldr	r3, [pc, #76]	; (800e2f4 <HAL_TIM_Base_Start+0x94>)
 800e2a6:	4013      	ands	r3, r2
 800e2a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b06      	cmp	r3, #6
 800e2ae:	d015      	beq.n	800e2dc <HAL_TIM_Base_Start+0x7c>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2b6:	d011      	beq.n	800e2dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f042 0201 	orr.w	r2, r2, #1
 800e2c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2c8:	e008      	b.n	800e2dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f042 0201 	orr.w	r2, r2, #1
 800e2d8:	601a      	str	r2, [r3, #0]
 800e2da:	e000      	b.n	800e2de <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	40012c00 	.word	0x40012c00
 800e2f0:	40014000 	.word	0x40014000
 800e2f4:	00010007 	.word	0x00010007

0800e2f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e306:	b2db      	uxtb	r3, r3
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d001      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e30c:	2301      	movs	r3, #1
 800e30e:	e03b      	b.n	800e388 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2202      	movs	r2, #2
 800e314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68da      	ldr	r2, [r3, #12]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f042 0201 	orr.w	r2, r2, #1
 800e326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a19      	ldr	r2, [pc, #100]	; (800e394 <HAL_TIM_Base_Start_IT+0x9c>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d009      	beq.n	800e346 <HAL_TIM_Base_Start_IT+0x4e>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e33a:	d004      	beq.n	800e346 <HAL_TIM_Base_Start_IT+0x4e>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a15      	ldr	r2, [pc, #84]	; (800e398 <HAL_TIM_Base_Start_IT+0xa0>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d115      	bne.n	800e372 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	689a      	ldr	r2, [r3, #8]
 800e34c:	4b13      	ldr	r3, [pc, #76]	; (800e39c <HAL_TIM_Base_Start_IT+0xa4>)
 800e34e:	4013      	ands	r3, r2
 800e350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b06      	cmp	r3, #6
 800e356:	d015      	beq.n	800e384 <HAL_TIM_Base_Start_IT+0x8c>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e35e:	d011      	beq.n	800e384 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f042 0201 	orr.w	r2, r2, #1
 800e36e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e370:	e008      	b.n	800e384 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f042 0201 	orr.w	r2, r2, #1
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e000      	b.n	800e386 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	40012c00 	.word	0x40012c00
 800e398:	40014000 	.word	0x40014000
 800e39c:	00010007 	.word	0x00010007

0800e3a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d122      	bne.n	800e3fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	f003 0302 	and.w	r3, r3, #2
 800e3c0:	2b02      	cmp	r3, #2
 800e3c2:	d11b      	bne.n	800e3fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f06f 0202 	mvn.w	r2, #2
 800e3cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	f003 0303 	and.w	r3, r3, #3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d003      	beq.n	800e3ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f9ce 	bl	800e784 <HAL_TIM_IC_CaptureCallback>
 800e3e8:	e005      	b.n	800e3f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f9c0 	bl	800e770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 f9d1 	bl	800e798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	f003 0304 	and.w	r3, r3, #4
 800e406:	2b04      	cmp	r3, #4
 800e408:	d122      	bne.n	800e450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	2b04      	cmp	r3, #4
 800e416:	d11b      	bne.n	800e450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f06f 0204 	mvn.w	r2, #4
 800e420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2202      	movs	r2, #2
 800e426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f9a4 	bl	800e784 <HAL_TIM_IC_CaptureCallback>
 800e43c:	e005      	b.n	800e44a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f996 	bl	800e770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f9a7 	bl	800e798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	f003 0308 	and.w	r3, r3, #8
 800e45a:	2b08      	cmp	r3, #8
 800e45c:	d122      	bne.n	800e4a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f003 0308 	and.w	r3, r3, #8
 800e468:	2b08      	cmp	r3, #8
 800e46a:	d11b      	bne.n	800e4a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f06f 0208 	mvn.w	r2, #8
 800e474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2204      	movs	r2, #4
 800e47a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	f003 0303 	and.w	r3, r3, #3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d003      	beq.n	800e492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f97a 	bl	800e784 <HAL_TIM_IC_CaptureCallback>
 800e490:	e005      	b.n	800e49e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 f96c 	bl	800e770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f97d 	bl	800e798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	f003 0310 	and.w	r3, r3, #16
 800e4ae:	2b10      	cmp	r3, #16
 800e4b0:	d122      	bne.n	800e4f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	f003 0310 	and.w	r3, r3, #16
 800e4bc:	2b10      	cmp	r3, #16
 800e4be:	d11b      	bne.n	800e4f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f06f 0210 	mvn.w	r2, #16
 800e4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2208      	movs	r2, #8
 800e4ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f950 	bl	800e784 <HAL_TIM_IC_CaptureCallback>
 800e4e4:	e005      	b.n	800e4f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f942 	bl	800e770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f953 	bl	800e798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	f003 0301 	and.w	r3, r3, #1
 800e502:	2b01      	cmp	r3, #1
 800e504:	d10e      	bne.n	800e524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b01      	cmp	r3, #1
 800e512:	d107      	bne.n	800e524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f06f 0201 	mvn.w	r2, #1
 800e51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7f3 fc5e 	bl	8001de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e52e:	2b80      	cmp	r3, #128	; 0x80
 800e530:	d10e      	bne.n	800e550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e53c:	2b80      	cmp	r3, #128	; 0x80
 800e53e:	d107      	bne.n	800e550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 faa6 	bl	800ea9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e55e:	d10e      	bne.n	800e57e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e56a:	2b80      	cmp	r3, #128	; 0x80
 800e56c:	d107      	bne.n	800e57e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fa99 	bl	800eab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e588:	2b40      	cmp	r3, #64	; 0x40
 800e58a:	d10e      	bne.n	800e5aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e596:	2b40      	cmp	r3, #64	; 0x40
 800e598:	d107      	bne.n	800e5aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e5a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f901 	bl	800e7ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	f003 0320 	and.w	r3, r3, #32
 800e5b4:	2b20      	cmp	r3, #32
 800e5b6:	d10e      	bne.n	800e5d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	f003 0320 	and.w	r3, r3, #32
 800e5c2:	2b20      	cmp	r3, #32
 800e5c4:	d107      	bne.n	800e5d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f06f 0220 	mvn.w	r2, #32
 800e5ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 fa59 	bl	800ea88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e5d6:	bf00      	nop
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b084      	sub	sp, #16
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d101      	bne.n	800e5fa <HAL_TIM_ConfigClockSource+0x1c>
 800e5f6:	2302      	movs	r3, #2
 800e5f8:	e0b6      	b.n	800e768 <HAL_TIM_ConfigClockSource+0x18a>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2202      	movs	r2, #2
 800e606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e618:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e61c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e624:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e636:	d03e      	beq.n	800e6b6 <HAL_TIM_ConfigClockSource+0xd8>
 800e638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e63c:	f200 8087 	bhi.w	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e644:	f000 8086 	beq.w	800e754 <HAL_TIM_ConfigClockSource+0x176>
 800e648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e64c:	d87f      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e64e:	2b70      	cmp	r3, #112	; 0x70
 800e650:	d01a      	beq.n	800e688 <HAL_TIM_ConfigClockSource+0xaa>
 800e652:	2b70      	cmp	r3, #112	; 0x70
 800e654:	d87b      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e656:	2b60      	cmp	r3, #96	; 0x60
 800e658:	d050      	beq.n	800e6fc <HAL_TIM_ConfigClockSource+0x11e>
 800e65a:	2b60      	cmp	r3, #96	; 0x60
 800e65c:	d877      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e65e:	2b50      	cmp	r3, #80	; 0x50
 800e660:	d03c      	beq.n	800e6dc <HAL_TIM_ConfigClockSource+0xfe>
 800e662:	2b50      	cmp	r3, #80	; 0x50
 800e664:	d873      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e666:	2b40      	cmp	r3, #64	; 0x40
 800e668:	d058      	beq.n	800e71c <HAL_TIM_ConfigClockSource+0x13e>
 800e66a:	2b40      	cmp	r3, #64	; 0x40
 800e66c:	d86f      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e66e:	2b30      	cmp	r3, #48	; 0x30
 800e670:	d064      	beq.n	800e73c <HAL_TIM_ConfigClockSource+0x15e>
 800e672:	2b30      	cmp	r3, #48	; 0x30
 800e674:	d86b      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e676:	2b20      	cmp	r3, #32
 800e678:	d060      	beq.n	800e73c <HAL_TIM_ConfigClockSource+0x15e>
 800e67a:	2b20      	cmp	r3, #32
 800e67c:	d867      	bhi.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d05c      	beq.n	800e73c <HAL_TIM_ConfigClockSource+0x15e>
 800e682:	2b10      	cmp	r3, #16
 800e684:	d05a      	beq.n	800e73c <HAL_TIM_ConfigClockSource+0x15e>
 800e686:	e062      	b.n	800e74e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	6899      	ldr	r1, [r3, #8]
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	f000 f970 	bl	800e97c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e6aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	609a      	str	r2, [r3, #8]
      break;
 800e6b4:	e04f      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6818      	ldr	r0, [r3, #0]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	6899      	ldr	r1, [r3, #8]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	f000 f959 	bl	800e97c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	689a      	ldr	r2, [r3, #8]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6d8:	609a      	str	r2, [r3, #8]
      break;
 800e6da:	e03c      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6818      	ldr	r0, [r3, #0]
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	6859      	ldr	r1, [r3, #4]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	f000 f8cd 	bl	800e888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2150      	movs	r1, #80	; 0x50
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 f926 	bl	800e946 <TIM_ITRx_SetConfig>
      break;
 800e6fa:	e02c      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6818      	ldr	r0, [r3, #0]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	6859      	ldr	r1, [r3, #4]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	461a      	mov	r2, r3
 800e70a:	f000 f8ec 	bl	800e8e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2160      	movs	r1, #96	; 0x60
 800e714:	4618      	mov	r0, r3
 800e716:	f000 f916 	bl	800e946 <TIM_ITRx_SetConfig>
      break;
 800e71a:	e01c      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6818      	ldr	r0, [r3, #0]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	6859      	ldr	r1, [r3, #4]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	461a      	mov	r2, r3
 800e72a:	f000 f8ad 	bl	800e888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2140      	movs	r1, #64	; 0x40
 800e734:	4618      	mov	r0, r3
 800e736:	f000 f906 	bl	800e946 <TIM_ITRx_SetConfig>
      break;
 800e73a:	e00c      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4619      	mov	r1, r3
 800e746:	4610      	mov	r0, r2
 800e748:	f000 f8fd 	bl	800e946 <TIM_ITRx_SetConfig>
      break;
 800e74c:	e003      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e74e:	2301      	movs	r3, #1
 800e750:	73fb      	strb	r3, [r7, #15]
      break;
 800e752:	e000      	b.n	800e756 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e754:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e766:	7bfb      	ldrb	r3, [r7, #15]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a2a      	ldr	r2, [pc, #168]	; (800e87c <TIM_Base_SetConfig+0xbc>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d003      	beq.n	800e7e0 <TIM_Base_SetConfig+0x20>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7de:	d108      	bne.n	800e7f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a21      	ldr	r2, [pc, #132]	; (800e87c <TIM_Base_SetConfig+0xbc>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d00b      	beq.n	800e812 <TIM_Base_SetConfig+0x52>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e800:	d007      	beq.n	800e812 <TIM_Base_SetConfig+0x52>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a1e      	ldr	r2, [pc, #120]	; (800e880 <TIM_Base_SetConfig+0xc0>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d003      	beq.n	800e812 <TIM_Base_SetConfig+0x52>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a1d      	ldr	r2, [pc, #116]	; (800e884 <TIM_Base_SetConfig+0xc4>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d108      	bne.n	800e824 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	4313      	orrs	r3, r2
 800e822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	4313      	orrs	r3, r2
 800e830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a0c      	ldr	r2, [pc, #48]	; (800e87c <TIM_Base_SetConfig+0xbc>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d007      	beq.n	800e860 <TIM_Base_SetConfig+0xa0>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a0b      	ldr	r2, [pc, #44]	; (800e880 <TIM_Base_SetConfig+0xc0>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d003      	beq.n	800e860 <TIM_Base_SetConfig+0xa0>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a0a      	ldr	r2, [pc, #40]	; (800e884 <TIM_Base_SetConfig+0xc4>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d103      	bne.n	800e868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	691a      	ldr	r2, [r3, #16]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	615a      	str	r2, [r3, #20]
}
 800e86e:	bf00      	nop
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	40012c00 	.word	0x40012c00
 800e880:	40014000 	.word	0x40014000
 800e884:	40014400 	.word	0x40014400

0800e888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e888:	b480      	push	{r7}
 800e88a:	b087      	sub	sp, #28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	f023 0201 	bic.w	r2, r3, #1
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e8b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	011b      	lsls	r3, r3, #4
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f023 030a 	bic.w	r3, r3, #10
 800e8c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	621a      	str	r2, [r3, #32]
}
 800e8da:	bf00      	nop
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8e6:	b480      	push	{r7}
 800e8e8:	b087      	sub	sp, #28
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	60f8      	str	r0, [r7, #12]
 800e8ee:	60b9      	str	r1, [r7, #8]
 800e8f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6a1b      	ldr	r3, [r3, #32]
 800e8f6:	f023 0210 	bic.w	r2, r3, #16
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	031b      	lsls	r3, r3, #12
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	4313      	orrs	r3, r2
 800e91a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	621a      	str	r2, [r3, #32]
}
 800e93a:	bf00      	nop
 800e93c:	371c      	adds	r7, #28
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr

0800e946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e946:	b480      	push	{r7}
 800e948:	b085      	sub	sp, #20
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e95c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	f043 0307 	orr.w	r3, r3, #7
 800e968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	609a      	str	r2, [r3, #8]
}
 800e970:	bf00      	nop
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b087      	sub	sp, #28
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	021a      	lsls	r2, r3, #8
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	431a      	orrs	r2, r3
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	697a      	ldr	r2, [r7, #20]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	609a      	str	r2, [r3, #8]
}
 800e9b0:	bf00      	nop
 800e9b2:	371c      	adds	r7, #28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d101      	bne.n	800e9d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	e04f      	b.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2202      	movs	r2, #2
 800e9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a21      	ldr	r2, [pc, #132]	; (800ea80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d108      	bne.n	800ea10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ea04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a14      	ldr	r2, [pc, #80]	; (800ea80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d009      	beq.n	800ea48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea3c:	d004      	beq.n	800ea48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a10      	ldr	r2, [pc, #64]	; (800ea84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d10c      	bne.n	800ea62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	40012c00 	.word	0x40012c00
 800ea84:	40014000 	.word	0x40014000

0800ea88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eaa4:	bf00      	nop
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d101      	bne.n	800ead6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	e040      	b.n	800eb58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d106      	bne.n	800eaec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7f3 ff36 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2224      	movs	r2, #36	; 0x24
 800eaf0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f022 0201 	bic.w	r2, r2, #1
 800eb00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fbe8 	bl	800f2d8 <UART_SetConfig>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d101      	bne.n	800eb12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e022      	b.n	800eb58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 fe36 	bl	800f78c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	689a      	ldr	r2, [r3, #8]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f042 0201 	orr.w	r2, r2, #1
 800eb4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 febd 	bl	800f8d0 <UART_CheckIdleState>
 800eb56:	4603      	mov	r3, r0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b08b      	sub	sp, #44	; 0x2c
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb72:	2b20      	cmp	r3, #32
 800eb74:	d156      	bne.n	800ec24 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d002      	beq.n	800eb82 <HAL_UART_Transmit_IT+0x22>
 800eb7c:	88fb      	ldrh	r3, [r7, #6]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d101      	bne.n	800eb86 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e04f      	b.n	800ec26 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d101      	bne.n	800eb94 <HAL_UART_Transmit_IT+0x34>
 800eb90:	2302      	movs	r3, #2
 800eb92:	e048      	b.n	800ec26 <HAL_UART_Transmit_IT+0xc6>
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	88fa      	ldrh	r2, [r7, #6]
 800eba6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2221      	movs	r2, #33	; 0x21
 800ebc4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebce:	d107      	bne.n	800ebe0 <HAL_UART_Transmit_IT+0x80>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	691b      	ldr	r3, [r3, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d103      	bne.n	800ebe0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4a16      	ldr	r2, [pc, #88]	; (800ec34 <HAL_UART_Transmit_IT+0xd4>)
 800ebdc:	669a      	str	r2, [r3, #104]	; 0x68
 800ebde:	e002      	b.n	800ebe6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	4a15      	ldr	r2, [pc, #84]	; (800ec38 <HAL_UART_Transmit_IT+0xd8>)
 800ebe4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	e853 3f00 	ldrex	r3, [r3]
 800ebfa:	613b      	str	r3, [r7, #16]
   return(result);
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec02:	627b      	str	r3, [r7, #36]	; 0x24
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	623b      	str	r3, [r7, #32]
 800ec0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec10:	69f9      	ldr	r1, [r7, #28]
 800ec12:	6a3a      	ldr	r2, [r7, #32]
 800ec14:	e841 2300 	strex	r3, r2, [r1]
 800ec18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e6      	bne.n	800ebee <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	e000      	b.n	800ec26 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800ec24:	2302      	movs	r3, #2
  }
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	372c      	adds	r7, #44	; 0x2c
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	0800fe2b 	.word	0x0800fe2b
 800ec38:	0800fd73 	.word	0x0800fd73

0800ec3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b08a      	sub	sp, #40	; 0x28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	4613      	mov	r3, r2
 800ec48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec4e:	2b20      	cmp	r3, #32
 800ec50:	d142      	bne.n	800ecd8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <HAL_UART_Receive_IT+0x22>
 800ec58:	88fb      	ldrh	r3, [r7, #6]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e03b      	b.n	800ecda <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d101      	bne.n	800ec70 <HAL_UART_Receive_IT+0x34>
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	e034      	b.n	800ecda <HAL_UART_Receive_IT+0x9e>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4a18      	ldr	r2, [pc, #96]	; (800ece4 <HAL_UART_Receive_IT+0xa8>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d01f      	beq.n	800ecc8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d018      	beq.n	800ecc8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	e853 3f00 	ldrex	r3, [r3]
 800eca2:	613b      	str	r3, [r7, #16]
   return(result);
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb4:	623b      	str	r3, [r7, #32]
 800ecb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb8:	69f9      	ldr	r1, [r7, #28]
 800ecba:	6a3a      	ldr	r2, [r7, #32]
 800ecbc:	e841 2300 	strex	r3, r2, [r1]
 800ecc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1e6      	bne.n	800ec96 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ecc8:	88fb      	ldrh	r3, [r7, #6]
 800ecca:	461a      	mov	r2, r3
 800eccc:	68b9      	ldr	r1, [r7, #8]
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f000 ff0c 	bl	800faec <UART_Start_Receive_IT>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	e000      	b.n	800ecda <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ecd8:	2302      	movs	r3, #2
  }
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3728      	adds	r7, #40	; 0x28
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	40008000 	.word	0x40008000

0800ece8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b0ba      	sub	sp, #232	; 0xe8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	69db      	ldr	r3, [r3, #28]
 800ecf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ed0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ed12:	f640 030f 	movw	r3, #2063	; 0x80f
 800ed16:	4013      	ands	r3, r2
 800ed18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ed1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d115      	bne.n	800ed50 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ed24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed28:	f003 0320 	and.w	r3, r3, #32
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00f      	beq.n	800ed50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ed30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed34:	f003 0320 	and.w	r3, r3, #32
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d009      	beq.n	800ed50 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f000 82a6 	beq.w	800f292 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	4798      	blx	r3
      }
      return;
 800ed4e:	e2a0      	b.n	800f292 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ed50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f000 8117 	beq.w	800ef88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ed5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d106      	bne.n	800ed74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ed66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ed6a:	4b85      	ldr	r3, [pc, #532]	; (800ef80 <HAL_UART_IRQHandler+0x298>)
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f000 810a 	beq.w	800ef88 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d011      	beq.n	800eda4 <HAL_UART_IRQHandler+0xbc>
 800ed80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00b      	beq.n	800eda4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2201      	movs	r2, #1
 800ed92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed9a:	f043 0201 	orr.w	r2, r3, #1
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eda4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eda8:	f003 0302 	and.w	r3, r3, #2
 800edac:	2b00      	cmp	r3, #0
 800edae:	d011      	beq.n	800edd4 <HAL_UART_IRQHandler+0xec>
 800edb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00b      	beq.n	800edd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2202      	movs	r2, #2
 800edc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edca:	f043 0204 	orr.w	r2, r3, #4
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edd8:	f003 0304 	and.w	r3, r3, #4
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d011      	beq.n	800ee04 <HAL_UART_IRQHandler+0x11c>
 800ede0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ede4:	f003 0301 	and.w	r3, r3, #1
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00b      	beq.n	800ee04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2204      	movs	r2, #4
 800edf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edfa:	f043 0202 	orr.w	r2, r3, #2
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ee04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee08:	f003 0308 	and.w	r3, r3, #8
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d017      	beq.n	800ee40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ee10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee14:	f003 0320 	and.w	r3, r3, #32
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d105      	bne.n	800ee28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ee1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00b      	beq.n	800ee40 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2208      	movs	r2, #8
 800ee2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee36:	f043 0208 	orr.w	r2, r3, #8
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d012      	beq.n	800ee72 <HAL_UART_IRQHandler+0x18a>
 800ee4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00c      	beq.n	800ee72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee68:	f043 0220 	orr.w	r2, r3, #32
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f000 820c 	beq.w	800f296 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ee7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee82:	f003 0320 	and.w	r3, r3, #32
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00d      	beq.n	800eea6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ee8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee8e:	f003 0320 	and.w	r3, r3, #32
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d007      	beq.n	800eea6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeba:	2b40      	cmp	r3, #64	; 0x40
 800eebc:	d005      	beq.n	800eeca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d04f      	beq.n	800ef6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 fed8 	bl	800fc80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeda:	2b40      	cmp	r3, #64	; 0x40
 800eedc:	d141      	bne.n	800ef62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3308      	adds	r3, #8
 800eee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eeec:	e853 3f00 	ldrex	r3, [r3]
 800eef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eefc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3308      	adds	r3, #8
 800ef06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ef0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ef0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ef16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ef22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1d9      	bne.n	800eede <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d013      	beq.n	800ef5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef36:	4a13      	ldr	r2, [pc, #76]	; (800ef84 <HAL_UART_IRQHandler+0x29c>)
 800ef38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fc f84d 	bl	800afde <HAL_DMA_Abort_IT>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d017      	beq.n	800ef7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ef54:	4610      	mov	r0, r2
 800ef56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef58:	e00f      	b.n	800ef7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f9a6 	bl	800f2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef60:	e00b      	b.n	800ef7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f9a2 	bl	800f2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef68:	e007      	b.n	800ef7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f99e 	bl	800f2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ef78:	e18d      	b.n	800f296 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef7a:	bf00      	nop
    return;
 800ef7c:	e18b      	b.n	800f296 <HAL_UART_IRQHandler+0x5ae>
 800ef7e:	bf00      	nop
 800ef80:	04000120 	.word	0x04000120
 800ef84:	0800fd47 	.word	0x0800fd47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	f040 8146 	bne.w	800f21e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef96:	f003 0310 	and.w	r3, r3, #16
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 813f 	beq.w	800f21e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800efa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efa4:	f003 0310 	and.w	r3, r3, #16
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 8138 	beq.w	800f21e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2210      	movs	r2, #16
 800efb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc0:	2b40      	cmp	r3, #64	; 0x40
 800efc2:	f040 80b4 	bne.w	800f12e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800efd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 815f 	beq.w	800f29a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800efe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efe6:	429a      	cmp	r2, r3
 800efe8:	f080 8157 	bcs.w	800f29a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f003 0320 	and.w	r3, r3, #32
 800f002:	2b00      	cmp	r3, #0
 800f004:	f040 8085 	bne.w	800f112 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f014:	e853 3f00 	ldrex	r3, [r3]
 800f018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f01c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	461a      	mov	r2, r3
 800f02e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f036:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f03e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f042:	e841 2300 	strex	r3, r2, [r1]
 800f046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f04a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1da      	bne.n	800f008 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3308      	adds	r3, #8
 800f058:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f064:	f023 0301 	bic.w	r3, r3, #1
 800f068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3308      	adds	r3, #8
 800f072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f076:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f07a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f07e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f082:	e841 2300 	strex	r3, r2, [r1]
 800f086:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1e1      	bne.n	800f052 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3308      	adds	r3, #8
 800f094:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f098:	e853 3f00 	ldrex	r3, [r3]
 800f09c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f09e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f0b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f0b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f0c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e3      	bne.n	800f08e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0da:	e853 3f00 	ldrex	r3, [r3]
 800f0de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e2:	f023 0310 	bic.w	r3, r3, #16
 800f0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0fc:	e841 2300 	strex	r3, r2, [r1]
 800f100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1e4      	bne.n	800f0d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fb ff28 	bl	800af62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f11e:	b29b      	uxth	r3, r3
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	b29b      	uxth	r3, r3
 800f124:	4619      	mov	r1, r3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f8ca 	bl	800f2c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f12c:	e0b5      	b.n	800f29a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f148:	b29b      	uxth	r3, r3
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 80a7 	beq.w	800f29e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800f150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 80a2 	beq.w	800f29e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f162:	e853 3f00 	ldrex	r3, [r3]
 800f166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f16e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f17c:	647b      	str	r3, [r7, #68]	; 0x44
 800f17e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f184:	e841 2300 	strex	r3, r2, [r1]
 800f188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1e4      	bne.n	800f15a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	3308      	adds	r3, #8
 800f196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19a:	e853 3f00 	ldrex	r3, [r3]
 800f19e:	623b      	str	r3, [r7, #32]
   return(result);
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	f023 0301 	bic.w	r3, r3, #1
 800f1a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f1b4:	633a      	str	r2, [r7, #48]	; 0x30
 800f1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1bc:	e841 2300 	strex	r3, r2, [r1]
 800f1c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1e3      	bne.n	800f190 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2220      	movs	r2, #32
 800f1cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0310 	bic.w	r3, r3, #16
 800f1ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f1fc:	61fb      	str	r3, [r7, #28]
 800f1fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f200:	69b9      	ldr	r1, [r7, #24]
 800f202:	69fa      	ldr	r2, [r7, #28]
 800f204:	e841 2300 	strex	r3, r2, [r1]
 800f208:	617b      	str	r3, [r7, #20]
   return(result);
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e4      	bne.n	800f1da <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f214:	4619      	mov	r1, r3
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 f852 	bl	800f2c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f21c:	e03f      	b.n	800f29e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00e      	beq.n	800f248 <HAL_UART_IRQHandler+0x560>
 800f22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f22e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f232:	2b00      	cmp	r3, #0
 800f234:	d008      	beq.n	800f248 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f23e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 ffdc 	bl	80101fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f246:	e02d      	b.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00e      	beq.n	800f272 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d008      	beq.n	800f272 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f264:	2b00      	cmp	r3, #0
 800f266:	d01c      	beq.n	800f2a2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	4798      	blx	r3
    }
    return;
 800f270:	e017      	b.n	800f2a2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d012      	beq.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
 800f27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00c      	beq.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 fe2d 	bl	800feea <UART_EndTransmit_IT>
    return;
 800f290:	e008      	b.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f292:	bf00      	nop
 800f294:	e006      	b.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800f296:	bf00      	nop
 800f298:	e004      	b.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f29a:	bf00      	nop
 800f29c:	e002      	b.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f29e:	bf00      	nop
 800f2a0:	e000      	b.n	800f2a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800f2a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800f2a4:	37e8      	adds	r7, #232	; 0xe8
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop

0800f2ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2dc:	b08a      	sub	sp, #40	; 0x28
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	689a      	ldr	r2, [r3, #8]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	431a      	orrs	r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	431a      	orrs	r2, r3
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	4b9e      	ldr	r3, [pc, #632]	; (800f580 <UART_SetConfig+0x2a8>)
 800f308:	4013      	ands	r3, r2
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	6812      	ldr	r2, [r2, #0]
 800f30e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f310:	430b      	orrs	r3, r1
 800f312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a93      	ldr	r2, [pc, #588]	; (800f584 <UART_SetConfig+0x2ac>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d004      	beq.n	800f344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f340:	4313      	orrs	r3, r2
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f354:	430a      	orrs	r2, r1
 800f356:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a8a      	ldr	r2, [pc, #552]	; (800f588 <UART_SetConfig+0x2b0>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d126      	bne.n	800f3b0 <UART_SetConfig+0xd8>
 800f362:	4b8a      	ldr	r3, [pc, #552]	; (800f58c <UART_SetConfig+0x2b4>)
 800f364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f368:	f003 0303 	and.w	r3, r3, #3
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	d81b      	bhi.n	800f3a8 <UART_SetConfig+0xd0>
 800f370:	a201      	add	r2, pc, #4	; (adr r2, 800f378 <UART_SetConfig+0xa0>)
 800f372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f376:	bf00      	nop
 800f378:	0800f389 	.word	0x0800f389
 800f37c:	0800f399 	.word	0x0800f399
 800f380:	0800f391 	.word	0x0800f391
 800f384:	0800f3a1 	.word	0x0800f3a1
 800f388:	2301      	movs	r3, #1
 800f38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f38e:	e0ab      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f390:	2302      	movs	r3, #2
 800f392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f396:	e0a7      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f398:	2304      	movs	r3, #4
 800f39a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f39e:	e0a3      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f3a0:	2308      	movs	r3, #8
 800f3a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3a6:	e09f      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f3a8:	2310      	movs	r3, #16
 800f3aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3ae:	e09b      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4a76      	ldr	r2, [pc, #472]	; (800f590 <UART_SetConfig+0x2b8>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d138      	bne.n	800f42c <UART_SetConfig+0x154>
 800f3ba:	4b74      	ldr	r3, [pc, #464]	; (800f58c <UART_SetConfig+0x2b4>)
 800f3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3c0:	f003 030c 	and.w	r3, r3, #12
 800f3c4:	2b0c      	cmp	r3, #12
 800f3c6:	d82d      	bhi.n	800f424 <UART_SetConfig+0x14c>
 800f3c8:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <UART_SetConfig+0xf8>)
 800f3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ce:	bf00      	nop
 800f3d0:	0800f405 	.word	0x0800f405
 800f3d4:	0800f425 	.word	0x0800f425
 800f3d8:	0800f425 	.word	0x0800f425
 800f3dc:	0800f425 	.word	0x0800f425
 800f3e0:	0800f415 	.word	0x0800f415
 800f3e4:	0800f425 	.word	0x0800f425
 800f3e8:	0800f425 	.word	0x0800f425
 800f3ec:	0800f425 	.word	0x0800f425
 800f3f0:	0800f40d 	.word	0x0800f40d
 800f3f4:	0800f425 	.word	0x0800f425
 800f3f8:	0800f425 	.word	0x0800f425
 800f3fc:	0800f425 	.word	0x0800f425
 800f400:	0800f41d 	.word	0x0800f41d
 800f404:	2300      	movs	r3, #0
 800f406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f40a:	e06d      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f40c:	2302      	movs	r3, #2
 800f40e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f412:	e069      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f414:	2304      	movs	r3, #4
 800f416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f41a:	e065      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f41c:	2308      	movs	r3, #8
 800f41e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f422:	e061      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f424:	2310      	movs	r3, #16
 800f426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f42a:	e05d      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4a58      	ldr	r2, [pc, #352]	; (800f594 <UART_SetConfig+0x2bc>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d125      	bne.n	800f482 <UART_SetConfig+0x1aa>
 800f436:	4b55      	ldr	r3, [pc, #340]	; (800f58c <UART_SetConfig+0x2b4>)
 800f438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f43c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f440:	2b30      	cmp	r3, #48	; 0x30
 800f442:	d016      	beq.n	800f472 <UART_SetConfig+0x19a>
 800f444:	2b30      	cmp	r3, #48	; 0x30
 800f446:	d818      	bhi.n	800f47a <UART_SetConfig+0x1a2>
 800f448:	2b20      	cmp	r3, #32
 800f44a:	d00a      	beq.n	800f462 <UART_SetConfig+0x18a>
 800f44c:	2b20      	cmp	r3, #32
 800f44e:	d814      	bhi.n	800f47a <UART_SetConfig+0x1a2>
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <UART_SetConfig+0x182>
 800f454:	2b10      	cmp	r3, #16
 800f456:	d008      	beq.n	800f46a <UART_SetConfig+0x192>
 800f458:	e00f      	b.n	800f47a <UART_SetConfig+0x1a2>
 800f45a:	2300      	movs	r3, #0
 800f45c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f460:	e042      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f462:	2302      	movs	r3, #2
 800f464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f468:	e03e      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f46a:	2304      	movs	r3, #4
 800f46c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f470:	e03a      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f472:	2308      	movs	r3, #8
 800f474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f478:	e036      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f47a:	2310      	movs	r3, #16
 800f47c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f480:	e032      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a3f      	ldr	r2, [pc, #252]	; (800f584 <UART_SetConfig+0x2ac>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d12a      	bne.n	800f4e2 <UART_SetConfig+0x20a>
 800f48c:	4b3f      	ldr	r3, [pc, #252]	; (800f58c <UART_SetConfig+0x2b4>)
 800f48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f492:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f49a:	d01a      	beq.n	800f4d2 <UART_SetConfig+0x1fa>
 800f49c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4a0:	d81b      	bhi.n	800f4da <UART_SetConfig+0x202>
 800f4a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4a6:	d00c      	beq.n	800f4c2 <UART_SetConfig+0x1ea>
 800f4a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ac:	d815      	bhi.n	800f4da <UART_SetConfig+0x202>
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d003      	beq.n	800f4ba <UART_SetConfig+0x1e2>
 800f4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4b6:	d008      	beq.n	800f4ca <UART_SetConfig+0x1f2>
 800f4b8:	e00f      	b.n	800f4da <UART_SetConfig+0x202>
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4c0:	e012      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4c8:	e00e      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f4ca:	2304      	movs	r3, #4
 800f4cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4d0:	e00a      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f4d2:	2308      	movs	r3, #8
 800f4d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4d8:	e006      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f4da:	2310      	movs	r3, #16
 800f4dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4e0:	e002      	b.n	800f4e8 <UART_SetConfig+0x210>
 800f4e2:	2310      	movs	r3, #16
 800f4e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a25      	ldr	r2, [pc, #148]	; (800f584 <UART_SetConfig+0x2ac>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	f040 808a 	bne.w	800f608 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f4f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4f8:	2b08      	cmp	r3, #8
 800f4fa:	d824      	bhi.n	800f546 <UART_SetConfig+0x26e>
 800f4fc:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <UART_SetConfig+0x22c>)
 800f4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f502:	bf00      	nop
 800f504:	0800f529 	.word	0x0800f529
 800f508:	0800f547 	.word	0x0800f547
 800f50c:	0800f531 	.word	0x0800f531
 800f510:	0800f547 	.word	0x0800f547
 800f514:	0800f537 	.word	0x0800f537
 800f518:	0800f547 	.word	0x0800f547
 800f51c:	0800f547 	.word	0x0800f547
 800f520:	0800f547 	.word	0x0800f547
 800f524:	0800f53f 	.word	0x0800f53f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f528:	f7fd fb6a 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 800f52c:	61f8      	str	r0, [r7, #28]
        break;
 800f52e:	e010      	b.n	800f552 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f530:	4b19      	ldr	r3, [pc, #100]	; (800f598 <UART_SetConfig+0x2c0>)
 800f532:	61fb      	str	r3, [r7, #28]
        break;
 800f534:	e00d      	b.n	800f552 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f536:	f7fd facb 	bl	800cad0 <HAL_RCC_GetSysClockFreq>
 800f53a:	61f8      	str	r0, [r7, #28]
        break;
 800f53c:	e009      	b.n	800f552 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f53e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f542:	61fb      	str	r3, [r7, #28]
        break;
 800f544:	e005      	b.n	800f552 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800f546:	2300      	movs	r3, #0
 800f548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	2b00      	cmp	r3, #0
 800f556:	f000 8109 	beq.w	800f76c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	4613      	mov	r3, r2
 800f560:	005b      	lsls	r3, r3, #1
 800f562:	4413      	add	r3, r2
 800f564:	69fa      	ldr	r2, [r7, #28]
 800f566:	429a      	cmp	r2, r3
 800f568:	d305      	bcc.n	800f576 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f570:	69fa      	ldr	r2, [r7, #28]
 800f572:	429a      	cmp	r2, r3
 800f574:	d912      	bls.n	800f59c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800f576:	2301      	movs	r3, #1
 800f578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f57c:	e0f6      	b.n	800f76c <UART_SetConfig+0x494>
 800f57e:	bf00      	nop
 800f580:	efff69f3 	.word	0xefff69f3
 800f584:	40008000 	.word	0x40008000
 800f588:	40013800 	.word	0x40013800
 800f58c:	40021000 	.word	0x40021000
 800f590:	40004400 	.word	0x40004400
 800f594:	40004800 	.word	0x40004800
 800f598:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	461c      	mov	r4, r3
 800f5a2:	4615      	mov	r5, r2
 800f5a4:	f04f 0200 	mov.w	r2, #0
 800f5a8:	f04f 0300 	mov.w	r3, #0
 800f5ac:	022b      	lsls	r3, r5, #8
 800f5ae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f5b2:	0222      	lsls	r2, r4, #8
 800f5b4:	68f9      	ldr	r1, [r7, #12]
 800f5b6:	6849      	ldr	r1, [r1, #4]
 800f5b8:	0849      	lsrs	r1, r1, #1
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	4688      	mov	r8, r1
 800f5be:	4681      	mov	r9, r0
 800f5c0:	eb12 0a08 	adds.w	sl, r2, r8
 800f5c4:	eb43 0b09 	adc.w	fp, r3, r9
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	603b      	str	r3, [r7, #0]
 800f5d0:	607a      	str	r2, [r7, #4]
 800f5d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5d6:	4650      	mov	r0, sl
 800f5d8:	4659      	mov	r1, fp
 800f5da:	f7f0 fe51 	bl	8000280 <__aeabi_uldivmod>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5ec:	d308      	bcc.n	800f600 <UART_SetConfig+0x328>
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5f4:	d204      	bcs.n	800f600 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	69ba      	ldr	r2, [r7, #24]
 800f5fc:	60da      	str	r2, [r3, #12]
 800f5fe:	e0b5      	b.n	800f76c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800f600:	2301      	movs	r3, #1
 800f602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f606:	e0b1      	b.n	800f76c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	69db      	ldr	r3, [r3, #28]
 800f60c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f610:	d15d      	bne.n	800f6ce <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800f612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f616:	2b08      	cmp	r3, #8
 800f618:	d827      	bhi.n	800f66a <UART_SetConfig+0x392>
 800f61a:	a201      	add	r2, pc, #4	; (adr r2, 800f620 <UART_SetConfig+0x348>)
 800f61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f620:	0800f645 	.word	0x0800f645
 800f624:	0800f64d 	.word	0x0800f64d
 800f628:	0800f655 	.word	0x0800f655
 800f62c:	0800f66b 	.word	0x0800f66b
 800f630:	0800f65b 	.word	0x0800f65b
 800f634:	0800f66b 	.word	0x0800f66b
 800f638:	0800f66b 	.word	0x0800f66b
 800f63c:	0800f66b 	.word	0x0800f66b
 800f640:	0800f663 	.word	0x0800f663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f644:	f7fd fadc 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 800f648:	61f8      	str	r0, [r7, #28]
        break;
 800f64a:	e014      	b.n	800f676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f64c:	f7fd faee 	bl	800cc2c <HAL_RCC_GetPCLK2Freq>
 800f650:	61f8      	str	r0, [r7, #28]
        break;
 800f652:	e010      	b.n	800f676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f654:	4b4c      	ldr	r3, [pc, #304]	; (800f788 <UART_SetConfig+0x4b0>)
 800f656:	61fb      	str	r3, [r7, #28]
        break;
 800f658:	e00d      	b.n	800f676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f65a:	f7fd fa39 	bl	800cad0 <HAL_RCC_GetSysClockFreq>
 800f65e:	61f8      	str	r0, [r7, #28]
        break;
 800f660:	e009      	b.n	800f676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f666:	61fb      	str	r3, [r7, #28]
        break;
 800f668:	e005      	b.n	800f676 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800f66a:	2300      	movs	r3, #0
 800f66c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d077      	beq.n	800f76c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	005a      	lsls	r2, r3, #1
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	085b      	lsrs	r3, r3, #1
 800f686:	441a      	add	r2, r3
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f690:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	2b0f      	cmp	r3, #15
 800f696:	d916      	bls.n	800f6c6 <UART_SetConfig+0x3ee>
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f69e:	d212      	bcs.n	800f6c6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	f023 030f 	bic.w	r3, r3, #15
 800f6a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	085b      	lsrs	r3, r3, #1
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	f003 0307 	and.w	r3, r3, #7
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	8afb      	ldrh	r3, [r7, #22]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	8afa      	ldrh	r2, [r7, #22]
 800f6c2:	60da      	str	r2, [r3, #12]
 800f6c4:	e052      	b.n	800f76c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f6cc:	e04e      	b.n	800f76c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f6ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6d2:	2b08      	cmp	r3, #8
 800f6d4:	d827      	bhi.n	800f726 <UART_SetConfig+0x44e>
 800f6d6:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <UART_SetConfig+0x404>)
 800f6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6dc:	0800f701 	.word	0x0800f701
 800f6e0:	0800f709 	.word	0x0800f709
 800f6e4:	0800f711 	.word	0x0800f711
 800f6e8:	0800f727 	.word	0x0800f727
 800f6ec:	0800f717 	.word	0x0800f717
 800f6f0:	0800f727 	.word	0x0800f727
 800f6f4:	0800f727 	.word	0x0800f727
 800f6f8:	0800f727 	.word	0x0800f727
 800f6fc:	0800f71f 	.word	0x0800f71f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f700:	f7fd fa7e 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 800f704:	61f8      	str	r0, [r7, #28]
        break;
 800f706:	e014      	b.n	800f732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f708:	f7fd fa90 	bl	800cc2c <HAL_RCC_GetPCLK2Freq>
 800f70c:	61f8      	str	r0, [r7, #28]
        break;
 800f70e:	e010      	b.n	800f732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f710:	4b1d      	ldr	r3, [pc, #116]	; (800f788 <UART_SetConfig+0x4b0>)
 800f712:	61fb      	str	r3, [r7, #28]
        break;
 800f714:	e00d      	b.n	800f732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f716:	f7fd f9db 	bl	800cad0 <HAL_RCC_GetSysClockFreq>
 800f71a:	61f8      	str	r0, [r7, #28]
        break;
 800f71c:	e009      	b.n	800f732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f722:	61fb      	str	r3, [r7, #28]
        break;
 800f724:	e005      	b.n	800f732 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800f726:	2300      	movs	r3, #0
 800f728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f730:	bf00      	nop
    }

    if (pclk != 0U)
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d019      	beq.n	800f76c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	085a      	lsrs	r2, r3, #1
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	441a      	add	r2, r3
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	fbb2 f3f3 	udiv	r3, r2, r3
 800f74a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	2b0f      	cmp	r3, #15
 800f750:	d909      	bls.n	800f766 <UART_SetConfig+0x48e>
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f758:	d205      	bcs.n	800f766 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	b29a      	uxth	r2, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	60da      	str	r2, [r3, #12]
 800f764:	e002      	b.n	800f76c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800f766:	2301      	movs	r3, #1
 800f768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2200      	movs	r2, #0
 800f770:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f778:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3728      	adds	r7, #40	; 0x28
 800f780:	46bd      	mov	sp, r7
 800f782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f786:	bf00      	nop
 800f788:	00f42400 	.word	0x00f42400

0800f78c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f798:	f003 0301 	and.w	r3, r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00a      	beq.n	800f7b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	430a      	orrs	r2, r1
 800f7b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ba:	f003 0302 	and.w	r3, r3, #2
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00a      	beq.n	800f7d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	430a      	orrs	r2, r1
 800f7d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7dc:	f003 0304 	and.w	r3, r3, #4
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00a      	beq.n	800f7fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	430a      	orrs	r2, r1
 800f7f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fe:	f003 0308 	and.w	r3, r3, #8
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00a      	beq.n	800f81c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	430a      	orrs	r2, r1
 800f81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f820:	f003 0310 	and.w	r3, r3, #16
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00a      	beq.n	800f83e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	430a      	orrs	r2, r1
 800f83c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f842:	f003 0320 	and.w	r3, r3, #32
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00a      	beq.n	800f860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	430a      	orrs	r2, r1
 800f85e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d01a      	beq.n	800f8a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	430a      	orrs	r2, r1
 800f880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f88a:	d10a      	bne.n	800f8a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	430a      	orrs	r2, r1
 800f8a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00a      	beq.n	800f8c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	430a      	orrs	r2, r1
 800f8c2:	605a      	str	r2, [r3, #4]
  }
}
 800f8c4:	bf00      	nop
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af02      	add	r7, sp, #8
 800f8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8e0:	f7fb f9fe 	bl	800ace0 <HAL_GetTick>
 800f8e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f003 0308 	and.w	r3, r3, #8
 800f8f0:	2b08      	cmp	r3, #8
 800f8f2:	d10e      	bne.n	800f912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f82d 	bl	800f962 <UART_WaitOnFlagUntilTimeout>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d001      	beq.n	800f912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f90e:	2303      	movs	r3, #3
 800f910:	e023      	b.n	800f95a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f003 0304 	and.w	r3, r3, #4
 800f91c:	2b04      	cmp	r3, #4
 800f91e:	d10e      	bne.n	800f93e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f817 	bl	800f962 <UART_WaitOnFlagUntilTimeout>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d001      	beq.n	800f93e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f93a:	2303      	movs	r3, #3
 800f93c:	e00d      	b.n	800f95a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2220      	movs	r2, #32
 800f942:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2220      	movs	r2, #32
 800f948:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b09c      	sub	sp, #112	; 0x70
 800f966:	af00      	add	r7, sp, #0
 800f968:	60f8      	str	r0, [r7, #12]
 800f96a:	60b9      	str	r1, [r7, #8]
 800f96c:	603b      	str	r3, [r7, #0]
 800f96e:	4613      	mov	r3, r2
 800f970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f972:	e0a5      	b.n	800fac0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97a:	f000 80a1 	beq.w	800fac0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f97e:	f7fb f9af 	bl	800ace0 <HAL_GetTick>
 800f982:	4602      	mov	r2, r0
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d302      	bcc.n	800f994 <UART_WaitOnFlagUntilTimeout+0x32>
 800f98e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f990:	2b00      	cmp	r3, #0
 800f992:	d13e      	bne.n	800fa12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f99c:	e853 3f00 	ldrex	r3, [r3]
 800f9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9a8:	667b      	str	r3, [r7, #100]	; 0x64
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f9ba:	e841 2300 	strex	r3, r2, [r1]
 800f9be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f9c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1e6      	bne.n	800f994 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3308      	adds	r3, #8
 800f9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d0:	e853 3f00 	ldrex	r3, [r3]
 800f9d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d8:	f023 0301 	bic.w	r3, r3, #1
 800f9dc:	663b      	str	r3, [r7, #96]	; 0x60
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9e6:	64ba      	str	r2, [r7, #72]	; 0x48
 800f9e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9ee:	e841 2300 	strex	r3, r2, [r1]
 800f9f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1e5      	bne.n	800f9c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2220      	movs	r2, #32
 800f9fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2220      	movs	r2, #32
 800fa04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800fa0e:	2303      	movs	r3, #3
 800fa10:	e067      	b.n	800fae2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 0304 	and.w	r3, r3, #4
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d04f      	beq.n	800fac0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	69db      	ldr	r3, [r3, #28]
 800fa26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa2e:	d147      	bne.n	800fac0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	e853 3f00 	ldrex	r3, [r3]
 800fa46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fa4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa58:	637b      	str	r3, [r7, #52]	; 0x34
 800fa5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa60:	e841 2300 	strex	r3, r2, [r1]
 800fa64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1e6      	bne.n	800fa3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	3308      	adds	r3, #8
 800fa72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	e853 3f00 	ldrex	r3, [r3]
 800fa7a:	613b      	str	r3, [r7, #16]
   return(result);
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	f023 0301 	bic.w	r3, r3, #1
 800fa82:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3308      	adds	r3, #8
 800fa8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa8c:	623a      	str	r2, [r7, #32]
 800fa8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa90:	69f9      	ldr	r1, [r7, #28]
 800fa92:	6a3a      	ldr	r2, [r7, #32]
 800fa94:	e841 2300 	strex	r3, r2, [r1]
 800fa98:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1e5      	bne.n	800fa6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2220      	movs	r2, #32
 800faa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2220      	movs	r2, #32
 800faaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2220      	movs	r2, #32
 800fab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800fabc:	2303      	movs	r3, #3
 800fabe:	e010      	b.n	800fae2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	69da      	ldr	r2, [r3, #28]
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	4013      	ands	r3, r2
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	429a      	cmp	r2, r3
 800face:	bf0c      	ite	eq
 800fad0:	2301      	moveq	r3, #1
 800fad2:	2300      	movne	r3, #0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	461a      	mov	r2, r3
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	429a      	cmp	r2, r3
 800fadc:	f43f af4a 	beq.w	800f974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3770      	adds	r7, #112	; 0x70
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800faec:	b480      	push	{r7}
 800faee:	b097      	sub	sp, #92	; 0x5c
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	4613      	mov	r3, r2
 800faf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	88fa      	ldrh	r2, [r7, #6]
 800fb04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	88fa      	ldrh	r2, [r7, #6]
 800fb0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	689b      	ldr	r3, [r3, #8]
 800fb1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb1e:	d10e      	bne.n	800fb3e <UART_Start_Receive_IT+0x52>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d105      	bne.n	800fb34 <UART_Start_Receive_IT+0x48>
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb32:	e02d      	b.n	800fb90 <UART_Start_Receive_IT+0xa4>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	22ff      	movs	r2, #255	; 0xff
 800fb38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb3c:	e028      	b.n	800fb90 <UART_Start_Receive_IT+0xa4>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d10d      	bne.n	800fb62 <UART_Start_Receive_IT+0x76>
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d104      	bne.n	800fb58 <UART_Start_Receive_IT+0x6c>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	22ff      	movs	r2, #255	; 0xff
 800fb52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb56:	e01b      	b.n	800fb90 <UART_Start_Receive_IT+0xa4>
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	227f      	movs	r2, #127	; 0x7f
 800fb5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb60:	e016      	b.n	800fb90 <UART_Start_Receive_IT+0xa4>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb6a:	d10d      	bne.n	800fb88 <UART_Start_Receive_IT+0x9c>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d104      	bne.n	800fb7e <UART_Start_Receive_IT+0x92>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	227f      	movs	r2, #127	; 0x7f
 800fb78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb7c:	e008      	b.n	800fb90 <UART_Start_Receive_IT+0xa4>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	223f      	movs	r2, #63	; 0x3f
 800fb82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb86:	e003      	b.n	800fb90 <UART_Start_Receive_IT+0xa4>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2222      	movs	r2, #34	; 0x22
 800fb9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	3308      	adds	r3, #8
 800fba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba8:	e853 3f00 	ldrex	r3, [r3]
 800fbac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb0:	f043 0301 	orr.w	r3, r3, #1
 800fbb4:	657b      	str	r3, [r7, #84]	; 0x54
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	3308      	adds	r3, #8
 800fbbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbbe:	64ba      	str	r2, [r7, #72]	; 0x48
 800fbc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbc6:	e841 2300 	strex	r3, r2, [r1]
 800fbca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fbcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1e5      	bne.n	800fb9e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbda:	d107      	bne.n	800fbec <UART_Start_Receive_IT+0x100>
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	691b      	ldr	r3, [r3, #16]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d103      	bne.n	800fbec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	4a24      	ldr	r2, [pc, #144]	; (800fc78 <UART_Start_Receive_IT+0x18c>)
 800fbe8:	665a      	str	r2, [r3, #100]	; 0x64
 800fbea:	e002      	b.n	800fbf2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	4a23      	ldr	r2, [pc, #140]	; (800fc7c <UART_Start_Receive_IT+0x190>)
 800fbf0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d019      	beq.n	800fc36 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	e853 3f00 	ldrex	r3, [r3]
 800fc0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fc16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc20:	637b      	str	r3, [r7, #52]	; 0x34
 800fc22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc28:	e841 2300 	strex	r3, r2, [r1]
 800fc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1e6      	bne.n	800fc02 <UART_Start_Receive_IT+0x116>
 800fc34:	e018      	b.n	800fc68 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	e853 3f00 	ldrex	r3, [r3]
 800fc42:	613b      	str	r3, [r7, #16]
   return(result);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f043 0320 	orr.w	r3, r3, #32
 800fc4a:	653b      	str	r3, [r7, #80]	; 0x50
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc54:	623b      	str	r3, [r7, #32]
 800fc56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc58:	69f9      	ldr	r1, [r7, #28]
 800fc5a:	6a3a      	ldr	r2, [r7, #32]
 800fc5c:	e841 2300 	strex	r3, r2, [r1]
 800fc60:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1e6      	bne.n	800fc36 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	375c      	adds	r7, #92	; 0x5c
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	0801009f 	.word	0x0801009f
 800fc7c:	0800ff3f 	.word	0x0800ff3f

0800fc80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b095      	sub	sp, #84	; 0x54
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc90:	e853 3f00 	ldrex	r3, [r3]
 800fc94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca6:	643b      	str	r3, [r7, #64]	; 0x40
 800fca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcae:	e841 2300 	strex	r3, r2, [r1]
 800fcb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e6      	bne.n	800fc88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	e853 3f00 	ldrex	r3, [r3]
 800fcc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	f023 0301 	bic.w	r3, r3, #1
 800fcd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fce2:	e841 2300 	strex	r3, r2, [r1]
 800fce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d1e5      	bne.n	800fcba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d118      	bne.n	800fd28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	e853 3f00 	ldrex	r3, [r3]
 800fd02:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f023 0310 	bic.w	r3, r3, #16
 800fd0a:	647b      	str	r3, [r7, #68]	; 0x44
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd14:	61bb      	str	r3, [r7, #24]
 800fd16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd18:	6979      	ldr	r1, [r7, #20]
 800fd1a:	69ba      	ldr	r2, [r7, #24]
 800fd1c:	e841 2300 	strex	r3, r2, [r1]
 800fd20:	613b      	str	r3, [r7, #16]
   return(result);
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e6      	bne.n	800fcf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2220      	movs	r2, #32
 800fd2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	665a      	str	r2, [r3, #100]	; 0x64
}
 800fd3a:	bf00      	nop
 800fd3c:	3754      	adds	r7, #84	; 0x54
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b084      	sub	sp, #16
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff faa1 	bl	800f2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd6a:	bf00      	nop
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fd72:	b480      	push	{r7}
 800fd74:	b08f      	sub	sp, #60	; 0x3c
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd7e:	2b21      	cmp	r3, #33	; 0x21
 800fd80:	d14d      	bne.n	800fe1e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d132      	bne.n	800fdf4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda2:	637b      	str	r3, [r7, #52]	; 0x34
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e6      	bne.n	800fd8e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	e853 3f00 	ldrex	r3, [r3]
 800fdcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdd4:	633b      	str	r3, [r7, #48]	; 0x30
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	461a      	mov	r2, r3
 800fddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdde:	61bb      	str	r3, [r7, #24]
 800fde0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde2:	6979      	ldr	r1, [r7, #20]
 800fde4:	69ba      	ldr	r2, [r7, #24]
 800fde6:	e841 2300 	strex	r3, r2, [r1]
 800fdea:	613b      	str	r3, [r7, #16]
   return(result);
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1e6      	bne.n	800fdc0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800fdf2:	e014      	b.n	800fe1e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdf8:	781a      	ldrb	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	b292      	uxth	r2, r2
 800fe00:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	3b01      	subs	r3, #1
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800fe1e:	bf00      	nop
 800fe20:	373c      	adds	r7, #60	; 0x3c
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b091      	sub	sp, #68	; 0x44
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe36:	2b21      	cmp	r3, #33	; 0x21
 800fe38:	d151      	bne.n	800fede <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d132      	bne.n	800feac <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	e853 3f00 	ldrex	r3, [r3]
 800fe52:	623b      	str	r3, [r7, #32]
   return(result);
 800fe54:	6a3b      	ldr	r3, [r7, #32]
 800fe56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	461a      	mov	r2, r3
 800fe62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe64:	633b      	str	r3, [r7, #48]	; 0x30
 800fe66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe6c:	e841 2300 	strex	r3, r2, [r1]
 800fe70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d1e6      	bne.n	800fe46 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	e853 3f00 	ldrex	r3, [r3]
 800fe84:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe8c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe96:	61fb      	str	r3, [r7, #28]
 800fe98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9a:	69b9      	ldr	r1, [r7, #24]
 800fe9c:	69fa      	ldr	r2, [r7, #28]
 800fe9e:	e841 2300 	strex	r3, r2, [r1]
 800fea2:	617b      	str	r3, [r7, #20]
   return(result);
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d1e6      	bne.n	800fe78 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800feaa:	e018      	b.n	800fede <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800feb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800feb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb4:	881a      	ldrh	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800febe:	b292      	uxth	r2, r2
 800fec0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fec6:	1c9a      	adds	r2, r3, #2
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	3b01      	subs	r3, #1
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800fede:	bf00      	nop
 800fee0:	3744      	adds	r7, #68	; 0x44
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b088      	sub	sp, #32
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	e853 3f00 	ldrex	r3, [r3]
 800fefe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	61bb      	str	r3, [r7, #24]
 800ff12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff14:	6979      	ldr	r1, [r7, #20]
 800ff16:	69ba      	ldr	r2, [r7, #24]
 800ff18:	e841 2300 	strex	r3, r2, [r1]
 800ff1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1e6      	bne.n	800fef2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2220      	movs	r2, #32
 800ff28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7f9 f89f 	bl	8009074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff36:	bf00      	nop
 800ff38:	3720      	adds	r7, #32
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b096      	sub	sp, #88	; 0x58
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff54:	2b22      	cmp	r3, #34	; 0x22
 800ff56:	f040 8094 	bne.w	8010082 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ff68:	b2d9      	uxtb	r1, r3
 800ff6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff74:	400a      	ands	r2, r1
 800ff76:	b2d2      	uxtb	r2, r2
 800ff78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff7e:	1c5a      	adds	r2, r3, #1
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d179      	bne.n	8010096 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffaa:	e853 3f00 	ldrex	r3, [r3]
 800ffae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffb6:	653b      	str	r3, [r7, #80]	; 0x50
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffc0:	647b      	str	r3, [r7, #68]	; 0x44
 800ffc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffc8:	e841 2300 	strex	r3, r2, [r1]
 800ffcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1e6      	bne.n	800ffa2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	3308      	adds	r3, #8
 800ffda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffde:	e853 3f00 	ldrex	r3, [r3]
 800ffe2:	623b      	str	r3, [r7, #32]
   return(result);
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
 800ffe6:	f023 0301 	bic.w	r3, r3, #1
 800ffea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3308      	adds	r3, #8
 800fff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fff4:	633a      	str	r2, [r7, #48]	; 0x30
 800fff6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fffc:	e841 2300 	strex	r3, r2, [r1]
 8010000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1e5      	bne.n	800ffd4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2220      	movs	r2, #32
 801000c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010018:	2b01      	cmp	r3, #1
 801001a:	d12e      	bne.n	801007a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	e853 3f00 	ldrex	r3, [r3]
 801002e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f023 0310 	bic.w	r3, r3, #16
 8010036:	64bb      	str	r3, [r7, #72]	; 0x48
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	461a      	mov	r2, r3
 801003e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010040:	61fb      	str	r3, [r7, #28]
 8010042:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010044:	69b9      	ldr	r1, [r7, #24]
 8010046:	69fa      	ldr	r2, [r7, #28]
 8010048:	e841 2300 	strex	r3, r2, [r1]
 801004c:	617b      	str	r3, [r7, #20]
   return(result);
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1e6      	bne.n	8010022 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	69db      	ldr	r3, [r3, #28]
 801005a:	f003 0310 	and.w	r3, r3, #16
 801005e:	2b10      	cmp	r3, #16
 8010060:	d103      	bne.n	801006a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2210      	movs	r2, #16
 8010068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff f924 	bl	800f2c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010078:	e00d      	b.n	8010096 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7f1 ff0a 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 8010080:	e009      	b.n	8010096 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	8b1b      	ldrh	r3, [r3, #24]
 8010088:	b29a      	uxth	r2, r3
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f042 0208 	orr.w	r2, r2, #8
 8010092:	b292      	uxth	r2, r2
 8010094:	831a      	strh	r2, [r3, #24]
}
 8010096:	bf00      	nop
 8010098:	3758      	adds	r7, #88	; 0x58
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b096      	sub	sp, #88	; 0x58
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100b4:	2b22      	cmp	r3, #34	; 0x22
 80100b6:	f040 8094 	bne.w	80101e2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80100c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100c8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80100ca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80100ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80100d2:	4013      	ands	r3, r2
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100de:	1c9a      	adds	r2, r3, #2
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	3b01      	subs	r3, #1
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d179      	bne.n	80101f6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801010a:	e853 3f00 	ldrex	r3, [r3]
 801010e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	461a      	mov	r2, r3
 801011e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010120:	643b      	str	r3, [r7, #64]	; 0x40
 8010122:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010128:	e841 2300 	strex	r3, r2, [r1]
 801012c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801012e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1e6      	bne.n	8010102 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3308      	adds	r3, #8
 801013a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	e853 3f00 	ldrex	r3, [r3]
 8010142:	61fb      	str	r3, [r7, #28]
   return(result);
 8010144:	69fb      	ldr	r3, [r7, #28]
 8010146:	f023 0301 	bic.w	r3, r3, #1
 801014a:	64bb      	str	r3, [r7, #72]	; 0x48
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	3308      	adds	r3, #8
 8010152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801015a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801015c:	e841 2300 	strex	r3, r2, [r1]
 8010160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1e5      	bne.n	8010134 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2220      	movs	r2, #32
 801016c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2200      	movs	r2, #0
 8010172:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010178:	2b01      	cmp	r3, #1
 801017a:	d12e      	bne.n	80101da <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	e853 3f00 	ldrex	r3, [r3]
 801018e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	f023 0310 	bic.w	r3, r3, #16
 8010196:	647b      	str	r3, [r7, #68]	; 0x44
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	461a      	mov	r2, r3
 801019e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101a0:	61bb      	str	r3, [r7, #24]
 80101a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a4:	6979      	ldr	r1, [r7, #20]
 80101a6:	69ba      	ldr	r2, [r7, #24]
 80101a8:	e841 2300 	strex	r3, r2, [r1]
 80101ac:	613b      	str	r3, [r7, #16]
   return(result);
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1e6      	bne.n	8010182 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	69db      	ldr	r3, [r3, #28]
 80101ba:	f003 0310 	and.w	r3, r3, #16
 80101be:	2b10      	cmp	r3, #16
 80101c0:	d103      	bne.n	80101ca <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2210      	movs	r2, #16
 80101c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff f874 	bl	800f2c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101d8:	e00d      	b.n	80101f6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7f1 fe5a 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 80101e0:	e009      	b.n	80101f6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	8b1b      	ldrh	r3, [r3, #24]
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f042 0208 	orr.w	r2, r2, #8
 80101f2:	b292      	uxth	r2, r2
 80101f4:	831a      	strh	r2, [r3, #24]
}
 80101f6:	bf00      	nop
 80101f8:	3758      	adds	r7, #88	; 0x58
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80101fe:	b480      	push	{r7}
 8010200:	b083      	sub	sp, #12
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010206:	bf00      	nop
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <_ZdlPvj>:
 8010212:	f000 b800 	b.w	8010216 <_ZdlPv>

08010216 <_ZdlPv>:
 8010216:	f000 b82b 	b.w	8010270 <free>
	...

0801021c <__errno>:
 801021c:	4b01      	ldr	r3, [pc, #4]	; (8010224 <__errno+0x8>)
 801021e:	6818      	ldr	r0, [r3, #0]
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	20000024 	.word	0x20000024

08010228 <__libc_init_array>:
 8010228:	b570      	push	{r4, r5, r6, lr}
 801022a:	4d0d      	ldr	r5, [pc, #52]	; (8010260 <__libc_init_array+0x38>)
 801022c:	4c0d      	ldr	r4, [pc, #52]	; (8010264 <__libc_init_array+0x3c>)
 801022e:	1b64      	subs	r4, r4, r5
 8010230:	10a4      	asrs	r4, r4, #2
 8010232:	2600      	movs	r6, #0
 8010234:	42a6      	cmp	r6, r4
 8010236:	d109      	bne.n	801024c <__libc_init_array+0x24>
 8010238:	4d0b      	ldr	r5, [pc, #44]	; (8010268 <__libc_init_array+0x40>)
 801023a:	4c0c      	ldr	r4, [pc, #48]	; (801026c <__libc_init_array+0x44>)
 801023c:	f000 fc96 	bl	8010b6c <_init>
 8010240:	1b64      	subs	r4, r4, r5
 8010242:	10a4      	asrs	r4, r4, #2
 8010244:	2600      	movs	r6, #0
 8010246:	42a6      	cmp	r6, r4
 8010248:	d105      	bne.n	8010256 <__libc_init_array+0x2e>
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010250:	4798      	blx	r3
 8010252:	3601      	adds	r6, #1
 8010254:	e7ee      	b.n	8010234 <__libc_init_array+0xc>
 8010256:	f855 3b04 	ldr.w	r3, [r5], #4
 801025a:	4798      	blx	r3
 801025c:	3601      	adds	r6, #1
 801025e:	e7f2      	b.n	8010246 <__libc_init_array+0x1e>
 8010260:	08011094 	.word	0x08011094
 8010264:	08011094 	.word	0x08011094
 8010268:	08011094 	.word	0x08011094
 801026c:	0801109c 	.word	0x0801109c

08010270 <free>:
 8010270:	4b02      	ldr	r3, [pc, #8]	; (801027c <free+0xc>)
 8010272:	4601      	mov	r1, r0
 8010274:	6818      	ldr	r0, [r3, #0]
 8010276:	f000 b819 	b.w	80102ac <_free_r>
 801027a:	bf00      	nop
 801027c:	20000024 	.word	0x20000024

08010280 <memcpy>:
 8010280:	440a      	add	r2, r1
 8010282:	4291      	cmp	r1, r2
 8010284:	f100 33ff 	add.w	r3, r0, #4294967295
 8010288:	d100      	bne.n	801028c <memcpy+0xc>
 801028a:	4770      	bx	lr
 801028c:	b510      	push	{r4, lr}
 801028e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010296:	4291      	cmp	r1, r2
 8010298:	d1f9      	bne.n	801028e <memcpy+0xe>
 801029a:	bd10      	pop	{r4, pc}

0801029c <memset>:
 801029c:	4402      	add	r2, r0
 801029e:	4603      	mov	r3, r0
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d100      	bne.n	80102a6 <memset+0xa>
 80102a4:	4770      	bx	lr
 80102a6:	f803 1b01 	strb.w	r1, [r3], #1
 80102aa:	e7f9      	b.n	80102a0 <memset+0x4>

080102ac <_free_r>:
 80102ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ae:	2900      	cmp	r1, #0
 80102b0:	d044      	beq.n	801033c <_free_r+0x90>
 80102b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102b6:	9001      	str	r0, [sp, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f1a1 0404 	sub.w	r4, r1, #4
 80102be:	bfb8      	it	lt
 80102c0:	18e4      	addlt	r4, r4, r3
 80102c2:	f000 f903 	bl	80104cc <__malloc_lock>
 80102c6:	4a1e      	ldr	r2, [pc, #120]	; (8010340 <_free_r+0x94>)
 80102c8:	9801      	ldr	r0, [sp, #4]
 80102ca:	6813      	ldr	r3, [r2, #0]
 80102cc:	b933      	cbnz	r3, 80102dc <_free_r+0x30>
 80102ce:	6063      	str	r3, [r4, #4]
 80102d0:	6014      	str	r4, [r2, #0]
 80102d2:	b003      	add	sp, #12
 80102d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102d8:	f000 b8fe 	b.w	80104d8 <__malloc_unlock>
 80102dc:	42a3      	cmp	r3, r4
 80102de:	d908      	bls.n	80102f2 <_free_r+0x46>
 80102e0:	6825      	ldr	r5, [r4, #0]
 80102e2:	1961      	adds	r1, r4, r5
 80102e4:	428b      	cmp	r3, r1
 80102e6:	bf01      	itttt	eq
 80102e8:	6819      	ldreq	r1, [r3, #0]
 80102ea:	685b      	ldreq	r3, [r3, #4]
 80102ec:	1949      	addeq	r1, r1, r5
 80102ee:	6021      	streq	r1, [r4, #0]
 80102f0:	e7ed      	b.n	80102ce <_free_r+0x22>
 80102f2:	461a      	mov	r2, r3
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	b10b      	cbz	r3, 80102fc <_free_r+0x50>
 80102f8:	42a3      	cmp	r3, r4
 80102fa:	d9fa      	bls.n	80102f2 <_free_r+0x46>
 80102fc:	6811      	ldr	r1, [r2, #0]
 80102fe:	1855      	adds	r5, r2, r1
 8010300:	42a5      	cmp	r5, r4
 8010302:	d10b      	bne.n	801031c <_free_r+0x70>
 8010304:	6824      	ldr	r4, [r4, #0]
 8010306:	4421      	add	r1, r4
 8010308:	1854      	adds	r4, r2, r1
 801030a:	42a3      	cmp	r3, r4
 801030c:	6011      	str	r1, [r2, #0]
 801030e:	d1e0      	bne.n	80102d2 <_free_r+0x26>
 8010310:	681c      	ldr	r4, [r3, #0]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	6053      	str	r3, [r2, #4]
 8010316:	4421      	add	r1, r4
 8010318:	6011      	str	r1, [r2, #0]
 801031a:	e7da      	b.n	80102d2 <_free_r+0x26>
 801031c:	d902      	bls.n	8010324 <_free_r+0x78>
 801031e:	230c      	movs	r3, #12
 8010320:	6003      	str	r3, [r0, #0]
 8010322:	e7d6      	b.n	80102d2 <_free_r+0x26>
 8010324:	6825      	ldr	r5, [r4, #0]
 8010326:	1961      	adds	r1, r4, r5
 8010328:	428b      	cmp	r3, r1
 801032a:	bf04      	itt	eq
 801032c:	6819      	ldreq	r1, [r3, #0]
 801032e:	685b      	ldreq	r3, [r3, #4]
 8010330:	6063      	str	r3, [r4, #4]
 8010332:	bf04      	itt	eq
 8010334:	1949      	addeq	r1, r1, r5
 8010336:	6021      	streq	r1, [r4, #0]
 8010338:	6054      	str	r4, [r2, #4]
 801033a:	e7ca      	b.n	80102d2 <_free_r+0x26>
 801033c:	b003      	add	sp, #12
 801033e:	bd30      	pop	{r4, r5, pc}
 8010340:	20000f30 	.word	0x20000f30

08010344 <sbrk_aligned>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	4e0e      	ldr	r6, [pc, #56]	; (8010380 <sbrk_aligned+0x3c>)
 8010348:	460c      	mov	r4, r1
 801034a:	6831      	ldr	r1, [r6, #0]
 801034c:	4605      	mov	r5, r0
 801034e:	b911      	cbnz	r1, 8010356 <sbrk_aligned+0x12>
 8010350:	f000 f88c 	bl	801046c <_sbrk_r>
 8010354:	6030      	str	r0, [r6, #0]
 8010356:	4621      	mov	r1, r4
 8010358:	4628      	mov	r0, r5
 801035a:	f000 f887 	bl	801046c <_sbrk_r>
 801035e:	1c43      	adds	r3, r0, #1
 8010360:	d00a      	beq.n	8010378 <sbrk_aligned+0x34>
 8010362:	1cc4      	adds	r4, r0, #3
 8010364:	f024 0403 	bic.w	r4, r4, #3
 8010368:	42a0      	cmp	r0, r4
 801036a:	d007      	beq.n	801037c <sbrk_aligned+0x38>
 801036c:	1a21      	subs	r1, r4, r0
 801036e:	4628      	mov	r0, r5
 8010370:	f000 f87c 	bl	801046c <_sbrk_r>
 8010374:	3001      	adds	r0, #1
 8010376:	d101      	bne.n	801037c <sbrk_aligned+0x38>
 8010378:	f04f 34ff 	mov.w	r4, #4294967295
 801037c:	4620      	mov	r0, r4
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	20000f34 	.word	0x20000f34

08010384 <_malloc_r>:
 8010384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010388:	1ccd      	adds	r5, r1, #3
 801038a:	f025 0503 	bic.w	r5, r5, #3
 801038e:	3508      	adds	r5, #8
 8010390:	2d0c      	cmp	r5, #12
 8010392:	bf38      	it	cc
 8010394:	250c      	movcc	r5, #12
 8010396:	2d00      	cmp	r5, #0
 8010398:	4607      	mov	r7, r0
 801039a:	db01      	blt.n	80103a0 <_malloc_r+0x1c>
 801039c:	42a9      	cmp	r1, r5
 801039e:	d905      	bls.n	80103ac <_malloc_r+0x28>
 80103a0:	230c      	movs	r3, #12
 80103a2:	603b      	str	r3, [r7, #0]
 80103a4:	2600      	movs	r6, #0
 80103a6:	4630      	mov	r0, r6
 80103a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ac:	4e2e      	ldr	r6, [pc, #184]	; (8010468 <_malloc_r+0xe4>)
 80103ae:	f000 f88d 	bl	80104cc <__malloc_lock>
 80103b2:	6833      	ldr	r3, [r6, #0]
 80103b4:	461c      	mov	r4, r3
 80103b6:	bb34      	cbnz	r4, 8010406 <_malloc_r+0x82>
 80103b8:	4629      	mov	r1, r5
 80103ba:	4638      	mov	r0, r7
 80103bc:	f7ff ffc2 	bl	8010344 <sbrk_aligned>
 80103c0:	1c43      	adds	r3, r0, #1
 80103c2:	4604      	mov	r4, r0
 80103c4:	d14d      	bne.n	8010462 <_malloc_r+0xde>
 80103c6:	6834      	ldr	r4, [r6, #0]
 80103c8:	4626      	mov	r6, r4
 80103ca:	2e00      	cmp	r6, #0
 80103cc:	d140      	bne.n	8010450 <_malloc_r+0xcc>
 80103ce:	6823      	ldr	r3, [r4, #0]
 80103d0:	4631      	mov	r1, r6
 80103d2:	4638      	mov	r0, r7
 80103d4:	eb04 0803 	add.w	r8, r4, r3
 80103d8:	f000 f848 	bl	801046c <_sbrk_r>
 80103dc:	4580      	cmp	r8, r0
 80103de:	d13a      	bne.n	8010456 <_malloc_r+0xd2>
 80103e0:	6821      	ldr	r1, [r4, #0]
 80103e2:	3503      	adds	r5, #3
 80103e4:	1a6d      	subs	r5, r5, r1
 80103e6:	f025 0503 	bic.w	r5, r5, #3
 80103ea:	3508      	adds	r5, #8
 80103ec:	2d0c      	cmp	r5, #12
 80103ee:	bf38      	it	cc
 80103f0:	250c      	movcc	r5, #12
 80103f2:	4629      	mov	r1, r5
 80103f4:	4638      	mov	r0, r7
 80103f6:	f7ff ffa5 	bl	8010344 <sbrk_aligned>
 80103fa:	3001      	adds	r0, #1
 80103fc:	d02b      	beq.n	8010456 <_malloc_r+0xd2>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	442b      	add	r3, r5
 8010402:	6023      	str	r3, [r4, #0]
 8010404:	e00e      	b.n	8010424 <_malloc_r+0xa0>
 8010406:	6822      	ldr	r2, [r4, #0]
 8010408:	1b52      	subs	r2, r2, r5
 801040a:	d41e      	bmi.n	801044a <_malloc_r+0xc6>
 801040c:	2a0b      	cmp	r2, #11
 801040e:	d916      	bls.n	801043e <_malloc_r+0xba>
 8010410:	1961      	adds	r1, r4, r5
 8010412:	42a3      	cmp	r3, r4
 8010414:	6025      	str	r5, [r4, #0]
 8010416:	bf18      	it	ne
 8010418:	6059      	strne	r1, [r3, #4]
 801041a:	6863      	ldr	r3, [r4, #4]
 801041c:	bf08      	it	eq
 801041e:	6031      	streq	r1, [r6, #0]
 8010420:	5162      	str	r2, [r4, r5]
 8010422:	604b      	str	r3, [r1, #4]
 8010424:	4638      	mov	r0, r7
 8010426:	f104 060b 	add.w	r6, r4, #11
 801042a:	f000 f855 	bl	80104d8 <__malloc_unlock>
 801042e:	f026 0607 	bic.w	r6, r6, #7
 8010432:	1d23      	adds	r3, r4, #4
 8010434:	1af2      	subs	r2, r6, r3
 8010436:	d0b6      	beq.n	80103a6 <_malloc_r+0x22>
 8010438:	1b9b      	subs	r3, r3, r6
 801043a:	50a3      	str	r3, [r4, r2]
 801043c:	e7b3      	b.n	80103a6 <_malloc_r+0x22>
 801043e:	6862      	ldr	r2, [r4, #4]
 8010440:	42a3      	cmp	r3, r4
 8010442:	bf0c      	ite	eq
 8010444:	6032      	streq	r2, [r6, #0]
 8010446:	605a      	strne	r2, [r3, #4]
 8010448:	e7ec      	b.n	8010424 <_malloc_r+0xa0>
 801044a:	4623      	mov	r3, r4
 801044c:	6864      	ldr	r4, [r4, #4]
 801044e:	e7b2      	b.n	80103b6 <_malloc_r+0x32>
 8010450:	4634      	mov	r4, r6
 8010452:	6876      	ldr	r6, [r6, #4]
 8010454:	e7b9      	b.n	80103ca <_malloc_r+0x46>
 8010456:	230c      	movs	r3, #12
 8010458:	603b      	str	r3, [r7, #0]
 801045a:	4638      	mov	r0, r7
 801045c:	f000 f83c 	bl	80104d8 <__malloc_unlock>
 8010460:	e7a1      	b.n	80103a6 <_malloc_r+0x22>
 8010462:	6025      	str	r5, [r4, #0]
 8010464:	e7de      	b.n	8010424 <_malloc_r+0xa0>
 8010466:	bf00      	nop
 8010468:	20000f30 	.word	0x20000f30

0801046c <_sbrk_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d06      	ldr	r5, [pc, #24]	; (8010488 <_sbrk_r+0x1c>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	602b      	str	r3, [r5, #0]
 8010478:	f7f2 fc94 	bl	8002da4 <_sbrk>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_sbrk_r+0x1a>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_sbrk_r+0x1a>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	20000f38 	.word	0x20000f38

0801048c <siprintf>:
 801048c:	b40e      	push	{r1, r2, r3}
 801048e:	b500      	push	{lr}
 8010490:	b09c      	sub	sp, #112	; 0x70
 8010492:	ab1d      	add	r3, sp, #116	; 0x74
 8010494:	9002      	str	r0, [sp, #8]
 8010496:	9006      	str	r0, [sp, #24]
 8010498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801049c:	4809      	ldr	r0, [pc, #36]	; (80104c4 <siprintf+0x38>)
 801049e:	9107      	str	r1, [sp, #28]
 80104a0:	9104      	str	r1, [sp, #16]
 80104a2:	4909      	ldr	r1, [pc, #36]	; (80104c8 <siprintf+0x3c>)
 80104a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80104a8:	9105      	str	r1, [sp, #20]
 80104aa:	6800      	ldr	r0, [r0, #0]
 80104ac:	9301      	str	r3, [sp, #4]
 80104ae:	a902      	add	r1, sp, #8
 80104b0:	f000 f874 	bl	801059c <_svfiprintf_r>
 80104b4:	9b02      	ldr	r3, [sp, #8]
 80104b6:	2200      	movs	r2, #0
 80104b8:	701a      	strb	r2, [r3, #0]
 80104ba:	b01c      	add	sp, #112	; 0x70
 80104bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80104c0:	b003      	add	sp, #12
 80104c2:	4770      	bx	lr
 80104c4:	20000024 	.word	0x20000024
 80104c8:	ffff0208 	.word	0xffff0208

080104cc <__malloc_lock>:
 80104cc:	4801      	ldr	r0, [pc, #4]	; (80104d4 <__malloc_lock+0x8>)
 80104ce:	f000 baf9 	b.w	8010ac4 <__retarget_lock_acquire_recursive>
 80104d2:	bf00      	nop
 80104d4:	20000f3c 	.word	0x20000f3c

080104d8 <__malloc_unlock>:
 80104d8:	4801      	ldr	r0, [pc, #4]	; (80104e0 <__malloc_unlock+0x8>)
 80104da:	f000 baf4 	b.w	8010ac6 <__retarget_lock_release_recursive>
 80104de:	bf00      	nop
 80104e0:	20000f3c 	.word	0x20000f3c

080104e4 <__ssputs_r>:
 80104e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104e8:	688e      	ldr	r6, [r1, #8]
 80104ea:	429e      	cmp	r6, r3
 80104ec:	4682      	mov	sl, r0
 80104ee:	460c      	mov	r4, r1
 80104f0:	4690      	mov	r8, r2
 80104f2:	461f      	mov	r7, r3
 80104f4:	d838      	bhi.n	8010568 <__ssputs_r+0x84>
 80104f6:	898a      	ldrh	r2, [r1, #12]
 80104f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104fc:	d032      	beq.n	8010564 <__ssputs_r+0x80>
 80104fe:	6825      	ldr	r5, [r4, #0]
 8010500:	6909      	ldr	r1, [r1, #16]
 8010502:	eba5 0901 	sub.w	r9, r5, r1
 8010506:	6965      	ldr	r5, [r4, #20]
 8010508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801050c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010510:	3301      	adds	r3, #1
 8010512:	444b      	add	r3, r9
 8010514:	106d      	asrs	r5, r5, #1
 8010516:	429d      	cmp	r5, r3
 8010518:	bf38      	it	cc
 801051a:	461d      	movcc	r5, r3
 801051c:	0553      	lsls	r3, r2, #21
 801051e:	d531      	bpl.n	8010584 <__ssputs_r+0xa0>
 8010520:	4629      	mov	r1, r5
 8010522:	f7ff ff2f 	bl	8010384 <_malloc_r>
 8010526:	4606      	mov	r6, r0
 8010528:	b950      	cbnz	r0, 8010540 <__ssputs_r+0x5c>
 801052a:	230c      	movs	r3, #12
 801052c:	f8ca 3000 	str.w	r3, [sl]
 8010530:	89a3      	ldrh	r3, [r4, #12]
 8010532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010536:	81a3      	strh	r3, [r4, #12]
 8010538:	f04f 30ff 	mov.w	r0, #4294967295
 801053c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010540:	6921      	ldr	r1, [r4, #16]
 8010542:	464a      	mov	r2, r9
 8010544:	f7ff fe9c 	bl	8010280 <memcpy>
 8010548:	89a3      	ldrh	r3, [r4, #12]
 801054a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801054e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010552:	81a3      	strh	r3, [r4, #12]
 8010554:	6126      	str	r6, [r4, #16]
 8010556:	6165      	str	r5, [r4, #20]
 8010558:	444e      	add	r6, r9
 801055a:	eba5 0509 	sub.w	r5, r5, r9
 801055e:	6026      	str	r6, [r4, #0]
 8010560:	60a5      	str	r5, [r4, #8]
 8010562:	463e      	mov	r6, r7
 8010564:	42be      	cmp	r6, r7
 8010566:	d900      	bls.n	801056a <__ssputs_r+0x86>
 8010568:	463e      	mov	r6, r7
 801056a:	6820      	ldr	r0, [r4, #0]
 801056c:	4632      	mov	r2, r6
 801056e:	4641      	mov	r1, r8
 8010570:	f000 faaa 	bl	8010ac8 <memmove>
 8010574:	68a3      	ldr	r3, [r4, #8]
 8010576:	1b9b      	subs	r3, r3, r6
 8010578:	60a3      	str	r3, [r4, #8]
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	4433      	add	r3, r6
 801057e:	6023      	str	r3, [r4, #0]
 8010580:	2000      	movs	r0, #0
 8010582:	e7db      	b.n	801053c <__ssputs_r+0x58>
 8010584:	462a      	mov	r2, r5
 8010586:	f000 fab9 	bl	8010afc <_realloc_r>
 801058a:	4606      	mov	r6, r0
 801058c:	2800      	cmp	r0, #0
 801058e:	d1e1      	bne.n	8010554 <__ssputs_r+0x70>
 8010590:	6921      	ldr	r1, [r4, #16]
 8010592:	4650      	mov	r0, sl
 8010594:	f7ff fe8a 	bl	80102ac <_free_r>
 8010598:	e7c7      	b.n	801052a <__ssputs_r+0x46>
	...

0801059c <_svfiprintf_r>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	4698      	mov	r8, r3
 80105a2:	898b      	ldrh	r3, [r1, #12]
 80105a4:	061b      	lsls	r3, r3, #24
 80105a6:	b09d      	sub	sp, #116	; 0x74
 80105a8:	4607      	mov	r7, r0
 80105aa:	460d      	mov	r5, r1
 80105ac:	4614      	mov	r4, r2
 80105ae:	d50e      	bpl.n	80105ce <_svfiprintf_r+0x32>
 80105b0:	690b      	ldr	r3, [r1, #16]
 80105b2:	b963      	cbnz	r3, 80105ce <_svfiprintf_r+0x32>
 80105b4:	2140      	movs	r1, #64	; 0x40
 80105b6:	f7ff fee5 	bl	8010384 <_malloc_r>
 80105ba:	6028      	str	r0, [r5, #0]
 80105bc:	6128      	str	r0, [r5, #16]
 80105be:	b920      	cbnz	r0, 80105ca <_svfiprintf_r+0x2e>
 80105c0:	230c      	movs	r3, #12
 80105c2:	603b      	str	r3, [r7, #0]
 80105c4:	f04f 30ff 	mov.w	r0, #4294967295
 80105c8:	e0d1      	b.n	801076e <_svfiprintf_r+0x1d2>
 80105ca:	2340      	movs	r3, #64	; 0x40
 80105cc:	616b      	str	r3, [r5, #20]
 80105ce:	2300      	movs	r3, #0
 80105d0:	9309      	str	r3, [sp, #36]	; 0x24
 80105d2:	2320      	movs	r3, #32
 80105d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80105dc:	2330      	movs	r3, #48	; 0x30
 80105de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010788 <_svfiprintf_r+0x1ec>
 80105e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105e6:	f04f 0901 	mov.w	r9, #1
 80105ea:	4623      	mov	r3, r4
 80105ec:	469a      	mov	sl, r3
 80105ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105f2:	b10a      	cbz	r2, 80105f8 <_svfiprintf_r+0x5c>
 80105f4:	2a25      	cmp	r2, #37	; 0x25
 80105f6:	d1f9      	bne.n	80105ec <_svfiprintf_r+0x50>
 80105f8:	ebba 0b04 	subs.w	fp, sl, r4
 80105fc:	d00b      	beq.n	8010616 <_svfiprintf_r+0x7a>
 80105fe:	465b      	mov	r3, fp
 8010600:	4622      	mov	r2, r4
 8010602:	4629      	mov	r1, r5
 8010604:	4638      	mov	r0, r7
 8010606:	f7ff ff6d 	bl	80104e4 <__ssputs_r>
 801060a:	3001      	adds	r0, #1
 801060c:	f000 80aa 	beq.w	8010764 <_svfiprintf_r+0x1c8>
 8010610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010612:	445a      	add	r2, fp
 8010614:	9209      	str	r2, [sp, #36]	; 0x24
 8010616:	f89a 3000 	ldrb.w	r3, [sl]
 801061a:	2b00      	cmp	r3, #0
 801061c:	f000 80a2 	beq.w	8010764 <_svfiprintf_r+0x1c8>
 8010620:	2300      	movs	r3, #0
 8010622:	f04f 32ff 	mov.w	r2, #4294967295
 8010626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801062a:	f10a 0a01 	add.w	sl, sl, #1
 801062e:	9304      	str	r3, [sp, #16]
 8010630:	9307      	str	r3, [sp, #28]
 8010632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010636:	931a      	str	r3, [sp, #104]	; 0x68
 8010638:	4654      	mov	r4, sl
 801063a:	2205      	movs	r2, #5
 801063c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010640:	4851      	ldr	r0, [pc, #324]	; (8010788 <_svfiprintf_r+0x1ec>)
 8010642:	f7ef fdcd 	bl	80001e0 <memchr>
 8010646:	9a04      	ldr	r2, [sp, #16]
 8010648:	b9d8      	cbnz	r0, 8010682 <_svfiprintf_r+0xe6>
 801064a:	06d0      	lsls	r0, r2, #27
 801064c:	bf44      	itt	mi
 801064e:	2320      	movmi	r3, #32
 8010650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010654:	0711      	lsls	r1, r2, #28
 8010656:	bf44      	itt	mi
 8010658:	232b      	movmi	r3, #43	; 0x2b
 801065a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801065e:	f89a 3000 	ldrb.w	r3, [sl]
 8010662:	2b2a      	cmp	r3, #42	; 0x2a
 8010664:	d015      	beq.n	8010692 <_svfiprintf_r+0xf6>
 8010666:	9a07      	ldr	r2, [sp, #28]
 8010668:	4654      	mov	r4, sl
 801066a:	2000      	movs	r0, #0
 801066c:	f04f 0c0a 	mov.w	ip, #10
 8010670:	4621      	mov	r1, r4
 8010672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010676:	3b30      	subs	r3, #48	; 0x30
 8010678:	2b09      	cmp	r3, #9
 801067a:	d94e      	bls.n	801071a <_svfiprintf_r+0x17e>
 801067c:	b1b0      	cbz	r0, 80106ac <_svfiprintf_r+0x110>
 801067e:	9207      	str	r2, [sp, #28]
 8010680:	e014      	b.n	80106ac <_svfiprintf_r+0x110>
 8010682:	eba0 0308 	sub.w	r3, r0, r8
 8010686:	fa09 f303 	lsl.w	r3, r9, r3
 801068a:	4313      	orrs	r3, r2
 801068c:	9304      	str	r3, [sp, #16]
 801068e:	46a2      	mov	sl, r4
 8010690:	e7d2      	b.n	8010638 <_svfiprintf_r+0x9c>
 8010692:	9b03      	ldr	r3, [sp, #12]
 8010694:	1d19      	adds	r1, r3, #4
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	9103      	str	r1, [sp, #12]
 801069a:	2b00      	cmp	r3, #0
 801069c:	bfbb      	ittet	lt
 801069e:	425b      	neglt	r3, r3
 80106a0:	f042 0202 	orrlt.w	r2, r2, #2
 80106a4:	9307      	strge	r3, [sp, #28]
 80106a6:	9307      	strlt	r3, [sp, #28]
 80106a8:	bfb8      	it	lt
 80106aa:	9204      	strlt	r2, [sp, #16]
 80106ac:	7823      	ldrb	r3, [r4, #0]
 80106ae:	2b2e      	cmp	r3, #46	; 0x2e
 80106b0:	d10c      	bne.n	80106cc <_svfiprintf_r+0x130>
 80106b2:	7863      	ldrb	r3, [r4, #1]
 80106b4:	2b2a      	cmp	r3, #42	; 0x2a
 80106b6:	d135      	bne.n	8010724 <_svfiprintf_r+0x188>
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	1d1a      	adds	r2, r3, #4
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	9203      	str	r2, [sp, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	bfb8      	it	lt
 80106c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80106c8:	3402      	adds	r4, #2
 80106ca:	9305      	str	r3, [sp, #20]
 80106cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010798 <_svfiprintf_r+0x1fc>
 80106d0:	7821      	ldrb	r1, [r4, #0]
 80106d2:	2203      	movs	r2, #3
 80106d4:	4650      	mov	r0, sl
 80106d6:	f7ef fd83 	bl	80001e0 <memchr>
 80106da:	b140      	cbz	r0, 80106ee <_svfiprintf_r+0x152>
 80106dc:	2340      	movs	r3, #64	; 0x40
 80106de:	eba0 000a 	sub.w	r0, r0, sl
 80106e2:	fa03 f000 	lsl.w	r0, r3, r0
 80106e6:	9b04      	ldr	r3, [sp, #16]
 80106e8:	4303      	orrs	r3, r0
 80106ea:	3401      	adds	r4, #1
 80106ec:	9304      	str	r3, [sp, #16]
 80106ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106f2:	4826      	ldr	r0, [pc, #152]	; (801078c <_svfiprintf_r+0x1f0>)
 80106f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106f8:	2206      	movs	r2, #6
 80106fa:	f7ef fd71 	bl	80001e0 <memchr>
 80106fe:	2800      	cmp	r0, #0
 8010700:	d038      	beq.n	8010774 <_svfiprintf_r+0x1d8>
 8010702:	4b23      	ldr	r3, [pc, #140]	; (8010790 <_svfiprintf_r+0x1f4>)
 8010704:	bb1b      	cbnz	r3, 801074e <_svfiprintf_r+0x1b2>
 8010706:	9b03      	ldr	r3, [sp, #12]
 8010708:	3307      	adds	r3, #7
 801070a:	f023 0307 	bic.w	r3, r3, #7
 801070e:	3308      	adds	r3, #8
 8010710:	9303      	str	r3, [sp, #12]
 8010712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010714:	4433      	add	r3, r6
 8010716:	9309      	str	r3, [sp, #36]	; 0x24
 8010718:	e767      	b.n	80105ea <_svfiprintf_r+0x4e>
 801071a:	fb0c 3202 	mla	r2, ip, r2, r3
 801071e:	460c      	mov	r4, r1
 8010720:	2001      	movs	r0, #1
 8010722:	e7a5      	b.n	8010670 <_svfiprintf_r+0xd4>
 8010724:	2300      	movs	r3, #0
 8010726:	3401      	adds	r4, #1
 8010728:	9305      	str	r3, [sp, #20]
 801072a:	4619      	mov	r1, r3
 801072c:	f04f 0c0a 	mov.w	ip, #10
 8010730:	4620      	mov	r0, r4
 8010732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010736:	3a30      	subs	r2, #48	; 0x30
 8010738:	2a09      	cmp	r2, #9
 801073a:	d903      	bls.n	8010744 <_svfiprintf_r+0x1a8>
 801073c:	2b00      	cmp	r3, #0
 801073e:	d0c5      	beq.n	80106cc <_svfiprintf_r+0x130>
 8010740:	9105      	str	r1, [sp, #20]
 8010742:	e7c3      	b.n	80106cc <_svfiprintf_r+0x130>
 8010744:	fb0c 2101 	mla	r1, ip, r1, r2
 8010748:	4604      	mov	r4, r0
 801074a:	2301      	movs	r3, #1
 801074c:	e7f0      	b.n	8010730 <_svfiprintf_r+0x194>
 801074e:	ab03      	add	r3, sp, #12
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	462a      	mov	r2, r5
 8010754:	4b0f      	ldr	r3, [pc, #60]	; (8010794 <_svfiprintf_r+0x1f8>)
 8010756:	a904      	add	r1, sp, #16
 8010758:	4638      	mov	r0, r7
 801075a:	f3af 8000 	nop.w
 801075e:	1c42      	adds	r2, r0, #1
 8010760:	4606      	mov	r6, r0
 8010762:	d1d6      	bne.n	8010712 <_svfiprintf_r+0x176>
 8010764:	89ab      	ldrh	r3, [r5, #12]
 8010766:	065b      	lsls	r3, r3, #25
 8010768:	f53f af2c 	bmi.w	80105c4 <_svfiprintf_r+0x28>
 801076c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801076e:	b01d      	add	sp, #116	; 0x74
 8010770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010774:	ab03      	add	r3, sp, #12
 8010776:	9300      	str	r3, [sp, #0]
 8010778:	462a      	mov	r2, r5
 801077a:	4b06      	ldr	r3, [pc, #24]	; (8010794 <_svfiprintf_r+0x1f8>)
 801077c:	a904      	add	r1, sp, #16
 801077e:	4638      	mov	r0, r7
 8010780:	f000 f87a 	bl	8010878 <_printf_i>
 8010784:	e7eb      	b.n	801075e <_svfiprintf_r+0x1c2>
 8010786:	bf00      	nop
 8010788:	08011058 	.word	0x08011058
 801078c:	08011062 	.word	0x08011062
 8010790:	00000000 	.word	0x00000000
 8010794:	080104e5 	.word	0x080104e5
 8010798:	0801105e 	.word	0x0801105e

0801079c <_printf_common>:
 801079c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107a0:	4616      	mov	r6, r2
 80107a2:	4699      	mov	r9, r3
 80107a4:	688a      	ldr	r2, [r1, #8]
 80107a6:	690b      	ldr	r3, [r1, #16]
 80107a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107ac:	4293      	cmp	r3, r2
 80107ae:	bfb8      	it	lt
 80107b0:	4613      	movlt	r3, r2
 80107b2:	6033      	str	r3, [r6, #0]
 80107b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107b8:	4607      	mov	r7, r0
 80107ba:	460c      	mov	r4, r1
 80107bc:	b10a      	cbz	r2, 80107c2 <_printf_common+0x26>
 80107be:	3301      	adds	r3, #1
 80107c0:	6033      	str	r3, [r6, #0]
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	0699      	lsls	r1, r3, #26
 80107c6:	bf42      	ittt	mi
 80107c8:	6833      	ldrmi	r3, [r6, #0]
 80107ca:	3302      	addmi	r3, #2
 80107cc:	6033      	strmi	r3, [r6, #0]
 80107ce:	6825      	ldr	r5, [r4, #0]
 80107d0:	f015 0506 	ands.w	r5, r5, #6
 80107d4:	d106      	bne.n	80107e4 <_printf_common+0x48>
 80107d6:	f104 0a19 	add.w	sl, r4, #25
 80107da:	68e3      	ldr	r3, [r4, #12]
 80107dc:	6832      	ldr	r2, [r6, #0]
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	42ab      	cmp	r3, r5
 80107e2:	dc26      	bgt.n	8010832 <_printf_common+0x96>
 80107e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80107e8:	1e13      	subs	r3, r2, #0
 80107ea:	6822      	ldr	r2, [r4, #0]
 80107ec:	bf18      	it	ne
 80107ee:	2301      	movne	r3, #1
 80107f0:	0692      	lsls	r2, r2, #26
 80107f2:	d42b      	bmi.n	801084c <_printf_common+0xb0>
 80107f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107f8:	4649      	mov	r1, r9
 80107fa:	4638      	mov	r0, r7
 80107fc:	47c0      	blx	r8
 80107fe:	3001      	adds	r0, #1
 8010800:	d01e      	beq.n	8010840 <_printf_common+0xa4>
 8010802:	6823      	ldr	r3, [r4, #0]
 8010804:	68e5      	ldr	r5, [r4, #12]
 8010806:	6832      	ldr	r2, [r6, #0]
 8010808:	f003 0306 	and.w	r3, r3, #6
 801080c:	2b04      	cmp	r3, #4
 801080e:	bf08      	it	eq
 8010810:	1aad      	subeq	r5, r5, r2
 8010812:	68a3      	ldr	r3, [r4, #8]
 8010814:	6922      	ldr	r2, [r4, #16]
 8010816:	bf0c      	ite	eq
 8010818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801081c:	2500      	movne	r5, #0
 801081e:	4293      	cmp	r3, r2
 8010820:	bfc4      	itt	gt
 8010822:	1a9b      	subgt	r3, r3, r2
 8010824:	18ed      	addgt	r5, r5, r3
 8010826:	2600      	movs	r6, #0
 8010828:	341a      	adds	r4, #26
 801082a:	42b5      	cmp	r5, r6
 801082c:	d11a      	bne.n	8010864 <_printf_common+0xc8>
 801082e:	2000      	movs	r0, #0
 8010830:	e008      	b.n	8010844 <_printf_common+0xa8>
 8010832:	2301      	movs	r3, #1
 8010834:	4652      	mov	r2, sl
 8010836:	4649      	mov	r1, r9
 8010838:	4638      	mov	r0, r7
 801083a:	47c0      	blx	r8
 801083c:	3001      	adds	r0, #1
 801083e:	d103      	bne.n	8010848 <_printf_common+0xac>
 8010840:	f04f 30ff 	mov.w	r0, #4294967295
 8010844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010848:	3501      	adds	r5, #1
 801084a:	e7c6      	b.n	80107da <_printf_common+0x3e>
 801084c:	18e1      	adds	r1, r4, r3
 801084e:	1c5a      	adds	r2, r3, #1
 8010850:	2030      	movs	r0, #48	; 0x30
 8010852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010856:	4422      	add	r2, r4
 8010858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801085c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010860:	3302      	adds	r3, #2
 8010862:	e7c7      	b.n	80107f4 <_printf_common+0x58>
 8010864:	2301      	movs	r3, #1
 8010866:	4622      	mov	r2, r4
 8010868:	4649      	mov	r1, r9
 801086a:	4638      	mov	r0, r7
 801086c:	47c0      	blx	r8
 801086e:	3001      	adds	r0, #1
 8010870:	d0e6      	beq.n	8010840 <_printf_common+0xa4>
 8010872:	3601      	adds	r6, #1
 8010874:	e7d9      	b.n	801082a <_printf_common+0x8e>
	...

08010878 <_printf_i>:
 8010878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801087c:	7e0f      	ldrb	r7, [r1, #24]
 801087e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010880:	2f78      	cmp	r7, #120	; 0x78
 8010882:	4691      	mov	r9, r2
 8010884:	4680      	mov	r8, r0
 8010886:	460c      	mov	r4, r1
 8010888:	469a      	mov	sl, r3
 801088a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801088e:	d807      	bhi.n	80108a0 <_printf_i+0x28>
 8010890:	2f62      	cmp	r7, #98	; 0x62
 8010892:	d80a      	bhi.n	80108aa <_printf_i+0x32>
 8010894:	2f00      	cmp	r7, #0
 8010896:	f000 80d8 	beq.w	8010a4a <_printf_i+0x1d2>
 801089a:	2f58      	cmp	r7, #88	; 0x58
 801089c:	f000 80a3 	beq.w	80109e6 <_printf_i+0x16e>
 80108a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108a8:	e03a      	b.n	8010920 <_printf_i+0xa8>
 80108aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108ae:	2b15      	cmp	r3, #21
 80108b0:	d8f6      	bhi.n	80108a0 <_printf_i+0x28>
 80108b2:	a101      	add	r1, pc, #4	; (adr r1, 80108b8 <_printf_i+0x40>)
 80108b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108b8:	08010911 	.word	0x08010911
 80108bc:	08010925 	.word	0x08010925
 80108c0:	080108a1 	.word	0x080108a1
 80108c4:	080108a1 	.word	0x080108a1
 80108c8:	080108a1 	.word	0x080108a1
 80108cc:	080108a1 	.word	0x080108a1
 80108d0:	08010925 	.word	0x08010925
 80108d4:	080108a1 	.word	0x080108a1
 80108d8:	080108a1 	.word	0x080108a1
 80108dc:	080108a1 	.word	0x080108a1
 80108e0:	080108a1 	.word	0x080108a1
 80108e4:	08010a31 	.word	0x08010a31
 80108e8:	08010955 	.word	0x08010955
 80108ec:	08010a13 	.word	0x08010a13
 80108f0:	080108a1 	.word	0x080108a1
 80108f4:	080108a1 	.word	0x080108a1
 80108f8:	08010a53 	.word	0x08010a53
 80108fc:	080108a1 	.word	0x080108a1
 8010900:	08010955 	.word	0x08010955
 8010904:	080108a1 	.word	0x080108a1
 8010908:	080108a1 	.word	0x080108a1
 801090c:	08010a1b 	.word	0x08010a1b
 8010910:	682b      	ldr	r3, [r5, #0]
 8010912:	1d1a      	adds	r2, r3, #4
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	602a      	str	r2, [r5, #0]
 8010918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801091c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010920:	2301      	movs	r3, #1
 8010922:	e0a3      	b.n	8010a6c <_printf_i+0x1f4>
 8010924:	6820      	ldr	r0, [r4, #0]
 8010926:	6829      	ldr	r1, [r5, #0]
 8010928:	0606      	lsls	r6, r0, #24
 801092a:	f101 0304 	add.w	r3, r1, #4
 801092e:	d50a      	bpl.n	8010946 <_printf_i+0xce>
 8010930:	680e      	ldr	r6, [r1, #0]
 8010932:	602b      	str	r3, [r5, #0]
 8010934:	2e00      	cmp	r6, #0
 8010936:	da03      	bge.n	8010940 <_printf_i+0xc8>
 8010938:	232d      	movs	r3, #45	; 0x2d
 801093a:	4276      	negs	r6, r6
 801093c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010940:	485e      	ldr	r0, [pc, #376]	; (8010abc <_printf_i+0x244>)
 8010942:	230a      	movs	r3, #10
 8010944:	e019      	b.n	801097a <_printf_i+0x102>
 8010946:	680e      	ldr	r6, [r1, #0]
 8010948:	602b      	str	r3, [r5, #0]
 801094a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801094e:	bf18      	it	ne
 8010950:	b236      	sxthne	r6, r6
 8010952:	e7ef      	b.n	8010934 <_printf_i+0xbc>
 8010954:	682b      	ldr	r3, [r5, #0]
 8010956:	6820      	ldr	r0, [r4, #0]
 8010958:	1d19      	adds	r1, r3, #4
 801095a:	6029      	str	r1, [r5, #0]
 801095c:	0601      	lsls	r1, r0, #24
 801095e:	d501      	bpl.n	8010964 <_printf_i+0xec>
 8010960:	681e      	ldr	r6, [r3, #0]
 8010962:	e002      	b.n	801096a <_printf_i+0xf2>
 8010964:	0646      	lsls	r6, r0, #25
 8010966:	d5fb      	bpl.n	8010960 <_printf_i+0xe8>
 8010968:	881e      	ldrh	r6, [r3, #0]
 801096a:	4854      	ldr	r0, [pc, #336]	; (8010abc <_printf_i+0x244>)
 801096c:	2f6f      	cmp	r7, #111	; 0x6f
 801096e:	bf0c      	ite	eq
 8010970:	2308      	moveq	r3, #8
 8010972:	230a      	movne	r3, #10
 8010974:	2100      	movs	r1, #0
 8010976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801097a:	6865      	ldr	r5, [r4, #4]
 801097c:	60a5      	str	r5, [r4, #8]
 801097e:	2d00      	cmp	r5, #0
 8010980:	bfa2      	ittt	ge
 8010982:	6821      	ldrge	r1, [r4, #0]
 8010984:	f021 0104 	bicge.w	r1, r1, #4
 8010988:	6021      	strge	r1, [r4, #0]
 801098a:	b90e      	cbnz	r6, 8010990 <_printf_i+0x118>
 801098c:	2d00      	cmp	r5, #0
 801098e:	d04d      	beq.n	8010a2c <_printf_i+0x1b4>
 8010990:	4615      	mov	r5, r2
 8010992:	fbb6 f1f3 	udiv	r1, r6, r3
 8010996:	fb03 6711 	mls	r7, r3, r1, r6
 801099a:	5dc7      	ldrb	r7, [r0, r7]
 801099c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80109a0:	4637      	mov	r7, r6
 80109a2:	42bb      	cmp	r3, r7
 80109a4:	460e      	mov	r6, r1
 80109a6:	d9f4      	bls.n	8010992 <_printf_i+0x11a>
 80109a8:	2b08      	cmp	r3, #8
 80109aa:	d10b      	bne.n	80109c4 <_printf_i+0x14c>
 80109ac:	6823      	ldr	r3, [r4, #0]
 80109ae:	07de      	lsls	r6, r3, #31
 80109b0:	d508      	bpl.n	80109c4 <_printf_i+0x14c>
 80109b2:	6923      	ldr	r3, [r4, #16]
 80109b4:	6861      	ldr	r1, [r4, #4]
 80109b6:	4299      	cmp	r1, r3
 80109b8:	bfde      	ittt	le
 80109ba:	2330      	movle	r3, #48	; 0x30
 80109bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109c4:	1b52      	subs	r2, r2, r5
 80109c6:	6122      	str	r2, [r4, #16]
 80109c8:	f8cd a000 	str.w	sl, [sp]
 80109cc:	464b      	mov	r3, r9
 80109ce:	aa03      	add	r2, sp, #12
 80109d0:	4621      	mov	r1, r4
 80109d2:	4640      	mov	r0, r8
 80109d4:	f7ff fee2 	bl	801079c <_printf_common>
 80109d8:	3001      	adds	r0, #1
 80109da:	d14c      	bne.n	8010a76 <_printf_i+0x1fe>
 80109dc:	f04f 30ff 	mov.w	r0, #4294967295
 80109e0:	b004      	add	sp, #16
 80109e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e6:	4835      	ldr	r0, [pc, #212]	; (8010abc <_printf_i+0x244>)
 80109e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80109ec:	6829      	ldr	r1, [r5, #0]
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80109f4:	6029      	str	r1, [r5, #0]
 80109f6:	061d      	lsls	r5, r3, #24
 80109f8:	d514      	bpl.n	8010a24 <_printf_i+0x1ac>
 80109fa:	07df      	lsls	r7, r3, #31
 80109fc:	bf44      	itt	mi
 80109fe:	f043 0320 	orrmi.w	r3, r3, #32
 8010a02:	6023      	strmi	r3, [r4, #0]
 8010a04:	b91e      	cbnz	r6, 8010a0e <_printf_i+0x196>
 8010a06:	6823      	ldr	r3, [r4, #0]
 8010a08:	f023 0320 	bic.w	r3, r3, #32
 8010a0c:	6023      	str	r3, [r4, #0]
 8010a0e:	2310      	movs	r3, #16
 8010a10:	e7b0      	b.n	8010974 <_printf_i+0xfc>
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	f043 0320 	orr.w	r3, r3, #32
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	2378      	movs	r3, #120	; 0x78
 8010a1c:	4828      	ldr	r0, [pc, #160]	; (8010ac0 <_printf_i+0x248>)
 8010a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a22:	e7e3      	b.n	80109ec <_printf_i+0x174>
 8010a24:	0659      	lsls	r1, r3, #25
 8010a26:	bf48      	it	mi
 8010a28:	b2b6      	uxthmi	r6, r6
 8010a2a:	e7e6      	b.n	80109fa <_printf_i+0x182>
 8010a2c:	4615      	mov	r5, r2
 8010a2e:	e7bb      	b.n	80109a8 <_printf_i+0x130>
 8010a30:	682b      	ldr	r3, [r5, #0]
 8010a32:	6826      	ldr	r6, [r4, #0]
 8010a34:	6961      	ldr	r1, [r4, #20]
 8010a36:	1d18      	adds	r0, r3, #4
 8010a38:	6028      	str	r0, [r5, #0]
 8010a3a:	0635      	lsls	r5, r6, #24
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	d501      	bpl.n	8010a44 <_printf_i+0x1cc>
 8010a40:	6019      	str	r1, [r3, #0]
 8010a42:	e002      	b.n	8010a4a <_printf_i+0x1d2>
 8010a44:	0670      	lsls	r0, r6, #25
 8010a46:	d5fb      	bpl.n	8010a40 <_printf_i+0x1c8>
 8010a48:	8019      	strh	r1, [r3, #0]
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	6123      	str	r3, [r4, #16]
 8010a4e:	4615      	mov	r5, r2
 8010a50:	e7ba      	b.n	80109c8 <_printf_i+0x150>
 8010a52:	682b      	ldr	r3, [r5, #0]
 8010a54:	1d1a      	adds	r2, r3, #4
 8010a56:	602a      	str	r2, [r5, #0]
 8010a58:	681d      	ldr	r5, [r3, #0]
 8010a5a:	6862      	ldr	r2, [r4, #4]
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	4628      	mov	r0, r5
 8010a60:	f7ef fbbe 	bl	80001e0 <memchr>
 8010a64:	b108      	cbz	r0, 8010a6a <_printf_i+0x1f2>
 8010a66:	1b40      	subs	r0, r0, r5
 8010a68:	6060      	str	r0, [r4, #4]
 8010a6a:	6863      	ldr	r3, [r4, #4]
 8010a6c:	6123      	str	r3, [r4, #16]
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a74:	e7a8      	b.n	80109c8 <_printf_i+0x150>
 8010a76:	6923      	ldr	r3, [r4, #16]
 8010a78:	462a      	mov	r2, r5
 8010a7a:	4649      	mov	r1, r9
 8010a7c:	4640      	mov	r0, r8
 8010a7e:	47d0      	blx	sl
 8010a80:	3001      	adds	r0, #1
 8010a82:	d0ab      	beq.n	80109dc <_printf_i+0x164>
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	079b      	lsls	r3, r3, #30
 8010a88:	d413      	bmi.n	8010ab2 <_printf_i+0x23a>
 8010a8a:	68e0      	ldr	r0, [r4, #12]
 8010a8c:	9b03      	ldr	r3, [sp, #12]
 8010a8e:	4298      	cmp	r0, r3
 8010a90:	bfb8      	it	lt
 8010a92:	4618      	movlt	r0, r3
 8010a94:	e7a4      	b.n	80109e0 <_printf_i+0x168>
 8010a96:	2301      	movs	r3, #1
 8010a98:	4632      	mov	r2, r6
 8010a9a:	4649      	mov	r1, r9
 8010a9c:	4640      	mov	r0, r8
 8010a9e:	47d0      	blx	sl
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	d09b      	beq.n	80109dc <_printf_i+0x164>
 8010aa4:	3501      	adds	r5, #1
 8010aa6:	68e3      	ldr	r3, [r4, #12]
 8010aa8:	9903      	ldr	r1, [sp, #12]
 8010aaa:	1a5b      	subs	r3, r3, r1
 8010aac:	42ab      	cmp	r3, r5
 8010aae:	dcf2      	bgt.n	8010a96 <_printf_i+0x21e>
 8010ab0:	e7eb      	b.n	8010a8a <_printf_i+0x212>
 8010ab2:	2500      	movs	r5, #0
 8010ab4:	f104 0619 	add.w	r6, r4, #25
 8010ab8:	e7f5      	b.n	8010aa6 <_printf_i+0x22e>
 8010aba:	bf00      	nop
 8010abc:	08011069 	.word	0x08011069
 8010ac0:	0801107a 	.word	0x0801107a

08010ac4 <__retarget_lock_acquire_recursive>:
 8010ac4:	4770      	bx	lr

08010ac6 <__retarget_lock_release_recursive>:
 8010ac6:	4770      	bx	lr

08010ac8 <memmove>:
 8010ac8:	4288      	cmp	r0, r1
 8010aca:	b510      	push	{r4, lr}
 8010acc:	eb01 0402 	add.w	r4, r1, r2
 8010ad0:	d902      	bls.n	8010ad8 <memmove+0x10>
 8010ad2:	4284      	cmp	r4, r0
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	d807      	bhi.n	8010ae8 <memmove+0x20>
 8010ad8:	1e43      	subs	r3, r0, #1
 8010ada:	42a1      	cmp	r1, r4
 8010adc:	d008      	beq.n	8010af0 <memmove+0x28>
 8010ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ae6:	e7f8      	b.n	8010ada <memmove+0x12>
 8010ae8:	4402      	add	r2, r0
 8010aea:	4601      	mov	r1, r0
 8010aec:	428a      	cmp	r2, r1
 8010aee:	d100      	bne.n	8010af2 <memmove+0x2a>
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010afa:	e7f7      	b.n	8010aec <memmove+0x24>

08010afc <_realloc_r>:
 8010afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b00:	4680      	mov	r8, r0
 8010b02:	4614      	mov	r4, r2
 8010b04:	460e      	mov	r6, r1
 8010b06:	b921      	cbnz	r1, 8010b12 <_realloc_r+0x16>
 8010b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	f7ff bc39 	b.w	8010384 <_malloc_r>
 8010b12:	b92a      	cbnz	r2, 8010b20 <_realloc_r+0x24>
 8010b14:	f7ff fbca 	bl	80102ac <_free_r>
 8010b18:	4625      	mov	r5, r4
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b20:	f000 f81b 	bl	8010b5a <_malloc_usable_size_r>
 8010b24:	4284      	cmp	r4, r0
 8010b26:	4607      	mov	r7, r0
 8010b28:	d802      	bhi.n	8010b30 <_realloc_r+0x34>
 8010b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b2e:	d812      	bhi.n	8010b56 <_realloc_r+0x5a>
 8010b30:	4621      	mov	r1, r4
 8010b32:	4640      	mov	r0, r8
 8010b34:	f7ff fc26 	bl	8010384 <_malloc_r>
 8010b38:	4605      	mov	r5, r0
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d0ed      	beq.n	8010b1a <_realloc_r+0x1e>
 8010b3e:	42bc      	cmp	r4, r7
 8010b40:	4622      	mov	r2, r4
 8010b42:	4631      	mov	r1, r6
 8010b44:	bf28      	it	cs
 8010b46:	463a      	movcs	r2, r7
 8010b48:	f7ff fb9a 	bl	8010280 <memcpy>
 8010b4c:	4631      	mov	r1, r6
 8010b4e:	4640      	mov	r0, r8
 8010b50:	f7ff fbac 	bl	80102ac <_free_r>
 8010b54:	e7e1      	b.n	8010b1a <_realloc_r+0x1e>
 8010b56:	4635      	mov	r5, r6
 8010b58:	e7df      	b.n	8010b1a <_realloc_r+0x1e>

08010b5a <_malloc_usable_size_r>:
 8010b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b5e:	1f18      	subs	r0, r3, #4
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	bfbc      	itt	lt
 8010b64:	580b      	ldrlt	r3, [r1, r0]
 8010b66:	18c0      	addlt	r0, r0, r3
 8010b68:	4770      	bx	lr
	...

08010b6c <_init>:
 8010b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6e:	bf00      	nop
 8010b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b72:	bc08      	pop	{r3}
 8010b74:	469e      	mov	lr, r3
 8010b76:	4770      	bx	lr

08010b78 <_fini>:
 8010b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7a:	bf00      	nop
 8010b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b7e:	bc08      	pop	{r3}
 8010b80:	469e      	mov	lr, r3
 8010b82:	4770      	bx	lr
