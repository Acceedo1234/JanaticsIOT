
JanaticsIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08011874  08011874  00021874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e44  08011e44  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011e44  08011e44  00021e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e4c  08011e4c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011e4c  08011e4c  00021e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011e54  08011e54  00021e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011e5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f28  20000088  08011ee4  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb0  08011ee4  00030fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ef4  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005191  00000000  00000000  00050fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00056140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001830  00000000  00000000  00057b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007672  00000000  00000000  00059370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e92  00000000  00000000  000609e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df602  00000000  00000000  00084874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163e76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f5c  00000000  00000000  00163ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801185c 	.word	0x0801185c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801185c 	.word	0x0801185c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ESPRXDataSeg>:
uint8_t wifiusernamecheck[15] = {'N','A','V','E','E','N','P','H','O','N','E'};

void ReadOnlineData(void);

void ESPRXDataSeg(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	if(!RxCompleteU2C1WIFI){return;}
 8000588:	4bb6      	ldr	r3, [pc, #728]	; (8000864 <ESPRXDataSeg+0x2e0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	f000 82af 	beq.w	8000af0 <ESPRXDataSeg+0x56c>
	RxCompleteU2C1WIFI=0;
 8000592:	4bb4      	ldr	r3, [pc, #720]	; (8000864 <ESPRXDataSeg+0x2e0>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]

	Production_Total  	= Uart_rx_buffer[19]+(Uart_rx_buffer[18]*10)+(Uart_rx_buffer[17]*100)+(Uart_rx_buffer[16]*1000)+(Uart_rx_buffer[15]*10000);//Production
 8000598:	4bb3      	ldr	r3, [pc, #716]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800059a:	7cdb      	ldrb	r3, [r3, #19]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4bb2      	ldr	r3, [pc, #712]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005a0:	7c5b      	ldrb	r3, [r3, #17]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	0089      	lsls	r1, r1, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	4619      	mov	r1, r3
 80005ac:	0088      	lsls	r0, r1, #2
 80005ae:	4619      	mov	r1, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	b299      	uxth	r1, r3
 80005b8:	4bab      	ldr	r3, [pc, #684]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005ba:	7c9b      	ldrb	r3, [r3, #18]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	0080      	lsls	r0, r0, #2
 80005c2:	4403      	add	r3, r0
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	440b      	add	r3, r1
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4413      	add	r3, r2
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4ba5      	ldr	r3, [pc, #660]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005d2:	7bdb      	ldrb	r3, [r3, #15]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	0149      	lsls	r1, r1, #5
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	0089      	lsls	r1, r1, #2
 80005de:	440b      	add	r3, r1
 80005e0:	4619      	mov	r1, r3
 80005e2:	0088      	lsls	r0, r1, #2
 80005e4:	4619      	mov	r1, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	440b      	add	r3, r1
 80005ea:	011b      	lsls	r3, r3, #4
 80005ec:	b299      	uxth	r1, r3
 80005ee:	4b9e      	ldr	r3, [pc, #632]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80005f0:	7c1b      	ldrb	r3, [r3, #16]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	0140      	lsls	r0, r0, #5
 80005f8:	1ac0      	subs	r0, r0, r3
 80005fa:	0080      	lsls	r0, r0, #2
 80005fc:	4403      	add	r3, r0
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	440b      	add	r3, r1
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b98      	ldr	r3, [pc, #608]	; (800086c <ESPRXDataSeg+0x2e8>)
 800060c:	801a      	strh	r2, [r3, #0]
	Rejection_Total 	= Uart_rx_buffer[24]+(Uart_rx_buffer[23]*10)+(Uart_rx_buffer[22]*100)+(Uart_rx_buffer[21]*1000)+(Uart_rx_buffer[20]*10000);//Rejection
 800060e:	4b96      	ldr	r3, [pc, #600]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000610:	7e1b      	ldrb	r3, [r3, #24]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b94      	ldr	r3, [pc, #592]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000616:	7d9b      	ldrb	r3, [r3, #22]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	0089      	lsls	r1, r1, #2
 800061e:	440b      	add	r3, r1
 8000620:	4619      	mov	r1, r3
 8000622:	0088      	lsls	r0, r1, #2
 8000624:	4619      	mov	r1, r3
 8000626:	4603      	mov	r3, r0
 8000628:	440b      	add	r3, r1
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	b299      	uxth	r1, r3
 800062e:	4b8e      	ldr	r3, [pc, #568]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000630:	7ddb      	ldrb	r3, [r3, #23]
 8000632:	b29b      	uxth	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	0080      	lsls	r0, r0, #2
 8000638:	4403      	add	r3, r0
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	440b      	add	r3, r1
 8000640:	b29b      	uxth	r3, r3
 8000642:	4413      	add	r3, r2
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b88      	ldr	r3, [pc, #544]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000648:	7d1b      	ldrb	r3, [r3, #20]
 800064a:	b29b      	uxth	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	0149      	lsls	r1, r1, #5
 8000650:	1ac9      	subs	r1, r1, r3
 8000652:	0089      	lsls	r1, r1, #2
 8000654:	440b      	add	r3, r1
 8000656:	4619      	mov	r1, r3
 8000658:	0088      	lsls	r0, r1, #2
 800065a:	4619      	mov	r1, r3
 800065c:	4603      	mov	r3, r0
 800065e:	440b      	add	r3, r1
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b299      	uxth	r1, r3
 8000664:	4b80      	ldr	r3, [pc, #512]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000666:	7d5b      	ldrb	r3, [r3, #21]
 8000668:	b29b      	uxth	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	0140      	lsls	r0, r0, #5
 800066e:	1ac0      	subs	r0, r0, r3
 8000670:	0080      	lsls	r0, r0, #2
 8000672:	4403      	add	r3, r0
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	b29b      	uxth	r3, r3
 8000678:	440b      	add	r3, r1
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <ESPRXDataSeg+0x2ec>)
 8000682:	801a      	strh	r2, [r3, #0]
	batchTargetquantity = Uart_rx_buffer[29]+(Uart_rx_buffer[28]*10)+(Uart_rx_buffer[27]*100)+(Uart_rx_buffer[26]*1000)+(Uart_rx_buffer[25]*10000); //
 8000684:	4b78      	ldr	r3, [pc, #480]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000686:	7f5b      	ldrb	r3, [r3, #29]
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b77      	ldr	r3, [pc, #476]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800068c:	7edb      	ldrb	r3, [r3, #27]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	0089      	lsls	r1, r1, #2
 8000694:	440b      	add	r3, r1
 8000696:	4619      	mov	r1, r3
 8000698:	0088      	lsls	r0, r1, #2
 800069a:	4619      	mov	r1, r3
 800069c:	4603      	mov	r3, r0
 800069e:	440b      	add	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	b299      	uxth	r1, r3
 80006a4:	4b70      	ldr	r3, [pc, #448]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006a6:	7f1b      	ldrb	r3, [r3, #28]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	0080      	lsls	r0, r0, #2
 80006ae:	4403      	add	r3, r0
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	440b      	add	r3, r1
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4413      	add	r3, r2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b6a      	ldr	r3, [pc, #424]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006be:	7e5b      	ldrb	r3, [r3, #25]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	0149      	lsls	r1, r1, #5
 80006c6:	1ac9      	subs	r1, r1, r3
 80006c8:	0089      	lsls	r1, r1, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	0088      	lsls	r0, r1, #2
 80006d0:	4619      	mov	r1, r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	440b      	add	r3, r1
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b299      	uxth	r1, r3
 80006da:	4b63      	ldr	r3, [pc, #396]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006dc:	7e9b      	ldrb	r3, [r3, #26]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	0140      	lsls	r0, r0, #5
 80006e4:	1ac0      	subs	r0, r0, r3
 80006e6:	0080      	lsls	r0, r0, #2
 80006e8:	4403      	add	r3, r0
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	440b      	add	r3, r1
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <ESPRXDataSeg+0x2f0>)
 80006f8:	801a      	strh	r2, [r3, #0]
	temperateSet 		= Uart_rx_buffer[32]+(Uart_rx_buffer[31]*10)+(Uart_rx_buffer[30]*100);//temperateSet
 80006fa:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80006fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b59      	ldr	r3, [pc, #356]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000704:	7f9b      	ldrb	r3, [r3, #30]
 8000706:	b29b      	uxth	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	0089      	lsls	r1, r1, #2
 800070c:	440b      	add	r3, r1
 800070e:	4619      	mov	r1, r3
 8000710:	0088      	lsls	r0, r1, #2
 8000712:	4619      	mov	r1, r3
 8000714:	4603      	mov	r3, r0
 8000716:	440b      	add	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	b299      	uxth	r1, r3
 800071c:	4b52      	ldr	r3, [pc, #328]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800071e:	7fdb      	ldrb	r3, [r3, #31]
 8000720:	b29b      	uxth	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	0080      	lsls	r0, r0, #2
 8000726:	4403      	add	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	440b      	add	r3, r1
 800072e:	b29b      	uxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b50      	ldr	r3, [pc, #320]	; (8000878 <ESPRXDataSeg+0x2f4>)
 8000736:	801a      	strh	r2, [r3, #0]
	temperateSetHigh 	= Uart_rx_buffer[35]+(Uart_rx_buffer[34]*10)+(Uart_rx_buffer[33]*100);//temperateSetHigh
 8000738:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800073a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000746:	b29b      	uxth	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	0089      	lsls	r1, r1, #2
 800074c:	440b      	add	r3, r1
 800074e:	4619      	mov	r1, r3
 8000750:	0088      	lsls	r0, r1, #2
 8000752:	4619      	mov	r1, r3
 8000754:	4603      	mov	r3, r0
 8000756:	440b      	add	r3, r1
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	b299      	uxth	r1, r3
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800075e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000762:	b29b      	uxth	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	0080      	lsls	r0, r0, #2
 8000768:	4403      	add	r3, r0
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	440b      	add	r3, r1
 8000770:	b29b      	uxth	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <ESPRXDataSeg+0x2f8>)
 8000778:	801a      	strh	r2, [r3, #0]
	temperateSetLow 	= Uart_rx_buffer[38]+(Uart_rx_buffer[37]*10)+(Uart_rx_buffer[36]*100);//temperateSetLow
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800077c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <ESPRXDataSeg+0x2e4>)
 8000784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000788:	b29b      	uxth	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	0089      	lsls	r1, r1, #2
 800078e:	440b      	add	r3, r1
 8000790:	4619      	mov	r1, r3
 8000792:	0088      	lsls	r0, r1, #2
 8000794:	4619      	mov	r1, r3
 8000796:	4603      	mov	r3, r0
 8000798:	440b      	add	r3, r1
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	b299      	uxth	r1, r3
 800079e:	4b32      	ldr	r3, [pc, #200]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	0080      	lsls	r0, r0, #2
 80007aa:	4403      	add	r3, r0
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	440b      	add	r3, r1
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <ESPRXDataSeg+0x2fc>)
 80007ba:	801a      	strh	r2, [r3, #0]
	requirementId	 	= Uart_rx_buffer[44]+(Uart_rx_buffer[43]*10)+(Uart_rx_buffer[42]*100)+(Uart_rx_buffer[41]*1000)+(Uart_rx_buffer[40]*10000)+(Uart_rx_buffer[39]*100000);//requirementId
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	0089      	lsls	r1, r1, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	4619      	mov	r1, r3
 80007d4:	0088      	lsls	r0, r1, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	4603      	mov	r3, r0
 80007da:	440b      	add	r3, r1
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	b299      	uxth	r1, r3
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	0080      	lsls	r0, r0, #2
 80007ec:	4403      	add	r3, r0
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	440b      	add	r3, r1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <ESPRXDataSeg+0x2e4>)
 80007fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000800:	b29b      	uxth	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	0149      	lsls	r1, r1, #5
 8000806:	1ac9      	subs	r1, r1, r3
 8000808:	0089      	lsls	r1, r1, #2
 800080a:	440b      	add	r3, r1
 800080c:	4619      	mov	r1, r3
 800080e:	0088      	lsls	r0, r1, #2
 8000810:	4619      	mov	r1, r3
 8000812:	4603      	mov	r3, r0
 8000814:	440b      	add	r3, r1
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	b299      	uxth	r1, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800081c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000820:	b29b      	uxth	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	0140      	lsls	r0, r0, #5
 8000826:	1ac0      	subs	r0, r0, r3
 8000828:	0080      	lsls	r0, r0, #2
 800082a:	4403      	add	r3, r0
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	b29b      	uxth	r3, r3
 8000830:	440b      	add	r3, r1
 8000832:	b29b      	uxth	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <ESPRXDataSeg+0x2e4>)
 800083a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800083e:	b29b      	uxth	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	0049      	lsls	r1, r1, #1
 8000844:	4419      	add	r1, r3
 8000846:	4608      	mov	r0, r1
 8000848:	0100      	lsls	r0, r0, #4
 800084a:	1a41      	subs	r1, r0, r1
 800084c:	00c9      	lsls	r1, r1, #3
 800084e:	1acb      	subs	r3, r1, r3
 8000850:	4619      	mov	r1, r3
 8000852:	0089      	lsls	r1, r1, #2
 8000854:	1acb      	subs	r3, r1, r3
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	b29b      	uxth	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <ESPRXDataSeg+0x300>)
 8000860:	801a      	strh	r2, [r3, #0]
 8000862:	e011      	b.n	8000888 <ESPRXDataSeg+0x304>
 8000864:	200000ef 	.word	0x200000ef
 8000868:	200000a4 	.word	0x200000a4
 800086c:	200000fe 	.word	0x200000fe
 8000870:	20000100 	.word	0x20000100
 8000874:	20000102 	.word	0x20000102
 8000878:	20000104 	.word	0x20000104
 800087c:	20000106 	.word	0x20000106
 8000880:	20000108 	.word	0x20000108
 8000884:	2000010a 	.word	0x2000010a

	batchNumber  	 = Uart_rx_buffer[57]+(Uart_rx_buffer[56]*10)+(Uart_rx_buffer[55]*100);
 8000888:	4b9d      	ldr	r3, [pc, #628]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800088a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b9b      	ldr	r3, [pc, #620]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000892:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000896:	b29b      	uxth	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	0089      	lsls	r1, r1, #2
 800089c:	440b      	add	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	0088      	lsls	r0, r1, #2
 80008a2:	4619      	mov	r1, r3
 80008a4:	4603      	mov	r3, r0
 80008a6:	440b      	add	r3, r1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	b299      	uxth	r1, r3
 80008ac:	4b94      	ldr	r3, [pc, #592]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	0080      	lsls	r0, r0, #2
 80008b8:	4403      	add	r3, r0
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	b29b      	uxth	r3, r3
 80008be:	440b      	add	r3, r1
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b8f      	ldr	r3, [pc, #572]	; (8000b04 <ESPRXDataSeg+0x580>)
 80008c8:	801a      	strh	r2, [r3, #0]
	resetStatus  	 = Uart_rx_buffer[59]+(Uart_rx_buffer[58]*10);
 80008ca:	4b8d      	ldr	r3, [pc, #564]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008cc:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80008d0:	4b8b      	ldr	r3, [pc, #556]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008d6:	4619      	mov	r1, r3
 80008d8:	0089      	lsls	r1, r1, #2
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b88      	ldr	r3, [pc, #544]	; (8000b08 <ESPRXDataSeg+0x584>)
 80008e6:	701a      	strb	r2, [r3, #0]
	startStopStatus  = Uart_rx_buffer[61]+(Uart_rx_buffer[60]*10);
 80008e8:	4b85      	ldr	r3, [pc, #532]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008ea:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008ee:	4b84      	ldr	r3, [pc, #528]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80008f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f4:	4619      	mov	r1, r3
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b82      	ldr	r3, [pc, #520]	; (8000b0c <ESPRXDataSeg+0x588>)
 8000904:	701a      	strb	r2, [r3, #0]
	reasonEntryStatus  = Uart_rx_buffer[63]+(Uart_rx_buffer[62]*10);
 8000906:	4b7e      	ldr	r3, [pc, #504]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000908:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800090c:	4b7c      	ldr	r3, [pc, #496]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800090e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000912:	4619      	mov	r1, r3
 8000914:	0089      	lsls	r1, r1, #2
 8000916:	440b      	add	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <ESPRXDataSeg+0x58c>)
 8000922:	701a      	strb	r2, [r3, #0]
	//Date,Month,Year
	SW_Date = Uart_rx_buffer[4]+(Uart_rx_buffer[3]*10);//SW_Date
 8000924:	4b76      	ldr	r3, [pc, #472]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000926:	791a      	ldrb	r2, [r3, #4]
 8000928:	4b75      	ldr	r3, [pc, #468]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	4619      	mov	r1, r3
 800092e:	0089      	lsls	r1, r1, #2
 8000930:	440b      	add	r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b76      	ldr	r3, [pc, #472]	; (8000b14 <ESPRXDataSeg+0x590>)
 800093c:	701a      	strb	r2, [r3, #0]
	SW_Month = Uart_rx_buffer[6]+(Uart_rx_buffer[5]*10);//SW_Month
 800093e:	4b70      	ldr	r3, [pc, #448]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000940:	799a      	ldrb	r2, [r3, #6]
 8000942:	4b6f      	ldr	r3, [pc, #444]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000944:	795b      	ldrb	r3, [r3, #5]
 8000946:	4619      	mov	r1, r3
 8000948:	0089      	lsls	r1, r1, #2
 800094a:	440b      	add	r3, r1
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4413      	add	r3, r2
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b70      	ldr	r3, [pc, #448]	; (8000b18 <ESPRXDataSeg+0x594>)
 8000956:	701a      	strb	r2, [r3, #0]
	SW_Year = Uart_rx_buffer[8]+(Uart_rx_buffer[7]*10);//SW_Year
 8000958:	4b69      	ldr	r3, [pc, #420]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800095a:	7a1a      	ldrb	r2, [r3, #8]
 800095c:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	4619      	mov	r1, r3
 8000962:	0089      	lsls	r1, r1, #2
 8000964:	440b      	add	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4413      	add	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b6b      	ldr	r3, [pc, #428]	; (8000b1c <ESPRXDataSeg+0x598>)
 8000970:	701a      	strb	r2, [r3, #0]
	SW_Hour = Uart_rx_buffer[10]+(Uart_rx_buffer[9]*10);//SW_Hour
 8000972:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000974:	7a9a      	ldrb	r2, [r3, #10]
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000978:	7a5b      	ldrb	r3, [r3, #9]
 800097a:	4619      	mov	r1, r3
 800097c:	0089      	lsls	r1, r1, #2
 800097e:	440b      	add	r3, r1
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <ESPRXDataSeg+0x59c>)
 800098a:	701a      	strb	r2, [r3, #0]
	SW_Minute = Uart_rx_buffer[12]+(Uart_rx_buffer[11]*10);//SW_Minute
 800098c:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <ESPRXDataSeg+0x57c>)
 800098e:	7b1a      	ldrb	r2, [r3, #12]
 8000990:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000992:	7adb      	ldrb	r3, [r3, #11]
 8000994:	4619      	mov	r1, r3
 8000996:	0089      	lsls	r1, r1, #2
 8000998:	440b      	add	r3, r1
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b60      	ldr	r3, [pc, #384]	; (8000b24 <ESPRXDataSeg+0x5a0>)
 80009a4:	701a      	strb	r2, [r3, #0]

	itemNumber[0] = Uart_rx_buffer[45];
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009a8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80009ac:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009ae:	701a      	strb	r2, [r3, #0]
	itemNumber[1] = Uart_rx_buffer[46];
 80009b0:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009b8:	705a      	strb	r2, [r3, #1]
	itemNumber[0] = Uart_rx_buffer[47];
 80009ba:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009bc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80009c0:	4b59      	ldr	r3, [pc, #356]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009c2:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[48];
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80009ca:	4b57      	ldr	r3, [pc, #348]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009cc:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[49];
 80009ce:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009d0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80009d4:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009d6:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[50];
 80009d8:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009da:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80009de:	4b52      	ldr	r3, [pc, #328]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009e0:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[51];
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009e4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80009e8:	4b4f      	ldr	r3, [pc, #316]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009ea:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[52];
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009ee:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80009f2:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009f4:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[53];
 80009f6:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <ESPRXDataSeg+0x57c>)
 80009f8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 80009fe:	701a      	strb	r2, [r3, #0]
	itemNumber[0] = Uart_rx_buffer[54];
 8000a00:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <ESPRXDataSeg+0x57c>)
 8000a02:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <ESPRXDataSeg+0x5a4>)
 8000a08:	701a      	strb	r2, [r3, #0]

	commFeedbackFlag = 1;
 8000a0a:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <ESPRXDataSeg+0x5a8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
	if((esp8266IpObtained==0)&&(ipConfimation==1)){
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <ESPRXDataSeg+0x5ac>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d16e      	bne.n	8000af6 <ESPRXDataSeg+0x572>
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <ESPRXDataSeg+0x5b0>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d16a      	bne.n	8000af6 <ESPRXDataSeg+0x572>
		for(as = 25;as<= 41;as++){
 8000a20:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a22:	2219      	movs	r2, #25
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e020      	b.n	8000a6a <ESPRXDataSeg+0x4e6>
			if(tempbuff[as] == 34)//"
 8000a28:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000a30:	5c9b      	ldrb	r3, [r3, r2]
 8000a32:	2b22      	cmp	r3, #34	; 0x22
 8000a34:	d103      	bne.n	8000a3e <ESPRXDataSeg+0x4ba>
			{esp8266IpObtained=1;break;}
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <ESPRXDataSeg+0x5ac>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e019      	b.n	8000a72 <ESPRXDataSeg+0x4ee>
			++len_espIpAddress;
 8000a3e:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <ESPRXDataSeg+0x5bc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <ESPRXDataSeg+0x5bc>)
 8000a48:	701a      	strb	r2, [r3, #0]
			espIpAddress[as-25]= tempbuff[as];
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b19      	subs	r3, #25
 8000a56:	4a39      	ldr	r2, [pc, #228]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000a58:	5c51      	ldrb	r1, [r2, r1]
 8000a5a:	4a3a      	ldr	r2, [pc, #232]	; (8000b44 <ESPRXDataSeg+0x5c0>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
		for(as = 25;as<= 41;as++){
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <ESPRXDataSeg+0x5b4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b29      	cmp	r3, #41	; 0x29
 8000a70:	d9da      	bls.n	8000a28 <ESPRXDataSeg+0x4a4>
		}
		for(am = 25;am<=100;am++ ){
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a74:	2219      	movs	r2, #25
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e012      	b.n	8000aa0 <ESPRXDataSeg+0x51c>
			if(tempbuff[am] == 43){
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000a82:	5c9b      	ldrb	r3, [r3, r2]
 8000a84:	2b2b      	cmp	r3, #43	; 0x2b
 8000a86:	d105      	bne.n	8000a94 <ESPRXDataSeg+0x510>
				indexMac = am+15;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	330f      	adds	r3, #15
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <ESPRXDataSeg+0x5c8>)
 8000a92:	701a      	strb	r2, [r3, #0]
		for(am = 25;am<=100;am++ ){
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b64      	cmp	r3, #100	; 0x64
 8000aa6:	d9e8      	bls.n	8000a7a <ESPRXDataSeg+0x4f6>
			}
		}
		for(am = indexMac;am<= 100;am++){
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <ESPRXDataSeg+0x5c8>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e019      	b.n	8000ae6 <ESPRXDataSeg+0x562>
			if(tempbuff[am] == 34){break;}
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000aba:	5c9b      	ldrb	r3, [r3, r2]
 8000abc:	2b22      	cmp	r3, #34	; 0x22
 8000abe:	d019      	beq.n	8000af4 <ESPRXDataSeg+0x570>
			espMacAdress[am-indexMac] =tempbuff[am];
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <ESPRXDataSeg+0x5c8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <ESPRXDataSeg+0x5b8>)
 8000ad4:	5c51      	ldrb	r1, [r2, r1]
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <ESPRXDataSeg+0x5cc>)
 8000ad8:	54d1      	strb	r1, [r2, r3]
		for(am = indexMac;am<= 100;am++){
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <ESPRXDataSeg+0x5c4>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d9e1      	bls.n	8000ab2 <ESPRXDataSeg+0x52e>
 8000aee:	e002      	b.n	8000af6 <ESPRXDataSeg+0x572>
	if(!RxCompleteU2C1WIFI){return;}
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <ESPRXDataSeg+0x572>
			if(tempbuff[am] == 34){break;}
 8000af4:	bf00      	nop
	}




}
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000a4 	.word	0x200000a4
 8000b04:	2000010c 	.word	0x2000010c
 8000b08:	2000010e 	.word	0x2000010e
 8000b0c:	2000010f 	.word	0x2000010f
 8000b10:	20000110 	.word	0x20000110
 8000b14:	200000f3 	.word	0x200000f3
 8000b18:	200000f4 	.word	0x200000f4
 8000b1c:	200000f5 	.word	0x200000f5
 8000b20:	200000f1 	.word	0x200000f1
 8000b24:	200000f2 	.word	0x200000f2
 8000b28:	20000114 	.word	0x20000114
 8000b2c:	20000111 	.word	0x20000111
 8000b30:	20000149 	.word	0x20000149
 8000b34:	200001b0 	.word	0x200001b0
 8000b38:	2000011f 	.word	0x2000011f
 8000b3c:	2000014c 	.word	0x2000014c
 8000b40:	20000148 	.word	0x20000148
 8000b44:	20000124 	.word	0x20000124
 8000b48:	20000120 	.word	0x20000120
 8000b4c:	20000121 	.word	0x20000121
 8000b50:	20000134 	.word	0x20000134

08000b54 <ESPRxDecoder>:
	productionhysNegSetOL   = FlashReadOLdata[9];
}


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	f201 828c 	bhi.w	8002086 <ESPRxDecoder+0x1532>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <ESPRxDecoder+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b99 	.word	0x08000b99
 8000b78:	08000caf 	.word	0x08000caf
 8000b7c:	08000cff 	.word	0x08000cff
 8000b80:	080010eb 	.word	0x080010eb
 8000b84:	08001129 	.word	0x08001129
 8000b88:	0800133b 	.word	0x0800133b
 8000b8c:	08001361 	.word	0x08001361
 8000b90:	08001ffd 	.word	0x08001ffd
 8000b94:	08002033 	.word	0x08002033
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b4f      	cmp	r3, #79	; 0x4f
 8000b9c:	d107      	bne.n	8000bae <ESPRxDecoder+0x5a>
 8000b9e:	4b93      	ldr	r3, [pc, #588]	; (8000dec <ESPRxDecoder+0x298>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d103      	bne.n	8000bae <ESPRxDecoder+0x5a>
			 {
			 	bufferptr=1;
 8000ba6:	4b91      	ldr	r3, [pc, #580]	; (8000dec <ESPRxDecoder+0x298>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e011      	b.n	8000bd2 <ESPRxDecoder+0x7e>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b4b      	cmp	r3, #75	; 0x4b
 8000bb2:	d10e      	bne.n	8000bd2 <ESPRxDecoder+0x7e>
 8000bb4:	4b8d      	ldr	r3, [pc, #564]	; (8000dec <ESPRxDecoder+0x298>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10a      	bne.n	8000bd2 <ESPRxDecoder+0x7e>
			 {
			 	bufferptr=0;
 8000bbc:	4b8b      	ldr	r3, [pc, #556]	; (8000dec <ESPRxDecoder+0x298>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000bc6:	4b8a      	ldr	r3, [pc, #552]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000bc8:	221e      	movs	r2, #30
 8000bca:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 8000bcc:	4b89      	ldr	r3, [pc, #548]	; (8000df4 <ESPRxDecoder+0x2a0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000bd6:	d107      	bne.n	8000be8 <ESPRxDecoder+0x94>
 8000bd8:	4b84      	ldr	r3, [pc, #528]	; (8000dec <ESPRxDecoder+0x298>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <ESPRxDecoder+0x94>
			 {
			 	bufferptr=1;
 8000be0:	4b82      	ldr	r3, [pc, #520]	; (8000dec <ESPRxDecoder+0x298>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e060      	b.n	8000caa <ESPRxDecoder+0x156>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b6f      	cmp	r3, #111	; 0x6f
 8000bec:	d107      	bne.n	8000bfe <ESPRxDecoder+0xaa>
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <ESPRxDecoder+0x298>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d103      	bne.n	8000bfe <ESPRxDecoder+0xaa>
			 {
			 	bufferptr=2;
 8000bf6:	4b7d      	ldr	r3, [pc, #500]	; (8000dec <ESPRxDecoder+0x298>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	e055      	b.n	8000caa <ESPRxDecoder+0x156>
			 }
			 else if(bufferptr==2)
 8000bfe:	4b7b      	ldr	r3, [pc, #492]	; (8000dec <ESPRxDecoder+0x298>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d104      	bne.n	8000c10 <ESPRxDecoder+0xbc>
			 {
			 	bufferptr=3;
 8000c06:	4b79      	ldr	r3, [pc, #484]	; (8000dec <ESPRxDecoder+0x298>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 8000c0c:	f001 ba3d 	b.w	800208a <ESPRxDecoder+0x1536>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b63      	cmp	r3, #99	; 0x63
 8000c14:	d107      	bne.n	8000c26 <ESPRxDecoder+0xd2>
 8000c16:	4b75      	ldr	r3, [pc, #468]	; (8000dec <ESPRxDecoder+0x298>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d103      	bne.n	8000c26 <ESPRxDecoder+0xd2>
			 	bufferptr=4;
 8000c1e:	4b73      	ldr	r3, [pc, #460]	; (8000dec <ESPRxDecoder+0x298>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e041      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b68      	cmp	r3, #104	; 0x68
 8000c2a:	d107      	bne.n	8000c3c <ESPRxDecoder+0xe8>
 8000c2c:	4b6f      	ldr	r3, [pc, #444]	; (8000dec <ESPRxDecoder+0x298>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d103      	bne.n	8000c3c <ESPRxDecoder+0xe8>
			 	bufferptr=5;
 8000c34:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <ESPRxDecoder+0x298>)
 8000c36:	2205      	movs	r2, #5
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e036      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b61      	cmp	r3, #97	; 0x61
 8000c40:	d107      	bne.n	8000c52 <ESPRxDecoder+0xfe>
 8000c42:	4b6a      	ldr	r3, [pc, #424]	; (8000dec <ESPRxDecoder+0x298>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d103      	bne.n	8000c52 <ESPRxDecoder+0xfe>
			 	bufferptr=6;
 8000c4a:	4b68      	ldr	r3, [pc, #416]	; (8000dec <ESPRxDecoder+0x298>)
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e02b      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b6e      	cmp	r3, #110	; 0x6e
 8000c56:	d107      	bne.n	8000c68 <ESPRxDecoder+0x114>
 8000c58:	4b64      	ldr	r3, [pc, #400]	; (8000dec <ESPRxDecoder+0x298>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d103      	bne.n	8000c68 <ESPRxDecoder+0x114>
			 	bufferptr=7;
 8000c60:	4b62      	ldr	r3, [pc, #392]	; (8000dec <ESPRxDecoder+0x298>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e020      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b67      	cmp	r3, #103	; 0x67
 8000c6c:	d107      	bne.n	8000c7e <ESPRxDecoder+0x12a>
 8000c6e:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <ESPRxDecoder+0x298>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d103      	bne.n	8000c7e <ESPRxDecoder+0x12a>
			 	bufferptr=8;
 8000c76:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <ESPRxDecoder+0x298>)
 8000c78:	2208      	movs	r2, #8
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e015      	b.n	8000caa <ESPRxDecoder+0x156>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b65      	cmp	r3, #101	; 0x65
 8000c82:	f041 8202 	bne.w	800208a <ESPRxDecoder+0x1536>
 8000c86:	4b59      	ldr	r3, [pc, #356]	; (8000dec <ESPRxDecoder+0x298>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	f041 81fd 	bne.w	800208a <ESPRxDecoder+0x1536>
			 	bufferptr=0;
 8000c90:	4b56      	ldr	r3, [pc, #344]	; (8000dec <ESPRxDecoder+0x298>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000c9a:	4b55      	ldr	r3, [pc, #340]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 8000ca0:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <ESPRxDecoder+0x2a0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	f001 b9f0 	b.w	800208a <ESPRxDecoder+0x1536>
 8000caa:	f001 b9ee 	b.w	800208a <ESPRxDecoder+0x1536>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b4f      	cmp	r3, #79	; 0x4f
 8000cb2:	d108      	bne.n	8000cc6 <ESPRxDecoder+0x172>
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <ESPRxDecoder+0x298>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d104      	bne.n	8000cc6 <ESPRxDecoder+0x172>
			 {
			 	bufferptr=1;
 8000cbc:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <ESPRxDecoder+0x298>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
				if(esp8266IpObtained==0){
					wifi_command=121;}
				else{
					wifi_command=49;}
			 }
		break;
 8000cc2:	f001 b9e4 	b.w	800208e <ESPRxDecoder+0x153a>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b4b      	cmp	r3, #75	; 0x4b
 8000cca:	f041 81e0 	bne.w	800208e <ESPRxDecoder+0x153a>
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <ESPRxDecoder+0x298>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f041 81db 	bne.w	800208e <ESPRxDecoder+0x153a>
			 	bufferptr=0;
 8000cd8:	4b44      	ldr	r3, [pc, #272]	; (8000dec <ESPRxDecoder+0x298>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71bb      	strb	r3, [r7, #6]
				if(esp8266IpObtained==0){
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <ESPRxDecoder+0x2a4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <ESPRxDecoder+0x1a0>
					wifi_command=121;}
 8000cea:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000cec:	2279      	movs	r2, #121	; 0x79
 8000cee:	701a      	strb	r2, [r3, #0]
		break;
 8000cf0:	f001 b9cd 	b.w	800208e <ESPRxDecoder+0x153a>
					wifi_command=49;}
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000cf6:	2231      	movs	r2, #49	; 0x31
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	f001 b9c8 	b.w	800208e <ESPRxDecoder+0x153a>
		case 3:
			if((Rxwifi_data== userNameWifi[0])&&(bufferptr==0))
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <ESPRxDecoder+0x2a8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d107      	bne.n	8000d18 <ESPRxDecoder+0x1c4>
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <ESPRxDecoder+0x298>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d103      	bne.n	8000d18 <ESPRxDecoder+0x1c4>
			 {
				bufferptr=1;
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <ESPRxDecoder+0x298>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e18a      	b.n	800102e <ESPRxDecoder+0x4da>
			 }
			 else if((Rxwifi_data== userNameWifi[1])&&(bufferptr==1))
 8000d18:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <ESPRxDecoder+0x2a8>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d11d      	bne.n	8000d5e <ESPRxDecoder+0x20a>
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <ESPRxDecoder+0x298>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d119      	bne.n	8000d5e <ESPRxDecoder+0x20a>
			 {
				if(lengthOfUserName==2){
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <ESPRxDecoder+0x2ac>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d111      	bne.n	8000d56 <ESPRxDecoder+0x202>
					bufferptr=0;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <ESPRxDecoder+0x298>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <ESPRxDecoder+0x2b0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000d44:	2246      	movs	r2, #70	; 0x46
 8000d46:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <ESPRxDecoder+0x2b4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <ESPRxDecoder+0x2b8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
				if(lengthOfUserName==2){
 8000d54:	e16b      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=2;
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <ESPRxDecoder+0x298>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	701a      	strb	r2, [r3, #0]
				if(lengthOfUserName==2){
 8000d5c:	e167      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }
			 else if((Rxwifi_data== userNameWifi[2])&&(bufferptr==2))
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <ESPRxDecoder+0x2a8>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d11d      	bne.n	8000da4 <ESPRxDecoder+0x250>
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <ESPRxDecoder+0x298>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d119      	bne.n	8000da4 <ESPRxDecoder+0x250>
			 {
				 if(lengthOfUserName==3){
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <ESPRxDecoder+0x2ac>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d111      	bne.n	8000d9c <ESPRxDecoder+0x248>
					bufferptr=0;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <ESPRxDecoder+0x298>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <ESPRxDecoder+0x2b0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000d8a:	2246      	movs	r2, #70	; 0x46
 8000d8c:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <ESPRxDecoder+0x2b4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <ESPRxDecoder+0x2b8>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==3){
 8000d9a:	e148      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=3;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <ESPRxDecoder+0x298>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==3){
 8000da2:	e144      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }

			 else if((Rxwifi_data== userNameWifi[3])&&(bufferptr==3))
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <ESPRxDecoder+0x2a8>)
 8000da6:	78db      	ldrb	r3, [r3, #3]
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d130      	bne.n	8000e10 <ESPRxDecoder+0x2bc>
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <ESPRxDecoder+0x298>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d12c      	bne.n	8000e10 <ESPRxDecoder+0x2bc>
			 {
				 if(lengthOfUserName==4){
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <ESPRxDecoder+0x2ac>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d111      	bne.n	8000de2 <ESPRxDecoder+0x28e>
						bufferptr=0;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <ESPRxDecoder+0x298>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
						Err_bufferptr=0;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <ESPRxDecoder+0x2b0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
						Rxseqdecoder=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71bb      	strb	r3, [r7, #6]
						wifi_command=70;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <ESPRxDecoder+0x29c>)
 8000dd0:	2246      	movs	r2, #70	; 0x46
 8000dd2:	701a      	strb	r2, [r3, #0]
						Error_Retry=0;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <ESPRxDecoder+0x2b4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
						WifiDisplay = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <ESPRxDecoder+0x2b8>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==4){
 8000de0:	e125      	b.n	800102e <ESPRxDecoder+0x4da>
					}else{
						bufferptr=4;
 8000de2:	4b02      	ldr	r3, [pc, #8]	; (8000dec <ESPRxDecoder+0x298>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==4){
 8000de8:	e121      	b.n	800102e <ESPRxDecoder+0x4da>
 8000dea:	bf00      	nop
 8000dec:	20000c28 	.word	0x20000c28
 8000df0:	20000a62 	.word	0x20000a62
 8000df4:	20000c2a 	.word	0x20000c2a
 8000df8:	20000149 	.word	0x20000149
 8000dfc:	200007bc 	.word	0x200007bc
 8000e00:	20000815 	.word	0x20000815
 8000e04:	200000eb 	.word	0x200000eb
 8000e08:	200001b1 	.word	0x200001b1
 8000e0c:	200000ec 	.word	0x200000ec
					}
			 }
			 else if((Rxwifi_data== userNameWifi[4])&&(bufferptr==4))
 8000e10:	4b97      	ldr	r3, [pc, #604]	; (8001070 <ESPRxDecoder+0x51c>)
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d11d      	bne.n	8000e56 <ESPRxDecoder+0x302>
 8000e1a:	4b96      	ldr	r3, [pc, #600]	; (8001074 <ESPRxDecoder+0x520>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d119      	bne.n	8000e56 <ESPRxDecoder+0x302>
			 {
				 if(lengthOfUserName==5){
 8000e22:	4b95      	ldr	r3, [pc, #596]	; (8001078 <ESPRxDecoder+0x524>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d111      	bne.n	8000e4e <ESPRxDecoder+0x2fa>
					bufferptr=0;
 8000e2a:	4b92      	ldr	r3, [pc, #584]	; (8001074 <ESPRxDecoder+0x520>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000e30:	4b92      	ldr	r3, [pc, #584]	; (800107c <ESPRxDecoder+0x528>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000e3a:	4b91      	ldr	r3, [pc, #580]	; (8001080 <ESPRxDecoder+0x52c>)
 8000e3c:	2246      	movs	r2, #70	; 0x46
 8000e3e:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000e40:	4b90      	ldr	r3, [pc, #576]	; (8001084 <ESPRxDecoder+0x530>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000e46:	4b90      	ldr	r3, [pc, #576]	; (8001088 <ESPRxDecoder+0x534>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==5){
 8000e4c:	e0ef      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=5;
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <ESPRxDecoder+0x520>)
 8000e50:	2205      	movs	r2, #5
 8000e52:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==5){
 8000e54:	e0eb      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }
			 else if((Rxwifi_data== userNameWifi[5])&&(bufferptr==5))
 8000e56:	4b86      	ldr	r3, [pc, #536]	; (8001070 <ESPRxDecoder+0x51c>)
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	79fa      	ldrb	r2, [r7, #7]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d11d      	bne.n	8000e9c <ESPRxDecoder+0x348>
 8000e60:	4b84      	ldr	r3, [pc, #528]	; (8001074 <ESPRxDecoder+0x520>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d119      	bne.n	8000e9c <ESPRxDecoder+0x348>
			 {
				 if(lengthOfUserName==6){
 8000e68:	4b83      	ldr	r3, [pc, #524]	; (8001078 <ESPRxDecoder+0x524>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d111      	bne.n	8000e94 <ESPRxDecoder+0x340>
					bufferptr=0;
 8000e70:	4b80      	ldr	r3, [pc, #512]	; (8001074 <ESPRxDecoder+0x520>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000e76:	4b81      	ldr	r3, [pc, #516]	; (800107c <ESPRxDecoder+0x528>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000e80:	4b7f      	ldr	r3, [pc, #508]	; (8001080 <ESPRxDecoder+0x52c>)
 8000e82:	2246      	movs	r2, #70	; 0x46
 8000e84:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000e86:	4b7f      	ldr	r3, [pc, #508]	; (8001084 <ESPRxDecoder+0x530>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000e8c:	4b7e      	ldr	r3, [pc, #504]	; (8001088 <ESPRxDecoder+0x534>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==6){
 8000e92:	e0cc      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=6;
 8000e94:	4b77      	ldr	r3, [pc, #476]	; (8001074 <ESPRxDecoder+0x520>)
 8000e96:	2206      	movs	r2, #6
 8000e98:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==6){
 8000e9a:	e0c8      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }
			 else if((Rxwifi_data== userNameWifi[6])&&(bufferptr==6))
 8000e9c:	4b74      	ldr	r3, [pc, #464]	; (8001070 <ESPRxDecoder+0x51c>)
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d11d      	bne.n	8000ee2 <ESPRxDecoder+0x38e>
 8000ea6:	4b73      	ldr	r3, [pc, #460]	; (8001074 <ESPRxDecoder+0x520>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d119      	bne.n	8000ee2 <ESPRxDecoder+0x38e>
			 {
				 if(lengthOfUserName==7){
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <ESPRxDecoder+0x524>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d111      	bne.n	8000eda <ESPRxDecoder+0x386>
					bufferptr=0;
 8000eb6:	4b6f      	ldr	r3, [pc, #444]	; (8001074 <ESPRxDecoder+0x520>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000ebc:	4b6f      	ldr	r3, [pc, #444]	; (800107c <ESPRxDecoder+0x528>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000ec6:	4b6e      	ldr	r3, [pc, #440]	; (8001080 <ESPRxDecoder+0x52c>)
 8000ec8:	2246      	movs	r2, #70	; 0x46
 8000eca:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000ecc:	4b6d      	ldr	r3, [pc, #436]	; (8001084 <ESPRxDecoder+0x530>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000ed2:	4b6d      	ldr	r3, [pc, #436]	; (8001088 <ESPRxDecoder+0x534>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==7){
 8000ed8:	e0a9      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=7;
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <ESPRxDecoder+0x520>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==7){
 8000ee0:	e0a5      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }
			 else if((Rxwifi_data== userNameWifi[7])&&(bufferptr==7))
 8000ee2:	4b63      	ldr	r3, [pc, #396]	; (8001070 <ESPRxDecoder+0x51c>)
 8000ee4:	79db      	ldrb	r3, [r3, #7]
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d11d      	bne.n	8000f28 <ESPRxDecoder+0x3d4>
 8000eec:	4b61      	ldr	r3, [pc, #388]	; (8001074 <ESPRxDecoder+0x520>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d119      	bne.n	8000f28 <ESPRxDecoder+0x3d4>
			 {
				 if(lengthOfUserName==8){
 8000ef4:	4b60      	ldr	r3, [pc, #384]	; (8001078 <ESPRxDecoder+0x524>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d111      	bne.n	8000f20 <ESPRxDecoder+0x3cc>
					bufferptr=0;
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <ESPRxDecoder+0x520>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000f02:	4b5e      	ldr	r3, [pc, #376]	; (800107c <ESPRxDecoder+0x528>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000f0c:	4b5c      	ldr	r3, [pc, #368]	; (8001080 <ESPRxDecoder+0x52c>)
 8000f0e:	2246      	movs	r2, #70	; 0x46
 8000f10:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000f12:	4b5c      	ldr	r3, [pc, #368]	; (8001084 <ESPRxDecoder+0x530>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000f18:	4b5b      	ldr	r3, [pc, #364]	; (8001088 <ESPRxDecoder+0x534>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==8){
 8000f1e:	e086      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=8;
 8000f20:	4b54      	ldr	r3, [pc, #336]	; (8001074 <ESPRxDecoder+0x520>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==8){
 8000f26:	e082      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }
			 else if((Rxwifi_data== userNameWifi[8])&&(bufferptr==8))
 8000f28:	4b51      	ldr	r3, [pc, #324]	; (8001070 <ESPRxDecoder+0x51c>)
 8000f2a:	7a1b      	ldrb	r3, [r3, #8]
 8000f2c:	79fa      	ldrb	r2, [r7, #7]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d11d      	bne.n	8000f6e <ESPRxDecoder+0x41a>
 8000f32:	4b50      	ldr	r3, [pc, #320]	; (8001074 <ESPRxDecoder+0x520>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d119      	bne.n	8000f6e <ESPRxDecoder+0x41a>
			 {
				 if(lengthOfUserName==9){
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <ESPRxDecoder+0x524>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d111      	bne.n	8000f66 <ESPRxDecoder+0x412>
						bufferptr=0;
 8000f42:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <ESPRxDecoder+0x520>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
						Err_bufferptr=0;
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <ESPRxDecoder+0x528>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
						Rxseqdecoder=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71bb      	strb	r3, [r7, #6]
						wifi_command=70;
 8000f52:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <ESPRxDecoder+0x52c>)
 8000f54:	2246      	movs	r2, #70	; 0x46
 8000f56:	701a      	strb	r2, [r3, #0]
						Error_Retry=0;
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <ESPRxDecoder+0x530>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
						WifiDisplay = 1;
 8000f5e:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <ESPRxDecoder+0x534>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==9){
 8000f64:	e063      	b.n	800102e <ESPRxDecoder+0x4da>
					}else{
						bufferptr=9;
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <ESPRxDecoder+0x520>)
 8000f68:	2209      	movs	r2, #9
 8000f6a:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==9){
 8000f6c:	e05f      	b.n	800102e <ESPRxDecoder+0x4da>
					}
			 }
			 else if((Rxwifi_data== userNameWifi[9])&&(bufferptr==9))
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <ESPRxDecoder+0x51c>)
 8000f70:	7a5b      	ldrb	r3, [r3, #9]
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d11d      	bne.n	8000fb4 <ESPRxDecoder+0x460>
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <ESPRxDecoder+0x520>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d119      	bne.n	8000fb4 <ESPRxDecoder+0x460>
			 {
				 if(lengthOfUserName==10){
 8000f80:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <ESPRxDecoder+0x524>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b0a      	cmp	r3, #10
 8000f86:	d111      	bne.n	8000fac <ESPRxDecoder+0x458>
					bufferptr=0;
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <ESPRxDecoder+0x520>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
					Err_bufferptr=0;
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <ESPRxDecoder+0x528>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
					wifi_command=70;
 8000f98:	4b39      	ldr	r3, [pc, #228]	; (8001080 <ESPRxDecoder+0x52c>)
 8000f9a:	2246      	movs	r2, #70	; 0x46
 8000f9c:	701a      	strb	r2, [r3, #0]
					Error_Retry=0;
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <ESPRxDecoder+0x530>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
					WifiDisplay = 1;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <ESPRxDecoder+0x534>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==10){
 8000faa:	e040      	b.n	800102e <ESPRxDecoder+0x4da>
				}else{
					bufferptr=10;
 8000fac:	4b31      	ldr	r3, [pc, #196]	; (8001074 <ESPRxDecoder+0x520>)
 8000fae:	220a      	movs	r2, #10
 8000fb0:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==10){
 8000fb2:	e03c      	b.n	800102e <ESPRxDecoder+0x4da>
				}
			 }
			 else if((Rxwifi_data== wifiusernamecheck[10])&&(bufferptr==10))
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <ESPRxDecoder+0x538>)
 8000fb6:	7a9b      	ldrb	r3, [r3, #10]
 8000fb8:	79fa      	ldrb	r2, [r7, #7]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d11d      	bne.n	8000ffa <ESPRxDecoder+0x4a6>
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <ESPRxDecoder+0x520>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d119      	bne.n	8000ffa <ESPRxDecoder+0x4a6>
			 {
				 if(lengthOfUserName==11){
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <ESPRxDecoder+0x524>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b0b      	cmp	r3, #11
 8000fcc:	d111      	bne.n	8000ff2 <ESPRxDecoder+0x49e>
						bufferptr=0;
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <ESPRxDecoder+0x520>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
						Err_bufferptr=0;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <ESPRxDecoder+0x528>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
						Rxseqdecoder=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71bb      	strb	r3, [r7, #6]
						wifi_command=70;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <ESPRxDecoder+0x52c>)
 8000fe0:	2246      	movs	r2, #70	; 0x46
 8000fe2:	701a      	strb	r2, [r3, #0]
						Error_Retry=0;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <ESPRxDecoder+0x530>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
						WifiDisplay = 1;
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <ESPRxDecoder+0x534>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==11){
 8000ff0:	e01d      	b.n	800102e <ESPRxDecoder+0x4da>
					}else{
						bufferptr=11;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <ESPRxDecoder+0x520>)
 8000ff4:	220b      	movs	r2, #11
 8000ff6:	701a      	strb	r2, [r3, #0]
				 if(lengthOfUserName==11){
 8000ff8:	e019      	b.n	800102e <ESPRxDecoder+0x4da>
					}
			 }
			 else if((Rxwifi_data== wifiusernamecheck[11])&&(bufferptr==11))
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <ESPRxDecoder+0x538>)
 8000ffc:	7adb      	ldrb	r3, [r3, #11]
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	429a      	cmp	r2, r3
 8001002:	d114      	bne.n	800102e <ESPRxDecoder+0x4da>
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <ESPRxDecoder+0x520>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b0b      	cmp	r3, #11
 800100a:	d110      	bne.n	800102e <ESPRxDecoder+0x4da>
			 {
				//bufferptr=12;
				bufferptr=0;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <ESPRxDecoder+0x520>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <ESPRxDecoder+0x528>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001018:	2300      	movs	r3, #0
 800101a:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <ESPRxDecoder+0x52c>)
 800101e:	2246      	movs	r2, #70	; 0x46
 8001020:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <ESPRxDecoder+0x530>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <ESPRxDecoder+0x534>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
			 }


			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b4e      	cmp	r3, #78	; 0x4e
 8001032:	d107      	bne.n	8001044 <ESPRxDecoder+0x4f0>
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <ESPRxDecoder+0x528>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <ESPRxDecoder+0x4f0>
			 {
			 	Err_bufferptr=1;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <ESPRxDecoder+0x528>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e050      	b.n	80010e6 <ESPRxDecoder+0x592>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b6f      	cmp	r3, #111	; 0x6f
 8001048:	d107      	bne.n	800105a <ESPRxDecoder+0x506>
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <ESPRxDecoder+0x528>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d103      	bne.n	800105a <ESPRxDecoder+0x506>
			 {
			 	Err_bufferptr=2;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <ESPRxDecoder+0x528>)
 8001054:	2202      	movs	r2, #2
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e045      	b.n	80010e6 <ESPRxDecoder+0x592>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b41      	cmp	r3, #65	; 0x41
 800105e:	d117      	bne.n	8001090 <ESPRxDecoder+0x53c>
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <ESPRxDecoder+0x528>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d113      	bne.n	8001090 <ESPRxDecoder+0x53c>
			 {
			 	Err_bufferptr=3;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <ESPRxDecoder+0x528>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e03a      	b.n	80010e6 <ESPRxDecoder+0x592>
 8001070:	200007bc 	.word	0x200007bc
 8001074:	20000c28 	.word	0x20000c28
 8001078:	20000815 	.word	0x20000815
 800107c:	200000eb 	.word	0x200000eb
 8001080:	20000a62 	.word	0x20000a62
 8001084:	200001b1 	.word	0x200001b1
 8001088:	200000ec 	.word	0x200000ec
 800108c:	20000004 	.word	0x20000004
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b50      	cmp	r3, #80	; 0x50
 8001094:	f040 87fd 	bne.w	8002092 <ESPRxDecoder+0x153e>
 8001098:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <ESPRxDecoder+0x778>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	f040 87f8 	bne.w	8002092 <ESPRxDecoder+0x153e>
			 {
			 	Err_bufferptr=0;
 80010a2:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <ESPRxDecoder+0x778>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80010a8:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <ESPRxDecoder+0x77c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 80010b2:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <ESPRxDecoder+0x780>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 80010b8:	4b87      	ldr	r3, [pc, #540]	; (80012d8 <ESPRxDecoder+0x784>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b85      	ldr	r3, [pc, #532]	; (80012d8 <ESPRxDecoder+0x784>)
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	4b84      	ldr	r3, [pc, #528]	; (80012d8 <ESPRxDecoder+0x784>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d804      	bhi.n	80010d6 <ESPRxDecoder+0x582>
				{
				   wifi_command=50;
 80010cc:	4b83      	ldr	r3, [pc, #524]	; (80012dc <ESPRxDecoder+0x788>)
 80010ce:	2232      	movs	r2, #50	; 0x32
 80010d0:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 80010d2:	f000 bfde 	b.w	8002092 <ESPRxDecoder+0x153e>
				   wifi_command=10;
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <ESPRxDecoder+0x788>)
 80010d8:	220a      	movs	r2, #10
 80010da:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 80010dc:	4b7e      	ldr	r3, [pc, #504]	; (80012d8 <ESPRxDecoder+0x784>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
		break;
 80010e2:	f000 bfd6 	b.w	8002092 <ESPRxDecoder+0x153e>
 80010e6:	f000 bfd4 	b.w	8002092 <ESPRxDecoder+0x153e>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b4f      	cmp	r3, #79	; 0x4f
 80010ee:	d108      	bne.n	8001102 <ESPRxDecoder+0x5ae>
 80010f0:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <ESPRxDecoder+0x77c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <ESPRxDecoder+0x5ae>
			 {
			 	bufferptr=1;
 80010f8:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <ESPRxDecoder+0x77c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 80010fe:	f000 bfca 	b.w	8002096 <ESPRxDecoder+0x1542>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b4b      	cmp	r3, #75	; 0x4b
 8001106:	f040 87c6 	bne.w	8002096 <ESPRxDecoder+0x1542>
 800110a:	4b71      	ldr	r3, [pc, #452]	; (80012d0 <ESPRxDecoder+0x77c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f040 87c1 	bne.w	8002096 <ESPRxDecoder+0x1542>
			 	bufferptr=0;
 8001114:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 800111a:	2300      	movs	r3, #0
 800111c:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 800111e:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <ESPRxDecoder+0x788>)
 8001120:	2250      	movs	r2, #80	; 0x50
 8001122:	701a      	strb	r2, [r3, #0]
		break;
 8001124:	f000 bfb7 	b.w	8002096 <ESPRxDecoder+0x1542>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b43      	cmp	r3, #67	; 0x43
 800112c:	d107      	bne.n	800113e <ESPRxDecoder+0x5ea>
 800112e:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <ESPRxDecoder+0x5ea>
			 {
			 	bufferptr=1;
 8001136:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e04e      	b.n	80011dc <ESPRxDecoder+0x688>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b4f      	cmp	r3, #79	; 0x4f
 8001142:	d107      	bne.n	8001154 <ESPRxDecoder+0x600>
 8001144:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d103      	bne.n	8001154 <ESPRxDecoder+0x600>
			 {
			 	bufferptr=2;
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <ESPRxDecoder+0x77c>)
 800114e:	2202      	movs	r2, #2
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e043      	b.n	80011dc <ESPRxDecoder+0x688>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b4e      	cmp	r3, #78	; 0x4e
 8001158:	d107      	bne.n	800116a <ESPRxDecoder+0x616>
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <ESPRxDecoder+0x77c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d103      	bne.n	800116a <ESPRxDecoder+0x616>
			 {
			 	bufferptr=3;
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001164:	2203      	movs	r2, #3
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e038      	b.n	80011dc <ESPRxDecoder+0x688>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b4e      	cmp	r3, #78	; 0x4e
 800116e:	d107      	bne.n	8001180 <ESPRxDecoder+0x62c>
 8001170:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d103      	bne.n	8001180 <ESPRxDecoder+0x62c>
			 {
			 	bufferptr=4;
 8001178:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <ESPRxDecoder+0x77c>)
 800117a:	2204      	movs	r2, #4
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e02d      	b.n	80011dc <ESPRxDecoder+0x688>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b45      	cmp	r3, #69	; 0x45
 8001184:	d107      	bne.n	8001196 <ESPRxDecoder+0x642>
 8001186:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d103      	bne.n	8001196 <ESPRxDecoder+0x642>
			 {
			 	bufferptr=5;
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001190:	2205      	movs	r2, #5
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e022      	b.n	80011dc <ESPRxDecoder+0x688>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b43      	cmp	r3, #67	; 0x43
 800119a:	d107      	bne.n	80011ac <ESPRxDecoder+0x658>
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <ESPRxDecoder+0x77c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d103      	bne.n	80011ac <ESPRxDecoder+0x658>
			 {
			 	bufferptr=6;
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011a6:	2206      	movs	r2, #6
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e017      	b.n	80011dc <ESPRxDecoder+0x688>
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b54      	cmp	r3, #84	; 0x54
 80011b0:	d114      	bne.n	80011dc <ESPRxDecoder+0x688>
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d110      	bne.n	80011dc <ESPRxDecoder+0x688>
			 {
			 	Rxseqdecoder=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <ESPRxDecoder+0x788>)
 80011c0:	225a      	movs	r2, #90	; 0x5a
 80011c2:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80011c4:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <ESPRxDecoder+0x784>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <ESPRxDecoder+0x778>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <ESPRxDecoder+0x780>)
 80011d8:	2202      	movs	r2, #2
 80011da:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b4c      	cmp	r3, #76	; 0x4c
 80011e0:	d107      	bne.n	80011f2 <ESPRxDecoder+0x69e>
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <ESPRxDecoder+0x69e>
			 {
			 	bufferptr=1;
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e040      	b.n	8001274 <ESPRxDecoder+0x720>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b69      	cmp	r3, #105	; 0x69
 80011f6:	d107      	bne.n	8001208 <ESPRxDecoder+0x6b4>
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <ESPRxDecoder+0x77c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <ESPRxDecoder+0x6b4>
			 {
			 	bufferptr=2;
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e035      	b.n	8001274 <ESPRxDecoder+0x720>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b6e      	cmp	r3, #110	; 0x6e
 800120c:	d107      	bne.n	800121e <ESPRxDecoder+0x6ca>
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d103      	bne.n	800121e <ESPRxDecoder+0x6ca>
			 {
			 	bufferptr=3;
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001218:	2203      	movs	r2, #3
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e02a      	b.n	8001274 <ESPRxDecoder+0x720>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b6b      	cmp	r3, #107	; 0x6b
 8001222:	d107      	bne.n	8001234 <ESPRxDecoder+0x6e0>
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d103      	bne.n	8001234 <ESPRxDecoder+0x6e0>
			 {
			 	bufferptr=4;
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <ESPRxDecoder+0x77c>)
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e01f      	b.n	8001274 <ESPRxDecoder+0x720>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b65      	cmp	r3, #101	; 0x65
 8001238:	d107      	bne.n	800124a <ESPRxDecoder+0x6f6>
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <ESPRxDecoder+0x77c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d103      	bne.n	800124a <ESPRxDecoder+0x6f6>
			 {
			 	bufferptr=5;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001244:	2205      	movs	r2, #5
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e014      	b.n	8001274 <ESPRxDecoder+0x720>
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d111      	bne.n	8001274 <ESPRxDecoder+0x720>
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d10d      	bne.n	8001274 <ESPRxDecoder+0x720>
			 {
			 	Rxseqdecoder=0;
 8001258:	2300      	movs	r3, #0
 800125a:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <ESPRxDecoder+0x788>)
 800125e:	225a      	movs	r2, #90	; 0x5a
 8001260:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <ESPRxDecoder+0x77c>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <ESPRxDecoder+0x784>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <ESPRxDecoder+0x778>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b45      	cmp	r3, #69	; 0x45
 8001278:	d107      	bne.n	800128a <ESPRxDecoder+0x736>
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <ESPRxDecoder+0x778>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <ESPRxDecoder+0x736>
			 {
			 	Err_bufferptr=1;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <ESPRxDecoder+0x778>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e055      	b.n	8001336 <ESPRxDecoder+0x7e2>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b52      	cmp	r3, #82	; 0x52
 800128e:	d107      	bne.n	80012a0 <ESPRxDecoder+0x74c>
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <ESPRxDecoder+0x778>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d103      	bne.n	80012a0 <ESPRxDecoder+0x74c>
			 {
			 	Err_bufferptr=2;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <ESPRxDecoder+0x778>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e04a      	b.n	8001336 <ESPRxDecoder+0x7e2>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b52      	cmp	r3, #82	; 0x52
 80012a4:	d107      	bne.n	80012b6 <ESPRxDecoder+0x762>
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <ESPRxDecoder+0x778>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d103      	bne.n	80012b6 <ESPRxDecoder+0x762>
			 {
			 	Err_bufferptr=3;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <ESPRxDecoder+0x778>)
 80012b0:	2203      	movs	r2, #3
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e03f      	b.n	8001336 <ESPRxDecoder+0x7e2>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b4f      	cmp	r3, #79	; 0x4f
 80012ba:	d111      	bne.n	80012e0 <ESPRxDecoder+0x78c>
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <ESPRxDecoder+0x778>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d10d      	bne.n	80012e0 <ESPRxDecoder+0x78c>
			 {
			 	Err_bufferptr=4;
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <ESPRxDecoder+0x778>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e034      	b.n	8001336 <ESPRxDecoder+0x7e2>
 80012cc:	200000eb 	.word	0x200000eb
 80012d0:	20000c28 	.word	0x20000c28
 80012d4:	200000ec 	.word	0x200000ec
 80012d8:	200001b1 	.word	0x200001b1
 80012dc:	20000a62 	.word	0x20000a62
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b52      	cmp	r3, #82	; 0x52
 80012e4:	f040 86d9 	bne.w	800209a <ESPRxDecoder+0x1546>
 80012e8:	4bac      	ldr	r3, [pc, #688]	; (800159c <ESPRxDecoder+0xa48>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	f040 86d4 	bne.w	800209a <ESPRxDecoder+0x1546>
			 {
			   	Err_bufferptr=0;
 80012f2:	4baa      	ldr	r3, [pc, #680]	; (800159c <ESPRxDecoder+0xa48>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80012f8:	4ba9      	ldr	r3, [pc, #676]	; (80015a0 <ESPRxDecoder+0xa4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80012fe:	2300      	movs	r3, #0
 8001300:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8001302:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <ESPRxDecoder+0xa50>)
 8001304:	2204      	movs	r2, #4
 8001306:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8001308:	4ba7      	ldr	r3, [pc, #668]	; (80015a8 <ESPRxDecoder+0xa54>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4ba5      	ldr	r3, [pc, #660]	; (80015a8 <ESPRxDecoder+0xa54>)
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	4ba4      	ldr	r3, [pc, #656]	; (80015a8 <ESPRxDecoder+0xa54>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d804      	bhi.n	8001326 <ESPRxDecoder+0x7d2>
				{
				   wifi_command=80;
 800131c:	4ba3      	ldr	r3, [pc, #652]	; (80015ac <ESPRxDecoder+0xa58>)
 800131e:	2250      	movs	r2, #80	; 0x50
 8001320:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 8001322:	f000 beba 	b.w	800209a <ESPRxDecoder+0x1546>
				   wifi_command=50;	 // modified by satheesh
 8001326:	4ba1      	ldr	r3, [pc, #644]	; (80015ac <ESPRxDecoder+0xa58>)
 8001328:	2232      	movs	r2, #50	; 0x32
 800132a:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 800132c:	4b9e      	ldr	r3, [pc, #632]	; (80015a8 <ESPRxDecoder+0xa54>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
		break;
 8001332:	f000 beb2 	b.w	800209a <ESPRxDecoder+0x1546>
 8001336:	f000 beb0 	b.w	800209a <ESPRxDecoder+0x1546>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b3e      	cmp	r3, #62	; 0x3e
 800133e:	f040 86ae 	bne.w	800209e <ESPRxDecoder+0x154a>
 8001342:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <ESPRxDecoder+0xa4c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 86a9 	bne.w	800209e <ESPRxDecoder+0x154a>
			 {
			 	bufferptr=0;
 800134c:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <ESPRxDecoder+0xa4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001352:	2300      	movs	r3, #0
 8001354:	71bb      	strb	r3, [r7, #6]
				wifi_command=100;
 8001356:	4b95      	ldr	r3, [pc, #596]	; (80015ac <ESPRxDecoder+0xa58>)
 8001358:	2264      	movs	r2, #100	; 0x64
 800135a:	701a      	strb	r2, [r3, #0]
			 }
		break;
 800135c:	f000 be9f 	b.w	800209e <ESPRxDecoder+0x154a>
		case 7:
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b24      	cmp	r3, #36	; 0x24
 8001364:	d10b      	bne.n	800137e <ESPRxDecoder+0x82a>
 8001366:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d107      	bne.n	800137e <ESPRxDecoder+0x82a>
			{
				 Data_bufferptr=1;
 800136e:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
				 Valid_DataWifi1= 1;
 8001374:	4b8f      	ldr	r3, [pc, #572]	; (80015b4 <ESPRxDecoder+0xa60>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	f000 bce0 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==1)
 800137e:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10c      	bne.n	80013a0 <ESPRxDecoder+0x84c>
			 {
				Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fe9f 	bl	80020cc <DecToASCIIFun>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <ESPRxDecoder+0xa64>)
 8001394:	701a      	strb	r2, [r3, #0]
				Data_bufferptr=2;
 8001396:	4b86      	ldr	r3, [pc, #536]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001398:	2202      	movs	r2, #2
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	f000 bccf 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==2)
 80013a0:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d10c      	bne.n	80013c2 <ESPRxDecoder+0x86e>
			{
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fe8e 	bl	80020cc <DecToASCIIFun>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <ESPRxDecoder+0xa64>)
 80013b6:	705a      	strb	r2, [r3, #1]
				 Data_bufferptr=3;
 80013b8:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	f000 bcbe 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==3)//,
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d10c      	bne.n	80013e4 <ESPRxDecoder+0x890>
			{
				 Data_bufferptr=4;
 80013ca:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);//cyclic time
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fe7a 	bl	80020cc <DecToASCIIFun>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <ESPRxDecoder+0xa64>)
 80013de:	709a      	strb	r2, [r3, #2]
 80013e0:	f000 bcad 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==4)
 80013e4:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d104      	bne.n	80013f6 <ESPRxDecoder+0x8a2>
			{
				 Data_bufferptr=5;
 80013ec:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013ee:	2205      	movs	r2, #5
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	f000 bca4 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==5)
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d10c      	bne.n	8001418 <ESPRxDecoder+0x8c4>
			{
				Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fe63 	bl	80020cc <DecToASCIIFun>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <ESPRxDecoder+0xa64>)
 800140c:	70da      	strb	r2, [r3, #3]
				 Data_bufferptr=6;
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001410:	2206      	movs	r2, #6
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	f000 bc93 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==6)
 8001418:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b06      	cmp	r3, #6
 800141e:	d10c      	bne.n	800143a <ESPRxDecoder+0x8e6>
			{
				Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);//date
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fe52 	bl	80020cc <DecToASCIIFun>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <ESPRxDecoder+0xa64>)
 800142e:	711a      	strb	r2, [r3, #4]
				Data_bufferptr=7;
 8001430:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001432:	2207      	movs	r2, #7
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	f000 bc82 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==7)// '/'
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b07      	cmp	r3, #7
 8001440:	d104      	bne.n	800144c <ESPRxDecoder+0x8f8>
			{
				 Data_bufferptr=8;
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001444:	2208      	movs	r2, #8
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	f000 bc79 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==8)
 800144c:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d10c      	bne.n	800146e <ESPRxDecoder+0x91a>
			{
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fe38 	bl	80020cc <DecToASCIIFun>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <ESPRxDecoder+0xa64>)
 8001462:	715a      	strb	r2, [r3, #5]
				 Data_bufferptr=9;
 8001464:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001466:	2209      	movs	r2, #9
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	f000 bc68 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==9)
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b09      	cmp	r3, #9
 8001474:	d10c      	bne.n	8001490 <ESPRxDecoder+0x93c>
			{
				Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fe27 	bl	80020cc <DecToASCIIFun>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <ESPRxDecoder+0xa64>)
 8001484:	719a      	strb	r2, [r3, #6]
				 Data_bufferptr=10;//month
 8001486:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001488:	220a      	movs	r2, #10
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	f000 bc57 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==10)
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b0a      	cmp	r3, #10
 8001496:	d104      	bne.n	80014a2 <ESPRxDecoder+0x94e>
			{
				 Data_bufferptr=11;//month
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800149a:	220b      	movs	r2, #11
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	f000 bc4e 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}

			else if(Data_bufferptr==11)// '/'
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b0b      	cmp	r3, #11
 80014a8:	d10c      	bne.n	80014c4 <ESPRxDecoder+0x970>
			 {
				Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fe0d 	bl	80020cc <DecToASCIIFun>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <ESPRxDecoder+0xa64>)
 80014b8:	71da      	strb	r2, [r3, #7]
				Data_bufferptr=12;
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014bc:	220c      	movs	r2, #12
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	f000 bc3d 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==12)////year
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d10c      	bne.n	80014e6 <ESPRxDecoder+0x992>
			{
				Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fdfc 	bl	80020cc <DecToASCIIFun>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <ESPRxDecoder+0xa64>)
 80014da:	721a      	strb	r2, [r3, #8]
				 Data_bufferptr=13;
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014de:	220d      	movs	r2, #13
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	f000 bc2c 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==13)//_
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b0d      	cmp	r3, #13
 80014ec:	d104      	bne.n	80014f8 <ESPRxDecoder+0x9a4>
			{

				 Data_bufferptr=14;
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014f0:	220e      	movs	r2, #14
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	f000 bc23 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==14)//
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <ESPRxDecoder+0xa5c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b0e      	cmp	r3, #14
 80014fe:	d10c      	bne.n	800151a <ESPRxDecoder+0x9c6>
			{
				Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fde2 	bl	80020cc <DecToASCIIFun>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <ESPRxDecoder+0xa64>)
 800150e:	725a      	strb	r2, [r3, #9]
				Data_bufferptr=15;
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001512:	220f      	movs	r2, #15
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	f000 bc12 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==15)
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	d10c      	bne.n	800153c <ESPRxDecoder+0x9e8>
			{
				Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fdd1 	bl	80020cc <DecToASCIIFun>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <ESPRxDecoder+0xa64>)
 8001530:	729a      	strb	r2, [r3, #10]
				Data_bufferptr=16;
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001534:	2210      	movs	r2, #16
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	f000 bc01 	b.w	8001d3e <ESPRxDecoder+0x11ea>
			}

			else if(Data_bufferptr==16)
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b10      	cmp	r3, #16
 8001542:	d103      	bne.n	800154c <ESPRxDecoder+0x9f8>
			 {

				Data_bufferptr=17;//hour
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001546:	2211      	movs	r2, #17
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e3f8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==17)//:
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b11      	cmp	r3, #17
 8001552:	d10b      	bne.n	800156c <ESPRxDecoder+0xa18>
			{
				Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fdb8 	bl	80020cc <DecToASCIIFun>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <ESPRxDecoder+0xa64>)
 8001562:	72da      	strb	r2, [r3, #11]
				 Data_bufferptr=18;//minute
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001566:	2212      	movs	r2, #18
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e3e8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==18)
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d10b      	bne.n	800158c <ESPRxDecoder+0xa38>
			{
				Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fda8 	bl	80020cc <DecToASCIIFun>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <ESPRxDecoder+0xa64>)
 8001582:	731a      	strb	r2, [r3, #12]
				Data_bufferptr=19;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001586:	2213      	movs	r2, #19
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e3d8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==19)
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <ESPRxDecoder+0xa5c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b13      	cmp	r3, #19
 8001592:	d113      	bne.n	80015bc <ESPRxDecoder+0xa68>
			{

				 Data_bufferptr=20;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <ESPRxDecoder+0xa5c>)
 8001596:	2214      	movs	r2, #20
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e3d0      	b.n	8001d3e <ESPRxDecoder+0x11ea>
 800159c:	200000eb 	.word	0x200000eb
 80015a0:	20000c28 	.word	0x20000c28
 80015a4:	200000ec 	.word	0x200000ec
 80015a8:	200001b1 	.word	0x200001b1
 80015ac:	20000a62 	.word	0x20000a62
 80015b0:	200000ea 	.word	0x200000ea
 80015b4:	200000f0 	.word	0x200000f0
 80015b8:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==20)//:
 80015bc:	4b9f      	ldr	r3, [pc, #636]	; (800183c <ESPRxDecoder+0xce8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b14      	cmp	r3, #20
 80015c2:	d10b      	bne.n	80015dc <ESPRxDecoder+0xa88>
			{
				Data_bufferptr=21;
 80015c4:	4b9d      	ldr	r3, [pc, #628]	; (800183c <ESPRxDecoder+0xce8>)
 80015c6:	2215      	movs	r2, #21
 80015c8:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fd7d 	bl	80020cc <DecToASCIIFun>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <ESPRxDecoder+0xcec>)
 80015d8:	735a      	strb	r2, [r3, #13]
 80015da:	e3b0      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}

			else if(Data_bufferptr==21)       	//seconds
 80015dc:	4b97      	ldr	r3, [pc, #604]	; (800183c <ESPRxDecoder+0xce8>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b15      	cmp	r3, #21
 80015e2:	d10b      	bne.n	80015fc <ESPRxDecoder+0xaa8>
			 {
				Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd70 	bl	80020cc <DecToASCIIFun>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <ESPRxDecoder+0xcec>)
 80015f2:	739a      	strb	r2, [r3, #14]
				Data_bufferptr=22;
 80015f4:	4b91      	ldr	r3, [pc, #580]	; (800183c <ESPRxDecoder+0xce8>)
 80015f6:	2216      	movs	r2, #22
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e3a0      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==22)
 80015fc:	4b8f      	ldr	r3, [pc, #572]	; (800183c <ESPRxDecoder+0xce8>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b16      	cmp	r3, #22
 8001602:	d103      	bne.n	800160c <ESPRxDecoder+0xab8>
			{

				 Data_bufferptr=23;
 8001604:	4b8d      	ldr	r3, [pc, #564]	; (800183c <ESPRxDecoder+0xce8>)
 8001606:	2217      	movs	r2, #23
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e398      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==23)      //,(to seperate data)
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <ESPRxDecoder+0xce8>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b17      	cmp	r3, #23
 8001612:	d10b      	bne.n	800162c <ESPRxDecoder+0xad8>
			{
				 Data_bufferptr=24;
 8001614:	4b89      	ldr	r3, [pc, #548]	; (800183c <ESPRxDecoder+0xce8>)
 8001616:	2218      	movs	r2, #24
 8001618:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fd55 	bl	80020cc <DecToASCIIFun>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b86      	ldr	r3, [pc, #536]	; (8001840 <ESPRxDecoder+0xcec>)
 8001628:	73da      	strb	r2, [r3, #15]
 800162a:	e388      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==24)
 800162c:	4b83      	ldr	r3, [pc, #524]	; (800183c <ESPRxDecoder+0xce8>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b18      	cmp	r3, #24
 8001632:	d10b      	bne.n	800164c <ESPRxDecoder+0xaf8>
			{
				Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd48 	bl	80020cc <DecToASCIIFun>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <ESPRxDecoder+0xcec>)
 8001642:	741a      	strb	r2, [r3, #16]
				 Data_bufferptr=25;
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <ESPRxDecoder+0xce8>)
 8001646:	2219      	movs	r2, #25
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e378      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==25)
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <ESPRxDecoder+0xce8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b19      	cmp	r3, #25
 8001652:	d10b      	bne.n	800166c <ESPRxDecoder+0xb18>
			{
				Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd38 	bl	80020cc <DecToASCIIFun>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b77      	ldr	r3, [pc, #476]	; (8001840 <ESPRxDecoder+0xcec>)
 8001662:	745a      	strb	r2, [r3, #17]
				 Data_bufferptr=26;
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <ESPRxDecoder+0xce8>)
 8001666:	221a      	movs	r2, #26
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e368      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==26)
 800166c:	4b73      	ldr	r3, [pc, #460]	; (800183c <ESPRxDecoder+0xce8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b1a      	cmp	r3, #26
 8001672:	d10b      	bne.n	800168c <ESPRxDecoder+0xb38>
			{
				 Data_bufferptr=27;
 8001674:	4b71      	ldr	r3, [pc, #452]	; (800183c <ESPRxDecoder+0xce8>)
 8001676:	221b      	movs	r2, #27
 8001678:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fd25 	bl	80020cc <DecToASCIIFun>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <ESPRxDecoder+0xcec>)
 8001688:	749a      	strb	r2, [r3, #18]
 800168a:	e358      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==27)
 800168c:	4b6b      	ldr	r3, [pc, #428]	; (800183c <ESPRxDecoder+0xce8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b1b      	cmp	r3, #27
 8001692:	d10b      	bne.n	80016ac <ESPRxDecoder+0xb58>
			 {
				Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fd18 	bl	80020cc <DecToASCIIFun>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b67      	ldr	r3, [pc, #412]	; (8001840 <ESPRxDecoder+0xcec>)
 80016a2:	74da      	strb	r2, [r3, #19]
				Data_bufferptr=28;//production
 80016a4:	4b65      	ldr	r3, [pc, #404]	; (800183c <ESPRxDecoder+0xce8>)
 80016a6:	221c      	movs	r2, #28
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e348      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==28)//,
 80016ac:	4b63      	ldr	r3, [pc, #396]	; (800183c <ESPRxDecoder+0xce8>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b1c      	cmp	r3, #28
 80016b2:	d103      	bne.n	80016bc <ESPRxDecoder+0xb68>
			{

				 Data_bufferptr=29;
 80016b4:	4b61      	ldr	r3, [pc, #388]	; (800183c <ESPRxDecoder+0xce8>)
 80016b6:	221d      	movs	r2, #29
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e340      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==29)//rejection
 80016bc:	4b5f      	ldr	r3, [pc, #380]	; (800183c <ESPRxDecoder+0xce8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b1d      	cmp	r3, #29
 80016c2:	d10b      	bne.n	80016dc <ESPRxDecoder+0xb88>
			{
				 Data_bufferptr=30;
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <ESPRxDecoder+0xce8>)
 80016c6:	221e      	movs	r2, #30
 80016c8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fcfd 	bl	80020cc <DecToASCIIFun>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <ESPRxDecoder+0xcec>)
 80016d8:	751a      	strb	r2, [r3, #20]
 80016da:	e330      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==30)
 80016dc:	4b57      	ldr	r3, [pc, #348]	; (800183c <ESPRxDecoder+0xce8>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b1e      	cmp	r3, #30
 80016e2:	d10b      	bne.n	80016fc <ESPRxDecoder+0xba8>
			{
				Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fcf0 	bl	80020cc <DecToASCIIFun>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <ESPRxDecoder+0xcec>)
 80016f2:	755a      	strb	r2, [r3, #21]
				 Data_bufferptr=31;
 80016f4:	4b51      	ldr	r3, [pc, #324]	; (800183c <ESPRxDecoder+0xce8>)
 80016f6:	221f      	movs	r2, #31
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e320      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==31)
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <ESPRxDecoder+0xce8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b1f      	cmp	r3, #31
 8001702:	d10b      	bne.n	800171c <ESPRxDecoder+0xbc8>
			{
				 Data_bufferptr=32;
 8001704:	4b4d      	ldr	r3, [pc, #308]	; (800183c <ESPRxDecoder+0xce8>)
 8001706:	2220      	movs	r2, #32
 8001708:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fcdd 	bl	80020cc <DecToASCIIFun>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <ESPRxDecoder+0xcec>)
 8001718:	759a      	strb	r2, [r3, #22]
 800171a:	e310      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==32)
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <ESPRxDecoder+0xce8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b20      	cmp	r3, #32
 8001722:	d10b      	bne.n	800173c <ESPRxDecoder+0xbe8>
			{
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fcd0 	bl	80020cc <DecToASCIIFun>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <ESPRxDecoder+0xcec>)
 8001732:	75da      	strb	r2, [r3, #23]
				 Data_bufferptr=33;
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <ESPRxDecoder+0xce8>)
 8001736:	2221      	movs	r2, #33	; 0x21
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e300      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==33)//rejection calculated in software
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <ESPRxDecoder+0xce8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b21      	cmp	r3, #33	; 0x21
 8001742:	d10b      	bne.n	800175c <ESPRxDecoder+0xc08>
			{
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fcc0 	bl	80020cc <DecToASCIIFun>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <ESPRxDecoder+0xcec>)
 8001752:	761a      	strb	r2, [r3, #24]
				 Data_bufferptr=34;
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <ESPRxDecoder+0xce8>)
 8001756:	2222      	movs	r2, #34	; 0x22
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e2f0      	b.n	8001d3e <ESPRxDecoder+0x11ea>
		/*		RefreshBlockInfo = 0;
				RxCompleteU2C1WIFI=1;
				Updatetimeinfo=1;*/
			}
			else if(Data_bufferptr==34)      //,
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <ESPRxDecoder+0xce8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b22      	cmp	r3, #34	; 0x22
 8001762:	d103      	bne.n	800176c <ESPRxDecoder+0xc18>
			{
				Data_bufferptr=35;
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <ESPRxDecoder+0xce8>)
 8001766:	2223      	movs	r2, #35	; 0x23
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e2e8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==35)      //batchTargetquantity
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <ESPRxDecoder+0xce8>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b23      	cmp	r3, #35	; 0x23
 8001772:	d10b      	bne.n	800178c <ESPRxDecoder+0xc38>
			 {
				Data_bufferptr=36;
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <ESPRxDecoder+0xce8>)
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fca5 	bl	80020cc <DecToASCIIFun>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <ESPRxDecoder+0xcec>)
 8001788:	765a      	strb	r2, [r3, #25]
 800178a:	e2d8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==36)
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <ESPRxDecoder+0xce8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b24      	cmp	r3, #36	; 0x24
 8001792:	d10b      	bne.n	80017ac <ESPRxDecoder+0xc58>
			 {
				Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fc98 	bl	80020cc <DecToASCIIFun>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <ESPRxDecoder+0xcec>)
 80017a2:	769a      	strb	r2, [r3, #26]
				Data_bufferptr=37;
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <ESPRxDecoder+0xce8>)
 80017a6:	2225      	movs	r2, #37	; 0x25
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e2c8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==37)
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <ESPRxDecoder+0xce8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b25      	cmp	r3, #37	; 0x25
 80017b2:	d10b      	bne.n	80017cc <ESPRxDecoder+0xc78>
			{
				Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fc88 	bl	80020cc <DecToASCIIFun>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <ESPRxDecoder+0xcec>)
 80017c2:	76da      	strb	r2, [r3, #27]
				Data_bufferptr=38;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <ESPRxDecoder+0xce8>)
 80017c6:	2226      	movs	r2, #38	; 0x26
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e2b8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==38)
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <ESPRxDecoder+0xce8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b26      	cmp	r3, #38	; 0x26
 80017d2:	d10b      	bne.n	80017ec <ESPRxDecoder+0xc98>
			{
				Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fc78 	bl	80020cc <DecToASCIIFun>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <ESPRxDecoder+0xcec>)
 80017e2:	771a      	strb	r2, [r3, #28]
				Data_bufferptr=39;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <ESPRxDecoder+0xce8>)
 80017e6:	2227      	movs	r2, #39	; 0x27
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e2a8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==39)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <ESPRxDecoder+0xce8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b27      	cmp	r3, #39	; 0x27
 80017f2:	d10b      	bne.n	800180c <ESPRxDecoder+0xcb8>
			{
				Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fc68 	bl	80020cc <DecToASCIIFun>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <ESPRxDecoder+0xcec>)
 8001802:	775a      	strb	r2, [r3, #29]
				Data_bufferptr=40;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <ESPRxDecoder+0xce8>)
 8001806:	2228      	movs	r2, #40	; 0x28
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e298      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==40)//,
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <ESPRxDecoder+0xce8>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b28      	cmp	r3, #40	; 0x28
 8001812:	d103      	bne.n	800181c <ESPRxDecoder+0xcc8>
			{
				Data_bufferptr=41;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <ESPRxDecoder+0xce8>)
 8001816:	2229      	movs	r2, #41	; 0x29
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e290      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==41)//temperateSet
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <ESPRxDecoder+0xce8>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b29      	cmp	r3, #41	; 0x29
 8001822:	d10f      	bne.n	8001844 <ESPRxDecoder+0xcf0>
			{
				Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fc50 	bl	80020cc <DecToASCIIFun>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <ESPRxDecoder+0xcec>)
 8001832:	779a      	strb	r2, [r3, #30]
				Data_bufferptr=42;
 8001834:	4b01      	ldr	r3, [pc, #4]	; (800183c <ESPRxDecoder+0xce8>)
 8001836:	222a      	movs	r2, #42	; 0x2a
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e280      	b.n	8001d3e <ESPRxDecoder+0x11ea>
 800183c:	200000ea 	.word	0x200000ea
 8001840:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==42)
 8001844:	4ba8      	ldr	r3, [pc, #672]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b2a      	cmp	r3, #42	; 0x2a
 800184a:	d10b      	bne.n	8001864 <ESPRxDecoder+0xd10>
			{
				Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fc3c 	bl	80020cc <DecToASCIIFun>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4ba4      	ldr	r3, [pc, #656]	; (8001aec <ESPRxDecoder+0xf98>)
 800185a:	77da      	strb	r2, [r3, #31]
				Data_bufferptr=43;
 800185c:	4ba2      	ldr	r3, [pc, #648]	; (8001ae8 <ESPRxDecoder+0xf94>)
 800185e:	222b      	movs	r2, #43	; 0x2b
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e26c      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==43)
 8001864:	4ba0      	ldr	r3, [pc, #640]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b2b      	cmp	r3, #43	; 0x2b
 800186a:	d10c      	bne.n	8001886 <ESPRxDecoder+0xd32>
			{
				Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fc2c 	bl	80020cc <DecToASCIIFun>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	4b9c      	ldr	r3, [pc, #624]	; (8001aec <ESPRxDecoder+0xf98>)
 800187a:	f883 2020 	strb.w	r2, [r3, #32]
				Data_bufferptr=44;
 800187e:	4b9a      	ldr	r3, [pc, #616]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001880:	222c      	movs	r2, #44	; 0x2c
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	e25b      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==44)//,
 8001886:	4b98      	ldr	r3, [pc, #608]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b2c      	cmp	r3, #44	; 0x2c
 800188c:	d103      	bne.n	8001896 <ESPRxDecoder+0xd42>
			{
				Data_bufferptr=45;
 800188e:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001890:	222d      	movs	r2, #45	; 0x2d
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e253      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==45)//temperateSetHigh
 8001896:	4b94      	ldr	r3, [pc, #592]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b2d      	cmp	r3, #45	; 0x2d
 800189c:	d10c      	bne.n	80018b8 <ESPRxDecoder+0xd64>
			{
				Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fc13 	bl	80020cc <DecToASCIIFun>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b90      	ldr	r3, [pc, #576]	; (8001aec <ESPRxDecoder+0xf98>)
 80018ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				Data_bufferptr=46;
 80018b0:	4b8d      	ldr	r3, [pc, #564]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80018b2:	222e      	movs	r2, #46	; 0x2e
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e242      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==46)
 80018b8:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b2e      	cmp	r3, #46	; 0x2e
 80018be:	d10c      	bne.n	80018da <ESPRxDecoder+0xd86>
			{
				Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fc02 	bl	80020cc <DecToASCIIFun>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b87      	ldr	r3, [pc, #540]	; (8001aec <ESPRxDecoder+0xf98>)
 80018ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Data_bufferptr=47;
 80018d2:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80018d4:	222f      	movs	r2, #47	; 0x2f
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e231      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==47)
 80018da:	4b83      	ldr	r3, [pc, #524]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b2f      	cmp	r3, #47	; 0x2f
 80018e0:	d10c      	bne.n	80018fc <ESPRxDecoder+0xda8>
			{
				Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fbf1 	bl	80020cc <DecToASCIIFun>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <ESPRxDecoder+0xf98>)
 80018f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				Data_bufferptr=48;
 80018f4:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80018f6:	2230      	movs	r2, #48	; 0x30
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e220      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==48)//,
 80018fc:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b30      	cmp	r3, #48	; 0x30
 8001902:	d103      	bne.n	800190c <ESPRxDecoder+0xdb8>
			{
				Data_bufferptr=49;
 8001904:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001906:	2231      	movs	r2, #49	; 0x31
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e218      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==49)//temperateSetLow
 800190c:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <ESPRxDecoder+0xf94>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b31      	cmp	r3, #49	; 0x31
 8001912:	d10c      	bne.n	800192e <ESPRxDecoder+0xdda>
			{
				Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fbd8 	bl	80020cc <DecToASCIIFun>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b72      	ldr	r3, [pc, #456]	; (8001aec <ESPRxDecoder+0xf98>)
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Data_bufferptr=50;
 8001926:	4b70      	ldr	r3, [pc, #448]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001928:	2232      	movs	r2, #50	; 0x32
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e207      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==50)
 800192e:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b32      	cmp	r3, #50	; 0x32
 8001934:	d10c      	bne.n	8001950 <ESPRxDecoder+0xdfc>
			{
				Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fbc7 	bl	80020cc <DecToASCIIFun>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <ESPRxDecoder+0xf98>)
 8001944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				Data_bufferptr=51;
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <ESPRxDecoder+0xf94>)
 800194a:	2233      	movs	r2, #51	; 0x33
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e1f6      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==51)
 8001950:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b33      	cmp	r3, #51	; 0x33
 8001956:	d10c      	bne.n	8001972 <ESPRxDecoder+0xe1e>
			{
				Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fbb6 	bl	80020cc <DecToASCIIFun>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <ESPRxDecoder+0xf98>)
 8001966:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				Data_bufferptr=52;
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <ESPRxDecoder+0xf94>)
 800196c:	2234      	movs	r2, #52	; 0x34
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e1e5      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==52)//,
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b34      	cmp	r3, #52	; 0x34
 8001978:	d103      	bne.n	8001982 <ESPRxDecoder+0xe2e>
			{
				Data_bufferptr=53;
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <ESPRxDecoder+0xf94>)
 800197c:	2235      	movs	r2, #53	; 0x35
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e1dd      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==53)//requirementId
 8001982:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b35      	cmp	r3, #53	; 0x35
 8001988:	d10c      	bne.n	80019a4 <ESPRxDecoder+0xe50>
			{
				Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fb9d 	bl	80020cc <DecToASCIIFun>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b55      	ldr	r3, [pc, #340]	; (8001aec <ESPRxDecoder+0xf98>)
 8001998:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Data_bufferptr=54;
 800199c:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <ESPRxDecoder+0xf94>)
 800199e:	2236      	movs	r2, #54	; 0x36
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e1cc      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==54)
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b36      	cmp	r3, #54	; 0x36
 80019aa:	d10c      	bne.n	80019c6 <ESPRxDecoder+0xe72>
			{
				Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fb8c 	bl	80020cc <DecToASCIIFun>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <ESPRxDecoder+0xf98>)
 80019ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				Data_bufferptr=55;
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80019c0:	2237      	movs	r2, #55	; 0x37
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e1bb      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==55)
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b37      	cmp	r3, #55	; 0x37
 80019cc:	d10c      	bne.n	80019e8 <ESPRxDecoder+0xe94>
			{
				Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb7b 	bl	80020cc <DecToASCIIFun>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <ESPRxDecoder+0xf98>)
 80019dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				Data_bufferptr=56;
 80019e0:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80019e2:	2238      	movs	r2, #56	; 0x38
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e1aa      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==56)
 80019e8:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <ESPRxDecoder+0xf94>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b38      	cmp	r3, #56	; 0x38
 80019ee:	d10c      	bne.n	8001a0a <ESPRxDecoder+0xeb6>
			{
				Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb6a 	bl	80020cc <DecToASCIIFun>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <ESPRxDecoder+0xf98>)
 80019fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				Data_bufferptr=57;
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a04:	2239      	movs	r2, #57	; 0x39
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e199      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==57)
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b39      	cmp	r3, #57	; 0x39
 8001a10:	d10c      	bne.n	8001a2c <ESPRxDecoder+0xed8>
			{
				Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fb59 	bl	80020cc <DecToASCIIFun>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <ESPRxDecoder+0xf98>)
 8001a20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				Data_bufferptr=58;
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a26:	223a      	movs	r2, #58	; 0x3a
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e188      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==58)
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b3a      	cmp	r3, #58	; 0x3a
 8001a32:	d10c      	bne.n	8001a4e <ESPRxDecoder+0xefa>
			{
				Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fb48 	bl	80020cc <DecToASCIIFun>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <ESPRxDecoder+0xf98>)
 8001a42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				Data_bufferptr=59;
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a48:	223b      	movs	r2, #59	; 0x3b
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e177      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==59)//,
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b3b      	cmp	r3, #59	; 0x3b
 8001a54:	d103      	bne.n	8001a5e <ESPRxDecoder+0xf0a>
			{
				Data_bufferptr=60;
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a58:	223c      	movs	r2, #60	; 0x3c
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e16f      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==60)//itemNumber
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b3c      	cmp	r3, #60	; 0x3c
 8001a64:	d10c      	bne.n	8001a80 <ESPRxDecoder+0xf2c>
			{
				Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fb2f 	bl	80020cc <DecToASCIIFun>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <ESPRxDecoder+0xf98>)
 8001a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Data_bufferptr=61;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a7a:	223d      	movs	r2, #61	; 0x3d
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e15e      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==61)
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b3d      	cmp	r3, #61	; 0x3d
 8001a86:	d10c      	bne.n	8001aa2 <ESPRxDecoder+0xf4e>
			{
				Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fb1e 	bl	80020cc <DecToASCIIFun>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <ESPRxDecoder+0xf98>)
 8001a96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				Data_bufferptr=62;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001a9c:	223e      	movs	r2, #62	; 0x3e
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e14d      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==62)
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8001aa8:	d10c      	bne.n	8001ac4 <ESPRxDecoder+0xf70>
			{
				Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fb0d 	bl	80020cc <DecToASCIIFun>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <ESPRxDecoder+0xf98>)
 8001ab8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				Data_bufferptr=63;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001abe:	223f      	movs	r2, #63	; 0x3f
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e13c      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==63)
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aca:	d111      	bne.n	8001af0 <ESPRxDecoder+0xf9c>
			{
				Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fafc 	bl	80020cc <DecToASCIIFun>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <ESPRxDecoder+0xf98>)
 8001ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				Data_bufferptr=64;
 8001ade:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <ESPRxDecoder+0xf94>)
 8001ae0:	2240      	movs	r2, #64	; 0x40
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e12b      	b.n	8001d3e <ESPRxDecoder+0x11ea>
 8001ae6:	bf00      	nop
 8001ae8:	200000ea 	.word	0x200000ea
 8001aec:	200000a4 	.word	0x200000a4
			}
			else if(Data_bufferptr==64)
 8001af0:	4ba0      	ldr	r3, [pc, #640]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b40      	cmp	r3, #64	; 0x40
 8001af6:	d10c      	bne.n	8001b12 <ESPRxDecoder+0xfbe>
			{
				Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fae6 	bl	80020cc <DecToASCIIFun>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b9c      	ldr	r3, [pc, #624]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001b06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				Data_bufferptr=65;
 8001b0a:	4b9a      	ldr	r3, [pc, #616]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b0c:	2241      	movs	r2, #65	; 0x41
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e115      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==65)
 8001b12:	4b98      	ldr	r3, [pc, #608]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b41      	cmp	r3, #65	; 0x41
 8001b18:	d10c      	bne.n	8001b34 <ESPRxDecoder+0xfe0>
			{
				Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fad5 	bl	80020cc <DecToASCIIFun>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b94      	ldr	r3, [pc, #592]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001b28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				Data_bufferptr=66;
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b2e:	2242      	movs	r2, #66	; 0x42
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e104      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==66)
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b42      	cmp	r3, #66	; 0x42
 8001b3a:	d10c      	bne.n	8001b56 <ESPRxDecoder+0x1002>
			{
				Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fac4 	bl	80020cc <DecToASCIIFun>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001b4a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				Data_bufferptr=67;
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b50:	2243      	movs	r2, #67	; 0x43
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e0f3      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==67)
 8001b56:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b43      	cmp	r3, #67	; 0x43
 8001b5c:	d10c      	bne.n	8001b78 <ESPRxDecoder+0x1024>
			{
				Uart_rx_buffer[52] = DecToASCIIFun(Rxwifi_data);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fab3 	bl	80020cc <DecToASCIIFun>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				Data_bufferptr=68;
 8001b70:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b72:	2244      	movs	r2, #68	; 0x44
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e0e2      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==68)
 8001b78:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b44      	cmp	r3, #68	; 0x44
 8001b7e:	d10c      	bne.n	8001b9a <ESPRxDecoder+0x1046>
			{
				Uart_rx_buffer[53] = DecToASCIIFun(Rxwifi_data);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 faa2 	bl	80020cc <DecToASCIIFun>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				Data_bufferptr=69;
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b94:	2245      	movs	r2, #69	; 0x45
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e0d1      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==69)
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b45      	cmp	r3, #69	; 0x45
 8001ba0:	d10c      	bne.n	8001bbc <ESPRxDecoder+0x1068>
			{
				Uart_rx_buffer[54] = DecToASCIIFun(Rxwifi_data);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fa91 	bl	80020cc <DecToASCIIFun>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001bb0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				Data_bufferptr=70;
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001bb6:	2246      	movs	r2, #70	; 0x46
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e0c0      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==70)//,
 8001bbc:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b46      	cmp	r3, #70	; 0x46
 8001bc2:	d103      	bne.n	8001bcc <ESPRxDecoder+0x1078>
			{
				Data_bufferptr=71;
 8001bc4:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001bc6:	2247      	movs	r2, #71	; 0x47
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e0b8      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==71)//batchNumber
 8001bcc:	4b69      	ldr	r3, [pc, #420]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b47      	cmp	r3, #71	; 0x47
 8001bd2:	d10c      	bne.n	8001bee <ESPRxDecoder+0x109a>
			{
				Uart_rx_buffer[55] = DecToASCIIFun(Rxwifi_data);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fa78 	bl	80020cc <DecToASCIIFun>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001be2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				Data_bufferptr=72;
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001be8:	2248      	movs	r2, #72	; 0x48
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e0a7      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==72)
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b48      	cmp	r3, #72	; 0x48
 8001bf4:	d10c      	bne.n	8001c10 <ESPRxDecoder+0x10bc>
			{
				Uart_rx_buffer[56] = DecToASCIIFun(Rxwifi_data);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fa67 	bl	80020cc <DecToASCIIFun>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				Data_bufferptr=73;
 8001c08:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c0a:	2249      	movs	r2, #73	; 0x49
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e096      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==73)
 8001c10:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b49      	cmp	r3, #73	; 0x49
 8001c16:	d10c      	bne.n	8001c32 <ESPRxDecoder+0x10de>
			{
				Uart_rx_buffer[57] = DecToASCIIFun(Rxwifi_data);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fa56 	bl	80020cc <DecToASCIIFun>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				Data_bufferptr=74;
 8001c2a:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c2c:	224a      	movs	r2, #74	; 0x4a
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e085      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==74)//,
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b4a      	cmp	r3, #74	; 0x4a
 8001c38:	d103      	bne.n	8001c42 <ESPRxDecoder+0x10ee>
			{
				Data_bufferptr=75;
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c3c:	224b      	movs	r2, #75	; 0x4b
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e07d      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==75)//resetStatus
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b4b      	cmp	r3, #75	; 0x4b
 8001c48:	d10c      	bne.n	8001c64 <ESPRxDecoder+0x1110>
			{
				Uart_rx_buffer[58] = DecToASCIIFun(Rxwifi_data);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fa3d 	bl	80020cc <DecToASCIIFun>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001c58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				Data_bufferptr=76;
 8001c5c:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c5e:	224c      	movs	r2, #76	; 0x4c
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e06c      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==76)
 8001c64:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b4c      	cmp	r3, #76	; 0x4c
 8001c6a:	d10c      	bne.n	8001c86 <ESPRxDecoder+0x1132>
			{
				Uart_rx_buffer[59] = DecToASCIIFun(Rxwifi_data);
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fa2c 	bl	80020cc <DecToASCIIFun>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001c7a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				Data_bufferptr=77;
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c80:	224d      	movs	r2, #77	; 0x4d
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e05b      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==77)//,
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b4d      	cmp	r3, #77	; 0x4d
 8001c8c:	d103      	bne.n	8001c96 <ESPRxDecoder+0x1142>
			{
				Data_bufferptr=78;
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c90:	224e      	movs	r2, #78	; 0x4e
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e053      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==78)//Reset status
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b4e      	cmp	r3, #78	; 0x4e
 8001c9c:	d10c      	bne.n	8001cb8 <ESPRxDecoder+0x1164>
			{
				Uart_rx_buffer[60] = DecToASCIIFun(Rxwifi_data);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fa13 	bl	80020cc <DecToASCIIFun>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				Data_bufferptr=79;
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001cb2:	224f      	movs	r2, #79	; 0x4f
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e042      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==79)
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b4f      	cmp	r3, #79	; 0x4f
 8001cbe:	d10c      	bne.n	8001cda <ESPRxDecoder+0x1186>
			{
				Uart_rx_buffer[61] = DecToASCIIFun(Rxwifi_data);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fa02 	bl	80020cc <DecToASCIIFun>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				Data_bufferptr=80;
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001cd4:	2250      	movs	r2, #80	; 0x50
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	e031      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==80)//,
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b50      	cmp	r3, #80	; 0x50
 8001ce0:	d103      	bne.n	8001cea <ESPRxDecoder+0x1196>
			{
				Data_bufferptr=81;
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001ce4:	2251      	movs	r2, #81	; 0x51
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e029      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==81)//Reason entry status
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b51      	cmp	r3, #81	; 0x51
 8001cf0:	d10c      	bne.n	8001d0c <ESPRxDecoder+0x11b8>
			{
				Uart_rx_buffer[62] = DecToASCIIFun(Rxwifi_data);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f9e9 	bl	80020cc <DecToASCIIFun>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				Data_bufferptr=82;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001d06:	2252      	movs	r2, #82	; 0x52
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e018      	b.n	8001d3e <ESPRxDecoder+0x11ea>
			}
			else if(Data_bufferptr==82)
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b52      	cmp	r3, #82	; 0x52
 8001d12:	d114      	bne.n	8001d3e <ESPRxDecoder+0x11ea>
			{
				Uart_rx_buffer[63] = DecToASCIIFun(Rxwifi_data);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f9d8 	bl	80020cc <DecToASCIIFun>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <ESPRxDecoder+0x1224>)
 8001d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				Data_bufferptr=0;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <ESPRxDecoder+0x1220>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <ESPRxDecoder+0x1228>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <ESPRxDecoder+0x122c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <ESPRxDecoder+0x1230>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
			}


		   if(Valid_DataWifi1)
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <ESPRxDecoder+0x1234>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a9 	beq.w	8001e9a <ESPRxDecoder+0x1346>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b55      	cmp	r3, #85	; 0x55
 8001d4c:	d107      	bne.n	8001d5e <ESPRxDecoder+0x120a>
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <ESPRxDecoder+0x1238>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <ESPRxDecoder+0x120a>
			 {
			 	bufferptr=1;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <ESPRxDecoder+0x1238>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e04e      	b.n	8001dfc <ESPRxDecoder+0x12a8>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b6e      	cmp	r3, #110	; 0x6e
 8001d62:	d115      	bne.n	8001d90 <ESPRxDecoder+0x123c>
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <ESPRxDecoder+0x1238>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d111      	bne.n	8001d90 <ESPRxDecoder+0x123c>
			 {
			 	bufferptr=2;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <ESPRxDecoder+0x1238>)
 8001d6e:	2202      	movs	r2, #2
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e043      	b.n	8001dfc <ESPRxDecoder+0x12a8>
 8001d74:	200000ea 	.word	0x200000ea
 8001d78:	200000a4 	.word	0x200000a4
 8001d7c:	20000c32 	.word	0x20000c32
 8001d80:	200000ef 	.word	0x200000ef
 8001d84:	200000ee 	.word	0x200000ee
 8001d88:	200000f0 	.word	0x200000f0
 8001d8c:	20000c28 	.word	0x20000c28
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b6c      	cmp	r3, #108	; 0x6c
 8001d94:	d107      	bne.n	8001da6 <ESPRxDecoder+0x1252>
 8001d96:	4b91      	ldr	r3, [pc, #580]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d103      	bne.n	8001da6 <ESPRxDecoder+0x1252>
			 {
			    bufferptr=3;
 8001d9e:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001da0:	2203      	movs	r2, #3
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e02a      	b.n	8001dfc <ESPRxDecoder+0x12a8>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b69      	cmp	r3, #105	; 0x69
 8001daa:	d107      	bne.n	8001dbc <ESPRxDecoder+0x1268>
 8001dac:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d103      	bne.n	8001dbc <ESPRxDecoder+0x1268>
			 {
			    bufferptr=4;
 8001db4:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001db6:	2204      	movs	r2, #4
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e01f      	b.n	8001dfc <ESPRxDecoder+0x12a8>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b6e      	cmp	r3, #110	; 0x6e
 8001dc0:	d107      	bne.n	8001dd2 <ESPRxDecoder+0x127e>
 8001dc2:	4b86      	ldr	r3, [pc, #536]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d103      	bne.n	8001dd2 <ESPRxDecoder+0x127e>
			 {
			    bufferptr=5;
 8001dca:	4b84      	ldr	r3, [pc, #528]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001dcc:	2205      	movs	r2, #5
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e014      	b.n	8001dfc <ESPRxDecoder+0x12a8>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b6b      	cmp	r3, #107	; 0x6b
 8001dd6:	d111      	bne.n	8001dfc <ESPRxDecoder+0x12a8>
 8001dd8:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d10d      	bne.n	8001dfc <ESPRxDecoder+0x12a8>
			 {
			    bufferptr=0;
 8001de0:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001dea:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <ESPRxDecoder+0x148c>)
 8001dec:	2266      	movs	r2, #102	; 0x66
 8001dee:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001df6:	4b7c      	ldr	r3, [pc, #496]	; (8001fe8 <ESPRxDecoder+0x1494>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b43      	cmp	r3, #67	; 0x43
 8001e00:	d107      	bne.n	8001e12 <ESPRxDecoder+0x12be>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <ESPRxDecoder+0x12be>
			 {
			 	bufferptr=1;
 8001e0a:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e0f3      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b4c      	cmp	r3, #76	; 0x4c
 8001e16:	d107      	bne.n	8001e28 <ESPRxDecoder+0x12d4>
 8001e18:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d103      	bne.n	8001e28 <ESPRxDecoder+0x12d4>
			 {
			 	bufferptr=2;
 8001e20:	4b6e      	ldr	r3, [pc, #440]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e0e8      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b4f      	cmp	r3, #79	; 0x4f
 8001e2c:	d107      	bne.n	8001e3e <ESPRxDecoder+0x12ea>
 8001e2e:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <ESPRxDecoder+0x12ea>
			 {
			    bufferptr=3;
 8001e36:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e38:	2203      	movs	r2, #3
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e0dd      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b53      	cmp	r3, #83	; 0x53
 8001e42:	d107      	bne.n	8001e54 <ESPRxDecoder+0x1300>
 8001e44:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d103      	bne.n	8001e54 <ESPRxDecoder+0x1300>
			 {
			    bufferptr=4;
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e0d2      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b45      	cmp	r3, #69	; 0x45
 8001e58:	d107      	bne.n	8001e6a <ESPRxDecoder+0x1316>
 8001e5a:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d103      	bne.n	8001e6a <ESPRxDecoder+0x1316>
			 {
			    bufferptr=5;
 8001e62:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e64:	2205      	movs	r2, #5
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e0c7      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b44      	cmp	r3, #68	; 0x44
 8001e6e:	f040 8118 	bne.w	80020a2 <ESPRxDecoder+0x154e>
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	f040 8113 	bne.w	80020a2 <ESPRxDecoder+0x154e>
			 {
			    bufferptr=0;
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001e86:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <ESPRxDecoder+0x148c>)
 8001e88:	2266      	movs	r2, #102	; 0x66
 8001e8a:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001e8c:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001e92:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <ESPRxDecoder+0x1494>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8001e98:	e103      	b.n	80020a2 <ESPRxDecoder+0x154e>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b55      	cmp	r3, #85	; 0x55
 8001e9e:	d107      	bne.n	8001eb0 <ESPRxDecoder+0x135c>
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <ESPRxDecoder+0x135c>
			 	bufferptr=1;
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e040      	b.n	8001f32 <ESPRxDecoder+0x13de>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b6e      	cmp	r3, #110	; 0x6e
 8001eb4:	d107      	bne.n	8001ec6 <ESPRxDecoder+0x1372>
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d103      	bne.n	8001ec6 <ESPRxDecoder+0x1372>
			 	bufferptr=2;
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	e035      	b.n	8001f32 <ESPRxDecoder+0x13de>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b6c      	cmp	r3, #108	; 0x6c
 8001eca:	d107      	bne.n	8001edc <ESPRxDecoder+0x1388>
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d103      	bne.n	8001edc <ESPRxDecoder+0x1388>
			    bufferptr=3;
 8001ed4:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e02a      	b.n	8001f32 <ESPRxDecoder+0x13de>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2b69      	cmp	r3, #105	; 0x69
 8001ee0:	d107      	bne.n	8001ef2 <ESPRxDecoder+0x139e>
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d103      	bne.n	8001ef2 <ESPRxDecoder+0x139e>
			    bufferptr=4;
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001eec:	2204      	movs	r2, #4
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e01f      	b.n	8001f32 <ESPRxDecoder+0x13de>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b6e      	cmp	r3, #110	; 0x6e
 8001ef6:	d107      	bne.n	8001f08 <ESPRxDecoder+0x13b4>
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d103      	bne.n	8001f08 <ESPRxDecoder+0x13b4>
			    bufferptr=5;
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f02:	2205      	movs	r2, #5
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e014      	b.n	8001f32 <ESPRxDecoder+0x13de>
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b6b      	cmp	r3, #107	; 0x6b
 8001f0c:	d111      	bne.n	8001f32 <ESPRxDecoder+0x13de>
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d10d      	bne.n	8001f32 <ESPRxDecoder+0x13de>
			    bufferptr=0;
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <ESPRxDecoder+0x148c>)
 8001f22:	2266      	movs	r2, #102	; 0x66
 8001f24:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <ESPRxDecoder+0x1494>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b43      	cmp	r3, #67	; 0x43
 8001f36:	d107      	bne.n	8001f48 <ESPRxDecoder+0x13f4>
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <ESPRxDecoder+0x13f4>
			 	bufferptr=1;
 8001f40:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e058      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b4c      	cmp	r3, #76	; 0x4c
 8001f4c:	d107      	bne.n	8001f5e <ESPRxDecoder+0x140a>
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d103      	bne.n	8001f5e <ESPRxDecoder+0x140a>
			 	bufferptr=2;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e04d      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b4f      	cmp	r3, #79	; 0x4f
 8001f62:	d107      	bne.n	8001f74 <ESPRxDecoder+0x1420>
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d103      	bne.n	8001f74 <ESPRxDecoder+0x1420>
			    bufferptr=3;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f6e:	2203      	movs	r2, #3
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e042      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b53      	cmp	r3, #83	; 0x53
 8001f78:	d107      	bne.n	8001f8a <ESPRxDecoder+0x1436>
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d103      	bne.n	8001f8a <ESPRxDecoder+0x1436>
			    bufferptr=4;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f84:	2204      	movs	r2, #4
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e037      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b45      	cmp	r3, #69	; 0x45
 8001f8e:	d107      	bne.n	8001fa0 <ESPRxDecoder+0x144c>
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d103      	bne.n	8001fa0 <ESPRxDecoder+0x144c>
			    bufferptr=5;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e02c      	b.n	8001ffa <ESPRxDecoder+0x14a6>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b44      	cmp	r3, #68	; 0x44
 8001fa4:	d17d      	bne.n	80020a2 <ESPRxDecoder+0x154e>
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d179      	bne.n	80020a2 <ESPRxDecoder+0x154e>
			    bufferptr=0;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <ESPRxDecoder+0x1488>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d90f      	bls.n	8001fec <ESPRxDecoder+0x1498>
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <ESPRxDecoder+0x148c>)
 8001fce:	220a      	movs	r2, #10
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <ESPRxDecoder+0x1490>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e00b      	b.n	8001ff2 <ESPRxDecoder+0x149e>
 8001fda:	bf00      	nop
 8001fdc:	20000c28 	.word	0x20000c28
 8001fe0:	20000a62 	.word	0x20000a62
 8001fe4:	200000ed 	.word	0x200000ed
 8001fe8:	200000f0 	.word	0x200000f0
					wifi_command=102;}
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <ESPRxDecoder+0x1560>)
 8001fee:	2266      	movs	r2, #102	; 0x66
 8001ff0:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <ESPRxDecoder+0x1564>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
		break;
 8001ff8:	e053      	b.n	80020a2 <ESPRxDecoder+0x154e>
 8001ffa:	e052      	b.n	80020a2 <ESPRxDecoder+0x154e>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b4f      	cmp	r3, #79	; 0x4f
 8002000:	d107      	bne.n	8002012 <ESPRxDecoder+0x14be>
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <ESPRxDecoder+0x1568>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <ESPRxDecoder+0x14be>
			 {
			 	bufferptr=1;
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <ESPRxDecoder+0x1568>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8002010:	e049      	b.n	80020a6 <ESPRxDecoder+0x1552>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b4b      	cmp	r3, #75	; 0x4b
 8002016:	d146      	bne.n	80020a6 <ESPRxDecoder+0x1552>
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <ESPRxDecoder+0x1568>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d142      	bne.n	80020a6 <ESPRxDecoder+0x1552>
			 	bufferptr=0;
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <ESPRxDecoder+0x1568>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <ESPRxDecoder+0x1560>)
 800202c:	2214      	movs	r2, #20
 800202e:	701a      	strb	r2, [r3, #0]
		break;
 8002030:	e039      	b.n	80020a6 <ESPRxDecoder+0x1552>
		case 9:
			tempbuff[refinc] = Rxwifi_data;
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <ESPRxDecoder+0x156c>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <ESPRxDecoder+0x1570>)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	5453      	strb	r3, [r2, r1]
			refinc= refinc+1;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <ESPRxDecoder+0x156c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <ESPRxDecoder+0x156c>)
 8002048:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='O')&&(bufferptr==0))
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b4f      	cmp	r3, #79	; 0x4f
 800204e:	d107      	bne.n	8002060 <ESPRxDecoder+0x150c>
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <ESPRxDecoder+0x1568>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d103      	bne.n	8002060 <ESPRxDecoder+0x150c>
			 {
				bufferptr=1;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <ESPRxDecoder+0x1568>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
				Rxseqdecoder=0;
				ipConfimation=1;
				wifi_command=49;
			 }
		break;
 800205e:	e024      	b.n	80020aa <ESPRxDecoder+0x1556>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b4b      	cmp	r3, #75	; 0x4b
 8002064:	d121      	bne.n	80020aa <ESPRxDecoder+0x1556>
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <ESPRxDecoder+0x1568>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11d      	bne.n	80020aa <ESPRxDecoder+0x1556>
				bufferptr=0;
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <ESPRxDecoder+0x1568>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8002074:	2300      	movs	r3, #0
 8002076:	71bb      	strb	r3, [r7, #6]
				ipConfimation=1;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <ESPRxDecoder+0x1574>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
				wifi_command=49;
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <ESPRxDecoder+0x1560>)
 8002080:	2231      	movs	r2, #49	; 0x31
 8002082:	701a      	strb	r2, [r3, #0]
		break;
 8002084:	e011      	b.n	80020aa <ESPRxDecoder+0x1556>
	   	default:
		break;
 8002086:	bf00      	nop
 8002088:	e010      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 800208a:	bf00      	nop
 800208c:	e00e      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 800208e:	bf00      	nop
 8002090:	e00c      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 8002092:	bf00      	nop
 8002094:	e00a      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 8002096:	bf00      	nop
 8002098:	e008      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 800209a:	bf00      	nop
 800209c:	e006      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 800209e:	bf00      	nop
 80020a0:	e004      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 80020a2:	bf00      	nop
 80020a4:	e002      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <ESPRxDecoder+0x1558>
		break;
 80020aa:	bf00      	nop
		}
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000a62 	.word	0x20000a62
 80020b8:	200000f0 	.word	0x200000f0
 80020bc:	20000c28 	.word	0x20000c28
 80020c0:	200001be 	.word	0x200001be
 80020c4:	2000014c 	.word	0x2000014c
 80020c8:	200001b0 	.word	0x200001b0

080020cc <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	3b30      	subs	r3, #48	; 0x30
 80020da:	2b16      	cmp	r3, #22
 80020dc:	d860      	bhi.n	80021a0 <DecToASCIIFun+0xd4>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <DecToASCIIFun+0x18>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	08002141 	.word	0x08002141
 80020e8:	08002147 	.word	0x08002147
 80020ec:	0800214d 	.word	0x0800214d
 80020f0:	08002153 	.word	0x08002153
 80020f4:	08002159 	.word	0x08002159
 80020f8:	0800215f 	.word	0x0800215f
 80020fc:	08002165 	.word	0x08002165
 8002100:	0800216b 	.word	0x0800216b
 8002104:	08002171 	.word	0x08002171
 8002108:	08002177 	.word	0x08002177
 800210c:	080021a1 	.word	0x080021a1
 8002110:	080021a1 	.word	0x080021a1
 8002114:	080021a1 	.word	0x080021a1
 8002118:	080021a1 	.word	0x080021a1
 800211c:	080021a1 	.word	0x080021a1
 8002120:	080021a1 	.word	0x080021a1
 8002124:	080021a1 	.word	0x080021a1
 8002128:	0800217d 	.word	0x0800217d
 800212c:	08002183 	.word	0x08002183
 8002130:	08002189 	.word	0x08002189
 8002134:	0800218f 	.word	0x0800218f
 8002138:	08002195 	.word	0x08002195
 800213c:	0800219b 	.word	0x0800219b
	{
	case 48:
			ASCIIHex = 0x00;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
			break;
 8002144:	e02c      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
			break;
 800214a:	e029      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 800214c:	2302      	movs	r3, #2
 800214e:	73fb      	strb	r3, [r7, #15]
			break;
 8002150:	e026      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8002152:	2303      	movs	r3, #3
 8002154:	73fb      	strb	r3, [r7, #15]
			break;
 8002156:	e023      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8002158:	2304      	movs	r3, #4
 800215a:	73fb      	strb	r3, [r7, #15]
			break;
 800215c:	e020      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 800215e:	2305      	movs	r3, #5
 8002160:	73fb      	strb	r3, [r7, #15]
			break;
 8002162:	e01d      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8002164:	2306      	movs	r3, #6
 8002166:	73fb      	strb	r3, [r7, #15]
			break;
 8002168:	e01a      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 800216a:	2307      	movs	r3, #7
 800216c:	73fb      	strb	r3, [r7, #15]
			break;
 800216e:	e017      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8002170:	2308      	movs	r3, #8
 8002172:	73fb      	strb	r3, [r7, #15]
			break;
 8002174:	e014      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8002176:	2309      	movs	r3, #9
 8002178:	73fb      	strb	r3, [r7, #15]
			break;
 800217a:	e011      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 800217c:	230a      	movs	r3, #10
 800217e:	73fb      	strb	r3, [r7, #15]
			break;
 8002180:	e00e      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8002182:	230b      	movs	r3, #11
 8002184:	73fb      	strb	r3, [r7, #15]
			break;
 8002186:	e00b      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8002188:	230c      	movs	r3, #12
 800218a:	73fb      	strb	r3, [r7, #15]
			break;
 800218c:	e008      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 800218e:	230d      	movs	r3, #13
 8002190:	73fb      	strb	r3, [r7, #15]
			break;
 8002192:	e005      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8002194:	230e      	movs	r3, #14
 8002196:	73fb      	strb	r3, [r7, #15]
			break;
 8002198:	e002      	b.n	80021a0 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 800219a:	230f      	movs	r3, #15
 800219c:	73fb      	strb	r3, [r7, #15]
			break;
 800219e:	bf00      	nop
	}
	return (ASCIIHex);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop

080021b0 <HAL_GPIO_EXTI_Callback>:
extern uint16_t productionInc;
extern uint8_t UpdateStorage;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  MachineState_Auto = HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
 80021ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <HAL_GPIO_EXTI_Callback+0x84>)
 80021c0:	f009 ff42 	bl	800c048 <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_GPIO_EXTI_Callback+0x88>)
 80021ca:	701a      	strb	r2, [r3, #0]
  if(MachineState_Auto==0){
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_GPIO_EXTI_Callback+0x88>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d12b      	bne.n	800222c <HAL_GPIO_EXTI_Callback+0x7c>
			  UpdateStorage=1;
		  }
		}
#endif
#if MACTYPE == INJECTIONMAC
		if(GPIO_Pin == ProductionInput1_Pin)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021da:	d111      	bne.n	8002200 <HAL_GPIO_EXTI_Callback+0x50>
		{
		  GPIO_Pin_Value1 = GPIO_Pin;
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_GPIO_EXTI_Callback+0x8c>)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	8013      	strh	r3, [r2, #0]
		  MAC_Gen_Prod_Input1_Production =1;
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_GPIO_EXTI_Callback+0x90>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production=0;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_GPIO_EXTI_Callback+0x94>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	801a      	strh	r2, [r3, #0]
		  productionInc = productionInc+1;
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_GPIO_EXTI_Callback+0x98>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_GPIO_EXTI_Callback+0x98>)
 80021f8:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_GPIO_EXTI_Callback+0x9c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
		}
#endif

#if MACTYPEWITHEJECTION == MACTYPEWITHEJECTIONON
		if(GPIO_Pin == ProductionInput2_Pin)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002206:	d111      	bne.n	800222c <HAL_GPIO_EXTI_Callback+0x7c>
		{
		  GPIO_Pin_Value2 = GPIO_Pin;
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_GPIO_EXTI_Callback+0xa0>)
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	8013      	strh	r3, [r2, #0]
		  MAC_Gen_Prod_Input1_Production =0;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_GPIO_EXTI_Callback+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production=1;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_GPIO_EXTI_Callback+0x94>)
 8002216:	2201      	movs	r2, #1
 8002218:	801a      	strh	r2, [r3, #0]
		  productionInc = productionInc+1;
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_GPIO_EXTI_Callback+0x98>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_GPIO_EXTI_Callback+0x98>)
 8002224:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
		}
#endif
  }
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	48000800 	.word	0x48000800
 8002238:	200001b2 	.word	0x200001b2
 800223c:	200001b4 	.word	0x200001b4
 8002240:	20000768 	.word	0x20000768
 8002244:	2000076c 	.word	0x2000076c
 8002248:	20000776 	.word	0x20000776
 800224c:	20000774 	.word	0x20000774
 8002250:	200001b6 	.word	0x200001b6

08002254 <HAL_TIM_PeriodElapsedCallback>:
 extern uint8_t MAC_A_Prod_Input1_StartTimer;
 extern uint16_t MAC_A_Prod_Input1_CountBase;
 extern GPIO_PinState Sim_Trigger;
 
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d102      	bne.n	800226a <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d13a      	bne.n	80022e8 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
 		Flag100milliSeconds=1;
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
 		{
 			SimCount=0;
 		}
#endif

 		if(++LocCount1S >= 10)
 8002278:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d923      	bls.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			LocCount1S=0;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

			Flag1Second =1;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
			if(commFeedbackFlag==1){
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d109      	bne.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x60>
				commFeedbackFlag=0;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
				wifiConnection = 1;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
				commFeedbackcount=0;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e00f      	b.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x80>
			}
			else
			{
				if(++commFeedbackcount > 50){
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b32      	cmp	r3, #50	; 0x32
 80022c6:	d905      	bls.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x80>
					wifiConnection=0;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
					commFeedbackcount=81;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80022d0:	2251      	movs	r2, #81	; 0x51
 80022d2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(MAC_A_Prod_Input1_StartTimer)
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
		   ++MAC_A_Prod_Input1_CountBase;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80022e6:	801a      	strh	r2, [r3, #0]
		}
	}
 }
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	200006dc 	.word	0x200006dc
 80022f8:	200001b8 	.word	0x200001b8
 80022fc:	20000690 	.word	0x20000690
 8002300:	200001ba 	.word	0x200001ba
 8002304:	200001bb 	.word	0x200001bb
 8002308:	200001b9 	.word	0x200001b9
 800230c:	20000111 	.word	0x20000111
 8002310:	200001bc 	.word	0x200001bc
 8002314:	200001bd 	.word	0x200001bd
 8002318:	20000765 	.word	0x20000765
 800231c:	20000766 	.word	0x20000766

08002320 <HAL_UART_RxCpltCallback>:
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);
void DwinFrameDecode(uint8_t Dwindatarx);


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3e      	ldr	r2, [pc, #248]	; (8002424 <HAL_UART_RxCpltCallback+0x104>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10c      	bne.n	800234a <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8002330:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_UART_RxCpltCallback+0x108>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4a3d      	ldr	r2, [pc, #244]	; (800242c <HAL_UART_RxCpltCallback+0x10c>)
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fc0a 	bl	8000b54 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8002340:	2201      	movs	r2, #1
 8002342:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_UART_RxCpltCallback+0x108>)
 8002344:	4837      	ldr	r0, [pc, #220]	; (8002424 <HAL_UART_RxCpltCallback+0x104>)
 8002346:	f00d faf1 	bl	800f92c <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a38      	ldr	r2, [pc, #224]	; (8002430 <HAL_UART_RxCpltCallback+0x110>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d141      	bne.n	80023d6 <HAL_UART_RxCpltCallback+0xb6>
	{
		if((u8rxbuf[0]==1)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d11c      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x74>
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 800235c:	785b      	ldrb	r3, [r3, #1]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d118      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x74>
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 8002364:	789b      	ldrb	r3, [r3, #2]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d114      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x74>
		{
			Dye_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 800236a:	4b32      	ldr	r3, [pc, #200]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 800236c:	78db      	ldrb	r3, [r3, #3]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21a      	sxth	r2, r3
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	b21b      	sxth	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b21b      	sxth	r3, r3
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_UART_RxCpltCallback+0x118>)
 8002380:	801a      	strh	r2, [r3, #0]
			Dye_Temperature = Dye_Temperature/10;
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_UART_RxCpltCallback+0x118>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_UART_RxCpltCallback+0x11c>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_UART_RxCpltCallback+0x118>)
 8002392:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0]==2)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d11c      	bne.n	80023d6 <HAL_UART_RxCpltCallback+0xb6>
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d118      	bne.n	80023d6 <HAL_UART_RxCpltCallback+0xb6>
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d114      	bne.n	80023d6 <HAL_UART_RxCpltCallback+0xb6>
		{
			Connector_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 80023ae:	78db      	ldrb	r3, [r3, #3]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_UART_RxCpltCallback+0x114>)
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b21b      	sxth	r3, r3
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <HAL_UART_RxCpltCallback+0x120>)
 80023c2:	801a      	strh	r2, [r3, #0]
			Connector_Temperature = Connector_Temperature/10;
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_UART_RxCpltCallback+0x120>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_UART_RxCpltCallback+0x11c>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_UART_RxCpltCallback+0x120>)
 80023d4:	801a      	strh	r2, [r3, #0]
		}
	}

	if(huart == &huart2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_UART_RxCpltCallback+0x124>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d11d      	bne.n	800241a <HAL_UART_RxCpltCallback+0xfa>
	{
		DwinFrameDecode(rxDwinBuff[0]);
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_UART_RxCpltCallback+0x128>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f836 	bl	8002454 <DwinFrameDecode>
		check[trackpoint]=rxDwinBuff[0];
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_UART_RxCpltCallback+0x12c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_UART_RxCpltCallback+0x128>)
 80023f0:	7819      	ldrb	r1, [r3, #0]
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <HAL_UART_RxCpltCallback+0x130>)
 80023f4:	5499      	strb	r1, [r3, r2]
		if(++trackpoint>200){trackpoint=0;}
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_RxCpltCallback+0x12c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_UART_RxCpltCallback+0x12c>)
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_UART_RxCpltCallback+0x12c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2bc8      	cmp	r3, #200	; 0xc8
 8002408:	d902      	bls.n	8002410 <HAL_UART_RxCpltCallback+0xf0>
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_UART_RxCpltCallback+0x12c>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rxDwinBuff,1);
 8002410:	2201      	movs	r2, #1
 8002412:	490d      	ldr	r1, [pc, #52]	; (8002448 <HAL_UART_RxCpltCallback+0x128>)
 8002414:	480b      	ldr	r0, [pc, #44]	; (8002444 <HAL_UART_RxCpltCallback+0x124>)
 8002416:	f00d fa89 	bl	800f92c <HAL_UART_Receive_IT>
	}
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200003f0 	.word	0x200003f0
 8002428:	20000728 	.word	0x20000728
 800242c:	20000c29 	.word	0x20000c29
 8002430:	20000474 	.word	0x20000474
 8002434:	20000820 	.word	0x20000820
 8002438:	200001c0 	.word	0x200001c0
 800243c:	cccccccd 	.word	0xcccccccd
 8002440:	200001c2 	.word	0x200001c2
 8002444:	200004f8 	.word	0x200004f8
 8002448:	20000730 	.word	0x20000730
 800244c:	20000296 	.word	0x20000296
 8002450:	200001c4 	.word	0x200001c4

08002454 <DwinFrameDecode>:

void DwinFrameDecode(uint8_t Dwindatarx){
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]

	switch(Dwinseq)
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <DwinFrameDecode+0x108>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d870      	bhi.n	8002548 <DwinFrameDecode+0xf4>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <DwinFrameDecode+0x18>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	08002489 	.word	0x08002489
 8002470:	0800249f 	.word	0x0800249f
 8002474:	080024b5 	.word	0x080024b5
 8002478:	080024c7 	.word	0x080024c7
 800247c:	080024dd 	.word	0x080024dd
 8002480:	080024f3 	.word	0x080024f3
 8002484:	0800250f 	.word	0x0800250f
	{
		case 0:
			if(Dwindatarx == 0x5A){
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b5a      	cmp	r3, #90	; 0x5a
 800248c:	d103      	bne.n	8002496 <DwinFrameDecode+0x42>
				Dwinseq=1;
 800248e:	4b33      	ldr	r3, [pc, #204]	; (800255c <DwinFrameDecode+0x108>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 8002494:	e05b      	b.n	800254e <DwinFrameDecode+0xfa>
				Dwinseq=0;
 8002496:	4b31      	ldr	r3, [pc, #196]	; (800255c <DwinFrameDecode+0x108>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
		break;
 800249c:	e057      	b.n	800254e <DwinFrameDecode+0xfa>
		case 1:
			if(Dwindatarx == 0xA5){
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2ba5      	cmp	r3, #165	; 0xa5
 80024a2:	d103      	bne.n	80024ac <DwinFrameDecode+0x58>
				Dwinseq=2;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <DwinFrameDecode+0x108>)
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 80024aa:	e050      	b.n	800254e <DwinFrameDecode+0xfa>
				Dwinseq=0;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <DwinFrameDecode+0x108>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
		break;
 80024b2:	e04c      	b.n	800254e <DwinFrameDecode+0xfa>
		case 2:
			NoOfDwinRxdata = Dwindatarx-3;
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	3b03      	subs	r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <DwinFrameDecode+0x10c>)
 80024bc:	701a      	strb	r2, [r3, #0]
			Dwinseq=3;
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <DwinFrameDecode+0x108>)
 80024c0:	2203      	movs	r2, #3
 80024c2:	701a      	strb	r2, [r3, #0]
		break;
 80024c4:	e043      	b.n	800254e <DwinFrameDecode+0xfa>
		case 3:
			if(Dwindatarx == 0x83){
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b83      	cmp	r3, #131	; 0x83
 80024ca:	d103      	bne.n	80024d4 <DwinFrameDecode+0x80>
			Dwinseq=4;}
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <DwinFrameDecode+0x108>)
 80024ce:	2204      	movs	r2, #4
 80024d0:	701a      	strb	r2, [r3, #0]
			else{
				Dwinseq=0;
			}
		break;
 80024d2:	e03c      	b.n	800254e <DwinFrameDecode+0xfa>
				Dwinseq=0;
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <DwinFrameDecode+0x108>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
		break;
 80024da:	e038      	b.n	800254e <DwinFrameDecode+0xfa>
		case 4:
			if(Dwindatarx == 0x30){
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b30      	cmp	r3, #48	; 0x30
 80024e0:	d103      	bne.n	80024ea <DwinFrameDecode+0x96>
				Dwinseq=5;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <DwinFrameDecode+0x108>)
 80024e4:	2205      	movs	r2, #5
 80024e6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 80024e8:	e031      	b.n	800254e <DwinFrameDecode+0xfa>
				Dwinseq=0;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <DwinFrameDecode+0x108>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
		break;
 80024f0:	e02d      	b.n	800254e <DwinFrameDecode+0xfa>
		case 5:
			if(Dwindatarx == 0x00){
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <DwinFrameDecode+0xb2>
				Dwinseq=6;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <DwinFrameDecode+0x108>)
 80024fa:	2206      	movs	r2, #6
 80024fc:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point=0;
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <DwinFrameDecode+0x110>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Dwinseq=0;
			}
		break;
 8002504:	e023      	b.n	800254e <DwinFrameDecode+0xfa>
				Dwinseq=0;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <DwinFrameDecode+0x108>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
		break;
 800250c:	e01f      	b.n	800254e <DwinFrameDecode+0xfa>
		case 6:
				DwinDatabuffer[Rx_Dwin_Data_Buff_Point]=Dwindatarx;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <DwinFrameDecode+0x110>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <DwinFrameDecode+0x114>)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	5453      	strb	r3, [r2, r1]
				NoOfDwinRxdata= NoOfDwinRxdata-1;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <DwinFrameDecode+0x10c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	3b01      	subs	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <DwinFrameDecode+0x10c>)
 8002524:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Data_Buff_Point = Rx_Dwin_Data_Buff_Point+1;
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <DwinFrameDecode+0x110>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <DwinFrameDecode+0x110>)
 8002530:	701a      	strb	r2, [r3, #0]
				if(NoOfDwinRxdata == 0){
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <DwinFrameDecode+0x10c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <DwinFrameDecode+0xf8>
					Dwinseq=0;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <DwinFrameDecode+0x108>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
					Rx_Dwin_Complete=1;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <DwinFrameDecode+0x118>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
				}
		break;
 8002546:	e001      	b.n	800254c <DwinFrameDecode+0xf8>
		default:
		break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <DwinFrameDecode+0xfa>
		break;
 800254c:	bf00      	nop
	}
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000813 	.word	0x20000813
 8002560:	20000297 	.word	0x20000297
 8002564:	20000298 	.word	0x20000298
 8002568:	2000029c 	.word	0x2000029c
 800256c:	20000299 	.word	0x20000299

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002574:	f009 f9c6 	bl	800b904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002578:	f000 f84c 	bl	8002614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257c:	f000 faba 	bl	8002af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002580:	f000 f936 	bl	80027f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002584:	f000 f898 	bl	80026b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002588:	f000 f902 	bl	8002790 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800258c:	f000 fa44 	bl	8002a18 <MX_TIM6_Init>
  MX_SPI2_Init();
 8002590:	f000 f9a6 	bl	80028e0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002594:	f000 f9ec 	bl	8002970 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8002598:	f000 f8ce 	bl	8002738 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800259c:	f000 f958 	bl	8002850 <MX_SPI1_Init>
  MX_TIM7_Init();
 80025a0:	f000 fa70 	bl	8002a84 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80025a4:	4814      	ldr	r0, [pc, #80]	; (80025f8 <main+0x88>)
 80025a6:	f00c fd1f 	bl	800efe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80025aa:	4814      	ldr	r0, [pc, #80]	; (80025fc <main+0x8c>)
 80025ac:	f00c fd1c 	bl	800efe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <main+0x90>)
 80025b2:	f00c fccd 	bl	800ef50 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c0:	f009 fd5a 	bl	800c078 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80025c4:	2002      	movs	r0, #2
 80025c6:	f009 fa11 	bl	800b9ec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d4:	f009 fd50 	bl	800c078 <HAL_GPIO_WritePin>
  {
	  while(1);
  }
#endif
 // HAL_UART_Transmit_IT(&huart1,data,sizeof(data));
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 80025d8:	2201      	movs	r2, #1
 80025da:	490a      	ldr	r1, [pc, #40]	; (8002604 <main+0x94>)
 80025dc:	480a      	ldr	r0, [pc, #40]	; (8002608 <main+0x98>)
 80025de:	f00d f9a5 	bl	800f92c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,rxDwinBuff,1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	4909      	ldr	r1, [pc, #36]	; (800260c <main+0x9c>)
 80025e6:	480a      	ldr	r0, [pc, #40]	; (8002610 <main+0xa0>)
 80025e8:	f00d f9a0 	bl	800f92c <HAL_UART_Receive_IT>
  W25qxx_Init();
 80025ec:	f001 f8b6 	bl	800375c <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  while (1)
  {
	  cppMain();
 80025f0:	f009 f8c2 	bl	800b778 <cppMain>
 80025f4:	e7fc      	b.n	80025f0 <main+0x80>
 80025f6:	bf00      	nop
 80025f8:	20000690 	.word	0x20000690
 80025fc:	200006dc 	.word	0x200006dc
 8002600:	20000644 	.word	0x20000644
 8002604:	20000728 	.word	0x20000728
 8002608:	200003f0 	.word	0x200003f0
 800260c:	20000730 	.word	0x20000730
 8002610:	200004f8 	.word	0x200004f8

08002614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b096      	sub	sp, #88	; 0x58
 8002618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	2244      	movs	r2, #68	; 0x44
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f00e fcb2 	bl	8010f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002628:	463b      	mov	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800263a:	f00a fb57 	bl	800ccec <HAL_PWREx_ControlVoltageScaling>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002644:	f000 fb6e 	bl	8002d24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002648:	2310      	movs	r3, #16
 800264a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002654:	2360      	movs	r3, #96	; 0x60
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002658:	2302      	movs	r3, #2
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800265c:	2301      	movs	r3, #1
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 8002664:	2356      	movs	r3, #86	; 0x56
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002668:	2307      	movs	r3, #7
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800266c:	2302      	movs	r3, #2
 800266e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8002670:	2308      	movs	r3, #8
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4618      	mov	r0, r3
 800267a:	f00a fb8d 	bl	800cd98 <HAL_RCC_OscConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002684:	f000 fb4e 	bl	8002d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002688:	230f      	movs	r3, #15
 800268a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268c:	2303      	movs	r3, #3
 800268e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	2102      	movs	r1, #2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00a ff8d 	bl	800d5c0 <HAL_RCC_ClockConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80026ac:	f000 fb3a 	bl	8002d24 <Error_Handler>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3758      	adds	r7, #88	; 0x58
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <MX_I2C1_Init+0x74>)
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <MX_I2C1_Init+0x78>)
 80026c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_I2C1_Init+0x74>)
 80026c4:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <MX_I2C1_Init+0x7c>)
 80026c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_I2C1_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_I2C1_Init+0x74>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <MX_I2C1_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_I2C1_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_I2C1_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_I2C1_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_I2C1_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026f2:	480e      	ldr	r0, [pc, #56]	; (800272c <MX_I2C1_Init+0x74>)
 80026f4:	f009 fcf0 	bl	800c0d8 <HAL_I2C_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026fe:	f000 fb11 	bl	8002d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	4809      	ldr	r0, [pc, #36]	; (800272c <MX_I2C1_Init+0x74>)
 8002706:	f00a fa4b 	bl	800cba0 <HAL_I2CEx_ConfigAnalogFilter>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002710:	f000 fb08 	bl	8002d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002714:	2100      	movs	r1, #0
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_I2C1_Init+0x74>)
 8002718:	f00a fa8d 	bl	800cc36 <HAL_I2CEx_ConfigDigitalFilter>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002722:	f000 faff 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000039c 	.word	0x2000039c
 8002730:	40005400 	.word	0x40005400
 8002734:	00a0a7fd 	.word	0x00a0a7fd

08002738 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <MX_LPUART1_UART_Init+0x54>)
 8002740:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	; (8002788 <MX_LPUART1_UART_Init+0x50>)
 8002776:	f00d f81d 	bl	800f7b4 <HAL_UART_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002780:	f000 fad0 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200003f0 	.word	0x200003f0
 800278c:	40008000 	.word	0x40008000

08002790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <MX_USART1_UART_Init+0x5c>)
 8002798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 800279c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART1_UART_Init+0x58>)
 80027d4:	f00c ffee 	bl	800f7b4 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027de:	f000 faa1 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000474 	.word	0x20000474
 80027ec:	40013800 	.word	0x40013800

080027f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <MX_USART2_UART_Init+0x58>)
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <MX_USART2_UART_Init+0x5c>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <MX_USART2_UART_Init+0x58>)
 80027fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_USART2_UART_Init+0x58>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <MX_USART2_UART_Init+0x58>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <MX_USART2_UART_Init+0x58>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <MX_USART2_UART_Init+0x58>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <MX_USART2_UART_Init+0x58>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <MX_USART2_UART_Init+0x58>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <MX_USART2_UART_Init+0x58>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <MX_USART2_UART_Init+0x58>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <MX_USART2_UART_Init+0x58>)
 8002834:	f00c ffbe 	bl	800f7b4 <HAL_UART_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800283e:	f000 fa71 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200004f8 	.word	0x200004f8
 800284c:	40004400 	.word	0x40004400

08002850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <MX_SPI1_Init+0x88>)
 8002858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <MX_SPI1_Init+0x84>)
 800285c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <MX_SPI1_Init+0x84>)
 800286a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800286e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800287c:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <MX_SPI1_Init+0x84>)
 800287e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002882:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002886:	2210      	movs	r2, #16
 8002888:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <MX_SPI1_Init+0x84>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_SPI1_Init+0x84>)
 8002898:	2200      	movs	r2, #0
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <MX_SPI1_Init+0x84>)
 800289e:	2207      	movs	r2, #7
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_SPI1_Init+0x84>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <MX_SPI1_Init+0x84>)
 80028aa:	2208      	movs	r2, #8
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ae:	4809      	ldr	r0, [pc, #36]	; (80028d4 <MX_SPI1_Init+0x84>)
 80028b0:	f00b fbe6 	bl	800e080 <HAL_SPI_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028ba:	f000 fa33 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <MX_SPI1_Init+0x8c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <MX_SPI1_Init+0x8c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028cc:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000057c 	.word	0x2000057c
 80028d8:	40013000 	.word	0x40013000
 80028dc:	200005e0 	.word	0x200005e0

080028e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <MX_SPI2_Init+0x84>)
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <MX_SPI2_Init+0x88>)
 80028e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_SPI2_Init+0x84>)
 80028ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <MX_SPI2_Init+0x84>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_SPI2_Init+0x84>)
 80028fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_SPI2_Init+0x84>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_SPI2_Init+0x84>)
 8002908:	2200      	movs	r2, #0
 800290a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_SPI2_Init+0x84>)
 800290e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002912:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <MX_SPI2_Init+0x84>)
 8002916:	2208      	movs	r2, #8
 8002918:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <MX_SPI2_Init+0x84>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <MX_SPI2_Init+0x84>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <MX_SPI2_Init+0x84>)
 8002928:	2200      	movs	r2, #0
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800292c:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <MX_SPI2_Init+0x84>)
 800292e:	2207      	movs	r2, #7
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <MX_SPI2_Init+0x84>)
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <MX_SPI2_Init+0x84>)
 800293a:	2208      	movs	r2, #8
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800293e:	4809      	ldr	r0, [pc, #36]	; (8002964 <MX_SPI2_Init+0x84>)
 8002940:	f00b fb9e 	bl	800e080 <HAL_SPI_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800294a:	f000 f9eb 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <MX_SPI2_Init+0x8c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <MX_SPI2_Init+0x8c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200005e0 	.word	0x200005e0
 8002968:	40003800 	.word	0x40003800
 800296c:	2000057c 	.word	0x2000057c

08002970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	f107 0310 	add.w	r3, r7, #16
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <MX_TIM1_Init+0xa0>)
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <MX_TIM1_Init+0xa4>)
 8002992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <MX_TIM1_Init+0xa0>)
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <MX_TIM1_Init+0xa0>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029ba:	4815      	ldr	r0, [pc, #84]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029bc:	f00c fa70 	bl	800eea0 <HAL_TIM_Base_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80029c6:	f000 f9ad 	bl	8002d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4619      	mov	r1, r3
 80029d6:	480e      	ldr	r0, [pc, #56]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029d8:	f00c fc79 	bl	800f2ce <HAL_TIM_ConfigClockSource>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80029e2:	f000 f99f 	bl	8002d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4806      	ldr	r0, [pc, #24]	; (8002a10 <MX_TIM1_Init+0xa0>)
 80029f8:	f00c fe58 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a02:	f000 f98f 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000644 	.word	0x20000644
 8002a14:	40012c00 	.word	0x40012c00

08002a18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <MX_TIM6_Init+0x68>)
 8002a2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a30:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002a34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a3e:	2264      	movs	r2, #100	; 0x64
 8002a40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a4a:	f00c fa29 	bl	800eea0 <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a54:	f000 f966 	bl	8002d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_TIM6_Init+0x64>)
 8002a66:	f00c fe21 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a70:	f000 f958 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000690 	.word	0x20000690
 8002a80:	40001000 	.word	0x40001000

08002a84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <MX_TIM7_Init+0x68>)
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <MX_TIM7_Init+0x6c>)
 8002a98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_TIM7_Init+0x68>)
 8002a9c:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002aa0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_TIM7_Init+0x68>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <MX_TIM7_Init+0x68>)
 8002aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MX_TIM7_Init+0x68>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ab6:	480d      	ldr	r0, [pc, #52]	; (8002aec <MX_TIM7_Init+0x68>)
 8002ab8:	f00c f9f2 	bl	800eea0 <HAL_TIM_Base_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002ac2:	f000 f92f 	bl	8002d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <MX_TIM7_Init+0x68>)
 8002ad4:	f00c fdea 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002ade:	f000 f921 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200006dc 	.word	0x200006dc
 8002af0:	40001400 	.word	0x40001400

08002af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a81      	ldr	r2, [pc, #516]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	4a7b      	ldr	r2, [pc, #492]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2e:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	4a75      	ldr	r2, [pc, #468]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b52:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8002b70:	4869      	ldr	r0, [pc, #420]	; (8002d18 <MX_GPIO_Init+0x224>)
 8002b72:	f009 fa81 	bl	800c078 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2112      	movs	r1, #18
 8002b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7e:	f009 fa7b 	bl	800c078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2125      	movs	r1, #37	; 0x25
 8002b86:	4865      	ldr	r0, [pc, #404]	; (8002d1c <MX_GPIO_Init+0x228>)
 8002b88:	f009 fa76 	bl	800c078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b92:	4862      	ldr	r0, [pc, #392]	; (8002d1c <MX_GPIO_Init+0x228>)
 8002b94:	f009 fa70 	bl	800c078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	485e      	ldr	r0, [pc, #376]	; (8002d18 <MX_GPIO_Init+0x224>)
 8002b9e:	f009 fa6b 	bl	800c078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bac:	f009 fa64 	bl	800c078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	485a      	ldr	r0, [pc, #360]	; (8002d20 <MX_GPIO_Init+0x22c>)
 8002bb6:	f009 fa5f 	bl	800c078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8002bba:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002bbe:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4851      	ldr	r0, [pc, #324]	; (8002d18 <MX_GPIO_Init+0x224>)
 8002bd4:	f009 f8be 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8002bd8:	f241 0302 	movw	r3, #4098	; 0x1002
 8002bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf4:	f009 f8ae 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c12:	f009 f89f 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 8002c16:	2325      	movs	r3, #37	; 0x25
 8002c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	f107 0314 	add.w	r3, r7, #20
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	483b      	ldr	r0, [pc, #236]	; (8002d1c <MX_GPIO_Init+0x228>)
 8002c2e:	f009 f891 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c40:	2302      	movs	r3, #2
 8002c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4834      	ldr	r0, [pc, #208]	; (8002d1c <MX_GPIO_Init+0x228>)
 8002c4c:	f009 f882 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : InputMachine1_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin;
 8002c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(InputMachine1_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	482c      	ldr	r0, [pc, #176]	; (8002d18 <MX_GPIO_Init+0x224>)
 8002c66:	f009 f875 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ProductionInput1_Pin */
  GPIO_InitStruct.Pin = ProductionInput1_Pin;
 8002c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ProductionInput1_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4825      	ldr	r0, [pc, #148]	; (8002d18 <MX_GPIO_Init+0x224>)
 8002c82:	f009 f867 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ProductionInput2_Pin */
  GPIO_InitStruct.Pin = ProductionInput2_Pin;
 8002c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ProductionInput2_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca0:	f009 f858 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 8002ca4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f009 f84a 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 8002cc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480f      	ldr	r0, [pc, #60]	; (8002d18 <MX_GPIO_Init+0x224>)
 8002cda:	f009 f83b 	bl	800bd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480a      	ldr	r0, [pc, #40]	; (8002d20 <MX_GPIO_Init+0x22c>)
 8002cf6:	f009 f82d 	bl	800bd54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2017      	movs	r0, #23
 8002d00:	f008 ff73 	bl	800bbea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d04:	2017      	movs	r0, #23
 8002d06:	f008 ff8c 	bl	800bc22 <HAL_NVIC_EnableIRQ>

}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	; 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	48000800 	.word	0x48000800
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	48000c00 	.word	0x48000c00

08002d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d28:	b672      	cpsid	i
}
 8002d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <Error_Handler+0x8>
	...

08002d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_MspInit+0x44>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_MspInit+0x44>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6613      	str	r3, [r2, #96]	; 0x60
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_MspInit+0x44>)
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_MspInit+0x44>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_MspInit+0x44>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_MspInit+0x44>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0a2      	sub	sp, #136	; 0x88
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	2260      	movs	r2, #96	; 0x60
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f00e f8f7 	bl	8010f8c <memset>
  if(hi2c->Instance==I2C1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_I2C_MspInit+0xac>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d138      	bne.n	8002e1a <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002da8:	2340      	movs	r3, #64	; 0x40
 8002daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4618      	mov	r0, r3
 8002db6:	f00a fe27 	bl	800da08 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002dc0:	f7ff ffb0 	bl	8002d24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_I2C_MspInit+0xb0>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_I2C_MspInit+0xb0>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_I2C_MspInit+0xb0>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002de0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de2:	2312      	movs	r3, #18
 8002de4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002df0:	2304      	movs	r3, #4
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480b      	ldr	r0, [pc, #44]	; (8002e2c <HAL_I2C_MspInit+0xb4>)
 8002dfe:	f008 ffa9 	bl	800bd54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_I2C_MspInit+0xb0>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_I2C_MspInit+0xb0>)
 8002e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_I2C_MspInit+0xb0>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3788      	adds	r7, #136	; 0x88
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40005400 	.word	0x40005400
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	48000400 	.word	0x48000400

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0a6      	sub	sp, #152	; 0x98
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4c:	2260      	movs	r2, #96	; 0x60
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00e f89b 	bl	8010f8c <memset>
  if(huart->Instance==LPUART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6f      	ldr	r2, [pc, #444]	; (8003018 <HAL_UART_MspInit+0x1e8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d144      	bne.n	8002eea <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e60:	2320      	movs	r3, #32
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00a fdcb 	bl	800da08 <HAL_RCCEx_PeriphCLKConfig>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e78:	f7ff ff54 	bl	8002d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e7c:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	4a66      	ldr	r2, [pc, #408]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e88:	4b64      	ldr	r3, [pc, #400]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e94:	4b61      	ldr	r3, [pc, #388]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4a60      	ldr	r2, [pc, #384]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4853      	ldr	r0, [pc, #332]	; (8003020 <HAL_UART_MspInit+0x1f0>)
 8002ed4:	f008 ff3e 	bl	800bd54 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	2046      	movs	r0, #70	; 0x46
 8002ede:	f008 fe84 	bl	800bbea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002ee2:	2046      	movs	r0, #70	; 0x46
 8002ee4:	f008 fe9d 	bl	800bc22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee8:	e091      	b.n	800300e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4d      	ldr	r2, [pc, #308]	; (8003024 <HAL_UART_MspInit+0x1f4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d143      	bne.n	8002f7c <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4618      	mov	r0, r3
 8002f02:	f00a fd81 	bl	800da08 <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002f0c:	f7ff ff0a 	bl	8002d24 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f10:	4b42      	ldr	r3, [pc, #264]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	4a41      	ldr	r2, [pc, #260]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b3c      	ldr	r3, [pc, #240]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	4a3b      	ldr	r2, [pc, #236]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f40:	23c0      	movs	r3, #192	; 0xc0
 8002f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f58:	2307      	movs	r3, #7
 8002f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f62:	4619      	mov	r1, r3
 8002f64:	482e      	ldr	r0, [pc, #184]	; (8003020 <HAL_UART_MspInit+0x1f0>)
 8002f66:	f008 fef5 	bl	800bd54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2025      	movs	r0, #37	; 0x25
 8002f70:	f008 fe3b 	bl	800bbea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f74:	2025      	movs	r0, #37	; 0x25
 8002f76:	f008 fe54 	bl	800bc22 <HAL_NVIC_EnableIRQ>
}
 8002f7a:	e048      	b.n	800300e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_UART_MspInit+0x1f8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d143      	bne.n	800300e <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f86:	2302      	movs	r3, #2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00a fd38 	bl	800da08 <HAL_RCCEx_PeriphCLKConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002f9e:	f7ff fec1 	bl	8002d24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a1d      	ldr	r2, [pc, #116]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_UART_MspInit+0x1ec>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fea:	2307      	movs	r3, #7
 8002fec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ffa:	f008 feab 	bl	800bd54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	2026      	movs	r0, #38	; 0x26
 8003004:	f008 fdf1 	bl	800bbea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003008:	2026      	movs	r0, #38	; 0x26
 800300a:	f008 fe0a 	bl	800bc22 <HAL_NVIC_EnableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3798      	adds	r7, #152	; 0x98
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40008000 	.word	0x40008000
 800301c:	40021000 	.word	0x40021000
 8003020:	48000400 	.word	0x48000400
 8003024:	40013800 	.word	0x40013800
 8003028:	40004400 	.word	0x40004400

0800302c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_SPI_MspInit+0xdc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d129      	bne.n	80030a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_SPI_MspInit+0xe0>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	4a2e      	ldr	r2, [pc, #184]	; (800310c <HAL_SPI_MspInit+0xe0>)
 8003054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003058:	6613      	str	r3, [r2, #96]	; 0x60
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_SPI_MspInit+0xe0>)
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_SPI_MspInit+0xe0>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	4a28      	ldr	r2, [pc, #160]	; (800310c <HAL_SPI_MspInit+0xe0>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_SPI_MspInit+0xe0>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800307e:	23e0      	movs	r3, #224	; 0xe0
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800308e:	2305      	movs	r3, #5
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309c:	f008 fe5a 	bl	800bd54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030a0:	e02d      	b.n	80030fe <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_SPI_MspInit+0xe4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d128      	bne.n	80030fe <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_SPI_MspInit+0xe0>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_SPI_MspInit+0xe0>)
 80030b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b6:	6593      	str	r3, [r2, #88]	; 0x58
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <HAL_SPI_MspInit+0xe0>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_SPI_MspInit+0xe0>)
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_SPI_MspInit+0xe0>)
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <HAL_SPI_MspInit+0xe0>)
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ee:	2305      	movs	r3, #5
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	4619      	mov	r1, r3
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <HAL_SPI_MspInit+0xe8>)
 80030fa:	f008 fe2b 	bl	800bd54 <HAL_GPIO_Init>
}
 80030fe:	bf00      	nop
 8003100:	3730      	adds	r7, #48	; 0x30
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40013000 	.word	0x40013000
 800310c:	40021000 	.word	0x40021000
 8003110:	40003800 	.word	0x40003800
 8003114:	48000400 	.word	0x48000400

08003118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10c      	bne.n	8003144 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003130:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003134:	6613      	str	r3, [r2, #96]	; 0x60
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003142:	e032      	b.n	80031aa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <HAL_TIM_Base_MspInit+0xa4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d114      	bne.n	8003178 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003154:	f043 0310 	orr.w	r3, r3, #16
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2036      	movs	r0, #54	; 0x36
 800316c:	f008 fd3d 	bl	800bbea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003170:	2036      	movs	r0, #54	; 0x36
 8003172:	f008 fd56 	bl	800bc22 <HAL_NVIC_EnableIRQ>
}
 8003176:	e018      	b.n	80031aa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_TIM_Base_MspInit+0xa8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	2037      	movs	r0, #55	; 0x37
 80031a0:	f008 fd23 	bl	800bbea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031a4:	2037      	movs	r0, #55	; 0x37
 80031a6:	f008 fd3c 	bl	800bc22 <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40001000 	.word	0x40001000
 80031c0:	40001400 	.word	0x40001400

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <NMI_Handler+0x4>

080031ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <MemManage_Handler+0x4>

080031d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003210:	f008 fbcc 	bl	800b9ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ProductionInput2_Pin);
 800321c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003220:	f008 ff42 	bl	800c0a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ProductionInput1_Pin);
 8003224:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003228:	f008 ff3e 	bl	800c0a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <USART1_IRQHandler+0x10>)
 8003236:	f00c fbcf 	bl	800f9d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000474 	.word	0x20000474

08003244 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <USART2_IRQHandler+0x10>)
 800324a:	f00c fbc5 	bl	800f9d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200004f8 	.word	0x200004f8

08003258 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <TIM6_DAC_IRQHandler+0x10>)
 800325e:	f00b ff17 	bl	800f090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000690 	.word	0x20000690

0800326c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <TIM7_IRQHandler+0x10>)
 8003272:	f00b ff0d 	bl	800f090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200006dc 	.word	0x200006dc

08003280 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <LPUART1_IRQHandler+0x10>)
 8003286:	f00c fba7 	bl	800f9d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200003f0 	.word	0x200003f0

08003294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <_sbrk+0x5c>)
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <_sbrk+0x60>)
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <_sbrk+0x64>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <_sbrk+0x64>)
 80032b2:	4a12      	ldr	r2, [pc, #72]	; (80032fc <_sbrk+0x68>)
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <_sbrk+0x64>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d207      	bcs.n	80032d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c4:	f00d fe22 	bl	8010f0c <__errno>
 80032c8:	4603      	mov	r3, r0
 80032ca:	220c      	movs	r2, #12
 80032cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e009      	b.n	80032e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <_sbrk+0x64>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <_sbrk+0x64>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <_sbrk+0x64>)
 80032e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032e6:	68fb      	ldr	r3, [r7, #12]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20010000 	.word	0x20010000
 80032f4:	00000400 	.word	0x00000400
 80032f8:	20000738 	.word	0x20000738
 80032fc:	20000fb0 	.word	0x20000fb0

08003300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <SystemInit+0x20>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <SystemInit+0x20>)
 800330c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4413      	add	r3, r2
 8003348:	b2db      	uxtb	r3, r3
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <bin2bcd+0x44>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	b258      	sxtb	r0, r3
 8003372:	79fa      	ldrb	r2, [r7, #7]
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <bin2bcd+0x44>)
 8003376:	fba3 1302 	umull	r1, r3, r3, r2
 800337a:	08d9      	lsrs	r1, r3, #3
 800337c:	460b      	mov	r3, r1
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	b25b      	sxtb	r3, r3
 800338a:	4303      	orrs	r3, r0
 800338c:	b25b      	sxtb	r3, r3
 800338e:	b2db      	uxtb	r3, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	cccccccd 	.word	0xcccccccd

080033a0 <rtc_get_time>:

	rtc_write(0x07,rs);
}

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af04      	add	r7, sp, #16
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 80033ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	2303      	movs	r3, #3
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2301      	movs	r3, #1
 80033be:	2200      	movs	r2, #0
 80033c0:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80033c4:	480f      	ldr	r0, [pc, #60]	; (8003404 <rtc_get_time+0x64>)
 80033c6:	f009 f82b 	bl	800c420 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*sec=bcd2bin(data[0]);
 80033ca:	7d3b      	ldrb	r3, [r7, #20]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ffa9 	bl	8003324 <bcd2bin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 80033da:	7d7b      	ldrb	r3, [r7, #21]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ffa1 	bl	8003324 <bcd2bin>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 80033ea:	7dbb      	ldrb	r3, [r7, #22]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff99 	bl	8003324 <bcd2bin>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	701a      	strb	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000039c 	.word	0x2000039c

08003408 <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af04      	add	r7, sp, #16
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
 8003412:	460b      	mov	r3, r1
 8003414:	71bb      	strb	r3, [r7, #6]
 8003416:	4613      	mov	r3, r2
 8003418:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 800341a:	797b      	ldrb	r3, [r7, #5]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff9b 	bl	8003358 <bin2bcd>
 8003422:	4603      	mov	r3, r0
 8003424:	733b      	strb	r3, [r7, #12]
 8003426:	79bb      	ldrb	r3, [r7, #6]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff95 	bl	8003358 <bin2bcd>
 800342e:	4603      	mov	r3, r0
 8003430:	737b      	strb	r3, [r7, #13]
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff8f 	bl	8003358 <bin2bcd>
 800343a:	4603      	mov	r3, r0
 800343c:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 800343e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003442:	9302      	str	r3, [sp, #8]
 8003444:	2303      	movs	r3, #3
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2301      	movs	r3, #1
 8003450:	2200      	movs	r2, #0
 8003452:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8003456:	4803      	ldr	r0, [pc, #12]	; (8003464 <rtc_set_time+0x5c>)
 8003458:	f008 fece 	bl	800c1f8 <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000039c 	.word	0x2000039c

08003468 <rtc_get_date>:

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af04      	add	r7, sp, #16
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 800347a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347e:	9302      	str	r3, [sp, #8]
 8003480:	2304      	movs	r3, #4
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2301      	movs	r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8003492:	4811      	ldr	r0, [pc, #68]	; (80034d8 <rtc_get_date+0x70>)
 8003494:	f008 ffc4 	bl	800c420 <HAL_I2C_Mem_Read>
	//	_Error_Handler(__FILE__,__LINE__);
	}

	*week_day=data[0];
 8003498:	7d3a      	ldrb	r2, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 800349e:	7d7b      	ldrb	r3, [r7, #21]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff3f 	bl	8003324 <bcd2bin>
 80034a6:	4603      	mov	r3, r0
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff37 	bl	8003324 <bcd2bin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff2f 	bl	8003324 <bcd2bin>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	701a      	strb	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	2000039c 	.word	0x2000039c

080034dc <rtc_set_date>:

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	4604      	mov	r4, r0
 80034e4:	4608      	mov	r0, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	461a      	mov	r2, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	71fb      	strb	r3, [r7, #7]
 80034ee:	4603      	mov	r3, r0
 80034f0:	71bb      	strb	r3, [r7, #6]
 80034f2:	460b      	mov	r3, r1
 80034f4:	717b      	strb	r3, [r7, #5]
 80034f6:	4613      	mov	r3, r2
 80034f8:	713b      	strb	r3, [r7, #4]
	uint8_t data[4]={week_day,bin2bcd(day),bin2bcd(month),bin2bcd(year)};
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	733b      	strb	r3, [r7, #12]
 80034fe:	79bb      	ldrb	r3, [r7, #6]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff29 	bl	8003358 <bin2bcd>
 8003506:	4603      	mov	r3, r0
 8003508:	737b      	strb	r3, [r7, #13]
 800350a:	797b      	ldrb	r3, [r7, #5]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff23 	bl	8003358 <bin2bcd>
 8003512:	4603      	mov	r3, r0
 8003514:	73bb      	strb	r3, [r7, #14]
 8003516:	793b      	ldrb	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff1d 	bl	8003358 <bin2bcd>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8003522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003526:	9302      	str	r3, [sp, #8]
 8003528:	2304      	movs	r3, #4
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2301      	movs	r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800353a:	4803      	ldr	r0, [pc, #12]	; (8003548 <rtc_set_date+0x6c>)
 800353c:	f008 fe5c 	bl	800c1f8 <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	2000039c 	.word	0x2000039c

0800354c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003556:	f107 020f 	add.w	r2, r7, #15
 800355a:	1df9      	adds	r1, r7, #7
 800355c:	2364      	movs	r3, #100	; 0x64
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2301      	movs	r3, #1
 8003562:	4804      	ldr	r0, [pc, #16]	; (8003574 <W25qxx_Spi+0x28>)
 8003564:	f00b f8cd 	bl	800e702 <HAL_SPI_TransmitReceive>
	return ret;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000057c 	.word	0x2000057c

08003578 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	2300      	movs	r3, #0
 800358c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800358e:	2200      	movs	r2, #0
 8003590:	2101      	movs	r1, #1
 8003592:	4813      	ldr	r0, [pc, #76]	; (80035e0 <W25qxx_ReadID+0x68>)
 8003594:	f008 fd70 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003598:	209f      	movs	r0, #159	; 0x9f
 800359a:	f7ff ffd7 	bl	800354c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800359e:	20a5      	movs	r0, #165	; 0xa5
 80035a0:	f7ff ffd4 	bl	800354c <W25qxx_Spi>
 80035a4:	4603      	mov	r3, r0
 80035a6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80035a8:	20a5      	movs	r0, #165	; 0xa5
 80035aa:	f7ff ffcf 	bl	800354c <W25qxx_Spi>
 80035ae:	4603      	mov	r3, r0
 80035b0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80035b2:	20a5      	movs	r0, #165	; 0xa5
 80035b4:	f7ff ffca 	bl	800354c <W25qxx_Spi>
 80035b8:	4603      	mov	r3, r0
 80035ba:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80035bc:	2201      	movs	r2, #1
 80035be:	2101      	movs	r1, #1
 80035c0:	4807      	ldr	r0, [pc, #28]	; (80035e0 <W25qxx_ReadID+0x68>)
 80035c2:	f008 fd59 	bl	800c078 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	041a      	lsls	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	4313      	orrs	r3, r2
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	48000400 	.word	0x48000400

080035e4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2101      	movs	r1, #1
 80035ee:	4816      	ldr	r0, [pc, #88]	; (8003648 <W25qxx_ReadUniqID+0x64>)
 80035f0:	f008 fd42 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80035f4:	204b      	movs	r0, #75	; 0x4b
 80035f6:	f7ff ffa9 	bl	800354c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	71fb      	strb	r3, [r7, #7]
 80035fe:	e005      	b.n	800360c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003600:	20a5      	movs	r0, #165	; 0xa5
 8003602:	f7ff ffa3 	bl	800354c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	3301      	adds	r3, #1
 800360a:	71fb      	strb	r3, [r7, #7]
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d9f6      	bls.n	8003600 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	71bb      	strb	r3, [r7, #6]
 8003616:	e00b      	b.n	8003630 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003618:	79bc      	ldrb	r4, [r7, #6]
 800361a:	20a5      	movs	r0, #165	; 0xa5
 800361c:	f7ff ff96 	bl	800354c <W25qxx_Spi>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <W25qxx_ReadUniqID+0x68>)
 8003626:	4423      	add	r3, r4
 8003628:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800362a:	79bb      	ldrb	r3, [r7, #6]
 800362c:	3301      	adds	r3, #1
 800362e:	71bb      	strb	r3, [r7, #6]
 8003630:	79bb      	ldrb	r3, [r7, #6]
 8003632:	2b07      	cmp	r3, #7
 8003634:	d9f0      	bls.n	8003618 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003636:	2201      	movs	r2, #1
 8003638:	2101      	movs	r1, #1
 800363a:	4803      	ldr	r0, [pc, #12]	; (8003648 <W25qxx_ReadUniqID+0x64>)
 800363c:	f008 fd1c 	bl	800c078 <HAL_GPIO_WritePin>
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bd90      	pop	{r4, r7, pc}
 8003648:	48000400 	.word	0x48000400
 800364c:	2000073c 	.word	0x2000073c

08003650 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003654:	2200      	movs	r2, #0
 8003656:	2101      	movs	r1, #1
 8003658:	4807      	ldr	r0, [pc, #28]	; (8003678 <W25qxx_WriteEnable+0x28>)
 800365a:	f008 fd0d 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800365e:	2006      	movs	r0, #6
 8003660:	f7ff ff74 	bl	800354c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003664:	2201      	movs	r2, #1
 8003666:	2101      	movs	r1, #1
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <W25qxx_WriteEnable+0x28>)
 800366a:	f008 fd05 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f008 f9bc 	bl	800b9ec <HAL_Delay>
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	48000400 	.word	0x48000400

0800367c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800368a:	2200      	movs	r2, #0
 800368c:	2101      	movs	r1, #1
 800368e:	481c      	ldr	r0, [pc, #112]	; (8003700 <W25qxx_ReadStatusRegister+0x84>)
 8003690:	f008 fcf2 	bl	800c078 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10c      	bne.n	80036b4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800369a:	2005      	movs	r0, #5
 800369c:	f7ff ff56 	bl	800354c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80036a0:	20a5      	movs	r0, #165	; 0xa5
 80036a2:	f7ff ff53 	bl	800354c <W25qxx_Spi>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80036aa:	4a16      	ldr	r2, [pc, #88]	; (8003704 <W25qxx_ReadStatusRegister+0x88>)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80036b2:	e01b      	b.n	80036ec <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d10c      	bne.n	80036d4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80036ba:	2035      	movs	r0, #53	; 0x35
 80036bc:	f7ff ff46 	bl	800354c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80036c0:	20a5      	movs	r0, #165	; 0xa5
 80036c2:	f7ff ff43 	bl	800354c <W25qxx_Spi>
 80036c6:	4603      	mov	r3, r0
 80036c8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80036ca:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <W25qxx_ReadStatusRegister+0x88>)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80036d2:	e00b      	b.n	80036ec <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80036d4:	2015      	movs	r0, #21
 80036d6:	f7ff ff39 	bl	800354c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80036da:	20a5      	movs	r0, #165	; 0xa5
 80036dc:	f7ff ff36 	bl	800354c <W25qxx_Spi>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80036e4:	4a07      	ldr	r2, [pc, #28]	; (8003704 <W25qxx_ReadStatusRegister+0x88>)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80036ec:	2201      	movs	r2, #1
 80036ee:	2101      	movs	r1, #1
 80036f0:	4803      	ldr	r0, [pc, #12]	; (8003700 <W25qxx_ReadStatusRegister+0x84>)
 80036f2:	f008 fcc1 	bl	800c078 <HAL_GPIO_WritePin>
	return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	48000400 	.word	0x48000400
 8003704:	2000073c 	.word	0x2000073c

08003708 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800370c:	2001      	movs	r0, #1
 800370e:	f008 f96d 	bl	800b9ec <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2101      	movs	r1, #1
 8003716:	480f      	ldr	r0, [pc, #60]	; (8003754 <W25qxx_WaitForWriteEnd+0x4c>)
 8003718:	f008 fcae 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800371c:	2005      	movs	r0, #5
 800371e:	f7ff ff15 	bl	800354c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003722:	20a5      	movs	r0, #165	; 0xa5
 8003724:	f7ff ff12 	bl	800354c <W25qxx_Spi>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <W25qxx_WaitForWriteEnd+0x50>)
 800372e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003732:	2001      	movs	r0, #1
 8003734:	f008 f95a 	bl	800b9ec <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <W25qxx_WaitForWriteEnd+0x50>)
 800373a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ed      	bne.n	8003722 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003746:	2201      	movs	r2, #1
 8003748:	2101      	movs	r1, #1
 800374a:	4802      	ldr	r0, [pc, #8]	; (8003754 <W25qxx_WaitForWriteEnd+0x4c>)
 800374c:	f008 fc94 	bl	800c078 <HAL_GPIO_WritePin>
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}
 8003754:	48000400 	.word	0x48000400
 8003758:	2000073c 	.word	0x2000073c

0800375c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <W25qxx_Init+0x19c>)
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800376a:	e002      	b.n	8003772 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800376c:	2001      	movs	r0, #1
 800376e:	f008 f93d 	bl	800b9ec <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003772:	f008 f92f 	bl	800b9d4 <HAL_GetTick>
 8003776:	4603      	mov	r3, r0
 8003778:	2b63      	cmp	r3, #99	; 0x63
 800377a:	d9f7      	bls.n	800376c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800377c:	2201      	movs	r2, #1
 800377e:	2101      	movs	r1, #1
 8003780:	485e      	ldr	r0, [pc, #376]	; (80038fc <W25qxx_Init+0x1a0>)
 8003782:	f008 fc79 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003786:	2064      	movs	r0, #100	; 0x64
 8003788:	f008 f930 	bl	800b9ec <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800378c:	f7ff fef4 	bl	8003578 <W25qxx_ReadID>
 8003790:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3b11      	subs	r3, #17
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d86c      	bhi.n	8003876 <W25qxx_Init+0x11a>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <W25qxx_Init+0x48>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	08003869 	.word	0x08003869
 80037a8:	0800385b 	.word	0x0800385b
 80037ac:	0800384d 	.word	0x0800384d
 80037b0:	0800383f 	.word	0x0800383f
 80037b4:	08003831 	.word	0x08003831
 80037b8:	08003823 	.word	0x08003823
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003805 	.word	0x08003805
 80037c4:	080037f5 	.word	0x080037f5
 80037c8:	08003877 	.word	0x08003877
 80037cc:	08003877 	.word	0x08003877
 80037d0:	08003877 	.word	0x08003877
 80037d4:	08003877 	.word	0x08003877
 80037d8:	08003877 	.word	0x08003877
 80037dc:	08003877 	.word	0x08003877
 80037e0:	080037e5 	.word	0x080037e5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80037e4:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <W25qxx_Init+0x19c>)
 80037e6:	220a      	movs	r2, #10
 80037e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <W25qxx_Init+0x19c>)
 80037ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80037f2:	e046      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80037f4:	4b40      	ldr	r3, [pc, #256]	; (80038f8 <W25qxx_Init+0x19c>)
 80037f6:	2209      	movs	r2, #9
 80037f8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80037fa:	4b3f      	ldr	r3, [pc, #252]	; (80038f8 <W25qxx_Init+0x19c>)
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003802:	e03e      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <W25qxx_Init+0x19c>)
 8003806:	2208      	movs	r2, #8
 8003808:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <W25qxx_Init+0x19c>)
 800380c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003810:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003812:	e036      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003814:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <W25qxx_Init+0x19c>)
 8003816:	2207      	movs	r2, #7
 8003818:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <W25qxx_Init+0x19c>)
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003820:	e02f      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003822:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <W25qxx_Init+0x19c>)
 8003824:	2206      	movs	r2, #6
 8003826:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <W25qxx_Init+0x19c>)
 800382a:	2240      	movs	r2, #64	; 0x40
 800382c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800382e:	e028      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003830:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <W25qxx_Init+0x19c>)
 8003832:	2205      	movs	r2, #5
 8003834:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003836:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <W25qxx_Init+0x19c>)
 8003838:	2220      	movs	r2, #32
 800383a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800383c:	e021      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <W25qxx_Init+0x19c>)
 8003840:	2204      	movs	r2, #4
 8003842:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <W25qxx_Init+0x19c>)
 8003846:	2210      	movs	r2, #16
 8003848:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800384a:	e01a      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <W25qxx_Init+0x19c>)
 800384e:	2203      	movs	r2, #3
 8003850:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <W25qxx_Init+0x19c>)
 8003854:	2208      	movs	r2, #8
 8003856:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003858:	e013      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <W25qxx_Init+0x19c>)
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <W25qxx_Init+0x19c>)
 8003862:	2204      	movs	r2, #4
 8003864:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003866:	e00c      	b.n	8003882 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <W25qxx_Init+0x19c>)
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <W25qxx_Init+0x19c>)
 8003870:	2202      	movs	r2, #2
 8003872:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003874:	e005      	b.n	8003882 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <W25qxx_Init+0x19c>)
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800387e:	2300      	movs	r3, #0
 8003880:	e036      	b.n	80038f0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <W25qxx_Init+0x19c>)
 8003884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003888:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <W25qxx_Init+0x19c>)
 800388c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003890:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <W25qxx_Init+0x19c>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <W25qxx_Init+0x19c>)
 800389a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <W25qxx_Init+0x19c>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <W25qxx_Init+0x19c>)
 80038a2:	6912      	ldr	r2, [r2, #16]
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <W25qxx_Init+0x19c>)
 80038aa:	8952      	ldrh	r2, [r2, #10]
 80038ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80038b0:	4a11      	ldr	r2, [pc, #68]	; (80038f8 <W25qxx_Init+0x19c>)
 80038b2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <W25qxx_Init+0x19c>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <W25qxx_Init+0x19c>)
 80038bc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <W25qxx_Init+0x19c>)
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <W25qxx_Init+0x19c>)
 80038c4:	6912      	ldr	r2, [r2, #16]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	0a9b      	lsrs	r3, r3, #10
 80038cc:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <W25qxx_Init+0x19c>)
 80038ce:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80038d0:	f7ff fe88 	bl	80035e4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80038d4:	2001      	movs	r0, #1
 80038d6:	f7ff fed1 	bl	800367c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80038da:	2002      	movs	r0, #2
 80038dc:	f7ff fece 	bl	800367c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80038e0:	2003      	movs	r0, #3
 80038e2:	f7ff fecb 	bl	800367c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <W25qxx_Init+0x19c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000073c 	.word	0x2000073c
 80038fc:	48000400 	.word	0x48000400

08003900 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003908:	e002      	b.n	8003910 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800390a:	2001      	movs	r0, #1
 800390c:	f008 f86e 	bl	800b9ec <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <W25qxx_EraseSector+0xa8>)
 8003912:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003916:	2b01      	cmp	r3, #1
 8003918:	d0f7      	beq.n	800390a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <W25qxx_EraseSector+0xa8>)
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8003922:	f7ff fef1 	bl	8003708 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <W25qxx_EraseSector+0xa8>)
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	fb02 f303 	mul.w	r3, r2, r3
 8003930:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003932:	f7ff fe8d 	bl	8003650 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003936:	2200      	movs	r2, #0
 8003938:	2101      	movs	r1, #1
 800393a:	481c      	ldr	r0, [pc, #112]	; (80039ac <W25qxx_EraseSector+0xac>)
 800393c:	f008 fb9c 	bl	800c078 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <W25qxx_EraseSector+0xa8>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d909      	bls.n	800395c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003948:	2021      	movs	r0, #33	; 0x21
 800394a:	f7ff fdff 	bl	800354c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0e1b      	lsrs	r3, r3, #24
 8003952:	b2db      	uxtb	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fdf9 	bl	800354c <W25qxx_Spi>
 800395a:	e002      	b.n	8003962 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800395c:	2020      	movs	r0, #32
 800395e:	f7ff fdf5 	bl	800354c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fdef 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fde9 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fde4 	bl	800354c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003984:	2201      	movs	r2, #1
 8003986:	2101      	movs	r1, #1
 8003988:	4808      	ldr	r0, [pc, #32]	; (80039ac <W25qxx_EraseSector+0xac>)
 800398a:	f008 fb75 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800398e:	f7ff febb 	bl	8003708 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8003992:	2001      	movs	r0, #1
 8003994:	f008 f82a 	bl	800b9ec <HAL_Delay>
	w25qxx.Lock = 0;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <W25qxx_EraseSector+0xa8>)
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2000073c 	.word	0x2000073c
 80039ac:	48000400 	.word	0x48000400

080039b0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <W25qxx_SectorToPage+0x28>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <W25qxx_SectorToPage+0x28>)
 80039c4:	8952      	ldrh	r2, [r2, #10]
 80039c6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	2000073c 	.word	0x2000073c

080039dc <W25qxx_IsEmptySector>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b090      	sub	sp, #64	; 0x40
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 80039e8:	e002      	b.n	80039f0 <W25qxx_IsEmptySector+0x14>
		W25qxx_Delay(1);
 80039ea:	2001      	movs	r0, #1
 80039ec:	f007 fffe 	bl	800b9ec <HAL_Delay>
	while (w25qxx.Lock == 1)
 80039f0:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 80039f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d0f7      	beq.n	80039ea <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock = 1;
 80039fa:	4b6a      	ldr	r3, [pc, #424]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToCheck_up_to_SectorSize == 0))
 8003a02:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d802      	bhi.n	8003a12 <W25qxx_IsEmptySector+0x36>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8003a12:	4b64      	ldr	r3, [pc, #400]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	607b      	str	r3, [r7, #4]
	uint32_t StartTime = HAL_GetTick();
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1c:	e055      	b.n	8003aca <W25qxx_IsEmptySector+0xee>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2101      	movs	r1, #1
 8003a22:	4861      	ldr	r0, [pc, #388]	; (8003ba8 <W25qxx_IsEmptySector+0x1cc>)
 8003a24:	f008 fb28 	bl	800c078 <HAL_GPIO_WritePin>
		WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8003a28:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a34:	4413      	add	r3, r2
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
		if (w25qxx.ID >= W25Q256)
 8003a38:	4b5a      	ldr	r3, [pc, #360]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d909      	bls.n	8003a54 <W25qxx_IsEmptySector+0x78>
		{
			W25qxx_Spi(0x0C);
 8003a40:	200c      	movs	r0, #12
 8003a42:	f7ff fd83 	bl	800354c <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8003a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fd7d 	bl	800354c <W25qxx_Spi>
 8003a52:	e002      	b.n	8003a5a <W25qxx_IsEmptySector+0x7e>
		}
		else
		{
			W25qxx_Spi(0x0B);
 8003a54:	200b      	movs	r0, #11
 8003a56:	f7ff fd79 	bl	800354c <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fd73 	bl	800354c <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fd6d 	bl	800354c <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fd68 	bl	800354c <W25qxx_Spi>
		W25qxx_Spi(0);
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f7ff fd65 	bl	800354c <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 8003a82:	f107 0114 	add.w	r1, r7, #20
 8003a86:	2364      	movs	r3, #100	; 0x64
 8003a88:	2220      	movs	r2, #32
 8003a8a:	4848      	ldr	r0, [pc, #288]	; (8003bac <W25qxx_IsEmptySector+0x1d0>)
 8003a8c:	f00a fd09 	bl	800e4a2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a90:	2201      	movs	r2, #1
 8003a92:	2101      	movs	r1, #1
 8003a94:	4844      	ldr	r0, [pc, #272]	; (8003ba8 <W25qxx_IsEmptySector+0x1cc>)
 8003a96:	f008 faef 	bl	800c078 <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003aa0:	e00c      	b.n	8003abc <W25qxx_IsEmptySector+0xe0>
		{
			if (pBuffer[x] != 0xFF)
 8003aa2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003aa6:	3340      	adds	r3, #64	; 0x40
 8003aa8:	443b      	add	r3, r7
 8003aaa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d16b      	bne.n	8003b8a <W25qxx_IsEmptySector+0x1ae>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8003ab2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003abc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ac0:	2b1f      	cmp	r3, #31
 8003ac2:	d9ee      	bls.n	8003aa2 <W25qxx_IsEmptySector+0xc6>
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	3320      	adds	r3, #32
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3a4      	bcc.n	8003a1e <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0)
 8003ad4:	4b33      	ldr	r3, [pc, #204]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4413      	add	r3, r2
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d04c      	beq.n	8003b7e <W25qxx_IsEmptySector+0x1a2>
	{
		i -= sizeof(pBuffer);
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	3b20      	subs	r3, #32
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.SectorSize; i++)
 8003aea:	e043      	b.n	8003b74 <W25qxx_IsEmptySector+0x198>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2101      	movs	r1, #1
 8003af0:	482d      	ldr	r0, [pc, #180]	; (8003ba8 <W25qxx_IsEmptySector+0x1cc>)
 8003af2:	f008 fac1 	bl	800c078 <HAL_GPIO_WritePin>
			WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b02:	4413      	add	r3, r2
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
			if (w25qxx.ID >= W25Q256)
 8003b06:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d909      	bls.n	8003b22 <W25qxx_IsEmptySector+0x146>
			{
				W25qxx_Spi(0x0C);
 8003b0e:	200c      	movs	r0, #12
 8003b10:	f7ff fd1c 	bl	800354c <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	0e1b      	lsrs	r3, r3, #24
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fd16 	bl	800354c <W25qxx_Spi>
 8003b20:	e002      	b.n	8003b28 <W25qxx_IsEmptySector+0x14c>
			}
			else
			{
				W25qxx_Spi(0x0B);
 8003b22:	200b      	movs	r0, #11
 8003b24:	f7ff fd12 	bl	800354c <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fd0c 	bl	800354c <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fd06 	bl	800354c <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fd01 	bl	800354c <W25qxx_Spi>
			W25qxx_Spi(0);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7ff fcfe 	bl	800354c <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 8003b50:	f107 0114 	add.w	r1, r7, #20
 8003b54:	2364      	movs	r3, #100	; 0x64
 8003b56:	2201      	movs	r2, #1
 8003b58:	4814      	ldr	r0, [pc, #80]	; (8003bac <W25qxx_IsEmptySector+0x1d0>)
 8003b5a:	f00a fca2 	bl	800e4a2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2101      	movs	r1, #1
 8003b62:	4811      	ldr	r0, [pc, #68]	; (8003ba8 <W25qxx_IsEmptySector+0x1cc>)
 8003b64:	f008 fa88 	bl	800c078 <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 8003b68:	7d3b      	ldrb	r3, [r7, #20]
 8003b6a:	2bff      	cmp	r3, #255	; 0xff
 8003b6c:	d10f      	bne.n	8003b8e <W25qxx_IsEmptySector+0x1b2>
		for (; i < w25qxx.SectorSize; i++)
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b70:	3301      	adds	r3, #1
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3b6      	bcc.n	8003aec <W25qxx_IsEmptySector+0x110>
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <W25qxx_IsEmptySector+0x1be>
				goto NOT_EMPTY;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <W25qxx_IsEmptySector+0x1b4>
				goto NOT_EMPTY;
 8003b8e:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <W25qxx_IsEmptySector+0x1c8>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3740      	adds	r7, #64	; 0x40
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000073c 	.word	0x2000073c
 8003ba8:	48000400 	.word	0x48000400
 8003bac:	2000057c 	.word	0x2000057c

08003bb0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003bbe:	e002      	b.n	8003bc6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f007 ff13 	bl	800b9ec <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003bc6:	4b39      	ldr	r3, [pc, #228]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003bc8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d0f7      	beq.n	8003bc0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003bd0:	4b36      	ldr	r3, [pc, #216]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	4a33      	ldr	r2, [pc, #204]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003be0:	8952      	ldrh	r2, [r2, #10]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d802      	bhi.n	8003bec <W25qxx_WritePage+0x3c>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003bec:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003bee:	895b      	ldrh	r3, [r3, #10]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003c00:	8952      	ldrh	r2, [r2, #10]
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d905      	bls.n	8003c12 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003c06:	4b29      	ldr	r3, [pc, #164]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003c08:	895b      	ldrh	r3, [r3, #10]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8003c12:	f7ff fd79 	bl	8003708 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003c16:	f7ff fd1b 	bl	8003650 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4824      	ldr	r0, [pc, #144]	; (8003cb0 <W25qxx_WritePage+0x100>)
 8003c20:	f008 fa2a 	bl	800c078 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003c26:	895b      	ldrh	r3, [r3, #10]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4413      	add	r3, r2
 8003c34:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d909      	bls.n	8003c52 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8003c3e:	2012      	movs	r0, #18
 8003c40:	f7ff fc84 	bl	800354c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fc7e 	bl	800354c <W25qxx_Spi>
 8003c50:	e002      	b.n	8003c58 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003c52:	2002      	movs	r0, #2
 8003c54:	f7ff fc7a 	bl	800354c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fc74 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	0a1b      	lsrs	r3, r3, #8
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fc6e 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fc69 	bl	800354c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	2364      	movs	r3, #100	; 0x64
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <W25qxx_WritePage+0x104>)
 8003c84:	f00a fa9f 	bl	800e1c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4808      	ldr	r0, [pc, #32]	; (8003cb0 <W25qxx_WritePage+0x100>)
 8003c8e:	f008 f9f3 	bl	800c078 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003c92:	f7ff fd39 	bl	8003708 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003c96:	2001      	movs	r0, #1
 8003c98:	f007 fea8 	bl	800b9ec <HAL_Delay>
	w25qxx.Lock = 0;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <W25qxx_WritePage+0xfc>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2000073c 	.word	0x2000073c
 8003cb0:	48000400 	.word	0x48000400
 8003cb4:	2000057c 	.word	0x2000057c

08003cb8 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d802      	bhi.n	8003cd6 <W25qxx_WriteSector+0x1e>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003cdc:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d243      	bcs.n	8003d6e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	441a      	add	r2, r3
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d905      	bls.n	8003d00 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e001      	b.n	8003d04 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003d04:	68b8      	ldr	r0, [r7, #8]
 8003d06:	f7ff fe53 	bl	80039b0 <W25qxx_SectorToPage>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003d0e:	895b      	ldrh	r3, [r3, #10]
 8003d10:	4619      	mov	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d18:	4413      	add	r3, r2
 8003d1a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003d1e:	895b      	ldrh	r3, [r3, #10]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d28:	fb01 f202 	mul.w	r2, r1, r2
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff ff3a 	bl	8003bb0 <W25qxx_WritePage>
		StartPage++;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003d44:	895b      	ldrh	r3, [r3, #10]
 8003d46:	461a      	mov	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1a9a      	subs	r2, r3, r2
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4413      	add	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <W25qxx_WriteSector+0xc0>)
 8003d54:	895b      	ldrh	r3, [r3, #10]
 8003d56:	461a      	mov	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	dce1      	bgt.n	8003d30 <W25qxx_WriteSector+0x78>
 8003d6c:	e000      	b.n	8003d70 <W25qxx_WriteSector+0xb8>
		return;
 8003d6e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000073c 	.word	0x2000073c

08003d7c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003d8a:	e002      	b.n	8003d92 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f007 fe2d 	bl	800b9ec <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003d92:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003d94:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d0f7      	beq.n	8003d8c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003d9c:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003da4:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003da6:	895b      	ldrh	r3, [r3, #10]
 8003da8:	461a      	mov	r2, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d802      	bhi.n	8003db6 <W25qxx_ReadPage+0x3a>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003db8:	895b      	ldrh	r3, [r3, #10]
 8003dba:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003dc4:	8952      	ldrh	r2, [r2, #10]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d905      	bls.n	8003dd6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003dcc:	895b      	ldrh	r3, [r3, #10]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003dd6:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003dd8:	895b      	ldrh	r3, [r3, #10]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2101      	movs	r1, #1
 8003dec:	4820      	ldr	r0, [pc, #128]	; (8003e70 <W25qxx_ReadPage+0xf4>)
 8003dee:	f008 f943 	bl	800c078 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d909      	bls.n	8003e0e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8003dfa:	200c      	movs	r0, #12
 8003dfc:	f7ff fba6 	bl	800354c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	0e1b      	lsrs	r3, r3, #24
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fba0 	bl	800354c <W25qxx_Spi>
 8003e0c:	e002      	b.n	8003e14 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003e0e:	200b      	movs	r0, #11
 8003e10:	f7ff fb9c 	bl	800354c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fb96 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fb90 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fb8b 	bl	800354c <W25qxx_Spi>
	W25qxx_Spi(0);
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7ff fb88 	bl	800354c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	2364      	movs	r3, #100	; 0x64
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	480b      	ldr	r0, [pc, #44]	; (8003e74 <W25qxx_ReadPage+0xf8>)
 8003e46:	f00a fb2c 	bl	800e4a2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4808      	ldr	r0, [pc, #32]	; (8003e70 <W25qxx_ReadPage+0xf4>)
 8003e50:	f008 f912 	bl	800c078 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f007 fdc9 	bl	800b9ec <HAL_Delay>
	w25qxx.Lock = 0;
 8003e5a:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <W25qxx_ReadPage+0xf0>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000073c 	.word	0x2000073c
 8003e70:	48000400 	.word	0x48000400
 8003e74:	2000057c 	.word	0x2000057c

08003e78 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d802      	bhi.n	8003e96 <W25qxx_ReadSector+0x1e>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003e96:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003e9c:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d243      	bcs.n	8003f2e <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	441a      	add	r2, r3
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d905      	bls.n	8003ec0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e001      	b.n	8003ec4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f7ff fd73 	bl	80039b0 <W25qxx_SectorToPage>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003ece:	895b      	ldrh	r3, [r3, #10]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed8:	4413      	add	r3, r2
 8003eda:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003ede:	895b      	ldrh	r3, [r3, #10]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ee8:	fb01 f202 	mul.w	r2, r1, r2
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff40 	bl	8003d7c <W25qxx_ReadPage>
		StartPage++;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003f04:	895b      	ldrh	r3, [r3, #10]
 8003f06:	461a      	mov	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1a9a      	subs	r2, r3, r2
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <W25qxx_ReadSector+0xc0>)
 8003f14:	895b      	ldrh	r3, [r3, #10]
 8003f16:	461a      	mov	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	dce1      	bgt.n	8003ef0 <W25qxx_ReadSector+0x78>
 8003f2c:	e000      	b.n	8003f30 <W25qxx_ReadSector+0xb8>
		return;
 8003f2e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	2000073c 	.word	0x2000073c

08003f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f40:	f7ff f9de 	bl	8003300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f44:	480c      	ldr	r0, [pc, #48]	; (8003f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f46:	490d      	ldr	r1, [pc, #52]	; (8003f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <LoopForever+0xe>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	; (8003f88 <LoopForever+0x16>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f00c ffd5 	bl	8010f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f6e:	f7fe faff 	bl	8002570 <main>

08003f72 <LoopForever>:

LoopForever:
    b LoopForever
 8003f72:	e7fe      	b.n	8003f72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f7c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003f80:	08011e5c 	.word	0x08011e5c
  ldr r2, =_sbss
 8003f84:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003f88:	20000fb0 	.word	0x20000fb0

08003f8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC1_IRQHandler>
	...

08003f90 <_ZN9LpdcLogicC1Ev>:
uint16_t requirementIdK1;
uint16_t productionTarget;
uint8_t triggerStartForReq;


LpdcLogic::LpdcLogic() {
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <_ZN9LpdcLogicC1Ev+0x24>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	721a      	strb	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	08011d78 	.word	0x08011d78

08003fb8 <_ZN9LpdcLogicD1Ev>:

LpdcLogic::~LpdcLogic() {
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <_ZN9LpdcLogicD1Ev+0x1c>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	08011d78 	.word	0x08011d78

08003fd8 <_ZN9LpdcLogicD0Ev>:
LpdcLogic::~LpdcLogic() {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
}
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ffe9 	bl	8003fb8 <_ZN9LpdcLogicD1Ev>
 8003fe6:	210c      	movs	r1, #12
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f00c ff8a 	bl	8010f02 <_ZdlPvj>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_ZN9LpdcLogic3runEv>:

void LpdcLogic::run()
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	shiftChange();
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f80d 	bl	8004020 <_ZN9LpdcLogic11shiftChangeEv>
	machineControl();
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f88c 	bl	8004124 <_ZN9LpdcLogic14machineControlEv>
	productChange();
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f847 	bl	80040a0 <_ZN9LpdcLogic13productChangeEv>
	mAlarmControl();
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f87c 	bl	8004110 <_ZN9LpdcLogic13mAlarmControlEv>
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_ZN9LpdcLogic11shiftChangeEv>:

void LpdcLogic::shiftChange()
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	if((CurrentShift != CurrentShift_K1)&&(UpdateShiftInfo==1))
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d01c      	beq.n	800406e <_ZN9LpdcLogic11shiftChangeEv+0x4e>
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d118      	bne.n	800406e <_ZN9LpdcLogic11shiftChangeEv+0x4e>
	{
		MAC_Gen_Prod_Input1_Production=0;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <_ZN9LpdcLogic11shiftChangeEv+0x68>)
 800403e:	2200      	movs	r2, #0
 8004040:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <_ZN9LpdcLogic11shiftChangeEv+0x6c>)
 8004044:	2200      	movs	r2, #0
 8004046:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <_ZN9LpdcLogic11shiftChangeEv+0x70>)
 800404a:	2200      	movs	r2, #0
 800404c:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <_ZN9LpdcLogic11shiftChangeEv+0x74>)
 8004050:	2200      	movs	r2, #0
 8004052:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <_ZN9LpdcLogic11shiftChangeEv+0x78>)
 8004056:	2200      	movs	r2, #0
 8004058:	801a      	strh	r2, [r3, #0]
		UpdateShiftInfo=0;
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
		CurrentShift_K1= CurrentShift;
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 8004066:	701a      	strb	r2, [r3, #0]
		IsCurrentShiftUpdated=1;
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <_ZN9LpdcLogic11shiftChangeEv+0x7c>)
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
	}
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000a60 	.word	0x20000a60
 8004080:	20000772 	.word	0x20000772
 8004084:	20000a61 	.word	0x20000a61
 8004088:	20000768 	.word	0x20000768
 800408c:	2000076c 	.word	0x2000076c
 8004090:	20000770 	.word	0x20000770
 8004094:	2000076a 	.word	0x2000076a
 8004098:	2000076e 	.word	0x2000076e
 800409c:	20000773 	.word	0x20000773

080040a0 <_ZN9LpdcLogic13productChangeEv>:

void LpdcLogic::productChange()
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	if((productChangeOL ==1)&&(Debounce_productChangeOL ==1))	  /*reset due to product change*/
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <_ZN9LpdcLogic13productChangeEv+0x58>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d116      	bne.n	80040de <_ZN9LpdcLogic13productChangeEv+0x3e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7a1b      	ldrb	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d112      	bne.n	80040de <_ZN9LpdcLogic13productChangeEv+0x3e>
	  {
		MAC_Gen_Prod_Input1_Production=0;
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <_ZN9LpdcLogic13productChangeEv+0x5c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_ZN9LpdcLogic13productChangeEv+0x60>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <_ZN9LpdcLogic13productChangeEv+0x64>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <_ZN9LpdcLogic13productChangeEv+0x68>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <_ZN9LpdcLogic13productChangeEv+0x6c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	801a      	strh	r2, [r3, #0]
		Debounce_productChangeOL=0;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	721a      	strb	r2, [r3, #8]
	  }
	  else if(productChangeOL==0)
	  {
	  	Debounce_productChangeOL=1;
	  }
}
 80040dc:	e006      	b.n	80040ec <_ZN9LpdcLogic13productChangeEv+0x4c>
	  else if(productChangeOL==0)
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <_ZN9LpdcLogic13productChangeEv+0x58>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <_ZN9LpdcLogic13productChangeEv+0x4c>
	  	Debounce_productChangeOL=1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	721a      	strb	r2, [r3, #8]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	200000fc 	.word	0x200000fc
 80040fc:	20000768 	.word	0x20000768
 8004100:	2000076c 	.word	0x2000076c
 8004104:	20000770 	.word	0x20000770
 8004108:	2000076a 	.word	0x2000076a
 800410c:	2000076e 	.word	0x2000076e

08004110 <_ZN9LpdcLogic13mAlarmControlEv>:
		 DebounceMACA_Rej=1;
	 }
}

void LpdcLogic::mAlarmControl(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	}
	else
	{
	//	HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
	}
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_ZN9LpdcLogic14machineControlEv>:

void LpdcLogic::machineControl(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	if(requirementId != requirementIdK1){
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <_ZN9LpdcLogic14machineControlEv+0xb4>)
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <_ZN9LpdcLogic14machineControlEv+0xb8>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d010      	beq.n	800415a <_ZN9LpdcLogic14machineControlEv+0x36>
		productionInc 		= 0;
 8004138:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <_ZN9LpdcLogic14machineControlEv+0xbc>)
 800413a:	2200      	movs	r2, #0
 800413c:	801a      	strh	r2, [r3, #0]
		requirementIdK1 	= requirementId;
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <_ZN9LpdcLogic14machineControlEv+0xb4>)
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <_ZN9LpdcLogic14machineControlEv+0xb8>)
 8004144:	801a      	strh	r2, [r3, #0]
		updateMemProcCtrl	= 1;
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <_ZN9LpdcLogic14machineControlEv+0xc0>)
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
		triggerStartForReq  = 1;
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
		productionTarget 	= batchTargetquantity;
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <_ZN9LpdcLogic14machineControlEv+0xc8>)
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	4b26      	ldr	r3, [pc, #152]	; (80041f0 <_ZN9LpdcLogic14machineControlEv+0xcc>)
 8004158:	801a      	strh	r2, [r3, #0]
	}

	if(triggerStartForReq==1){
 800415a:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <_ZN9LpdcLogic14machineControlEv+0x4e>
		if(startStopStatus ==1){
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <_ZN9LpdcLogic14machineControlEv+0xd0>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d132      	bne.n	80041d0 <_ZN9LpdcLogic14machineControlEv+0xac>
			triggerStartForReq=2;
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 800416c:	2202      	movs	r2, #2
 800416e:	701a      	strb	r2, [r3, #0]
		{
			HAL_GPIO_WritePin(GPIOC, RELAY3_Pin, GPIO_PIN_RESET);
		}
	}

}
 8004170:	e02e      	b.n	80041d0 <_ZN9LpdcLogic14machineControlEv+0xac>
	else if(triggerStartForReq==2){
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <_ZN9LpdcLogic14machineControlEv+0xc4>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d12a      	bne.n	80041d0 <_ZN9LpdcLogic14machineControlEv+0xac>
		if((productionInc <= productionTarget)&&(startStopStatus!=2))/*FInal Stop*/
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <_ZN9LpdcLogic14machineControlEv+0xbc>)
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <_ZN9LpdcLogic14machineControlEv+0xcc>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d809      	bhi.n	800419a <_ZN9LpdcLogic14machineControlEv+0x76>
 8004186:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <_ZN9LpdcLogic14machineControlEv+0xd0>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d005      	beq.n	800419a <_ZN9LpdcLogic14machineControlEv+0x76>
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_SET);
 800418e:	2201      	movs	r2, #1
 8004190:	2120      	movs	r1, #32
 8004192:	4819      	ldr	r0, [pc, #100]	; (80041f8 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 8004194:	f007 ff70 	bl	800c078 <HAL_GPIO_WritePin>
 8004198:	e004      	b.n	80041a4 <_ZN9LpdcLogic14machineControlEv+0x80>
			HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
 800419a:	2200      	movs	r2, #0
 800419c:	2120      	movs	r1, #32
 800419e:	4816      	ldr	r0, [pc, #88]	; (80041f8 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 80041a0:	f007 ff6a 	bl	800c078 <HAL_GPIO_WritePin>
		if((productionInc <= (productionTarget-INDICATIONOFFSET))&&(startStopStatus!=2))/*Pre indication*/
 80041a4:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <_ZN9LpdcLogic14machineControlEv+0xcc>)
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	3b13      	subs	r3, #19
 80041aa:	4a0d      	ldr	r2, [pc, #52]	; (80041e0 <_ZN9LpdcLogic14machineControlEv+0xbc>)
 80041ac:	8812      	ldrh	r2, [r2, #0]
 80041ae:	4293      	cmp	r3, r2
 80041b0:	dd09      	ble.n	80041c6 <_ZN9LpdcLogic14machineControlEv+0xa2>
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <_ZN9LpdcLogic14machineControlEv+0xd0>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d005      	beq.n	80041c6 <_ZN9LpdcLogic14machineControlEv+0xa2>
			HAL_GPIO_WritePin(GPIOC, RELAY3_Pin, GPIO_PIN_SET);
 80041ba:	2201      	movs	r2, #1
 80041bc:	2110      	movs	r1, #16
 80041be:	480e      	ldr	r0, [pc, #56]	; (80041f8 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 80041c0:	f007 ff5a 	bl	800c078 <HAL_GPIO_WritePin>
}
 80041c4:	e004      	b.n	80041d0 <_ZN9LpdcLogic14machineControlEv+0xac>
			HAL_GPIO_WritePin(GPIOC, RELAY3_Pin, GPIO_PIN_RESET);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2110      	movs	r1, #16
 80041ca:	480b      	ldr	r0, [pc, #44]	; (80041f8 <_ZN9LpdcLogic14machineControlEv+0xd4>)
 80041cc:	f007 ff54 	bl	800c078 <HAL_GPIO_WritePin>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2000010a 	.word	0x2000010a
 80041dc:	20000778 	.word	0x20000778
 80041e0:	20000776 	.word	0x20000776
 80041e4:	20000775 	.word	0x20000775
 80041e8:	2000077c 	.word	0x2000077c
 80041ec:	20000102 	.word	0x20000102
 80041f0:	2000077a 	.word	0x2000077a
 80041f4:	2000010f 	.word	0x2000010f
 80041f8:	48000800 	.word	0x48000800

080041fc <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <_ZN6commonC1Ev+0x1c>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	08011d88 	.word	0x08011d88

0800421c <_ZN6commonD1Ev>:

common::~common() {
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <_ZN6commonD1Ev+0x1c>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	08011d88 	.word	0x08011d88

0800423c <_ZN6commonD0Ev>:
common::~common() {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
}
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ffe9 	bl	800421c <_ZN6commonD1Ev>
 800424a:	2104      	movs	r1, #4
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f00c fe58 	bl	8010f02 <_ZdlPvj>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZN14DisplayRoutineC1Ev>:
extern uint16_t productiontimeSetOL;

char GLCDNumericArray[2];
char gLCDNumericArraySize_4[4];

DisplayRoutine::DisplayRoutine() {
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <_ZN14DisplayRoutineC1Ev+0xa4>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fa2a 	bl	80046c8 <_ZN4GLCDC1Ev>
 8004274:	687d      	ldr	r5, [r7, #4]
 8004276:	4b23      	ldr	r3, [pc, #140]	; (8004304 <_ZN14DisplayRoutineC1Ev+0xa8>)
 8004278:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 800427c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800427e:	c407      	stmia	r4!, {r0, r1, r2}
 8004280:	8023      	strh	r3, [r4, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <_ZN14DisplayRoutineC1Ev+0xac>)
 800428c:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	491d      	ldr	r1, [pc, #116]	; (800430c <_ZN14DisplayRoutineC1Ev+0xb0>)
 8004298:	f603 2219 	addw	r2, r3, #2585	; 0xa19
 800429c:	8808      	ldrh	r0, [r1, #0]
 800429e:	7889      	ldrb	r1, [r1, #2]
 80042a0:	8010      	strh	r0, [r2, #0]
 80042a2:	7091      	strb	r1, [r2, #2]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <_ZN14DisplayRoutineC1Ev+0xb4>)
 80042ae:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 80042b2:	8812      	ldrh	r2, [r2, #0]
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	687d      	ldr	r5, [r7, #4]
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <_ZN14DisplayRoutineC1Ev+0xb8>)
 80042ba:	f605 241f 	addw	r4, r5, #2591	; 0xa1f
 80042be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042c0:	6020      	str	r0, [r4, #0]
 80042c2:	6061      	str	r1, [r4, #4]
 80042c4:	60a2      	str	r2, [r4, #8]
 80042c6:	2300      	movs	r3, #0
 80042c8:	f885 3a2b 	strb.w	r3, [r5, #2603]	; 0xa2b
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <_ZN14DisplayRoutineC1Ev+0xbc>)
 80042d0:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 80042d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80042d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 80042e0:	687d      	ldr	r5, [r7, #4]
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <_ZN14DisplayRoutineC1Ev+0xc0>)
 80042e4:	f605 2439 	addw	r4, r5, #2617	; 0xa39
 80042e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042ea:	6020      	str	r0, [r4, #0]
 80042ec:	6061      	str	r1, [r4, #4]
 80042ee:	60a2      	str	r2, [r4, #8]
 80042f0:	2300      	movs	r3, #0
 80042f2:	f885 3a45 	strb.w	r3, [r5, #2629]	; 0xa45
	// TODO Auto-generated constructor stub

}
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004300:	08011d98 	.word	0x08011d98
 8004304:	08011874 	.word	0x08011874
 8004308:	08011884 	.word	0x08011884
 800430c:	08011888 	.word	0x08011888
 8004310:	0801188c 	.word	0x0801188c
 8004314:	08011890 	.word	0x08011890
 8004318:	080118a0 	.word	0x080118a0
 800431c:	080118b0 	.word	0x080118b0

08004320 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	4a06      	ldr	r2, [pc, #24]	; (8004344 <_ZN14DisplayRoutineD1Ev+0x24>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f004 f944 	bl	80085c0 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	08011d98 	.word	0x08011d98

08004348 <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
}
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ffe5 	bl	8004320 <_ZN14DisplayRoutineD1Ev>
 8004356:	f640 2148 	movw	r1, #2632	; 0xa48
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f00c fdd1 	bl	8010f02 <_ZdlPvj>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1d18      	adds	r0, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800437e:	2201      	movs	r2, #1
 8004380:	2100      	movs	r1, #0
 8004382:	f004 fbdd 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(hour_t,2,0);
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <_ZN14DisplayRoutine3runEv+0x160>)
 8004388:	7819      	ldrb	r1, [r3, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	2202      	movs	r2, #2
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8b2 	bl	80044f8 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(15,2,colon);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1d18      	adds	r0, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 800439e:	2202      	movs	r2, #2
 80043a0:	210f      	movs	r1, #15
 80043a2:	f004 fbcd 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(min_t,2,20);
 80043a6:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <_ZN14DisplayRoutine3runEv+0x164>)
 80043a8:	7819      	ldrb	r1, [r3, #0]
 80043aa:	2314      	movs	r3, #20
 80043ac:	2202      	movs	r2, #2
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8a2 	bl	80044f8 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(35,2,colon);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	1d18      	adds	r0, r3, #4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 80043be:	2202      	movs	r2, #2
 80043c0:	2123      	movs	r1, #35	; 0x23
 80043c2:	f004 fbbd 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(sec_t,2,40);
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <_ZN14DisplayRoutine3runEv+0x168>)
 80043c8:	7819      	ldrb	r1, [r3, #0]
 80043ca:	2328      	movs	r3, #40	; 0x28
 80043cc:	2202      	movs	r2, #2
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f892 	bl	80044f8 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(54,2,space);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1d18      	adds	r0, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 80043de:	2202      	movs	r2, #2
 80043e0:	2136      	movs	r1, #54	; 0x36
 80043e2:	f004 fbad 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(date_Rtc,2,65);
 80043e6:	4b3c      	ldr	r3, [pc, #240]	; (80044d8 <_ZN14DisplayRoutine3runEv+0x16c>)
 80043e8:	7819      	ldrb	r1, [r3, #0]
 80043ea:	2341      	movs	r3, #65	; 0x41
 80043ec:	2202      	movs	r2, #2
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f882 	bl	80044f8 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(81,2,backslash);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	1d18      	adds	r0, r3, #4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 80043fe:	2202      	movs	r2, #2
 8004400:	2151      	movs	r1, #81	; 0x51
 8004402:	f004 fb9d 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(month_Rtc,2,86);
 8004406:	4b35      	ldr	r3, [pc, #212]	; (80044dc <_ZN14DisplayRoutine3runEv+0x170>)
 8004408:	7819      	ldrb	r1, [r3, #0]
 800440a:	2356      	movs	r3, #86	; 0x56
 800440c:	2202      	movs	r2, #2
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f872 	bl	80044f8 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(103,2,backslash);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1d18      	adds	r0, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 800441e:	2202      	movs	r2, #2
 8004420:	2167      	movs	r1, #103	; 0x67
 8004422:	f004 fb8d 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(year_Rtc,2,110);
 8004426:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <_ZN14DisplayRoutine3runEv+0x174>)
 8004428:	7819      	ldrb	r1, [r3, #0]
 800442a:	236e      	movs	r3, #110	; 0x6e
 800442c:	2202      	movs	r2, #2
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f862 	bl	80044f8 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(0,3,production);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1d18      	adds	r0, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f603 231f 	addw	r3, r3, #2591	; 0xa1f
 800443e:	2203      	movs	r2, #3
 8004440:	2100      	movs	r1, #0
 8004442:	f004 fb7d 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Production_Total,3,85);
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <_ZN14DisplayRoutine3runEv+0x178>)
 8004448:	8819      	ldrh	r1, [r3, #0]
 800444a:	2355      	movs	r3, #85	; 0x55
 800444c:	2203      	movs	r2, #3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f892 	bl	8004578 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1d18      	adds	r0, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 800445e:	2204      	movs	r2, #4
 8004460:	2100      	movs	r1, #0
 8004462:	f004 fb6d 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Rejection_Total,4,85);
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <_ZN14DisplayRoutine3runEv+0x17c>)
 8004468:	8819      	ldrh	r1, [r3, #0]
 800446a:	2355      	movs	r3, #85	; 0x55
 800446c:	2204      	movs	r2, #4
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f882 	bl	8004578 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1d18      	adds	r0, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f603 2339 	addw	r3, r3, #2617	; 0xa39
 800447e:	2205      	movs	r2, #5
 8004480:	2100      	movs	r1, #0
 8004482:	f004 fb5d 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(productiontimeSetOL,5,90);
 8004486:	4b19      	ldr	r3, [pc, #100]	; (80044ec <_ZN14DisplayRoutine3runEv+0x180>)
 8004488:	8819      	ldrh	r1, [r3, #0]
 800448a:	235a      	movs	r3, #90	; 0x5a
 800448c:	2205      	movs	r2, #5
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f872 	bl	8004578 <_ZN14DisplayRoutine11value4DigitEthh>
	value4Digit(wifi_command,6,0);
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <_ZN14DisplayRoutine3runEv+0x184>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b299      	uxth	r1, r3
 800449a:	2300      	movs	r3, #0
 800449c:	2206      	movs	r2, #6
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f86a 	bl	8004578 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(40,6,space);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1d18      	adds	r0, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 80044ae:	2206      	movs	r2, #6
 80044b0:	2128      	movs	r1, #40	; 0x28
 80044b2:	f004 fb45 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(SectorPos,6,80);
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <_ZN14DisplayRoutine3runEv+0x188>)
 80044b8:	8819      	ldrh	r1, [r3, #0]
 80044ba:	2350      	movs	r3, #80	; 0x50
 80044bc:	2206      	movs	r2, #6
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f85a 	bl	8004578 <_ZN14DisplayRoutine11value4DigitEthh>

}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000a59 	.word	0x20000a59
 80044d0:	20000a5a 	.word	0x20000a5a
 80044d4:	20000a5b 	.word	0x20000a5b
 80044d8:	20000a5d 	.word	0x20000a5d
 80044dc:	20000a5e 	.word	0x20000a5e
 80044e0:	20000a5f 	.word	0x20000a5f
 80044e4:	200000fe 	.word	0x200000fe
 80044e8:	20000100 	.word	0x20000100
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000a62 	.word	0x20000a62
 80044f4:	200009ee 	.word	0x200009ee

080044f8 <_ZN14DisplayRoutine11value2DigitEhhh>:

void DisplayRoutine::value2Digit(uint8_t value,uint8_t posLine,uint8_t posCol)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	70fb      	strb	r3, [r7, #3]
 800450a:	460b      	mov	r3, r1
 800450c:	70bb      	strb	r3, [r7, #2]
 800450e:	4613      	mov	r3, r2
 8004510:	707b      	strb	r3, [r7, #1]
	GLCDNumericArray[0] =(unsigned char)(((value%100)/10)+0x30);
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <_ZN14DisplayRoutine11value2DigitEhhh+0x74>)
 8004516:	fba2 1203 	umull	r1, r2, r2, r3
 800451a:	0952      	lsrs	r2, r2, #5
 800451c:	2164      	movs	r1, #100	; 0x64
 800451e:	fb01 f202 	mul.w	r2, r1, r2
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	b2db      	uxtb	r3, r3
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3330      	adds	r3, #48	; 0x30
 8004532:	b2da      	uxtb	r2, r3
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8004536:	701a      	strb	r2, [r3, #0]
    GLCDNumericArray[1] =(unsigned char)((value%10)+0x30);
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 800453c:	fba3 1302 	umull	r1, r3, r3, r2
 8004540:	08d9      	lsrs	r1, r3, #3
 8004542:	460b      	mov	r3, r1
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	3330      	adds	r3, #48	; 0x30
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8004554:	705a      	strb	r2, [r3, #1]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1d18      	adds	r0, r3, #4
 800455a:	78ba      	ldrb	r2, [r7, #2]
 800455c:	7879      	ldrb	r1, [r7, #1]
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8004560:	f004 faee 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	51eb851f 	.word	0x51eb851f
 8004570:	cccccccd 	.word	0xcccccccd
 8004574:	20000780 	.word	0x20000780

08004578 <_ZN14DisplayRoutine11value4DigitEthh>:
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	4608      	mov	r0, r1
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4603      	mov	r3, r0
 8004588:	807b      	strh	r3, [r7, #2]
 800458a:	460b      	mov	r3, r1
 800458c:	707b      	strb	r3, [r7, #1]
 800458e:	4613      	mov	r3, r2
 8004590:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <_ZN14DisplayRoutine11value4DigitEthh+0xcc>)
 8004596:	fba2 1203 	umull	r1, r2, r2, r3
 800459a:	0b52      	lsrs	r2, r2, #13
 800459c:	f242 7110 	movw	r1, #10000	; 0x2710
 80045a0:	fb01 f202 	mul.w	r2, r1, r2
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3330      	adds	r3, #48	; 0x30
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80045ba:	701a      	strb	r2, [r3, #0]
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	4a22      	ldr	r2, [pc, #136]	; (8004648 <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 80045c0:	fba2 1203 	umull	r1, r2, r2, r3
 80045c4:	0992      	lsrs	r2, r2, #6
 80045c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045ca:	fb01 f202 	mul.w	r2, r1, r2
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b29b      	uxth	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	3330      	adds	r3, #48	; 0x30
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80045e4:	705a      	strb	r2, [r3, #1]
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 80045e6:	887b      	ldrh	r3, [r7, #2]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80045ea:	fba2 1203 	umull	r1, r2, r2, r3
 80045ee:	0952      	lsrs	r2, r2, #5
 80045f0:	2164      	movs	r1, #100	; 0x64
 80045f2:	fb01 f202 	mul.w	r2, r1, r2
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	4a16      	ldr	r2, [pc, #88]	; (8004654 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	b29b      	uxth	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	3330      	adds	r3, #48	; 0x30
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 800460c:	709a      	strb	r2, [r3, #2]
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8004612:	fba3 1302 	umull	r1, r3, r3, r2
 8004616:	08d9      	lsrs	r1, r3, #3
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	b29b      	uxth	r3, r3
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3330      	adds	r3, #48	; 0x30
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 800462c:	70da      	strb	r2, [r3, #3]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1d18      	adds	r0, r3, #4
 8004632:	787a      	ldrb	r2, [r7, #1]
 8004634:	7839      	ldrb	r1, [r7, #0]
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8004638:	f004 fa82 	bl	8008b40 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	d1b71759 	.word	0xd1b71759
 8004648:	10624dd3 	.word	0x10624dd3
 800464c:	20000784 	.word	0x20000784
 8004650:	51eb851f 	.word	0x51eb851f
 8004654:	cccccccd 	.word	0xcccccccd

08004658 <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	4618      	mov	r0, r3
 8004666:	f004 f88d 	bl	8008784 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f004 f989 	bl	8008988 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	4618      	mov	r0, r3
 800467c:	f004 faa0 	bl	8008bc0 <_ZN4GLCD8m_clrlcdEv>


}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
 8004694:	4613      	mov	r3, r2
 8004696:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	78bb      	ldrb	r3, [r7, #2]
 80046a6:	4013      	ands	r3, r2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	e001      	b.n	80046b8 <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <_ZN4GLCDC1Ev>:
#include "main.h"
#include <string.h>
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
uint8_t length;
GLCD::GLCD() {
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fd92 	bl	80041fc <_ZN6commonC1Ev>
 80046d8:	4ac8      	ldr	r2, [pc, #800]	; (80049fc <_ZN4GLCDC1Ev+0x334>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	687d      	ldr	r5, [r7, #4]
 80046e0:	4bc7      	ldr	r3, [pc, #796]	; (8004a00 <_ZN4GLCDC1Ev+0x338>)
 80046e2:	1d2c      	adds	r4, r5, #4
 80046e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e6:	c407      	stmia	r4!, {r0, r1, r2}
 80046e8:	8023      	strh	r3, [r4, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	74ab      	strb	r3, [r5, #18]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	615a      	str	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	775a      	strb	r2, [r3, #29]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	331e      	adds	r3, #30
 8004704:	f640 0208 	movw	r2, #2056	; 0x808
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f00c fc3e 	bl	8010f8c <memset>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	227e      	movs	r2, #126	; 0x7e
 8004714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2281      	movs	r2, #129	; 0x81
 800471c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2295      	movs	r2, #149	; 0x95
 8004724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	22b1      	movs	r2, #177	; 0xb1
 800472c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	22b1      	movs	r2, #177	; 0xb1
 8004734:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2295      	movs	r2, #149	; 0x95
 800473c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2281      	movs	r2, #129	; 0x81
 8004744:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	227e      	movs	r2, #126	; 0x7e
 800474c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	227e      	movs	r2, #126	; 0x7e
 8004754:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	22ff      	movs	r2, #255	; 0xff
 800475c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	22eb      	movs	r2, #235	; 0xeb
 8004764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	22cf      	movs	r2, #207	; 0xcf
 800476c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	22cf      	movs	r2, #207	; 0xcf
 8004774:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	22eb      	movs	r2, #235	; 0xeb
 800477c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	22ff      	movs	r2, #255	; 0xff
 8004784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	227e      	movs	r2, #126	; 0x7e
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	220e      	movs	r2, #14
 8004794:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	221f      	movs	r2, #31
 800479c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	223f      	movs	r2, #63	; 0x3f
 80047a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	227e      	movs	r2, #126	; 0x7e
 80047ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	223f      	movs	r2, #63	; 0x3f
 80047b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	221f      	movs	r2, #31
 80047bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	220e      	movs	r2, #14
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2208      	movs	r2, #8
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	221c      	movs	r2, #28
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	223e      	movs	r2, #62	; 0x3e
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	227f      	movs	r2, #127	; 0x7f
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	223e      	movs	r2, #62	; 0x3e
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	221c      	movs	r2, #28
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2208      	movs	r2, #8
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2218      	movs	r2, #24
 8004804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	22ba      	movs	r2, #186	; 0xba
 800480c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	22ff      	movs	r2, #255	; 0xff
 8004814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	22ff      	movs	r2, #255	; 0xff
 800481c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	22ff      	movs	r2, #255	; 0xff
 8004824:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	22ba      	movs	r2, #186	; 0xba
 800482c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2218      	movs	r2, #24
 8004834:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2210      	movs	r2, #16
 800483c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	22b8      	movs	r2, #184	; 0xb8
 8004844:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	22fc      	movs	r2, #252	; 0xfc
 800484c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	22ff      	movs	r2, #255	; 0xff
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	22fc      	movs	r2, #252	; 0xfc
 800485c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	22b8      	movs	r2, #184	; 0xb8
 8004864:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2210      	movs	r2, #16
 800486c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2218      	movs	r2, #24
 8004874:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	223c      	movs	r2, #60	; 0x3c
 800487c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	223c      	movs	r2, #60	; 0x3c
 8004884:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2218      	movs	r2, #24
 800488c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	22e7      	movs	r2, #231	; 0xe7
 80048a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	22c3      	movs	r2, #195	; 0xc3
 80048ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	22c3      	movs	r2, #195	; 0xc3
 80048b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	22e7      	movs	r2, #231	; 0xe7
 80048bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	22ff      	movs	r2, #255	; 0xff
 80048c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	22ff      	movs	r2, #255	; 0xff
 80048cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	223c      	movs	r2, #60	; 0x3c
 80048d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2266      	movs	r2, #102	; 0x66
 80048dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2242      	movs	r2, #66	; 0x42
 80048e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2242      	movs	r2, #66	; 0x42
 80048ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2266      	movs	r2, #102	; 0x66
 80048f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	223c      	movs	r2, #60	; 0x3c
 80048fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	22c3      	movs	r2, #195	; 0xc3
 800490c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2299      	movs	r2, #153	; 0x99
 8004914:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	22bd      	movs	r2, #189	; 0xbd
 800491c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	22bd      	movs	r2, #189	; 0xbd
 8004924:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2299      	movs	r2, #153	; 0x99
 800492c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	22c3      	movs	r2, #195	; 0xc3
 8004934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	22ff      	movs	r2, #255	; 0xff
 800493c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2270      	movs	r2, #112	; 0x70
 8004944:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	22f8      	movs	r2, #248	; 0xf8
 800494c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2288      	movs	r2, #136	; 0x88
 8004954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2288      	movs	r2, #136	; 0x88
 800495c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	22fd      	movs	r2, #253	; 0xfd
 8004964:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	227f      	movs	r2, #127	; 0x7f
 800496c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2207      	movs	r2, #7
 8004974:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	220f      	movs	r2, #15
 800497c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	224e      	movs	r2, #78	; 0x4e
 8004984:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	225f      	movs	r2, #95	; 0x5f
 800498c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	22f1      	movs	r2, #241	; 0xf1
 8004994:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	22f1      	movs	r2, #241	; 0xf1
 800499c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	225f      	movs	r2, #95	; 0x5f
 80049a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	224e      	movs	r2, #78	; 0x4e
 80049ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	22c0      	movs	r2, #192	; 0xc0
 80049b4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	22e0      	movs	r2, #224	; 0xe0
 80049bc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	227f      	movs	r2, #127	; 0x7f
 80049cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2205      	movs	r2, #5
 80049d4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2205      	movs	r2, #5
 80049dc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2207      	movs	r2, #7
 80049e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2207      	movs	r2, #7
 80049ec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	22c0      	movs	r2, #192	; 0xc0
 80049f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80049f8:	e004      	b.n	8004a04 <_ZN4GLCDC1Ev+0x33c>
 80049fa:	bf00      	nop
 80049fc:	08011da8 	.word	0x08011da8
 8004a00:	080118c0 	.word	0x080118c0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	227f      	movs	r2, #127	; 0x7f
 8004a10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2205      	movs	r2, #5
 8004a18:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2265      	movs	r2, #101	; 0x65
 8004a28:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	227f      	movs	r2, #127	; 0x7f
 8004a30:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	223f      	movs	r2, #63	; 0x3f
 8004a38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2299      	movs	r2, #153	; 0x99
 8004a40:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	225a      	movs	r2, #90	; 0x5a
 8004a48:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	223c      	movs	r2, #60	; 0x3c
 8004a50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	22e7      	movs	r2, #231	; 0xe7
 8004a58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	22e7      	movs	r2, #231	; 0xe7
 8004a60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	223c      	movs	r2, #60	; 0x3c
 8004a68:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	225a      	movs	r2, #90	; 0x5a
 8004a70:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2299      	movs	r2, #153	; 0x99
 8004a78:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	227f      	movs	r2, #127	; 0x7f
 8004a80:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	223e      	movs	r2, #62	; 0x3e
 8004a88:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	223e      	movs	r2, #62	; 0x3e
 8004a90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	221c      	movs	r2, #28
 8004a98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	221c      	movs	r2, #28
 8004aa0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2208      	movs	r2, #8
 8004ab0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2208      	movs	r2, #8
 8004ac0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	221c      	movs	r2, #28
 8004ac8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	221c      	movs	r2, #28
 8004ad0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223e      	movs	r2, #62	; 0x3e
 8004ad8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223e      	movs	r2, #62	; 0x3e
 8004ae0:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	227f      	movs	r2, #127	; 0x7f
 8004ae8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2266      	movs	r2, #102	; 0x66
 8004af8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	22ff      	movs	r2, #255	; 0xff
 8004b08:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2266      	movs	r2, #102	; 0x66
 8004b10:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	225f      	movs	r2, #95	; 0x5f
 8004b20:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	225f      	movs	r2, #95	; 0x5f
 8004b28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	225f      	movs	r2, #95	; 0x5f
 8004b30:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	225f      	movs	r2, #95	; 0x5f
 8004b38:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2206      	movs	r2, #6
 8004b40:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	220f      	movs	r2, #15
 8004b48:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2209      	movs	r2, #9
 8004b50:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	227f      	movs	r2, #127	; 0x7f
 8004b58:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	227f      	movs	r2, #127	; 0x7f
 8004b60:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	227f      	movs	r2, #127	; 0x7f
 8004b70:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	227f      	movs	r2, #127	; 0x7f
 8004b78:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	22da      	movs	r2, #218	; 0xda
 8004b88:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	22bf      	movs	r2, #191	; 0xbf
 8004b90:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	22a5      	movs	r2, #165	; 0xa5
 8004b98:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	22fd      	movs	r2, #253	; 0xfd
 8004ba0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2259      	movs	r2, #89	; 0x59
 8004ba8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2270      	movs	r2, #112	; 0x70
 8004bc0:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2270      	movs	r2, #112	; 0x70
 8004bc8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2270      	movs	r2, #112	; 0x70
 8004bd0:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2270      	movs	r2, #112	; 0x70
 8004bd8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2270      	movs	r2, #112	; 0x70
 8004be0:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2270      	movs	r2, #112	; 0x70
 8004be8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2294      	movs	r2, #148	; 0x94
 8004bf8:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	22b6      	movs	r2, #182	; 0xb6
 8004c00:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	22ff      	movs	r2, #255	; 0xff
 8004c10:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	22b6      	movs	r2, #182	; 0xb6
 8004c18:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2294      	movs	r2, #148	; 0x94
 8004c20:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2204      	movs	r2, #4
 8004c30:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2206      	movs	r2, #6
 8004c38:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	227f      	movs	r2, #127	; 0x7f
 8004c40:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	227f      	movs	r2, #127	; 0x7f
 8004c48:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2206      	movs	r2, #6
 8004c50:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2204      	movs	r2, #4
 8004c58:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2230      	movs	r2, #48	; 0x30
 8004c68:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	227f      	movs	r2, #127	; 0x7f
 8004c70:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	227f      	movs	r2, #127	; 0x7f
 8004c78:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2230      	movs	r2, #48	; 0x30
 8004c80:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2210      	movs	r2, #16
 8004c88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2208      	movs	r2, #8
 8004c90:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2208      	movs	r2, #8
 8004c98:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	222a      	movs	r2, #42	; 0x2a
 8004ca8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	223e      	movs	r2, #62	; 0x3e
 8004cb0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	221c      	movs	r2, #28
 8004cb8:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	221c      	movs	r2, #28
 8004cd0:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	223e      	movs	r2, #62	; 0x3e
 8004cd8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	222a      	movs	r2, #42	; 0x2a
 8004ce0:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2208      	movs	r2, #8
 8004cf0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	223c      	movs	r2, #60	; 0x3c
 8004d00:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	223c      	movs	r2, #60	; 0x3c
 8004d08:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2208      	movs	r2, #8
 8004d38:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	221c      	movs	r2, #28
 8004d40:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	223e      	movs	r2, #62	; 0x3e
 8004d48:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2208      	movs	r2, #8
 8004d58:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223e      	movs	r2, #62	; 0x3e
 8004d60:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	221c      	movs	r2, #28
 8004d68:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2208      	movs	r2, #8
 8004d70:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2230      	movs	r2, #48	; 0x30
 8004d78:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2238      	movs	r2, #56	; 0x38
 8004d80:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	223c      	movs	r2, #60	; 0x3c
 8004d88:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	223e      	movs	r2, #62	; 0x3e
 8004d90:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	223e      	movs	r2, #62	; 0x3e
 8004d98:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	223c      	movs	r2, #60	; 0x3c
 8004da0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2238      	movs	r2, #56	; 0x38
 8004da8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2230      	movs	r2, #48	; 0x30
 8004db0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2206      	movs	r2, #6
 8004db8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	220e      	movs	r2, #14
 8004dc0:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	221e      	movs	r2, #30
 8004dc8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	223e      	movs	r2, #62	; 0x3e
 8004dd0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	223e      	movs	r2, #62	; 0x3e
 8004dd8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	221e      	movs	r2, #30
 8004de0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	220e      	movs	r2, #14
 8004de8:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2206      	movs	r2, #6
 8004df0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2206      	movs	r2, #6
 8004df8:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	225f      	movs	r2, #95	; 0x5f
 8004e00:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	225f      	movs	r2, #95	; 0x5f
 8004e08:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2206      	movs	r2, #6
 8004e10:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2207      	movs	r2, #7
 8004e18:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2207      	movs	r2, #7
 8004e20:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2207      	movs	r2, #7
 8004e28:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2207      	movs	r2, #7
 8004e30:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2214      	movs	r2, #20
 8004e38:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	227f      	movs	r2, #127	; 0x7f
 8004e40:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	227f      	movs	r2, #127	; 0x7f
 8004e48:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2214      	movs	r2, #20
 8004e50:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	227f      	movs	r2, #127	; 0x7f
 8004e58:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	227f      	movs	r2, #127	; 0x7f
 8004e60:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2214      	movs	r2, #20
 8004e68:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	222e      	movs	r2, #46	; 0x2e
 8004e78:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	226b      	movs	r2, #107	; 0x6b
 8004e80:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	226b      	movs	r2, #107	; 0x6b
 8004e88:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	223a      	movs	r2, #58	; 0x3a
 8004e90:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2212      	movs	r2, #18
 8004e98:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2246      	movs	r2, #70	; 0x46
 8004ea0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2266      	movs	r2, #102	; 0x66
 8004ea8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2230      	movs	r2, #48	; 0x30
 8004eb0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2218      	movs	r2, #24
 8004eb8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	220c      	movs	r2, #12
 8004ec0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2266      	movs	r2, #102	; 0x66
 8004ec8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2262      	movs	r2, #98	; 0x62
 8004ed0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2230      	movs	r2, #48	; 0x30
 8004ed8:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	227a      	movs	r2, #122	; 0x7a
 8004ee0:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	224f      	movs	r2, #79	; 0x4f
 8004ee8:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	225d      	movs	r2, #93	; 0x5d
 8004ef0:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2237      	movs	r2, #55	; 0x37
 8004ef8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	227a      	movs	r2, #122	; 0x7a
 8004f00:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2248      	movs	r2, #72	; 0x48
 8004f08:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2204      	movs	r2, #4
 8004f10:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2207      	movs	r2, #7
 8004f18:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	221c      	movs	r2, #28
 8004f28:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	223e      	movs	r2, #62	; 0x3e
 8004f30:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2263      	movs	r2, #99	; 0x63
 8004f38:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2241      	movs	r2, #65	; 0x41
 8004f40:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2241      	movs	r2, #65	; 0x41
 8004f48:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2263      	movs	r2, #99	; 0x63
 8004f50:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	223e      	movs	r2, #62	; 0x3e
 8004f58:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	221c      	movs	r2, #28
 8004f60:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2208      	movs	r2, #8
 8004f68:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	222a      	movs	r2, #42	; 0x2a
 8004f70:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	223e      	movs	r2, #62	; 0x3e
 8004f78:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	221c      	movs	r2, #28
 8004f80:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	221c      	movs	r2, #28
 8004f88:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	223e      	movs	r2, #62	; 0x3e
 8004f90:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	222a      	movs	r2, #42	; 0x2a
 8004f98:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2208      	movs	r2, #8
 8004fb0:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	223e      	movs	r2, #62	; 0x3e
 8004fb8:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	223e      	movs	r2, #62	; 0x3e
 8004fc0:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	22e0      	movs	r2, #224	; 0xe0
 8004fe0:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2260      	movs	r2, #96	; 0x60
 8004fe8:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2208      	movs	r2, #8
 8004ff0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2208      	movs	r2, #8
 8005000:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2208      	movs	r2, #8
 8005008:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2208      	movs	r2, #8
 8005010:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2208      	movs	r2, #8
 8005018:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2260      	movs	r2, #96	; 0x60
 8005020:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2260      	movs	r2, #96	; 0x60
 8005028:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2260      	movs	r2, #96	; 0x60
 8005030:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2230      	movs	r2, #48	; 0x30
 8005038:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2218      	movs	r2, #24
 8005040:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	220c      	movs	r2, #12
 8005048:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2206      	movs	r2, #6
 8005050:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2203      	movs	r2, #3
 8005058:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	223e      	movs	r2, #62	; 0x3e
 8005068:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	227f      	movs	r2, #127	; 0x7f
 8005070:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2271      	movs	r2, #113	; 0x71
 8005078:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2259      	movs	r2, #89	; 0x59
 8005080:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	224d      	movs	r2, #77	; 0x4d
 8005088:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	227f      	movs	r2, #127	; 0x7f
 8005090:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	223e      	movs	r2, #62	; 0x3e
 8005098:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2240      	movs	r2, #64	; 0x40
 80050a0:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2242      	movs	r2, #66	; 0x42
 80050a8:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	227f      	movs	r2, #127	; 0x7f
 80050b0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	227f      	movs	r2, #127	; 0x7f
 80050b8:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2262      	movs	r2, #98	; 0x62
 80050d0:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2273      	movs	r2, #115	; 0x73
 80050d8:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2259      	movs	r2, #89	; 0x59
 80050e0:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2249      	movs	r2, #73	; 0x49
 80050e8:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	226f      	movs	r2, #111	; 0x6f
 80050f0:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2266      	movs	r2, #102	; 0x66
 80050f8:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2222      	movs	r2, #34	; 0x22
 8005100:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2263      	movs	r2, #99	; 0x63
 8005108:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2249      	movs	r2, #73	; 0x49
 8005110:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2249      	movs	r2, #73	; 0x49
 8005118:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	227f      	movs	r2, #127	; 0x7f
 8005120:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2236      	movs	r2, #54	; 0x36
 8005128:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2218      	movs	r2, #24
 8005130:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	221c      	movs	r2, #28
 8005138:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2216      	movs	r2, #22
 8005140:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2253      	movs	r2, #83	; 0x53
 8005148:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	227f      	movs	r2, #127	; 0x7f
 8005150:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	227f      	movs	r2, #127	; 0x7f
 8005158:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2250      	movs	r2, #80	; 0x50
 8005160:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2227      	movs	r2, #39	; 0x27
 8005168:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2267      	movs	r2, #103	; 0x67
 8005170:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2245      	movs	r2, #69	; 0x45
 8005178:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2245      	movs	r2, #69	; 0x45
 8005180:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	227d      	movs	r2, #125	; 0x7d
 8005188:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2239      	movs	r2, #57	; 0x39
 8005190:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	223c      	movs	r2, #60	; 0x3c
 8005198:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	227e      	movs	r2, #126	; 0x7e
 80051a0:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	224b      	movs	r2, #75	; 0x4b
 80051a8:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2249      	movs	r2, #73	; 0x49
 80051b0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2279      	movs	r2, #121	; 0x79
 80051b8:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2230      	movs	r2, #48	; 0x30
 80051c0:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2203      	movs	r2, #3
 80051c8:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2203      	movs	r2, #3
 80051d0:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2271      	movs	r2, #113	; 0x71
 80051d8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2279      	movs	r2, #121	; 0x79
 80051e0:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	220f      	movs	r2, #15
 80051e8:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2207      	movs	r2, #7
 80051f0:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2236      	movs	r2, #54	; 0x36
 80051f8:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	227f      	movs	r2, #127	; 0x7f
 8005200:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2249      	movs	r2, #73	; 0x49
 8005208:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2249      	movs	r2, #73	; 0x49
 8005210:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	227f      	movs	r2, #127	; 0x7f
 8005218:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2236      	movs	r2, #54	; 0x36
 8005220:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2206      	movs	r2, #6
 8005228:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	224f      	movs	r2, #79	; 0x4f
 8005230:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2249      	movs	r2, #73	; 0x49
 8005238:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2269      	movs	r2, #105	; 0x69
 8005240:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	223f      	movs	r2, #63	; 0x3f
 8005248:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	221e      	movs	r2, #30
 8005250:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2266      	movs	r2, #102	; 0x66
 8005258:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2266      	movs	r2, #102	; 0x66
 8005260:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	22e6      	movs	r2, #230	; 0xe6
 8005270:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2266      	movs	r2, #102	; 0x66
 8005278:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2208      	movs	r2, #8
 8005280:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	221c      	movs	r2, #28
 8005288:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2236      	movs	r2, #54	; 0x36
 8005290:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2263      	movs	r2, #99	; 0x63
 8005298:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2241      	movs	r2, #65	; 0x41
 80052a0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2224      	movs	r2, #36	; 0x24
 80052a8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	; 0x24
 80052b8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	; 0x24
 80052c0:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2241      	movs	r2, #65	; 0x41
 80052d8:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2263      	movs	r2, #99	; 0x63
 80052e0:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2236      	movs	r2, #54	; 0x36
 80052e8:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	221c      	movs	r2, #28
 80052f0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2208      	movs	r2, #8
 80052f8:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2203      	movs	r2, #3
 8005308:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2251      	movs	r2, #81	; 0x51
 8005310:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2259      	movs	r2, #89	; 0x59
 8005318:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	220f      	movs	r2, #15
 8005320:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2206      	movs	r2, #6
 8005328:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	223e      	movs	r2, #62	; 0x3e
 8005330:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	227f      	movs	r2, #127	; 0x7f
 8005338:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2241      	movs	r2, #65	; 0x41
 8005340:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	225d      	movs	r2, #93	; 0x5d
 8005348:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	225d      	movs	r2, #93	; 0x5d
 8005350:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	221f      	movs	r2, #31
 8005358:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	221e      	movs	r2, #30
 8005360:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	227c      	movs	r2, #124	; 0x7c
 8005368:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	227e      	movs	r2, #126	; 0x7e
 8005370:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2213      	movs	r2, #19
 8005378:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2213      	movs	r2, #19
 8005380:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	227e      	movs	r2, #126	; 0x7e
 8005388:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	227c      	movs	r2, #124	; 0x7c
 8005390:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2241      	movs	r2, #65	; 0x41
 8005398:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	227f      	movs	r2, #127	; 0x7f
 80053a0:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	227f      	movs	r2, #127	; 0x7f
 80053a8:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2249      	movs	r2, #73	; 0x49
 80053b0:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2249      	movs	r2, #73	; 0x49
 80053b8:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	227f      	movs	r2, #127	; 0x7f
 80053c0:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2236      	movs	r2, #54	; 0x36
 80053c8:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	221c      	movs	r2, #28
 80053d0:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	223e      	movs	r2, #62	; 0x3e
 80053d8:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2263      	movs	r2, #99	; 0x63
 80053e0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2241      	movs	r2, #65	; 0x41
 80053e8:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2241      	movs	r2, #65	; 0x41
 80053f0:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2263      	movs	r2, #99	; 0x63
 80053f8:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2222      	movs	r2, #34	; 0x22
 8005400:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2241      	movs	r2, #65	; 0x41
 8005408:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	227f      	movs	r2, #127	; 0x7f
 8005410:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	227f      	movs	r2, #127	; 0x7f
 8005418:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2241      	movs	r2, #65	; 0x41
 8005420:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2263      	movs	r2, #99	; 0x63
 8005428:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	223e      	movs	r2, #62	; 0x3e
 8005430:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	221c      	movs	r2, #28
 8005438:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2241      	movs	r2, #65	; 0x41
 8005440:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	227f      	movs	r2, #127	; 0x7f
 8005448:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	227f      	movs	r2, #127	; 0x7f
 8005450:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2249      	movs	r2, #73	; 0x49
 8005458:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	225d      	movs	r2, #93	; 0x5d
 8005460:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2241      	movs	r2, #65	; 0x41
 8005468:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2263      	movs	r2, #99	; 0x63
 8005470:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2241      	movs	r2, #65	; 0x41
 8005478:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	227f      	movs	r2, #127	; 0x7f
 8005480:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	227f      	movs	r2, #127	; 0x7f
 8005488:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2249      	movs	r2, #73	; 0x49
 8005490:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	221d      	movs	r2, #29
 8005498:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2203      	movs	r2, #3
 80054a8:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	221c      	movs	r2, #28
 80054b0:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	223e      	movs	r2, #62	; 0x3e
 80054b8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2263      	movs	r2, #99	; 0x63
 80054c0:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2241      	movs	r2, #65	; 0x41
 80054c8:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2251      	movs	r2, #81	; 0x51
 80054d0:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2273      	movs	r2, #115	; 0x73
 80054d8:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2272      	movs	r2, #114	; 0x72
 80054e0:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	227f      	movs	r2, #127	; 0x7f
 80054e8:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	227f      	movs	r2, #127	; 0x7f
 80054f0:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2208      	movs	r2, #8
 80054f8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2208      	movs	r2, #8
 8005500:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	227f      	movs	r2, #127	; 0x7f
 8005508:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	227f      	movs	r2, #127	; 0x7f
 8005510:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2241      	movs	r2, #65	; 0x41
 8005518:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	227f      	movs	r2, #127	; 0x7f
 8005520:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	227f      	movs	r2, #127	; 0x7f
 8005528:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2241      	movs	r2, #65	; 0x41
 8005530:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2230      	movs	r2, #48	; 0x30
 8005538:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2270      	movs	r2, #112	; 0x70
 8005540:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2241      	movs	r2, #65	; 0x41
 8005550:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	227f      	movs	r2, #127	; 0x7f
 8005558:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	223f      	movs	r2, #63	; 0x3f
 8005560:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2241      	movs	r2, #65	; 0x41
 8005570:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	227f      	movs	r2, #127	; 0x7f
 8005578:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	227f      	movs	r2, #127	; 0x7f
 8005580:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2208      	movs	r2, #8
 8005588:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	221c      	movs	r2, #28
 8005590:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2277      	movs	r2, #119	; 0x77
 8005598:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2263      	movs	r2, #99	; 0x63
 80055a0:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2241      	movs	r2, #65	; 0x41
 80055a8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	227f      	movs	r2, #127	; 0x7f
 80055b0:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	227f      	movs	r2, #127	; 0x7f
 80055b8:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2241      	movs	r2, #65	; 0x41
 80055c0:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	; 0x40
 80055c8:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2260      	movs	r2, #96	; 0x60
 80055d0:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2270      	movs	r2, #112	; 0x70
 80055d8:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	227f      	movs	r2, #127	; 0x7f
 80055e0:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	227f      	movs	r2, #127	; 0x7f
 80055e8:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	220e      	movs	r2, #14
 80055f0:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	221c      	movs	r2, #28
 80055f8:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	220e      	movs	r2, #14
 8005600:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	227f      	movs	r2, #127	; 0x7f
 8005608:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	227f      	movs	r2, #127	; 0x7f
 8005610:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	227f      	movs	r2, #127	; 0x7f
 8005618:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	227f      	movs	r2, #127	; 0x7f
 8005620:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2206      	movs	r2, #6
 8005628:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	220c      	movs	r2, #12
 8005630:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2218      	movs	r2, #24
 8005638:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	227f      	movs	r2, #127	; 0x7f
 8005640:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	227f      	movs	r2, #127	; 0x7f
 8005648:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	221c      	movs	r2, #28
 8005650:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	223e      	movs	r2, #62	; 0x3e
 8005658:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2263      	movs	r2, #99	; 0x63
 8005660:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2241      	movs	r2, #65	; 0x41
 8005668:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2263      	movs	r2, #99	; 0x63
 8005670:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	223e      	movs	r2, #62	; 0x3e
 8005678:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	221c      	movs	r2, #28
 8005680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2241      	movs	r2, #65	; 0x41
 8005688:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	227f      	movs	r2, #127	; 0x7f
 8005690:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	227f      	movs	r2, #127	; 0x7f
 8005698:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2249      	movs	r2, #73	; 0x49
 80056a0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2209      	movs	r2, #9
 80056a8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	220f      	movs	r2, #15
 80056b0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2206      	movs	r2, #6
 80056b8:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	221e      	movs	r2, #30
 80056c0:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	223f      	movs	r2, #63	; 0x3f
 80056c8:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2221      	movs	r2, #33	; 0x21
 80056d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2271      	movs	r2, #113	; 0x71
 80056d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	227f      	movs	r2, #127	; 0x7f
 80056e0:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	225e      	movs	r2, #94	; 0x5e
 80056e8:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2241      	movs	r2, #65	; 0x41
 80056f0:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	227f      	movs	r2, #127	; 0x7f
 80056f8:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	227f      	movs	r2, #127	; 0x7f
 8005700:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2209      	movs	r2, #9
 8005708:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2219      	movs	r2, #25
 8005710:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	227f      	movs	r2, #127	; 0x7f
 8005718:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2266      	movs	r2, #102	; 0x66
 8005720:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2226      	movs	r2, #38	; 0x26
 8005728:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	226f      	movs	r2, #111	; 0x6f
 8005730:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	224d      	movs	r2, #77	; 0x4d
 8005738:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2259      	movs	r2, #89	; 0x59
 8005740:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2273      	movs	r2, #115	; 0x73
 8005748:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2232      	movs	r2, #50	; 0x32
 8005750:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2203      	movs	r2, #3
 8005758:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2241      	movs	r2, #65	; 0x41
 8005760:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	227f      	movs	r2, #127	; 0x7f
 8005768:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	227f      	movs	r2, #127	; 0x7f
 8005770:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2241      	movs	r2, #65	; 0x41
 8005778:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2203      	movs	r2, #3
 8005780:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	227f      	movs	r2, #127	; 0x7f
 8005788:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	227f      	movs	r2, #127	; 0x7f
 8005790:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	227f      	movs	r2, #127	; 0x7f
 80057a8:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	227f      	movs	r2, #127	; 0x7f
 80057b0:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	221f      	movs	r2, #31
 80057b8:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	223f      	movs	r2, #63	; 0x3f
 80057c0:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2260      	movs	r2, #96	; 0x60
 80057c8:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2260      	movs	r2, #96	; 0x60
 80057d0:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	223f      	movs	r2, #63	; 0x3f
 80057d8:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	221f      	movs	r2, #31
 80057e0:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	227f      	movs	r2, #127	; 0x7f
 80057e8:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	227f      	movs	r2, #127	; 0x7f
 80057f0:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2230      	movs	r2, #48	; 0x30
 80057f8:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2218      	movs	r2, #24
 8005800:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2230      	movs	r2, #48	; 0x30
 8005808:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	227f      	movs	r2, #127	; 0x7f
 8005810:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	227f      	movs	r2, #127	; 0x7f
 8005818:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2243      	movs	r2, #67	; 0x43
 8005820:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2267      	movs	r2, #103	; 0x67
 8005828:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	223c      	movs	r2, #60	; 0x3c
 8005830:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2218      	movs	r2, #24
 8005838:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	223c      	movs	r2, #60	; 0x3c
 8005840:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2267      	movs	r2, #103	; 0x67
 8005848:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2243      	movs	r2, #67	; 0x43
 8005850:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2207      	movs	r2, #7
 8005858:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	224f      	movs	r2, #79	; 0x4f
 8005860:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2278      	movs	r2, #120	; 0x78
 8005868:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2278      	movs	r2, #120	; 0x78
 8005870:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	224f      	movs	r2, #79	; 0x4f
 8005878:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2207      	movs	r2, #7
 8005880:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2247      	movs	r2, #71	; 0x47
 8005888:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2263      	movs	r2, #99	; 0x63
 8005890:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2271      	movs	r2, #113	; 0x71
 8005898:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2259      	movs	r2, #89	; 0x59
 80058a0:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	224d      	movs	r2, #77	; 0x4d
 80058a8:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2267      	movs	r2, #103	; 0x67
 80058b0:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2273      	movs	r2, #115	; 0x73
 80058b8:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	227f      	movs	r2, #127	; 0x7f
 80058c0:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	227f      	movs	r2, #127	; 0x7f
 80058c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2241      	movs	r2, #65	; 0x41
 80058d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2241      	movs	r2, #65	; 0x41
 80058d8:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2203      	movs	r2, #3
 80058e8:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2206      	movs	r2, #6
 80058f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	220c      	movs	r2, #12
 80058f8:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2218      	movs	r2, #24
 8005900:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2230      	movs	r2, #48	; 0x30
 8005908:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2260      	movs	r2, #96	; 0x60
 8005910:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2241      	movs	r2, #65	; 0x41
 8005918:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2241      	movs	r2, #65	; 0x41
 8005920:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	227f      	movs	r2, #127	; 0x7f
 8005928:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	227f      	movs	r2, #127	; 0x7f
 8005930:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2208      	movs	r2, #8
 8005938:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	220c      	movs	r2, #12
 8005940:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2206      	movs	r2, #6
 8005948:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2203      	movs	r2, #3
 8005950:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2206      	movs	r2, #6
 8005958:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	220c      	movs	r2, #12
 8005960:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2208      	movs	r2, #8
 8005968:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2280      	movs	r2, #128	; 0x80
 80059a8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2203      	movs	r2, #3
 80059b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2207      	movs	r2, #7
 80059b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2204      	movs	r2, #4
 80059c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2274      	movs	r2, #116	; 0x74
 80059d0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2254      	movs	r2, #84	; 0x54
 80059d8:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2254      	movs	r2, #84	; 0x54
 80059e0:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223c      	movs	r2, #60	; 0x3c
 80059e8:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2278      	movs	r2, #120	; 0x78
 80059f0:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2240      	movs	r2, #64	; 0x40
 80059f8:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2241      	movs	r2, #65	; 0x41
 8005a00:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	227f      	movs	r2, #127	; 0x7f
 8005a08:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	223f      	movs	r2, #63	; 0x3f
 8005a10:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2248      	movs	r2, #72	; 0x48
 8005a18:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2248      	movs	r2, #72	; 0x48
 8005a20:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2278      	movs	r2, #120	; 0x78
 8005a28:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2230      	movs	r2, #48	; 0x30
 8005a30:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2238      	movs	r2, #56	; 0x38
 8005a38:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	227c      	movs	r2, #124	; 0x7c
 8005a40:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2244      	movs	r2, #68	; 0x44
 8005a48:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2244      	movs	r2, #68	; 0x44
 8005a50:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	226c      	movs	r2, #108	; 0x6c
 8005a58:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2228      	movs	r2, #40	; 0x28
 8005a60:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2230      	movs	r2, #48	; 0x30
 8005a68:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2278      	movs	r2, #120	; 0x78
 8005a70:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2248      	movs	r2, #72	; 0x48
 8005a78:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2249      	movs	r2, #73	; 0x49
 8005a80:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	223f      	movs	r2, #63	; 0x3f
 8005a88:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	227f      	movs	r2, #127	; 0x7f
 8005a90:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2240      	movs	r2, #64	; 0x40
 8005a98:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2238      	movs	r2, #56	; 0x38
 8005aa0:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	227c      	movs	r2, #124	; 0x7c
 8005aa8:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2254      	movs	r2, #84	; 0x54
 8005ab0:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2254      	movs	r2, #84	; 0x54
 8005ab8:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	225c      	movs	r2, #92	; 0x5c
 8005ac0:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2218      	movs	r2, #24
 8005ac8:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2248      	movs	r2, #72	; 0x48
 8005ad0:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	227e      	movs	r2, #126	; 0x7e
 8005ad8:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	227f      	movs	r2, #127	; 0x7f
 8005ae0:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2249      	movs	r2, #73	; 0x49
 8005ae8:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2203      	movs	r2, #3
 8005af0:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2298      	movs	r2, #152	; 0x98
 8005b00:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	22bc      	movs	r2, #188	; 0xbc
 8005b08:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	22a4      	movs	r2, #164	; 0xa4
 8005b10:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	22a4      	movs	r2, #164	; 0xa4
 8005b18:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	22f8      	movs	r2, #248	; 0xf8
 8005b20:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	227c      	movs	r2, #124	; 0x7c
 8005b28:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2241      	movs	r2, #65	; 0x41
 8005b38:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	227f      	movs	r2, #127	; 0x7f
 8005b40:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	227f      	movs	r2, #127	; 0x7f
 8005b48:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2204      	movs	r2, #4
 8005b58:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	227c      	movs	r2, #124	; 0x7c
 8005b60:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2278      	movs	r2, #120	; 0x78
 8005b68:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2244      	movs	r2, #68	; 0x44
 8005b70:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	227d      	movs	r2, #125	; 0x7d
 8005b78:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	227d      	movs	r2, #125	; 0x7d
 8005b80:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2240      	movs	r2, #64	; 0x40
 8005b88:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2260      	movs	r2, #96	; 0x60
 8005b90:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	22e0      	movs	r2, #224	; 0xe0
 8005b98:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2280      	movs	r2, #128	; 0x80
 8005ba8:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	22fd      	movs	r2, #253	; 0xfd
 8005bb0:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	227d      	movs	r2, #125	; 0x7d
 8005bb8:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2241      	movs	r2, #65	; 0x41
 8005bc0:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	227f      	movs	r2, #127	; 0x7f
 8005bc8:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	227f      	movs	r2, #127	; 0x7f
 8005bd0:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2238      	movs	r2, #56	; 0x38
 8005be0:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	226c      	movs	r2, #108	; 0x6c
 8005be8:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2244      	movs	r2, #68	; 0x44
 8005bf0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2241      	movs	r2, #65	; 0x41
 8005bf8:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	227f      	movs	r2, #127	; 0x7f
 8005c00:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	227f      	movs	r2, #127	; 0x7f
 8005c08:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	227c      	movs	r2, #124	; 0x7c
 8005c18:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	227c      	movs	r2, #124	; 0x7c
 8005c20:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2218      	movs	r2, #24
 8005c28:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2238      	movs	r2, #56	; 0x38
 8005c30:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	221c      	movs	r2, #28
 8005c38:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	227c      	movs	r2, #124	; 0x7c
 8005c40:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2278      	movs	r2, #120	; 0x78
 8005c48:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	227c      	movs	r2, #124	; 0x7c
 8005c50:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	227c      	movs	r2, #124	; 0x7c
 8005c58:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2204      	movs	r2, #4
 8005c68:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	227c      	movs	r2, #124	; 0x7c
 8005c70:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2278      	movs	r2, #120	; 0x78
 8005c78:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2238      	movs	r2, #56	; 0x38
 8005c80:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	227c      	movs	r2, #124	; 0x7c
 8005c88:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2244      	movs	r2, #68	; 0x44
 8005c90:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2244      	movs	r2, #68	; 0x44
 8005c98:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	227c      	movs	r2, #124	; 0x7c
 8005ca0:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2238      	movs	r2, #56	; 0x38
 8005ca8:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2284      	movs	r2, #132	; 0x84
 8005cb0:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	22fc      	movs	r2, #252	; 0xfc
 8005cb8:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	22f8      	movs	r2, #248	; 0xf8
 8005cc0:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	22a4      	movs	r2, #164	; 0xa4
 8005cc8:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	; 0x24
 8005cd0:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	223c      	movs	r2, #60	; 0x3c
 8005cd8:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2218      	movs	r2, #24
 8005ce0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2218      	movs	r2, #24
 8005ce8:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	223c      	movs	r2, #60	; 0x3c
 8005cf0:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	22a4      	movs	r2, #164	; 0xa4
 8005d00:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	22f8      	movs	r2, #248	; 0xf8
 8005d08:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	22fc      	movs	r2, #252	; 0xfc
 8005d10:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2284      	movs	r2, #132	; 0x84
 8005d18:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2244      	movs	r2, #68	; 0x44
 8005d20:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	227c      	movs	r2, #124	; 0x7c
 8005d28:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2278      	movs	r2, #120	; 0x78
 8005d30:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	224c      	movs	r2, #76	; 0x4c
 8005d38:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	221c      	movs	r2, #28
 8005d48:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2218      	movs	r2, #24
 8005d50:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2248      	movs	r2, #72	; 0x48
 8005d58:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	225c      	movs	r2, #92	; 0x5c
 8005d60:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2254      	movs	r2, #84	; 0x54
 8005d68:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2254      	movs	r2, #84	; 0x54
 8005d70:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2274      	movs	r2, #116	; 0x74
 8005d78:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2224      	movs	r2, #36	; 0x24
 8005d80:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2204      	movs	r2, #4
 8005d88:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	223e      	movs	r2, #62	; 0x3e
 8005d90:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	227f      	movs	r2, #127	; 0x7f
 8005d98:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2244      	movs	r2, #68	; 0x44
 8005da0:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	; 0x24
 8005da8:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	223c      	movs	r2, #60	; 0x3c
 8005db0:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	227c      	movs	r2, #124	; 0x7c
 8005db8:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2240      	movs	r2, #64	; 0x40
 8005dc0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2240      	movs	r2, #64	; 0x40
 8005dc8:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	223c      	movs	r2, #60	; 0x3c
 8005dd0:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	227c      	movs	r2, #124	; 0x7c
 8005dd8:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2240      	movs	r2, #64	; 0x40
 8005de0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	221c      	movs	r2, #28
 8005de8:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	223c      	movs	r2, #60	; 0x3c
 8005df0:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2260      	movs	r2, #96	; 0x60
 8005df8:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2260      	movs	r2, #96	; 0x60
 8005e00:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	223c      	movs	r2, #60	; 0x3c
 8005e08:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	221c      	movs	r2, #28
 8005e10:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	223c      	movs	r2, #60	; 0x3c
 8005e18:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	227c      	movs	r2, #124	; 0x7c
 8005e20:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2270      	movs	r2, #112	; 0x70
 8005e28:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2238      	movs	r2, #56	; 0x38
 8005e30:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2270      	movs	r2, #112	; 0x70
 8005e38:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	227c      	movs	r2, #124	; 0x7c
 8005e40:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	223c      	movs	r2, #60	; 0x3c
 8005e48:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2244      	movs	r2, #68	; 0x44
 8005e50:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	226c      	movs	r2, #108	; 0x6c
 8005e58:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2238      	movs	r2, #56	; 0x38
 8005e60:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2210      	movs	r2, #16
 8005e68:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2238      	movs	r2, #56	; 0x38
 8005e70:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	226c      	movs	r2, #108	; 0x6c
 8005e78:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2244      	movs	r2, #68	; 0x44
 8005e80:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	229c      	movs	r2, #156	; 0x9c
 8005e88:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	22bc      	movs	r2, #188	; 0xbc
 8005e90:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	22a0      	movs	r2, #160	; 0xa0
 8005e98:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	22a0      	movs	r2, #160	; 0xa0
 8005ea0:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	22fc      	movs	r2, #252	; 0xfc
 8005ea8:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	227c      	movs	r2, #124	; 0x7c
 8005eb0:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	224c      	movs	r2, #76	; 0x4c
 8005eb8:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2264      	movs	r2, #100	; 0x64
 8005ec0:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2274      	movs	r2, #116	; 0x74
 8005ec8:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	225c      	movs	r2, #92	; 0x5c
 8005ed0:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	224c      	movs	r2, #76	; 0x4c
 8005ed8:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2264      	movs	r2, #100	; 0x64
 8005ee0:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	223e      	movs	r2, #62	; 0x3e
 8005ef8:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2277      	movs	r2, #119	; 0x77
 8005f00:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2241      	movs	r2, #65	; 0x41
 8005f08:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2241      	movs	r2, #65	; 0x41
 8005f10:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2277      	movs	r2, #119	; 0x77
 8005f18:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2277      	movs	r2, #119	; 0x77
 8005f20:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2241      	movs	r2, #65	; 0x41
 8005f28:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2241      	movs	r2, #65	; 0x41
 8005f30:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2277      	movs	r2, #119	; 0x77
 8005f38:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	223e      	movs	r2, #62	; 0x3e
 8005f40:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2208      	movs	r2, #8
 8005f48:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2208      	movs	r2, #8
 8005f50:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2203      	movs	r2, #3
 8005f70:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2270      	movs	r2, #112	; 0x70
 8005f90:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2278      	movs	r2, #120	; 0x78
 8005f98:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	224c      	movs	r2, #76	; 0x4c
 8005fa0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2246      	movs	r2, #70	; 0x46
 8005fa8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	224c      	movs	r2, #76	; 0x4c
 8005fb0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2278      	movs	r2, #120	; 0x78
 8005fb8:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2270      	movs	r2, #112	; 0x70
 8005fc0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	220e      	movs	r2, #14
 8005fc8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	229f      	movs	r2, #159	; 0x9f
 8005fd0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2291      	movs	r2, #145	; 0x91
 8005fd8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	22b1      	movs	r2, #177	; 0xb1
 8005fe0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	22fb      	movs	r2, #251	; 0xfb
 8005fe8:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	224a      	movs	r2, #74	; 0x4a
 8005ff0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	223a      	movs	r2, #58	; 0x3a
 8005ff8:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	227a      	movs	r2, #122	; 0x7a
 8006000:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2240      	movs	r2, #64	; 0x40
 8006010:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	227a      	movs	r2, #122	; 0x7a
 8006018:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	227a      	movs	r2, #122	; 0x7a
 8006020:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2240      	movs	r2, #64	; 0x40
 8006028:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2238      	movs	r2, #56	; 0x38
 8006030:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	227c      	movs	r2, #124	; 0x7c
 8006038:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2254      	movs	r2, #84	; 0x54
 8006040:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2255      	movs	r2, #85	; 0x55
 8006048:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	225d      	movs	r2, #93	; 0x5d
 8006050:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2219      	movs	r2, #25
 8006058:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2223      	movs	r2, #35	; 0x23
 8006068:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2275      	movs	r2, #117	; 0x75
 8006070:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2255      	movs	r2, #85	; 0x55
 8006078:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2255      	movs	r2, #85	; 0x55
 8006080:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	227d      	movs	r2, #125	; 0x7d
 8006088:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	227b      	movs	r2, #123	; 0x7b
 8006090:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2242      	movs	r2, #66	; 0x42
 8006098:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2221      	movs	r2, #33	; 0x21
 80060a0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2275      	movs	r2, #117	; 0x75
 80060a8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2254      	movs	r2, #84	; 0x54
 80060b0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2254      	movs	r2, #84	; 0x54
 80060b8:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	227d      	movs	r2, #125	; 0x7d
 80060c0:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2279      	movs	r2, #121	; 0x79
 80060c8:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2240      	movs	r2, #64	; 0x40
 80060d0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2221      	movs	r2, #33	; 0x21
 80060d8:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2275      	movs	r2, #117	; 0x75
 80060e0:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2255      	movs	r2, #85	; 0x55
 80060e8:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2254      	movs	r2, #84	; 0x54
 80060f0:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	227c      	movs	r2, #124	; 0x7c
 80060f8:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2278      	movs	r2, #120	; 0x78
 8006100:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2274      	movs	r2, #116	; 0x74
 8006118:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2257      	movs	r2, #87	; 0x57
 8006120:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2257      	movs	r2, #87	; 0x57
 8006128:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	227c      	movs	r2, #124	; 0x7c
 8006130:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2278      	movs	r2, #120	; 0x78
 8006138:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2240      	movs	r2, #64	; 0x40
 8006140:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2218      	movs	r2, #24
 8006148:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	223c      	movs	r2, #60	; 0x3c
 8006150:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	22a4      	movs	r2, #164	; 0xa4
 8006158:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	22a4      	movs	r2, #164	; 0xa4
 8006160:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	22e4      	movs	r2, #228	; 0xe4
 8006168:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2240      	movs	r2, #64	; 0x40
 8006170:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	223b      	movs	r2, #59	; 0x3b
 8006180:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	227d      	movs	r2, #125	; 0x7d
 8006188:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2255      	movs	r2, #85	; 0x55
 8006190:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2255      	movs	r2, #85	; 0x55
 8006198:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	225d      	movs	r2, #93	; 0x5d
 80061a0:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	221b      	movs	r2, #27
 80061a8:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2239      	movs	r2, #57	; 0x39
 80061b8:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	227d      	movs	r2, #125	; 0x7d
 80061c0:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2254      	movs	r2, #84	; 0x54
 80061c8:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2254      	movs	r2, #84	; 0x54
 80061d0:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	225d      	movs	r2, #93	; 0x5d
 80061d8:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2219      	movs	r2, #25
 80061e0:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2239      	movs	r2, #57	; 0x39
 80061e8:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	227d      	movs	r2, #125	; 0x7d
 80061f0:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2255      	movs	r2, #85	; 0x55
 80061f8:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2254      	movs	r2, #84	; 0x54
 8006200:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	225c      	movs	r2, #92	; 0x5c
 8006208:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2218      	movs	r2, #24
 8006210:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2245      	movs	r2, #69	; 0x45
 8006220:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	227c      	movs	r2, #124	; 0x7c
 8006228:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	227c      	movs	r2, #124	; 0x7c
 8006230:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2241      	movs	r2, #65	; 0x41
 8006238:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2203      	movs	r2, #3
 8006250:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2245      	movs	r2, #69	; 0x45
 8006258:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	227d      	movs	r2, #125	; 0x7d
 8006260:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	227d      	movs	r2, #125	; 0x7d
 8006268:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2243      	movs	r2, #67	; 0x43
 8006270:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2245      	movs	r2, #69	; 0x45
 8006288:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	227d      	movs	r2, #125	; 0x7d
 8006290:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	227c      	movs	r2, #124	; 0x7c
 8006298:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2240      	movs	r2, #64	; 0x40
 80062a0:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2279      	movs	r2, #121	; 0x79
 80062a8:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	227d      	movs	r2, #125	; 0x7d
 80062b0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2216      	movs	r2, #22
 80062b8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2212      	movs	r2, #18
 80062c0:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2216      	movs	r2, #22
 80062c8:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	227d      	movs	r2, #125	; 0x7d
 80062d0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2279      	movs	r2, #121	; 0x79
 80062d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2270      	movs	r2, #112	; 0x70
 80062e0:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2278      	movs	r2, #120	; 0x78
 80062e8:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	222b      	movs	r2, #43	; 0x2b
 80062f0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	222b      	movs	r2, #43	; 0x2b
 80062f8:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2278      	movs	r2, #120	; 0x78
 8006300:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2270      	movs	r2, #112	; 0x70
 8006308:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2244      	movs	r2, #68	; 0x44
 8006310:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	227c      	movs	r2, #124	; 0x7c
 8006318:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	227c      	movs	r2, #124	; 0x7c
 8006320:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2255      	movs	r2, #85	; 0x55
 8006328:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2255      	movs	r2, #85	; 0x55
 8006330:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2245      	movs	r2, #69	; 0x45
 8006338:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2274      	movs	r2, #116	; 0x74
 8006348:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2254      	movs	r2, #84	; 0x54
 8006350:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2254      	movs	r2, #84	; 0x54
 8006358:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	227c      	movs	r2, #124	; 0x7c
 8006360:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	227c      	movs	r2, #124	; 0x7c
 8006368:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2254      	movs	r2, #84	; 0x54
 8006370:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2254      	movs	r2, #84	; 0x54
 8006378:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	227c      	movs	r2, #124	; 0x7c
 8006380:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	227e      	movs	r2, #126	; 0x7e
 8006388:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220b      	movs	r2, #11
 8006390:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2209      	movs	r2, #9
 8006398:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	227f      	movs	r2, #127	; 0x7f
 80063a0:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	227f      	movs	r2, #127	; 0x7f
 80063a8:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2249      	movs	r2, #73	; 0x49
 80063b0:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2232      	movs	r2, #50	; 0x32
 80063b8:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	227b      	movs	r2, #123	; 0x7b
 80063c0:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2249      	movs	r2, #73	; 0x49
 80063c8:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2249      	movs	r2, #73	; 0x49
 80063d0:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	227b      	movs	r2, #123	; 0x7b
 80063d8:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2232      	movs	r2, #50	; 0x32
 80063e0:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2232      	movs	r2, #50	; 0x32
 80063e8:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	227a      	movs	r2, #122	; 0x7a
 80063f0:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2248      	movs	r2, #72	; 0x48
 80063f8:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2248      	movs	r2, #72	; 0x48
 8006400:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	227a      	movs	r2, #122	; 0x7a
 8006408:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2232      	movs	r2, #50	; 0x32
 8006410:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2232      	movs	r2, #50	; 0x32
 8006418:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	227a      	movs	r2, #122	; 0x7a
 8006420:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	224a      	movs	r2, #74	; 0x4a
 8006428:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2248      	movs	r2, #72	; 0x48
 8006430:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2278      	movs	r2, #120	; 0x78
 8006438:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2230      	movs	r2, #48	; 0x30
 8006440:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	223a      	movs	r2, #58	; 0x3a
 8006448:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	227b      	movs	r2, #123	; 0x7b
 8006450:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2241      	movs	r2, #65	; 0x41
 8006458:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2241      	movs	r2, #65	; 0x41
 8006460:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	227b      	movs	r2, #123	; 0x7b
 8006468:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	227a      	movs	r2, #122	; 0x7a
 8006470:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2240      	movs	r2, #64	; 0x40
 8006478:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	223a      	movs	r2, #58	; 0x3a
 8006480:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	227a      	movs	r2, #122	; 0x7a
 8006488:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2242      	movs	r2, #66	; 0x42
 8006490:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2240      	movs	r2, #64	; 0x40
 8006498:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2278      	movs	r2, #120	; 0x78
 80064a0:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2278      	movs	r2, #120	; 0x78
 80064a8:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	229a      	movs	r2, #154	; 0x9a
 80064b8:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	22ba      	movs	r2, #186	; 0xba
 80064c0:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	22a0      	movs	r2, #160	; 0xa0
 80064c8:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	22a0      	movs	r2, #160	; 0xa0
 80064d0:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	22fa      	movs	r2, #250	; 0xfa
 80064d8:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	227a      	movs	r2, #122	; 0x7a
 80064e0:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2219      	movs	r2, #25
 80064f0:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	223c      	movs	r2, #60	; 0x3c
 80064f8:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2266      	movs	r2, #102	; 0x66
 8006500:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2266      	movs	r2, #102	; 0x66
 8006508:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	223c      	movs	r2, #60	; 0x3c
 8006510:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2219      	movs	r2, #25
 8006518:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	223d      	movs	r2, #61	; 0x3d
 8006528:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	227d      	movs	r2, #125	; 0x7d
 8006530:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	227d      	movs	r2, #125	; 0x7d
 8006548:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	223d      	movs	r2, #61	; 0x3d
 8006550:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2218      	movs	r2, #24
 8006558:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	223c      	movs	r2, #60	; 0x3c
 8006560:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	22e7      	movs	r2, #231	; 0xe7
 8006570:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	22e7      	movs	r2, #231	; 0xe7
 8006578:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2224      	movs	r2, #36	; 0x24
 8006580:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	; 0x24
 8006588:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2268      	movs	r2, #104	; 0x68
 8006590:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	227e      	movs	r2, #126	; 0x7e
 8006598:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	227f      	movs	r2, #127	; 0x7f
 80065a0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2249      	movs	r2, #73	; 0x49
 80065a8:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2243      	movs	r2, #67	; 0x43
 80065b0:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2266      	movs	r2, #102	; 0x66
 80065b8:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	222b      	movs	r2, #43	; 0x2b
 80065c8:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	222f      	movs	r2, #47	; 0x2f
 80065d0:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	22fc      	movs	r2, #252	; 0xfc
 80065d8:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	22fc      	movs	r2, #252	; 0xfc
 80065e0:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	222f      	movs	r2, #47	; 0x2f
 80065e8:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	222b      	movs	r2, #43	; 0x2b
 80065f0:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2209      	movs	r2, #9
 8006608:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2209      	movs	r2, #9
 8006610:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	222f      	movs	r2, #47	; 0x2f
 8006618:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	22f6      	movs	r2, #246	; 0xf6
 8006620:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	22f8      	movs	r2, #248	; 0xf8
 8006628:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	22a0      	movs	r2, #160	; 0xa0
 8006630:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2240      	movs	r2, #64	; 0x40
 8006638:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	22c0      	movs	r2, #192	; 0xc0
 8006640:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2288      	movs	r2, #136	; 0x88
 8006648:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	22fe      	movs	r2, #254	; 0xfe
 8006650:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	227f      	movs	r2, #127	; 0x7f
 8006658:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2209      	movs	r2, #9
 8006660:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2203      	movs	r2, #3
 8006668:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2274      	movs	r2, #116	; 0x74
 8006680:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2254      	movs	r2, #84	; 0x54
 8006688:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2255      	movs	r2, #85	; 0x55
 8006690:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	227d      	movs	r2, #125	; 0x7d
 8006698:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2279      	movs	r2, #121	; 0x79
 80066a0:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2240      	movs	r2, #64	; 0x40
 80066a8:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2244      	movs	r2, #68	; 0x44
 80066b0:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	227d      	movs	r2, #125	; 0x7d
 80066b8:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	227d      	movs	r2, #125	; 0x7d
 80066c0:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2241      	movs	r2, #65	; 0x41
 80066c8:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2230      	movs	r2, #48	; 0x30
 80066d0:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2278      	movs	r2, #120	; 0x78
 80066d8:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2248      	movs	r2, #72	; 0x48
 80066e0:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	224a      	movs	r2, #74	; 0x4a
 80066e8:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	227a      	movs	r2, #122	; 0x7a
 80066f0:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2232      	movs	r2, #50	; 0x32
 80066f8:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2238      	movs	r2, #56	; 0x38
 8006700:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2278      	movs	r2, #120	; 0x78
 8006708:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2242      	movs	r2, #66	; 0x42
 8006718:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	227a      	movs	r2, #122	; 0x7a
 8006720:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	227a      	movs	r2, #122	; 0x7a
 8006728:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	227a      	movs	r2, #122	; 0x7a
 8006738:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	227a      	movs	r2, #122	; 0x7a
 8006740:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	220a      	movs	r2, #10
 8006748:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	220a      	movs	r2, #10
 8006750:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	227a      	movs	r2, #122	; 0x7a
 8006758:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2270      	movs	r2, #112	; 0x70
 8006760:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	227d      	movs	r2, #125	; 0x7d
 8006768:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	227d      	movs	r2, #125	; 0x7d
 8006770:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2219      	movs	r2, #25
 8006778:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2231      	movs	r2, #49	; 0x31
 8006780:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	227d      	movs	r2, #125	; 0x7d
 8006788:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	227d      	movs	r2, #125	; 0x7d
 8006790:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2226      	movs	r2, #38	; 0x26
 8006798:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	222f      	movs	r2, #47	; 0x2f
 80067a0:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2229      	movs	r2, #41	; 0x29
 80067a8:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	222f      	movs	r2, #47	; 0x2f
 80067b0:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	222f      	movs	r2, #47	; 0x2f
 80067b8:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2228      	movs	r2, #40	; 0x28
 80067c0:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2226      	movs	r2, #38	; 0x26
 80067c8:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	222f      	movs	r2, #47	; 0x2f
 80067d0:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2229      	movs	r2, #41	; 0x29
 80067d8:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	222f      	movs	r2, #47	; 0x2f
 80067e0:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2226      	movs	r2, #38	; 0x26
 80067e8:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2230      	movs	r2, #48	; 0x30
 80067f0:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2278      	movs	r2, #120	; 0x78
 80067f8:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	224d      	movs	r2, #77	; 0x4d
 8006800:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2245      	movs	r2, #69	; 0x45
 8006808:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2260      	movs	r2, #96	; 0x60
 8006810:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2238      	movs	r2, #56	; 0x38
 8006820:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2238      	movs	r2, #56	; 0x38
 8006828:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2208      	movs	r2, #8
 8006830:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2208      	movs	r2, #8
 8006838:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2208      	movs	r2, #8
 8006840:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2208      	movs	r2, #8
 8006848:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2208      	movs	r2, #8
 8006850:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2208      	movs	r2, #8
 8006858:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2208      	movs	r2, #8
 8006860:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2208      	movs	r2, #8
 8006868:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2238      	movs	r2, #56	; 0x38
 8006870:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2238      	movs	r2, #56	; 0x38
 8006878:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	224f      	movs	r2, #79	; 0x4f
 8006880:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	226f      	movs	r2, #111	; 0x6f
 8006888:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2230      	movs	r2, #48	; 0x30
 8006890:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2218      	movs	r2, #24
 8006898:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	22cc      	movs	r2, #204	; 0xcc
 80068a0:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	22ee      	movs	r2, #238	; 0xee
 80068a8:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	22bb      	movs	r2, #187	; 0xbb
 80068b0:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2291      	movs	r2, #145	; 0x91
 80068b8:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	224f      	movs	r2, #79	; 0x4f
 80068c0:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	226f      	movs	r2, #111	; 0x6f
 80068c8:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2230      	movs	r2, #48	; 0x30
 80068d0:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2218      	movs	r2, #24
 80068d8:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	226c      	movs	r2, #108	; 0x6c
 80068e0:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2276      	movs	r2, #118	; 0x76
 80068e8:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	22fb      	movs	r2, #251	; 0xfb
 80068f0:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	22f9      	movs	r2, #249	; 0xf9
 80068f8:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	227b      	movs	r2, #123	; 0x7b
 8006900:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	227b      	movs	r2, #123	; 0x7b
 8006908:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2208      	movs	r2, #8
 8006910:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	221c      	movs	r2, #28
 8006918:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2236      	movs	r2, #54	; 0x36
 8006920:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2222      	movs	r2, #34	; 0x22
 8006928:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2208      	movs	r2, #8
 8006930:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	221c      	movs	r2, #28
 8006938:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2236      	movs	r2, #54	; 0x36
 8006940:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2222      	movs	r2, #34	; 0x22
 8006948:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2222      	movs	r2, #34	; 0x22
 8006950:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2236      	movs	r2, #54	; 0x36
 8006958:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	221c      	movs	r2, #28
 8006960:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2208      	movs	r2, #8
 8006968:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2222      	movs	r2, #34	; 0x22
 8006970:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2236      	movs	r2, #54	; 0x36
 8006978:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	221c      	movs	r2, #28
 8006980:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2208      	movs	r2, #8
 8006988:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	22aa      	movs	r2, #170	; 0xaa
 8006990:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2255      	movs	r2, #85	; 0x55
 8006998:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	22aa      	movs	r2, #170	; 0xaa
 80069a0:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2255      	movs	r2, #85	; 0x55
 80069a8:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	22aa      	movs	r2, #170	; 0xaa
 80069b0:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2255      	movs	r2, #85	; 0x55
 80069b8:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	22aa      	movs	r2, #170	; 0xaa
 80069c0:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2255      	movs	r2, #85	; 0x55
 80069c8:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22aa      	movs	r2, #170	; 0xaa
 80069d0:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2255      	movs	r2, #85	; 0x55
 80069d8:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	22aa      	movs	r2, #170	; 0xaa
 80069e0:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2255      	movs	r2, #85	; 0x55
 80069e8:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	22dd      	movs	r2, #221	; 0xdd
 80069f0:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	22aa      	movs	r2, #170	; 0xaa
 8006a00:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2277      	movs	r2, #119	; 0x77
 8006a08:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	22dd      	movs	r2, #221	; 0xdd
 8006a10:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	22aa      	movs	r2, #170	; 0xaa
 8006a18:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	22ff      	movs	r2, #255	; 0xff
 8006a20:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2277      	movs	r2, #119	; 0x77
 8006a28:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	22ff      	movs	r2, #255	; 0xff
 8006a38:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2210      	movs	r2, #16
 8006a48:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	22ff      	movs	r2, #255	; 0xff
 8006a58:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	22ff      	movs	r2, #255	; 0xff
 8006a60:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2214      	movs	r2, #20
 8006a68:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2214      	movs	r2, #20
 8006a70:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2214      	movs	r2, #20
 8006a78:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	22ff      	movs	r2, #255	; 0xff
 8006a80:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	22ff      	movs	r2, #255	; 0xff
 8006a88:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2210      	movs	r2, #16
 8006a90:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2210      	movs	r2, #16
 8006a98:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	22ff      	movs	r2, #255	; 0xff
 8006aa0:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	22ff      	movs	r2, #255	; 0xff
 8006aa8:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	22ff      	movs	r2, #255	; 0xff
 8006ab0:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	22ff      	movs	r2, #255	; 0xff
 8006ab8:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	22f0      	movs	r2, #240	; 0xf0
 8006ad0:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	22f0      	movs	r2, #240	; 0xf0
 8006ad8:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2210      	movs	r2, #16
 8006ae0:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	22f0      	movs	r2, #240	; 0xf0
 8006ae8:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	22f0      	movs	r2, #240	; 0xf0
 8006af0:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2214      	movs	r2, #20
 8006af8:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2214      	movs	r2, #20
 8006b00:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2214      	movs	r2, #20
 8006b08:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	22fc      	movs	r2, #252	; 0xfc
 8006b10:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	22fc      	movs	r2, #252	; 0xfc
 8006b18:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2214      	movs	r2, #20
 8006b20:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2214      	movs	r2, #20
 8006b28:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	22f7      	movs	r2, #247	; 0xf7
 8006b30:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	22f7      	movs	r2, #247	; 0xf7
 8006b38:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	22ff      	movs	r2, #255	; 0xff
 8006b40:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	22ff      	movs	r2, #255	; 0xff
 8006b48:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	22ff      	movs	r2, #255	; 0xff
 8006b50:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	22ff      	movs	r2, #255	; 0xff
 8006b58:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	22ff      	movs	r2, #255	; 0xff
 8006b68:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2214      	movs	r2, #20
 8006b70:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2214      	movs	r2, #20
 8006b78:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22f4      	movs	r2, #244	; 0xf4
 8006b80:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	22f4      	movs	r2, #244	; 0xf4
 8006b88:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	22fc      	movs	r2, #252	; 0xfc
 8006b98:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	22fc      	movs	r2, #252	; 0xfc
 8006ba0:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2214      	movs	r2, #20
 8006ba8:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2214      	movs	r2, #20
 8006bb0:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2217      	movs	r2, #23
 8006bb8:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2217      	movs	r2, #23
 8006bc0:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	221f      	movs	r2, #31
 8006bd0:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	221f      	movs	r2, #31
 8006bd8:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2210      	movs	r2, #16
 8006be0:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2210      	movs	r2, #16
 8006be8:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	221f      	movs	r2, #31
 8006bf0:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	221f      	movs	r2, #31
 8006bf8:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	221f      	movs	r2, #31
 8006c08:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	221f      	movs	r2, #31
 8006c10:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2214      	movs	r2, #20
 8006c18:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2214      	movs	r2, #20
 8006c20:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2214      	movs	r2, #20
 8006c28:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	221f      	movs	r2, #31
 8006c30:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	221f      	movs	r2, #31
 8006c38:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2210      	movs	r2, #16
 8006c40:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2210      	movs	r2, #16
 8006c48:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	22f0      	movs	r2, #240	; 0xf0
 8006c58:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	22f0      	movs	r2, #240	; 0xf0
 8006c60:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	221f      	movs	r2, #31
 8006c68:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	221f      	movs	r2, #31
 8006c70:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2210      	movs	r2, #16
 8006c78:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2210      	movs	r2, #16
 8006c88:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2210      	movs	r2, #16
 8006c90:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2210      	movs	r2, #16
 8006c98:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	221f      	movs	r2, #31
 8006ca8:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	221f      	movs	r2, #31
 8006cb0:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2210      	movs	r2, #16
 8006ce0:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	22f0      	movs	r2, #240	; 0xf0
 8006ce8:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	22f0      	movs	r2, #240	; 0xf0
 8006cf0:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2210      	movs	r2, #16
 8006cf8:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2210      	movs	r2, #16
 8006d08:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	22ff      	movs	r2, #255	; 0xff
 8006d10:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	22ff      	movs	r2, #255	; 0xff
 8006d18:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2210      	movs	r2, #16
 8006d28:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2210      	movs	r2, #16
 8006d38:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2210      	movs	r2, #16
 8006d48:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2210      	movs	r2, #16
 8006d50:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2210      	movs	r2, #16
 8006d58:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2210      	movs	r2, #16
 8006d68:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2210      	movs	r2, #16
 8006d70:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2210      	movs	r2, #16
 8006d78:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2210      	movs	r2, #16
 8006d80:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2210      	movs	r2, #16
 8006d88:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	22ff      	movs	r2, #255	; 0xff
 8006d90:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	22ff      	movs	r2, #255	; 0xff
 8006d98:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2210      	movs	r2, #16
 8006da8:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2210      	movs	r2, #16
 8006db0:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	22ff      	movs	r2, #255	; 0xff
 8006db8:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2214      	movs	r2, #20
 8006dc8:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2214      	movs	r2, #20
 8006dd0:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2214      	movs	r2, #20
 8006dd8:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	22ff      	movs	r2, #255	; 0xff
 8006de0:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	22ff      	movs	r2, #255	; 0xff
 8006de8:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	22ff      	movs	r2, #255	; 0xff
 8006df0:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	22ff      	movs	r2, #255	; 0xff
 8006df8:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	221f      	movs	r2, #31
 8006e08:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	221f      	movs	r2, #31
 8006e10:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2210      	movs	r2, #16
 8006e18:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2217      	movs	r2, #23
 8006e20:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2217      	movs	r2, #23
 8006e28:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2214      	movs	r2, #20
 8006e30:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	22fc      	movs	r2, #252	; 0xfc
 8006e38:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	22fc      	movs	r2, #252	; 0xfc
 8006e40:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	22f4      	movs	r2, #244	; 0xf4
 8006e50:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	22f4      	movs	r2, #244	; 0xf4
 8006e58:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2214      	movs	r2, #20
 8006e60:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2214      	movs	r2, #20
 8006e68:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2214      	movs	r2, #20
 8006e70:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2217      	movs	r2, #23
 8006e78:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2217      	movs	r2, #23
 8006e80:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2210      	movs	r2, #16
 8006e88:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2217      	movs	r2, #23
 8006e90:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2217      	movs	r2, #23
 8006e98:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2214      	movs	r2, #20
 8006ea0:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2214      	movs	r2, #20
 8006ea8:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2214      	movs	r2, #20
 8006eb0:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	22f4      	movs	r2, #244	; 0xf4
 8006eb8:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	22f4      	movs	r2, #244	; 0xf4
 8006ec0:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	22f4      	movs	r2, #244	; 0xf4
 8006ed0:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	22f4      	movs	r2, #244	; 0xf4
 8006ed8:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2214      	movs	r2, #20
 8006ee0:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	22ff      	movs	r2, #255	; 0xff
 8006ee8:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	22ff      	movs	r2, #255	; 0xff
 8006ef0:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	22f7      	movs	r2, #247	; 0xf7
 8006ef8:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	22f7      	movs	r2, #247	; 0xf7
 8006f00:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2214      	movs	r2, #20
 8006f08:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2214      	movs	r2, #20
 8006f10:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2214      	movs	r2, #20
 8006f18:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2214      	movs	r2, #20
 8006f20:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2214      	movs	r2, #20
 8006f28:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2214      	movs	r2, #20
 8006f30:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2214      	movs	r2, #20
 8006f38:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2214      	movs	r2, #20
 8006f40:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2214      	movs	r2, #20
 8006f48:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2214      	movs	r2, #20
 8006f50:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2214      	movs	r2, #20
 8006f58:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	22f7      	movs	r2, #247	; 0xf7
 8006f60:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	22f7      	movs	r2, #247	; 0xf7
 8006f68:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	22f7      	movs	r2, #247	; 0xf7
 8006f70:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	22f7      	movs	r2, #247	; 0xf7
 8006f78:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2214      	movs	r2, #20
 8006f80:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2214      	movs	r2, #20
 8006f88:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2214      	movs	r2, #20
 8006f90:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2214      	movs	r2, #20
 8006f98:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2217      	movs	r2, #23
 8006fa0:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2217      	movs	r2, #23
 8006fa8:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2214      	movs	r2, #20
 8006fb0:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2214      	movs	r2, #20
 8006fb8:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2214      	movs	r2, #20
 8006fc0:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	221f      	movs	r2, #31
 8006fd8:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	221f      	movs	r2, #31
 8006fe0:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	221f      	movs	r2, #31
 8006ff0:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	221f      	movs	r2, #31
 8006ff8:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2210      	movs	r2, #16
 8007000:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2214      	movs	r2, #20
 8007008:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2214      	movs	r2, #20
 8007010:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2214      	movs	r2, #20
 8007018:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	22f4      	movs	r2, #244	; 0xf4
 8007020:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	22f4      	movs	r2, #244	; 0xf4
 8007028:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2214      	movs	r2, #20
 8007030:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2214      	movs	r2, #20
 8007038:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2214      	movs	r2, #20
 8007040:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2210      	movs	r2, #16
 8007048:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2210      	movs	r2, #16
 8007050:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	22f0      	movs	r2, #240	; 0xf0
 8007058:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	22f0      	movs	r2, #240	; 0xf0
 8007060:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2210      	movs	r2, #16
 8007068:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	22f0      	movs	r2, #240	; 0xf0
 8007070:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	22f0      	movs	r2, #240	; 0xf0
 8007078:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2210      	movs	r2, #16
 8007080:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	221f      	movs	r2, #31
 8007088:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	221f      	movs	r2, #31
 8007090:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2210      	movs	r2, #16
 8007098:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	221f      	movs	r2, #31
 80070a0:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	221f      	movs	r2, #31
 80070a8:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2210      	movs	r2, #16
 80070b0:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	221f      	movs	r2, #31
 80070b8:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	221f      	movs	r2, #31
 80070c0:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2214      	movs	r2, #20
 80070c8:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2214      	movs	r2, #20
 80070d0:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2214      	movs	r2, #20
 80070d8:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	22fc      	movs	r2, #252	; 0xfc
 80070e0:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	22fc      	movs	r2, #252	; 0xfc
 80070e8:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2214      	movs	r2, #20
 80070f0:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2214      	movs	r2, #20
 80070f8:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2214      	movs	r2, #20
 8007100:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	22f0      	movs	r2, #240	; 0xf0
 8007108:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	22f0      	movs	r2, #240	; 0xf0
 8007110:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2210      	movs	r2, #16
 8007118:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	22f0      	movs	r2, #240	; 0xf0
 8007120:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	22f0      	movs	r2, #240	; 0xf0
 8007128:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2210      	movs	r2, #16
 8007130:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2210      	movs	r2, #16
 8007138:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2210      	movs	r2, #16
 8007140:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	22ff      	movs	r2, #255	; 0xff
 8007148:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2210      	movs	r2, #16
 8007158:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	22ff      	movs	r2, #255	; 0xff
 8007160:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2210      	movs	r2, #16
 8007170:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2214      	movs	r2, #20
 8007178:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2214      	movs	r2, #20
 8007180:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2214      	movs	r2, #20
 8007188:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	22ff      	movs	r2, #255	; 0xff
 8007190:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	22ff      	movs	r2, #255	; 0xff
 8007198:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2214      	movs	r2, #20
 80071a0:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2214      	movs	r2, #20
 80071a8:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2214      	movs	r2, #20
 80071b0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2210      	movs	r2, #16
 80071b8:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2210      	movs	r2, #16
 80071c0:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2210      	movs	r2, #16
 80071c8:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	221f      	movs	r2, #31
 80071d0:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	221f      	movs	r2, #31
 80071d8:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	22f0      	movs	r2, #240	; 0xf0
 80071e0:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	22f0      	movs	r2, #240	; 0xf0
 80071e8:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2210      	movs	r2, #16
 80071f0:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2210      	movs	r2, #16
 80071f8:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2210      	movs	r2, #16
 8007200:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	22ff      	movs	r2, #255	; 0xff
 8007208:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	22ff      	movs	r2, #255	; 0xff
 8007210:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	22ff      	movs	r2, #255	; 0xff
 8007218:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	22ff      	movs	r2, #255	; 0xff
 8007220:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	22ff      	movs	r2, #255	; 0xff
 8007230:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	22ff      	movs	r2, #255	; 0xff
 8007238:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	22ff      	movs	r2, #255	; 0xff
 8007240:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	22f0      	movs	r2, #240	; 0xf0
 8007248:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	22f0      	movs	r2, #240	; 0xf0
 8007250:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	22f0      	movs	r2, #240	; 0xf0
 8007258:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	22f0      	movs	r2, #240	; 0xf0
 8007260:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	22f0      	movs	r2, #240	; 0xf0
 8007268:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	22f0      	movs	r2, #240	; 0xf0
 8007270:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	22f0      	movs	r2, #240	; 0xf0
 8007278:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	22f0      	movs	r2, #240	; 0xf0
 8007280:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	22ff      	movs	r2, #255	; 0xff
 8007288:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	22ff      	movs	r2, #255	; 0xff
 8007298:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	22ff      	movs	r2, #255	; 0xff
 80072a0:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	22ff      	movs	r2, #255	; 0xff
 80072b0:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	22ff      	movs	r2, #255	; 0xff
 80072b8:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	22ff      	movs	r2, #255	; 0xff
 80072c0:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	220f      	movs	r2, #15
 80072c8:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	220f      	movs	r2, #15
 80072d0:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	220f      	movs	r2, #15
 80072d8:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	220f      	movs	r2, #15
 80072e0:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	220f      	movs	r2, #15
 80072e8:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	220f      	movs	r2, #15
 80072f0:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	220f      	movs	r2, #15
 80072f8:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	220f      	movs	r2, #15
 8007300:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2238      	movs	r2, #56	; 0x38
 8007308:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	227c      	movs	r2, #124	; 0x7c
 8007310:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2244      	movs	r2, #68	; 0x44
 8007318:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	226c      	movs	r2, #108	; 0x6c
 8007320:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2238      	movs	r2, #56	; 0x38
 8007328:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	226c      	movs	r2, #108	; 0x6c
 8007330:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2244      	movs	r2, #68	; 0x44
 8007338:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22fc      	movs	r2, #252	; 0xfc
 8007340:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	22fe      	movs	r2, #254	; 0xfe
 8007348:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	222a      	movs	r2, #42	; 0x2a
 8007350:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	222a      	movs	r2, #42	; 0x2a
 8007358:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	223e      	movs	r2, #62	; 0x3e
 8007360:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2214      	movs	r2, #20
 8007368:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	227e      	movs	r2, #126	; 0x7e
 8007370:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	227e      	movs	r2, #126	; 0x7e
 8007378:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2206      	movs	r2, #6
 8007390:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2206      	movs	r2, #6
 8007398:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	227e      	movs	r2, #126	; 0x7e
 80073a8:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	227e      	movs	r2, #126	; 0x7e
 80073b0:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	227e      	movs	r2, #126	; 0x7e
 80073c0:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	227e      	movs	r2, #126	; 0x7e
 80073c8:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2263      	movs	r2, #99	; 0x63
 80073d8:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2277      	movs	r2, #119	; 0x77
 80073e0:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	225d      	movs	r2, #93	; 0x5d
 80073e8:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2249      	movs	r2, #73	; 0x49
 80073f0:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2263      	movs	r2, #99	; 0x63
 80073f8:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2263      	movs	r2, #99	; 0x63
 8007400:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2238      	movs	r2, #56	; 0x38
 8007408:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	227c      	movs	r2, #124	; 0x7c
 8007410:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2244      	movs	r2, #68	; 0x44
 8007418:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	227c      	movs	r2, #124	; 0x7c
 8007420:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	223c      	movs	r2, #60	; 0x3c
 8007428:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2204      	movs	r2, #4
 8007430:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2280      	movs	r2, #128	; 0x80
 8007440:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	22fe      	movs	r2, #254	; 0xfe
 8007448:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	227e      	movs	r2, #126	; 0x7e
 8007450:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	223e      	movs	r2, #62	; 0x3e
 8007468:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	221e      	movs	r2, #30
 8007470:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2206      	movs	r2, #6
 8007480:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	227e      	movs	r2, #126	; 0x7e
 8007490:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	227c      	movs	r2, #124	; 0x7c
 8007498:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2206      	movs	r2, #6
 80074a0:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2299      	movs	r2, #153	; 0x99
 80074b0:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	22bd      	movs	r2, #189	; 0xbd
 80074b8:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	22e7      	movs	r2, #231	; 0xe7
 80074c0:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	22e7      	movs	r2, #231	; 0xe7
 80074c8:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	22bd      	movs	r2, #189	; 0xbd
 80074d0:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2299      	movs	r2, #153	; 0x99
 80074d8:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	221c      	movs	r2, #28
 80074e0:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	223e      	movs	r2, #62	; 0x3e
 80074e8:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	226b      	movs	r2, #107	; 0x6b
 80074f0:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2249      	movs	r2, #73	; 0x49
 80074f8:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	226b      	movs	r2, #107	; 0x6b
 8007500:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	223e      	movs	r2, #62	; 0x3e
 8007508:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	221c      	movs	r2, #28
 8007510:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	224c      	movs	r2, #76	; 0x4c
 8007518:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	227e      	movs	r2, #126	; 0x7e
 8007520:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2273      	movs	r2, #115	; 0x73
 8007528:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2273      	movs	r2, #115	; 0x73
 8007538:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	227e      	movs	r2, #126	; 0x7e
 8007540:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	224c      	movs	r2, #76	; 0x4c
 8007548:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2230      	movs	r2, #48	; 0x30
 8007550:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2278      	movs	r2, #120	; 0x78
 8007558:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	224a      	movs	r2, #74	; 0x4a
 8007560:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	224f      	movs	r2, #79	; 0x4f
 8007568:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	227d      	movs	r2, #125	; 0x7d
 8007570:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2239      	movs	r2, #57	; 0x39
 8007578:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2218      	movs	r2, #24
 8007580:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	223c      	movs	r2, #60	; 0x3c
 8007588:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	; 0x24
 8007590:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	223c      	movs	r2, #60	; 0x3c
 8007598:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	223c      	movs	r2, #60	; 0x3c
 80075a0:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2224      	movs	r2, #36	; 0x24
 80075a8:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	223c      	movs	r2, #60	; 0x3c
 80075b0:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2218      	movs	r2, #24
 80075b8:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2298      	movs	r2, #152	; 0x98
 80075c0:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	22fc      	movs	r2, #252	; 0xfc
 80075c8:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2264      	movs	r2, #100	; 0x64
 80075d0:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	223c      	movs	r2, #60	; 0x3c
 80075d8:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	223e      	movs	r2, #62	; 0x3e
 80075e0:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2227      	movs	r2, #39	; 0x27
 80075e8:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	223d      	movs	r2, #61	; 0x3d
 80075f0:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2218      	movs	r2, #24
 80075f8:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	221c      	movs	r2, #28
 8007600:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	223e      	movs	r2, #62	; 0x3e
 8007608:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	226b      	movs	r2, #107	; 0x6b
 8007610:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2249      	movs	r2, #73	; 0x49
 8007618:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2249      	movs	r2, #73	; 0x49
 8007620:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	227e      	movs	r2, #126	; 0x7e
 8007628:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	227f      	movs	r2, #127	; 0x7f
 8007630:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	227f      	movs	r2, #127	; 0x7f
 8007648:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	227e      	movs	r2, #126	; 0x7e
 8007650:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	222a      	movs	r2, #42	; 0x2a
 8007658:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	222a      	movs	r2, #42	; 0x2a
 8007660:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	222a      	movs	r2, #42	; 0x2a
 8007668:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	222a      	movs	r2, #42	; 0x2a
 8007670:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	222a      	movs	r2, #42	; 0x2a
 8007678:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	222a      	movs	r2, #42	; 0x2a
 8007680:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2244      	movs	r2, #68	; 0x44
 8007688:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2244      	movs	r2, #68	; 0x44
 8007690:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	225f      	movs	r2, #95	; 0x5f
 8007698:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	225f      	movs	r2, #95	; 0x5f
 80076a0:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2244      	movs	r2, #68	; 0x44
 80076a8:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2244      	movs	r2, #68	; 0x44
 80076b0:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2240      	movs	r2, #64	; 0x40
 80076b8:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2251      	movs	r2, #81	; 0x51
 80076c0:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	225b      	movs	r2, #91	; 0x5b
 80076c8:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	224e      	movs	r2, #78	; 0x4e
 80076d0:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2244      	movs	r2, #68	; 0x44
 80076d8:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2244      	movs	r2, #68	; 0x44
 80076f0:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	224e      	movs	r2, #78	; 0x4e
 80076f8:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	225b      	movs	r2, #91	; 0x5b
 8007700:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2251      	movs	r2, #81	; 0x51
 8007708:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2240      	movs	r2, #64	; 0x40
 8007710:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	22fe      	movs	r2, #254	; 0xfe
 8007718:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2207      	movs	r2, #7
 8007730:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2206      	movs	r2, #6
 8007738:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2260      	movs	r2, #96	; 0x60
 8007740:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	22e0      	movs	r2, #224	; 0xe0
 8007748:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2280      	movs	r2, #128	; 0x80
 8007750:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	22ff      	movs	r2, #255	; 0xff
 8007758:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	227f      	movs	r2, #127	; 0x7f
 8007760:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2208      	movs	r2, #8
 8007768:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2208      	movs	r2, #8
 8007770:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	226b      	movs	r2, #107	; 0x6b
 8007778:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	226b      	movs	r2, #107	; 0x6b
 8007780:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2208      	movs	r2, #8
 8007788:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2208      	movs	r2, #8
 8007790:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2224      	movs	r2, #36	; 0x24
 8007798:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2236      	movs	r2, #54	; 0x36
 80077a0:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2212      	movs	r2, #18
 80077a8:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2236      	movs	r2, #54	; 0x36
 80077b0:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2236      	movs	r2, #54	; 0x36
 80077c0:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2212      	movs	r2, #18
 80077c8:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2206      	movs	r2, #6
 80077d0:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	220f      	movs	r2, #15
 80077d8:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2209      	movs	r2, #9
 80077e0:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220f      	movs	r2, #15
 80077e8:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2206      	movs	r2, #6
 80077f0:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2218      	movs	r2, #24
 80077f8:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2218      	movs	r2, #24
 8007800:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2210      	movs	r2, #16
 8007808:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2210      	movs	r2, #16
 8007810:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2210      	movs	r2, #16
 8007818:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2230      	movs	r2, #48	; 0x30
 8007820:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2270      	movs	r2, #112	; 0x70
 8007828:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	22c0      	movs	r2, #192	; 0xc0
 8007830:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	22ff      	movs	r2, #255	; 0xff
 8007838:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	221f      	movs	r2, #31
 8007858:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	221f      	movs	r2, #31
 8007860:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	221f      	movs	r2, #31
 8007870:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	221e      	movs	r2, #30
 8007878:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2219      	movs	r2, #25
 8007880:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	221d      	movs	r2, #29
 8007888:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2217      	movs	r2, #23
 8007890:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2212      	movs	r2, #18
 8007898:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	223c      	movs	r2, #60	; 0x3c
 80078a0:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	223c      	movs	r2, #60	; 0x3c
 80078a8:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	223c      	movs	r2, #60	; 0x3c
 80078b0:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	223c      	movs	r2, #60	; 0x3c
 80078b8:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f603 0326 	addw	r3, r3, #2086	; 0x826
 80078c2:	f240 12db 	movw	r2, #475	; 0x1db
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f009 fb5f 	bl	8010f8c <memset>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	225f      	movs	r2, #95	; 0x5f
 80078d2:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2207      	movs	r2, #7
 80078da:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2207      	movs	r2, #7
 80078e2:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2214      	movs	r2, #20
 80078ea:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	227f      	movs	r2, #127	; 0x7f
 80078f2:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2214      	movs	r2, #20
 80078fa:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	227f      	movs	r2, #127	; 0x7f
 8007902:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2214      	movs	r2, #20
 800790a:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2224      	movs	r2, #36	; 0x24
 8007912:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	222a      	movs	r2, #42	; 0x2a
 800791a:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	227f      	movs	r2, #127	; 0x7f
 8007922:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	222a      	movs	r2, #42	; 0x2a
 800792a:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2212      	movs	r2, #18
 8007932:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2223      	movs	r2, #35	; 0x23
 800793a:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2213      	movs	r2, #19
 8007942:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2208      	movs	r2, #8
 800794a:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2264      	movs	r2, #100	; 0x64
 8007952:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2262      	movs	r2, #98	; 0x62
 800795a:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2236      	movs	r2, #54	; 0x36
 8007962:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2249      	movs	r2, #73	; 0x49
 800796a:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2255      	movs	r2, #85	; 0x55
 8007972:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2222      	movs	r2, #34	; 0x22
 800797a:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2250      	movs	r2, #80	; 0x50
 8007982:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2205      	movs	r2, #5
 800798a:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2203      	movs	r2, #3
 8007992:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	221c      	movs	r2, #28
 800799a:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2222      	movs	r2, #34	; 0x22
 80079a2:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2241      	movs	r2, #65	; 0x41
 80079aa:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2241      	movs	r2, #65	; 0x41
 80079b2:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2222      	movs	r2, #34	; 0x22
 80079ba:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	221c      	movs	r2, #28
 80079c2:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2208      	movs	r2, #8
 80079ca:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	222a      	movs	r2, #42	; 0x2a
 80079d2:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	221c      	movs	r2, #28
 80079da:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	222a      	movs	r2, #42	; 0x2a
 80079e2:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2208      	movs	r2, #8
 80079ea:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2208      	movs	r2, #8
 80079f2:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2208      	movs	r2, #8
 80079fa:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	223e      	movs	r2, #62	; 0x3e
 8007a02:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2208      	movs	r2, #8
 8007a12:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2250      	movs	r2, #80	; 0x50
 8007a1a:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2230      	movs	r2, #48	; 0x30
 8007a22:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2208      	movs	r2, #8
 8007a32:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2208      	movs	r2, #8
 8007a3a:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2208      	movs	r2, #8
 8007a42:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2208      	movs	r2, #8
 8007a4a:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2230      	movs	r2, #48	; 0x30
 8007a52:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2230      	movs	r2, #48	; 0x30
 8007a5a:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2210      	movs	r2, #16
 8007a6a:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2208      	movs	r2, #8
 8007a72:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	223e      	movs	r2, #62	; 0x3e
 8007a8a:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2251      	movs	r2, #81	; 0x51
 8007a92:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2249      	movs	r2, #73	; 0x49
 8007a9a:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2245      	movs	r2, #69	; 0x45
 8007aa2:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	223e      	movs	r2, #62	; 0x3e
 8007aaa:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2242      	movs	r2, #66	; 0x42
 8007ab2:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	227f      	movs	r2, #127	; 0x7f
 8007aba:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2240      	movs	r2, #64	; 0x40
 8007ac2:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2242      	movs	r2, #66	; 0x42
 8007aca:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2261      	movs	r2, #97	; 0x61
 8007ad2:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2251      	movs	r2, #81	; 0x51
 8007ada:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2249      	movs	r2, #73	; 0x49
 8007ae2:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2246      	movs	r2, #70	; 0x46
 8007aea:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2221      	movs	r2, #33	; 0x21
 8007af2:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2241      	movs	r2, #65	; 0x41
 8007afa:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2245      	movs	r2, #69	; 0x45
 8007b02:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	224b      	movs	r2, #75	; 0x4b
 8007b0a:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2231      	movs	r2, #49	; 0x31
 8007b12:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2218      	movs	r2, #24
 8007b1a:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2214      	movs	r2, #20
 8007b22:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2212      	movs	r2, #18
 8007b2a:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	227f      	movs	r2, #127	; 0x7f
 8007b32:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2210      	movs	r2, #16
 8007b3a:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2227      	movs	r2, #39	; 0x27
 8007b42:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2245      	movs	r2, #69	; 0x45
 8007b4a:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2245      	movs	r2, #69	; 0x45
 8007b52:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2245      	movs	r2, #69	; 0x45
 8007b5a:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2239      	movs	r2, #57	; 0x39
 8007b62:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	223c      	movs	r2, #60	; 0x3c
 8007b6a:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	224a      	movs	r2, #74	; 0x4a
 8007b72:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2249      	movs	r2, #73	; 0x49
 8007b7a:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2249      	movs	r2, #73	; 0x49
 8007b82:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2230      	movs	r2, #48	; 0x30
 8007b8a:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2271      	movs	r2, #113	; 0x71
 8007b9a:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2209      	movs	r2, #9
 8007ba2:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2205      	movs	r2, #5
 8007baa:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2236      	movs	r2, #54	; 0x36
 8007bba:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2249      	movs	r2, #73	; 0x49
 8007bc2:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2249      	movs	r2, #73	; 0x49
 8007bca:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2249      	movs	r2, #73	; 0x49
 8007bd2:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2236      	movs	r2, #54	; 0x36
 8007bda:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2206      	movs	r2, #6
 8007be2:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2249      	movs	r2, #73	; 0x49
 8007bea:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2249      	movs	r2, #73	; 0x49
 8007bf2:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2229      	movs	r2, #41	; 0x29
 8007bfa:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	221e      	movs	r2, #30
 8007c02:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2236      	movs	r2, #54	; 0x36
 8007c0a:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2236      	movs	r2, #54	; 0x36
 8007c12:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2256      	movs	r2, #86	; 0x56
 8007c1a:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2236      	movs	r2, #54	; 0x36
 8007c22:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2214      	movs	r2, #20
 8007c32:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2222      	movs	r2, #34	; 0x22
 8007c3a:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2241      	movs	r2, #65	; 0x41
 8007c42:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2214      	movs	r2, #20
 8007c4a:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2214      	movs	r2, #20
 8007c52:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2214      	movs	r2, #20
 8007c5a:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2214      	movs	r2, #20
 8007c62:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2214      	movs	r2, #20
 8007c6a:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2241      	movs	r2, #65	; 0x41
 8007c72:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2222      	movs	r2, #34	; 0x22
 8007c7a:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2214      	movs	r2, #20
 8007c82:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2251      	movs	r2, #81	; 0x51
 8007ca2:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2209      	movs	r2, #9
 8007caa:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2206      	movs	r2, #6
 8007cb2:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2232      	movs	r2, #50	; 0x32
 8007cba:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2249      	movs	r2, #73	; 0x49
 8007cc2:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2279      	movs	r2, #121	; 0x79
 8007cca:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2241      	movs	r2, #65	; 0x41
 8007cd2:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	223e      	movs	r2, #62	; 0x3e
 8007cda:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	227e      	movs	r2, #126	; 0x7e
 8007ce2:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2211      	movs	r2, #17
 8007cea:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2211      	movs	r2, #17
 8007cf2:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2211      	movs	r2, #17
 8007cfa:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	227e      	movs	r2, #126	; 0x7e
 8007d02:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	227f      	movs	r2, #127	; 0x7f
 8007d0a:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2249      	movs	r2, #73	; 0x49
 8007d12:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2249      	movs	r2, #73	; 0x49
 8007d1a:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2249      	movs	r2, #73	; 0x49
 8007d22:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2236      	movs	r2, #54	; 0x36
 8007d2a:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	223e      	movs	r2, #62	; 0x3e
 8007d32:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2241      	movs	r2, #65	; 0x41
 8007d3a:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2241      	movs	r2, #65	; 0x41
 8007d42:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2241      	movs	r2, #65	; 0x41
 8007d4a:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2222      	movs	r2, #34	; 0x22
 8007d52:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	227f      	movs	r2, #127	; 0x7f
 8007d5a:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2241      	movs	r2, #65	; 0x41
 8007d62:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2241      	movs	r2, #65	; 0x41
 8007d6a:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2222      	movs	r2, #34	; 0x22
 8007d72:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	221c      	movs	r2, #28
 8007d7a:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	227f      	movs	r2, #127	; 0x7f
 8007d82:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2249      	movs	r2, #73	; 0x49
 8007d8a:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2249      	movs	r2, #73	; 0x49
 8007d92:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2249      	movs	r2, #73	; 0x49
 8007d9a:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2241      	movs	r2, #65	; 0x41
 8007da2:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	227f      	movs	r2, #127	; 0x7f
 8007daa:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2209      	movs	r2, #9
 8007db2:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2209      	movs	r2, #9
 8007dba:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	223e      	movs	r2, #62	; 0x3e
 8007dd2:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2241      	movs	r2, #65	; 0x41
 8007dda:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2241      	movs	r2, #65	; 0x41
 8007de2:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2251      	movs	r2, #81	; 0x51
 8007dea:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2232      	movs	r2, #50	; 0x32
 8007df2:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	227f      	movs	r2, #127	; 0x7f
 8007dfa:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2208      	movs	r2, #8
 8007e02:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2208      	movs	r2, #8
 8007e12:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	227f      	movs	r2, #127	; 0x7f
 8007e1a:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2241      	movs	r2, #65	; 0x41
 8007e22:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	227f      	movs	r2, #127	; 0x7f
 8007e2a:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2241      	movs	r2, #65	; 0x41
 8007e32:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2240      	movs	r2, #64	; 0x40
 8007e42:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2241      	movs	r2, #65	; 0x41
 8007e4a:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	223f      	movs	r2, #63	; 0x3f
 8007e52:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	227f      	movs	r2, #127	; 0x7f
 8007e62:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2208      	movs	r2, #8
 8007e6a:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2214      	movs	r2, #20
 8007e72:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2222      	movs	r2, #34	; 0x22
 8007e7a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2241      	movs	r2, #65	; 0x41
 8007e82:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	227f      	movs	r2, #127	; 0x7f
 8007e8a:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2240      	movs	r2, #64	; 0x40
 8007e9a:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2240      	movs	r2, #64	; 0x40
 8007ea2:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2240      	movs	r2, #64	; 0x40
 8007eaa:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	227f      	movs	r2, #127	; 0x7f
 8007eb2:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	227f      	movs	r2, #127	; 0x7f
 8007ed2:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	227f      	movs	r2, #127	; 0x7f
 8007eda:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2210      	movs	r2, #16
 8007ef2:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	227f      	movs	r2, #127	; 0x7f
 8007efa:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	223e      	movs	r2, #62	; 0x3e
 8007f02:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2241      	movs	r2, #65	; 0x41
 8007f0a:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2241      	movs	r2, #65	; 0x41
 8007f12:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2241      	movs	r2, #65	; 0x41
 8007f1a:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	223e      	movs	r2, #62	; 0x3e
 8007f22:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	227f      	movs	r2, #127	; 0x7f
 8007f2a:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2209      	movs	r2, #9
 8007f32:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2209      	movs	r2, #9
 8007f3a:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2209      	movs	r2, #9
 8007f42:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2206      	movs	r2, #6
 8007f4a:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	223e      	movs	r2, #62	; 0x3e
 8007f52:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2241      	movs	r2, #65	; 0x41
 8007f5a:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2251      	movs	r2, #81	; 0x51
 8007f62:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2221      	movs	r2, #33	; 0x21
 8007f6a:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	225e      	movs	r2, #94	; 0x5e
 8007f72:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	227f      	movs	r2, #127	; 0x7f
 8007f7a:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2209      	movs	r2, #9
 8007f82:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2219      	movs	r2, #25
 8007f8a:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2229      	movs	r2, #41	; 0x29
 8007f92:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2246      	movs	r2, #70	; 0x46
 8007f9a:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2246      	movs	r2, #70	; 0x46
 8007fa2:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2249      	movs	r2, #73	; 0x49
 8007faa:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2249      	movs	r2, #73	; 0x49
 8007fb2:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2249      	movs	r2, #73	; 0x49
 8007fba:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2231      	movs	r2, #49	; 0x31
 8007fc2:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	227f      	movs	r2, #127	; 0x7f
 8007fda:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	223f      	movs	r2, #63	; 0x3f
 8007ff2:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2240      	movs	r2, #64	; 0x40
 8007ffa:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2240      	movs	r2, #64	; 0x40
 8008002:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2240      	movs	r2, #64	; 0x40
 800800a:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	223f      	movs	r2, #63	; 0x3f
 8008012:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	221f      	movs	r2, #31
 800801a:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2240      	movs	r2, #64	; 0x40
 800802a:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	221f      	movs	r2, #31
 800803a:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	227f      	movs	r2, #127	; 0x7f
 8008042:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2218      	movs	r2, #24
 8008052:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	227f      	movs	r2, #127	; 0x7f
 8008062:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2263      	movs	r2, #99	; 0x63
 800806a:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2214      	movs	r2, #20
 8008072:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2208      	movs	r2, #8
 800807a:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2214      	movs	r2, #20
 8008082:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2263      	movs	r2, #99	; 0x63
 800808a:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2203      	movs	r2, #3
 8008092:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2278      	movs	r2, #120	; 0x78
 80080a2:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2204      	movs	r2, #4
 80080aa:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2203      	movs	r2, #3
 80080b2:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2261      	movs	r2, #97	; 0x61
 80080ba:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2251      	movs	r2, #81	; 0x51
 80080c2:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2249      	movs	r2, #73	; 0x49
 80080ca:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2245      	movs	r2, #69	; 0x45
 80080d2:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2243      	movs	r2, #67	; 0x43
 80080da:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	227f      	movs	r2, #127	; 0x7f
 80080e2:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2241      	movs	r2, #65	; 0x41
 80080ea:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2241      	movs	r2, #65	; 0x41
 80080f2:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2204      	movs	r2, #4
 8008102:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2208      	movs	r2, #8
 800810a:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2210      	movs	r2, #16
 8008112:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2241      	movs	r2, #65	; 0x41
 8008122:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2241      	movs	r2, #65	; 0x41
 800812a:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	227f      	movs	r2, #127	; 0x7f
 8008132:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2204      	movs	r2, #4
 800813a:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2240      	movs	r2, #64	; 0x40
 8008162:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2240      	movs	r2, #64	; 0x40
 800816a:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2240      	movs	r2, #64	; 0x40
 8008172:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2240      	movs	r2, #64	; 0x40
 800817a:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2240      	movs	r2, #64	; 0x40
 8008182:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2204      	movs	r2, #4
 800819a:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2254      	movs	r2, #84	; 0x54
 80081aa:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2254      	movs	r2, #84	; 0x54
 80081b2:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2254      	movs	r2, #84	; 0x54
 80081ba:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2278      	movs	r2, #120	; 0x78
 80081c2:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	227f      	movs	r2, #127	; 0x7f
 80081ca:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2248      	movs	r2, #72	; 0x48
 80081d2:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2244      	movs	r2, #68	; 0x44
 80081da:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2244      	movs	r2, #68	; 0x44
 80081e2:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2238      	movs	r2, #56	; 0x38
 80081ea:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2238      	movs	r2, #56	; 0x38
 80081f2:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2244      	movs	r2, #68	; 0x44
 80081fa:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2244      	movs	r2, #68	; 0x44
 8008202:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2244      	movs	r2, #68	; 0x44
 800820a:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2238      	movs	r2, #56	; 0x38
 800821a:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2244      	movs	r2, #68	; 0x44
 8008222:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2244      	movs	r2, #68	; 0x44
 800822a:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2248      	movs	r2, #72	; 0x48
 8008232:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	227f      	movs	r2, #127	; 0x7f
 800823a:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2238      	movs	r2, #56	; 0x38
 8008242:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2254      	movs	r2, #84	; 0x54
 800824a:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2254      	movs	r2, #84	; 0x54
 8008252:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2254      	movs	r2, #84	; 0x54
 800825a:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2218      	movs	r2, #24
 8008262:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2208      	movs	r2, #8
 800826a:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	227e      	movs	r2, #126	; 0x7e
 8008272:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2209      	movs	r2, #9
 800827a:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2208      	movs	r2, #8
 8008292:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2214      	movs	r2, #20
 800829a:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2254      	movs	r2, #84	; 0x54
 80082a2:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2254      	movs	r2, #84	; 0x54
 80082aa:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	223c      	movs	r2, #60	; 0x3c
 80082b2:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	227f      	movs	r2, #127	; 0x7f
 80082ba:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2208      	movs	r2, #8
 80082c2:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2204      	movs	r2, #4
 80082ca:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2278      	movs	r2, #120	; 0x78
 80082da:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2244      	movs	r2, #68	; 0x44
 80082e2:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	227d      	movs	r2, #125	; 0x7d
 80082ea:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2240      	movs	r2, #64	; 0x40
 80082f2:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2240      	movs	r2, #64	; 0x40
 8008302:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2244      	movs	r2, #68	; 0x44
 800830a:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	223d      	movs	r2, #61	; 0x3d
 8008312:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	227f      	movs	r2, #127	; 0x7f
 800831a:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2210      	movs	r2, #16
 8008322:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2228      	movs	r2, #40	; 0x28
 800832a:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2244      	movs	r2, #68	; 0x44
 8008332:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2241      	movs	r2, #65	; 0x41
 800833a:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	227f      	movs	r2, #127	; 0x7f
 8008342:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2240      	movs	r2, #64	; 0x40
 800834a:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	227c      	movs	r2, #124	; 0x7c
 8008352:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2218      	movs	r2, #24
 8008362:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2204      	movs	r2, #4
 800836a:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2278      	movs	r2, #120	; 0x78
 8008372:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	227c      	movs	r2, #124	; 0x7c
 800837a:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2208      	movs	r2, #8
 8008382:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2204      	movs	r2, #4
 800838a:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2278      	movs	r2, #120	; 0x78
 800839a:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2238      	movs	r2, #56	; 0x38
 80083a2:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2244      	movs	r2, #68	; 0x44
 80083aa:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2244      	movs	r2, #68	; 0x44
 80083b2:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2244      	movs	r2, #68	; 0x44
 80083ba:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2238      	movs	r2, #56	; 0x38
 80083c2:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	227c      	movs	r2, #124	; 0x7c
 80083ca:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2214      	movs	r2, #20
 80083d2:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2214      	movs	r2, #20
 80083da:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2214      	movs	r2, #20
 80083e2:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2208      	movs	r2, #8
 80083ea:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2208      	movs	r2, #8
 80083f2:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2214      	movs	r2, #20
 80083fa:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2214      	movs	r2, #20
 8008402:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2218      	movs	r2, #24
 800840a:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	227c      	movs	r2, #124	; 0x7c
 8008412:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	227c      	movs	r2, #124	; 0x7c
 800841a:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2208      	movs	r2, #8
 8008422:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2204      	movs	r2, #4
 800842a:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2204      	movs	r2, #4
 8008432:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2208      	movs	r2, #8
 800843a:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2248      	movs	r2, #72	; 0x48
 8008442:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2254      	movs	r2, #84	; 0x54
 800844a:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2254      	movs	r2, #84	; 0x54
 8008452:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2254      	movs	r2, #84	; 0x54
 800845a:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2204      	movs	r2, #4
 800846a:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	223f      	movs	r2, #63	; 0x3f
 8008472:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2244      	movs	r2, #68	; 0x44
 800847a:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2240      	movs	r2, #64	; 0x40
 8008482:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	223c      	movs	r2, #60	; 0x3c
 8008492:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2240      	movs	r2, #64	; 0x40
 800849a:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2240      	movs	r2, #64	; 0x40
 80084a2:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	227c      	movs	r2, #124	; 0x7c
 80084b2:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	221c      	movs	r2, #28
 80084ba:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2240      	movs	r2, #64	; 0x40
 80084ca:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	221c      	movs	r2, #28
 80084da:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	223c      	movs	r2, #60	; 0x3c
 80084e2:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2240      	movs	r2, #64	; 0x40
 80084ea:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2230      	movs	r2, #48	; 0x30
 80084f2:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2240      	movs	r2, #64	; 0x40
 80084fa:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	223c      	movs	r2, #60	; 0x3c
 8008502:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2244      	movs	r2, #68	; 0x44
 800850a:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2228      	movs	r2, #40	; 0x28
 8008512:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2210      	movs	r2, #16
 800851a:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2228      	movs	r2, #40	; 0x28
 8008522:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2244      	movs	r2, #68	; 0x44
 800852a:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	220c      	movs	r2, #12
 8008532:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2250      	movs	r2, #80	; 0x50
 800853a:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2250      	movs	r2, #80	; 0x50
 8008542:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2250      	movs	r2, #80	; 0x50
 800854a:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	223c      	movs	r2, #60	; 0x3c
 8008552:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2244      	movs	r2, #68	; 0x44
 800855a:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2264      	movs	r2, #100	; 0x64
 8008562:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2254      	movs	r2, #84	; 0x54
 800856a:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	224c      	movs	r2, #76	; 0x4c
 8008572:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2244      	movs	r2, #68	; 0x44
 800857a:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2208      	movs	r2, #8
 8008582:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2236      	movs	r2, #54	; 0x36
 800858a:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2241      	movs	r2, #65	; 0x41
 8008592:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	227f      	movs	r2, #127	; 0x7f
 800859a:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2241      	movs	r2, #65	; 0x41
 80085a2:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2236      	movs	r2, #54	; 0x36
 80085aa:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2208      	movs	r2, #8
 80085b2:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bdb0      	pop	{r4, r5, r7, pc}

080085c0 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	4a05      	ldr	r2, [pc, #20]	; (80085e0 <_ZN4GLCDD1Ev+0x20>)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fb fe23 	bl	800421c <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	08011da8 	.word	0x08011da8

080085e4 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
}
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ffe7 	bl	80085c0 <_ZN4GLCDD1Ev>
 80085f2:	f640 2104 	movw	r1, #2564	; 0xa04
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f008 fc83 	bl	8010f02 <_ZdlPvj>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008610:	2200      	movs	r2, #0
 8008612:	2110      	movs	r1, #16
 8008614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008618:	f003 fd2e 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800861c:	2200      	movs	r2, #0
 800861e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008622:	480c      	ldr	r0, [pc, #48]	; (8008654 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008624:	f003 fd28 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008628:	2200      	movs	r2, #0
 800862a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800862e:	4809      	ldr	r0, [pc, #36]	; (8008654 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008630:	f003 fd22 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008634:	2200      	movs	r2, #0
 8008636:	2104      	movs	r1, #4
 8008638:	4807      	ldr	r0, [pc, #28]	; (8008658 <_ZN4GLCD9m_ctrloffEv+0x50>)
 800863a:	f003 fd1d 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800863e:	2200      	movs	r2, #0
 8008640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008644:	4803      	ldr	r0, [pc, #12]	; (8008654 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8008646:	f003 fd17 	bl	800c078 <HAL_GPIO_WritePin>
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	48000800 	.word	0x48000800
 8008658:	48000c00 	.word	0x48000c00

0800865c <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 800866a:	2300      	movs	r3, #0
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d20d      	bcs.n	8008692 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 8008676:	2300      	movs	r3, #0
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	429a      	cmp	r2, r3
 8008680:	d203      	bcs.n	800868a <_ZN4GLCD7m_delayEjh+0x2e>
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	3301      	adds	r3, #1
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	e7f7      	b.n	800867a <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	3301      	adds	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e7ed      	b.n	800866e <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fb ffe8 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	2108      	movs	r1, #8
 80086be:	482f      	ldr	r0, [pc, #188]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80086c0:	f003 fcda 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	2101      	movs	r1, #1
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fb ffdc 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	2104      	movs	r1, #4
 80086d6:	4829      	ldr	r0, [pc, #164]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80086d8:	f003 fcce 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	2102      	movs	r1, #2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fb ffd0 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	2102      	movs	r1, #2
 80086ee:	4823      	ldr	r0, [pc, #140]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80086f0:	f003 fcc2 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	2103      	movs	r1, #3
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fb ffc4 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008700:	4603      	mov	r3, r0
 8008702:	461a      	mov	r2, r3
 8008704:	2101      	movs	r1, #1
 8008706:	481d      	ldr	r0, [pc, #116]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008708:	f003 fcb6 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	2104      	movs	r1, #4
 8008712:	4618      	mov	r0, r3
 8008714:	f7fb ffb8 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008718:	4603      	mov	r3, r0
 800871a:	461a      	mov	r2, r3
 800871c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008720:	4816      	ldr	r0, [pc, #88]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008722:	f003 fca9 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	2105      	movs	r1, #5
 800872c:	4618      	mov	r0, r3
 800872e:	f7fb ffab 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800873a:	4810      	ldr	r0, [pc, #64]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 800873c:	f003 fc9c 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	2106      	movs	r1, #6
 8008746:	4618      	mov	r0, r3
 8008748:	f7fb ff9e 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008754:	4809      	ldr	r0, [pc, #36]	; (800877c <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008756:	f003 fc8f 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	2107      	movs	r1, #7
 8008760:	4618      	mov	r0, r3
 8008762:	f7fb ff91 	bl	8004688 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008766:	4603      	mov	r3, r0
 8008768:	461a      	mov	r2, r3
 800876a:	2120      	movs	r1, #32
 800876c:	4804      	ldr	r0, [pc, #16]	; (8008780 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 800876e:	f003 fc83 	bl	800c078 <HAL_GPIO_WritePin>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	48000800 	.word	0x48000800
 8008780:	48000400 	.word	0x48000400

08008784 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff3b 	bl	8008608 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 8008792:	213f      	movs	r1, #63	; 0x3f
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff ff83 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 800879a:	2201      	movs	r2, #1
 800879c:	2104      	movs	r1, #4
 800879e:	4815      	ldr	r0, [pc, #84]	; (80087f4 <_ZN4GLCD11m_displayonEv+0x70>)
 80087a0:	f003 fc6a 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80087a4:	2201      	movs	r2, #1
 80087a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087aa:	4813      	ldr	r0, [pc, #76]	; (80087f8 <_ZN4GLCD11m_displayonEv+0x74>)
 80087ac:	f003 fc64 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80087b0:	2200      	movs	r2, #0
 80087b2:	2110      	movs	r1, #16
 80087b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087b8:	f003 fc5e 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80087bc:	2200      	movs	r2, #0
 80087be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80087c2:	480d      	ldr	r0, [pc, #52]	; (80087f8 <_ZN4GLCD11m_displayonEv+0x74>)
 80087c4:	f003 fc58 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80087c8:	2201      	movs	r2, #1
 80087ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087ce:	480a      	ldr	r0, [pc, #40]	; (80087f8 <_ZN4GLCD11m_displayonEv+0x74>)
 80087d0:	f003 fc52 	bl	800c078 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80087d4:	2264      	movs	r2, #100	; 0x64
 80087d6:	210a      	movs	r1, #10
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff3f 	bl	800865c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80087de:	2200      	movs	r2, #0
 80087e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087e4:	4804      	ldr	r0, [pc, #16]	; (80087f8 <_ZN4GLCD11m_displayonEv+0x74>)
 80087e6:	f003 fc47 	bl	800c078 <HAL_GPIO_WritePin>
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	48000c00 	.word	0x48000c00
 80087f8:	48000800 	.word	0x48000800

080087fc <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	2b3f      	cmp	r3, #63	; 0x3f
 800880c:	d839      	bhi.n	8008882 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff fefa 	bl	8008608 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008826:	b2db      	uxtb	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff ff38 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008830:	2201      	movs	r2, #1
 8008832:	2104      	movs	r1, #4
 8008834:	4831      	ldr	r0, [pc, #196]	; (80088fc <_ZN4GLCD11m_setcolumnEh+0x100>)
 8008836:	f003 fc1f 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800883a:	2200      	movs	r2, #0
 800883c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008840:	482f      	ldr	r0, [pc, #188]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008842:	f003 fc19 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008846:	2200      	movs	r2, #0
 8008848:	2110      	movs	r1, #16
 800884a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800884e:	f003 fc13 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008852:	2200      	movs	r2, #0
 8008854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008858:	4829      	ldr	r0, [pc, #164]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800885a:	f003 fc0d 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800885e:	2201      	movs	r2, #1
 8008860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008864:	4826      	ldr	r0, [pc, #152]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008866:	f003 fc07 	bl	800c078 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 800886a:	2264      	movs	r2, #100	; 0x64
 800886c:	210a      	movs	r1, #10
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff fef4 	bl	800865c <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008874:	2200      	movs	r2, #0
 8008876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800887a:	4821      	ldr	r0, [pc, #132]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800887c:	f003 fbfc 	bl	800c078 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8008880:	e038      	b.n	80088f4 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8008888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800888c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008890:	b25b      	sxtb	r3, r3
 8008892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008896:	b25b      	sxtb	r3, r3
 8008898:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fefe 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80088a4:	2200      	movs	r2, #0
 80088a6:	2104      	movs	r1, #4
 80088a8:	4814      	ldr	r0, [pc, #80]	; (80088fc <_ZN4GLCD11m_setcolumnEh+0x100>)
 80088aa:	f003 fbe5 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80088ae:	2201      	movs	r2, #1
 80088b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088b4:	4812      	ldr	r0, [pc, #72]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80088b6:	f003 fbdf 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80088ba:	2200      	movs	r2, #0
 80088bc:	2110      	movs	r1, #16
 80088be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088c2:	f003 fbd9 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80088c6:	2200      	movs	r2, #0
 80088c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80088ce:	f003 fbd3 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80088d2:	2201      	movs	r2, #1
 80088d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088d8:	4809      	ldr	r0, [pc, #36]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80088da:	f003 fbcd 	bl	800c078 <HAL_GPIO_WritePin>
		m_delay(10,100);
 80088de:	2264      	movs	r2, #100	; 0x64
 80088e0:	210a      	movs	r1, #10
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff feba 	bl	800865c <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80088e8:	2200      	movs	r2, #0
 80088ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088ee:	4804      	ldr	r0, [pc, #16]	; (8008900 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80088f0:	f003 fbc2 	bl	800c078 <HAL_GPIO_WritePin>
}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	48000c00 	.word	0x48000c00
 8008900:	48000800 	.word	0x48000800

08008904 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff fe79 	bl	8008608 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	f063 0347 	orn	r3, r3, #71	; 0x47
 800891c:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff febc 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008928:	2201      	movs	r2, #1
 800892a:	2104      	movs	r1, #4
 800892c:	4814      	ldr	r0, [pc, #80]	; (8008980 <_ZN4GLCD9m_setpageEh+0x7c>)
 800892e:	f003 fba3 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008932:	2201      	movs	r2, #1
 8008934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008938:	4812      	ldr	r0, [pc, #72]	; (8008984 <_ZN4GLCD9m_setpageEh+0x80>)
 800893a:	f003 fb9d 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 800893e:	2200      	movs	r2, #0
 8008940:	2110      	movs	r1, #16
 8008942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008946:	f003 fb97 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800894a:	2200      	movs	r2, #0
 800894c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008950:	480c      	ldr	r0, [pc, #48]	; (8008984 <_ZN4GLCD9m_setpageEh+0x80>)
 8008952:	f003 fb91 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008956:	2201      	movs	r2, #1
 8008958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800895c:	4809      	ldr	r0, [pc, #36]	; (8008984 <_ZN4GLCD9m_setpageEh+0x80>)
 800895e:	f003 fb8b 	bl	800c078 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8008962:	2264      	movs	r2, #100	; 0x64
 8008964:	210a      	movs	r1, #10
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff fe78 	bl	800865c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800896c:	2200      	movs	r2, #0
 800896e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008972:	4804      	ldr	r0, [pc, #16]	; (8008984 <_ZN4GLCD9m_setpageEh+0x80>)
 8008974:	f003 fb80 	bl	800c078 <HAL_GPIO_WritePin>
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	48000c00 	.word	0x48000c00
 8008984:	48000800 	.word	0x48000800

08008988 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fe37 	bl	8008608 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80089a0:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fe7a 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80089ac:	2201      	movs	r2, #1
 80089ae:	2104      	movs	r1, #4
 80089b0:	4814      	ldr	r0, [pc, #80]	; (8008a04 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 80089b2:	f003 fb61 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80089b6:	2201      	movs	r2, #1
 80089b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80089bc:	4812      	ldr	r0, [pc, #72]	; (8008a08 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80089be:	f003 fb5b 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2110      	movs	r1, #16
 80089c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089ca:	f003 fb55 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80089ce:	2200      	movs	r2, #0
 80089d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089d4:	480c      	ldr	r0, [pc, #48]	; (8008a08 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80089d6:	f003 fb4f 	bl	800c078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80089da:	2201      	movs	r2, #1
 80089dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089e0:	4809      	ldr	r0, [pc, #36]	; (8008a08 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80089e2:	f003 fb49 	bl	800c078 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80089e6:	2264      	movs	r2, #100	; 0x64
 80089e8:	210a      	movs	r1, #10
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fe36 	bl	800865c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80089f0:	2200      	movs	r2, #0
 80089f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089f6:	4804      	ldr	r0, [pc, #16]	; (8008a08 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80089f8:	f003 fb3e 	bl	800c078 <HAL_GPIO_WritePin>
}
 80089fc:	bf00      	nop
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	48000c00 	.word	0x48000c00
 8008a08:	48000800 	.word	0x48000800

08008a0c <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	82fb      	strh	r3, [r7, #22]
 8008a1e:	8afa      	ldrh	r2, [r7, #22]
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	f080 8085 	bcs.w	8008b32 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	7f1b      	ldrb	r3, [r3, #28]
 8008a2c:	2b3f      	cmp	r3, #63	; 0x3f
 8008a2e:	d838      	bhi.n	8008aa2 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8008a30:	8afb      	ldrh	r3, [r7, #22]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008a3a:	7d7b      	ldrb	r3, [r7, #21]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff fe2e 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008a44:	2201      	movs	r2, #1
 8008a46:	2104      	movs	r1, #4
 8008a48:	483b      	ldr	r0, [pc, #236]	; (8008b38 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008a4a:	f003 fb15 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a54:	4839      	ldr	r0, [pc, #228]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008a56:	f003 fb0f 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	2110      	movs	r1, #16
 8008a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a62:	f003 fb09 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008a66:	2200      	movs	r2, #0
 8008a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a6c:	4833      	ldr	r0, [pc, #204]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008a6e:	f003 fb03 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008a72:	2201      	movs	r2, #1
 8008a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008a78:	4830      	ldr	r0, [pc, #192]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008a7a:	f003 fafd 	bl	800c078 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008a7e:	2264      	movs	r2, #100	; 0x64
 8008a80:	210a      	movs	r1, #10
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7ff fdea 	bl	800865c <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008a8e:	482b      	ldr	r0, [pc, #172]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008a90:	f003 faf2 	bl	800c078 <HAL_GPIO_WritePin>
			c++;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	7f1b      	ldrb	r3, [r3, #28]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	771a      	strb	r2, [r3, #28]
 8008aa0:	e03d      	b.n	8008b1e <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	7f1b      	ldrb	r3, [r3, #28]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff fea7 	bl	80087fc <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8008aae:	8afb      	ldrh	r3, [r7, #22]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008ab8:	7d7b      	ldrb	r3, [r7, #21]
 8008aba:	4619      	mov	r1, r3
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7ff fdef 	bl	80086a0 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2104      	movs	r1, #4
 8008ac6:	481c      	ldr	r0, [pc, #112]	; (8008b38 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008ac8:	f003 fad6 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008acc:	2201      	movs	r2, #1
 8008ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ad2:	481a      	ldr	r0, [pc, #104]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008ad4:	f003 fad0 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008ad8:	2201      	movs	r2, #1
 8008ada:	2110      	movs	r1, #16
 8008adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ae0:	f003 faca 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008aea:	4814      	ldr	r0, [pc, #80]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008aec:	f003 fac4 	bl	800c078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008af0:	2201      	movs	r2, #1
 8008af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008af6:	4811      	ldr	r0, [pc, #68]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008af8:	f003 fabe 	bl	800c078 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008afc:	2264      	movs	r2, #100	; 0x64
 8008afe:	210a      	movs	r1, #10
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff fdab 	bl	800865c <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008b06:	2200      	movs	r2, #0
 8008b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b0c:	480b      	ldr	r0, [pc, #44]	; (8008b3c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008b0e:	f003 fab3 	bl	800c078 <HAL_GPIO_WritePin>
			c++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	7f1b      	ldrb	r3, [r3, #28]
 8008b16:	3301      	adds	r3, #1
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	7f1b      	ldrb	r3, [r3, #28]
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	db03      	blt.n	8008b30 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 8008b28:	8afb      	ldrh	r3, [r7, #22]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	82fb      	strh	r3, [r7, #22]
 8008b2e:	e776      	b.n	8008a1e <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8008b30:	bf00      	nop
	}
}
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	48000c00 	.word	0x48000c00
 8008b3c:	48000800 	.word	0x48000800

08008b40 <_ZN4GLCD10m_lcdputs1EhhPc>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,char *str)
{
 8008b40:	b590      	push	{r4, r7, lr}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	607b      	str	r3, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	72fb      	strb	r3, [r7, #11]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	4619      	mov	r1, r3
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff fe50 	bl	80087fc <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8008b5c:	7abb      	ldrb	r3, [r7, #10]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fecf 	bl	8008904 <_ZN4GLCD9m_setpageEh>
	//for(i=0;str[i]!=0;i++)
	length =strlen(str);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7f7 fb32 	bl	80001d0 <strlen>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <_ZN4GLCD10m_lcdputs1EhhPc+0x7c>)
 8008b72:	701a      	strb	r2, [r3, #0]
	for(i=0;i< strlen(str);i++)
 8008b74:	2300      	movs	r3, #0
 8008b76:	75fb      	strb	r3, [r7, #23]
 8008b78:	7dfc      	ldrb	r4, [r7, #23]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7f7 fb28 	bl	80001d0 <strlen>
 8008b80:	4603      	mov	r3, r0
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d215      	bcs.n	8008bb2 <_ZN4GLCD10m_lcdputs1EhhPc+0x72>
	{
		a=(*(str+i));
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8008b90:	8abb      	ldrh	r3, [r7, #20]
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 8008b96:	8abb      	ldrh	r3, [r7, #20]
 8008b98:	3318      	adds	r3, #24
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3306      	adds	r3, #6
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff ff31 	bl	8008a0c <_ZN4GLCD9m_lcddataEPht>
	for(i=0;i< strlen(str);i++)
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	3301      	adds	r3, #1
 8008bae:	75fb      	strb	r3, [r7, #23]
 8008bb0:	e7e2      	b.n	8008b78 <_ZN4GLCD10m_lcdputs1EhhPc+0x38>
	}
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd90      	pop	{r4, r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000788 	.word	0x20000788

08008bc0 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	2b07      	cmp	r3, #7
 8008bd0:	d81d      	bhi.n	8008c0e <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff fe94 	bl	8008904 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fe0c 	bl	80087fc <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8008be4:	2300      	movs	r3, #0
 8008be6:	73bb      	strb	r3, [r7, #14]
 8008be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	db0a      	blt.n	8008c06 <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	331d      	adds	r3, #29
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff ff07 	bl	8008a0c <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	3301      	adds	r3, #1
 8008c02:	73bb      	strb	r3, [r7, #14]
 8008c04:	e7f0      	b.n	8008be8 <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	73fb      	strb	r3, [r7, #15]
 8008c0c:	e7de      	b.n	8008bcc <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <_ZN7DwinhmiC1Ev>:
uint8_t CheckP;
uint8_t updateCloudConn;
uint16_t espMacAddressLoc;
uint16_t dwinRxFramValidKey;

Dwinhmi::Dwinhmi() {
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	4a06      	ldr	r2, [pc, #24]	; (8008c3c <_ZN7DwinhmiC1Ev+0x24>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	// TODO Auto-generated constructor stub

}
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	08011db8 	.word	0x08011db8

08008c40 <_ZN7DwinhmiD1Ev>:

Dwinhmi::~Dwinhmi() {
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	4a04      	ldr	r2, [pc, #16]	; (8008c5c <_ZN7DwinhmiD1Ev+0x1c>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	08011db8 	.word	0x08011db8

08008c60 <_ZN7DwinhmiD0Ev>:
Dwinhmi::~Dwinhmi() {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
}
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff ffe9 	bl	8008c40 <_ZN7DwinhmiD1Ev>
 8008c6e:	2160      	movs	r1, #96	; 0x60
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f008 f946 	bl	8010f02 <_ZdlPvj>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <_ZN7Dwinhmi9dwinFrameEv>:

void Dwinhmi::dwinFrame()
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	switch(Cntid_dwin)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	f000 813e 	beq.w	8008f10 <_ZN7Dwinhmi9dwinFrameEv+0x290>
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	f300 8161 	bgt.w	8008f5c <_ZN7Dwinhmi9dwinFrameEv+0x2dc>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <_ZN7Dwinhmi9dwinFrameEv+0x26>
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	f000 80f1 	beq.w	8008e86 <_ZN7Dwinhmi9dwinFrameEv+0x206>
			Dwinseq=0;
			noOfDataDwin=7;
			Cntid_dwin=0;
		break;
		default:
		break;
 8008ca4:	e15a      	b.n	8008f5c <_ZN7Dwinhmi9dwinFrameEv+0x2dc>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	225a      	movs	r2, #90	; 0x5a
 8008caa:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	22a5      	movs	r2, #165	; 0xa5
 8008cb0:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	220f      	movs	r2, #15
 8008cb6:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2282      	movs	r2, #130	; 0x82
 8008cbc:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x20;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x00;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	729a      	strb	r2, [r3, #10]
			u8ModbusRegisterdwin[7] = date_Rtc;
 8008cd0:	4baa      	ldr	r3, [pc, #680]	; (8008f7c <_ZN7Dwinhmi9dwinFrameEv+0x2fc>)
 8008cd2:	781a      	ldrb	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	72da      	strb	r2, [r3, #11]
			u8ModbusRegisterdwin[8] = 0x00;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	731a      	strb	r2, [r3, #12]
			u8ModbusRegisterdwin[9] = month_Rtc;
 8008cde:	4ba8      	ldr	r3, [pc, #672]	; (8008f80 <_ZN7Dwinhmi9dwinFrameEv+0x300>)
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	735a      	strb	r2, [r3, #13]
			u8ModbusRegisterdwin[10] = 0x00;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	739a      	strb	r2, [r3, #14]
			u8ModbusRegisterdwin[11] = year_Rtc;
 8008cec:	4ba5      	ldr	r3, [pc, #660]	; (8008f84 <_ZN7Dwinhmi9dwinFrameEv+0x304>)
 8008cee:	781a      	ldrb	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	73da      	strb	r2, [r3, #15]
			u8ModbusRegisterdwin[12] = 0x00;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	741a      	strb	r2, [r3, #16]
			u8ModbusRegisterdwin[13] = hour_t;
 8008cfa:	4ba3      	ldr	r3, [pc, #652]	; (8008f88 <_ZN7Dwinhmi9dwinFrameEv+0x308>)
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	745a      	strb	r2, [r3, #17]
			u8ModbusRegisterdwin[14] = 0x00;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	749a      	strb	r2, [r3, #18]
			u8ModbusRegisterdwin[15] = min_t;
 8008d08:	4ba0      	ldr	r3, [pc, #640]	; (8008f8c <_ZN7Dwinhmi9dwinFrameEv+0x30c>)
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	74da      	strb	r2, [r3, #19]
			u8ModbusRegisterdwin[16] = 0x00;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	751a      	strb	r2, [r3, #20]
			u8ModbusRegisterdwin[17] = sec_t;
 8008d16:	4b9e      	ldr	r3, [pc, #632]	; (8008f90 <_ZN7Dwinhmi9dwinFrameEv+0x310>)
 8008d18:	781a      	ldrb	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	755a      	strb	r2, [r3, #21]
			u8ModbusRegisterdwin[18] = highByte(Production_Total);
 8008d1e:	4b9d      	ldr	r3, [pc, #628]	; (8008f94 <_ZN7Dwinhmi9dwinFrameEv+0x314>)
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	759a      	strb	r2, [r3, #22]
			u8ModbusRegisterdwin[19] = lowByte(Production_Total);
 8008d2c:	4b99      	ldr	r3, [pc, #612]	; (8008f94 <_ZN7Dwinhmi9dwinFrameEv+0x314>)
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	75da      	strb	r2, [r3, #23]
			u8ModbusRegisterdwin[20] = highByte(Rejection_Total);
 8008d36:	4b98      	ldr	r3, [pc, #608]	; (8008f98 <_ZN7Dwinhmi9dwinFrameEv+0x318>)
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	761a      	strb	r2, [r3, #24]
			u8ModbusRegisterdwin[21] = lowByte(Rejection_Total);
 8008d44:	4b94      	ldr	r3, [pc, #592]	; (8008f98 <_ZN7Dwinhmi9dwinFrameEv+0x318>)
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	765a      	strb	r2, [r3, #25]
			u8ModbusRegisterdwin[22] = highByte(0);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	769a      	strb	r2, [r3, #26]
			u8ModbusRegisterdwin[23] = lowByte(wifiConnection);//2008
 8008d54:	4b91      	ldr	r3, [pc, #580]	; (8008f9c <_ZN7Dwinhmi9dwinFrameEv+0x31c>)
 8008d56:	781a      	ldrb	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	76da      	strb	r2, [r3, #27]
			u8ModbusRegisterdwin[24] = highByte(0);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	771a      	strb	r2, [r3, #28]
			u8ModbusRegisterdwin[25] = lowByte(wifiConnection);//2009
 8008d62:	4b8e      	ldr	r3, [pc, #568]	; (8008f9c <_ZN7Dwinhmi9dwinFrameEv+0x31c>)
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	775a      	strb	r2, [r3, #29]
			u8ModbusRegisterdwin[26] = highByte(0);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	779a      	strb	r2, [r3, #30]
			u8ModbusRegisterdwin[27] = lowByte(12);//200A
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	220c      	movs	r2, #12
 8008d74:	77da      	strb	r2, [r3, #31]
			u8ModbusRegisterdwin[28] = highByte(productionTarget);
 8008d76:	4b8a      	ldr	r3, [pc, #552]	; (8008fa0 <_ZN7Dwinhmi9dwinFrameEv+0x320>)
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	0a1b      	lsrs	r3, r3, #8
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f883 2020 	strb.w	r2, [r3, #32]
			u8ModbusRegisterdwin[29] = lowByte(productionTarget);//200B
 8008d86:	4b86      	ldr	r3, [pc, #536]	; (8008fa0 <_ZN7Dwinhmi9dwinFrameEv+0x320>)
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			u8ModbusRegisterdwin[30] = highByte(productionInc);
 8008d92:	4b84      	ldr	r3, [pc, #528]	; (8008fa4 <_ZN7Dwinhmi9dwinFrameEv+0x324>)
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			u8ModbusRegisterdwin[31] = lowByte(productionInc);//200C
 8008da2:	4b80      	ldr	r3, [pc, #512]	; (8008fa4 <_ZN7Dwinhmi9dwinFrameEv+0x324>)
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			u8ModbusRegisterdwin[32] = highByte(startStopStatus);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			u8ModbusRegisterdwin[33] = lowByte(startStopStatus);//200C
 8008db6:	4b7c      	ldr	r3, [pc, #496]	; (8008fa8 <_ZN7Dwinhmi9dwinFrameEv+0x328>)
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			u8ModbusRegisterdwin[34] = highByte(batchNumber);
 8008dc0:	4b7a      	ldr	r3, [pc, #488]	; (8008fac <_ZN7Dwinhmi9dwinFrameEv+0x32c>)
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			u8ModbusRegisterdwin[35] = lowByte(batchNumber);//200C
 8008dd0:	4b76      	ldr	r3, [pc, #472]	; (8008fac <_ZN7Dwinhmi9dwinFrameEv+0x32c>)
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			u8ModbusRegisterdwin[36] = highByte(0);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			u8ModbusRegisterdwin[37] = lowByte(0);//200D
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			u8ModbusRegisterdwin[38] = highByte(0);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			u8ModbusRegisterdwin[39] = lowByte(0);//200e
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			u8ModbusRegisterdwin[40] = highByte(0);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			u8ModbusRegisterdwin[41] = lowByte(0);//200f
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			u8ModbusRegisterdwin[42] = highByte(0);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			u8ModbusRegisterdwin[43] = lowByte(0);//2010
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			u8ModbusRegisterdwin[44] = 'I';//itemNumber[0];
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2249      	movs	r2, #73	; 0x49
 8008e20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			u8ModbusRegisterdwin[45] = 'T';//itemNumber[1];//2011
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2254      	movs	r2, #84	; 0x54
 8008e28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			u8ModbusRegisterdwin[46] = 'E';//itemNumber[2];
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2245      	movs	r2, #69	; 0x45
 8008e30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			u8ModbusRegisterdwin[47] = 'M';//itemNumber[3];//2012
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	224d      	movs	r2, #77	; 0x4d
 8008e38:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			u8ModbusRegisterdwin[48] = '1';//itemNumber[4];
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2231      	movs	r2, #49	; 0x31
 8008e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			u8ModbusRegisterdwin[49] = 'T';//itemNumber[5];//2013
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2254      	movs	r2, #84	; 0x54
 8008e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			u8ModbusRegisterdwin[50] = 'E';//itemNumber[6];
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2245      	movs	r2, #69	; 0x45
 8008e50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			u8ModbusRegisterdwin[51] = 'S';//itemNumber[7];//2014
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2253      	movs	r2, #83	; 0x53
 8008e58:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			u8ModbusRegisterdwin[52] = '1';//itemNumber[8];
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2231      	movs	r2, #49	; 0x31
 8008e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			u8ModbusRegisterdwin[53] = '2';//itemNumber[9];//2015
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2232      	movs	r2, #50	; 0x32
 8008e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			noOfDataDwin=54;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2236      	movs	r2, #54	; 0x36
 8008e70:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			noOfDataDwin=36;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2224      	movs	r2, #36	; 0x24
 8008e78:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
   			Cntid_dwin=1;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		break;
 8008e84:	e06b      	b.n	8008f5e <_ZN7Dwinhmi9dwinFrameEv+0x2de>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	225a      	movs	r2, #90	; 0x5a
 8008e8a:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	22a5      	movs	r2, #165	; 0xa5
 8008e90:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	220f      	movs	r2, #15
 8008e96:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2282      	movs	r2, #130	; 0x82
 8008e9c:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x20;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x27;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2227      	movs	r2, #39	; 0x27
 8008ea8:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = highByte(espMacAdress[0]);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	729a      	strb	r2, [r3, #10]
			u8ModbusRegisterdwin[7] = lowByte(espMacAdress[0]);
 8008eb0:	4b3f      	ldr	r3, [pc, #252]	; (8008fb0 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	72da      	strb	r2, [r3, #11]
			u8ModbusRegisterdwin[8] = highByte(espMacAdress[1]);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	731a      	strb	r2, [r3, #12]
			u8ModbusRegisterdwin[9] = lowByte(espMacAdress[1]);
 8008ebe:	4b3c      	ldr	r3, [pc, #240]	; (8008fb0 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008ec0:	785a      	ldrb	r2, [r3, #1]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	735a      	strb	r2, [r3, #13]
			u8ModbusRegisterdwin[10] = highByte(espMacAdress[2]);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	739a      	strb	r2, [r3, #14]
			u8ModbusRegisterdwin[11] = lowByte(espMacAdress[2]);
 8008ecc:	4b38      	ldr	r3, [pc, #224]	; (8008fb0 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008ece:	789a      	ldrb	r2, [r3, #2]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	73da      	strb	r2, [r3, #15]
			u8ModbusRegisterdwin[12] = highByte(espMacAdress[3]);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	741a      	strb	r2, [r3, #16]
			u8ModbusRegisterdwin[13] = lowByte(espMacAdress[3]);
 8008eda:	4b35      	ldr	r3, [pc, #212]	; (8008fb0 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008edc:	78da      	ldrb	r2, [r3, #3]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	745a      	strb	r2, [r3, #17]
			u8ModbusRegisterdwin[14] = highByte(espMacAdress[4]);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	749a      	strb	r2, [r3, #18]
			u8ModbusRegisterdwin[15] = lowByte(espMacAdress[4]);
 8008ee8:	4b31      	ldr	r3, [pc, #196]	; (8008fb0 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008eea:	791a      	ldrb	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	74da      	strb	r2, [r3, #19]
			u8ModbusRegisterdwin[16] = highByte(espMacAdress[5]);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	751a      	strb	r2, [r3, #20]
			u8ModbusRegisterdwin[17] = lowByte(espMacAdress[5]);
 8008ef6:	4b2e      	ldr	r3, [pc, #184]	; (8008fb0 <_ZN7Dwinhmi9dwinFrameEv+0x330>)
 8008ef8:	795a      	ldrb	r2, [r3, #5]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	755a      	strb	r2, [r3, #21]
			noOfDataDwin=18;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2212      	movs	r2, #18
 8008f02:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			Cntid_dwin=2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		break;
 8008f0e:	e026      	b.n	8008f5e <_ZN7Dwinhmi9dwinFrameEv+0x2de>
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	225a      	movs	r2, #90	; 0x5a
 8008f14:	711a      	strb	r2, [r3, #4]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	22a5      	movs	r2, #165	; 0xa5
 8008f1a:	715a      	strb	r2, [r3, #5]
			u8ModbusRegisterdwin[2] = multipleReadRequestH;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2204      	movs	r2, #4
 8008f20:	719a      	strb	r2, [r3, #6]
			u8ModbusRegisterdwin[3] = multipleReadRequestL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2283      	movs	r2, #131	; 0x83
 8008f26:	71da      	strb	r2, [r3, #7]
			u8ModbusRegisterdwin[4] = 0x30;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2230      	movs	r2, #48	; 0x30
 8008f2c:	721a      	strb	r2, [r3, #8]
			u8ModbusRegisterdwin[5] = 0x00;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	725a      	strb	r2, [r3, #9]
			u8ModbusRegisterdwin[6] = 0x22;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2222      	movs	r2, #34	; 0x22
 8008f38:	729a      	strb	r2, [r3, #10]
			memset(DwinDatabuffer,0,255);
 8008f3a:	22ff      	movs	r2, #255	; 0xff
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	481d      	ldr	r0, [pc, #116]	; (8008fb4 <_ZN7Dwinhmi9dwinFrameEv+0x334>)
 8008f40:	f008 f824 	bl	8010f8c <memset>
			Dwinseq=0;
 8008f44:	4b1c      	ldr	r3, [pc, #112]	; (8008fb8 <_ZN7Dwinhmi9dwinFrameEv+0x338>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]
			noOfDataDwin=7;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2207      	movs	r2, #7
 8008f4e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			Cntid_dwin=0;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		break;
 8008f5a:	e000      	b.n	8008f5e <_ZN7Dwinhmi9dwinFrameEv+0x2de>
		break;
 8008f5c:	bf00      	nop
	}
	HAL_UART_Transmit_IT(&huart2,u8ModbusRegisterdwin,noOfDataDwin);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	4813      	ldr	r0, [pc, #76]	; (8008fbc <_ZN7Dwinhmi9dwinFrameEv+0x33c>)
 8008f6e:	f006 fc6f 	bl	800f850 <HAL_UART_Transmit_IT>
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000a5d 	.word	0x20000a5d
 8008f80:	20000a5e 	.word	0x20000a5e
 8008f84:	20000a5f 	.word	0x20000a5f
 8008f88:	20000a59 	.word	0x20000a59
 8008f8c:	20000a5a 	.word	0x20000a5a
 8008f90:	20000a5b 	.word	0x20000a5b
 8008f94:	200000fe 	.word	0x200000fe
 8008f98:	20000100 	.word	0x20000100
 8008f9c:	200001bc 	.word	0x200001bc
 8008fa0:	2000077a 	.word	0x2000077a
 8008fa4:	20000776 	.word	0x20000776
 8008fa8:	2000010f 	.word	0x2000010f
 8008fac:	2000010c 	.word	0x2000010c
 8008fb0:	20000134 	.word	0x20000134
 8008fb4:	2000029c 	.word	0x2000029c
 8008fb8:	20000813 	.word	0x20000813
 8008fbc:	200004f8 	.word	0x200004f8

08008fc0 <_ZN7Dwinhmi11dwinDecoderEv>:


void Dwinhmi::dwinDecoder()
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	if(!Rx_Dwin_Complete){return;}
 8008fc8:	4b94      	ldr	r3, [pc, #592]	; (800921c <_ZN7Dwinhmi11dwinDecoderEv+0x25c>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 818f 	beq.w	80092f0 <_ZN7Dwinhmi11dwinDecoderEv+0x330>
	Rx_Dwin_Complete=0;
 8008fd2:	4b92      	ldr	r3, [pc, #584]	; (800921c <_ZN7Dwinhmi11dwinDecoderEv+0x25c>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]

	dwinRxFramValidKey = ((DwinDatabuffer[1]<<8)|DwinDatabuffer[2]);
 8008fd8:	4b91      	ldr	r3, [pc, #580]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	b21a      	sxth	r2, r3
 8008fe0:	4b8f      	ldr	r3, [pc, #572]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008fe2:	789b      	ldrb	r3, [r3, #2]
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	b21b      	sxth	r3, r3
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	4b8d      	ldr	r3, [pc, #564]	; (8009224 <_ZN7Dwinhmi11dwinDecoderEv+0x264>)
 8008fee:	801a      	strh	r2, [r3, #0]
	dwinRxFramValid1 = ((DwinDatabuffer[23]<<8)|DwinDatabuffer[24]);
 8008ff0:	4b8b      	ldr	r3, [pc, #556]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008ff2:	7ddb      	ldrb	r3, [r3, #23]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	b21a      	sxth	r2, r3
 8008ff8:	4b89      	ldr	r3, [pc, #548]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8008ffa:	7e1b      	ldrb	r3, [r3, #24]
 8008ffc:	b21b      	sxth	r3, r3
 8008ffe:	4313      	orrs	r3, r2
 8009000:	b21b      	sxth	r3, r3
 8009002:	b29a      	uxth	r2, r3
 8009004:	4b88      	ldr	r3, [pc, #544]	; (8009228 <_ZN7Dwinhmi11dwinDecoderEv+0x268>)
 8009006:	801a      	strh	r2, [r3, #0]
	dwinRxFramValid2 = ((DwinDatabuffer[51]<<8)|DwinDatabuffer[52]);
 8009008:	4b85      	ldr	r3, [pc, #532]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 800900a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	b21a      	sxth	r2, r3
 8009012:	4b83      	ldr	r3, [pc, #524]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8009014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009018:	b21b      	sxth	r3, r3
 800901a:	4313      	orrs	r3, r2
 800901c:	b21b      	sxth	r3, r3
 800901e:	b29a      	uxth	r2, r3
 8009020:	4b82      	ldr	r3, [pc, #520]	; (800922c <_ZN7Dwinhmi11dwinDecoderEv+0x26c>)
 8009022:	801a      	strh	r2, [r3, #0]
	if((dwinRxFramValid1 > 0)&&(dwinRxFramValid2 > 0)&&(dwinRxFramValidKey==55)){
 8009024:	4b80      	ldr	r3, [pc, #512]	; (8009228 <_ZN7Dwinhmi11dwinDecoderEv+0x268>)
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 8162 	beq.w	80092f2 <_ZN7Dwinhmi11dwinDecoderEv+0x332>
 800902e:	4b7f      	ldr	r3, [pc, #508]	; (800922c <_ZN7Dwinhmi11dwinDecoderEv+0x26c>)
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 815d 	beq.w	80092f2 <_ZN7Dwinhmi11dwinDecoderEv+0x332>
 8009038:	4b7a      	ldr	r3, [pc, #488]	; (8009224 <_ZN7Dwinhmi11dwinDecoderEv+0x264>)
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	2b37      	cmp	r3, #55	; 0x37
 800903e:	f040 8158 	bne.w	80092f2 <_ZN7Dwinhmi11dwinDecoderEv+0x332>
		dwinRxFramValidKey=0;
 8009042:	4b78      	ldr	r3, [pc, #480]	; (8009224 <_ZN7Dwinhmi11dwinDecoderEv+0x264>)
 8009044:	2200      	movs	r2, #0
 8009046:	801a      	strh	r2, [r3, #0]
		machineId  = ((DwinDatabuffer[23]<<8)|DwinDatabuffer[24]);
 8009048:	4b75      	ldr	r3, [pc, #468]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 800904a:	7ddb      	ldrb	r3, [r3, #23]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	b21a      	sxth	r2, r3
 8009050:	4b73      	ldr	r3, [pc, #460]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8009052:	7e1b      	ldrb	r3, [r3, #24]
 8009054:	b21b      	sxth	r3, r3
 8009056:	4313      	orrs	r3, r2
 8009058:	b21b      	sxth	r3, r3
 800905a:	b29a      	uxth	r2, r3
 800905c:	4b74      	ldr	r3, [pc, #464]	; (8009230 <_ZN7Dwinhmi11dwinDecoderEv+0x270>)
 800905e:	801a      	strh	r2, [r3, #0]
		portNumber = ((DwinDatabuffer[51]<<8)|DwinDatabuffer[52]);
 8009060:	4b6f      	ldr	r3, [pc, #444]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8009062:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	b21a      	sxth	r2, r3
 800906a:	4b6d      	ldr	r3, [pc, #436]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 800906c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009070:	b21b      	sxth	r3, r3
 8009072:	4313      	orrs	r3, r2
 8009074:	b21b      	sxth	r3, r3
 8009076:	b29a      	uxth	r2, r3
 8009078:	4b6e      	ldr	r3, [pc, #440]	; (8009234 <_ZN7Dwinhmi11dwinDecoderEv+0x274>)
 800907a:	801a      	strh	r2, [r3, #0]
		memset(serverAddress,0,20);
 800907c:	2214      	movs	r2, #20
 800907e:	2100      	movs	r1, #0
 8009080:	486d      	ldr	r0, [pc, #436]	; (8009238 <_ZN7Dwinhmi11dwinDecoderEv+0x278>)
 8009082:	f007 ff83 	bl	8010f8c <memset>
		memset(userNameWifi,0,20);
 8009086:	2214      	movs	r2, #20
 8009088:	2100      	movs	r1, #0
 800908a:	486c      	ldr	r0, [pc, #432]	; (800923c <_ZN7Dwinhmi11dwinDecoderEv+0x27c>)
 800908c:	f007 ff7e 	bl	8010f8c <memset>
		memset(passwordWifi,0,20);
 8009090:	2214      	movs	r2, #20
 8009092:	2100      	movs	r1, #0
 8009094:	486a      	ldr	r0, [pc, #424]	; (8009240 <_ZN7Dwinhmi11dwinDecoderEv+0x280>)
 8009096:	f007 ff79 	bl	8010f8c <memset>

		for(shiftP=3,len_i=0;shiftP<=22;shiftP++,len_i++){
 800909a:	4b6a      	ldr	r3, [pc, #424]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 800909c:	2203      	movs	r2, #3
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	4b69      	ldr	r3, [pc, #420]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	4b67      	ldr	r3, [pc, #412]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b16      	cmp	r3, #22
 80090ac:	d822      	bhi.n	80090f4 <_ZN7Dwinhmi11dwinDecoderEv+0x134>
			if(DwinDatabuffer[shiftP] == 0xff){lengthOfServerAdd = len_i;break;}
 80090ae:	4b65      	ldr	r3, [pc, #404]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	4b5a      	ldr	r3, [pc, #360]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 80090b6:	5c9b      	ldrb	r3, [r3, r2]
 80090b8:	2bff      	cmp	r3, #255	; 0xff
 80090ba:	d104      	bne.n	80090c6 <_ZN7Dwinhmi11dwinDecoderEv+0x106>
 80090bc:	4b62      	ldr	r3, [pc, #392]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80090be:	781a      	ldrb	r2, [r3, #0]
 80090c0:	4b62      	ldr	r3, [pc, #392]	; (800924c <_ZN7Dwinhmi11dwinDecoderEv+0x28c>)
 80090c2:	701a      	strb	r2, [r3, #0]
 80090c4:	e016      	b.n	80090f4 <_ZN7Dwinhmi11dwinDecoderEv+0x134>
			serverAddress[len_i] = DwinDatabuffer[shiftP];
 80090c6:	4b5f      	ldr	r3, [pc, #380]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	4619      	mov	r1, r3
 80090cc:	4b5e      	ldr	r3, [pc, #376]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	461a      	mov	r2, r3
 80090d2:	4b53      	ldr	r3, [pc, #332]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 80090d4:	5c59      	ldrb	r1, [r3, r1]
 80090d6:	4b58      	ldr	r3, [pc, #352]	; (8009238 <_ZN7Dwinhmi11dwinDecoderEv+0x278>)
 80090d8:	5499      	strb	r1, [r3, r2]
		for(shiftP=3,len_i=0;shiftP<=22;shiftP++,len_i++){
 80090da:	4b5a      	ldr	r3, [pc, #360]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	3301      	adds	r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b58      	ldr	r3, [pc, #352]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	4b58      	ldr	r3, [pc, #352]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	3301      	adds	r3, #1
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	4b56      	ldr	r3, [pc, #344]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80090f0:	701a      	strb	r2, [r3, #0]
 80090f2:	e7d8      	b.n	80090a6 <_ZN7Dwinhmi11dwinDecoderEv+0xe6>
		}
		for(shiftP=27,len_i=0;shiftP<=49;shiftP++,len_i++){
 80090f4:	4b53      	ldr	r3, [pc, #332]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 80090f6:	221b      	movs	r2, #27
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	4b53      	ldr	r3, [pc, #332]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	4b50      	ldr	r3, [pc, #320]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b31      	cmp	r3, #49	; 0x31
 8009106:	d822      	bhi.n	800914e <_ZN7Dwinhmi11dwinDecoderEv+0x18e>
			if(DwinDatabuffer[shiftP] == 0xff){lengthOfUserName = len_i;break;}
 8009108:	4b4e      	ldr	r3, [pc, #312]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	4b44      	ldr	r3, [pc, #272]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8009110:	5c9b      	ldrb	r3, [r3, r2]
 8009112:	2bff      	cmp	r3, #255	; 0xff
 8009114:	d104      	bne.n	8009120 <_ZN7Dwinhmi11dwinDecoderEv+0x160>
 8009116:	4b4c      	ldr	r3, [pc, #304]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	4b4d      	ldr	r3, [pc, #308]	; (8009250 <_ZN7Dwinhmi11dwinDecoderEv+0x290>)
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e016      	b.n	800914e <_ZN7Dwinhmi11dwinDecoderEv+0x18e>
			userNameWifi[len_i] = DwinDatabuffer[shiftP];
 8009120:	4b48      	ldr	r3, [pc, #288]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	4b48      	ldr	r3, [pc, #288]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	4b3c      	ldr	r3, [pc, #240]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 800912e:	5c59      	ldrb	r1, [r3, r1]
 8009130:	4b42      	ldr	r3, [pc, #264]	; (800923c <_ZN7Dwinhmi11dwinDecoderEv+0x27c>)
 8009132:	5499      	strb	r1, [r3, r2]
		for(shiftP=27,len_i=0;shiftP<=49;shiftP++,len_i++){
 8009134:	4b43      	ldr	r3, [pc, #268]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	4b41      	ldr	r3, [pc, #260]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	4b41      	ldr	r3, [pc, #260]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	3301      	adds	r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	4b3f      	ldr	r3, [pc, #252]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 800914a:	701a      	strb	r2, [r3, #0]
 800914c:	e7d8      	b.n	8009100 <_ZN7Dwinhmi11dwinDecoderEv+0x140>
		}
		for(shiftP=53,len_i=0;shiftP<=70;shiftP++,len_i++){
 800914e:	4b3d      	ldr	r3, [pc, #244]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009150:	2235      	movs	r2, #53	; 0x35
 8009152:	701a      	strb	r2, [r3, #0]
 8009154:	4b3c      	ldr	r3, [pc, #240]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009156:	2200      	movs	r2, #0
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	4b3a      	ldr	r3, [pc, #232]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b46      	cmp	r3, #70	; 0x46
 8009160:	d822      	bhi.n	80091a8 <_ZN7Dwinhmi11dwinDecoderEv+0x1e8>
			if(DwinDatabuffer[shiftP] == 0xff){lengthOfPassword = len_i;break;}
 8009162:	4b38      	ldr	r3, [pc, #224]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	4b2d      	ldr	r3, [pc, #180]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 800916a:	5c9b      	ldrb	r3, [r3, r2]
 800916c:	2bff      	cmp	r3, #255	; 0xff
 800916e:	d104      	bne.n	800917a <_ZN7Dwinhmi11dwinDecoderEv+0x1ba>
 8009170:	4b35      	ldr	r3, [pc, #212]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009172:	781a      	ldrb	r2, [r3, #0]
 8009174:	4b37      	ldr	r3, [pc, #220]	; (8009254 <_ZN7Dwinhmi11dwinDecoderEv+0x294>)
 8009176:	701a      	strb	r2, [r3, #0]
 8009178:	e016      	b.n	80091a8 <_ZN7Dwinhmi11dwinDecoderEv+0x1e8>
			passwordWifi[len_i] = DwinDatabuffer[shiftP];
 800917a:	4b32      	ldr	r3, [pc, #200]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	4b31      	ldr	r3, [pc, #196]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	4b26      	ldr	r3, [pc, #152]	; (8009220 <_ZN7Dwinhmi11dwinDecoderEv+0x260>)
 8009188:	5c59      	ldrb	r1, [r3, r1]
 800918a:	4b2d      	ldr	r3, [pc, #180]	; (8009240 <_ZN7Dwinhmi11dwinDecoderEv+0x280>)
 800918c:	5499      	strb	r1, [r3, r2]
		for(shiftP=53,len_i=0;shiftP<=70;shiftP++,len_i++){
 800918e:	4b2d      	ldr	r3, [pc, #180]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	3301      	adds	r3, #1
 8009194:	b2da      	uxtb	r2, r3
 8009196:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <_ZN7Dwinhmi11dwinDecoderEv+0x284>)
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	4b2b      	ldr	r3, [pc, #172]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	4b29      	ldr	r3, [pc, #164]	; (8009248 <_ZN7Dwinhmi11dwinDecoderEv+0x288>)
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	e7d8      	b.n	800915a <_ZN7Dwinhmi11dwinDecoderEv+0x19a>
		}

		if(machineId != machineIdK1){
 80091a8:	4b21      	ldr	r3, [pc, #132]	; (8009230 <_ZN7Dwinhmi11dwinDecoderEv+0x270>)
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	4b2a      	ldr	r3, [pc, #168]	; (8009258 <_ZN7Dwinhmi11dwinDecoderEv+0x298>)
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d006      	beq.n	80091c2 <_ZN7Dwinhmi11dwinDecoderEv+0x202>
			updateDwindata = 1;
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <_ZN7Dwinhmi11dwinDecoderEv+0x29c>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	701a      	strb	r2, [r3, #0]
			machineIdK1 = machineId;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <_ZN7Dwinhmi11dwinDecoderEv+0x270>)
 80091bc:	881a      	ldrh	r2, [r3, #0]
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <_ZN7Dwinhmi11dwinDecoderEv+0x298>)
 80091c0:	801a      	strh	r2, [r3, #0]
		}
		if(portNumber != portNumberK1){
 80091c2:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <_ZN7Dwinhmi11dwinDecoderEv+0x274>)
 80091c4:	881a      	ldrh	r2, [r3, #0]
 80091c6:	4b26      	ldr	r3, [pc, #152]	; (8009260 <_ZN7Dwinhmi11dwinDecoderEv+0x2a0>)
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d006      	beq.n	80091dc <_ZN7Dwinhmi11dwinDecoderEv+0x21c>
			updateDwindata = 1;
 80091ce:	4b23      	ldr	r3, [pc, #140]	; (800925c <_ZN7Dwinhmi11dwinDecoderEv+0x29c>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
			portNumberK1 = portNumber;
 80091d4:	4b17      	ldr	r3, [pc, #92]	; (8009234 <_ZN7Dwinhmi11dwinDecoderEv+0x274>)
 80091d6:	881a      	ldrh	r2, [r3, #0]
 80091d8:	4b21      	ldr	r3, [pc, #132]	; (8009260 <_ZN7Dwinhmi11dwinDecoderEv+0x2a0>)
 80091da:	801a      	strh	r2, [r3, #0]
		}

		for(CheckP=0;CheckP<lengthOfServerAdd;CheckP++){
 80091dc:	4b21      	ldr	r3, [pc, #132]	; (8009264 <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	4b20      	ldr	r3, [pc, #128]	; (8009264 <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	4b19      	ldr	r3, [pc, #100]	; (800924c <_ZN7Dwinhmi11dwinDecoderEv+0x28c>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d240      	bcs.n	8009270 <_ZN7Dwinhmi11dwinDecoderEv+0x2b0>
				if(serverAddress[CheckP] != serverAddressK1[CheckP]){
 80091ee:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	4b10      	ldr	r3, [pc, #64]	; (8009238 <_ZN7Dwinhmi11dwinDecoderEv+0x278>)
 80091f6:	5c9a      	ldrb	r2, [r3, r2]
 80091f8:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	4619      	mov	r1, r3
 80091fe:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <_ZN7Dwinhmi11dwinDecoderEv+0x2a8>)
 8009200:	5c5b      	ldrb	r3, [r3, r1]
 8009202:	429a      	cmp	r2, r3
 8009204:	d003      	beq.n	800920e <_ZN7Dwinhmi11dwinDecoderEv+0x24e>
				updateCloudConn = 1;
 8009206:	4b19      	ldr	r3, [pc, #100]	; (800926c <_ZN7Dwinhmi11dwinDecoderEv+0x2ac>)
 8009208:	2201      	movs	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]
				break;
 800920c:	e030      	b.n	8009270 <_ZN7Dwinhmi11dwinDecoderEv+0x2b0>
		for(CheckP=0;CheckP<lengthOfServerAdd;CheckP++){
 800920e:	4b15      	ldr	r3, [pc, #84]	; (8009264 <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	b2da      	uxtb	r2, r3
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <_ZN7Dwinhmi11dwinDecoderEv+0x2a4>)
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	e7e2      	b.n	80091e2 <_ZN7Dwinhmi11dwinDecoderEv+0x222>
 800921c:	20000299 	.word	0x20000299
 8009220:	2000029c 	.word	0x2000029c
 8009224:	2000081a 	.word	0x2000081a
 8009228:	2000080e 	.word	0x2000080e
 800922c:	20000810 	.word	0x20000810
 8009230:	2000078a 	.word	0x2000078a
 8009234:	2000078e 	.word	0x2000078e
 8009238:	20000794 	.word	0x20000794
 800923c:	200007bc 	.word	0x200007bc
 8009240:	200007e4 	.word	0x200007e4
 8009244:	2000080c 	.word	0x2000080c
 8009248:	2000080d 	.word	0x2000080d
 800924c:	20000814 	.word	0x20000814
 8009250:	20000815 	.word	0x20000815
 8009254:	20000816 	.word	0x20000816
 8009258:	2000078c 	.word	0x2000078c
 800925c:	20000812 	.word	0x20000812
 8009260:	20000790 	.word	0x20000790
 8009264:	20000817 	.word	0x20000817
 8009268:	200007a8 	.word	0x200007a8
 800926c:	20000818 	.word	0x20000818
			}
		}
		for(CheckP=0;CheckP<lengthOfUserName;CheckP++){
 8009270:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	4b20      	ldr	r3, [pc, #128]	; (80092fc <_ZN7Dwinhmi11dwinDecoderEv+0x33c>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d216      	bcs.n	80092b0 <_ZN7Dwinhmi11dwinDecoderEv+0x2f0>
						if(userNameWifi[CheckP] != userNameWifiK1[CheckP]){
 8009282:	4b1d      	ldr	r3, [pc, #116]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <_ZN7Dwinhmi11dwinDecoderEv+0x340>)
 800928a:	5c9a      	ldrb	r2, [r3, r2]
 800928c:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	4619      	mov	r1, r3
 8009292:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <_ZN7Dwinhmi11dwinDecoderEv+0x344>)
 8009294:	5c5b      	ldrb	r3, [r3, r1]
 8009296:	429a      	cmp	r2, r3
 8009298:	d003      	beq.n	80092a2 <_ZN7Dwinhmi11dwinDecoderEv+0x2e2>
						updateCloudConn = 1;
 800929a:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <_ZN7Dwinhmi11dwinDecoderEv+0x348>)
 800929c:	2201      	movs	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
						break;
 80092a0:	e006      	b.n	80092b0 <_ZN7Dwinhmi11dwinDecoderEv+0x2f0>
		for(CheckP=0;CheckP<lengthOfUserName;CheckP++){
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	3301      	adds	r3, #1
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	e7e2      	b.n	8009276 <_ZN7Dwinhmi11dwinDecoderEv+0x2b6>
			}
		}
		for(CheckP=0;CheckP<lengthOfPassword;CheckP++){
 80092b0:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	4b14      	ldr	r3, [pc, #80]	; (800930c <_ZN7Dwinhmi11dwinDecoderEv+0x34c>)
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d217      	bcs.n	80092f2 <_ZN7Dwinhmi11dwinDecoderEv+0x332>
						if(passwordWifi[CheckP] != passwordWifiK1[CheckP]){
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	4b11      	ldr	r3, [pc, #68]	; (8009310 <_ZN7Dwinhmi11dwinDecoderEv+0x350>)
 80092ca:	5c9a      	ldrb	r2, [r3, r2]
 80092cc:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	4619      	mov	r1, r3
 80092d2:	4b10      	ldr	r3, [pc, #64]	; (8009314 <_ZN7Dwinhmi11dwinDecoderEv+0x354>)
 80092d4:	5c5b      	ldrb	r3, [r3, r1]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d003      	beq.n	80092e2 <_ZN7Dwinhmi11dwinDecoderEv+0x322>
						updateCloudConn = 1;
 80092da:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <_ZN7Dwinhmi11dwinDecoderEv+0x348>)
 80092dc:	2201      	movs	r2, #1
 80092de:	701a      	strb	r2, [r3, #0]
						break;
 80092e0:	e007      	b.n	80092f2 <_ZN7Dwinhmi11dwinDecoderEv+0x332>
		for(CheckP=0;CheckP<lengthOfPassword;CheckP++){
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	3301      	adds	r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <_ZN7Dwinhmi11dwinDecoderEv+0x338>)
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e7e2      	b.n	80092b6 <_ZN7Dwinhmi11dwinDecoderEv+0x2f6>
	if(!Rx_Dwin_Complete){return;}
 80092f0:	bf00      	nop
			}
		}
  }
}
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000817 	.word	0x20000817
 80092fc:	20000815 	.word	0x20000815
 8009300:	200007bc 	.word	0x200007bc
 8009304:	200007d0 	.word	0x200007d0
 8009308:	20000818 	.word	0x20000818
 800930c:	20000816 	.word	0x20000816
 8009310:	200007e4 	.word	0x200007e4
 8009314:	200007f8 	.word	0x200007f8

08009318 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	4a04      	ldr	r2, [pc, #16]	; (8009334 <_ZN10W5500ClassC1Ev+0x1c>)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	08011dc8 	.word	0x08011dc8

08009338 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	4a04      	ldr	r2, [pc, #16]	; (8009354 <_ZN10W5500ClassD1Ev+0x1c>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	08011dc8 	.word	0x08011dc8

08009358 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
}
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff ffe9 	bl	8009338 <_ZN10W5500ClassD1Ev>
 8009366:	2104      	movs	r1, #4
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f007 fdca 	bl	8010f02 <_ZdlPvj>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <_Z41__static_initialization_and_destruction_0ii>:
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d107      	bne.n	8009398 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800938e:	4293      	cmp	r3, r2
 8009390:	d102      	bne.n	8009398 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8009392:	4809      	ldr	r0, [pc, #36]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009394:	f7ff ffc0 	bl	8009318 <_ZN10W5500ClassC1Ev>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d107      	bne.n	80093ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d102      	bne.n	80093ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 80093a8:	4803      	ldr	r0, [pc, #12]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80093aa:	f7ff ffc5 	bl	8009338 <_ZN10W5500ClassD1Ev>
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	2000081c 	.word	0x2000081c

080093bc <_GLOBAL__sub_I_w5500>:
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
 80093c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093c4:	2001      	movs	r0, #1
 80093c6:	f7ff ffd7 	bl	8009378 <_Z41__static_initialization_and_destruction_0ii>
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_GLOBAL__sub_D_w5500>:
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093d4:	2000      	movs	r0, #0
 80093d6:	f7ff ffcf 	bl	8009378 <_Z41__static_initialization_and_destruction_0ii>
 80093da:	bd80      	pop	{r7, pc}

080093dc <_ZN9ModbusrtuC1Ev>:
#include "Modbus_types.h"

extern uint16_t temperatureSetOL,temperaturehighSetOL,temperatureLowSetOL;

uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <_ZN9ModbusrtuC1Ev+0x44>)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	761a      	strb	r2, [r3, #24]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a0c      	ldr	r2, [pc, #48]	; (8009424 <_ZN9ModbusrtuC1Ev+0x48>)
 80093f4:	3319      	adds	r3, #25
 80093f6:	4611      	mov	r1, r2
 80093f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093fc:	4618      	mov	r0, r3
 80093fe:	f007 fdb7 	bl	8010f70 <memcpy>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <_ZN9ModbusrtuC1Ev+0x4c>)
 8009406:	f203 1319 	addw	r3, r3, #281	; 0x119
 800940a:	4611      	mov	r1, r2
 800940c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009410:	4618      	mov	r0, r3
 8009412:	f007 fdad 	bl	8010f70 <memcpy>
	// TODO Auto-generated constructor stub

}
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08011dd8 	.word	0x08011dd8
 8009424:	080118d0 	.word	0x080118d0
 8009428:	080119d0 	.word	0x080119d0

0800942c <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	4a04      	ldr	r2, [pc, #16]	; (8009448 <_ZN9ModbusrtuD1Ev+0x1c>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	08011dd8 	.word	0x08011dd8

0800944c <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
}
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ffe9 	bl	800942c <_ZN9ModbusrtuD1Ev>
 800945a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f007 fd4f 	bl	8010f02 <_ZdlPvj>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	//read_rxint_set out_read_rxint_set;
	switch(Cntid)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	791b      	ldrb	r3, [r3, #4]
 800947c:	2b03      	cmp	r3, #3
 800947e:	f200 8135 	bhi.w	80096ec <_ZN9Modbusrtu21ModbusReadTransactionEv+0x27c>
 8009482:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x18>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	08009499 	.word	0x08009499
 800948c:	08009529 	.word	0x08009529
 8009490:	080095b3 	.word	0x080095b3
 8009494:	0800963d 	.word	0x0800963d
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	7e1a      	ldrb	r2, [r3, #24]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x03;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2203      	movs	r2, #3
 80094a4:	719a      	strb	r2, [r3, #6]
		_u16ReadAddress 	= 0x00;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x04;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2204      	movs	r2, #4
 80094b0:	819a      	strh	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	795a      	ldrb	r2, [r3, #5]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	799a      	ldrb	r2, [r3, #6]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	891b      	ldrh	r3, [r3, #8]
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	891b      	ldrh	r3, [r3, #8]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadQty & 0xff00)>>8);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadQty & 0x00ff);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	899b      	ldrh	r3, [r3, #12]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3310      	adds	r3, #16
 80094f6:	2206      	movs	r2, #6
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f922 	bl	8009744 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	89db      	ldrh	r3, [r3, #14]
 800950c:	b2da      	uxtb	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	89db      	ldrh	r3, [r3, #14]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	b29b      	uxth	r3, r3
 800951a:	b2da      	uxtb	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	75da      	strb	r2, [r3, #23]

		Cntid=1;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	711a      	strb	r2, [r3, #4]
	break;
 8009526:	e0e8      	b.n	80096fa <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 1:
		_u8MBSlave 			= mTemperatureSensorId;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7e1a      	ldrb	r2, [r3, #24]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x06;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2206      	movs	r2, #6
 8009534:	719a      	strb	r2, [r3, #6]
		_u16WriteAddress 	= 0x00;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	815a      	strh	r2, [r3, #10]
		u8ModbusRegister[0] = _u8MBSlave;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	795a      	ldrb	r2, [r3, #5]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	799a      	ldrb	r2, [r3, #6]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	895b      	ldrh	r3, [r3, #10]
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	b29b      	uxth	r3, r3
 8009554:	b2da      	uxtb	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	895b      	ldrh	r3, [r3, #10]
 800955e:	b2da      	uxtb	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((temperatureSetOL & 0xff00)>>8);
 8009564:	4b6a      	ldr	r3, [pc, #424]	; (8009710 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	0a1b      	lsrs	r3, r3, #8
 800956a:	b29b      	uxth	r3, r3
 800956c:	b2da      	uxtb	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(temperatureSetOL & 0x00ff);
 8009572:	4b67      	ldr	r3, [pc, #412]	; (8009710 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b2da      	uxtb	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3310      	adds	r3, #16
 8009580:	2206      	movs	r2, #6
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f8dd 	bl	8009744 <_ZN9Modbusrtu11ASCChecksumEPhh>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	89db      	ldrh	r3, [r3, #14]
 8009596:	b2da      	uxtb	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	89db      	ldrh	r3, [r3, #14]
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	75da      	strb	r2, [r3, #23]
		Cntid=2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	711a      	strb	r2, [r3, #4]
	break;
 80095b0:	e0a3      	b.n	80096fa <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 2:
			_u8MBSlave 			= mTemperatureSensorId;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	7e1a      	ldrb	r2, [r3, #24]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2206      	movs	r2, #6
 80095be:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x01;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	795a      	ldrb	r2, [r3, #5]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	799a      	ldrb	r2, [r3, #6]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	895b      	ldrh	r3, [r3, #10]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	b29b      	uxth	r3, r3
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	895b      	ldrh	r3, [r3, #10]
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperaturehighSetOL & 0xff00)>>8);
 80095ee:	4b49      	ldr	r3, [pc, #292]	; (8009714 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperaturehighSetOL & 0x00ff);
 80095fc:	4b45      	ldr	r3, [pc, #276]	; (8009714 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b2da      	uxtb	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3310      	adds	r3, #16
 800960a:	2206      	movs	r2, #6
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f898 	bl	8009744 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	89db      	ldrh	r3, [r3, #14]
 8009620:	b2da      	uxtb	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	89db      	ldrh	r3, [r3, #14]
 800962a:	0a1b      	lsrs	r3, r3, #8
 800962c:	b29b      	uxth	r3, r3
 800962e:	b2da      	uxtb	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	75da      	strb	r2, [r3, #23]
			Cntid=3;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2203      	movs	r2, #3
 8009638:	711a      	strb	r2, [r3, #4]
		break;
 800963a:	e05e      	b.n	80096fa <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 3:
			_u8MBSlave 			= mTemperatureSensorId;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	7e1a      	ldrb	r2, [r3, #24]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2206      	movs	r2, #6
 8009648:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x02;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	795a      	ldrb	r2, [r3, #5]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	799a      	ldrb	r2, [r3, #6]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	895b      	ldrh	r3, [r3, #10]
 8009664:	0a1b      	lsrs	r3, r3, #8
 8009666:	b29b      	uxth	r3, r3
 8009668:	b2da      	uxtb	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	895b      	ldrh	r3, [r3, #10]
 8009672:	b2da      	uxtb	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperatureLowSetOL & 0xff00)>>8);
 8009678:	4b27      	ldr	r3, [pc, #156]	; (8009718 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	b29b      	uxth	r3, r3
 8009680:	b2da      	uxtb	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperatureLowSetOL & 0x00ff);
 8009686:	4b24      	ldr	r3, [pc, #144]	; (8009718 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b2da      	uxtb	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3310      	adds	r3, #16
 8009694:	2206      	movs	r2, #6
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f853 	bl	8009744 <_ZN9Modbusrtu11ASCChecksumEPhh>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	89db      	ldrh	r3, [r3, #14]
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	89db      	ldrh	r3, [r3, #14]
 80096b4:	0a1b      	lsrs	r3, r3, #8
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	75da      	strb	r2, [r3, #23]
			Cntid=0;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	711a      	strb	r2, [r3, #4]
			if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7e1b      	ldrb	r3, [r3, #24]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d103      	bne.n	80096d4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x264>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	761a      	strb	r2, [r3, #24]
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
			else{mTemperatureSensorId=1;}
		break;
 80096d2:	e012      	b.n	80096fa <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	7e1b      	ldrb	r3, [r3, #24]
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d103      	bne.n	80096e4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x274>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2203      	movs	r2, #3
 80096e0:	761a      	strb	r2, [r3, #24]
		break;
 80096e2:	e00a      	b.n	80096fa <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else{mTemperatureSensorId=1;}
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	761a      	strb	r2, [r3, #24]
		break;
 80096ea:	e006      	b.n	80096fa <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	default:
		Cntid=0;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	761a      	strb	r2, [r3, #24]
	break;
 80096f8:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,sizeof(u8ModbusRegister));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3310      	adds	r3, #16
 80096fe:	2208      	movs	r2, #8
 8009700:	4619      	mov	r1, r3
 8009702:	4806      	ldr	r0, [pc, #24]	; (800971c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2ac>)
 8009704:	f006 f8a4 	bl	800f850 <HAL_UART_Transmit_IT>

}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	200000f6 	.word	0x200000f6
 8009714:	200000f8 	.word	0x200000f8
 8009718:	200000fa 	.word	0x200000fa
 800971c:	20000474 	.word	0x20000474

08009720 <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
 8009728:	220d      	movs	r2, #13
 800972a:	4904      	ldr	r1, [pc, #16]	; (800973c <HAL_UART_TxCpltCallback+0x1c>)
 800972c:	4804      	ldr	r0, [pc, #16]	; (8009740 <HAL_UART_TxCpltCallback+0x20>)
 800972e:	f006 f8fd 	bl	800f92c <HAL_UART_Receive_IT>
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000820 	.word	0x20000820
 8009740:	20000474 	.word	0x20000474

08009744 <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8009752:	23ff      	movs	r3, #255	; 0xff
 8009754:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 8009756:	23ff      	movs	r3, #255	; 0xff
 8009758:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]
 8009762:	7dfa      	ldrb	r2, [r7, #23]
 8009764:	7d3b      	ldrb	r3, [r7, #20]
 8009766:	429a      	cmp	r2, r3
 8009768:	d217      	bcs.n	800979a <_ZN9Modbusrtu11ASCChecksumEPhh+0x56>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	60ba      	str	r2, [r7, #8]
 8009770:	781a      	ldrb	r2, [r3, #0]
 8009772:	7dbb      	ldrb	r3, [r7, #22]
 8009774:	4053      	eors	r3, r2
 8009776:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8009778:	7cfb      	ldrb	r3, [r7, #19]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	4413      	add	r3, r2
 800977e:	7e5a      	ldrb	r2, [r3, #25]
 8009780:	7d7b      	ldrb	r3, [r7, #21]
 8009782:	4053      	eors	r3, r2
 8009784:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 8009786:	7cfb      	ldrb	r3, [r7, #19]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	4413      	add	r3, r2
 800978c:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8009790:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	3301      	adds	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
 8009798:	e7e3      	b.n	8009762 <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 800979a:	7d7b      	ldrb	r3, [r7, #21]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	b21a      	sxth	r2, r3
 80097a0:	7dbb      	ldrb	r3, [r7, #22]
 80097a2:	b21b      	sxth	r3, r3
 80097a4:	4313      	orrs	r3, r2
 80097a6:	b21b      	sxth	r3, r3
 80097a8:	b29b      	uxth	r3, r3
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	371c      	adds	r7, #28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <_ZN14OfflineStorageC1Ev>:
uint8_t startStopStatusK1;
uint8_t CMDATCWJAPUsernamePswGlobal[60];
uint8_t noOfByteUsrPsw;

//uint8_t Checkbuf[100];
OfflineStorage::OfflineStorage() {
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	4a04      	ldr	r2, [pc, #16]	; (80097d4 <_ZN14OfflineStorageC1Ev+0x1c>)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	08011de8 	.word	0x08011de8

080097d8 <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <_ZN14OfflineStorageD1Ev+0x1c>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	08011de8 	.word	0x08011de8

080097f8 <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
}
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ffe9 	bl	80097d8 <_ZN14OfflineStorageD1Ev>
 8009806:	21a8      	movs	r1, #168	; 0xa8
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f007 fb7a 	bl	8010f02 <_ZdlPvj>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 8009818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800981a:	b097      	sub	sp, #92	; 0x5c
 800981c:	af0e      	add	r7, sp, #56	; 0x38
 800981e:	61f8      	str	r0, [r7, #28]
	if(UpdateStorage==0){return;}
 8009820:	4b8c      	ldr	r3, [pc, #560]	; (8009a54 <_ZN14OfflineStorage3runEv+0x23c>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 8224 	beq.w	8009c72 <_ZN14OfflineStorage3runEv+0x45a>
	UpdateStorage=0;
 800982a:	4b8a      	ldr	r3, [pc, #552]	; (8009a54 <_ZN14OfflineStorage3runEv+0x23c>)
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]

	ProductionSet_charFormat[100]={'\0'};
 8009830:	4b89      	ldr	r3, [pc, #548]	; (8009a58 <_ZN14OfflineStorage3runEv+0x240>)
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	/*high limit check for system data*/
	CurrentShift = (CurrentShift > 4)?4:CurrentShift;
 8009838:	4b88      	ldr	r3, [pc, #544]	; (8009a5c <_ZN14OfflineStorage3runEv+0x244>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b04      	cmp	r3, #4
 800983e:	bf28      	it	cs
 8009840:	2304      	movcs	r3, #4
 8009842:	b2da      	uxtb	r2, r3
 8009844:	4b85      	ldr	r3, [pc, #532]	; (8009a5c <_ZN14OfflineStorage3runEv+0x244>)
 8009846:	701a      	strb	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production = (MAC_Gen_Prod_Input1_Production >2)?0:MAC_Gen_Prod_Input1_Production;
 8009848:	4b85      	ldr	r3, [pc, #532]	; (8009a60 <_ZN14OfflineStorage3runEv+0x248>)
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d802      	bhi.n	8009856 <_ZN14OfflineStorage3runEv+0x3e>
 8009850:	4b83      	ldr	r3, [pc, #524]	; (8009a60 <_ZN14OfflineStorage3runEv+0x248>)
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	e000      	b.n	8009858 <_ZN14OfflineStorage3runEv+0x40>
 8009856:	2300      	movs	r3, #0
 8009858:	4a81      	ldr	r2, [pc, #516]	; (8009a60 <_ZN14OfflineStorage3runEv+0x248>)
 800985a:	8013      	strh	r3, [r2, #0]
	MAC_Gen_Rej_Input_Production =(MAC_Gen_Rej_Input_Production >2)?0:MAC_Gen_Rej_Input_Production;
 800985c:	4b81      	ldr	r3, [pc, #516]	; (8009a64 <_ZN14OfflineStorage3runEv+0x24c>)
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d802      	bhi.n	800986a <_ZN14OfflineStorage3runEv+0x52>
 8009864:	4b7f      	ldr	r3, [pc, #508]	; (8009a64 <_ZN14OfflineStorage3runEv+0x24c>)
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	e000      	b.n	800986c <_ZN14OfflineStorage3runEv+0x54>
 800986a:	2300      	movs	r3, #0
 800986c:	4a7d      	ldr	r2, [pc, #500]	; (8009a64 <_ZN14OfflineStorage3runEv+0x24c>)
 800986e:	8013      	strh	r3, [r2, #0]
	Dye_Temperature =(Dye_Temperature >30)?30:Dye_Temperature;
 8009870:	4b7d      	ldr	r3, [pc, #500]	; (8009a68 <_ZN14OfflineStorage3runEv+0x250>)
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	2b1e      	cmp	r3, #30
 8009876:	bf28      	it	cs
 8009878:	231e      	movcs	r3, #30
 800987a:	b29a      	uxth	r2, r3
 800987c:	4b7a      	ldr	r3, [pc, #488]	; (8009a68 <_ZN14OfflineStorage3runEv+0x250>)
 800987e:	801a      	strh	r2, [r3, #0]
	Connector_Temperature =(Connector_Temperature>30)?30:Connector_Temperature;
 8009880:	4b7a      	ldr	r3, [pc, #488]	; (8009a6c <_ZN14OfflineStorage3runEv+0x254>)
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	2b1e      	cmp	r3, #30
 8009886:	bf28      	it	cs
 8009888:	231e      	movcs	r3, #30
 800988a:	b29a      	uxth	r2, r3
 800988c:	4b77      	ldr	r3, [pc, #476]	; (8009a6c <_ZN14OfflineStorage3runEv+0x254>)
 800988e:	801a      	strh	r2, [r3, #0]
	hour_t =(hour_t >25)?70:hour_t;
 8009890:	4b77      	ldr	r3, [pc, #476]	; (8009a70 <_ZN14OfflineStorage3runEv+0x258>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b19      	cmp	r3, #25
 8009896:	d802      	bhi.n	800989e <_ZN14OfflineStorage3runEv+0x86>
 8009898:	4b75      	ldr	r3, [pc, #468]	; (8009a70 <_ZN14OfflineStorage3runEv+0x258>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	e000      	b.n	80098a0 <_ZN14OfflineStorage3runEv+0x88>
 800989e:	2346      	movs	r3, #70	; 0x46
 80098a0:	4a73      	ldr	r2, [pc, #460]	; (8009a70 <_ZN14OfflineStorage3runEv+0x258>)
 80098a2:	7013      	strb	r3, [r2, #0]
	min_t=(min_t > 70)?70:min_t;
 80098a4:	4b73      	ldr	r3, [pc, #460]	; (8009a74 <_ZN14OfflineStorage3runEv+0x25c>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b46      	cmp	r3, #70	; 0x46
 80098aa:	bf28      	it	cs
 80098ac:	2346      	movcs	r3, #70	; 0x46
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	4b70      	ldr	r3, [pc, #448]	; (8009a74 <_ZN14OfflineStorage3runEv+0x25c>)
 80098b2:	701a      	strb	r2, [r3, #0]
	sec_t=(sec_t >70)?70:sec_t;
 80098b4:	4b70      	ldr	r3, [pc, #448]	; (8009a78 <_ZN14OfflineStorage3runEv+0x260>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b46      	cmp	r3, #70	; 0x46
 80098ba:	bf28      	it	cs
 80098bc:	2346      	movcs	r3, #70	; 0x46
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	4b6d      	ldr	r3, [pc, #436]	; (8009a78 <_ZN14OfflineStorage3runEv+0x260>)
 80098c2:	701a      	strb	r2, [r3, #0]
	date_Rtc=(date_Rtc >32)?70:date_Rtc;
 80098c4:	4b6d      	ldr	r3, [pc, #436]	; (8009a7c <_ZN14OfflineStorage3runEv+0x264>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d802      	bhi.n	80098d2 <_ZN14OfflineStorage3runEv+0xba>
 80098cc:	4b6b      	ldr	r3, [pc, #428]	; (8009a7c <_ZN14OfflineStorage3runEv+0x264>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	e000      	b.n	80098d4 <_ZN14OfflineStorage3runEv+0xbc>
 80098d2:	2346      	movs	r3, #70	; 0x46
 80098d4:	4a69      	ldr	r2, [pc, #420]	; (8009a7c <_ZN14OfflineStorage3runEv+0x264>)
 80098d6:	7013      	strb	r3, [r2, #0]
	month_Rtc =(month_Rtc>13)?70:month_Rtc;
 80098d8:	4b69      	ldr	r3, [pc, #420]	; (8009a80 <_ZN14OfflineStorage3runEv+0x268>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b0d      	cmp	r3, #13
 80098de:	d802      	bhi.n	80098e6 <_ZN14OfflineStorage3runEv+0xce>
 80098e0:	4b67      	ldr	r3, [pc, #412]	; (8009a80 <_ZN14OfflineStorage3runEv+0x268>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	e000      	b.n	80098e8 <_ZN14OfflineStorage3runEv+0xd0>
 80098e6:	2346      	movs	r3, #70	; 0x46
 80098e8:	4a65      	ldr	r2, [pc, #404]	; (8009a80 <_ZN14OfflineStorage3runEv+0x268>)
 80098ea:	7013      	strb	r3, [r2, #0]
	year_Rtc = (year_Rtc>90)?70:year_Rtc;
 80098ec:	4b65      	ldr	r3, [pc, #404]	; (8009a84 <_ZN14OfflineStorage3runEv+0x26c>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b5a      	cmp	r3, #90	; 0x5a
 80098f2:	d802      	bhi.n	80098fa <_ZN14OfflineStorage3runEv+0xe2>
 80098f4:	4b63      	ldr	r3, [pc, #396]	; (8009a84 <_ZN14OfflineStorage3runEv+0x26c>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	e000      	b.n	80098fc <_ZN14OfflineStorage3runEv+0xe4>
 80098fa:	2346      	movs	r3, #70	; 0x46
 80098fc:	4a61      	ldr	r2, [pc, #388]	; (8009a84 <_ZN14OfflineStorage3runEv+0x26c>)
 80098fe:	7013      	strb	r3, [r2, #0]
	Manual_RejectionCount = (Manual_RejectionCount >2)?2:Manual_RejectionCount;
 8009900:	4b61      	ldr	r3, [pc, #388]	; (8009a88 <_ZN14OfflineStorage3runEv+0x270>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b02      	cmp	r3, #2
 8009906:	bf28      	it	cs
 8009908:	2302      	movcs	r3, #2
 800990a:	b2da      	uxtb	r2, r3
 800990c:	4b5e      	ldr	r3, [pc, #376]	; (8009a88 <_ZN14OfflineStorage3runEv+0x270>)
 800990e:	701a      	strb	r2, [r3, #0]
	Production_Zeit =(Production_Zeit>10)?1:Production_Zeit;
 8009910:	4b5e      	ldr	r3, [pc, #376]	; (8009a8c <_ZN14OfflineStorage3runEv+0x274>)
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	2b0a      	cmp	r3, #10
 8009916:	d802      	bhi.n	800991e <_ZN14OfflineStorage3runEv+0x106>
 8009918:	4b5c      	ldr	r3, [pc, #368]	; (8009a8c <_ZN14OfflineStorage3runEv+0x274>)
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	e000      	b.n	8009920 <_ZN14OfflineStorage3runEv+0x108>
 800991e:	2301      	movs	r3, #1
 8009920:	4a5a      	ldr	r2, [pc, #360]	; (8009a8c <_ZN14OfflineStorage3runEv+0x274>)
 8009922:	8013      	strh	r3, [r2, #0]
	Rejection_Zeit = (Rejection_Zeit>10)?1:Rejection_Zeit;
 8009924:	4b5a      	ldr	r3, [pc, #360]	; (8009a90 <_ZN14OfflineStorage3runEv+0x278>)
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	2b0a      	cmp	r3, #10
 800992a:	d802      	bhi.n	8009932 <_ZN14OfflineStorage3runEv+0x11a>
 800992c:	4b58      	ldr	r3, [pc, #352]	; (8009a90 <_ZN14OfflineStorage3runEv+0x278>)
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	e000      	b.n	8009934 <_ZN14OfflineStorage3runEv+0x11c>
 8009932:	2301      	movs	r3, #1
 8009934:	4a56      	ldr	r2, [pc, #344]	; (8009a90 <_ZN14OfflineStorage3runEv+0x278>)
 8009936:	8013      	strh	r3, [r2, #0]
	SectorPos = (SectorPos > 900)?1:SectorPos;
 8009938:	4b56      	ldr	r3, [pc, #344]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009940:	d802      	bhi.n	8009948 <_ZN14OfflineStorage3runEv+0x130>
 8009942:	4b54      	ldr	r3, [pc, #336]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	e000      	b.n	800994a <_ZN14OfflineStorage3runEv+0x132>
 8009948:	2301      	movs	r3, #1
 800994a:	4a52      	ldr	r2, [pc, #328]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 800994c:	8013      	strh	r3, [r2, #0]
/*high limit check for system data*/
	sprintf(ProductionSet_charFormat,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',CurrentShift,MAC_Gen_Prod_Input1_Production,
 800994e:	4b43      	ldr	r3, [pc, #268]	; (8009a5c <_ZN14OfflineStorage3runEv+0x244>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	469c      	mov	ip, r3
 8009954:	4b42      	ldr	r3, [pc, #264]	; (8009a60 <_ZN14OfflineStorage3runEv+0x248>)
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	4b42      	ldr	r3, [pc, #264]	; (8009a64 <_ZN14OfflineStorage3runEv+0x24c>)
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	4619      	mov	r1, r3
 8009960:	4b41      	ldr	r3, [pc, #260]	; (8009a68 <_ZN14OfflineStorage3runEv+0x250>)
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	4b41      	ldr	r3, [pc, #260]	; (8009a6c <_ZN14OfflineStorage3runEv+0x254>)
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	461c      	mov	r4, r3
 800996c:	4b40      	ldr	r3, [pc, #256]	; (8009a70 <_ZN14OfflineStorage3runEv+0x258>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	461d      	mov	r5, r3
 8009972:	4b40      	ldr	r3, [pc, #256]	; (8009a74 <_ZN14OfflineStorage3runEv+0x25c>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	461e      	mov	r6, r3
 8009978:	4b3f      	ldr	r3, [pc, #252]	; (8009a78 <_ZN14OfflineStorage3runEv+0x260>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	4b3f      	ldr	r3, [pc, #252]	; (8009a7c <_ZN14OfflineStorage3runEv+0x264>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	4b3e      	ldr	r3, [pc, #248]	; (8009a80 <_ZN14OfflineStorage3runEv+0x268>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	4b3e      	ldr	r3, [pc, #248]	; (8009a84 <_ZN14OfflineStorage3runEv+0x26c>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	4b3d      	ldr	r3, [pc, #244]	; (8009a88 <_ZN14OfflineStorage3runEv+0x270>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	60bb      	str	r3, [r7, #8]
 8009996:	4b3f      	ldr	r3, [pc, #252]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	607b      	str	r3, [r7, #4]
 800999c:	2322      	movs	r3, #34	; 0x22
 800999e:	930d      	str	r3, [sp, #52]	; 0x34
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	930c      	str	r3, [sp, #48]	; 0x30
 80099a4:	237b      	movs	r3, #123	; 0x7b
 80099a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	930a      	str	r3, [sp, #40]	; 0x28
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	9308      	str	r3, [sp, #32]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	9307      	str	r3, [sp, #28]
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	9605      	str	r6, [sp, #20]
 80099be:	9504      	str	r5, [sp, #16]
 80099c0:	9403      	str	r4, [sp, #12]
 80099c2:	9002      	str	r0, [sp, #8]
 80099c4:	9101      	str	r1, [sp, #4]
 80099c6:	9200      	str	r2, [sp, #0]
 80099c8:	4663      	mov	r3, ip
 80099ca:	2222      	movs	r2, #34	; 0x22
 80099cc:	4932      	ldr	r1, [pc, #200]	; (8009a98 <_ZN14OfflineStorage3runEv+0x280>)
 80099ce:	4822      	ldr	r0, [pc, #136]	; (8009a58 <_ZN14OfflineStorage3runEv+0x240>)
 80099d0:	f007 fbd4 	bl	801117c <siprintf>
			MAC_Gen_Rej_Input_Production,Dye_Temperature,Connector_Temperature,hour_t,
			min_t,sec_t,date_Rtc,month_Rtc,year_Rtc,Manual_RejectionCount,123,SectorPos,'"');

	//Fix the size
	NoofData = strlen(ProductionSet_charFormat);
 80099d4:	4820      	ldr	r0, [pc, #128]	; (8009a58 <_ZN14OfflineStorage3runEv+0x240>)
 80099d6:	f7f6 fbfb 	bl	80001d0 <strlen>
 80099da:	4603      	mov	r3, r0
 80099dc:	b29a      	uxth	r2, r3
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	memcpy(ProductionSet_uintFormat,ProductionSet_charFormat,NoofData);
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80099ea:	461a      	mov	r2, r3
 80099ec:	491a      	ldr	r1, [pc, #104]	; (8009a58 <_ZN14OfflineStorage3runEv+0x240>)
 80099ee:	482b      	ldr	r0, [pc, #172]	; (8009a9c <_ZN14OfflineStorage3runEv+0x284>)
 80099f0:	f007 fabe 	bl	8010f70 <memcpy>

	SectorPos = SectorPos+1;
 80099f4:	4b27      	ldr	r3, [pc, #156]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	4b25      	ldr	r3, [pc, #148]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 80099fe:	801a      	strh	r2, [r3, #0]

	if((SectorPos % 16)==0)
 8009a00:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d160      	bne.n	8009ace <_ZN14OfflineStorage3runEv+0x2b6>
	{
		tempBlockcalc = SectorPos/16;
 8009a0c:	4b21      	ldr	r3, [pc, #132]	; (8009a94 <_ZN14OfflineStorage3runEv+0x27c>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	091b      	lsrs	r3, r3, #4
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		BlockStatusOffline[tempBlockcalc-1]	=1;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009a22:	3b01      	subs	r3, #1
 8009a24:	4a1e      	ldr	r2, [pc, #120]	; (8009aa0 <_ZN14OfflineStorage3runEv+0x288>)
 8009a26:	2101      	movs	r1, #1
 8009a28:	54d1      	strb	r1, [r2, r3]
		updateInBlockFill=1;
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		if(tempBlockcalc >= MAXNOOFBLOCK)
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009a38:	2b1f      	cmp	r3, #31
 8009a3a:	d933      	bls.n	8009aa4 <_ZN14OfflineStorage3runEv+0x28c>
		{
			tempBlockcalc=0;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			BlockStatusOffline[tempBlockcalc]	=2;
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <_ZN14OfflineStorage3runEv+0x288>)
 8009a4e:	2102      	movs	r1, #2
 8009a50:	5499      	strb	r1, [r3, r2]
 8009a52:	e02e      	b.n	8009ab2 <_ZN14OfflineStorage3runEv+0x29a>
 8009a54:	20000774 	.word	0x20000774
 8009a58:	20000984 	.word	0x20000984
 8009a5c:	20000a60 	.word	0x20000a60
 8009a60:	20000768 	.word	0x20000768
 8009a64:	2000076c 	.word	0x2000076c
 8009a68:	200001c0 	.word	0x200001c0
 8009a6c:	200001c2 	.word	0x200001c2
 8009a70:	20000a59 	.word	0x20000a59
 8009a74:	20000a5a 	.word	0x20000a5a
 8009a78:	20000a5b 	.word	0x20000a5b
 8009a7c:	20000a5d 	.word	0x20000a5d
 8009a80:	20000a5e 	.word	0x20000a5e
 8009a84:	20000a5f 	.word	0x20000a5f
 8009a88:	20000770 	.word	0x20000770
 8009a8c:	2000076a 	.word	0x2000076a
 8009a90:	2000076e 	.word	0x2000076e
 8009a94:	200009ee 	.word	0x200009ee
 8009a98:	08011ad0 	.word	0x08011ad0
 8009a9c:	20000920 	.word	0x20000920
 8009aa0:	200009f0 	.word	0x200009f0
		}
		else
		{
			BlockStatusOffline[tempBlockcalc]	=2;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009aaa:	461a      	mov	r2, r3
 8009aac:	4b73      	ldr	r3, [pc, #460]	; (8009c7c <_ZN14OfflineStorage3runEv+0x464>)
 8009aae:	2102      	movs	r1, #2
 8009ab0:	5499      	strb	r1, [r3, r2]
		}
		if(SectorPos >= 512){SectorPos=0;}
 8009ab2:	4b73      	ldr	r3, [pc, #460]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aba:	d302      	bcc.n	8009ac2 <_ZN14OfflineStorage3runEv+0x2aa>
 8009abc:	4b70      	ldr	r3, [pc, #448]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	801a      	strh	r2, [r3, #0]
		SectorPos = SectorPos+1;
 8009ac2:	4b6f      	ldr	r3, [pc, #444]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	4b6d      	ldr	r3, [pc, #436]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009acc:	801a      	strh	r2, [r3, #0]
	}


	W25qxx_EraseSector(SectorPos-1);
 8009ace:	4b6c      	ldr	r3, [pc, #432]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7f9 ff13 	bl	8003900 <W25qxx_EraseSector>
	W25qxx_WriteSector(ProductionSet_uintFormat,(SectorPos-1),0,NoofData);
 8009ada:	4b69      	ldr	r3, [pc, #420]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8009ae8:	2200      	movs	r2, #0
 8009aea:	4866      	ldr	r0, [pc, #408]	; (8009c84 <_ZN14OfflineStorage3runEv+0x46c>)
 8009aec:	f7fa f8e4 	bl	8003cb8 <W25qxx_WriteSector>
	MAC_Gen_Prod_Input1_Production=0;
 8009af0:	4b65      	ldr	r3, [pc, #404]	; (8009c88 <_ZN14OfflineStorage3runEv+0x470>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production=0;
 8009af6:	4b65      	ldr	r3, [pc, #404]	; (8009c8c <_ZN14OfflineStorage3runEv+0x474>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	801a      	strh	r2, [r3, #0]

	MAC_Gen_Prod_Input1_Production_K1 = MAC_Gen_Prod_Input1_Production;
 8009afc:	4b62      	ldr	r3, [pc, #392]	; (8009c88 <_ZN14OfflineStorage3runEv+0x470>)
 8009afe:	881a      	ldrh	r2, [r3, #0]
 8009b00:	4b63      	ldr	r3, [pc, #396]	; (8009c90 <_ZN14OfflineStorage3runEv+0x478>)
 8009b02:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1   = MAC_Gen_Rej_Input_Production;
 8009b04:	4b61      	ldr	r3, [pc, #388]	; (8009c8c <_ZN14OfflineStorage3runEv+0x474>)
 8009b06:	881a      	ldrh	r2, [r3, #0]
 8009b08:	4b62      	ldr	r3, [pc, #392]	; (8009c94 <_ZN14OfflineStorage3runEv+0x47c>)
 8009b0a:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount_K1          = Manual_RejectionCount;
 8009b0c:	4b62      	ldr	r3, [pc, #392]	; (8009c98 <_ZN14OfflineStorage3runEv+0x480>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	4b62      	ldr	r3, [pc, #392]	; (8009c9c <_ZN14OfflineStorage3runEv+0x484>)
 8009b14:	801a      	strh	r2, [r3, #0]
	IsCurrentShiftUpdated=0;
 8009b16:	4b62      	ldr	r3, [pc, #392]	; (8009ca0 <_ZN14OfflineStorage3runEv+0x488>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]

	FlashMemProductiondata[0] = (uint8_t)MAC_Gen_Prod_Input1_Production&0x00ff;
 8009b1c:	4b5a      	ldr	r3, [pc, #360]	; (8009c88 <_ZN14OfflineStorage3runEv+0x470>)
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	711a      	strb	r2, [r3, #4]
	FlashMemProductiondata[1] = (uint8_t)(MAC_Gen_Prod_Input1_Production>>8)&0x00ff;
 8009b26:	4b58      	ldr	r3, [pc, #352]	; (8009c88 <_ZN14OfflineStorage3runEv+0x470>)
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	0a1b      	lsrs	r3, r3, #8
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	715a      	strb	r2, [r3, #5]
	FlashMemProductiondata[2] = (uint8_t)MAC_Gen_Prod_Input1_Production_K1&0x00ff;
 8009b34:	4b56      	ldr	r3, [pc, #344]	; (8009c90 <_ZN14OfflineStorage3runEv+0x478>)
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	719a      	strb	r2, [r3, #6]
	FlashMemProductiondata[3] = (uint8_t)(MAC_Gen_Prod_Input1_Production_K1>>8)&0x00ff;
 8009b3e:	4b54      	ldr	r3, [pc, #336]	; (8009c90 <_ZN14OfflineStorage3runEv+0x478>)
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	71da      	strb	r2, [r3, #7]
	FlashMemProductiondata[4] = (uint8_t)MAC_Gen_Rej_Input_Production&0x00ff;
 8009b4c:	4b4f      	ldr	r3, [pc, #316]	; (8009c8c <_ZN14OfflineStorage3runEv+0x474>)
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	721a      	strb	r2, [r3, #8]
	FlashMemProductiondata[5] = (uint8_t)(MAC_Gen_Rej_Input_Production>>8)&0x00ff;
 8009b56:	4b4d      	ldr	r3, [pc, #308]	; (8009c8c <_ZN14OfflineStorage3runEv+0x474>)
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	725a      	strb	r2, [r3, #9]
	FlashMemProductiondata[6] = (uint8_t)MAC_Gen_Rej_Input_Production_K1&0x00ff;
 8009b64:	4b4b      	ldr	r3, [pc, #300]	; (8009c94 <_ZN14OfflineStorage3runEv+0x47c>)
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	729a      	strb	r2, [r3, #10]
	FlashMemProductiondata[7] = (uint8_t)(MAC_Gen_Rej_Input_Production_K1>>8)&0x00ff;
 8009b6e:	4b49      	ldr	r3, [pc, #292]	; (8009c94 <_ZN14OfflineStorage3runEv+0x47c>)
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	0a1b      	lsrs	r3, r3, #8
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	72da      	strb	r2, [r3, #11]
	FlashMemProductiondata[8] = (uint8_t)Production_Zeit&0x00ff;
 8009b7c:	4b49      	ldr	r3, [pc, #292]	; (8009ca4 <_ZN14OfflineStorage3runEv+0x48c>)
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	731a      	strb	r2, [r3, #12]
	FlashMemProductiondata[9] = (uint8_t)(Production_Zeit>>8)&0x00ff;
 8009b86:	4b47      	ldr	r3, [pc, #284]	; (8009ca4 <_ZN14OfflineStorage3runEv+0x48c>)
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	0a1b      	lsrs	r3, r3, #8
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	735a      	strb	r2, [r3, #13]
	FlashMemProductiondata[10] = (uint8_t)Rejection_Zeit&0x00ff;
 8009b94:	4b44      	ldr	r3, [pc, #272]	; (8009ca8 <_ZN14OfflineStorage3runEv+0x490>)
 8009b96:	881b      	ldrh	r3, [r3, #0]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	739a      	strb	r2, [r3, #14]
	FlashMemProductiondata[11] = (uint8_t)(Rejection_Zeit>>8)&0x00ff;
 8009b9e:	4b42      	ldr	r3, [pc, #264]	; (8009ca8 <_ZN14OfflineStorage3runEv+0x490>)
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	73da      	strb	r2, [r3, #15]
	FlashMemProductiondata[12] = (hour_t);
 8009bac:	4b3f      	ldr	r3, [pc, #252]	; (8009cac <_ZN14OfflineStorage3runEv+0x494>)
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	741a      	strb	r2, [r3, #16]
	FlashMemProductiondata[13] = (min_t);
 8009bb4:	4b3e      	ldr	r3, [pc, #248]	; (8009cb0 <_ZN14OfflineStorage3runEv+0x498>)
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	745a      	strb	r2, [r3, #17]
	FlashMemProductiondata[14] = (sec_t);
 8009bbc:	4b3d      	ldr	r3, [pc, #244]	; (8009cb4 <_ZN14OfflineStorage3runEv+0x49c>)
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	749a      	strb	r2, [r3, #18]
	FlashMemProductiondata[15] = date_Rtc;
 8009bc4:	4b3c      	ldr	r3, [pc, #240]	; (8009cb8 <_ZN14OfflineStorage3runEv+0x4a0>)
 8009bc6:	781a      	ldrb	r2, [r3, #0]
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	74da      	strb	r2, [r3, #19]
	FlashMemProductiondata[16] = month_Rtc;
 8009bcc:	4b3b      	ldr	r3, [pc, #236]	; (8009cbc <_ZN14OfflineStorage3runEv+0x4a4>)
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	751a      	strb	r2, [r3, #20]
	FlashMemProductiondata[17] = year_Rtc;
 8009bd4:	4b3a      	ldr	r3, [pc, #232]	; (8009cc0 <_ZN14OfflineStorage3runEv+0x4a8>)
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	755a      	strb	r2, [r3, #21]
	FlashMemProductiondata[18] = (uint8_t)SectorPos&0x00ff;
 8009bdc:	4b28      	ldr	r3, [pc, #160]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	759a      	strb	r2, [r3, #22]
	FlashMemProductiondata[19] = (uint8_t)(SectorPos>>8)&0x00ff;
 8009be6:	4b26      	ldr	r3, [pc, #152]	; (8009c80 <_ZN14OfflineStorage3runEv+0x468>)
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	0a1b      	lsrs	r3, r3, #8
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	75da      	strb	r2, [r3, #23]
	FlashMemProductiondata[20] = (uint8_t)Manual_RejectionCount&0x00ff;
 8009bf4:	4b28      	ldr	r3, [pc, #160]	; (8009c98 <_ZN14OfflineStorage3runEv+0x480>)
 8009bf6:	781a      	ldrb	r2, [r3, #0]
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	761a      	strb	r2, [r3, #24]
	FlashMemProductiondata[21] = (uint8_t)(Manual_RejectionCount>>8)&0x00ff;
 8009bfc:	4b26      	ldr	r3, [pc, #152]	; (8009c98 <_ZN14OfflineStorage3runEv+0x480>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	121b      	asrs	r3, r3, #8
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	765a      	strb	r2, [r3, #25]
	FlashMemProductiondata[22] = (uint8_t)Manual_RejectionCount_K1&0x00ff;
 8009c08:	4b24      	ldr	r3, [pc, #144]	; (8009c9c <_ZN14OfflineStorage3runEv+0x484>)
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	769a      	strb	r2, [r3, #26]
	FlashMemProductiondata[23] = (uint8_t)(Manual_RejectionCount_K1>>8)&0x00ff;
 8009c12:	4b22      	ldr	r3, [pc, #136]	; (8009c9c <_ZN14OfflineStorage3runEv+0x484>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	0a1b      	lsrs	r3, r3, #8
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	76da      	strb	r2, [r3, #27]
	FlashMemProductiondata[24] = CurrentShift;
 8009c20:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <_ZN14OfflineStorage3runEv+0x4ac>)
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	771a      	strb	r2, [r3, #28]
	FlashMemProductiondata[25] = CurrentShift_K1;
 8009c28:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <_ZN14OfflineStorage3runEv+0x4b0>)
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	775a      	strb	r2, [r3, #29]
	W25qxx_EraseSector(600);
 8009c30:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009c34:	f7f9 fe64 	bl	8003900 <W25qxx_EraseSector>
	W25qxx_WriteSector(FlashMemProductiondata,600,0,26);
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	1d18      	adds	r0, r3, #4
 8009c3c:	231a      	movs	r3, #26
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009c44:	f7fa f838 	bl	8003cb8 <W25qxx_WriteSector>

	if(updateInBlockFill)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d010      	beq.n	8009c74 <_ZN14OfflineStorage3runEv+0x45c>
	{
		updateInBlockFill=0;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		W25qxx_EraseSector(601);
 8009c5a:	f240 2059 	movw	r0, #601	; 0x259
 8009c5e:	f7f9 fe4f 	bl	8003900 <W25qxx_EraseSector>
		W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 8009c62:	2328      	movs	r3, #40	; 0x28
 8009c64:	2200      	movs	r2, #0
 8009c66:	f240 2159 	movw	r1, #601	; 0x259
 8009c6a:	4804      	ldr	r0, [pc, #16]	; (8009c7c <_ZN14OfflineStorage3runEv+0x464>)
 8009c6c:	f7fa f824 	bl	8003cb8 <W25qxx_WriteSector>
 8009c70:	e000      	b.n	8009c74 <_ZN14OfflineStorage3runEv+0x45c>
	if(UpdateStorage==0){return;}
 8009c72:	bf00      	nop
	}

}
 8009c74:	3724      	adds	r7, #36	; 0x24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200009f0 	.word	0x200009f0
 8009c80:	200009ee 	.word	0x200009ee
 8009c84:	20000920 	.word	0x20000920
 8009c88:	20000768 	.word	0x20000768
 8009c8c:	2000076c 	.word	0x2000076c
 8009c90:	200009e8 	.word	0x200009e8
 8009c94:	200009ea 	.word	0x200009ea
 8009c98:	20000770 	.word	0x20000770
 8009c9c:	200009ec 	.word	0x200009ec
 8009ca0:	20000773 	.word	0x20000773
 8009ca4:	2000076a 	.word	0x2000076a
 8009ca8:	2000076e 	.word	0x2000076e
 8009cac:	20000a59 	.word	0x20000a59
 8009cb0:	20000a5a 	.word	0x20000a5a
 8009cb4:	20000a5b 	.word	0x20000a5b
 8009cb8:	20000a5d 	.word	0x20000a5d
 8009cbc:	20000a5e 	.word	0x20000a5e
 8009cc0:	20000a5f 	.word	0x20000a5f
 8009cc4:	20000a60 	.word	0x20000a60
 8009cc8:	20000772 	.word	0x20000772

08009ccc <_ZN14OfflineStorage19specialMacDataWriteEv>:
void OfflineStorage::specialMacDataWrite()
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	if(productionInc != productionIncK1){
 8009cd4:	4b13      	ldr	r3, [pc, #76]	; (8009d24 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009cd6:	881a      	ldrh	r2, [r3, #0]
 8009cd8:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <_ZN14OfflineStorage19specialMacDataWriteEv+0x5c>)
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d01c      	beq.n	8009d1a <_ZN14OfflineStorage19specialMacDataWriteEv+0x4e>
	specialMacData[0] = (uint8_t)productionInc&0x00ff;
 8009ce0:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	769a      	strb	r2, [r3, #26]
	specialMacData[1] = (uint8_t)(productionInc>>8)&0x00ff;
 8009cea:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	76da      	strb	r2, [r3, #27]

	productionIncK1 = productionInc;
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <_ZN14OfflineStorage19specialMacDataWriteEv+0x58>)
 8009cfa:	881a      	ldrh	r2, [r3, #0]
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <_ZN14OfflineStorage19specialMacDataWriteEv+0x5c>)
 8009cfe:	801a      	strh	r2, [r3, #0]
	W25qxx_EraseSector(602);
 8009d00:	f240 205a 	movw	r0, #602	; 0x25a
 8009d04:	f7f9 fdfc 	bl	8003900 <W25qxx_EraseSector>
	W25qxx_WriteSector(specialMacData,602,0,2);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f103 001a 	add.w	r0, r3, #26
 8009d0e:	2302      	movs	r3, #2
 8009d10:	2200      	movs	r2, #0
 8009d12:	f240 215a 	movw	r1, #602	; 0x25a
 8009d16:	f7f9 ffcf 	bl	8003cb8 <W25qxx_WriteSector>
	}
}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000776 	.word	0x20000776
 8009d28:	20000a18 	.word	0x20000a18

08009d2c <_ZN14OfflineStorage15dwinRxDataStoreEv>:
void OfflineStorage::dwinRxDataStore()
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	if(updateDwindata==0){return;}
 8009d34:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x74>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02c      	beq.n	8009d96 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x6a>
	updateDwindata=0;
 8009d3c:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x74>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
	dwinData[0] = (uint8_t)machineId&0x00ff;
 8009d42:	4b18      	ldr	r3, [pc, #96]	; (8009da4 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x78>)
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	dwinData[1] = (uint8_t)(machineId>>8)&0x00ff;
 8009d4e:	4b15      	ldr	r3, [pc, #84]	; (8009da4 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x78>)
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	dwinData[2] = (uint8_t)portNumber&0x00ff;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x7c>)
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	dwinData[3] = (uint8_t)(portNumber>>8)&0x00ff;
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x7c>)
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	W25qxx_EraseSector(604);
 8009d7a:	f44f 7017 	mov.w	r0, #604	; 0x25c
 8009d7e:	f7f9 fdbf 	bl	8003900 <W25qxx_EraseSector>
	W25qxx_WriteSector(dwinData,604,0,4);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8009d88:	2304      	movs	r3, #4
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8009d90:	f7f9 ff92 	bl	8003cb8 <W25qxx_WriteSector>
 8009d94:	e000      	b.n	8009d98 <_ZN14OfflineStorage15dwinRxDataStoreEv+0x6c>
	if(updateDwindata==0){return;}
 8009d96:	bf00      	nop
}
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000812 	.word	0x20000812
 8009da4:	2000078a 	.word	0x2000078a
 8009da8:	2000078e 	.word	0x2000078e

08009dac <_ZN14OfflineStorage18dwinCloudDataStoreEv>:
void OfflineStorage::dwinCloudDataStore()
{
 8009dac:	b5b0      	push	{r4, r5, r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if(!updateCloudConn){return;}
 8009db4:	4b4e      	ldr	r3, [pc, #312]	; (8009ef0 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x144>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 8094 	beq.w	8009ee6 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x13a>
	updateCloudConn=0;
 8009dbe:	4b4c      	ldr	r3, [pc, #304]	; (8009ef0 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x144>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
	lengthOfServerAdd =(lengthOfServerAdd >20)?20:lengthOfServerAdd;
 8009dc4:	4b4b      	ldr	r3, [pc, #300]	; (8009ef4 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x148>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b14      	cmp	r3, #20
 8009dca:	bf28      	it	cs
 8009dcc:	2314      	movcs	r3, #20
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	4b48      	ldr	r3, [pc, #288]	; (8009ef4 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x148>)
 8009dd2:	701a      	strb	r2, [r3, #0]
	for(i=0;i<20;i++){
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	2b13      	cmp	r3, #19
 8009ddc:	d80c      	bhi.n	8009df8 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x4c>
		couldData[i]=serverAddress[i];
 8009dde:	7bfa      	ldrb	r2, [r7, #15]
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	4945      	ldr	r1, [pc, #276]	; (8009ef8 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x14c>)
 8009de4:	5c89      	ldrb	r1, [r1, r2]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	4413      	add	r3, r2
 8009dea:	460a      	mov	r2, r1
 8009dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for(i=0;i<20;i++){
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	3301      	adds	r3, #1
 8009df4:	73fb      	strb	r3, [r7, #15]
 8009df6:	e7ef      	b.n	8009dd8 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x2c>
	}
	lengthOfUserName =(lengthOfUserName >20)?20:lengthOfUserName;
 8009df8:	4b40      	ldr	r3, [pc, #256]	; (8009efc <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x150>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b14      	cmp	r3, #20
 8009dfe:	bf28      	it	cs
 8009e00:	2314      	movcs	r3, #20
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	4b3d      	ldr	r3, [pc, #244]	; (8009efc <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x150>)
 8009e06:	701a      	strb	r2, [r3, #0]
	for(i=0;i<20;i++){
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2b13      	cmp	r3, #19
 8009e10:	d80d      	bhi.n	8009e2e <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x82>
		couldData[i+20]=userNameWifi[i];
 8009e12:	7bfa      	ldrb	r2, [r7, #15]
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	3314      	adds	r3, #20
 8009e18:	4939      	ldr	r1, [pc, #228]	; (8009f00 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x154>)
 8009e1a:	5c89      	ldrb	r1, [r1, r2]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	4413      	add	r3, r2
 8009e20:	460a      	mov	r2, r1
 8009e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for(i=0;i<20;i++){
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
 8009e2c:	e7ee      	b.n	8009e0c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x60>
	}
	lengthOfPassword =(lengthOfPassword >20)?20:lengthOfPassword;
 8009e2e:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x158>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b14      	cmp	r3, #20
 8009e34:	bf28      	it	cs
 8009e36:	2314      	movcs	r3, #20
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	4b32      	ldr	r3, [pc, #200]	; (8009f04 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x158>)
 8009e3c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<20;i++){
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	2b13      	cmp	r3, #19
 8009e46:	d80d      	bhi.n	8009e64 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0xb8>
		couldData[i+40]=passwordWifi[i];
 8009e48:	7bfa      	ldrb	r2, [r7, #15]
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	3328      	adds	r3, #40	; 0x28
 8009e4e:	492e      	ldr	r1, [pc, #184]	; (8009f08 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x15c>)
 8009e50:	5c89      	ldrb	r1, [r1, r2]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	460a      	mov	r2, r1
 8009e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for(i=0;i<20;i++){
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	73fb      	strb	r3, [r7, #15]
 8009e62:	e7ee      	b.n	8009e42 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x96>
	}
	couldData[60] = lengthOfServerAdd;
 8009e64:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x148>)
 8009e66:	781a      	ldrb	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	couldData[61] = lengthOfUserName;
 8009e6e:	4b23      	ldr	r3, [pc, #140]	; (8009efc <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x150>)
 8009e70:	781a      	ldrb	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	couldData[62] = lengthOfPassword;
 8009e78:	4b22      	ldr	r3, [pc, #136]	; (8009f04 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x158>)
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

	memcpy(serverAddressK1,serverAddress,20);
 8009e82:	4b22      	ldr	r3, [pc, #136]	; (8009f0c <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x160>)
 8009e84:	4a1c      	ldr	r2, [pc, #112]	; (8009ef8 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x14c>)
 8009e86:	6811      	ldr	r1, [r2, #0]
 8009e88:	6855      	ldr	r5, [r2, #4]
 8009e8a:	6894      	ldr	r4, [r2, #8]
 8009e8c:	68d0      	ldr	r0, [r2, #12]
 8009e8e:	6019      	str	r1, [r3, #0]
 8009e90:	605d      	str	r5, [r3, #4]
 8009e92:	609c      	str	r4, [r3, #8]
 8009e94:	60d8      	str	r0, [r3, #12]
 8009e96:	6911      	ldr	r1, [r2, #16]
 8009e98:	6119      	str	r1, [r3, #16]
	memcpy(userNameWifiK1,userNameWifi,20);
 8009e9a:	4b1d      	ldr	r3, [pc, #116]	; (8009f10 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x164>)
 8009e9c:	4a18      	ldr	r2, [pc, #96]	; (8009f00 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x154>)
 8009e9e:	6811      	ldr	r1, [r2, #0]
 8009ea0:	6855      	ldr	r5, [r2, #4]
 8009ea2:	6894      	ldr	r4, [r2, #8]
 8009ea4:	68d0      	ldr	r0, [r2, #12]
 8009ea6:	6019      	str	r1, [r3, #0]
 8009ea8:	605d      	str	r5, [r3, #4]
 8009eaa:	609c      	str	r4, [r3, #8]
 8009eac:	60d8      	str	r0, [r3, #12]
 8009eae:	6911      	ldr	r1, [r2, #16]
 8009eb0:	6119      	str	r1, [r3, #16]
	memcpy(passwordWifiK1,passwordWifi,20);
 8009eb2:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x168>)
 8009eb4:	4a14      	ldr	r2, [pc, #80]	; (8009f08 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x15c>)
 8009eb6:	6811      	ldr	r1, [r2, #0]
 8009eb8:	6855      	ldr	r5, [r2, #4]
 8009eba:	6894      	ldr	r4, [r2, #8]
 8009ebc:	68d0      	ldr	r0, [r2, #12]
 8009ebe:	6019      	str	r1, [r3, #0]
 8009ec0:	605d      	str	r5, [r3, #4]
 8009ec2:	609c      	str	r4, [r3, #8]
 8009ec4:	60d8      	str	r0, [r3, #12]
 8009ec6:	6911      	ldr	r1, [r2, #16]
 8009ec8:	6119      	str	r1, [r3, #16]

	W25qxx_EraseSector(605);
 8009eca:	f240 205d 	movw	r0, #605	; 0x25d
 8009ece:	f7f9 fd17 	bl	8003900 <W25qxx_EraseSector>
	W25qxx_WriteSector(couldData,605,0,63);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8009ed8:	233f      	movs	r3, #63	; 0x3f
 8009eda:	2200      	movs	r2, #0
 8009edc:	f240 215d 	movw	r1, #605	; 0x25d
 8009ee0:	f7f9 feea 	bl	8003cb8 <W25qxx_WriteSector>
 8009ee4:	e000      	b.n	8009ee8 <_ZN14OfflineStorage18dwinCloudDataStoreEv+0x13c>
	if(!updateCloudConn){return;}
 8009ee6:	bf00      	nop

}
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bdb0      	pop	{r4, r5, r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000818 	.word	0x20000818
 8009ef4:	20000814 	.word	0x20000814
 8009ef8:	20000794 	.word	0x20000794
 8009efc:	20000815 	.word	0x20000815
 8009f00:	200007bc 	.word	0x200007bc
 8009f04:	20000816 	.word	0x20000816
 8009f08:	200007e4 	.word	0x200007e4
 8009f0c:	200007a8 	.word	0x200007a8
 8009f10:	200007d0 	.word	0x200007d0
 8009f14:	200007f8 	.word	0x200007f8

08009f18 <_ZN14OfflineStorage16processDataWriteEv>:
void OfflineStorage::processDataWrite()
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	if((updateMemProcCtrl==1)||(triggerStartForReq != triggerStartForReqK1)||
 8009f20:	4b2f      	ldr	r3, [pc, #188]	; (8009fe0 <_ZN14OfflineStorage16processDataWriteEv+0xc8>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d00b      	beq.n	8009f40 <_ZN14OfflineStorage16processDataWriteEv+0x28>
 8009f28:	4b2e      	ldr	r3, [pc, #184]	; (8009fe4 <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <_ZN14OfflineStorage16processDataWriteEv+0xd0>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d105      	bne.n	8009f40 <_ZN14OfflineStorage16processDataWriteEv+0x28>
		(startStopStatus != startStopStatusK1)){
 8009f34:	4b2d      	ldr	r3, [pc, #180]	; (8009fec <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009f36:	781a      	ldrb	r2, [r3, #0]
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <_ZN14OfflineStorage16processDataWriteEv+0xd8>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
	if((updateMemProcCtrl==1)||(triggerStartForReq != triggerStartForReqK1)||
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d04b      	beq.n	8009fd8 <_ZN14OfflineStorage16processDataWriteEv+0xc0>
	updateMemProcCtrl=0;
 8009f40:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <_ZN14OfflineStorage16processDataWriteEv+0xc8>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]
	processData[0] = (uint8_t)requirementId&0x00ff;
 8009f46:	4b2b      	ldr	r3, [pc, #172]	; (8009ff4 <_ZN14OfflineStorage16processDataWriteEv+0xdc>)
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	processData[1] = (uint8_t)(requirementId>>8)&0x00ff;
 8009f52:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <_ZN14OfflineStorage16processDataWriteEv+0xdc>)
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	processData[2] = (uint8_t)requirementIdK1&0x00ff;
 8009f62:	4b25      	ldr	r3, [pc, #148]	; (8009ff8 <_ZN14OfflineStorage16processDataWriteEv+0xe0>)
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	processData[3] = (uint8_t)(requirementIdK1>>8)&0x00ff;
 8009f6e:	4b22      	ldr	r3, [pc, #136]	; (8009ff8 <_ZN14OfflineStorage16processDataWriteEv+0xe0>)
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	processData[4] = (uint8_t)productionTarget&0x00ff;
 8009f7e:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <_ZN14OfflineStorage16processDataWriteEv+0xe4>)
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	processData[5] = (uint8_t)(productionTarget>>8)&0x00ff;
 8009f8a:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <_ZN14OfflineStorage16processDataWriteEv+0xe4>)
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	0a1b      	lsrs	r3, r3, #8
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	processData[6] = triggerStartForReq;
 8009f9a:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009f9c:	781a      	ldrb	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	processData[7] = startStopStatus;
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009fa6:	781a      	ldrb	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	triggerStartForReqK1= triggerStartForReq;
 8009fae:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <_ZN14OfflineStorage16processDataWriteEv+0xcc>)
 8009fb0:	781a      	ldrb	r2, [r3, #0]
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <_ZN14OfflineStorage16processDataWriteEv+0xd0>)
 8009fb4:	701a      	strb	r2, [r3, #0]
	startStopStatusK1 = startStopStatus;
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <_ZN14OfflineStorage16processDataWriteEv+0xd4>)
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <_ZN14OfflineStorage16processDataWriteEv+0xd8>)
 8009fbc:	701a      	strb	r2, [r3, #0]

	W25qxx_EraseSector(603);
 8009fbe:	f240 205b 	movw	r0, #603	; 0x25b
 8009fc2:	f7f9 fc9d 	bl	8003900 <W25qxx_EraseSector>
	W25qxx_WriteSector(processData,603,0,8);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009fcc:	2308      	movs	r3, #8
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f240 215b 	movw	r1, #603	; 0x25b
 8009fd4:	f7f9 fe70 	bl	8003cb8 <W25qxx_WriteSector>
	}
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20000775 	.word	0x20000775
 8009fe4:	2000077c 	.word	0x2000077c
 8009fe8:	20000a1a 	.word	0x20000a1a
 8009fec:	2000010f 	.word	0x2000010f
 8009ff0:	20000a1b 	.word	0x20000a1b
 8009ff4:	2000010a 	.word	0x2000010a
 8009ff8:	20000778 	.word	0x20000778
 8009ffc:	2000077a 	.word	0x2000077a

0800a000 <_ZN14OfflineStorage17dwinCloudDataReadEv>:

void OfflineStorage::dwinCloudDataRead()
{
 800a000:	b5b0      	push	{r4, r5, r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t CMDATCWJAPUsernamePswHead[10]={'A','T','+','C','W','J','A','P','=','"'};
 800a008:	4a91      	ldr	r2, [pc, #580]	; (800a250 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x250>)
 800a00a:	f107 0310 	add.w	r3, r7, #16
 800a00e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a010:	c303      	stmia	r3!, {r0, r1}
 800a012:	801a      	strh	r2, [r3, #0]
	uint8_t CMDATCWJAPUsernamePswBody[3]={'"',',','"'};
 800a014:	4a8f      	ldr	r2, [pc, #572]	; (800a254 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x254>)
 800a016:	f107 030c 	add.w	r3, r7, #12
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	4611      	mov	r1, r2
 800a01e:	8019      	strh	r1, [r3, #0]
 800a020:	3302      	adds	r3, #2
 800a022:	0c12      	lsrs	r2, r2, #16
 800a024:	701a      	strb	r2, [r3, #0]
	uint8_t CMDATCWJAPUsernamePswTail[3]={'"','\r','\n'};
 800a026:	4a8c      	ldr	r2, [pc, #560]	; (800a258 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x258>)
 800a028:	f107 0308 	add.w	r3, r7, #8
 800a02c:	6812      	ldr	r2, [r2, #0]
 800a02e:	4611      	mov	r1, r2
 800a030:	8019      	strh	r1, [r3, #0]
 800a032:	3302      	adds	r3, #2
 800a034:	0c12      	lsrs	r2, r2, #16
 800a036:	701a      	strb	r2, [r3, #0]
	uint8_t lenp,lenk;
	W25qxx_ReadSector(couldData,605,0,63);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a03e:	233f      	movs	r3, #63	; 0x3f
 800a040:	2200      	movs	r2, #0
 800a042:	f240 215d 	movw	r1, #605	; 0x25d
 800a046:	f7f9 ff17 	bl	8003e78 <W25qxx_ReadSector>
	for(i=0;i<20;i++){
 800a04a:	2300      	movs	r3, #0
 800a04c:	77fb      	strb	r3, [r7, #31]
 800a04e:	7ffb      	ldrb	r3, [r7, #31]
 800a050:	2b13      	cmp	r3, #19
 800a052:	d80b      	bhi.n	800a06c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x6c>
	serverAddress[i] = couldData[i];
 800a054:	7ffa      	ldrb	r2, [r7, #31]
 800a056:	7ffb      	ldrb	r3, [r7, #31]
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	440a      	add	r2, r1
 800a05c:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 800a060:	4a7e      	ldr	r2, [pc, #504]	; (800a25c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x25c>)
 800a062:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<20;i++){
 800a064:	7ffb      	ldrb	r3, [r7, #31]
 800a066:	3301      	adds	r3, #1
 800a068:	77fb      	strb	r3, [r7, #31]
 800a06a:	e7f0      	b.n	800a04e <_ZN14OfflineStorage17dwinCloudDataReadEv+0x4e>
	}
	for(i=0;i<20;i++){
 800a06c:	2300      	movs	r3, #0
 800a06e:	77fb      	strb	r3, [r7, #31]
 800a070:	7ffb      	ldrb	r3, [r7, #31]
 800a072:	2b13      	cmp	r3, #19
 800a074:	d80d      	bhi.n	800a092 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x92>
	userNameWifi[i] = couldData[i+20];
 800a076:	7ffb      	ldrb	r3, [r7, #31]
 800a078:	f103 0214 	add.w	r2, r3, #20
 800a07c:	7ffb      	ldrb	r3, [r7, #31]
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	440a      	add	r2, r1
 800a082:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 800a086:	4a76      	ldr	r2, [pc, #472]	; (800a260 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x260>)
 800a088:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<20;i++){
 800a08a:	7ffb      	ldrb	r3, [r7, #31]
 800a08c:	3301      	adds	r3, #1
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	e7ee      	b.n	800a070 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x70>
	}
	for(i=0;i<20;i++){
 800a092:	2300      	movs	r3, #0
 800a094:	77fb      	strb	r3, [r7, #31]
 800a096:	7ffb      	ldrb	r3, [r7, #31]
 800a098:	2b13      	cmp	r3, #19
 800a09a:	d80d      	bhi.n	800a0b8 <_ZN14OfflineStorage17dwinCloudDataReadEv+0xb8>
	passwordWifi[i] = couldData[i+40];
 800a09c:	7ffb      	ldrb	r3, [r7, #31]
 800a09e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a0a2:	7ffb      	ldrb	r3, [r7, #31]
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 800a0ac:	4a6d      	ldr	r2, [pc, #436]	; (800a264 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x264>)
 800a0ae:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<20;i++){
 800a0b0:	7ffb      	ldrb	r3, [r7, #31]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	77fb      	strb	r3, [r7, #31]
 800a0b6:	e7ee      	b.n	800a096 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x96>
	}
	lengthOfServerAdd = couldData[60];
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800a0be:	4b6a      	ldr	r3, [pc, #424]	; (800a268 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x268>)
 800a0c0:	701a      	strb	r2, [r3, #0]
	lengthOfUserName  =	couldData[61];
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 800a0c8:	4b68      	ldr	r3, [pc, #416]	; (800a26c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x26c>)
 800a0ca:	701a      	strb	r2, [r3, #0]
	lengthOfPassword = couldData[62];
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
 800a0d2:	4b67      	ldr	r3, [pc, #412]	; (800a270 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x270>)
 800a0d4:	701a      	strb	r2, [r3, #0]
	memcpy(serverAddressK1,serverAddress,20);
 800a0d6:	4b67      	ldr	r3, [pc, #412]	; (800a274 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x274>)
 800a0d8:	4a60      	ldr	r2, [pc, #384]	; (800a25c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x25c>)
 800a0da:	6811      	ldr	r1, [r2, #0]
 800a0dc:	6855      	ldr	r5, [r2, #4]
 800a0de:	6894      	ldr	r4, [r2, #8]
 800a0e0:	68d0      	ldr	r0, [r2, #12]
 800a0e2:	6019      	str	r1, [r3, #0]
 800a0e4:	605d      	str	r5, [r3, #4]
 800a0e6:	609c      	str	r4, [r3, #8]
 800a0e8:	60d8      	str	r0, [r3, #12]
 800a0ea:	6911      	ldr	r1, [r2, #16]
 800a0ec:	6119      	str	r1, [r3, #16]
	memcpy(userNameWifiK1,userNameWifi,20);
 800a0ee:	4b62      	ldr	r3, [pc, #392]	; (800a278 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x278>)
 800a0f0:	4a5b      	ldr	r2, [pc, #364]	; (800a260 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x260>)
 800a0f2:	6811      	ldr	r1, [r2, #0]
 800a0f4:	6855      	ldr	r5, [r2, #4]
 800a0f6:	6894      	ldr	r4, [r2, #8]
 800a0f8:	68d0      	ldr	r0, [r2, #12]
 800a0fa:	6019      	str	r1, [r3, #0]
 800a0fc:	605d      	str	r5, [r3, #4]
 800a0fe:	609c      	str	r4, [r3, #8]
 800a100:	60d8      	str	r0, [r3, #12]
 800a102:	6911      	ldr	r1, [r2, #16]
 800a104:	6119      	str	r1, [r3, #16]
	memcpy(passwordWifiK1,passwordWifi,20);
 800a106:	4b5d      	ldr	r3, [pc, #372]	; (800a27c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x27c>)
 800a108:	4a56      	ldr	r2, [pc, #344]	; (800a264 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x264>)
 800a10a:	6811      	ldr	r1, [r2, #0]
 800a10c:	6855      	ldr	r5, [r2, #4]
 800a10e:	6894      	ldr	r4, [r2, #8]
 800a110:	68d0      	ldr	r0, [r2, #12]
 800a112:	6019      	str	r1, [r3, #0]
 800a114:	605d      	str	r5, [r3, #4]
 800a116:	609c      	str	r4, [r3, #8]
 800a118:	60d8      	str	r0, [r3, #12]
 800a11a:	6911      	ldr	r1, [r2, #16]
 800a11c:	6119      	str	r1, [r3, #16]

	noOfByteUsrPsw =0;
 800a11e:	4b58      	ldr	r3, [pc, #352]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
	for(lenp=noOfByteUsrPsw;lenp<10;lenp++){
 800a124:	4b56      	ldr	r3, [pc, #344]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	77bb      	strb	r3, [r7, #30]
 800a12a:	7fbb      	ldrb	r3, [r7, #30]
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	d80b      	bhi.n	800a148 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x148>
		CMDATCWJAPUsernamePswGlobal[lenp] = CMDATCWJAPUsernamePswHead[lenp];}
 800a130:	7fba      	ldrb	r2, [r7, #30]
 800a132:	7fbb      	ldrb	r3, [r7, #30]
 800a134:	3220      	adds	r2, #32
 800a136:	443a      	add	r2, r7
 800a138:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800a13c:	4a51      	ldr	r2, [pc, #324]	; (800a284 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x284>)
 800a13e:	54d1      	strb	r1, [r2, r3]
	for(lenp=noOfByteUsrPsw;lenp<10;lenp++){
 800a140:	7fbb      	ldrb	r3, [r7, #30]
 800a142:	3301      	adds	r3, #1
 800a144:	77bb      	strb	r3, [r7, #30]
 800a146:	e7f0      	b.n	800a12a <_ZN14OfflineStorage17dwinCloudDataReadEv+0x12a>
	noOfByteUsrPsw=0+10;
 800a148:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a14a:	220a      	movs	r2, #10
 800a14c:	701a      	strb	r2, [r3, #0]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<lengthOfUserName;lenp++,lenk++){
 800a14e:	4b4c      	ldr	r3, [pc, #304]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	77bb      	strb	r3, [r7, #30]
 800a154:	2300      	movs	r3, #0
 800a156:	777b      	strb	r3, [r7, #29]
 800a158:	4b44      	ldr	r3, [pc, #272]	; (800a26c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x26c>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	7f7a      	ldrb	r2, [r7, #29]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d20c      	bcs.n	800a17c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x17c>
		CMDATCWJAPUsernamePswGlobal[lenp] = userNameWifi[lenk];
 800a162:	7f7a      	ldrb	r2, [r7, #29]
 800a164:	7fbb      	ldrb	r3, [r7, #30]
 800a166:	493e      	ldr	r1, [pc, #248]	; (800a260 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x260>)
 800a168:	5c89      	ldrb	r1, [r1, r2]
 800a16a:	4a46      	ldr	r2, [pc, #280]	; (800a284 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x284>)
 800a16c:	54d1      	strb	r1, [r2, r3]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<lengthOfUserName;lenp++,lenk++){
 800a16e:	7fbb      	ldrb	r3, [r7, #30]
 800a170:	3301      	adds	r3, #1
 800a172:	77bb      	strb	r3, [r7, #30]
 800a174:	7f7b      	ldrb	r3, [r7, #29]
 800a176:	3301      	adds	r3, #1
 800a178:	777b      	strb	r3, [r7, #29]
 800a17a:	e7ed      	b.n	800a158 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x158>
	}
	noOfByteUsrPsw=0+10+lengthOfUserName;
 800a17c:	4b3b      	ldr	r3, [pc, #236]	; (800a26c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x26c>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	330a      	adds	r3, #10
 800a182:	b2da      	uxtb	r2, r3
 800a184:	4b3e      	ldr	r3, [pc, #248]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a186:	701a      	strb	r2, [r3, #0]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<3;lenp++,lenk++){
 800a188:	4b3d      	ldr	r3, [pc, #244]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	77bb      	strb	r3, [r7, #30]
 800a18e:	2300      	movs	r3, #0
 800a190:	777b      	strb	r3, [r7, #29]
 800a192:	7f7b      	ldrb	r3, [r7, #29]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d80e      	bhi.n	800a1b6 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x1b6>
			CMDATCWJAPUsernamePswGlobal[lenp] = CMDATCWJAPUsernamePswBody[lenk];
 800a198:	7f7a      	ldrb	r2, [r7, #29]
 800a19a:	7fbb      	ldrb	r3, [r7, #30]
 800a19c:	3220      	adds	r2, #32
 800a19e:	443a      	add	r2, r7
 800a1a0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800a1a4:	4a37      	ldr	r2, [pc, #220]	; (800a284 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x284>)
 800a1a6:	54d1      	strb	r1, [r2, r3]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<3;lenp++,lenk++){
 800a1a8:	7fbb      	ldrb	r3, [r7, #30]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	77bb      	strb	r3, [r7, #30]
 800a1ae:	7f7b      	ldrb	r3, [r7, #29]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	777b      	strb	r3, [r7, #29]
 800a1b4:	e7ed      	b.n	800a192 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x192>
	}
	noOfByteUsrPsw=0+10+lengthOfUserName+3;
 800a1b6:	4b2d      	ldr	r3, [pc, #180]	; (800a26c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x26c>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	330d      	adds	r3, #13
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	4b30      	ldr	r3, [pc, #192]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a1c0:	701a      	strb	r2, [r3, #0]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<lengthOfPassword;lenp++,lenk++){
 800a1c2:	4b2f      	ldr	r3, [pc, #188]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	77bb      	strb	r3, [r7, #30]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	777b      	strb	r3, [r7, #29]
 800a1cc:	4b28      	ldr	r3, [pc, #160]	; (800a270 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x270>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	7f7a      	ldrb	r2, [r7, #29]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d20c      	bcs.n	800a1f0 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x1f0>
			CMDATCWJAPUsernamePswGlobal[lenp] = passwordWifi[lenk];
 800a1d6:	7f7a      	ldrb	r2, [r7, #29]
 800a1d8:	7fbb      	ldrb	r3, [r7, #30]
 800a1da:	4922      	ldr	r1, [pc, #136]	; (800a264 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x264>)
 800a1dc:	5c89      	ldrb	r1, [r1, r2]
 800a1de:	4a29      	ldr	r2, [pc, #164]	; (800a284 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x284>)
 800a1e0:	54d1      	strb	r1, [r2, r3]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<lengthOfPassword;lenp++,lenk++){
 800a1e2:	7fbb      	ldrb	r3, [r7, #30]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	77bb      	strb	r3, [r7, #30]
 800a1e8:	7f7b      	ldrb	r3, [r7, #29]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	777b      	strb	r3, [r7, #29]
 800a1ee:	e7ed      	b.n	800a1cc <_ZN14OfflineStorage17dwinCloudDataReadEv+0x1cc>
	}
	noOfByteUsrPsw=0+10+lengthOfUserName+3+lengthOfPassword;
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x26c>)
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	4b1e      	ldr	r3, [pc, #120]	; (800a270 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x270>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	330d      	adds	r3, #13
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	4b1f      	ldr	r3, [pc, #124]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a202:	701a      	strb	r2, [r3, #0]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<3;lenp++,lenk++){
 800a204:	4b1e      	ldr	r3, [pc, #120]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	77bb      	strb	r3, [r7, #30]
 800a20a:	2300      	movs	r3, #0
 800a20c:	777b      	strb	r3, [r7, #29]
 800a20e:	7f7b      	ldrb	r3, [r7, #29]
 800a210:	2b02      	cmp	r3, #2
 800a212:	d80e      	bhi.n	800a232 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x232>
				CMDATCWJAPUsernamePswGlobal[lenp] = CMDATCWJAPUsernamePswTail[lenk];
 800a214:	7f7a      	ldrb	r2, [r7, #29]
 800a216:	7fbb      	ldrb	r3, [r7, #30]
 800a218:	3220      	adds	r2, #32
 800a21a:	443a      	add	r2, r7
 800a21c:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800a220:	4a18      	ldr	r2, [pc, #96]	; (800a284 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x284>)
 800a222:	54d1      	strb	r1, [r2, r3]
	for(lenp=noOfByteUsrPsw,lenk=0;lenk<3;lenp++,lenk++){
 800a224:	7fbb      	ldrb	r3, [r7, #30]
 800a226:	3301      	adds	r3, #1
 800a228:	77bb      	strb	r3, [r7, #30]
 800a22a:	7f7b      	ldrb	r3, [r7, #29]
 800a22c:	3301      	adds	r3, #1
 800a22e:	777b      	strb	r3, [r7, #29]
 800a230:	e7ed      	b.n	800a20e <_ZN14OfflineStorage17dwinCloudDataReadEv+0x20e>
	}
	noOfByteUsrPsw=0+10+lengthOfUserName+3+lengthOfPassword+3;
 800a232:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <_ZN14OfflineStorage17dwinCloudDataReadEv+0x26c>)
 800a234:	781a      	ldrb	r2, [r3, #0]
 800a236:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x270>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	4413      	add	r3, r2
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	3310      	adds	r3, #16
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <_ZN14OfflineStorage17dwinCloudDataReadEv+0x280>)
 800a244:	701a      	strb	r2, [r3, #0]
}
 800a246:	bf00      	nop
 800a248:	3720      	adds	r7, #32
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bdb0      	pop	{r4, r5, r7, pc}
 800a24e:	bf00      	nop
 800a250:	08011b1c 	.word	0x08011b1c
 800a254:	08011b28 	.word	0x08011b28
 800a258:	08011b2c 	.word	0x08011b2c
 800a25c:	20000794 	.word	0x20000794
 800a260:	200007bc 	.word	0x200007bc
 800a264:	200007e4 	.word	0x200007e4
 800a268:	20000814 	.word	0x20000814
 800a26c:	20000815 	.word	0x20000815
 800a270:	20000816 	.word	0x20000816
 800a274:	200007a8 	.word	0x200007a8
 800a278:	200007d0 	.word	0x200007d0
 800a27c:	200007f8 	.word	0x200007f8
 800a280:	20000a58 	.word	0x20000a58
 800a284:	20000a1c 	.word	0x20000a1c

0800a288 <_ZN14OfflineStorage18specialMacDataReadEv>:

void OfflineStorage::specialMacDataRead()
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(specialMacData,602,0,2);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f103 001a 	add.w	r0, r3, #26
 800a296:	2302      	movs	r3, #2
 800a298:	2200      	movs	r2, #0
 800a29a:	f240 215a 	movw	r1, #602	; 0x25a
 800a29e:	f7f9 fdeb 	bl	8003e78 <W25qxx_ReadSector>
	productionInc = (specialMacData[1]<<8|specialMacData[0]);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	7edb      	ldrb	r3, [r3, #27]
 800a2a6:	021b      	lsls	r3, r3, #8
 800a2a8:	b21a      	sxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7e9b      	ldrb	r3, [r3, #26]
 800a2ae:	b21b      	sxth	r3, r3
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	b21b      	sxth	r3, r3
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <_ZN14OfflineStorage18specialMacDataReadEv+0x44>)
 800a2b8:	801a      	strh	r2, [r3, #0]
	productionIncK1 = productionInc;
 800a2ba:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <_ZN14OfflineStorage18specialMacDataReadEv+0x44>)
 800a2bc:	881a      	ldrh	r2, [r3, #0]
 800a2be:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <_ZN14OfflineStorage18specialMacDataReadEv+0x48>)
 800a2c0:	801a      	strh	r2, [r3, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000776 	.word	0x20000776
 800a2d0:	20000a18 	.word	0x20000a18

0800a2d4 <_ZN14OfflineStorage14dwinRxDataReadEv>:

void OfflineStorage::dwinRxDataRead()
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(specialMacData,604,0,4);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f103 001a 	add.w	r0, r3, #26
 800a2e2:	2304      	movs	r3, #4
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800a2ea:	f7f9 fdc5 	bl	8003e78 <W25qxx_ReadSector>
	machineId = (specialMacData[1]<<8|specialMacData[0]);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7edb      	ldrb	r3, [r3, #27]
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	b21a      	sxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7e9b      	ldrb	r3, [r3, #26]
 800a2fa:	b21b      	sxth	r3, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b21b      	sxth	r3, r3
 800a300:	b29a      	uxth	r2, r3
 800a302:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <_ZN14OfflineStorage14dwinRxDataReadEv+0x64>)
 800a304:	801a      	strh	r2, [r3, #0]
	portNumber = (specialMacData[3]<<8|specialMacData[2]);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	7f5b      	ldrb	r3, [r3, #29]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	b21a      	sxth	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7f1b      	ldrb	r3, [r3, #28]
 800a312:	b21b      	sxth	r3, r3
 800a314:	4313      	orrs	r3, r2
 800a316:	b21b      	sxth	r3, r3
 800a318:	b29a      	uxth	r2, r3
 800a31a:	4b08      	ldr	r3, [pc, #32]	; (800a33c <_ZN14OfflineStorage14dwinRxDataReadEv+0x68>)
 800a31c:	801a      	strh	r2, [r3, #0]
	machineIdK1 = machineId;
 800a31e:	4b06      	ldr	r3, [pc, #24]	; (800a338 <_ZN14OfflineStorage14dwinRxDataReadEv+0x64>)
 800a320:	881a      	ldrh	r2, [r3, #0]
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <_ZN14OfflineStorage14dwinRxDataReadEv+0x6c>)
 800a324:	801a      	strh	r2, [r3, #0]
	portNumberK1 = portNumber;
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <_ZN14OfflineStorage14dwinRxDataReadEv+0x68>)
 800a328:	881a      	ldrh	r2, [r3, #0]
 800a32a:	4b06      	ldr	r3, [pc, #24]	; (800a344 <_ZN14OfflineStorage14dwinRxDataReadEv+0x70>)
 800a32c:	801a      	strh	r2, [r3, #0]
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2000078a 	.word	0x2000078a
 800a33c:	2000078e 	.word	0x2000078e
 800a340:	2000078c 	.word	0x2000078c
 800a344:	20000790 	.word	0x20000790

0800a348 <_ZN14OfflineStorage15processDataReadEv>:

void OfflineStorage::processDataRead()
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(processData,603,0,8);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a356:	2308      	movs	r3, #8
 800a358:	2200      	movs	r2, #0
 800a35a:	f240 215b 	movw	r1, #603	; 0x25b
 800a35e:	f7f9 fd8b 	bl	8003e78 <W25qxx_ReadSector>
	requirementId = (processData[1]<<8|processData[0]);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	b21a      	sxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a372:	b21b      	sxth	r3, r3
 800a374:	4313      	orrs	r3, r2
 800a376:	b21b      	sxth	r3, r3
 800a378:	b29a      	uxth	r2, r3
 800a37a:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <_ZN14OfflineStorage15processDataReadEv+0x9c>)
 800a37c:	801a      	strh	r2, [r3, #0]
	requirementIdK1 = (processData[3]<<8|processData[2]);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	b21a      	sxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a38e:	b21b      	sxth	r3, r3
 800a390:	4313      	orrs	r3, r2
 800a392:	b21b      	sxth	r3, r3
 800a394:	b29a      	uxth	r2, r3
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <_ZN14OfflineStorage15processDataReadEv+0xa0>)
 800a398:	801a      	strh	r2, [r3, #0]
	productionTarget = (processData[5]<<8|processData[4]);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	b21a      	sxth	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b21b      	sxth	r3, r3
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	4b0e      	ldr	r3, [pc, #56]	; (800a3ec <_ZN14OfflineStorage15processDataReadEv+0xa4>)
 800a3b4:	801a      	strh	r2, [r3, #0]
	triggerStartForReq = processData[6];
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800a3bc:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <_ZN14OfflineStorage15processDataReadEv+0xa8>)
 800a3be:	701a      	strb	r2, [r3, #0]
	startStopStatus = processData[7];
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800a3c6:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <_ZN14OfflineStorage15processDataReadEv+0xac>)
 800a3c8:	701a      	strb	r2, [r3, #0]
	triggerStartForReqK1= triggerStartForReq;
 800a3ca:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <_ZN14OfflineStorage15processDataReadEv+0xa8>)
 800a3cc:	781a      	ldrb	r2, [r3, #0]
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <_ZN14OfflineStorage15processDataReadEv+0xb0>)
 800a3d0:	701a      	strb	r2, [r3, #0]
	startStopStatusK1 = startStopStatus;
 800a3d2:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <_ZN14OfflineStorage15processDataReadEv+0xac>)
 800a3d4:	781a      	ldrb	r2, [r3, #0]
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <_ZN14OfflineStorage15processDataReadEv+0xb4>)
 800a3d8:	701a      	strb	r2, [r3, #0]
}
 800a3da:	bf00      	nop
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000010a 	.word	0x2000010a
 800a3e8:	20000778 	.word	0x20000778
 800a3ec:	2000077a 	.word	0x2000077a
 800a3f0:	2000077c 	.word	0x2000077c
 800a3f4:	2000010f 	.word	0x2000010f
 800a3f8:	20000a1a 	.word	0x20000a1a
 800a3fc:	20000a1b 	.word	0x20000a1b

0800a400 <_ZN14OfflineStorage19ReadOfflinedataInitEv>:

void OfflineStorage::ReadOfflinedataInit()
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(FlashMemProductiondata,600,0,26);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	1d18      	adds	r0, r3, #4
 800a40c:	231a      	movs	r3, #26
 800a40e:	2200      	movs	r2, #0
 800a410:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a414:	f7f9 fd30 	bl	8003e78 <W25qxx_ReadSector>
	MAC_Gen_Prod_Input1_Production 		= 0;//(FlashMemProductiondata[1]<<8|FlashMemProductiondata[0]);
 800a418:	4b39      	ldr	r3, [pc, #228]	; (800a500 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x100>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production_K1 	= (FlashMemProductiondata[3]<<8|FlashMemProductiondata[2]);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	79db      	ldrb	r3, [r3, #7]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	b21a      	sxth	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	799b      	ldrb	r3, [r3, #6]
 800a42a:	b21b      	sxth	r3, r3
 800a42c:	4313      	orrs	r3, r2
 800a42e:	b21b      	sxth	r3, r3
 800a430:	b29a      	uxth	r2, r3
 800a432:	4b34      	ldr	r3, [pc, #208]	; (800a504 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x104>)
 800a434:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production 		= 0;//(FlashMemProductiondata[5]<<8|FlashMemProductiondata[4]);
 800a436:	4b34      	ldr	r3, [pc, #208]	; (800a508 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x108>)
 800a438:	2200      	movs	r2, #0
 800a43a:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1 	= (FlashMemProductiondata[7]<<8|FlashMemProductiondata[6]);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	7adb      	ldrb	r3, [r3, #11]
 800a440:	021b      	lsls	r3, r3, #8
 800a442:	b21a      	sxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	7a9b      	ldrb	r3, [r3, #10]
 800a448:	b21b      	sxth	r3, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	b21b      	sxth	r3, r3
 800a44e:	b29a      	uxth	r2, r3
 800a450:	4b2e      	ldr	r3, [pc, #184]	; (800a50c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x10c>)
 800a452:	801a      	strh	r2, [r3, #0]
	Production_Zeit 					= (FlashMemProductiondata[9]<<8|FlashMemProductiondata[8]);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7b5b      	ldrb	r3, [r3, #13]
 800a458:	021b      	lsls	r3, r3, #8
 800a45a:	b21a      	sxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7b1b      	ldrb	r3, [r3, #12]
 800a460:	b21b      	sxth	r3, r3
 800a462:	4313      	orrs	r3, r2
 800a464:	b21b      	sxth	r3, r3
 800a466:	b29a      	uxth	r2, r3
 800a468:	4b29      	ldr	r3, [pc, #164]	; (800a510 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x110>)
 800a46a:	801a      	strh	r2, [r3, #0]
	Rejection_Zeit 						= (FlashMemProductiondata[11]<<8|FlashMemProductiondata[10]);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7bdb      	ldrb	r3, [r3, #15]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	b21a      	sxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	7b9b      	ldrb	r3, [r3, #14]
 800a478:	b21b      	sxth	r3, r3
 800a47a:	4313      	orrs	r3, r2
 800a47c:	b21b      	sxth	r3, r3
 800a47e:	b29a      	uxth	r2, r3
 800a480:	4b24      	ldr	r3, [pc, #144]	; (800a514 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x114>)
 800a482:	801a      	strh	r2, [r3, #0]
	hour_t								= FlashMemProductiondata[12];
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7c1a      	ldrb	r2, [r3, #16]
 800a488:	4b23      	ldr	r3, [pc, #140]	; (800a518 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x118>)
 800a48a:	701a      	strb	r2, [r3, #0]
	min_t								= FlashMemProductiondata[13];
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	7c5a      	ldrb	r2, [r3, #17]
 800a490:	4b22      	ldr	r3, [pc, #136]	; (800a51c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x11c>)
 800a492:	701a      	strb	r2, [r3, #0]
	sec_t								= FlashMemProductiondata[14];
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7c9a      	ldrb	r2, [r3, #18]
 800a498:	4b21      	ldr	r3, [pc, #132]	; (800a520 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x120>)
 800a49a:	701a      	strb	r2, [r3, #0]
	date_Rtc							= FlashMemProductiondata[15];
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7cda      	ldrb	r2, [r3, #19]
 800a4a0:	4b20      	ldr	r3, [pc, #128]	; (800a524 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x124>)
 800a4a2:	701a      	strb	r2, [r3, #0]
	month_Rtc							= FlashMemProductiondata[16];
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7d1a      	ldrb	r2, [r3, #20]
 800a4a8:	4b1f      	ldr	r3, [pc, #124]	; (800a528 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x128>)
 800a4aa:	701a      	strb	r2, [r3, #0]
	year_Rtc							= FlashMemProductiondata[17];
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	7d5a      	ldrb	r2, [r3, #21]
 800a4b0:	4b1e      	ldr	r3, [pc, #120]	; (800a52c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x12c>)
 800a4b2:	701a      	strb	r2, [r3, #0]
	SectorPos 							= (FlashMemProductiondata[19]<<8|FlashMemProductiondata[18]);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7ddb      	ldrb	r3, [r3, #23]
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	b21a      	sxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7d9b      	ldrb	r3, [r3, #22]
 800a4c0:	b21b      	sxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b21b      	sxth	r3, r3
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	4b19      	ldr	r3, [pc, #100]	; (800a530 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x130>)
 800a4ca:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount				= 0;(FlashMemProductiondata[21]<<8|FlashMemProductiondata[20]);
 800a4cc:	4b19      	ldr	r3, [pc, #100]	; (800a534 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x134>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
	Manual_RejectionCount_K1	        = 0;(FlashMemProductiondata[23]<<8|FlashMemProductiondata[22]);
 800a4d2:	4b19      	ldr	r3, [pc, #100]	; (800a538 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x138>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	801a      	strh	r2, [r3, #0]
	CurrentShift						= FlashMemProductiondata[24];
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7f1a      	ldrb	r2, [r3, #28]
 800a4dc:	4b17      	ldr	r3, [pc, #92]	; (800a53c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x13c>)
 800a4de:	701a      	strb	r2, [r3, #0]
	CurrentShift_K1						= FlashMemProductiondata[25];
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	7f5a      	ldrb	r2, [r3, #29]
 800a4e4:	4b16      	ldr	r3, [pc, #88]	; (800a540 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x140>)
 800a4e6:	701a      	strb	r2, [r3, #0]

	W25qxx_ReadSector(BlockStatusOffline,601,0,40);
 800a4e8:	2328      	movs	r3, #40	; 0x28
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f240 2159 	movw	r1, #601	; 0x259
 800a4f0:	4814      	ldr	r0, [pc, #80]	; (800a544 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x144>)
 800a4f2:	f7f9 fcc1 	bl	8003e78 <W25qxx_ReadSector>


	//if(SectorPos)

//	W25qxx_EraseBlock(23);
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000768 	.word	0x20000768
 800a504:	200009e8 	.word	0x200009e8
 800a508:	2000076c 	.word	0x2000076c
 800a50c:	200009ea 	.word	0x200009ea
 800a510:	2000076a 	.word	0x2000076a
 800a514:	2000076e 	.word	0x2000076e
 800a518:	20000a59 	.word	0x20000a59
 800a51c:	20000a5a 	.word	0x20000a5a
 800a520:	20000a5b 	.word	0x20000a5b
 800a524:	20000a5d 	.word	0x20000a5d
 800a528:	20000a5e 	.word	0x20000a5e
 800a52c:	20000a5f 	.word	0x20000a5f
 800a530:	200009ee 	.word	0x200009ee
 800a534:	20000770 	.word	0x20000770
 800a538:	200009ec 	.word	0x200009ec
 800a53c:	20000a60 	.word	0x20000a60
 800a540:	20000772 	.word	0x20000772
 800a544:	200009f0 	.word	0x200009f0

0800a548 <_ZN5SHIFTC1Ev>:

extern uint8_t SW_Hour,SW_Minute;
extern uint8_t Updatetimeinfo;
extern uint8_t SW_Date,SW_Month,SW_Year;

SHIFT::SHIFT() {
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	4a04      	ldr	r2, [pc, #16]	; (800a564 <_ZN5SHIFTC1Ev+0x1c>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	08011df8 	.word	0x08011df8

0800a568 <_ZN5SHIFTD1Ev>:

SHIFT::~SHIFT() {
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	4a04      	ldr	r2, [pc, #16]	; (800a584 <_ZN5SHIFTD1Ev+0x1c>)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	08011df8 	.word	0x08011df8

0800a588 <_ZN5SHIFTD0Ev>:
SHIFT::~SHIFT() {
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
}
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ffe9 	bl	800a568 <_ZN5SHIFTD1Ev>
 800a596:	2118      	movs	r1, #24
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f006 fcb2 	bl	8010f02 <_ZdlPvj>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <_ZN5SHIFT16shiftCalculationEv>:

void SHIFT::shiftCalculation(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	rtc_get_time(&hour_t,&min_t,&sec_t);
 800a5b0:	4a61      	ldr	r2, [pc, #388]	; (800a738 <_ZN5SHIFT16shiftCalculationEv+0x190>)
 800a5b2:	4962      	ldr	r1, [pc, #392]	; (800a73c <_ZN5SHIFT16shiftCalculationEv+0x194>)
 800a5b4:	4862      	ldr	r0, [pc, #392]	; (800a740 <_ZN5SHIFT16shiftCalculationEv+0x198>)
 800a5b6:	f7f8 fef3 	bl	80033a0 <rtc_get_time>
	rtc_get_date(&Wdate_Rtc,&date_Rtc,&month_Rtc,&year_Rtc);
 800a5ba:	4b62      	ldr	r3, [pc, #392]	; (800a744 <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 800a5bc:	4a62      	ldr	r2, [pc, #392]	; (800a748 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 800a5be:	4963      	ldr	r1, [pc, #396]	; (800a74c <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 800a5c0:	4863      	ldr	r0, [pc, #396]	; (800a750 <_ZN5SHIFT16shiftCalculationEv+0x1a8>)
 800a5c2:	f7f8 ff51 	bl	8003468 <rtc_get_date>

	if(Updatetimeinfo)
 800a5c6:	4b63      	ldr	r3, [pc, #396]	; (800a754 <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d051      	beq.n	800a672 <_ZN5SHIFT16shiftCalculationEv+0xca>
	{
		Updatetimeinfo=0;
 800a5ce:	4b61      	ldr	r3, [pc, #388]	; (800a754 <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
		locTimeTotal    =  (((hour_t)*(60))+(min_t));
 800a5d4:	4b5a      	ldr	r3, [pc, #360]	; (800a740 <_ZN5SHIFT16shiftCalculationEv+0x198>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	461a      	mov	r2, r3
 800a5dc:	0112      	lsls	r2, r2, #4
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	4b55      	ldr	r3, [pc, #340]	; (800a73c <_ZN5SHIFT16shiftCalculationEv+0x194>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	4413      	add	r3, r2
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	829a      	strh	r2, [r3, #20]
		onlineTimeTotal =  (((SW_Hour)*(60))+(SW_Minute));
 800a5f2:	4b59      	ldr	r3, [pc, #356]	; (800a758 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	0112      	lsls	r2, r2, #4
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	b29a      	uxth	r2, r3
 800a602:	4b56      	ldr	r3, [pc, #344]	; (800a75c <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	4413      	add	r3, r2
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	82da      	strh	r2, [r3, #22]
		if((locTimeTotal <= (onlineTimeTotal-3)) || (locTimeTotal >= (onlineTimeTotal+3)))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	8adb      	ldrh	r3, [r3, #22]
 800a614:	3b02      	subs	r3, #2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	8a92      	ldrh	r2, [r2, #20]
 800a61a:	4293      	cmp	r3, r2
 800a61c:	dc06      	bgt.n	800a62c <_ZN5SHIFT16shiftCalculationEv+0x84>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	8adb      	ldrh	r3, [r3, #22]
 800a622:	3302      	adds	r3, #2
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	8a92      	ldrh	r2, [r2, #20]
 800a628:	4293      	cmp	r3, r2
 800a62a:	da07      	bge.n	800a63c <_ZN5SHIFT16shiftCalculationEv+0x94>
		{
			  rtc_set_time(SW_Hour,SW_Minute,30);
 800a62c:	4b4a      	ldr	r3, [pc, #296]	; (800a758 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4a4a      	ldr	r2, [pc, #296]	; (800a75c <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 800a632:	7811      	ldrb	r1, [r2, #0]
 800a634:	221e      	movs	r2, #30
 800a636:	4618      	mov	r0, r3
 800a638:	f7f8 fee6 	bl	8003408 <rtc_set_time>
		}
		if((date_Rtc != SW_Date) || (month_Rtc != SW_Month) || (year_Rtc != SW_Year))
 800a63c:	4b43      	ldr	r3, [pc, #268]	; (800a74c <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	4b47      	ldr	r3, [pc, #284]	; (800a760 <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d10b      	bne.n	800a660 <_ZN5SHIFT16shiftCalculationEv+0xb8>
 800a648:	4b3f      	ldr	r3, [pc, #252]	; (800a748 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 800a64a:	781a      	ldrb	r2, [r3, #0]
 800a64c:	4b45      	ldr	r3, [pc, #276]	; (800a764 <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d105      	bne.n	800a660 <_ZN5SHIFT16shiftCalculationEv+0xb8>
 800a654:	4b3b      	ldr	r3, [pc, #236]	; (800a744 <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 800a656:	781a      	ldrb	r2, [r3, #0]
 800a658:	4b43      	ldr	r3, [pc, #268]	; (800a768 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d008      	beq.n	800a672 <_ZN5SHIFT16shiftCalculationEv+0xca>
		{
			rtc_set_date(2,SW_Date,SW_Month,SW_Year);
 800a660:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 800a662:	7819      	ldrb	r1, [r3, #0]
 800a664:	4b3f      	ldr	r3, [pc, #252]	; (800a764 <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	4b3f      	ldr	r3, [pc, #252]	; (800a768 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2002      	movs	r0, #2
 800a66e:	f7f8 ff35 	bl	80034dc <rtc_set_date>
		}
	}
	TotalMinutesvar = (((hour_t)*(60))+(min_t));
 800a672:	4b33      	ldr	r3, [pc, #204]	; (800a740 <_ZN5SHIFT16shiftCalculationEv+0x198>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	0112      	lsls	r2, r2, #4
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	b29a      	uxth	r2, r3
 800a682:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <_ZN5SHIFT16shiftCalculationEv+0x194>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	b29b      	uxth	r3, r3
 800a688:	4413      	add	r3, r2
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	809a      	strh	r2, [r3, #4]
	Shift1_OnTime = (((8)*(60))+(31));	  //495
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a696:	80da      	strh	r2, [r3, #6]
	Shift1_OffTime = (((16)*(60))+(30)); //974
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f240 32de 	movw	r2, #990	; 0x3de
 800a69e:	811a      	strh	r2, [r3, #8]

	Shift2_OnTime = (((16)*(60))+(31));	 //975
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f240 32df 	movw	r2, #991	; 0x3df
 800a6a6:	815a      	strh	r2, [r3, #10]
	shift2_buffer_time_1 = (((23)*(60))+(59)); // 1439
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f240 529f 	movw	r2, #1439	; 0x59f
 800a6ae:	819a      	strh	r2, [r3, #12]
	Shift2_OffTime = (((0)*(60))+(30));	 //14
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	221e      	movs	r2, #30
 800a6b4:	81da      	strh	r2, [r3, #14]

	Shift3_OnTime = (((0)*(60))+(31));	//15
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	221f      	movs	r2, #31
 800a6ba:	821a      	strh	r2, [r3, #16]
	Shift3_OffTime = (((8)*(60))+(30));	 //494
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800a6c2:	825a      	strh	r2, [r3, #18]

	if((TotalMinutesvar >=  Shift1_OnTime)&&(TotalMinutesvar <= Shift1_OffTime))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	889a      	ldrh	r2, [r3, #4]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d309      	bcc.n	800a6e4 <_ZN5SHIFT16shiftCalculationEv+0x13c>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	889a      	ldrh	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	891b      	ldrh	r3, [r3, #8]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d803      	bhi.n	800a6e4 <_ZN5SHIFT16shiftCalculationEv+0x13c>
	{
	   CurrentShift=1;
 800a6dc:	4b23      	ldr	r3, [pc, #140]	; (800a76c <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	701a      	strb	r2, [r3, #0]
 800a6e2:	e025      	b.n	800a730 <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if(((TotalMinutesvar >=  Shift2_OnTime)&&(TotalMinutesvar <= shift2_buffer_time_1))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	889a      	ldrh	r2, [r3, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	895b      	ldrh	r3, [r3, #10]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d305      	bcc.n	800a6fc <_ZN5SHIFT16shiftCalculationEv+0x154>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	889a      	ldrh	r2, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	899b      	ldrh	r3, [r3, #12]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d905      	bls.n	800a708 <_ZN5SHIFT16shiftCalculationEv+0x160>
				||((TotalMinutesvar>= 0)&&(TotalMinutesvar<=Shift2_OffTime)))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	889a      	ldrh	r2, [r3, #4]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	89db      	ldrh	r3, [r3, #14]
 800a704:	429a      	cmp	r2, r3
 800a706:	d803      	bhi.n	800a710 <_ZN5SHIFT16shiftCalculationEv+0x168>
	{//Included one brace to solve warning?
		CurrentShift=2;
 800a708:	4b18      	ldr	r3, [pc, #96]	; (800a76c <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800a70a:	2202      	movs	r2, #2
 800a70c:	701a      	strb	r2, [r3, #0]
 800a70e:	e00f      	b.n	800a730 <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if((TotalMinutesvar >=  Shift3_OnTime)&&(TotalMinutesvar <= Shift3_OffTime))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	889a      	ldrh	r2, [r3, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	8a1b      	ldrh	r3, [r3, #16]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d309      	bcc.n	800a730 <_ZN5SHIFT16shiftCalculationEv+0x188>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	889a      	ldrh	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	8a5b      	ldrh	r3, [r3, #18]
 800a724:	429a      	cmp	r2, r3
 800a726:	d803      	bhi.n	800a730 <_ZN5SHIFT16shiftCalculationEv+0x188>
	{
		CurrentShift=3;
 800a728:	4b10      	ldr	r3, [pc, #64]	; (800a76c <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800a72a:	2203      	movs	r2, #3
 800a72c:	701a      	strb	r2, [r3, #0]
	else
	{
	/*Error return*/
	}
	//UpdateShiftInfo =1;
}
 800a72e:	e7ff      	b.n	800a730 <_ZN5SHIFT16shiftCalculationEv+0x188>
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000a5b 	.word	0x20000a5b
 800a73c:	20000a5a 	.word	0x20000a5a
 800a740:	20000a59 	.word	0x20000a59
 800a744:	20000a5f 	.word	0x20000a5f
 800a748:	20000a5e 	.word	0x20000a5e
 800a74c:	20000a5d 	.word	0x20000a5d
 800a750:	20000a5c 	.word	0x20000a5c
 800a754:	200000ee 	.word	0x200000ee
 800a758:	200000f1 	.word	0x200000f1
 800a75c:	200000f2 	.word	0x200000f2
 800a760:	200000f3 	.word	0x200000f3
 800a764:	200000f4 	.word	0x200000f4
 800a768:	200000f5 	.word	0x200000f5
 800a76c:	20000a60 	.word	0x20000a60

0800a770 <_ZN5SHIFT3runEv>:

void SHIFT::run()
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
	shiftCalculation();
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff ff15 	bl	800a5a8 <_ZN5SHIFT16shiftCalculationEv>
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <_ZN7ESP8266C1Ev>:
extern uint8_t len_espIpAddress;
extern uint8_t CMDATCWJAPUsernamePswGlobal[60];
extern uint8_t noOfByteUsrPsw;


ESP8266::ESP8266() {
 800a788:	b5b0      	push	{r4, r5, r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	4ac9      	ldr	r2, [pc, #804]	; (800aab8 <_ZN7ESP8266C1Ev+0x330>)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4ac8      	ldr	r2, [pc, #800]	; (800aabc <_ZN7ESP8266C1Ev+0x334>)
 800a79a:	330e      	adds	r3, #14
 800a79c:	8811      	ldrh	r1, [r2, #0]
 800a79e:	7892      	ldrb	r2, [r2, #2]
 800a7a0:	8019      	strh	r1, [r3, #0]
 800a7a2:	709a      	strb	r2, [r3, #2]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	49c6      	ldr	r1, [pc, #792]	; (800aac0 <_ZN7ESP8266C1Ev+0x338>)
 800a7a8:	f103 0211 	add.w	r2, r3, #17
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	cb03      	ldmia	r3!, {r0, r1}
 800a7b0:	6010      	str	r0, [r2, #0]
 800a7b2:	6051      	str	r1, [r2, #4]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	7213      	strb	r3, [r2, #8]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4ac2      	ldr	r2, [pc, #776]	; (800aac4 <_ZN7ESP8266C1Ev+0x33c>)
 800a7bc:	331a      	adds	r3, #26
 800a7be:	6810      	ldr	r0, [r2, #0]
 800a7c0:	6018      	str	r0, [r3, #0]
 800a7c2:	8891      	ldrh	r1, [r2, #4]
 800a7c4:	7992      	ldrb	r2, [r2, #6]
 800a7c6:	8099      	strh	r1, [r3, #4]
 800a7c8:	719a      	strb	r2, [r3, #6]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	49be      	ldr	r1, [pc, #760]	; (800aac8 <_ZN7ESP8266C1Ev+0x340>)
 800a7ce:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800a7d2:	6808      	ldr	r0, [r1, #0]
 800a7d4:	6010      	str	r0, [r2, #0]
 800a7d6:	7909      	ldrb	r1, [r1, #4]
 800a7d8:	7111      	strb	r1, [r2, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800a7e0:	687d      	ldr	r5, [r7, #4]
 800a7e2:	4bba      	ldr	r3, [pc, #744]	; (800aacc <_ZN7ESP8266C1Ev+0x344>)
 800a7e4:	f105 0427 	add.w	r4, r5, #39	; 0x27
 800a7e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7ea:	6020      	str	r0, [r4, #0]
 800a7ec:	6061      	str	r1, [r4, #4]
 800a7ee:	60a2      	str	r2, [r4, #8]
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3336      	adds	r3, #54	; 0x36
 800a7fe:	222d      	movs	r2, #45	; 0x2d
 800a800:	2100      	movs	r1, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f006 fbc2 	bl	8010f8c <memset>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2241      	movs	r2, #65	; 0x41
 800a80c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2254      	movs	r2, #84	; 0x54
 800a814:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	222b      	movs	r2, #43	; 0x2b
 800a81c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2243      	movs	r2, #67	; 0x43
 800a824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2257      	movs	r2, #87	; 0x57
 800a82c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	224a      	movs	r2, #74	; 0x4a
 800a834:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2241      	movs	r2, #65	; 0x41
 800a83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2250      	movs	r2, #80	; 0x50
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	223d      	movs	r2, #61	; 0x3d
 800a84c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2222      	movs	r2, #34	; 0x22
 800a854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	224e      	movs	r2, #78	; 0x4e
 800a85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2241      	movs	r2, #65	; 0x41
 800a864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2256      	movs	r2, #86	; 0x56
 800a86c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2245      	movs	r2, #69	; 0x45
 800a874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2245      	movs	r2, #69	; 0x45
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	224e      	movs	r2, #78	; 0x4e
 800a884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2250      	movs	r2, #80	; 0x50
 800a88c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2248      	movs	r2, #72	; 0x48
 800a894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	224f      	movs	r2, #79	; 0x4f
 800a89c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	224e      	movs	r2, #78	; 0x4e
 800a8a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2245      	movs	r2, #69	; 0x45
 800a8ac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2222      	movs	r2, #34	; 0x22
 800a8b4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	222c      	movs	r2, #44	; 0x2c
 800a8bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2222      	movs	r2, #34	; 0x22
 800a8c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2239      	movs	r2, #57	; 0x39
 800a8cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2235      	movs	r2, #53	; 0x35
 800a8d4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2230      	movs	r2, #48	; 0x30
 800a8dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2230      	movs	r2, #48	; 0x30
 800a8e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2238      	movs	r2, #56	; 0x38
 800a8ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2237      	movs	r2, #55	; 0x37
 800a8f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2230      	movs	r2, #48	; 0x30
 800a8fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2233      	movs	r2, #51	; 0x33
 800a904:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2239      	movs	r2, #57	; 0x39
 800a90c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2238      	movs	r2, #56	; 0x38
 800a914:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2222      	movs	r2, #34	; 0x22
 800a91c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	220d      	movs	r2, #13
 800a924:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	220a      	movs	r2, #10
 800a92c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800a930:	687d      	ldr	r5, [r7, #4]
 800a932:	4b67      	ldr	r3, [pc, #412]	; (800aad0 <_ZN7ESP8266C1Ev+0x348>)
 800a934:	f105 0463 	add.w	r4, r5, #99	; 0x63
 800a938:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a93a:	6020      	str	r0, [r4, #0]
 800a93c:	6061      	str	r1, [r4, #4]
 800a93e:	60a2      	str	r2, [r4, #8]
 800a940:	2300      	movs	r3, #0
 800a942:	f885 306f 	strb.w	r3, [r5, #111]	; 0x6f
 800a946:	687c      	ldr	r4, [r7, #4]
 800a948:	4a62      	ldr	r2, [pc, #392]	; (800aad4 <_ZN7ESP8266C1Ev+0x34c>)
 800a94a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800a94e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a950:	c303      	stmia	r3!, {r0, r1}
 800a952:	801a      	strh	r2, [r3, #0]
 800a954:	3302      	adds	r3, #2
 800a956:	0c12      	lsrs	r2, r2, #16
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	f104 037b 	add.w	r3, r4, #123	; 0x7b
 800a95e:	2200      	movs	r2, #0
 800a960:	801a      	strh	r2, [r3, #0]
 800a962:	687d      	ldr	r5, [r7, #4]
 800a964:	4b5c      	ldr	r3, [pc, #368]	; (800aad8 <_ZN7ESP8266C1Ev+0x350>)
 800a966:	f105 047d 	add.w	r4, r5, #125	; 0x7d
 800a96a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a96c:	6020      	str	r0, [r4, #0]
 800a96e:	6061      	str	r1, [r4, #4]
 800a970:	60a2      	str	r2, [r4, #8]
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	2300      	movs	r3, #0
 800a978:	f885 308b 	strb.w	r3, [r5, #139]	; 0x8b
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	338c      	adds	r3, #140	; 0x8c
 800a980:	2232      	movs	r2, #50	; 0x32
 800a982:	2100      	movs	r1, #0
 800a984:	4618      	mov	r0, r3
 800a986:	f006 fb01 	bl	8010f8c <memset>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2241      	movs	r2, #65	; 0x41
 800a98e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2254      	movs	r2, #84	; 0x54
 800a996:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	222b      	movs	r2, #43	; 0x2b
 800a99e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2243      	movs	r2, #67	; 0x43
 800a9a6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2249      	movs	r2, #73	; 0x49
 800a9ae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2250      	movs	r2, #80	; 0x50
 800a9b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2253      	movs	r2, #83	; 0x53
 800a9be:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2254      	movs	r2, #84	; 0x54
 800a9c6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2241      	movs	r2, #65	; 0x41
 800a9ce:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2252      	movs	r2, #82	; 0x52
 800a9d6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2254      	movs	r2, #84	; 0x54
 800a9de:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	223d      	movs	r2, #61	; 0x3d
 800a9e6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2222      	movs	r2, #34	; 0x22
 800a9ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2254      	movs	r2, #84	; 0x54
 800a9f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2243      	movs	r2, #67	; 0x43
 800a9fe:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2250      	movs	r2, #80	; 0x50
 800aa06:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2222      	movs	r2, #34	; 0x22
 800aa0e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	222c      	movs	r2, #44	; 0x2c
 800aa16:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2222      	movs	r2, #34	; 0x22
 800aa1e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2231      	movs	r2, #49	; 0x31
 800aa26:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2232      	movs	r2, #50	; 0x32
 800aa2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2232      	movs	r2, #50	; 0x32
 800aa36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	222e      	movs	r2, #46	; 0x2e
 800aa3e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2231      	movs	r2, #49	; 0x31
 800aa46:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2236      	movs	r2, #54	; 0x36
 800aa4e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2235      	movs	r2, #53	; 0x35
 800aa56:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	222e      	movs	r2, #46	; 0x2e
 800aa5e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2232      	movs	r2, #50	; 0x32
 800aa66:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2230      	movs	r2, #48	; 0x30
 800aa6e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2236      	movs	r2, #54	; 0x36
 800aa76:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	222e      	movs	r2, #46	; 0x2e
 800aa7e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2231      	movs	r2, #49	; 0x31
 800aa86:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2233      	movs	r2, #51	; 0x33
 800aa8e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2236      	movs	r2, #54	; 0x36
 800aa96:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2222      	movs	r2, #34	; 0x22
 800aa9e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	222c      	movs	r2, #44	; 0x2c
 800aaa6:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2239      	movs	r2, #57	; 0x39
 800aaae:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2230      	movs	r2, #48	; 0x30
 800aab6:	e011      	b.n	800aadc <_ZN7ESP8266C1Ev+0x354>
 800aab8:	08011e08 	.word	0x08011e08
 800aabc:	08011b30 	.word	0x08011b30
 800aac0:	08011b34 	.word	0x08011b34
 800aac4:	08011b40 	.word	0x08011b40
 800aac8:	08011b48 	.word	0x08011b48
 800aacc:	08011b50 	.word	0x08011b50
 800aad0:	08011b60 	.word	0x08011b60
 800aad4:	08011b70 	.word	0x08011b70
 800aad8:	08011b80 	.word	0x08011b80
 800aadc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2230      	movs	r2, #48	; 0x30
 800aae4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2235      	movs	r2, #53	; 0x35
 800aaec:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	220d      	movs	r2, #13
 800aaf4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	220a      	movs	r2, #10
 800aafc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	33d2      	adds	r3, #210	; 0xd2
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	605a      	str	r2, [r3, #4]
 800ab0a:	609a      	str	r2, [r3, #8]
 800ab0c:	60da      	str	r2, [r3, #12]
 800ab0e:	611a      	str	r2, [r3, #16]
 800ab10:	687d      	ldr	r5, [r7, #4]
 800ab12:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <_ZN7ESP8266C1Ev+0x3ac>)
 800ab14:	f205 249e 	addw	r4, r5, #670	; 0x29e
 800ab18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab1a:	6020      	str	r0, [r4, #0]
 800ab1c:	6061      	str	r1, [r4, #4]
 800ab1e:	60a2      	str	r2, [r4, #8]
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	2300      	movs	r3, #0
 800ab26:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
	// TODO Auto-generated constructor stub

}
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bdb0      	pop	{r4, r5, r7, pc}
 800ab34:	08011b90 	.word	0x08011b90

0800ab38 <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	4a04      	ldr	r2, [pc, #16]	; (800ab54 <_ZN7ESP8266D1Ev+0x1c>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	08011e08 	.word	0x08011e08

0800ab58 <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
}
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff ffe9 	bl	800ab38 <_ZN7ESP8266D1Ev>
 800ab66:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f006 f9c9 	bl	8010f02 <_ZdlPvj>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
	RefreshWifiData();
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fc82 	bl	800b48c <_ZN7ESP826615RefreshWifiDataEv>
	Send_WifiCmd();
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f805 	bl	800ab98 <_ZN7ESP826612Send_WifiCmdEv>

}
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af02      	add	r7, sp, #8
 800ab9e:	6078      	str	r0, [r7, #4]
	switch(wifi_command)
 800aba0:	4bc2      	ldr	r3, [pc, #776]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	3b05      	subs	r3, #5
 800aba6:	2b75      	cmp	r3, #117	; 0x75
 800aba8:	f200 8421 	bhi.w	800b3ee <_ZN7ESP826612Send_WifiCmdEv+0x856>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800ad8d 	.word	0x0800ad8d
 800abb8:	0800b3ef 	.word	0x0800b3ef
 800abbc:	0800b3ef 	.word	0x0800b3ef
 800abc0:	0800b3ef 	.word	0x0800b3ef
 800abc4:	0800b3ef 	.word	0x0800b3ef
 800abc8:	0800adb1 	.word	0x0800adb1
 800abcc:	0800addb 	.word	0x0800addb
 800abd0:	0800ae09 	.word	0x0800ae09
 800abd4:	0800ae2d 	.word	0x0800ae2d
 800abd8:	0800ae5b 	.word	0x0800ae5b
 800abdc:	0800ae85 	.word	0x0800ae85
 800abe0:	0800b3ef 	.word	0x0800b3ef
 800abe4:	0800b3ef 	.word	0x0800b3ef
 800abe8:	0800b3ef 	.word	0x0800b3ef
 800abec:	0800b3ef 	.word	0x0800b3ef
 800abf0:	0800aec9 	.word	0x0800aec9
 800abf4:	0800af05 	.word	0x0800af05
 800abf8:	0800b3ef 	.word	0x0800b3ef
 800abfc:	0800b3ef 	.word	0x0800b3ef
 800ac00:	0800b3ef 	.word	0x0800b3ef
 800ac04:	0800b3ef 	.word	0x0800b3ef
 800ac08:	0800b3ef 	.word	0x0800b3ef
 800ac0c:	0800b3ef 	.word	0x0800b3ef
 800ac10:	0800b3ef 	.word	0x0800b3ef
 800ac14:	0800b3ef 	.word	0x0800b3ef
 800ac18:	0800af49 	.word	0x0800af49
 800ac1c:	0800b3ef 	.word	0x0800b3ef
 800ac20:	0800b3ef 	.word	0x0800b3ef
 800ac24:	0800b3ef 	.word	0x0800b3ef
 800ac28:	0800b3ef 	.word	0x0800b3ef
 800ac2c:	0800b3ef 	.word	0x0800b3ef
 800ac30:	0800b3ef 	.word	0x0800b3ef
 800ac34:	0800b3ef 	.word	0x0800b3ef
 800ac38:	0800b3ef 	.word	0x0800b3ef
 800ac3c:	0800b3ef 	.word	0x0800b3ef
 800ac40:	0800b3ef 	.word	0x0800b3ef
 800ac44:	0800af73 	.word	0x0800af73
 800ac48:	0800b3ef 	.word	0x0800b3ef
 800ac4c:	0800b3ef 	.word	0x0800b3ef
 800ac50:	0800b3ef 	.word	0x0800b3ef
 800ac54:	0800b3ef 	.word	0x0800b3ef
 800ac58:	0800b3ef 	.word	0x0800b3ef
 800ac5c:	0800b3ef 	.word	0x0800b3ef
 800ac60:	0800b3ef 	.word	0x0800b3ef
 800ac64:	0800b01d 	.word	0x0800b01d
 800ac68:	0800b04b 	.word	0x0800b04b
 800ac6c:	0800b075 	.word	0x0800b075
 800ac70:	0800b3ef 	.word	0x0800b3ef
 800ac74:	0800b3ef 	.word	0x0800b3ef
 800ac78:	0800b3ef 	.word	0x0800b3ef
 800ac7c:	0800b3ef 	.word	0x0800b3ef
 800ac80:	0800b3ef 	.word	0x0800b3ef
 800ac84:	0800b3ef 	.word	0x0800b3ef
 800ac88:	0800b3ef 	.word	0x0800b3ef
 800ac8c:	0800b3ef 	.word	0x0800b3ef
 800ac90:	0800b3ef 	.word	0x0800b3ef
 800ac94:	0800b3ef 	.word	0x0800b3ef
 800ac98:	0800b3ef 	.word	0x0800b3ef
 800ac9c:	0800b3ef 	.word	0x0800b3ef
 800aca0:	0800b3ef 	.word	0x0800b3ef
 800aca4:	0800b3ef 	.word	0x0800b3ef
 800aca8:	0800b3ef 	.word	0x0800b3ef
 800acac:	0800b3ef 	.word	0x0800b3ef
 800acb0:	0800b3ef 	.word	0x0800b3ef
 800acb4:	0800b3ef 	.word	0x0800b3ef
 800acb8:	0800b0a3 	.word	0x0800b0a3
 800acbc:	0800b0cd 	.word	0x0800b0cd
 800acc0:	0800b3ef 	.word	0x0800b3ef
 800acc4:	0800b3ef 	.word	0x0800b3ef
 800acc8:	0800b3ef 	.word	0x0800b3ef
 800accc:	0800b3ef 	.word	0x0800b3ef
 800acd0:	0800b3ef 	.word	0x0800b3ef
 800acd4:	0800b3ef 	.word	0x0800b3ef
 800acd8:	0800b3ef 	.word	0x0800b3ef
 800acdc:	0800b3ef 	.word	0x0800b3ef
 800ace0:	0800b0fb 	.word	0x0800b0fb
 800ace4:	0800b125 	.word	0x0800b125
 800ace8:	0800b3ef 	.word	0x0800b3ef
 800acec:	0800b3ef 	.word	0x0800b3ef
 800acf0:	0800b3ef 	.word	0x0800b3ef
 800acf4:	0800b3ef 	.word	0x0800b3ef
 800acf8:	0800b3ef 	.word	0x0800b3ef
 800acfc:	0800b3ef 	.word	0x0800b3ef
 800ad00:	0800b3ef 	.word	0x0800b3ef
 800ad04:	0800b3ef 	.word	0x0800b3ef
 800ad08:	0800b17d 	.word	0x0800b17d
 800ad0c:	0800b22f 	.word	0x0800b22f
 800ad10:	0800b3ef 	.word	0x0800b3ef
 800ad14:	0800b3ef 	.word	0x0800b3ef
 800ad18:	0800b3ef 	.word	0x0800b3ef
 800ad1c:	0800b3ef 	.word	0x0800b3ef
 800ad20:	0800b3ef 	.word	0x0800b3ef
 800ad24:	0800b3ef 	.word	0x0800b3ef
 800ad28:	0800b3ef 	.word	0x0800b3ef
 800ad2c:	0800b3ef 	.word	0x0800b3ef
 800ad30:	0800b25d 	.word	0x0800b25d
 800ad34:	0800b2d3 	.word	0x0800b2d3
 800ad38:	0800b377 	.word	0x0800b377
 800ad3c:	0800b3a3 	.word	0x0800b3a3
 800ad40:	0800b2f1 	.word	0x0800b2f1
 800ad44:	0800b349 	.word	0x0800b349
 800ad48:	0800b32d 	.word	0x0800b32d
 800ad4c:	0800b3ef 	.word	0x0800b3ef
 800ad50:	0800b3ef 	.word	0x0800b3ef
 800ad54:	0800b3ef 	.word	0x0800b3ef
 800ad58:	0800b3cf 	.word	0x0800b3cf
 800ad5c:	0800b3ef 	.word	0x0800b3ef
 800ad60:	0800b3ef 	.word	0x0800b3ef
 800ad64:	0800b3ef 	.word	0x0800b3ef
 800ad68:	0800b3ef 	.word	0x0800b3ef
 800ad6c:	0800b3ef 	.word	0x0800b3ef
 800ad70:	0800b3ef 	.word	0x0800b3ef
 800ad74:	0800b3ef 	.word	0x0800b3ef
 800ad78:	0800b3ef 	.word	0x0800b3ef
 800ad7c:	0800b3ef 	.word	0x0800b3ef
 800ad80:	0800b3f7 	.word	0x0800b3f7
 800ad84:	0800afa1 	.word	0x0800afa1
 800ad88:	0800afe9 	.word	0x0800afe9
	{
	case 5:
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	2104      	movs	r1, #4
 800ad90:	4847      	ldr	r0, [pc, #284]	; (800aeb0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800ad92:	f001 f971 	bl	800c078 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800ad96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad9a:	f000 fe27 	bl	800b9ec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2104      	movs	r1, #4
 800ada2:	4843      	ldr	r0, [pc, #268]	; (800aeb0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800ada4:	f001 f968 	bl	800c078 <HAL_GPIO_WritePin>
		wifi_command=13;
 800ada8:	4b40      	ldr	r3, [pc, #256]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800adaa:	220d      	movs	r2, #13
 800adac:	701a      	strb	r2, [r3, #0]

	break;
 800adae:	e368      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 10://reset
	NoOfdata_byte=7;
 800adb0:	4b40      	ldr	r3, [pc, #256]	; (800aeb4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800adb2:	2207      	movs	r2, #7
 800adb4:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800adb6:	4b3d      	ldr	r3, [pc, #244]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800adb8:	220d      	movs	r2, #13
 800adba:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800adbc:	4b3e      	ldr	r3, [pc, #248]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800adc2:	4b3e      	ldr	r3, [pc, #248]	; (800aebc <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3311      	adds	r3, #17
 800adcc:	4a39      	ldr	r2, [pc, #228]	; (800aeb4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800adce:	8812      	ldrh	r2, [r2, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	483b      	ldr	r0, [pc, #236]	; (800aec0 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 800add4:	f004 fd3c 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800add8:	e353      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 11:
	if(++Timerdelay >6)
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	4b35      	ldr	r3, [pc, #212]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ade4:	701a      	strb	r2, [r3, #0]
 800ade6:	4b34      	ldr	r3, [pc, #208]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b06      	cmp	r3, #6
 800adec:	bf8c      	ite	hi
 800adee:	2301      	movhi	r3, #1
 800adf0:	2300      	movls	r3, #0
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 8300 	beq.w	800b3fa <_ZN7ESP826612Send_WifiCmdEv+0x862>
	{
		Timerdelay=0;
 800adfa:	4b2f      	ldr	r3, [pc, #188]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 800ae00:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800ae02:	220e      	movs	r2, #14
 800ae04:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ae06:	e2f8      	b.n	800b3fa <_ZN7ESP826612Send_WifiCmdEv+0x862>
	case 12:
	NoOfdata_byte=6;
 800ae08:	4b2a      	ldr	r3, [pc, #168]	; (800aeb4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800ae0a:	2206      	movs	r2, #6
 800ae0c:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800ae0e:	4b27      	ldr	r3, [pc, #156]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800ae10:	220d      	movs	r2, #13
 800ae12:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ae14:	4b28      	ldr	r3, [pc, #160]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	331a      	adds	r3, #26
 800ae1e:	4a25      	ldr	r2, [pc, #148]	; (800aeb4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800ae20:	8812      	ldrh	r2, [r2, #0]
 800ae22:	4619      	mov	r1, r3
 800ae24:	4826      	ldr	r0, [pc, #152]	; (800aec0 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 800ae26:	f004 fd13 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800ae2a:	e32a      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 13:
	if(++Timerdelay >12)
 800ae2c:	4b22      	ldr	r3, [pc, #136]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	3301      	adds	r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	4b20      	ldr	r3, [pc, #128]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	4b1f      	ldr	r3, [pc, #124]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b0c      	cmp	r3, #12
 800ae3e:	bf8c      	ite	hi
 800ae40:	2301      	movhi	r3, #1
 800ae42:	2300      	movls	r3, #0
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 82d9 	beq.w	800b3fe <_ZN7ESP826612Send_WifiCmdEv+0x866>
	{
		Timerdelay=0;
 800ae4c:	4b1a      	ldr	r3, [pc, #104]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 800ae52:	4b16      	ldr	r3, [pc, #88]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800ae54:	2214      	movs	r2, #20
 800ae56:	701a      	strb	r2, [r3, #0]
	}
	break;
 800ae58:	e2d1      	b.n	800b3fe <_ZN7ESP826612Send_WifiCmdEv+0x866>
	case 14:
	NoOfdata_byte=4;
 800ae5a:	4b16      	ldr	r3, [pc, #88]	; (800aeb4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800ae5c:	2204      	movs	r2, #4
 800ae5e:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 800ae60:	4b18      	ldr	r3, [pc, #96]	; (800aec4 <_ZN7ESP826612Send_WifiCmdEv+0x32c>)
 800ae62:	2208      	movs	r2, #8
 800ae64:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 800ae66:	4b11      	ldr	r3, [pc, #68]	; (800aeac <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800ae68:	2214      	movs	r2, #20
 800ae6a:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800ae6c:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3321      	adds	r3, #33	; 0x21
 800ae76:	4a0f      	ldr	r2, [pc, #60]	; (800aeb4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 800ae78:	8812      	ldrh	r2, [r2, #0]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4810      	ldr	r0, [pc, #64]	; (800aec0 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 800ae7e:	f004 fce7 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800ae82:	e2fe      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 15:
	if(++Timerdelay >2)
 800ae84:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	bf8c      	ite	hi
 800ae98:	2301      	movhi	r3, #1
 800ae9a:	2300      	movls	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 82af 	beq.w	800b402 <_ZN7ESP826612Send_WifiCmdEv+0x86a>
	{
		Timerdelay=0;
 800aea4:	4b04      	ldr	r3, [pc, #16]	; (800aeb8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	701a      	strb	r2, [r3, #0]
	}
	break;
 800aeaa:	e2aa      	b.n	800b402 <_ZN7ESP826612Send_WifiCmdEv+0x86a>
 800aeac:	20000a62 	.word	0x20000a62
 800aeb0:	48000400 	.word	0x48000400
 800aeb4:	20000c2c 	.word	0x20000c2c
 800aeb8:	20000c2e 	.word	0x20000c2e
 800aebc:	20000c28 	.word	0x20000c28
 800aec0:	200003f0 	.word	0x200003f0
 800aec4:	20000c29 	.word	0x20000c29
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 800aec8:	4ba2      	ldr	r3, [pc, #648]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800aeca:	220d      	movs	r2, #13
 800aecc:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 800aece:	4ba2      	ldr	r3, [pc, #648]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800aed4:	4ba1      	ldr	r3, [pc, #644]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800aeda:	4ba1      	ldr	r3, [pc, #644]	; (800b160 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3327      	adds	r3, #39	; 0x27
 800aee4:	4a9b      	ldr	r2, [pc, #620]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800aee6:	8812      	ldrh	r2, [r2, #0]
 800aee8:	4619      	mov	r1, r3
 800aeea:	489e      	ldr	r0, [pc, #632]	; (800b164 <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800aeec:	f004 fcb0 	bl	800f850 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 800aef0:	4b9d      	ldr	r3, [pc, #628]	; (800b168 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	3301      	adds	r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	4b9b      	ldr	r3, [pc, #620]	; (800b168 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800aefa:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 800aefc:	4b9b      	ldr	r3, [pc, #620]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800aefe:	2215      	movs	r2, #21
 800af00:	701a      	strb	r2, [r3, #0]

	break;
 800af02:	e2be      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >5)
 800af04:	4b95      	ldr	r3, [pc, #596]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	3301      	adds	r3, #1
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b93      	ldr	r3, [pc, #588]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	4b92      	ldr	r3, [pc, #584]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b05      	cmp	r3, #5
 800af16:	bf8c      	ite	hi
 800af18:	2301      	movhi	r3, #1
 800af1a:	2300      	movls	r3, #0
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 8271 	beq.w	800b406 <_ZN7ESP826612Send_WifiCmdEv+0x86e>
	{
		Timerdelay=0;
 800af24:	4b8d      	ldr	r3, [pc, #564]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 800af2a:	4b8f      	ldr	r3, [pc, #572]	; (800b168 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d106      	bne.n	800af40 <_ZN7ESP826612Send_WifiCmdEv+0x3a8>
		{
			wifi_command=5;	 //Hardware reset
 800af32:	4b8e      	ldr	r3, [pc, #568]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800af34:	2205      	movs	r2, #5
 800af36:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 800af38:	4b8b      	ldr	r3, [pc, #556]	; (800b168 <_ZN7ESP826612Send_WifiCmdEv+0x5d0>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 800af3e:	e262      	b.n	800b406 <_ZN7ESP826612Send_WifiCmdEv+0x86e>
			wifi_command=10;
 800af40:	4b8a      	ldr	r3, [pc, #552]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800af42:	220a      	movs	r2, #10
 800af44:	701a      	strb	r2, [r3, #0]
	break;
 800af46:	e25e      	b.n	800b406 <_ZN7ESP826612Send_WifiCmdEv+0x86e>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	Rxseqdecoder=2;
 800af48:	4b83      	ldr	r3, [pc, #524]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800af4a:	2202      	movs	r2, #2
 800af4c:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 800af4e:	4b87      	ldr	r3, [pc, #540]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800af50:	2229      	movs	r2, #41	; 0x29
 800af52:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800af54:	4b81      	ldr	r3, [pc, #516]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 800af5a:	4b81      	ldr	r3, [pc, #516]	; (800b160 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	701a      	strb	r2, [r3, #0]
	//CMDATCWJAPUsernamePsw =
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePswGlobal,noOfByteUsrPsw);
 800af60:	4b83      	ldr	r3, [pc, #524]	; (800b170 <_ZN7ESP826612Send_WifiCmdEv+0x5d8>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	4982      	ldr	r1, [pc, #520]	; (800b174 <_ZN7ESP826612Send_WifiCmdEv+0x5dc>)
 800af6a:	487e      	ldr	r0, [pc, #504]	; (800b164 <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800af6c:	f004 fc70 	bl	800f850 <HAL_UART_Transmit_IT>
	break;		   //add retry
 800af70:	e287      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 41:	   //resend if o replay
	if(++Timerdelay >30)
 800af72:	4b7a      	ldr	r3, [pc, #488]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	3301      	adds	r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	4b78      	ldr	r3, [pc, #480]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	4b77      	ldr	r3, [pc, #476]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b1e      	cmp	r3, #30
 800af84:	bf8c      	ite	hi
 800af86:	2301      	movhi	r3, #1
 800af88:	2300      	movls	r3, #0
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 823c 	beq.w	800b40a <_ZN7ESP826612Send_WifiCmdEv+0x872>
	{
		Timerdelay=0;
 800af92:	4b72      	ldr	r3, [pc, #456]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800af94:	2200      	movs	r2, #0
 800af96:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 800af98:	4b74      	ldr	r3, [pc, #464]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800af9a:	220a      	movs	r2, #10
 800af9c:	701a      	strb	r2, [r3, #0]
	}
	break;
 800af9e:	e234      	b.n	800b40a <_ZN7ESP826612Send_WifiCmdEv+0x872>
	case 121:
		bufferptr=0;
 800afa0:	4b6f      	ldr	r3, [pc, #444]	; (800b160 <_ZN7ESP826612Send_WifiCmdEv+0x5c8>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]
		Rxseqdecoder=9;
 800afa6:	4b6c      	ldr	r3, [pc, #432]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800afa8:	2209      	movs	r2, #9
 800afaa:	701a      	strb	r2, [r3, #0]
		refinc=0;
 800afac:	4b72      	ldr	r3, [pc, #456]	; (800b178 <_ZN7ESP826612Send_WifiCmdEv+0x5e0>)
 800afae:	2200      	movs	r2, #0
 800afb0:	701a      	strb	r2, [r3, #0]
		if(++Timerdelay >8)
 800afb2:	4b6a      	ldr	r3, [pc, #424]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	3301      	adds	r3, #1
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	4b68      	ldr	r3, [pc, #416]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	4b67      	ldr	r3, [pc, #412]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	bf8c      	ite	hi
 800afc6:	2301      	movhi	r3, #1
 800afc8:	2300      	movls	r3, #0
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8245 	beq.w	800b45c <_ZN7ESP826612Send_WifiCmdEv+0x8c4>
		{
			Timerdelay=0;
 800afd2:	4b62      	ldr	r3, [pc, #392]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&hlpuart1,CMDATCifsrRead,10);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3370      	adds	r3, #112	; 0x70
 800afdc:	220a      	movs	r2, #10
 800afde:	4619      	mov	r1, r3
 800afe0:	4860      	ldr	r0, [pc, #384]	; (800b164 <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800afe2:	f004 fc35 	bl	800f850 <HAL_UART_Transmit_IT>
		}
	break;
 800afe6:	e239      	b.n	800b45c <_ZN7ESP826612Send_WifiCmdEv+0x8c4>
	case 122:
		if(++Timerdelay >4)
 800afe8:	4b5c      	ldr	r3, [pc, #368]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	3301      	adds	r3, #1
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	4b5a      	ldr	r3, [pc, #360]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	4b59      	ldr	r3, [pc, #356]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b04      	cmp	r3, #4
 800affa:	bf8c      	ite	hi
 800affc:	2301      	movhi	r3, #1
 800affe:	2300      	movls	r3, #0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 822c 	beq.w	800b460 <_ZN7ESP826612Send_WifiCmdEv+0x8c8>
		{
			Timerdelay=0;
 800b008:	4b54      	ldr	r3, [pc, #336]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	701a      	strb	r2, [r3, #0]
			wifi_command=49;
 800b00e:	4b57      	ldr	r3, [pc, #348]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b010:	2231      	movs	r2, #49	; 0x31
 800b012:	701a      	strb	r2, [r3, #0]
			Rxseqdecoder=0;
 800b014:	4b50      	ldr	r3, [pc, #320]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800b016:	2200      	movs	r2, #0
 800b018:	701a      	strb	r2, [r3, #0]
		}
	break;
 800b01a:	e221      	b.n	800b460 <_ZN7ESP826612Send_WifiCmdEv+0x8c8>
	case 49:
	if(++Timerdelay >8)
 800b01c:	4b4f      	ldr	r3, [pc, #316]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	b2da      	uxtb	r2, r3
 800b024:	4b4d      	ldr	r3, [pc, #308]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	4b4c      	ldr	r3, [pc, #304]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	bf8c      	ite	hi
 800b030:	2301      	movhi	r3, #1
 800b032:	2300      	movls	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 8214 	beq.w	800b464 <_ZN7ESP826612Send_WifiCmdEv+0x8cc>
	{
		Timerdelay=0;
 800b03c:	4b47      	ldr	r3, [pc, #284]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800b042:	4b4a      	ldr	r3, [pc, #296]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b044:	2232      	movs	r2, #50	; 0x32
 800b046:	701a      	strb	r2, [r3, #0]
	}
	break;
 800b048:	e20c      	b.n	800b464 <_ZN7ESP826612Send_WifiCmdEv+0x8cc>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 800b04a:	4b42      	ldr	r3, [pc, #264]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800b04c:	220b      	movs	r2, #11
 800b04e:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 800b050:	4b46      	ldr	r3, [pc, #280]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b052:	2233      	movs	r2, #51	; 0x33
 800b054:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 800b056:	4b40      	ldr	r3, [pc, #256]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800b058:	2203      	movs	r2, #3
 800b05a:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800b05c:	4b3f      	ldr	r3, [pc, #252]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b05e:	2200      	movs	r2, #0
 800b060:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3363      	adds	r3, #99	; 0x63
 800b066:	4a3b      	ldr	r2, [pc, #236]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800b068:	8812      	ldrh	r2, [r2, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	483d      	ldr	r0, [pc, #244]	; (800b164 <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800b06e:	f004 fbef 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800b072:	e206      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 51:
	if(++Timerdelay >15)
 800b074:	4b39      	ldr	r3, [pc, #228]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	4b37      	ldr	r3, [pc, #220]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	4b36      	ldr	r3, [pc, #216]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b0f      	cmp	r3, #15
 800b086:	bf8c      	ite	hi
 800b088:	2301      	movhi	r3, #1
 800b08a:	2300      	movls	r3, #0
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 81ea 	beq.w	800b468 <_ZN7ESP826612Send_WifiCmdEv+0x8d0>
	{
		Timerdelay=0;
 800b094:	4b31      	ldr	r3, [pc, #196]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 800b09a:	4b34      	ldr	r3, [pc, #208]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b09c:	220a      	movs	r2, #10
 800b09e:	701a      	strb	r2, [r3, #0]
	}

	break;
 800b0a0:	e1e2      	b.n	800b468 <_ZN7ESP826612Send_WifiCmdEv+0x8d0>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 800b0a2:	4b2c      	ldr	r3, [pc, #176]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800b0a4:	220d      	movs	r2, #13
 800b0a6:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 800b0a8:	4b30      	ldr	r3, [pc, #192]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b0aa:	2247      	movs	r2, #71	; 0x47
 800b0ac:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 800b0ae:	4b2a      	ldr	r3, [pc, #168]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800b0b0:	2204      	movs	r2, #4
 800b0b2:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800b0b4:	4b29      	ldr	r3, [pc, #164]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	337d      	adds	r3, #125	; 0x7d
 800b0be:	4a25      	ldr	r2, [pc, #148]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800b0c0:	8812      	ldrh	r2, [r2, #0]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4827      	ldr	r0, [pc, #156]	; (800b164 <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800b0c6:	f004 fbc3 	bl	800f850 <HAL_UART_Transmit_IT>
	break;	  //2sec
 800b0ca:	e1da      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 71:
	if(++Timerdelay >15)
 800b0cc:	4b23      	ldr	r3, [pc, #140]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	4b21      	ldr	r3, [pc, #132]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	4b20      	ldr	r3, [pc, #128]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b0f      	cmp	r3, #15
 800b0de:	bf8c      	ite	hi
 800b0e0:	2301      	movhi	r3, #1
 800b0e2:	2300      	movls	r3, #0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 81c0 	beq.w	800b46c <_ZN7ESP826612Send_WifiCmdEv+0x8d4>
	{
		Timerdelay=0;
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 800b0f2:	4b1e      	ldr	r3, [pc, #120]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	701a      	strb	r2, [r3, #0]
	}
	break;
 800b0f8:	e1b8      	b.n	800b46c <_ZN7ESP826612Send_WifiCmdEv+0x8d4>
	case 80:
	NoOfdata_byte=42;//41;//55;
 800b0fa:	4b16      	ldr	r3, [pc, #88]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800b0fc:	222a      	movs	r2, #42	; 0x2a
 800b0fe:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 800b100:	4b1a      	ldr	r3, [pc, #104]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b102:	2251      	movs	r2, #81	; 0x51
 800b104:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <_ZN7ESP826612Send_WifiCmdEv+0x5c0>)
 800b108:	2205      	movs	r2, #5
 800b10a:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800b10c:	4b13      	ldr	r3, [pc, #76]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	338c      	adds	r3, #140	; 0x8c
 800b116:	4a0f      	ldr	r2, [pc, #60]	; (800b154 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 800b118:	8812      	ldrh	r2, [r2, #0]
 800b11a:	4619      	mov	r1, r3
 800b11c:	4811      	ldr	r0, [pc, #68]	; (800b164 <_ZN7ESP826612Send_WifiCmdEv+0x5cc>)
 800b11e:	f004 fb97 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800b122:	e1ae      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 81:					//5sec
	if(++Timerdelay >20)
 800b124:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	3301      	adds	r3, #1
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b14      	cmp	r3, #20
 800b136:	bf8c      	ite	hi
 800b138:	2301      	movhi	r3, #1
 800b13a:	2300      	movls	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 8196 	beq.w	800b470 <_ZN7ESP826612Send_WifiCmdEv+0x8d8>
	{
		Timerdelay=0;
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <_ZN7ESP826612Send_WifiCmdEv+0x5c4>)
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800b14a:	4b08      	ldr	r3, [pc, #32]	; (800b16c <_ZN7ESP826612Send_WifiCmdEv+0x5d4>)
 800b14c:	220a      	movs	r2, #10
 800b14e:	701a      	strb	r2, [r3, #0]
	}
	break;
 800b150:	e18e      	b.n	800b470 <_ZN7ESP826612Send_WifiCmdEv+0x8d8>
 800b152:	bf00      	nop
 800b154:	20000c2c 	.word	0x20000c2c
 800b158:	20000c29 	.word	0x20000c29
 800b15c:	20000c2e 	.word	0x20000c2e
 800b160:	20000c28 	.word	0x20000c28
 800b164:	200003f0 	.word	0x200003f0
 800b168:	20000c2a 	.word	0x20000c2a
 800b16c:	20000a62 	.word	0x20000a62
 800b170:	20000a58 	.word	0x20000a58
 800b174:	20000a1c 	.word	0x20000a1c
 800b178:	200001be 	.word	0x200001be
	case 90:   //CIPSEND

	ContentLength = 811;//106
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f240 322b 	movw	r2, #811	; 0x32b
 800b182:	819a      	strh	r2, [r3, #12]
	memcpy(espIpAddressSt,espIpAddress,11);
 800b184:	220b      	movs	r2, #11
 800b186:	49a2      	ldr	r1, [pc, #648]	; (800b410 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 800b188:	48a2      	ldr	r0, [pc, #648]	; (800b414 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800b18a:	f005 fef1 	bl	8010f70 <memcpy>
	len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&&ipAddress=%s HTTP/1.1\r\n"
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f103 00e6 	add.w	r0, r3, #230	; 0xe6
 800b194:	4ba0      	ldr	r3, [pc, #640]	; (800b418 <_ZN7ESP826612Send_WifiCmdEv+0x880>)
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	4619      	mov	r1, r3
 800b19a:	4ba0      	ldr	r3, [pc, #640]	; (800b41c <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	461a      	mov	r2, r3
												"Host: 122.165.206.136:%d\r\n"
												"Accept: text/html\r\n"
												"Content-Type: application/json\r\n"
												"Content-Length: %d\r\n\r\n[",machineId,espIpAddressSt,portNumber,ContentLength);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	899b      	ldrh	r3, [r3, #12]
	len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&&ipAddress=%s HTTP/1.1\r\n"
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	9200      	str	r2, [sp, #0]
 800b1a8:	4b9a      	ldr	r3, [pc, #616]	; (800b414 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800b1aa:	460a      	mov	r2, r1
 800b1ac:	499c      	ldr	r1, [pc, #624]	; (800b420 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800b1ae:	f005 ffe5 	bl	801117c <siprintf>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	4b9b      	ldr	r3, [pc, #620]	; (800b424 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800b1b8:	701a      	strb	r2, [r3, #0]
	Dyn_data_calc = len+(ContentLength);
 800b1ba:	4b9a      	ldr	r3, [pc, #616]	; (800b424 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	899b      	ldrh	r3, [r3, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	4b97      	ldr	r3, [pc, #604]	; (800b428 <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800b1ca:	801a      	strh	r2, [r3, #0]
	Framecheck=0;
 800b1cc:	4b97      	ldr	r3, [pc, #604]	; (800b42c <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= 16;
 800b1d2:	4b97      	ldr	r3, [pc, #604]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b1d4:	2210      	movs	r2, #16
 800b1d6:	801a      	strh	r2, [r3, #0]
	sprintf(SendData_charFormat,"AT+CIPSEND=%d\r\n",Dyn_data_calc);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	33d2      	adds	r3, #210	; 0xd2
 800b1dc:	4a92      	ldr	r2, [pc, #584]	; (800b428 <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800b1de:	8812      	ldrh	r2, [r2, #0]
 800b1e0:	4994      	ldr	r1, [pc, #592]	; (800b434 <_ZN7ESP826612Send_WifiCmdEv+0x89c>)
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f005 ffca 	bl	801117c <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 00be 	add.w	r0, r3, #190	; 0xbe
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	33d2      	adds	r3, #210	; 0xd2
 800b1f2:	4a8f      	ldr	r2, [pc, #572]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b1f4:	8812      	ldrh	r2, [r2, #0]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	f005 feba 	bl	8010f70 <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	33be      	adds	r3, #190	; 0xbe
 800b200:	4a8b      	ldr	r2, [pc, #556]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b202:	8812      	ldrh	r2, [r2, #0]
 800b204:	4619      	mov	r1, r3
 800b206:	488c      	ldr	r0, [pc, #560]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b208:	f004 fb22 	bl	800f850 <HAL_UART_Transmit_IT>
	wifi_command=91;
 800b20c:	4b8b      	ldr	r3, [pc, #556]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b20e:	225b      	movs	r2, #91	; 0x5b
 800b210:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 800b212:	4b8b      	ldr	r3, [pc, #556]	; (800b440 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b214:	2206      	movs	r2, #6
 800b216:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800b218:	4b8a      	ldr	r3, [pc, #552]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 800b21e:	4b84      	ldr	r3, [pc, #528]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	4988      	ldr	r1, [pc, #544]	; (800b448 <_ZN7ESP826612Send_WifiCmdEv+0x8b0>)
 800b226:	4884      	ldr	r0, [pc, #528]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b228:	f004 fb12 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800b22c:	e129      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 91:
	if(++Timerdelay >15)
 800b22e:	4b85      	ldr	r3, [pc, #532]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	b2da      	uxtb	r2, r3
 800b236:	4b83      	ldr	r3, [pc, #524]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b238:	701a      	strb	r2, [r3, #0]
 800b23a:	4b82      	ldr	r3, [pc, #520]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b0f      	cmp	r3, #15
 800b240:	bf8c      	ite	hi
 800b242:	2301      	movhi	r3, #1
 800b244:	2300      	movls	r3, #0
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 8113 	beq.w	800b474 <_ZN7ESP826612Send_WifiCmdEv+0x8dc>
	{
		Timerdelay=0;
 800b24e:	4b7d      	ldr	r3, [pc, #500]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800b254:	4b79      	ldr	r3, [pc, #484]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b256:	220a      	movs	r2, #10
 800b258:	701a      	strb	r2, [r3, #0]
	}
	break;
 800b25a:	e10b      	b.n	800b474 <_ZN7ESP826612Send_WifiCmdEv+0x8dc>
	case 100:

		len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&ipAddress=%s HTTP/1.1\r\n"
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f103 00e6 	add.w	r0, r3, #230	; 0xe6
 800b262:	4b6d      	ldr	r3, [pc, #436]	; (800b418 <_ZN7ESP826612Send_WifiCmdEv+0x880>)
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	4619      	mov	r1, r3
 800b268:	4b6c      	ldr	r3, [pc, #432]	; (800b41c <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
									"Host: 122.165.206.136:%d\r\n"
									"Accept: text/html\r\n"
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",machineId,espIpAddressSt,portNumber,ContentLength);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	899b      	ldrh	r3, [r3, #12]
		len = sprintf(PostUrl_CharFormat,"POST /production?mac=%d&ipAddress=%s HTTP/1.1\r\n"
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	9200      	str	r2, [sp, #0]
 800b276:	4b67      	ldr	r3, [pc, #412]	; (800b414 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800b278:	460a      	mov	r2, r1
 800b27a:	4974      	ldr	r1, [pc, #464]	; (800b44c <_ZN7ESP826612Send_WifiCmdEv+0x8b4>)
 800b27c:	f005 ff7e 	bl	801117c <siprintf>
 800b280:	4603      	mov	r3, r0
 800b282:	b2da      	uxtb	r2, r3
 800b284:	4b67      	ldr	r3, [pc, #412]	; (800b424 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800b286:	701a      	strb	r2, [r3, #0]
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f503 70e1 	add.w	r0, r3, #450	; 0x1c2
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	33e6      	adds	r3, #230	; 0xe6
 800b292:	4a64      	ldr	r2, [pc, #400]	; (800b424 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800b294:	7812      	ldrb	r2, [r2, #0]
 800b296:	4619      	mov	r1, r3
 800b298:	f005 fe6a 	bl	8010f70 <memcpy>
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",ContentLength);
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len); */


	NoOfdata_byte	= 	url_buffer;
 800b29c:	4b6c      	ldr	r3, [pc, #432]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	4b63      	ldr	r3, [pc, #396]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b2a4:	801a      	strh	r2, [r3, #0]
	wifi_command	=	101;
 800b2a6:	4b65      	ldr	r3, [pc, #404]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b2a8:	2265      	movs	r2, #101	; 0x65
 800b2aa:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= url_buffer;
 800b2ac:	4b68      	ldr	r3, [pc, #416]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	4b5f      	ldr	r3, [pc, #380]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b2b4:	801a      	strh	r2, [r3, #0]
	Timerdelay=0;
 800b2b6:	4b63      	ldr	r3, [pc, #396]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,len);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800b2c2:	4a58      	ldr	r2, [pc, #352]	; (800b424 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800b2c4:	7812      	ldrb	r2, [r2, #0]
 800b2c6:	b292      	uxth	r2, r2
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	485b      	ldr	r0, [pc, #364]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b2cc:	f004 fac0 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800b2d0:	e0d7      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 101:
		NoOfdata_byte = 809;//34
 800b2d2:	4b57      	ldr	r3, [pc, #348]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b2d4:	f240 3229 	movw	r2, #809	; 0x329
 800b2d8:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,ProductionSet_uintFormat_MEM,NoOfdata_byte);
 800b2da:	4b55      	ldr	r3, [pc, #340]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	495c      	ldr	r1, [pc, #368]	; (800b454 <_ZN7ESP826612Send_WifiCmdEv+0x8bc>)
 800b2e2:	4855      	ldr	r0, [pc, #340]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b2e4:	f004 fab4 	bl	800f850 <HAL_UART_Transmit_IT>
		wifi_command=104;
 800b2e8:	4b54      	ldr	r3, [pc, #336]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b2ea:	2268      	movs	r2, #104	; 0x68
 800b2ec:	701a      	strb	r2, [r3, #0]
	break;
 800b2ee:	e0c8      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 104:
		url_buffer=0;
 800b2f0:	4b57      	ldr	r3, [pc, #348]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
		OnlineData_buffer[url_buffer] =  ']';
 800b2f6:	4b56      	ldr	r3, [pc, #344]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4b56      	ldr	r3, [pc, #344]	; (800b458 <_ZN7ESP826612Send_WifiCmdEv+0x8c0>)
 800b2fe:	215d      	movs	r1, #93	; 0x5d
 800b300:	5499      	strb	r1, [r3, r2]
		url_buffer++;
 800b302:	4b53      	ldr	r3, [pc, #332]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	4b51      	ldr	r3, [pc, #324]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b30c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 800b30e:	4b50      	ldr	r3, [pc, #320]	; (800b450 <_ZN7ESP826612Send_WifiCmdEv+0x8b8>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	461a      	mov	r2, r3
 800b316:	4950      	ldr	r1, [pc, #320]	; (800b458 <_ZN7ESP826612Send_WifiCmdEv+0x8c0>)
 800b318:	4847      	ldr	r0, [pc, #284]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b31a:	f004 fa99 	bl	800f850 <HAL_UART_Transmit_IT>
		Rxseqdecoder=7;
 800b31e:	4b48      	ldr	r3, [pc, #288]	; (800b440 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b320:	2207      	movs	r2, #7
 800b322:	701a      	strb	r2, [r3, #0]
		wifi_command=106;
 800b324:	4b45      	ldr	r3, [pc, #276]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b326:	226a      	movs	r2, #106	; 0x6a
 800b328:	701a      	strb	r2, [r3, #0]
	break;
 800b32a:	e0aa      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 106:
		Rxseqdecoder=7;
 800b32c:	4b44      	ldr	r3, [pc, #272]	; (800b440 <_ZN7ESP826612Send_WifiCmdEv+0x8a8>)
 800b32e:	2207      	movs	r2, #7
 800b330:	701a      	strb	r2, [r3, #0]
		wifi_command=105;
 800b332:	4b42      	ldr	r3, [pc, #264]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b334:	2269      	movs	r2, #105	; 0x69
 800b336:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,endCommand,2);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	330e      	adds	r3, #14
 800b33c:	2202      	movs	r2, #2
 800b33e:	4619      	mov	r1, r3
 800b340:	483d      	ldr	r0, [pc, #244]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b342:	f004 fa85 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800b346:	e09c      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 105:
		if(++Timerdelay>20)
 800b348:	4b3e      	ldr	r3, [pc, #248]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	3301      	adds	r3, #1
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	4b3c      	ldr	r3, [pc, #240]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	4b3b      	ldr	r3, [pc, #236]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b14      	cmp	r3, #20
 800b35a:	bf8c      	ite	hi
 800b35c:	2301      	movhi	r3, #1
 800b35e:	2300      	movls	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	f000 8088 	beq.w	800b478 <_ZN7ESP826612Send_WifiCmdEv+0x8e0>
	   {
		Timerdelay=0;
 800b368:	4b36      	ldr	r3, [pc, #216]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800b36e:	4b33      	ldr	r3, [pc, #204]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b370:	220a      	movs	r2, #10
 800b372:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800b374:	e080      	b.n	800b478 <_ZN7ESP826612Send_WifiCmdEv+0x8e0>
	case 102:

	   if(++Timerdelay>5)
 800b376:	4b33      	ldr	r3, [pc, #204]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	4b31      	ldr	r3, [pc, #196]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	4b30      	ldr	r3, [pc, #192]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b05      	cmp	r3, #5
 800b388:	bf8c      	ite	hi
 800b38a:	2301      	movhi	r3, #1
 800b38c:	2300      	movls	r3, #0
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d073      	beq.n	800b47c <_ZN7ESP826612Send_WifiCmdEv+0x8e4>
	   {
		Timerdelay=0;
 800b394:	4b2b      	ldr	r3, [pc, #172]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800b39a:	4b28      	ldr	r3, [pc, #160]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b39c:	2232      	movs	r2, #50	; 0x32
 800b39e:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800b3a0:	e06c      	b.n	800b47c <_ZN7ESP826612Send_WifiCmdEv+0x8e4>
	case 103:
	   if(++Timerdelay>2)
 800b3a2:	4b28      	ldr	r3, [pc, #160]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b26      	ldr	r3, [pc, #152]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	4b25      	ldr	r3, [pc, #148]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	bf8c      	ite	hi
 800b3b6:	2301      	movhi	r3, #1
 800b3b8:	2300      	movls	r3, #0
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d05f      	beq.n	800b480 <_ZN7ESP826612Send_WifiCmdEv+0x8e8>
	   {
		Timerdelay=0;
 800b3c0:	4b20      	ldr	r3, [pc, #128]	; (800b444 <_ZN7ESP826612Send_WifiCmdEv+0x8ac>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800b3c6:	4b1d      	ldr	r3, [pc, #116]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b3c8:	220a      	movs	r2, #10
 800b3ca:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800b3cc:	e058      	b.n	800b480 <_ZN7ESP826612Send_WifiCmdEv+0x8e8>
	case 110:
	NoOfdata_byte=12;
 800b3ce:	4b18      	ldr	r3, [pc, #96]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b3d0:	220c      	movs	r2, #12
 800b3d2:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 800b3d4:	4b19      	ldr	r3, [pc, #100]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b3d6:	2232      	movs	r2, #50	; 0x32
 800b3d8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f203 239e 	addw	r3, r3, #670	; 0x29e
 800b3e0:	4a13      	ldr	r2, [pc, #76]	; (800b430 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800b3e2:	8812      	ldrh	r2, [r2, #0]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4814      	ldr	r0, [pc, #80]	; (800b438 <_ZN7ESP826612Send_WifiCmdEv+0x8a0>)
 800b3e8:	f004 fa32 	bl	800f850 <HAL_UART_Transmit_IT>
	break;
 800b3ec:	e049      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	case 120:
	break;
	default:
	wifi_command=5;
 800b3ee:	4b13      	ldr	r3, [pc, #76]	; (800b43c <_ZN7ESP826612Send_WifiCmdEv+0x8a4>)
 800b3f0:	2205      	movs	r2, #5
 800b3f2:	701a      	strb	r2, [r3, #0]
	break;
 800b3f4:	e045      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b3f6:	bf00      	nop
 800b3f8:	e043      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b3fa:	bf00      	nop
 800b3fc:	e041      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b3fe:	bf00      	nop
 800b400:	e03f      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b402:	bf00      	nop
 800b404:	e03d      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b406:	bf00      	nop
 800b408:	e03b      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b40a:	bf00      	nop
 800b40c:	e039      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
 800b40e:	bf00      	nop
 800b410:	20000124 	.word	0x20000124
 800b414:	20000f8c 	.word	0x20000f8c
 800b418:	2000078a 	.word	0x2000078a
 800b41c:	2000078e 	.word	0x2000078e
 800b420:	08011ba0 	.word	0x08011ba0
 800b424:	20000018 	.word	0x20000018
 800b428:	20000c30 	.word	0x20000c30
 800b42c:	20000c34 	.word	0x20000c34
 800b430:	20000c2c 	.word	0x20000c2c
 800b434:	08011c38 	.word	0x08011c38
 800b438:	200003f0 	.word	0x200003f0
 800b43c:	20000a62 	.word	0x20000a62
 800b440:	20000c29 	.word	0x20000c29
 800b444:	20000c2e 	.word	0x20000c2e
 800b448:	20000a64 	.word	0x20000a64
 800b44c:	08011c48 	.word	0x08011c48
 800b450:	20000c2f 	.word	0x20000c2f
 800b454:	20000c38 	.word	0x20000c38
 800b458:	20000b60 	.word	0x20000b60
	break;
 800b45c:	bf00      	nop
 800b45e:	e010      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b460:	bf00      	nop
 800b462:	e00e      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b464:	bf00      	nop
 800b466:	e00c      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b468:	bf00      	nop
 800b46a:	e00a      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b46c:	bf00      	nop
 800b46e:	e008      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b470:	bf00      	nop
 800b472:	e006      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b474:	bf00      	nop
 800b476:	e004      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b478:	bf00      	nop
 800b47a:	e002      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b47c:	bf00      	nop
 800b47e:	e000      	b.n	800b482 <_ZN7ESP826612Send_WifiCmdEv+0x8ea>
	break;
 800b480:	bf00      	nop
 }
}
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop

0800b48c <_ZN7ESP826615RefreshWifiDataEv>:

void ESP8266::RefreshWifiData()
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b090      	sub	sp, #64	; 0x40
 800b490:	af0e      	add	r7, sp, #56	; 0x38
 800b492:	6078      	str	r0, [r7, #4]

	if((RefreshBlockInfo==0)||(powercycleRefresh==1))
 800b494:	4b93      	ldr	r3, [pc, #588]	; (800b6e4 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <_ZN7ESP826615RefreshWifiDataEv+0x1a>
 800b49c:	4b92      	ldr	r3, [pc, #584]	; (800b6e8 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	f040 811a 	bne.w	800b6da <_ZN7ESP826615RefreshWifiDataEv+0x24e>
	{
		RefreshBlockInfo=1;
 800b4a6:	4b8f      	ldr	r3, [pc, #572]	; (800b6e4 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	701a      	strb	r2, [r3, #0]
		if((currentdata==0)&&(powercycleRefresh==0))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d115      	bne.n	800b4e2 <_ZN7ESP826615RefreshWifiDataEv+0x56>
 800b4b6:	4b8c      	ldr	r3, [pc, #560]	; (800b6e8 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d111      	bne.n	800b4e2 <_ZN7ESP826615RefreshWifiDataEv+0x56>
		{
			BlockStatusOffline[sectorTosend]=0;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4b89      	ldr	r3, [pc, #548]	; (800b6ec <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	5499      	strb	r1, [r3, r2]
			W25qxx_EraseSector(601);
 800b4cc:	f240 2059 	movw	r0, #601	; 0x259
 800b4d0:	f7f8 fa16 	bl	8003900 <W25qxx_EraseSector>
			W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 800b4d4:	2328      	movs	r3, #40	; 0x28
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f240 2159 	movw	r1, #601	; 0x259
 800b4dc:	4883      	ldr	r0, [pc, #524]	; (800b6ec <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b4de:	f7f8 fbeb 	bl	8003cb8 <W25qxx_WriteSector>
		}
		powercycleRefresh=0;
 800b4e2:	4b81      	ldr	r3, [pc, #516]	; (800b6e8 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
		for(j=0;j<=32;j++)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	729a      	strb	r2, [r3, #10]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	7a9b      	ldrb	r3, [r3, #10]
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d827      	bhi.n	800b546 <_ZN7ESP826615RefreshWifiDataEv+0xba>
		{
			if(BlockStatusOffline[j] == 1)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	7a9b      	ldrb	r3, [r3, #10]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	4b7b      	ldr	r3, [pc, #492]	; (800b6ec <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b4fe:	5c9b      	ldrb	r3, [r3, r2]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d109      	bne.n	800b518 <_ZN7ESP826615RefreshWifiDataEv+0x8c>
			{
				sectorTosend=j;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7a9a      	ldrb	r2, [r3, #10]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
				currentdata=0;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
				break;
 800b516:	e016      	b.n	800b546 <_ZN7ESP826615RefreshWifiDataEv+0xba>
			}
			if(BlockStatusOffline[j] == 2)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7a9b      	ldrb	r3, [r3, #10]
 800b51c:	461a      	mov	r2, r3
 800b51e:	4b73      	ldr	r3, [pc, #460]	; (800b6ec <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800b520:	5c9b      	ldrb	r3, [r3, r2]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d108      	bne.n	800b538 <_ZN7ESP826615RefreshWifiDataEv+0xac>
			{
				sectorTosend=j;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	7a9a      	ldrb	r2, [r3, #10]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
				currentdata=1;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
		for(j=0;j<=32;j++)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	7a9b      	ldrb	r3, [r3, #10]
 800b53c:	3301      	adds	r3, #1
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	729a      	strb	r2, [r3, #10]
 800b544:	e7d3      	b.n	800b4ee <_ZN7ESP826615RefreshWifiDataEv+0x62>
			}
		}

		sectorRead = 16*sectorTosend;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	b29a      	uxth	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		if(W25qxx_IsEmptySector(sectorRead,0,53))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b55e:	2235      	movs	r2, #53	; 0x35
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f7f8 fa3a 	bl	80039dc <W25qxx_IsEmptySector>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d008      	beq.n	800b580 <_ZN7ESP826615RefreshWifiDataEv+0xf4>
		{
			memcpy(ProductionSet_uintFormat_MEM,dummydata,54);}
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 800b574:	2236      	movs	r2, #54	; 0x36
 800b576:	4619      	mov	r1, r3
 800b578:	485d      	ldr	r0, [pc, #372]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b57a:	f005 fcf9 	bl	8010f70 <memcpy>
 800b57e:	e00b      	b.n	800b598 <_ZN7ESP826615RefreshWifiDataEv+0x10c>
		else
		{
			W25qxx_ReadSector(ProductionSet_uintFormat_MEM,sectorRead,0,53);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b586:	4619      	mov	r1, r3
 800b588:	2335      	movs	r3, #53	; 0x35
 800b58a:	2200      	movs	r2, #0
 800b58c:	4858      	ldr	r0, [pc, #352]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b58e:	f7f8 fc73 	bl	8003e78 <W25qxx_ReadSector>
			if(ProductionSet_uintFormat_MEM[0] != 34 || ProductionSet_uintFormat_MEM[52] != 34)
 800b592:	4b57      	ldr	r3, [pc, #348]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b22      	cmp	r3, #34	; 0x22
			{
			//	memcpy(ProductionSet_uintFormat_MEM,dummydata,54);
			}
		}
		sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f203 20b6 	addw	r0, r3, #694	; 0x2b6
 800b59e:	4b55      	ldr	r3, [pc, #340]	; (800b6f4 <_ZN7ESP826615RefreshWifiDataEv+0x268>)
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	2322      	movs	r3, #34	; 0x22
 800b5a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b5a8:	920c      	str	r2, [sp, #48]	; 0x30
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9308      	str	r3, [sp, #32]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9307      	str	r3, [sp, #28]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9306      	str	r3, [sp, #24]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	9305      	str	r3, [sp, #20]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	2222      	movs	r2, #34	; 0x22
 800b5de:	4946      	ldr	r1, [pc, #280]	; (800b6f8 <_ZN7ESP826615RefreshWifiDataEv+0x26c>)
 800b5e0:	f005 fdcc 	bl	801117c <siprintf>
						0,0,0,0,0,0,0,0,0,0,0,SectorPos,'"');
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b5f2:	2b0e      	cmp	r3, #14
 800b5f4:	d871      	bhi.n	800b6da <_ZN7ESP826615RefreshWifiDataEv+0x24e>
		{
			ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	2336      	movs	r3, #54	; 0x36
 800b600:	fb02 f303 	mul.w	r3, r2, r3
 800b604:	3b01      	subs	r3, #1
 800b606:	4a3a      	ldr	r2, [pc, #232]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b608:	212c      	movs	r1, #44	; 0x2c
 800b60a:	54d1      	strb	r1, [r2, r3]
			if(W25qxx_IsEmptySector(sectorRead+scanForUrl,0,53))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b612:	461a      	mov	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b61a:	4413      	add	r3, r2
 800b61c:	2235      	movs	r2, #53	; 0x35
 800b61e:	2100      	movs	r1, #0
 800b620:	4618      	mov	r0, r3
 800b622:	f7f8 f9db 	bl	80039dc <W25qxx_IsEmptySector>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d010      	beq.n	800b64e <_ZN7ESP826615RefreshWifiDataEv+0x1c2>
			{
				memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b632:	461a      	mov	r2, r3
 800b634:	2336      	movs	r3, #54	; 0x36
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	4a2d      	ldr	r2, [pc, #180]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b63c:	1898      	adds	r0, r3, r2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 800b644:	2236      	movs	r2, #54	; 0x36
 800b646:	4619      	mov	r1, r3
 800b648:	f005 fc92 	bl	8010f70 <memcpy>
 800b64c:	e03c      	b.n	800b6c8 <_ZN7ESP826615RefreshWifiDataEv+0x23c>
	//			W25qxx_EraseSector(sectorRead+scanForUrl);
	//			W25qxx_WriteSector(ProductionSet_uintFormat_MEM,(sectorRead+scanForUrl),0,54);
			}
			else
			{
				W25qxx_ReadSector(&ProductionSet_uintFormat_MEM[54*scanForUrl],sectorRead+scanForUrl,0,53);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b654:	461a      	mov	r2, r3
 800b656:	2336      	movs	r3, #54	; 0x36
 800b658:	fb02 f303 	mul.w	r3, r2, r3
 800b65c:	4a24      	ldr	r2, [pc, #144]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b65e:	1898      	adds	r0, r3, r2
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b66e:	4413      	add	r3, r2
 800b670:	4619      	mov	r1, r3
 800b672:	2335      	movs	r3, #53	; 0x35
 800b674:	2200      	movs	r2, #0
 800b676:	f7f8 fbff 	bl	8003e78 <W25qxx_ReadSector>
				if(ProductionSet_uintFormat_MEM[54*scanForUrl] != 34 || ProductionSet_uintFormat_MEM[(54*scanForUrl)+52] != 34)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b680:	461a      	mov	r2, r3
 800b682:	2336      	movs	r3, #54	; 0x36
 800b684:	fb02 f303 	mul.w	r3, r2, r3
 800b688:	4a19      	ldr	r2, [pc, #100]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b68a:	5cd3      	ldrb	r3, [r2, r3]
 800b68c:	2b22      	cmp	r3, #34	; 0x22
 800b68e:	d10b      	bne.n	800b6a8 <_ZN7ESP826615RefreshWifiDataEv+0x21c>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b696:	461a      	mov	r2, r3
 800b698:	2336      	movs	r3, #54	; 0x36
 800b69a:	fb02 f303 	mul.w	r3, r2, r3
 800b69e:	3334      	adds	r3, #52	; 0x34
 800b6a0:	4a13      	ldr	r2, [pc, #76]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b6a2:	5cd3      	ldrb	r3, [r2, r3]
 800b6a4:	2b22      	cmp	r3, #34	; 0x22
 800b6a6:	d00f      	beq.n	800b6c8 <_ZN7ESP826615RefreshWifiDataEv+0x23c>
				{
					memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	2336      	movs	r3, #54	; 0x36
 800b6b2:	fb02 f303 	mul.w	r3, r2, r3
 800b6b6:	4a0e      	ldr	r2, [pc, #56]	; (800b6f0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800b6b8:	1898      	adds	r0, r3, r2
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f203 23b6 	addw	r3, r3, #694	; 0x2b6
 800b6c0:	2236      	movs	r2, #54	; 0x36
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f005 fc54 	bl	8010f70 <memcpy>
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800b6d8:	e788      	b.n	800b5ec <_ZN7ESP826615RefreshWifiDataEv+0x160>
	{
		ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
		memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
	}
#endif
}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20000c32 	.word	0x20000c32
 800b6e8:	20000c33 	.word	0x20000c33
 800b6ec:	200009f0 	.word	0x200009f0
 800b6f0:	20000c38 	.word	0x20000c38
 800b6f4:	200009ee 	.word	0x200009ee
 800b6f8:	08011cdc 	.word	0x08011cdc

0800b6fc <_ZN7ESP82664InitEv>:

void ESP8266::Init(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b090      	sub	sp, #64	; 0x40
 800b700:	af0e      	add	r7, sp, #56	; 0x38
 800b702:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f203 20b6 	addw	r0, r3, #694	; 0x2b6
 800b70a:	2322      	movs	r3, #34	; 0x22
 800b70c:	930d      	str	r3, [sp, #52]	; 0x34
 800b70e:	2300      	movs	r3, #0
 800b710:	930c      	str	r3, [sp, #48]	; 0x30
 800b712:	2300      	movs	r3, #0
 800b714:	930b      	str	r3, [sp, #44]	; 0x2c
 800b716:	2300      	movs	r3, #0
 800b718:	930a      	str	r3, [sp, #40]	; 0x28
 800b71a:	2300      	movs	r3, #0
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	2300      	movs	r3, #0
 800b720:	9308      	str	r3, [sp, #32]
 800b722:	2300      	movs	r3, #0
 800b724:	9307      	str	r3, [sp, #28]
 800b726:	2300      	movs	r3, #0
 800b728:	9306      	str	r3, [sp, #24]
 800b72a:	2300      	movs	r3, #0
 800b72c:	9305      	str	r3, [sp, #20]
 800b72e:	2300      	movs	r3, #0
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	2300      	movs	r3, #0
 800b734:	9303      	str	r3, [sp, #12]
 800b736:	2300      	movs	r3, #0
 800b738:	9302      	str	r3, [sp, #8]
 800b73a:	2300      	movs	r3, #0
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	2300      	movs	r3, #0
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	2222      	movs	r2, #34	; 0x22
 800b746:	4908      	ldr	r1, [pc, #32]	; (800b768 <_ZN7ESP82664InitEv+0x6c>)
 800b748:	f005 fd18 	bl	801117c <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 800b74c:	4b07      	ldr	r3, [pc, #28]	; (800b76c <_ZN7ESP82664InitEv+0x70>)
 800b74e:	2201      	movs	r2, #1
 800b750:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 800b752:	4b07      	ldr	r3, [pc, #28]	; (800b770 <_ZN7ESP82664InitEv+0x74>)
 800b754:	2205      	movs	r2, #5
 800b756:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 800b758:	4b06      	ldr	r3, [pc, #24]	; (800b774 <_ZN7ESP82664InitEv+0x78>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	701a      	strb	r2, [r3, #0]
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	08011cdc 	.word	0x08011cdc
 800b76c:	20000c33 	.word	0x20000c33
 800b770:	20000a62 	.word	0x20000a62
 800b774:	20000c32 	.word	0x20000c32

0800b778 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	f5ad 5dd4 	sub.w	sp, sp, #6784	; 0x1a80
 800b77e:	af00      	add	r7, sp, #0
	GLCD glcd;
 800b780:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800b784:	f103 031c 	add.w	r3, r3, #28
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f8 ff9d 	bl	80046c8 <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 800b78e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800b792:	4618      	mov	r0, r3
 800b794:	f7fd fe22 	bl	80093dc <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 800b798:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b79c:	3b08      	subs	r3, #8
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f8 fd5c 	bl	800425c <_ZN14DisplayRoutineC1Ev>
	LpdcLogic lpdcLogicInst;
 800b7a4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b7a8:	3b14      	subs	r3, #20
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7f8 fbf0 	bl	8003f90 <_ZN9LpdcLogicC1Ev>
	OfflineStorage offlineStorageInst;
 800b7b0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b7b4:	3b1c      	subs	r3, #28
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fd fffe 	bl	80097b8 <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 800b7bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b7c0:	3b08      	subs	r3, #8
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe ffe0 	bl	800a788 <_ZN7ESP8266C1Ev>
	SHIFT shiftInst;
 800b7c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe febb 	bl	800a548 <_ZN5SHIFTC1Ev>
	Dwinhmi dwinhmi;
 800b7d2:	463b      	mov	r3, r7
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fd fa1f 	bl	8008c18 <_ZN7DwinhmiC1Ev>

	displayRoutineInst.Init();
 800b7da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b7de:	3b08      	subs	r3, #8
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f8 ff39 	bl	8004658 <_ZN14DisplayRoutine4InitEv>
	//offlineStorageInst.ECUProductionInit();/* Not needed*/
	offlineStorageInst.ReadOfflinedataInit();
 800b7e6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b7ea:	3b1c      	subs	r3, #28
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe fe07 	bl	800a400 <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	offlineStorageInst.specialMacDataRead();
 800b7f2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b7f6:	3b1c      	subs	r3, #28
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe fd45 	bl	800a288 <_ZN14OfflineStorage18specialMacDataReadEv>
	offlineStorageInst.processDataRead();
 800b7fe:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b802:	3b1c      	subs	r3, #28
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fd9f 	bl	800a348 <_ZN14OfflineStorage15processDataReadEv>
	offlineStorageInst.dwinRxDataRead();
 800b80a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b80e:	3b1c      	subs	r3, #28
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe fd5f 	bl	800a2d4 <_ZN14OfflineStorage14dwinRxDataReadEv>
	offlineStorageInst.dwinCloudDataRead();
 800b816:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b81a:	3b1c      	subs	r3, #28
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe fbef 	bl	800a000 <_ZN14OfflineStorage17dwinCloudDataReadEv>
	esp8266Inst.Init();
 800b822:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b826:	3b08      	subs	r3, #8
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff ff67 	bl	800b6fc <_ZN7ESP82664InitEv>
	TxSeqComplete=1;
 800b82e:	4b30      	ldr	r3, [pc, #192]	; (800b8f0 <cppMain+0x178>)
 800b830:	2201      	movs	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
	Sim_Trigger = GPIO_PIN_SET;
 800b834:	4b2f      	ldr	r3, [pc, #188]	; (800b8f4 <cppMain+0x17c>)
 800b836:	2201      	movs	r2, #1
 800b838:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(Flag1MS)
 800b83a:	4b2f      	ldr	r3, [pc, #188]	; (800b8f8 <cppMain+0x180>)
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d008      	beq.n	800b854 <cppMain+0xdc>
		{
			Flag1MS=0;
 800b842:	4b2d      	ldr	r3, [pc, #180]	; (800b8f8 <cppMain+0x180>)
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
			lpdcLogicInst.run();
 800b848:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b84c:	3b14      	subs	r3, #20
 800b84e:	4618      	mov	r0, r3
 800b850:	f7f8 fbd2 	bl	8003ff8 <_ZN9LpdcLogic3runEv>
		}
 		if(Flag100milliSeconds)
 800b854:	4b29      	ldr	r3, [pc, #164]	; (800b8fc <cppMain+0x184>)
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d029      	beq.n	800b8b0 <cppMain+0x138>
		{
			Flag100milliSeconds=0;
 800b85c:	4b27      	ldr	r3, [pc, #156]	; (800b8fc <cppMain+0x184>)
 800b85e:	2200      	movs	r2, #0
 800b860:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 800b862:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b866:	3b1c      	subs	r3, #28
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fd ffd5 	bl	8009818 <_ZN14OfflineStorage3runEv>
			offlineStorageInst.processDataWrite();
 800b86e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b872:	3b1c      	subs	r3, #28
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe fb4f 	bl	8009f18 <_ZN14OfflineStorage16processDataWriteEv>
			offlineStorageInst.specialMacDataWrite();
 800b87a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b87e:	3b1c      	subs	r3, #28
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe fa23 	bl	8009ccc <_ZN14OfflineStorage19specialMacDataWriteEv>
			offlineStorageInst.dwinRxDataStore();
 800b886:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b88a:	3b1c      	subs	r3, #28
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fa4d 	bl	8009d2c <_ZN14OfflineStorage15dwinRxDataStoreEv>
			offlineStorageInst.dwinCloudDataStore();
 800b892:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b896:	3b1c      	subs	r3, #28
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fe fa87 	bl	8009dac <_ZN14OfflineStorage18dwinCloudDataStoreEv>

			ModbusInst.ModbusReadTransaction();
 800b89e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd fde4 	bl	8009470 <_ZN9Modbusrtu21ModbusReadTransactionEv>
			dwinhmi.dwinFrame();
 800b8a8:	463b      	mov	r3, r7
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd f9e8 	bl	8008c80 <_ZN7Dwinhmi9dwinFrameEv>
		}
		if(Flag1Second)
 800b8b0:	4b13      	ldr	r3, [pc, #76]	; (800b900 <cppMain+0x188>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d017      	beq.n	800b8e8 <cppMain+0x170>
		{
			Flag1Second=0;
 800b8b8:	4b11      	ldr	r3, [pc, #68]	; (800b900 <cppMain+0x188>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 800b8be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b8c2:	3b08      	subs	r3, #8
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f8 fd51 	bl	800436c <_ZN14DisplayRoutine3runEv>
			esp8266Inst.run();
 800b8ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b8ce:	3b08      	subs	r3, #8
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff f952 	bl	800ab7a <_ZN7ESP82663runEv>
			shiftInst.run();
 800b8d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe ff48 	bl	800a770 <_ZN5SHIFT3runEv>
			dwinhmi.dwinDecoder();
 800b8e0:	463b      	mov	r3, r7
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd fb6c 	bl	8008fc0 <_ZN7Dwinhmi11dwinDecoderEv>
		}
		ESPRXDataSeg();
 800b8e8:	f7f4 fe4c 	bl	8000584 <ESPRXDataSeg>
		if(Flag1MS)
 800b8ec:	e7a5      	b.n	800b83a <cppMain+0xc2>
 800b8ee:	bf00      	nop
 800b8f0:	2000091f 	.word	0x2000091f
 800b8f4:	20000764 	.word	0x20000764
 800b8f8:	200001b8 	.word	0x200001b8
 800b8fc:	200001ba 	.word	0x200001ba
 800b900:	200001b9 	.word	0x200001b9

0800b904 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b90e:	2003      	movs	r0, #3
 800b910:	f000 f960 	bl	800bbd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b914:	200f      	movs	r0, #15
 800b916:	f000 f80d 	bl	800b934 <HAL_InitTick>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	71fb      	strb	r3, [r7, #7]
 800b924:	e001      	b.n	800b92a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b926:	f7f7 fa03 	bl	8002d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b92a:	79fb      	ldrb	r3, [r7, #7]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b940:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <HAL_InitTick+0x6c>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d023      	beq.n	800b990 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b948:	4b16      	ldr	r3, [pc, #88]	; (800b9a4 <HAL_InitTick+0x70>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <HAL_InitTick+0x6c>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	4619      	mov	r1, r3
 800b952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b956:	fbb3 f3f1 	udiv	r3, r3, r1
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f96d 	bl	800bc3e <HAL_SYSTICK_Config>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10f      	bne.n	800b98a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b0f      	cmp	r3, #15
 800b96e:	d809      	bhi.n	800b984 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b970:	2200      	movs	r2, #0
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	f000 f937 	bl	800bbea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b97c:	4a0a      	ldr	r2, [pc, #40]	; (800b9a8 <HAL_InitTick+0x74>)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	e007      	b.n	800b994 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	73fb      	strb	r3, [r7, #15]
 800b988:	e004      	b.n	800b994 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	73fb      	strb	r3, [r7, #15]
 800b98e:	e001      	b.n	800b994 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000020 	.word	0x20000020
 800b9a4:	20000014 	.word	0x20000014
 800b9a8:	2000001c 	.word	0x2000001c

0800b9ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b9b0:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <HAL_IncTick+0x20>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <HAL_IncTick+0x24>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <HAL_IncTick+0x24>)
 800b9be:	6013      	str	r3, [r2, #0]
}
 800b9c0:	bf00      	nop
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20000020 	.word	0x20000020
 800b9d0:	20000f9c 	.word	0x20000f9c

0800b9d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
  return uwTick;
 800b9d8:	4b03      	ldr	r3, [pc, #12]	; (800b9e8 <HAL_GetTick+0x14>)
 800b9da:	681b      	ldr	r3, [r3, #0]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20000f9c 	.word	0x20000f9c

0800b9ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b9f4:	f7ff ffee 	bl	800b9d4 <HAL_GetTick>
 800b9f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d005      	beq.n	800ba12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ba06:	4b0a      	ldr	r3, [pc, #40]	; (800ba30 <HAL_Delay+0x44>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ba12:	bf00      	nop
 800ba14:	f7ff ffde 	bl	800b9d4 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d8f7      	bhi.n	800ba14 <HAL_Delay+0x28>
  {
  }
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	20000020 	.word	0x20000020

0800ba34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <__NVIC_SetPriorityGrouping+0x44>)
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ba50:	4013      	ands	r3, r2
 800ba52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ba5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ba60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ba66:	4a04      	ldr	r2, [pc, #16]	; (800ba78 <__NVIC_SetPriorityGrouping+0x44>)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	60d3      	str	r3, [r2, #12]
}
 800ba6c:	bf00      	nop
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	e000ed00 	.word	0xe000ed00

0800ba7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ba80:	4b04      	ldr	r3, [pc, #16]	; (800ba94 <__NVIC_GetPriorityGrouping+0x18>)
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	0a1b      	lsrs	r3, r3, #8
 800ba86:	f003 0307 	and.w	r3, r3, #7
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	e000ed00 	.word	0xe000ed00

0800ba98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800baa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	db0b      	blt.n	800bac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800baaa:	79fb      	ldrb	r3, [r7, #7]
 800baac:	f003 021f 	and.w	r2, r3, #31
 800bab0:	4907      	ldr	r1, [pc, #28]	; (800bad0 <__NVIC_EnableIRQ+0x38>)
 800bab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	2001      	movs	r0, #1
 800baba:	fa00 f202 	lsl.w	r2, r0, r2
 800babe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bac2:	bf00      	nop
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	e000e100 	.word	0xe000e100

0800bad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	db0a      	blt.n	800bafe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	b2da      	uxtb	r2, r3
 800baec:	490c      	ldr	r1, [pc, #48]	; (800bb20 <__NVIC_SetPriority+0x4c>)
 800baee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baf2:	0112      	lsls	r2, r2, #4
 800baf4:	b2d2      	uxtb	r2, r2
 800baf6:	440b      	add	r3, r1
 800baf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bafc:	e00a      	b.n	800bb14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	4908      	ldr	r1, [pc, #32]	; (800bb24 <__NVIC_SetPriority+0x50>)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	f003 030f 	and.w	r3, r3, #15
 800bb0a:	3b04      	subs	r3, #4
 800bb0c:	0112      	lsls	r2, r2, #4
 800bb0e:	b2d2      	uxtb	r2, r2
 800bb10:	440b      	add	r3, r1
 800bb12:	761a      	strb	r2, [r3, #24]
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	e000e100 	.word	0xe000e100
 800bb24:	e000ed00 	.word	0xe000ed00

0800bb28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b089      	sub	sp, #36	; 0x24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f003 0307 	and.w	r3, r3, #7
 800bb3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	f1c3 0307 	rsb	r3, r3, #7
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	bf28      	it	cs
 800bb46:	2304      	movcs	r3, #4
 800bb48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	2b06      	cmp	r3, #6
 800bb50:	d902      	bls.n	800bb58 <NVIC_EncodePriority+0x30>
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	3b03      	subs	r3, #3
 800bb56:	e000      	b.n	800bb5a <NVIC_EncodePriority+0x32>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	fa02 f303 	lsl.w	r3, r2, r3
 800bb66:	43da      	mvns	r2, r3
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	401a      	ands	r2, r3
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bb70:	f04f 31ff 	mov.w	r1, #4294967295
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	fa01 f303 	lsl.w	r3, r1, r3
 800bb7a:	43d9      	mvns	r1, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bb80:	4313      	orrs	r3, r2
         );
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3724      	adds	r7, #36	; 0x24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
	...

0800bb90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bba0:	d301      	bcc.n	800bba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bba2:	2301      	movs	r3, #1
 800bba4:	e00f      	b.n	800bbc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bba6:	4a0a      	ldr	r2, [pc, #40]	; (800bbd0 <SysTick_Config+0x40>)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bbae:	210f      	movs	r1, #15
 800bbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb4:	f7ff ff8e 	bl	800bad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <SysTick_Config+0x40>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bbbe:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <SysTick_Config+0x40>)
 800bbc0:	2207      	movs	r2, #7
 800bbc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000e010 	.word	0xe000e010

0800bbd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff ff29 	bl	800ba34 <__NVIC_SetPriorityGrouping>
}
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b086      	sub	sp, #24
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bbfc:	f7ff ff3e 	bl	800ba7c <__NVIC_GetPriorityGrouping>
 800bc00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	6978      	ldr	r0, [r7, #20]
 800bc08:	f7ff ff8e 	bl	800bb28 <NVIC_EncodePriority>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc12:	4611      	mov	r1, r2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff ff5d 	bl	800bad4 <__NVIC_SetPriority>
}
 800bc1a:	bf00      	nop
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	4603      	mov	r3, r0
 800bc2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bc2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff ff31 	bl	800ba98 <__NVIC_EnableIRQ>
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff ffa2 	bl	800bb90 <SysTick_Config>
 800bc4c:	4603      	mov	r3, r0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d008      	beq.n	800bc80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2204      	movs	r2, #4
 800bc72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e022      	b.n	800bcc6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f022 020e 	bic.w	r2, r2, #14
 800bc8e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 0201 	bic.w	r2, r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca4:	f003 021c 	and.w	r2, r3, #28
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	2101      	movs	r1, #1
 800bcae:	fa01 f202 	lsl.w	r2, r1, r2
 800bcb2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d005      	beq.n	800bcf6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2204      	movs	r2, #4
 800bcee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
 800bcf4:	e029      	b.n	800bd4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 020e 	bic.w	r2, r2, #14
 800bd04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f022 0201 	bic.w	r2, r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd1a:	f003 021c 	and.w	r2, r3, #28
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd22:	2101      	movs	r1, #1
 800bd24:	fa01 f202 	lsl.w	r2, r1, r2
 800bd28:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d003      	beq.n	800bd4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	4798      	blx	r3
    }
  }
  return status;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bd62:	e154      	b.n	800c00e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	2101      	movs	r1, #1
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd70:	4013      	ands	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 8146 	beq.w	800c008 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f003 0303 	and.w	r3, r3, #3
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d005      	beq.n	800bd94 <HAL_GPIO_Init+0x40>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	f003 0303 	and.w	r3, r3, #3
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d130      	bne.n	800bdf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	2203      	movs	r2, #3
 800bda0:	fa02 f303 	lsl.w	r3, r2, r3
 800bda4:	43db      	mvns	r3, r3
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	68da      	ldr	r2, [r3, #12]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdca:	2201      	movs	r2, #1
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd2:	43db      	mvns	r3, r3
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	091b      	lsrs	r3, r3, #4
 800bde0:	f003 0201 	and.w	r2, r3, #1
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f003 0303 	and.w	r3, r3, #3
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d017      	beq.n	800be32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	2203      	movs	r2, #3
 800be0e:	fa02 f303 	lsl.w	r3, r2, r3
 800be12:	43db      	mvns	r3, r3
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4013      	ands	r3, r2
 800be18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	689a      	ldr	r2, [r3, #8]
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	4313      	orrs	r3, r2
 800be2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f003 0303 	and.w	r3, r3, #3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d123      	bne.n	800be86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	08da      	lsrs	r2, r3, #3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3208      	adds	r2, #8
 800be46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	220f      	movs	r2, #15
 800be56:	fa02 f303 	lsl.w	r3, r2, r3
 800be5a:	43db      	mvns	r3, r3
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	4013      	ands	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f003 0307 	and.w	r3, r3, #7
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	fa02 f303 	lsl.w	r3, r2, r3
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4313      	orrs	r3, r2
 800be76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	08da      	lsrs	r2, r3, #3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3208      	adds	r2, #8
 800be80:	6939      	ldr	r1, [r7, #16]
 800be82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	2203      	movs	r2, #3
 800be92:	fa02 f303 	lsl.w	r3, r2, r3
 800be96:	43db      	mvns	r3, r3
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	4013      	ands	r3, r2
 800be9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f003 0203 	and.w	r2, r3, #3
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	fa02 f303 	lsl.w	r3, r2, r3
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80a0 	beq.w	800c008 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bec8:	4b58      	ldr	r3, [pc, #352]	; (800c02c <HAL_GPIO_Init+0x2d8>)
 800beca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800becc:	4a57      	ldr	r2, [pc, #348]	; (800c02c <HAL_GPIO_Init+0x2d8>)
 800bece:	f043 0301 	orr.w	r3, r3, #1
 800bed2:	6613      	str	r3, [r2, #96]	; 0x60
 800bed4:	4b55      	ldr	r3, [pc, #340]	; (800c02c <HAL_GPIO_Init+0x2d8>)
 800bed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	60bb      	str	r3, [r7, #8]
 800bede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800bee0:	4a53      	ldr	r2, [pc, #332]	; (800c030 <HAL_GPIO_Init+0x2dc>)
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	089b      	lsrs	r3, r3, #2
 800bee6:	3302      	adds	r3, #2
 800bee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	220f      	movs	r2, #15
 800bef8:	fa02 f303 	lsl.w	r3, r2, r3
 800befc:	43db      	mvns	r3, r3
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	4013      	ands	r3, r2
 800bf02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bf0a:	d019      	beq.n	800bf40 <HAL_GPIO_Init+0x1ec>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a49      	ldr	r2, [pc, #292]	; (800c034 <HAL_GPIO_Init+0x2e0>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d013      	beq.n	800bf3c <HAL_GPIO_Init+0x1e8>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a48      	ldr	r2, [pc, #288]	; (800c038 <HAL_GPIO_Init+0x2e4>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d00d      	beq.n	800bf38 <HAL_GPIO_Init+0x1e4>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a47      	ldr	r2, [pc, #284]	; (800c03c <HAL_GPIO_Init+0x2e8>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d007      	beq.n	800bf34 <HAL_GPIO_Init+0x1e0>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a46      	ldr	r2, [pc, #280]	; (800c040 <HAL_GPIO_Init+0x2ec>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d101      	bne.n	800bf30 <HAL_GPIO_Init+0x1dc>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	e008      	b.n	800bf42 <HAL_GPIO_Init+0x1ee>
 800bf30:	2307      	movs	r3, #7
 800bf32:	e006      	b.n	800bf42 <HAL_GPIO_Init+0x1ee>
 800bf34:	2303      	movs	r3, #3
 800bf36:	e004      	b.n	800bf42 <HAL_GPIO_Init+0x1ee>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	e002      	b.n	800bf42 <HAL_GPIO_Init+0x1ee>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e000      	b.n	800bf42 <HAL_GPIO_Init+0x1ee>
 800bf40:	2300      	movs	r3, #0
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	f002 0203 	and.w	r2, r2, #3
 800bf48:	0092      	lsls	r2, r2, #2
 800bf4a:	4093      	lsls	r3, r2
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800bf52:	4937      	ldr	r1, [pc, #220]	; (800c030 <HAL_GPIO_Init+0x2dc>)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	089b      	lsrs	r3, r3, #2
 800bf58:	3302      	adds	r3, #2
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf60:	4b38      	ldr	r3, [pc, #224]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	43db      	mvns	r3, r3
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf84:	4a2f      	ldr	r2, [pc, #188]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bf8a:	4b2e      	ldr	r3, [pc, #184]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	43db      	mvns	r3, r3
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	4013      	ands	r3, r2
 800bf98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bfae:	4a25      	ldr	r2, [pc, #148]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800bfb4:	4b23      	ldr	r3, [pc, #140]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	43db      	mvns	r3, r3
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bfd8:	4a1a      	ldr	r2, [pc, #104]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800bfde:	4b19      	ldr	r3, [pc, #100]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	43db      	mvns	r3, r3
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	4013      	ands	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d003      	beq.n	800c002 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c002:	4a10      	ldr	r2, [pc, #64]	; (800c044 <HAL_GPIO_Init+0x2f0>)
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3301      	adds	r3, #1
 800c00c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	fa22 f303 	lsr.w	r3, r2, r3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f47f aea3 	bne.w	800bd64 <HAL_GPIO_Init+0x10>
  }
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	371c      	adds	r7, #28
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	40021000 	.word	0x40021000
 800c030:	40010000 	.word	0x40010000
 800c034:	48000400 	.word	0x48000400
 800c038:	48000800 	.word	0x48000800
 800c03c:	48000c00 	.word	0x48000c00
 800c040:	48001000 	.word	0x48001000
 800c044:	40010400 	.word	0x40010400

0800c048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	887b      	ldrh	r3, [r7, #2]
 800c05a:	4013      	ands	r3, r2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c060:	2301      	movs	r3, #1
 800c062:	73fb      	strb	r3, [r7, #15]
 800c064:	e001      	b.n	800c06a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	807b      	strh	r3, [r7, #2]
 800c084:	4613      	mov	r3, r2
 800c086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c088:	787b      	ldrb	r3, [r7, #1]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c08e:	887a      	ldrh	r2, [r7, #2]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c094:	e002      	b.n	800c09c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c096:	887a      	ldrh	r2, [r7, #2]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c09c:	bf00      	nop
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c0b2:	4b08      	ldr	r3, [pc, #32]	; (800c0d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0b4:	695a      	ldr	r2, [r3, #20]
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d006      	beq.n	800c0cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c0be:	4a05      	ldr	r2, [pc, #20]	; (800c0d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0c0:	88fb      	ldrh	r3, [r7, #6]
 800c0c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c0c4:	88fb      	ldrh	r3, [r7, #6]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7f6 f872 	bl	80021b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	40010400 	.word	0x40010400

0800c0d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e081      	b.n	800c1ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f6 fe3a 	bl	8002d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2224      	movs	r2, #36	; 0x24
 800c108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f022 0201 	bic.w	r2, r2, #1
 800c11a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c128:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	689a      	ldr	r2, [r3, #8]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c138:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d107      	bne.n	800c152 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689a      	ldr	r2, [r3, #8]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c14e:	609a      	str	r2, [r3, #8]
 800c150:	e006      	b.n	800c160 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c15e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	2b02      	cmp	r3, #2
 800c166:	d104      	bne.n	800c172 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c170:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	6812      	ldr	r2, [r2, #0]
 800c17c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691a      	ldr	r2, [r3, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	69d9      	ldr	r1, [r3, #28]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a1a      	ldr	r2, [r3, #32]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0201 	orr.w	r2, r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2220      	movs	r2, #32
 800c1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	4608      	mov	r0, r1
 800c202:	4611      	mov	r1, r2
 800c204:	461a      	mov	r2, r3
 800c206:	4603      	mov	r3, r0
 800c208:	817b      	strh	r3, [r7, #10]
 800c20a:	460b      	mov	r3, r1
 800c20c:	813b      	strh	r3, [r7, #8]
 800c20e:	4613      	mov	r3, r2
 800c210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	2b20      	cmp	r3, #32
 800c21c:	f040 80f9 	bne.w	800c412 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <HAL_I2C_Mem_Write+0x34>
 800c226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c232:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e0ed      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d101      	bne.n	800c246 <HAL_I2C_Mem_Write+0x4e>
 800c242:	2302      	movs	r3, #2
 800c244:	e0e6      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c24e:	f7ff fbc1 	bl	800b9d4 <HAL_GetTick>
 800c252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	2319      	movs	r3, #25
 800c25a:	2201      	movs	r2, #1
 800c25c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 fac3 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e0d1      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2221      	movs	r2, #33	; 0x21
 800c274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2240      	movs	r2, #64	; 0x40
 800c27c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6a3a      	ldr	r2, [r7, #32]
 800c28a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c298:	88f8      	ldrh	r0, [r7, #6]
 800c29a:	893a      	ldrh	r2, [r7, #8]
 800c29c:	8979      	ldrh	r1, [r7, #10]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 f9d3 	bl	800c654 <I2C_RequestMemoryWrite>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d005      	beq.n	800c2c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e0a9      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	2bff      	cmp	r3, #255	; 0xff
 800c2c8:	d90e      	bls.n	800c2e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	22ff      	movs	r2, #255	; 0xff
 800c2ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	8979      	ldrh	r1, [r7, #10]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 fc2b 	bl	800cb3c <I2C_TransferConfig>
 800c2e6:	e00f      	b.n	800c308 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	8979      	ldrh	r1, [r7, #10]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 fc1a 	bl	800cb3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 faad 	bl	800c86c <I2C_WaitOnTXISFlagUntilTimeout>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e07b      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	781a      	ldrb	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c336:	b29b      	uxth	r3, r3
 800c338:	3b01      	subs	r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c344:	3b01      	subs	r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c350:	b29b      	uxth	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d034      	beq.n	800c3c0 <HAL_I2C_Mem_Write+0x1c8>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d130      	bne.n	800c3c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	2200      	movs	r2, #0
 800c366:	2180      	movs	r1, #128	; 0x80
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f000 fa3f 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d001      	beq.n	800c378 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	e04d      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	2bff      	cmp	r3, #255	; 0xff
 800c380:	d90e      	bls.n	800c3a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	22ff      	movs	r2, #255	; 0xff
 800c386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	8979      	ldrh	r1, [r7, #10]
 800c390:	2300      	movs	r3, #0
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f000 fbcf 	bl	800cb3c <I2C_TransferConfig>
 800c39e:	e00f      	b.n	800c3c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	8979      	ldrh	r1, [r7, #10]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 fbbe 	bl	800cb3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d19e      	bne.n	800c308 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 fa8c 	bl	800c8ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e01a      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2220      	movs	r2, #32
 800c3e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6859      	ldr	r1, [r3, #4]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <HAL_I2C_Mem_Write+0x224>)
 800c3f2:	400b      	ands	r3, r1
 800c3f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	e000      	b.n	800c414 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c412:	2302      	movs	r3, #2
  }
}
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	fe00e800 	.word	0xfe00e800

0800c420 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af02      	add	r7, sp, #8
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	4608      	mov	r0, r1
 800c42a:	4611      	mov	r1, r2
 800c42c:	461a      	mov	r2, r3
 800c42e:	4603      	mov	r3, r0
 800c430:	817b      	strh	r3, [r7, #10]
 800c432:	460b      	mov	r3, r1
 800c434:	813b      	strh	r3, [r7, #8]
 800c436:	4613      	mov	r3, r2
 800c438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b20      	cmp	r3, #32
 800c444:	f040 80fd 	bne.w	800c642 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d002      	beq.n	800c454 <HAL_I2C_Mem_Read+0x34>
 800c44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c450:	2b00      	cmp	r3, #0
 800c452:	d105      	bne.n	800c460 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c45a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e0f1      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c466:	2b01      	cmp	r3, #1
 800c468:	d101      	bne.n	800c46e <HAL_I2C_Mem_Read+0x4e>
 800c46a:	2302      	movs	r3, #2
 800c46c:	e0ea      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c476:	f7ff faad 	bl	800b9d4 <HAL_GetTick>
 800c47a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	2319      	movs	r3, #25
 800c482:	2201      	movs	r2, #1
 800c484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 f9af 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e0d5      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2222      	movs	r2, #34	; 0x22
 800c49c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2240      	movs	r2, #64	; 0x40
 800c4a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a3a      	ldr	r2, [r7, #32]
 800c4b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c4c0:	88f8      	ldrh	r0, [r7, #6]
 800c4c2:	893a      	ldrh	r2, [r7, #8]
 800c4c4:	8979      	ldrh	r1, [r7, #10]
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	9301      	str	r3, [sp, #4]
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 f913 	bl	800c6fc <I2C_RequestMemoryRead>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d005      	beq.n	800c4e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e0ad      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	2bff      	cmp	r3, #255	; 0xff
 800c4f0:	d90e      	bls.n	800c510 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	22ff      	movs	r2, #255	; 0xff
 800c4f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4fc:	b2da      	uxtb	r2, r3
 800c4fe:	8979      	ldrh	r1, [r7, #10]
 800c500:	4b52      	ldr	r3, [pc, #328]	; (800c64c <HAL_I2C_Mem_Read+0x22c>)
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 fb17 	bl	800cb3c <I2C_TransferConfig>
 800c50e:	e00f      	b.n	800c530 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c514:	b29a      	uxth	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	8979      	ldrh	r1, [r7, #10]
 800c522:	4b4a      	ldr	r3, [pc, #296]	; (800c64c <HAL_I2C_Mem_Read+0x22c>)
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f000 fb06 	bl	800cb3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	2200      	movs	r2, #0
 800c538:	2104      	movs	r1, #4
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f000 f956 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e07c      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c566:	3b01      	subs	r3, #1
 800c568:	b29a      	uxth	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c572:	b29b      	uxth	r3, r3
 800c574:	3b01      	subs	r3, #1
 800c576:	b29a      	uxth	r2, r3
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c580:	b29b      	uxth	r3, r3
 800c582:	2b00      	cmp	r3, #0
 800c584:	d034      	beq.n	800c5f0 <HAL_I2C_Mem_Read+0x1d0>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d130      	bne.n	800c5f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	2200      	movs	r2, #0
 800c596:	2180      	movs	r1, #128	; 0x80
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f000 f927 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d001      	beq.n	800c5a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e04d      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	2bff      	cmp	r3, #255	; 0xff
 800c5b0:	d90e      	bls.n	800c5d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	22ff      	movs	r2, #255	; 0xff
 800c5b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	8979      	ldrh	r1, [r7, #10]
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 fab7 	bl	800cb3c <I2C_TransferConfig>
 800c5ce:	e00f      	b.n	800c5f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	8979      	ldrh	r1, [r7, #10]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 faa6 	bl	800cb3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d19a      	bne.n	800c530 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 f974 	bl	800c8ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e01a      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2220      	movs	r2, #32
 800c614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6859      	ldr	r1, [r3, #4]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <HAL_I2C_Mem_Read+0x230>)
 800c622:	400b      	ands	r3, r1
 800c624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2220      	movs	r2, #32
 800c62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	e000      	b.n	800c644 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c642:	2302      	movs	r3, #2
  }
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	80002400 	.word	0x80002400
 800c650:	fe00e800 	.word	0xfe00e800

0800c654 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	4608      	mov	r0, r1
 800c65e:	4611      	mov	r1, r2
 800c660:	461a      	mov	r2, r3
 800c662:	4603      	mov	r3, r0
 800c664:	817b      	strh	r3, [r7, #10]
 800c666:	460b      	mov	r3, r1
 800c668:	813b      	strh	r3, [r7, #8]
 800c66a:	4613      	mov	r3, r2
 800c66c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	b2da      	uxtb	r2, r3
 800c672:	8979      	ldrh	r1, [r7, #10]
 800c674:	4b20      	ldr	r3, [pc, #128]	; (800c6f8 <I2C_RequestMemoryWrite+0xa4>)
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 fa5d 	bl	800cb3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c682:	69fa      	ldr	r2, [r7, #28]
 800c684:	69b9      	ldr	r1, [r7, #24]
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f000 f8f0 	bl	800c86c <I2C_WaitOnTXISFlagUntilTimeout>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e02c      	b.n	800c6f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c696:	88fb      	ldrh	r3, [r7, #6]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d105      	bne.n	800c6a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c69c:	893b      	ldrh	r3, [r7, #8]
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	629a      	str	r2, [r3, #40]	; 0x28
 800c6a6:	e015      	b.n	800c6d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c6a8:	893b      	ldrh	r3, [r7, #8]
 800c6aa:	0a1b      	lsrs	r3, r3, #8
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	69b9      	ldr	r1, [r7, #24]
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f000 f8d6 	bl	800c86c <I2C_WaitOnTXISFlagUntilTimeout>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e012      	b.n	800c6f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c6ca:	893b      	ldrh	r3, [r7, #8]
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	2180      	movs	r1, #128	; 0x80
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f000 f884 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d001      	beq.n	800c6ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e000      	b.n	800c6f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	80002000 	.word	0x80002000

0800c6fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af02      	add	r7, sp, #8
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	4608      	mov	r0, r1
 800c706:	4611      	mov	r1, r2
 800c708:	461a      	mov	r2, r3
 800c70a:	4603      	mov	r3, r0
 800c70c:	817b      	strh	r3, [r7, #10]
 800c70e:	460b      	mov	r3, r1
 800c710:	813b      	strh	r3, [r7, #8]
 800c712:	4613      	mov	r3, r2
 800c714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c716:	88fb      	ldrh	r3, [r7, #6]
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	8979      	ldrh	r1, [r7, #10]
 800c71c:	4b20      	ldr	r3, [pc, #128]	; (800c7a0 <I2C_RequestMemoryRead+0xa4>)
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	2300      	movs	r3, #0
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f000 fa0a 	bl	800cb3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	69b9      	ldr	r1, [r7, #24]
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f000 f89d 	bl	800c86c <I2C_WaitOnTXISFlagUntilTimeout>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e02c      	b.n	800c796 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c73c:	88fb      	ldrh	r3, [r7, #6]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d105      	bne.n	800c74e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c742:	893b      	ldrh	r3, [r7, #8]
 800c744:	b2da      	uxtb	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	629a      	str	r2, [r3, #40]	; 0x28
 800c74c:	e015      	b.n	800c77a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c74e:	893b      	ldrh	r3, [r7, #8]
 800c750:	0a1b      	lsrs	r3, r3, #8
 800c752:	b29b      	uxth	r3, r3
 800c754:	b2da      	uxtb	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c75c:	69fa      	ldr	r2, [r7, #28]
 800c75e:	69b9      	ldr	r1, [r7, #24]
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 f883 	bl	800c86c <I2C_WaitOnTXISFlagUntilTimeout>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e012      	b.n	800c796 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c770:	893b      	ldrh	r3, [r7, #8]
 800c772:	b2da      	uxtb	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	2200      	movs	r2, #0
 800c782:	2140      	movs	r1, #64	; 0x40
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f831 	bl	800c7ec <I2C_WaitOnFlagUntilTimeout>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d001      	beq.n	800c794 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	e000      	b.n	800c796 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	80002000 	.word	0x80002000

0800c7a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d103      	bne.n	800c7c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	f003 0301 	and.w	r3, r3, #1
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d007      	beq.n	800c7e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	699a      	ldr	r2, [r3, #24]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f042 0201 	orr.w	r2, r2, #1
 800c7de:	619a      	str	r2, [r3, #24]
  }
}
 800c7e0:	bf00      	nop
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c7fc:	e022      	b.n	800c844 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c804:	d01e      	beq.n	800c844 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c806:	f7ff f8e5 	bl	800b9d4 <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d302      	bcc.n	800c81c <I2C_WaitOnFlagUntilTimeout+0x30>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d113      	bne.n	800c844 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c820:	f043 0220 	orr.w	r2, r3, #32
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e00f      	b.n	800c864 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	699a      	ldr	r2, [r3, #24]
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	4013      	ands	r3, r2
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	429a      	cmp	r2, r3
 800c852:	bf0c      	ite	eq
 800c854:	2301      	moveq	r3, #1
 800c856:	2300      	movne	r3, #0
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	461a      	mov	r2, r3
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d0cd      	beq.n	800c7fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c878:	e02c      	b.n	800c8d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	68b9      	ldr	r1, [r7, #8]
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 f870 	bl	800c964 <I2C_IsErrorOccurred>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e02a      	b.n	800c8e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c894:	d01e      	beq.n	800c8d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c896:	f7ff f89d 	bl	800b9d4 <HAL_GetTick>
 800c89a:	4602      	mov	r2, r0
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d302      	bcc.n	800c8ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d113      	bne.n	800c8d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b0:	f043 0220 	orr.w	r2, r3, #32
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e007      	b.n	800c8e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	f003 0302 	and.w	r3, r3, #2
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d1cb      	bne.n	800c87a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c8f8:	e028      	b.n	800c94c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f830 	bl	800c964 <I2C_IsErrorOccurred>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e026      	b.n	800c95c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c90e:	f7ff f861 	bl	800b9d4 <HAL_GetTick>
 800c912:	4602      	mov	r2, r0
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d302      	bcc.n	800c924 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d113      	bne.n	800c94c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c928:	f043 0220 	orr.w	r2, r3, #32
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2220      	movs	r2, #32
 800c934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	e007      	b.n	800c95c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b20      	cmp	r3, #32
 800c958:	d1cf      	bne.n	800c8fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08a      	sub	sp, #40	; 0x28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	f003 0310 	and.w	r3, r3, #16
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d075      	beq.n	800ca7c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2210      	movs	r2, #16
 800c996:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c998:	e056      	b.n	800ca48 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d052      	beq.n	800ca48 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c9a2:	f7ff f817 	bl	800b9d4 <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d302      	bcc.n	800c9b8 <I2C_IsErrorOccurred+0x54>
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d147      	bne.n	800ca48 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9da:	d12e      	bne.n	800ca3a <I2C_IsErrorOccurred+0xd6>
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9e2:	d02a      	beq.n	800ca3a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800c9e4:	7cfb      	ldrb	r3, [r7, #19]
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d027      	beq.n	800ca3a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c9fa:	f7fe ffeb 	bl	800b9d4 <HAL_GetTick>
 800c9fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca00:	e01b      	b.n	800ca3a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ca02:	f7fe ffe7 	bl	800b9d4 <HAL_GetTick>
 800ca06:	4602      	mov	r2, r0
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	2b19      	cmp	r3, #25
 800ca0e:	d914      	bls.n	800ca3a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca14:	f043 0220 	orr.w	r2, r3, #32
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2220      	movs	r2, #32
 800ca20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	f003 0320 	and.w	r3, r3, #32
 800ca44:	2b20      	cmp	r3, #32
 800ca46:	d1dc      	bne.n	800ca02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	f003 0320 	and.w	r3, r3, #32
 800ca52:	2b20      	cmp	r3, #32
 800ca54:	d003      	beq.n	800ca5e <I2C_IsErrorOccurred+0xfa>
 800ca56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d09d      	beq.n	800c99a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ca5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d103      	bne.n	800ca6e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ca6e:	6a3b      	ldr	r3, [r7, #32]
 800ca70:	f043 0304 	orr.w	r3, r3, #4
 800ca74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	f043 0301 	orr.w	r3, r3, #1
 800ca94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00b      	beq.n	800cac8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	f043 0308 	orr.w	r3, r3, #8
 800cab6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00b      	beq.n	800caea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	f043 0302 	orr.w	r3, r3, #2
 800cad8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800caea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01c      	beq.n	800cb2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff fe56 	bl	800c7a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6859      	ldr	r1, [r3, #4]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	4b0d      	ldr	r3, [pc, #52]	; (800cb38 <I2C_IsErrorOccurred+0x1d4>)
 800cb04:	400b      	ands	r3, r1
 800cb06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb0c:	6a3b      	ldr	r3, [r7, #32]
 800cb0e:	431a      	orrs	r2, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2220      	movs	r2, #32
 800cb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800cb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3728      	adds	r7, #40	; 0x28
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	fe00e800 	.word	0xfe00e800

0800cb3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	607b      	str	r3, [r7, #4]
 800cb46:	460b      	mov	r3, r1
 800cb48:	817b      	strh	r3, [r7, #10]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cb4e:	897b      	ldrh	r3, [r7, #10]
 800cb50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cb54:	7a7b      	ldrb	r3, [r7, #9]
 800cb56:	041b      	lsls	r3, r3, #16
 800cb58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cb5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	0d5b      	lsrs	r3, r3, #21
 800cb76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cb7a:	4b08      	ldr	r3, [pc, #32]	; (800cb9c <I2C_TransferConfig+0x60>)
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	43db      	mvns	r3, r3
 800cb80:	ea02 0103 	and.w	r1, r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cb8e:	bf00      	nop
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	03ff63ff 	.word	0x03ff63ff

0800cba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d138      	bne.n	800cc28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d101      	bne.n	800cbc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e032      	b.n	800cc2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2224      	movs	r2, #36	; 0x24
 800cbd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f022 0201 	bic.w	r2, r2, #1
 800cbe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cbf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6819      	ldr	r1, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	430a      	orrs	r2, r1
 800cc02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0201 	orr.w	r2, r2, #1
 800cc12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	e000      	b.n	800cc2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cc28:	2302      	movs	r3, #2
  }
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	370c      	adds	r7, #12
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b20      	cmp	r3, #32
 800cc4a:	d139      	bne.n	800ccc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d101      	bne.n	800cc5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cc56:	2302      	movs	r3, #2
 800cc58:	e033      	b.n	800ccc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2224      	movs	r2, #36	; 0x24
 800cc66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f022 0201 	bic.w	r2, r2, #1
 800cc78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cc88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f042 0201 	orr.w	r2, r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2220      	movs	r2, #32
 800ccb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e000      	b.n	800ccc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ccc0:	2302      	movs	r3, #2
  }
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
	...

0800ccd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ccd4:	4b04      	ldr	r3, [pc, #16]	; (800cce8 <HAL_PWREx_GetVoltageRange+0x18>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	40007000 	.word	0x40007000

0800ccec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccfa:	d130      	bne.n	800cd5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ccfc:	4b23      	ldr	r3, [pc, #140]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd08:	d038      	beq.n	800cd7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd0a:	4b20      	ldr	r3, [pc, #128]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cd12:	4a1e      	ldr	r2, [pc, #120]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cd1a:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2232      	movs	r2, #50	; 0x32
 800cd20:	fb02 f303 	mul.w	r3, r2, r3
 800cd24:	4a1b      	ldr	r2, [pc, #108]	; (800cd94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cd26:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2a:	0c9b      	lsrs	r3, r3, #18
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd30:	e002      	b.n	800cd38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd38:	4b14      	ldr	r3, [pc, #80]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd44:	d102      	bne.n	800cd4c <HAL_PWREx_ControlVoltageScaling+0x60>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1f2      	bne.n	800cd32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cd4c:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd4e:	695b      	ldr	r3, [r3, #20]
 800cd50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd58:	d110      	bne.n	800cd7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e00f      	b.n	800cd7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800cd5e:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd6a:	d007      	beq.n	800cd7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cd6c:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cd74:	4a05      	ldr	r2, [pc, #20]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cd76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	40007000 	.word	0x40007000
 800cd90:	20000014 	.word	0x20000014
 800cd94:	431bde83 	.word	0x431bde83

0800cd98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d102      	bne.n	800cdac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	f000 bc02 	b.w	800d5b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdac:	4b96      	ldr	r3, [pc, #600]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	f003 030c 	and.w	r3, r3, #12
 800cdb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cdb6:	4b94      	ldr	r3, [pc, #592]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	f003 0303 	and.w	r3, r3, #3
 800cdbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0310 	and.w	r3, r3, #16
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 80e4 	beq.w	800cf96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d007      	beq.n	800cde4 <HAL_RCC_OscConfig+0x4c>
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	2b0c      	cmp	r3, #12
 800cdd8:	f040 808b 	bne.w	800cef2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	f040 8087 	bne.w	800cef2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cde4:	4b88      	ldr	r3, [pc, #544]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d005      	beq.n	800cdfc <HAL_RCC_OscConfig+0x64>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	699b      	ldr	r3, [r3, #24]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e3d9      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a1a      	ldr	r2, [r3, #32]
 800ce00:	4b81      	ldr	r3, [pc, #516]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 0308 	and.w	r3, r3, #8
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d004      	beq.n	800ce16 <HAL_RCC_OscConfig+0x7e>
 800ce0c:	4b7e      	ldr	r3, [pc, #504]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce14:	e005      	b.n	800ce22 <HAL_RCC_OscConfig+0x8a>
 800ce16:	4b7c      	ldr	r3, [pc, #496]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce1c:	091b      	lsrs	r3, r3, #4
 800ce1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d223      	bcs.n	800ce6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fd8c 	bl	800d948 <RCC_SetFlashLatencyFromMSIRange>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e3ba      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ce3a:	4b73      	ldr	r3, [pc, #460]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a72      	ldr	r2, [pc, #456]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce40:	f043 0308 	orr.w	r3, r3, #8
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	4b70      	ldr	r3, [pc, #448]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	496d      	ldr	r1, [pc, #436]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ce58:	4b6b      	ldr	r3, [pc, #428]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	021b      	lsls	r3, r3, #8
 800ce66:	4968      	ldr	r1, [pc, #416]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	604b      	str	r3, [r1, #4]
 800ce6c:	e025      	b.n	800ceba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ce6e:	4b66      	ldr	r3, [pc, #408]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a65      	ldr	r2, [pc, #404]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce74:	f043 0308 	orr.w	r3, r3, #8
 800ce78:	6013      	str	r3, [r2, #0]
 800ce7a:	4b63      	ldr	r3, [pc, #396]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	4960      	ldr	r1, [pc, #384]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ce8c:	4b5e      	ldr	r3, [pc, #376]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	021b      	lsls	r3, r3, #8
 800ce9a:	495b      	ldr	r1, [pc, #364]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d109      	bne.n	800ceba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 fd4c 	bl	800d948 <RCC_SetFlashLatencyFromMSIRange>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e37a      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ceba:	f000 fc81 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 800cebe:	4602      	mov	r2, r0
 800cec0:	4b51      	ldr	r3, [pc, #324]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	091b      	lsrs	r3, r3, #4
 800cec6:	f003 030f 	and.w	r3, r3, #15
 800ceca:	4950      	ldr	r1, [pc, #320]	; (800d00c <HAL_RCC_OscConfig+0x274>)
 800cecc:	5ccb      	ldrb	r3, [r1, r3]
 800cece:	f003 031f 	and.w	r3, r3, #31
 800ced2:	fa22 f303 	lsr.w	r3, r2, r3
 800ced6:	4a4e      	ldr	r2, [pc, #312]	; (800d010 <HAL_RCC_OscConfig+0x278>)
 800ced8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ceda:	4b4e      	ldr	r3, [pc, #312]	; (800d014 <HAL_RCC_OscConfig+0x27c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fd28 	bl	800b934 <HAL_InitTick>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d052      	beq.n	800cf94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	e35e      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d032      	beq.n	800cf60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cefa:	4b43      	ldr	r3, [pc, #268]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a42      	ldr	r2, [pc, #264]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf00:	f043 0301 	orr.w	r3, r3, #1
 800cf04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cf06:	f7fe fd65 	bl	800b9d4 <HAL_GetTick>
 800cf0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cf0c:	e008      	b.n	800cf20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cf0e:	f7fe fd61 	bl	800b9d4 <HAL_GetTick>
 800cf12:	4602      	mov	r2, r0
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d901      	bls.n	800cf20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e347      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cf20:	4b39      	ldr	r3, [pc, #228]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0302 	and.w	r3, r3, #2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d0f0      	beq.n	800cf0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cf2c:	4b36      	ldr	r3, [pc, #216]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a35      	ldr	r2, [pc, #212]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf32:	f043 0308 	orr.w	r3, r3, #8
 800cf36:	6013      	str	r3, [r2, #0]
 800cf38:	4b33      	ldr	r3, [pc, #204]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a1b      	ldr	r3, [r3, #32]
 800cf44:	4930      	ldr	r1, [pc, #192]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf46:	4313      	orrs	r3, r2
 800cf48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cf4a:	4b2f      	ldr	r3, [pc, #188]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	021b      	lsls	r3, r3, #8
 800cf58:	492b      	ldr	r1, [pc, #172]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	604b      	str	r3, [r1, #4]
 800cf5e:	e01a      	b.n	800cf96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800cf60:	4b29      	ldr	r3, [pc, #164]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a28      	ldr	r2, [pc, #160]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf66:	f023 0301 	bic.w	r3, r3, #1
 800cf6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cf6c:	f7fe fd32 	bl	800b9d4 <HAL_GetTick>
 800cf70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cf72:	e008      	b.n	800cf86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cf74:	f7fe fd2e 	bl	800b9d4 <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d901      	bls.n	800cf86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e314      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cf86:	4b20      	ldr	r3, [pc, #128]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0302 	and.w	r3, r3, #2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1f0      	bne.n	800cf74 <HAL_RCC_OscConfig+0x1dc>
 800cf92:	e000      	b.n	800cf96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cf94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d073      	beq.n	800d08a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	2b08      	cmp	r3, #8
 800cfa6:	d005      	beq.n	800cfb4 <HAL_RCC_OscConfig+0x21c>
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	2b0c      	cmp	r3, #12
 800cfac:	d10e      	bne.n	800cfcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b03      	cmp	r3, #3
 800cfb2:	d10b      	bne.n	800cfcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cfb4:	4b14      	ldr	r3, [pc, #80]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d063      	beq.n	800d088 <HAL_RCC_OscConfig+0x2f0>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d15f      	bne.n	800d088 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e2f1      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfd4:	d106      	bne.n	800cfe4 <HAL_RCC_OscConfig+0x24c>
 800cfd6:	4b0c      	ldr	r3, [pc, #48]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a0b      	ldr	r2, [pc, #44]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cfdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfe0:	6013      	str	r3, [r2, #0]
 800cfe2:	e025      	b.n	800d030 <HAL_RCC_OscConfig+0x298>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cfec:	d114      	bne.n	800d018 <HAL_RCC_OscConfig+0x280>
 800cfee:	4b06      	ldr	r3, [pc, #24]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a05      	ldr	r2, [pc, #20]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	4b03      	ldr	r3, [pc, #12]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a02      	ldr	r2, [pc, #8]	; (800d008 <HAL_RCC_OscConfig+0x270>)
 800d000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	e013      	b.n	800d030 <HAL_RCC_OscConfig+0x298>
 800d008:	40021000 	.word	0x40021000
 800d00c:	08011d28 	.word	0x08011d28
 800d010:	20000014 	.word	0x20000014
 800d014:	2000001c 	.word	0x2000001c
 800d018:	4ba0      	ldr	r3, [pc, #640]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a9f      	ldr	r2, [pc, #636]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d01e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d022:	6013      	str	r3, [r2, #0]
 800d024:	4b9d      	ldr	r3, [pc, #628]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a9c      	ldr	r2, [pc, #624]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d02a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d02e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d013      	beq.n	800d060 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d038:	f7fe fccc 	bl	800b9d4 <HAL_GetTick>
 800d03c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d03e:	e008      	b.n	800d052 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d040:	f7fe fcc8 	bl	800b9d4 <HAL_GetTick>
 800d044:	4602      	mov	r2, r0
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	2b64      	cmp	r3, #100	; 0x64
 800d04c:	d901      	bls.n	800d052 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e2ae      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d052:	4b92      	ldr	r3, [pc, #584]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0f0      	beq.n	800d040 <HAL_RCC_OscConfig+0x2a8>
 800d05e:	e014      	b.n	800d08a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d060:	f7fe fcb8 	bl	800b9d4 <HAL_GetTick>
 800d064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d066:	e008      	b.n	800d07a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d068:	f7fe fcb4 	bl	800b9d4 <HAL_GetTick>
 800d06c:	4602      	mov	r2, r0
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	2b64      	cmp	r3, #100	; 0x64
 800d074:	d901      	bls.n	800d07a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d076:	2303      	movs	r3, #3
 800d078:	e29a      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d07a:	4b88      	ldr	r3, [pc, #544]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1f0      	bne.n	800d068 <HAL_RCC_OscConfig+0x2d0>
 800d086:	e000      	b.n	800d08a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f003 0302 	and.w	r3, r3, #2
 800d092:	2b00      	cmp	r3, #0
 800d094:	d060      	beq.n	800d158 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	2b04      	cmp	r3, #4
 800d09a:	d005      	beq.n	800d0a8 <HAL_RCC_OscConfig+0x310>
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	2b0c      	cmp	r3, #12
 800d0a0:	d119      	bne.n	800d0d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d116      	bne.n	800d0d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0a8:	4b7c      	ldr	r3, [pc, #496]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <HAL_RCC_OscConfig+0x328>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e277      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0c0:	4b76      	ldr	r3, [pc, #472]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	061b      	lsls	r3, r3, #24
 800d0ce:	4973      	ldr	r1, [pc, #460]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0d4:	e040      	b.n	800d158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d023      	beq.n	800d126 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d0de:	4b6f      	ldr	r3, [pc, #444]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a6e      	ldr	r2, [pc, #440]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d0e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ea:	f7fe fc73 	bl	800b9d4 <HAL_GetTick>
 800d0ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d0f0:	e008      	b.n	800d104 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0f2:	f7fe fc6f 	bl	800b9d4 <HAL_GetTick>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d901      	bls.n	800d104 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e255      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d104:	4b65      	ldr	r3, [pc, #404]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d0f0      	beq.n	800d0f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d110:	4b62      	ldr	r3, [pc, #392]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	061b      	lsls	r3, r3, #24
 800d11e:	495f      	ldr	r1, [pc, #380]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d120:	4313      	orrs	r3, r2
 800d122:	604b      	str	r3, [r1, #4]
 800d124:	e018      	b.n	800d158 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d126:	4b5d      	ldr	r3, [pc, #372]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a5c      	ldr	r2, [pc, #368]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d12c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d132:	f7fe fc4f 	bl	800b9d4 <HAL_GetTick>
 800d136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d138:	e008      	b.n	800d14c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d13a:	f7fe fc4b 	bl	800b9d4 <HAL_GetTick>
 800d13e:	4602      	mov	r2, r0
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	2b02      	cmp	r3, #2
 800d146:	d901      	bls.n	800d14c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d148:	2303      	movs	r3, #3
 800d14a:	e231      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d14c:	4b53      	ldr	r3, [pc, #332]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1f0      	bne.n	800d13a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 0308 	and.w	r3, r3, #8
 800d160:	2b00      	cmp	r3, #0
 800d162:	d03c      	beq.n	800d1de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	695b      	ldr	r3, [r3, #20]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d01c      	beq.n	800d1a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d16c:	4b4b      	ldr	r3, [pc, #300]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d172:	4a4a      	ldr	r2, [pc, #296]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d174:	f043 0301 	orr.w	r3, r3, #1
 800d178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d17c:	f7fe fc2a 	bl	800b9d4 <HAL_GetTick>
 800d180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d182:	e008      	b.n	800d196 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d184:	f7fe fc26 	bl	800b9d4 <HAL_GetTick>
 800d188:	4602      	mov	r2, r0
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d901      	bls.n	800d196 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	e20c      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d196:	4b41      	ldr	r3, [pc, #260]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0ef      	beq.n	800d184 <HAL_RCC_OscConfig+0x3ec>
 800d1a4:	e01b      	b.n	800d1de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d1a6:	4b3d      	ldr	r3, [pc, #244]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d1a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1ac:	4a3b      	ldr	r2, [pc, #236]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d1ae:	f023 0301 	bic.w	r3, r3, #1
 800d1b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1b6:	f7fe fc0d 	bl	800b9d4 <HAL_GetTick>
 800d1ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d1bc:	e008      	b.n	800d1d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d1be:	f7fe fc09 	bl	800b9d4 <HAL_GetTick>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d901      	bls.n	800d1d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e1ef      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d1d0:	4b32      	ldr	r3, [pc, #200]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d1d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1ef      	bne.n	800d1be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f003 0304 	and.w	r3, r3, #4
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 80a6 	beq.w	800d338 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d1f0:	4b2a      	ldr	r3, [pc, #168]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10d      	bne.n	800d218 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1fc:	4b27      	ldr	r3, [pc, #156]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d200:	4a26      	ldr	r2, [pc, #152]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d206:	6593      	str	r3, [r2, #88]	; 0x58
 800d208:	4b24      	ldr	r3, [pc, #144]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d210:	60bb      	str	r3, [r7, #8]
 800d212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d214:	2301      	movs	r3, #1
 800d216:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d218:	4b21      	ldr	r3, [pc, #132]	; (800d2a0 <HAL_RCC_OscConfig+0x508>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d220:	2b00      	cmp	r3, #0
 800d222:	d118      	bne.n	800d256 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d224:	4b1e      	ldr	r3, [pc, #120]	; (800d2a0 <HAL_RCC_OscConfig+0x508>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a1d      	ldr	r2, [pc, #116]	; (800d2a0 <HAL_RCC_OscConfig+0x508>)
 800d22a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d22e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d230:	f7fe fbd0 	bl	800b9d4 <HAL_GetTick>
 800d234:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d236:	e008      	b.n	800d24a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d238:	f7fe fbcc 	bl	800b9d4 <HAL_GetTick>
 800d23c:	4602      	mov	r2, r0
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	2b02      	cmp	r3, #2
 800d244:	d901      	bls.n	800d24a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d246:	2303      	movs	r3, #3
 800d248:	e1b2      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d24a:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <HAL_RCC_OscConfig+0x508>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d252:	2b00      	cmp	r3, #0
 800d254:	d0f0      	beq.n	800d238 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d108      	bne.n	800d270 <HAL_RCC_OscConfig+0x4d8>
 800d25e:	4b0f      	ldr	r3, [pc, #60]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d264:	4a0d      	ldr	r2, [pc, #52]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d266:	f043 0301 	orr.w	r3, r3, #1
 800d26a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d26e:	e029      	b.n	800d2c4 <HAL_RCC_OscConfig+0x52c>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	2b05      	cmp	r3, #5
 800d276:	d115      	bne.n	800d2a4 <HAL_RCC_OscConfig+0x50c>
 800d278:	4b08      	ldr	r3, [pc, #32]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27e:	4a07      	ldr	r2, [pc, #28]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d280:	f043 0304 	orr.w	r3, r3, #4
 800d284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d288:	4b04      	ldr	r3, [pc, #16]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d28e:	4a03      	ldr	r2, [pc, #12]	; (800d29c <HAL_RCC_OscConfig+0x504>)
 800d290:	f043 0301 	orr.w	r3, r3, #1
 800d294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d298:	e014      	b.n	800d2c4 <HAL_RCC_OscConfig+0x52c>
 800d29a:	bf00      	nop
 800d29c:	40021000 	.word	0x40021000
 800d2a0:	40007000 	.word	0x40007000
 800d2a4:	4b9a      	ldr	r3, [pc, #616]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2aa:	4a99      	ldr	r2, [pc, #612]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d2ac:	f023 0301 	bic.w	r3, r3, #1
 800d2b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d2b4:	4b96      	ldr	r3, [pc, #600]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2ba:	4a95      	ldr	r2, [pc, #596]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d2bc:	f023 0304 	bic.w	r3, r3, #4
 800d2c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d016      	beq.n	800d2fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2cc:	f7fe fb82 	bl	800b9d4 <HAL_GetTick>
 800d2d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2d2:	e00a      	b.n	800d2ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2d4:	f7fe fb7e 	bl	800b9d4 <HAL_GetTick>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d901      	bls.n	800d2ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e162      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2ea:	4b89      	ldr	r3, [pc, #548]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0ed      	beq.n	800d2d4 <HAL_RCC_OscConfig+0x53c>
 800d2f8:	e015      	b.n	800d326 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2fa:	f7fe fb6b 	bl	800b9d4 <HAL_GetTick>
 800d2fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d300:	e00a      	b.n	800d318 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d302:	f7fe fb67 	bl	800b9d4 <HAL_GetTick>
 800d306:	4602      	mov	r2, r0
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	1ad3      	subs	r3, r2, r3
 800d30c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d310:	4293      	cmp	r3, r2
 800d312:	d901      	bls.n	800d318 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e14b      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d318:	4b7d      	ldr	r3, [pc, #500]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1ed      	bne.n	800d302 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d326:	7ffb      	ldrb	r3, [r7, #31]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d105      	bne.n	800d338 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d32c:	4b78      	ldr	r3, [pc, #480]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d330:	4a77      	ldr	r2, [pc, #476]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d336:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0320 	and.w	r3, r3, #32
 800d340:	2b00      	cmp	r3, #0
 800d342:	d03c      	beq.n	800d3be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d01c      	beq.n	800d386 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d34c:	4b70      	ldr	r3, [pc, #448]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d34e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d352:	4a6f      	ldr	r2, [pc, #444]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d354:	f043 0301 	orr.w	r3, r3, #1
 800d358:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d35c:	f7fe fb3a 	bl	800b9d4 <HAL_GetTick>
 800d360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d362:	e008      	b.n	800d376 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d364:	f7fe fb36 	bl	800b9d4 <HAL_GetTick>
 800d368:	4602      	mov	r2, r0
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d901      	bls.n	800d376 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800d372:	2303      	movs	r3, #3
 800d374:	e11c      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d376:	4b66      	ldr	r3, [pc, #408]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d37c:	f003 0302 	and.w	r3, r3, #2
 800d380:	2b00      	cmp	r3, #0
 800d382:	d0ef      	beq.n	800d364 <HAL_RCC_OscConfig+0x5cc>
 800d384:	e01b      	b.n	800d3be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d386:	4b62      	ldr	r3, [pc, #392]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d38c:	4a60      	ldr	r2, [pc, #384]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d38e:	f023 0301 	bic.w	r3, r3, #1
 800d392:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d396:	f7fe fb1d 	bl	800b9d4 <HAL_GetTick>
 800d39a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d39c:	e008      	b.n	800d3b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d39e:	f7fe fb19 	bl	800b9d4 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d901      	bls.n	800d3b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e0ff      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d3b0:	4b57      	ldr	r3, [pc, #348]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d3b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d3b6:	f003 0302 	and.w	r3, r3, #2
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1ef      	bne.n	800d39e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 80f3 	beq.w	800d5ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	f040 80c9 	bne.w	800d564 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d3d2:	4b4f      	ldr	r3, [pc, #316]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	f003 0203 	and.w	r2, r3, #3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d12c      	bne.n	800d440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d123      	bne.n	800d440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d402:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d404:	429a      	cmp	r2, r3
 800d406:	d11b      	bne.n	800d440 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d414:	429a      	cmp	r2, r3
 800d416:	d113      	bne.n	800d440 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	085b      	lsrs	r3, r3, #1
 800d424:	3b01      	subs	r3, #1
 800d426:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d428:	429a      	cmp	r2, r3
 800d42a:	d109      	bne.n	800d440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d436:	085b      	lsrs	r3, r3, #1
 800d438:	3b01      	subs	r3, #1
 800d43a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d06b      	beq.n	800d518 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	2b0c      	cmp	r3, #12
 800d444:	d062      	beq.n	800d50c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d446:	4b32      	ldr	r3, [pc, #200]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e0ac      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d456:	4b2e      	ldr	r3, [pc, #184]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a2d      	ldr	r2, [pc, #180]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d45c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d460:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d462:	f7fe fab7 	bl	800b9d4 <HAL_GetTick>
 800d466:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d468:	e008      	b.n	800d47c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d46a:	f7fe fab3 	bl	800b9d4 <HAL_GetTick>
 800d46e:	4602      	mov	r2, r0
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	2b02      	cmp	r3, #2
 800d476:	d901      	bls.n	800d47c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800d478:	2303      	movs	r3, #3
 800d47a:	e099      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d47c:	4b24      	ldr	r3, [pc, #144]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1f0      	bne.n	800d46a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d488:	4b21      	ldr	r3, [pc, #132]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d48a:	68da      	ldr	r2, [r3, #12]
 800d48c:	4b21      	ldr	r3, [pc, #132]	; (800d514 <HAL_RCC_OscConfig+0x77c>)
 800d48e:	4013      	ands	r3, r2
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d498:	3a01      	subs	r2, #1
 800d49a:	0112      	lsls	r2, r2, #4
 800d49c:	4311      	orrs	r1, r2
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d4a2:	0212      	lsls	r2, r2, #8
 800d4a4:	4311      	orrs	r1, r2
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d4aa:	0852      	lsrs	r2, r2, #1
 800d4ac:	3a01      	subs	r2, #1
 800d4ae:	0552      	lsls	r2, r2, #21
 800d4b0:	4311      	orrs	r1, r2
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d4b6:	0852      	lsrs	r2, r2, #1
 800d4b8:	3a01      	subs	r2, #1
 800d4ba:	0652      	lsls	r2, r2, #25
 800d4bc:	4311      	orrs	r1, r2
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d4c2:	06d2      	lsls	r2, r2, #27
 800d4c4:	430a      	orrs	r2, r1
 800d4c6:	4912      	ldr	r1, [pc, #72]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d4cc:	4b10      	ldr	r3, [pc, #64]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a0f      	ldr	r2, [pc, #60]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d4d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d4d8:	4b0d      	ldr	r3, [pc, #52]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	4a0c      	ldr	r2, [pc, #48]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d4de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d4e4:	f7fe fa76 	bl	800b9d4 <HAL_GetTick>
 800d4e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d4ea:	e008      	b.n	800d4fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4ec:	f7fe fa72 	bl	800b9d4 <HAL_GetTick>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d901      	bls.n	800d4fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	e058      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d4fe:	4b04      	ldr	r3, [pc, #16]	; (800d510 <HAL_RCC_OscConfig+0x778>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0f0      	beq.n	800d4ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d50a:	e050      	b.n	800d5ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e04f      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
 800d510:	40021000 	.word	0x40021000
 800d514:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d518:	4b27      	ldr	r3, [pc, #156]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d144      	bne.n	800d5ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d524:	4b24      	ldr	r3, [pc, #144]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a23      	ldr	r2, [pc, #140]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d52a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d52e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d530:	4b21      	ldr	r3, [pc, #132]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	4a20      	ldr	r2, [pc, #128]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d53a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d53c:	f7fe fa4a 	bl	800b9d4 <HAL_GetTick>
 800d540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d542:	e008      	b.n	800d556 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d544:	f7fe fa46 	bl	800b9d4 <HAL_GetTick>
 800d548:	4602      	mov	r2, r0
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d901      	bls.n	800d556 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800d552:	2303      	movs	r3, #3
 800d554:	e02c      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d556:	4b18      	ldr	r3, [pc, #96]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d0f0      	beq.n	800d544 <HAL_RCC_OscConfig+0x7ac>
 800d562:	e024      	b.n	800d5ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	2b0c      	cmp	r3, #12
 800d568:	d01f      	beq.n	800d5aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d56a:	4b13      	ldr	r3, [pc, #76]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a12      	ldr	r2, [pc, #72]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d576:	f7fe fa2d 	bl	800b9d4 <HAL_GetTick>
 800d57a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d57c:	e008      	b.n	800d590 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d57e:	f7fe fa29 	bl	800b9d4 <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d901      	bls.n	800d590 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e00f      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d590:	4b09      	ldr	r3, [pc, #36]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1f0      	bne.n	800d57e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800d59c:	4b06      	ldr	r3, [pc, #24]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	4905      	ldr	r1, [pc, #20]	; (800d5b8 <HAL_RCC_OscConfig+0x820>)
 800d5a2:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <HAL_RCC_OscConfig+0x824>)
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	60cb      	str	r3, [r1, #12]
 800d5a8:	e001      	b.n	800d5ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3720      	adds	r7, #32
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	40021000 	.word	0x40021000
 800d5bc:	feeefffc 	.word	0xfeeefffc

0800d5c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e0e7      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d5d4:	4b75      	ldr	r3, [pc, #468]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0307 	and.w	r3, r3, #7
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d910      	bls.n	800d604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5e2:	4b72      	ldr	r3, [pc, #456]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f023 0207 	bic.w	r2, r3, #7
 800d5ea:	4970      	ldr	r1, [pc, #448]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5f2:	4b6e      	ldr	r3, [pc, #440]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d001      	beq.n	800d604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	e0cf      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 0302 	and.w	r3, r3, #2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d010      	beq.n	800d632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	689a      	ldr	r2, [r3, #8]
 800d614:	4b66      	ldr	r3, [pc, #408]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d908      	bls.n	800d632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d620:	4b63      	ldr	r3, [pc, #396]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	4960      	ldr	r1, [pc, #384]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d62e:	4313      	orrs	r3, r2
 800d630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0301 	and.w	r3, r3, #1
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d04c      	beq.n	800d6d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2b03      	cmp	r3, #3
 800d644:	d107      	bne.n	800d656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d646:	4b5a      	ldr	r3, [pc, #360]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d121      	bne.n	800d696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e0a6      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d107      	bne.n	800d66e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d65e:	4b54      	ldr	r3, [pc, #336]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d115      	bne.n	800d696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e09a      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d107      	bne.n	800d686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d676:	4b4e      	ldr	r3, [pc, #312]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 0302 	and.w	r3, r3, #2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d109      	bne.n	800d696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d682:	2301      	movs	r3, #1
 800d684:	e08e      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d686:	4b4a      	ldr	r3, [pc, #296]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	e086      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d696:	4b46      	ldr	r3, [pc, #280]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f023 0203 	bic.w	r2, r3, #3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	4943      	ldr	r1, [pc, #268]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6a8:	f7fe f994 	bl	800b9d4 <HAL_GetTick>
 800d6ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6ae:	e00a      	b.n	800d6c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6b0:	f7fe f990 	bl	800b9d4 <HAL_GetTick>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d901      	bls.n	800d6c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	e06e      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6c6:	4b3a      	ldr	r3, [pc, #232]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f003 020c 	and.w	r2, r3, #12
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d1eb      	bne.n	800d6b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f003 0302 	and.w	r3, r3, #2
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d010      	beq.n	800d706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	4b31      	ldr	r3, [pc, #196]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d208      	bcs.n	800d706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d6f4:	4b2e      	ldr	r3, [pc, #184]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	492b      	ldr	r1, [pc, #172]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d702:	4313      	orrs	r3, r2
 800d704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d706:	4b29      	ldr	r3, [pc, #164]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f003 0307 	and.w	r3, r3, #7
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d210      	bcs.n	800d736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d714:	4b25      	ldr	r3, [pc, #148]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f023 0207 	bic.w	r2, r3, #7
 800d71c:	4923      	ldr	r1, [pc, #140]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	4313      	orrs	r3, r2
 800d722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d724:	4b21      	ldr	r3, [pc, #132]	; (800d7ac <HAL_RCC_ClockConfig+0x1ec>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 0307 	and.w	r3, r3, #7
 800d72c:	683a      	ldr	r2, [r7, #0]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d001      	beq.n	800d736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e036      	b.n	800d7a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 0304 	and.w	r3, r3, #4
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d008      	beq.n	800d754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d742:	4b1b      	ldr	r3, [pc, #108]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	4918      	ldr	r1, [pc, #96]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d750:	4313      	orrs	r3, r2
 800d752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 0308 	and.w	r3, r3, #8
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d009      	beq.n	800d774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d760:	4b13      	ldr	r3, [pc, #76]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	00db      	lsls	r3, r3, #3
 800d76e:	4910      	ldr	r1, [pc, #64]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d770:	4313      	orrs	r3, r2
 800d772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d774:	f000 f824 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 800d778:	4602      	mov	r2, r0
 800d77a:	4b0d      	ldr	r3, [pc, #52]	; (800d7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	091b      	lsrs	r3, r3, #4
 800d780:	f003 030f 	and.w	r3, r3, #15
 800d784:	490b      	ldr	r1, [pc, #44]	; (800d7b4 <HAL_RCC_ClockConfig+0x1f4>)
 800d786:	5ccb      	ldrb	r3, [r1, r3]
 800d788:	f003 031f 	and.w	r3, r3, #31
 800d78c:	fa22 f303 	lsr.w	r3, r2, r3
 800d790:	4a09      	ldr	r2, [pc, #36]	; (800d7b8 <HAL_RCC_ClockConfig+0x1f8>)
 800d792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d794:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <HAL_RCC_ClockConfig+0x1fc>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fe f8cb 	bl	800b934 <HAL_InitTick>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	72fb      	strb	r3, [r7, #11]

  return status;
 800d7a2:	7afb      	ldrb	r3, [r7, #11]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	40022000 	.word	0x40022000
 800d7b0:	40021000 	.word	0x40021000
 800d7b4:	08011d28 	.word	0x08011d28
 800d7b8:	20000014 	.word	0x20000014
 800d7bc:	2000001c 	.word	0x2000001c

0800d7c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b089      	sub	sp, #36	; 0x24
 800d7c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	61fb      	str	r3, [r7, #28]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7ce:	4b3e      	ldr	r3, [pc, #248]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	f003 030c 	and.w	r3, r3, #12
 800d7d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d7d8:	4b3b      	ldr	r3, [pc, #236]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	f003 0303 	and.w	r3, r3, #3
 800d7e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d005      	beq.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x34>
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	2b0c      	cmp	r3, #12
 800d7ec:	d121      	bne.n	800d832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d11e      	bne.n	800d832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d7f4:	4b34      	ldr	r3, [pc, #208]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0308 	and.w	r3, r3, #8
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d800:	4b31      	ldr	r3, [pc, #196]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d806:	0a1b      	lsrs	r3, r3, #8
 800d808:	f003 030f 	and.w	r3, r3, #15
 800d80c:	61fb      	str	r3, [r7, #28]
 800d80e:	e005      	b.n	800d81c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d810:	4b2d      	ldr	r3, [pc, #180]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	091b      	lsrs	r3, r3, #4
 800d816:	f003 030f 	and.w	r3, r3, #15
 800d81a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d81c:	4a2b      	ldr	r2, [pc, #172]	; (800d8cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d10d      	bne.n	800d848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d830:	e00a      	b.n	800d848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	2b04      	cmp	r3, #4
 800d836:	d102      	bne.n	800d83e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d838:	4b25      	ldr	r3, [pc, #148]	; (800d8d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d83a:	61bb      	str	r3, [r7, #24]
 800d83c:	e004      	b.n	800d848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2b08      	cmp	r3, #8
 800d842:	d101      	bne.n	800d848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d844:	4b23      	ldr	r3, [pc, #140]	; (800d8d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800d846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	2b0c      	cmp	r3, #12
 800d84c:	d134      	bne.n	800d8b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d84e:	4b1e      	ldr	r3, [pc, #120]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	f003 0303 	and.w	r3, r3, #3
 800d856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d003      	beq.n	800d866 <HAL_RCC_GetSysClockFreq+0xa6>
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2b03      	cmp	r3, #3
 800d862:	d003      	beq.n	800d86c <HAL_RCC_GetSysClockFreq+0xac>
 800d864:	e005      	b.n	800d872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d866:	4b1a      	ldr	r3, [pc, #104]	; (800d8d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d868:	617b      	str	r3, [r7, #20]
      break;
 800d86a:	e005      	b.n	800d878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d86c:	4b19      	ldr	r3, [pc, #100]	; (800d8d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800d86e:	617b      	str	r3, [r7, #20]
      break;
 800d870:	e002      	b.n	800d878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	617b      	str	r3, [r7, #20]
      break;
 800d876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d878:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	091b      	lsrs	r3, r3, #4
 800d87e:	f003 0307 	and.w	r3, r3, #7
 800d882:	3301      	adds	r3, #1
 800d884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d886:	4b10      	ldr	r3, [pc, #64]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	0a1b      	lsrs	r3, r3, #8
 800d88c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	fb03 f202 	mul.w	r2, r3, r2
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	fbb2 f3f3 	udiv	r3, r2, r3
 800d89c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d89e:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	0e5b      	lsrs	r3, r3, #25
 800d8a4:	f003 0303 	and.w	r3, r3, #3
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3724      	adds	r7, #36	; 0x24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	40021000 	.word	0x40021000
 800d8cc:	08011d40 	.word	0x08011d40
 800d8d0:	00f42400 	.word	0x00f42400
 800d8d4:	007a1200 	.word	0x007a1200

0800d8d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d8dc:	4b03      	ldr	r3, [pc, #12]	; (800d8ec <HAL_RCC_GetHCLKFreq+0x14>)
 800d8de:	681b      	ldr	r3, [r3, #0]
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	20000014 	.word	0x20000014

0800d8f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d8f4:	f7ff fff0 	bl	800d8d8 <HAL_RCC_GetHCLKFreq>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	4b06      	ldr	r3, [pc, #24]	; (800d914 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	0a1b      	lsrs	r3, r3, #8
 800d900:	f003 0307 	and.w	r3, r3, #7
 800d904:	4904      	ldr	r1, [pc, #16]	; (800d918 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d906:	5ccb      	ldrb	r3, [r1, r3]
 800d908:	f003 031f 	and.w	r3, r3, #31
 800d90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d910:	4618      	mov	r0, r3
 800d912:	bd80      	pop	{r7, pc}
 800d914:	40021000 	.word	0x40021000
 800d918:	08011d38 	.word	0x08011d38

0800d91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d920:	f7ff ffda 	bl	800d8d8 <HAL_RCC_GetHCLKFreq>
 800d924:	4602      	mov	r2, r0
 800d926:	4b06      	ldr	r3, [pc, #24]	; (800d940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	0adb      	lsrs	r3, r3, #11
 800d92c:	f003 0307 	and.w	r3, r3, #7
 800d930:	4904      	ldr	r1, [pc, #16]	; (800d944 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d932:	5ccb      	ldrb	r3, [r1, r3]
 800d934:	f003 031f 	and.w	r3, r3, #31
 800d938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	40021000 	.word	0x40021000
 800d944:	08011d38 	.word	0x08011d38

0800d948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d950:	2300      	movs	r3, #0
 800d952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d954:	4b2a      	ldr	r3, [pc, #168]	; (800da00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d960:	f7ff f9b6 	bl	800ccd0 <HAL_PWREx_GetVoltageRange>
 800d964:	6178      	str	r0, [r7, #20]
 800d966:	e014      	b.n	800d992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d968:	4b25      	ldr	r3, [pc, #148]	; (800da00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d96c:	4a24      	ldr	r2, [pc, #144]	; (800da00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d972:	6593      	str	r3, [r2, #88]	; 0x58
 800d974:	4b22      	ldr	r3, [pc, #136]	; (800da00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d980:	f7ff f9a6 	bl	800ccd0 <HAL_PWREx_GetVoltageRange>
 800d984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d986:	4b1e      	ldr	r3, [pc, #120]	; (800da00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d98a:	4a1d      	ldr	r2, [pc, #116]	; (800da00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d98c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d998:	d10b      	bne.n	800d9b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b80      	cmp	r3, #128	; 0x80
 800d99e:	d919      	bls.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2ba0      	cmp	r3, #160	; 0xa0
 800d9a4:	d902      	bls.n	800d9ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	e013      	b.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	613b      	str	r3, [r7, #16]
 800d9b0:	e010      	b.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b80      	cmp	r3, #128	; 0x80
 800d9b6:	d902      	bls.n	800d9be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	613b      	str	r3, [r7, #16]
 800d9bc:	e00a      	b.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b80      	cmp	r3, #128	; 0x80
 800d9c2:	d102      	bne.n	800d9ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	e004      	b.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b70      	cmp	r3, #112	; 0x70
 800d9ce:	d101      	bne.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d9d4:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f023 0207 	bic.w	r2, r3, #7
 800d9dc:	4909      	ldr	r1, [pc, #36]	; (800da04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d9e4:	4b07      	ldr	r3, [pc, #28]	; (800da04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 0307 	and.w	r3, r3, #7
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d001      	beq.n	800d9f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e000      	b.n	800d9f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	40021000 	.word	0x40021000
 800da04:	40022000 	.word	0x40022000

0800da08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b086      	sub	sp, #24
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800da10:	2300      	movs	r3, #0
 800da12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800da14:	2300      	movs	r3, #0
 800da16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da20:	2b00      	cmp	r3, #0
 800da22:	d031      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800da2c:	d01a      	beq.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800da2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800da32:	d814      	bhi.n	800da5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800da34:	2b00      	cmp	r3, #0
 800da36:	d009      	beq.n	800da4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800da38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800da3c:	d10f      	bne.n	800da5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800da3e:	4b5d      	ldr	r3, [pc, #372]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	4a5c      	ldr	r2, [pc, #368]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800da44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800da4a:	e00c      	b.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	3304      	adds	r3, #4
 800da50:	2100      	movs	r1, #0
 800da52:	4618      	mov	r0, r3
 800da54:	f000 fa22 	bl	800de9c <RCCEx_PLLSAI1_Config>
 800da58:	4603      	mov	r3, r0
 800da5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800da5c:	e003      	b.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	74fb      	strb	r3, [r7, #19]
      break;
 800da62:	e000      	b.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800da64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800da66:	7cfb      	ldrb	r3, [r7, #19]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10b      	bne.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800da6c:	4b51      	ldr	r3, [pc, #324]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800da6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da7a:	494e      	ldr	r1, [pc, #312]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800da7c:	4313      	orrs	r3, r2
 800da7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da82:	e001      	b.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da84:	7cfb      	ldrb	r3, [r7, #19]
 800da86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 809e 	beq.w	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da96:	2300      	movs	r3, #0
 800da98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800da9a:	4b46      	ldr	r3, [pc, #280]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800da9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800daaa:	2300      	movs	r3, #0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00d      	beq.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dab0:	4b40      	ldr	r3, [pc, #256]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800dab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dab4:	4a3f      	ldr	r2, [pc, #252]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800dab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daba:	6593      	str	r3, [r2, #88]	; 0x58
 800dabc:	4b3d      	ldr	r3, [pc, #244]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800dabe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dac8:	2301      	movs	r3, #1
 800daca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dacc:	4b3a      	ldr	r3, [pc, #232]	; (800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a39      	ldr	r2, [pc, #228]	; (800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800dad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dad8:	f7fd ff7c 	bl	800b9d4 <HAL_GetTick>
 800dadc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800dade:	e009      	b.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dae0:	f7fd ff78 	bl	800b9d4 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b02      	cmp	r3, #2
 800daec:	d902      	bls.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	74fb      	strb	r3, [r7, #19]
        break;
 800daf2:	e005      	b.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800daf4:	4b30      	ldr	r3, [pc, #192]	; (800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0ef      	beq.n	800dae0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800db00:	7cfb      	ldrb	r3, [r7, #19]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d15a      	bne.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800db06:	4b2b      	ldr	r3, [pc, #172]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d01e      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d019      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800db22:	4b24      	ldr	r3, [pc, #144]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800db2e:	4b21      	ldr	r3, [pc, #132]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db34:	4a1f      	ldr	r2, [pc, #124]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db3e:	4b1d      	ldr	r3, [pc, #116]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db44:	4a1b      	ldr	r2, [pc, #108]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800db4e:	4a19      	ldr	r2, [pc, #100]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d016      	beq.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db60:	f7fd ff38 	bl	800b9d4 <HAL_GetTick>
 800db64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db66:	e00b      	b.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db68:	f7fd ff34 	bl	800b9d4 <HAL_GetTick>
 800db6c:	4602      	mov	r2, r0
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	f241 3288 	movw	r2, #5000	; 0x1388
 800db76:	4293      	cmp	r3, r2
 800db78:	d902      	bls.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800db7a:	2303      	movs	r3, #3
 800db7c:	74fb      	strb	r3, [r7, #19]
            break;
 800db7e:	e006      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db80:	4b0c      	ldr	r3, [pc, #48]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db86:	f003 0302 	and.w	r3, r3, #2
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0ec      	beq.n	800db68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800db8e:	7cfb      	ldrb	r3, [r7, #19]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10b      	bne.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800db94:	4b07      	ldr	r3, [pc, #28]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dba2:	4904      	ldr	r1, [pc, #16]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800dba4:	4313      	orrs	r3, r2
 800dba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dbaa:	e009      	b.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dbac:	7cfb      	ldrb	r3, [r7, #19]
 800dbae:	74bb      	strb	r3, [r7, #18]
 800dbb0:	e006      	b.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800dbb2:	bf00      	nop
 800dbb4:	40021000 	.word	0x40021000
 800dbb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbbc:	7cfb      	ldrb	r3, [r7, #19]
 800dbbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbc0:	7c7b      	ldrb	r3, [r7, #17]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d105      	bne.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbc6:	4b8d      	ldr	r3, [pc, #564]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbca:	4a8c      	ldr	r2, [pc, #560]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dbcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dbde:	4b87      	ldr	r3, [pc, #540]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbe4:	f023 0203 	bic.w	r2, r3, #3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	4983      	ldr	r1, [pc, #524]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 0302 	and.w	r3, r3, #2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00a      	beq.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dc00:	4b7e      	ldr	r3, [pc, #504]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc06:	f023 020c 	bic.w	r2, r3, #12
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0e:	497b      	ldr	r1, [pc, #492]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc10:	4313      	orrs	r3, r2
 800dc12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dc22:	4b76      	ldr	r3, [pc, #472]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc30:	4972      	ldr	r1, [pc, #456]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f003 0320 	and.w	r3, r3, #32
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc44:	4b6d      	ldr	r3, [pc, #436]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc52:	496a      	ldr	r1, [pc, #424]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc54:	4313      	orrs	r3, r2
 800dc56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00a      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dc66:	4b65      	ldr	r3, [pc, #404]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc74:	4961      	ldr	r1, [pc, #388]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00a      	beq.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dc88:	4b5c      	ldr	r3, [pc, #368]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc96:	4959      	ldr	r1, [pc, #356]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dcaa:	4b54      	ldr	r3, [pc, #336]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb8:	4950      	ldr	r1, [pc, #320]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00a      	beq.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dccc:	4b4b      	ldr	r3, [pc, #300]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dcce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcda:	4948      	ldr	r1, [pc, #288]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00a      	beq.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dcee:	4b43      	ldr	r3, [pc, #268]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dcf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfc:	493f      	ldr	r1, [pc, #252]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d028      	beq.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dd10:	4b3a      	ldr	r3, [pc, #232]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd1e:	4937      	ldr	r1, [pc, #220]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd20:	4313      	orrs	r3, r2
 800dd22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd2e:	d106      	bne.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd30:	4b32      	ldr	r3, [pc, #200]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	4a31      	ldr	r2, [pc, #196]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd3a:	60d3      	str	r3, [r2, #12]
 800dd3c:	e011      	b.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dd46:	d10c      	bne.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	2101      	movs	r1, #1
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 f8a4 	bl	800de9c <RCCEx_PLLSAI1_Config>
 800dd54:	4603      	mov	r3, r0
 800dd56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800dd58:	7cfb      	ldrb	r3, [r7, #19]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800dd5e:	7cfb      	ldrb	r3, [r7, #19]
 800dd60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d028      	beq.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dd6e:	4b23      	ldr	r3, [pc, #140]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd7c:	491f      	ldr	r1, [pc, #124]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd8c:	d106      	bne.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd8e:	4b1b      	ldr	r3, [pc, #108]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	4a1a      	ldr	r2, [pc, #104]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dd94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd98:	60d3      	str	r3, [r2, #12]
 800dd9a:	e011      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dda0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dda4:	d10c      	bne.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	3304      	adds	r3, #4
 800ddaa:	2101      	movs	r1, #1
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 f875 	bl	800de9c <RCCEx_PLLSAI1_Config>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ddb6:	7cfb      	ldrb	r3, [r7, #19]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800ddbc:	7cfb      	ldrb	r3, [r7, #19]
 800ddbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d02b      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ddcc:	4b0b      	ldr	r3, [pc, #44]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ddce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddda:	4908      	ldr	r1, [pc, #32]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800dddc:	4313      	orrs	r3, r2
 800ddde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dde6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddea:	d109      	bne.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ddec:	4b03      	ldr	r3, [pc, #12]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	4a02      	ldr	r2, [pc, #8]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ddf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddf6:	60d3      	str	r3, [r2, #12]
 800ddf8:	e014      	b.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800ddfa:	bf00      	nop
 800ddfc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de08:	d10c      	bne.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3304      	adds	r3, #4
 800de0e:	2101      	movs	r1, #1
 800de10:	4618      	mov	r0, r3
 800de12:	f000 f843 	bl	800de9c <RCCEx_PLLSAI1_Config>
 800de16:	4603      	mov	r3, r0
 800de18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800de1a:	7cfb      	ldrb	r3, [r7, #19]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800de20:	7cfb      	ldrb	r3, [r7, #19]
 800de22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01c      	beq.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800de30:	4b19      	ldr	r3, [pc, #100]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800de32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3e:	4916      	ldr	r1, [pc, #88]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800de40:	4313      	orrs	r3, r2
 800de42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de4e:	d10c      	bne.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	3304      	adds	r3, #4
 800de54:	2102      	movs	r1, #2
 800de56:	4618      	mov	r0, r3
 800de58:	f000 f820 	bl	800de9c <RCCEx_PLLSAI1_Config>
 800de5c:	4603      	mov	r3, r0
 800de5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800de60:	7cfb      	ldrb	r3, [r7, #19]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800de66:	7cfb      	ldrb	r3, [r7, #19]
 800de68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00a      	beq.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800de76:	4b08      	ldr	r3, [pc, #32]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800de78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de84:	4904      	ldr	r1, [pc, #16]	; (800de98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800de86:	4313      	orrs	r3, r2
 800de88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800de8c:	7cbb      	ldrb	r3, [r7, #18]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3718      	adds	r7, #24
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	40021000 	.word	0x40021000

0800de9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dea6:	2300      	movs	r3, #0
 800dea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800deaa:	4b74      	ldr	r3, [pc, #464]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	f003 0303 	and.w	r3, r3, #3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d018      	beq.n	800dee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800deb6:	4b71      	ldr	r3, [pc, #452]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	f003 0203 	and.w	r2, r3, #3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d10d      	bne.n	800dee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
       ||
 800deca:	2b00      	cmp	r3, #0
 800decc:	d009      	beq.n	800dee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800dece:	4b6b      	ldr	r3, [pc, #428]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	091b      	lsrs	r3, r3, #4
 800ded4:	f003 0307 	and.w	r3, r3, #7
 800ded8:	1c5a      	adds	r2, r3, #1
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
       ||
 800dede:	429a      	cmp	r2, r3
 800dee0:	d047      	beq.n	800df72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	73fb      	strb	r3, [r7, #15]
 800dee6:	e044      	b.n	800df72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b03      	cmp	r3, #3
 800deee:	d018      	beq.n	800df22 <RCCEx_PLLSAI1_Config+0x86>
 800def0:	2b03      	cmp	r3, #3
 800def2:	d825      	bhi.n	800df40 <RCCEx_PLLSAI1_Config+0xa4>
 800def4:	2b01      	cmp	r3, #1
 800def6:	d002      	beq.n	800defe <RCCEx_PLLSAI1_Config+0x62>
 800def8:	2b02      	cmp	r3, #2
 800defa:	d009      	beq.n	800df10 <RCCEx_PLLSAI1_Config+0x74>
 800defc:	e020      	b.n	800df40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800defe:	4b5f      	ldr	r3, [pc, #380]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 0302 	and.w	r3, r3, #2
 800df06:	2b00      	cmp	r3, #0
 800df08:	d11d      	bne.n	800df46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800df0e:	e01a      	b.n	800df46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800df10:	4b5a      	ldr	r3, [pc, #360]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d116      	bne.n	800df4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800df20:	e013      	b.n	800df4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800df22:	4b56      	ldr	r3, [pc, #344]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10f      	bne.n	800df4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800df2e:	4b53      	ldr	r3, [pc, #332]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df36:	2b00      	cmp	r3, #0
 800df38:	d109      	bne.n	800df4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800df3e:	e006      	b.n	800df4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	73fb      	strb	r3, [r7, #15]
      break;
 800df44:	e004      	b.n	800df50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800df46:	bf00      	nop
 800df48:	e002      	b.n	800df50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800df4a:	bf00      	nop
 800df4c:	e000      	b.n	800df50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800df4e:	bf00      	nop
    }

    if(status == HAL_OK)
 800df50:	7bfb      	ldrb	r3, [r7, #15]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10d      	bne.n	800df72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800df56:	4b49      	ldr	r3, [pc, #292]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6819      	ldr	r1, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	3b01      	subs	r3, #1
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	430b      	orrs	r3, r1
 800df6c:	4943      	ldr	r1, [pc, #268]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df6e:	4313      	orrs	r3, r2
 800df70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d17c      	bne.n	800e072 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800df78:	4b40      	ldr	r3, [pc, #256]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a3f      	ldr	r2, [pc, #252]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800df7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800df82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df84:	f7fd fd26 	bl	800b9d4 <HAL_GetTick>
 800df88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800df8a:	e009      	b.n	800dfa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800df8c:	f7fd fd22 	bl	800b9d4 <HAL_GetTick>
 800df90:	4602      	mov	r2, r0
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	2b02      	cmp	r3, #2
 800df98:	d902      	bls.n	800dfa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800df9a:	2303      	movs	r3, #3
 800df9c:	73fb      	strb	r3, [r7, #15]
        break;
 800df9e:	e005      	b.n	800dfac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dfa0:	4b36      	ldr	r3, [pc, #216]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1ef      	bne.n	800df8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d15f      	bne.n	800e072 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d110      	bne.n	800dfda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dfb8:	4b30      	ldr	r3, [pc, #192]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800dfc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	6892      	ldr	r2, [r2, #8]
 800dfc8:	0211      	lsls	r1, r2, #8
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	68d2      	ldr	r2, [r2, #12]
 800dfce:	06d2      	lsls	r2, r2, #27
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	492a      	ldr	r1, [pc, #168]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	610b      	str	r3, [r1, #16]
 800dfd8:	e027      	b.n	800e02a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d112      	bne.n	800e006 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dfe0:	4b26      	ldr	r3, [pc, #152]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800dfe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	6892      	ldr	r2, [r2, #8]
 800dff0:	0211      	lsls	r1, r2, #8
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	6912      	ldr	r2, [r2, #16]
 800dff6:	0852      	lsrs	r2, r2, #1
 800dff8:	3a01      	subs	r2, #1
 800dffa:	0552      	lsls	r2, r2, #21
 800dffc:	430a      	orrs	r2, r1
 800dffe:	491f      	ldr	r1, [pc, #124]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e000:	4313      	orrs	r3, r2
 800e002:	610b      	str	r3, [r1, #16]
 800e004:	e011      	b.n	800e02a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e006:	4b1d      	ldr	r3, [pc, #116]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e00e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	6892      	ldr	r2, [r2, #8]
 800e016:	0211      	lsls	r1, r2, #8
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	6952      	ldr	r2, [r2, #20]
 800e01c:	0852      	lsrs	r2, r2, #1
 800e01e:	3a01      	subs	r2, #1
 800e020:	0652      	lsls	r2, r2, #25
 800e022:	430a      	orrs	r2, r1
 800e024:	4915      	ldr	r1, [pc, #84]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e026:	4313      	orrs	r3, r2
 800e028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e02a:	4b14      	ldr	r3, [pc, #80]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a13      	ldr	r2, [pc, #76]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e036:	f7fd fccd 	bl	800b9d4 <HAL_GetTick>
 800e03a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e03c:	e009      	b.n	800e052 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e03e:	f7fd fcc9 	bl	800b9d4 <HAL_GetTick>
 800e042:	4602      	mov	r2, r0
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	2b02      	cmp	r3, #2
 800e04a:	d902      	bls.n	800e052 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	73fb      	strb	r3, [r7, #15]
          break;
 800e050:	e005      	b.n	800e05e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e052:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0ef      	beq.n	800e03e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d106      	bne.n	800e072 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e066:	691a      	ldr	r2, [r3, #16]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	699b      	ldr	r3, [r3, #24]
 800e06c:	4903      	ldr	r1, [pc, #12]	; (800e07c <RCCEx_PLLSAI1_Config+0x1e0>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e072:	7bfb      	ldrb	r3, [r7, #15]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	40021000 	.word	0x40021000

0800e080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e095      	b.n	800e1be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	2b00      	cmp	r3, #0
 800e098:	d108      	bne.n	800e0ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0a2:	d009      	beq.n	800e0b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	61da      	str	r2, [r3, #28]
 800e0aa:	e005      	b.n	800e0b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7f4 ffaa 	bl	800302c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2202      	movs	r2, #2
 800e0dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e0f8:	d902      	bls.n	800e100 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	60fb      	str	r3, [r7, #12]
 800e0fe:	e002      	b.n	800e106 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e104:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e10e:	d007      	beq.n	800e120 <HAL_SPI_Init+0xa0>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e118:	d002      	beq.n	800e120 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e130:	431a      	orrs	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	f003 0302 	and.w	r3, r3, #2
 800e13a:	431a      	orrs	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	695b      	ldr	r3, [r3, #20]
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	431a      	orrs	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e14e:	431a      	orrs	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	69db      	ldr	r3, [r3, #28]
 800e154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e158:	431a      	orrs	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e162:	ea42 0103 	orr.w	r1, r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	430a      	orrs	r2, r1
 800e174:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	699b      	ldr	r3, [r3, #24]
 800e17a:	0c1b      	lsrs	r3, r3, #16
 800e17c:	f003 0204 	and.w	r2, r3, #4
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	f003 0310 	and.w	r3, r3, #16
 800e188:	431a      	orrs	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18e:	f003 0308 	and.w	r3, r3, #8
 800e192:	431a      	orrs	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e19c:	ea42 0103 	orr.w	r1, r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b088      	sub	sp, #32
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	60f8      	str	r0, [r7, #12]
 800e1ce:	60b9      	str	r1, [r7, #8]
 800e1d0:	603b      	str	r3, [r7, #0]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d101      	bne.n	800e1e8 <HAL_SPI_Transmit+0x22>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	e158      	b.n	800e49a <HAL_SPI_Transmit+0x2d4>
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1f0:	f7fd fbf0 	bl	800b9d4 <HAL_GetTick>
 800e1f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e1f6:	88fb      	ldrh	r3, [r7, #6]
 800e1f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b01      	cmp	r3, #1
 800e204:	d002      	beq.n	800e20c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e206:	2302      	movs	r3, #2
 800e208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e20a:	e13d      	b.n	800e488 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <HAL_SPI_Transmit+0x52>
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d102      	bne.n	800e21e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e21c:	e134      	b.n	800e488 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2203      	movs	r2, #3
 800e222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	88fa      	ldrh	r2, [r7, #6]
 800e23c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e268:	d10f      	bne.n	800e28a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e294:	2b40      	cmp	r3, #64	; 0x40
 800e296:	d007      	beq.n	800e2a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2b0:	d94b      	bls.n	800e34a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <HAL_SPI_Transmit+0xfa>
 800e2ba:	8afb      	ldrh	r3, [r7, #22]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d13e      	bne.n	800e33e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c4:	881a      	ldrh	r2, [r3, #0]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	1c9a      	adds	r2, r3, #2
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e2e4:	e02b      	b.n	800e33e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d112      	bne.n	800e31a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f8:	881a      	ldrh	r2, [r3, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e304:	1c9a      	adds	r2, r3, #2
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e30e:	b29b      	uxth	r3, r3
 800e310:	3b01      	subs	r3, #1
 800e312:	b29a      	uxth	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e318:	e011      	b.n	800e33e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e31a:	f7fd fb5b 	bl	800b9d4 <HAL_GetTick>
 800e31e:	4602      	mov	r2, r0
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d803      	bhi.n	800e332 <HAL_SPI_Transmit+0x16c>
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e330:	d102      	bne.n	800e338 <HAL_SPI_Transmit+0x172>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800e338:	2303      	movs	r3, #3
 800e33a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e33c:	e0a4      	b.n	800e488 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e342:	b29b      	uxth	r3, r3
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1ce      	bne.n	800e2e6 <HAL_SPI_Transmit+0x120>
 800e348:	e07c      	b.n	800e444 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <HAL_SPI_Transmit+0x192>
 800e352:	8afb      	ldrh	r3, [r7, #22]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d170      	bne.n	800e43a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d912      	bls.n	800e388 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e366:	881a      	ldrh	r2, [r3, #0]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e372:	1c9a      	adds	r2, r3, #2
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b02      	subs	r3, #2
 800e380:	b29a      	uxth	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e386:	e058      	b.n	800e43a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	330c      	adds	r3, #12
 800e392:	7812      	ldrb	r2, [r2, #0]
 800e394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e3ae:	e044      	b.n	800e43a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d12b      	bne.n	800e416 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d912      	bls.n	800e3ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3cc:	881a      	ldrh	r2, [r3, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d8:	1c9a      	adds	r2, r3, #2
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	3b02      	subs	r3, #2
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3ec:	e025      	b.n	800e43a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	330c      	adds	r3, #12
 800e3f8:	7812      	ldrb	r2, [r2, #0]
 800e3fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e400:	1c5a      	adds	r2, r3, #1
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	3b01      	subs	r3, #1
 800e40e:	b29a      	uxth	r2, r3
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e414:	e011      	b.n	800e43a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e416:	f7fd fadd 	bl	800b9d4 <HAL_GetTick>
 800e41a:	4602      	mov	r2, r0
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	429a      	cmp	r2, r3
 800e424:	d803      	bhi.n	800e42e <HAL_SPI_Transmit+0x268>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42c:	d102      	bne.n	800e434 <HAL_SPI_Transmit+0x26e>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d102      	bne.n	800e43a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e434:	2303      	movs	r3, #3
 800e436:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e438:	e026      	b.n	800e488 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e43e:	b29b      	uxth	r3, r3
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1b5      	bne.n	800e3b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f000 fce3 	bl	800ee14 <SPI_EndRxTxTransaction>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2220      	movs	r2, #32
 800e458:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10a      	bne.n	800e478 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e462:	2300      	movs	r3, #0
 800e464:	613b      	str	r3, [r7, #16]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	613b      	str	r3, [r7, #16]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	613b      	str	r3, [r7, #16]
 800e476:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	77fb      	strb	r3, [r7, #31]
 800e484:	e000      	b.n	800e488 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e498:	7ffb      	ldrb	r3, [r7, #31]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3720      	adds	r7, #32
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b088      	sub	sp, #32
 800e4a6:	af02      	add	r7, sp, #8
 800e4a8:	60f8      	str	r0, [r7, #12]
 800e4aa:	60b9      	str	r1, [r7, #8]
 800e4ac:	603b      	str	r3, [r7, #0]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4be:	d112      	bne.n	800e4e6 <HAL_SPI_Receive+0x44>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10e      	bne.n	800e4e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2204      	movs	r2, #4
 800e4cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e4d0:	88fa      	ldrh	r2, [r7, #6]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f000 f910 	bl	800e702 <HAL_SPI_TransmitReceive>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	e109      	b.n	800e6fa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <HAL_SPI_Receive+0x52>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e102      	b.n	800e6fa <HAL_SPI_Receive+0x258>
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4fc:	f7fd fa6a 	bl	800b9d4 <HAL_GetTick>
 800e500:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d002      	beq.n	800e514 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e50e:	2302      	movs	r3, #2
 800e510:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e512:	e0e9      	b.n	800e6e8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <HAL_SPI_Receive+0x7e>
 800e51a:	88fb      	ldrh	r3, [r7, #6]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e524:	e0e0      	b.n	800e6e8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2204      	movs	r2, #4
 800e52a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	68ba      	ldr	r2, [r7, #8]
 800e538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	88fa      	ldrh	r2, [r7, #6]
 800e53e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	88fa      	ldrh	r2, [r7, #6]
 800e546:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2200      	movs	r2, #0
 800e55a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e570:	d908      	bls.n	800e584 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e580:	605a      	str	r2, [r3, #4]
 800e582:	e007      	b.n	800e594 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e592:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e59c:	d10f      	bne.n	800e5be <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e5bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c8:	2b40      	cmp	r3, #64	; 0x40
 800e5ca:	d007      	beq.n	800e5dc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e5e4:	d867      	bhi.n	800e6b6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e5e6:	e030      	b.n	800e64a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d117      	bne.n	800e626 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f103 020c 	add.w	r2, r3, #12
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e602:	7812      	ldrb	r2, [r2, #0]
 800e604:	b2d2      	uxtb	r2, r2
 800e606:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e618:	b29b      	uxth	r3, r3
 800e61a:	3b01      	subs	r3, #1
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e624:	e011      	b.n	800e64a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e626:	f7fd f9d5 	bl	800b9d4 <HAL_GetTick>
 800e62a:	4602      	mov	r2, r0
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	683a      	ldr	r2, [r7, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d803      	bhi.n	800e63e <HAL_SPI_Receive+0x19c>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63c:	d102      	bne.n	800e644 <HAL_SPI_Receive+0x1a2>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d102      	bne.n	800e64a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e644:	2303      	movs	r3, #3
 800e646:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e648:	e04e      	b.n	800e6e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1c8      	bne.n	800e5e8 <HAL_SPI_Receive+0x146>
 800e656:	e034      	b.n	800e6c2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b01      	cmp	r3, #1
 800e664:	d115      	bne.n	800e692 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68da      	ldr	r2, [r3, #12]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e670:	b292      	uxth	r2, r2
 800e672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e678:	1c9a      	adds	r2, r3, #2
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e684:	b29b      	uxth	r3, r3
 800e686:	3b01      	subs	r3, #1
 800e688:	b29a      	uxth	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e690:	e011      	b.n	800e6b6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e692:	f7fd f99f 	bl	800b9d4 <HAL_GetTick>
 800e696:	4602      	mov	r2, r0
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	1ad3      	subs	r3, r2, r3
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d803      	bhi.n	800e6aa <HAL_SPI_Receive+0x208>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a8:	d102      	bne.n	800e6b0 <HAL_SPI_Receive+0x20e>
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d102      	bne.n	800e6b6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e6b4:	e018      	b.n	800e6e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1ca      	bne.n	800e658 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6c2:	693a      	ldr	r2, [r7, #16]
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f000 fb4c 	bl	800ed64 <SPI_EndRxTransaction>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	75fb      	strb	r3, [r7, #23]
 800e6e4:	e000      	b.n	800e6e8 <HAL_SPI_Receive+0x246>
  }

error :
 800e6e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3718      	adds	r7, #24
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b08a      	sub	sp, #40	; 0x28
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
 800e70e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e710:	2301      	movs	r3, #1
 800e712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e714:	2300      	movs	r3, #0
 800e716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e720:	2b01      	cmp	r3, #1
 800e722:	d101      	bne.n	800e728 <HAL_SPI_TransmitReceive+0x26>
 800e724:	2302      	movs	r3, #2
 800e726:	e1fb      	b.n	800eb20 <HAL_SPI_TransmitReceive+0x41e>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e730:	f7fd f950 	bl	800b9d4 <HAL_GetTick>
 800e734:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e73c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e744:	887b      	ldrh	r3, [r7, #2]
 800e746:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e748:	887b      	ldrh	r3, [r7, #2]
 800e74a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e74c:	7efb      	ldrb	r3, [r7, #27]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d00e      	beq.n	800e770 <HAL_SPI_TransmitReceive+0x6e>
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e758:	d106      	bne.n	800e768 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <HAL_SPI_TransmitReceive+0x66>
 800e762:	7efb      	ldrb	r3, [r7, #27]
 800e764:	2b04      	cmp	r3, #4
 800e766:	d003      	beq.n	800e770 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e768:	2302      	movs	r3, #2
 800e76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e76e:	e1cd      	b.n	800eb0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d005      	beq.n	800e782 <HAL_SPI_TransmitReceive+0x80>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <HAL_SPI_TransmitReceive+0x80>
 800e77c:	887b      	ldrh	r3, [r7, #2]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d103      	bne.n	800e78a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e788:	e1c0      	b.n	800eb0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b04      	cmp	r3, #4
 800e794:	d003      	beq.n	800e79e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2205      	movs	r2, #5
 800e79a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	887a      	ldrh	r2, [r7, #2]
 800e7ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	887a      	ldrh	r2, [r7, #2]
 800e7b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	887a      	ldrh	r2, [r7, #2]
 800e7c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	887a      	ldrh	r2, [r7, #2]
 800e7ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e7e0:	d802      	bhi.n	800e7e8 <HAL_SPI_TransmitReceive+0xe6>
 800e7e2:	8a3b      	ldrh	r3, [r7, #16]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d908      	bls.n	800e7fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	685a      	ldr	r2, [r3, #4]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e7f6:	605a      	str	r2, [r3, #4]
 800e7f8:	e007      	b.n	800e80a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	685a      	ldr	r2, [r3, #4]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e808:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e814:	2b40      	cmp	r3, #64	; 0x40
 800e816:	d007      	beq.n	800e828 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e830:	d97c      	bls.n	800e92c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <HAL_SPI_TransmitReceive+0x13e>
 800e83a:	8a7b      	ldrh	r3, [r7, #18]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d169      	bne.n	800e914 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	881a      	ldrh	r2, [r3, #0]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e850:	1c9a      	adds	r2, r3, #2
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	3b01      	subs	r3, #1
 800e85e:	b29a      	uxth	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e864:	e056      	b.n	800e914 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	f003 0302 	and.w	r3, r3, #2
 800e870:	2b02      	cmp	r3, #2
 800e872:	d11b      	bne.n	800e8ac <HAL_SPI_TransmitReceive+0x1aa>
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e878:	b29b      	uxth	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d016      	beq.n	800e8ac <HAL_SPI_TransmitReceive+0x1aa>
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	2b01      	cmp	r3, #1
 800e882:	d113      	bne.n	800e8ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e888:	881a      	ldrh	r2, [r3, #0]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e894:	1c9a      	adds	r2, r3, #2
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d11c      	bne.n	800e8f4 <HAL_SPI_TransmitReceive+0x1f2>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d016      	beq.n	800e8f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68da      	ldr	r2, [r3, #12]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d0:	b292      	uxth	r2, r2
 800e8d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d8:	1c9a      	adds	r2, r3, #2
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e8f4:	f7fd f86e 	bl	800b9d4 <HAL_GetTick>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	1ad3      	subs	r3, r2, r3
 800e8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e900:	429a      	cmp	r2, r3
 800e902:	d807      	bhi.n	800e914 <HAL_SPI_TransmitReceive+0x212>
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90a:	d003      	beq.n	800e914 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e90c:	2303      	movs	r3, #3
 800e90e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e912:	e0fb      	b.n	800eb0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e918:	b29b      	uxth	r3, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1a3      	bne.n	800e866 <HAL_SPI_TransmitReceive+0x164>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e924:	b29b      	uxth	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	d19d      	bne.n	800e866 <HAL_SPI_TransmitReceive+0x164>
 800e92a:	e0df      	b.n	800eaec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d003      	beq.n	800e93c <HAL_SPI_TransmitReceive+0x23a>
 800e934:	8a7b      	ldrh	r3, [r7, #18]
 800e936:	2b01      	cmp	r3, #1
 800e938:	f040 80cb 	bne.w	800ead2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e940:	b29b      	uxth	r3, r3
 800e942:	2b01      	cmp	r3, #1
 800e944:	d912      	bls.n	800e96c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94a:	881a      	ldrh	r2, [r3, #0]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e956:	1c9a      	adds	r2, r3, #2
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e960:	b29b      	uxth	r3, r3
 800e962:	3b02      	subs	r3, #2
 800e964:	b29a      	uxth	r2, r3
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e96a:	e0b2      	b.n	800ead2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	330c      	adds	r3, #12
 800e976:	7812      	ldrb	r2, [r2, #0]
 800e978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e988:	b29b      	uxth	r3, r3
 800e98a:	3b01      	subs	r3, #1
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e992:	e09e      	b.n	800ead2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d134      	bne.n	800ea0c <HAL_SPI_TransmitReceive+0x30a>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d02f      	beq.n	800ea0c <HAL_SPI_TransmitReceive+0x30a>
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d12c      	bne.n	800ea0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d912      	bls.n	800e9e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c0:	881a      	ldrh	r2, [r3, #0]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9cc:	1c9a      	adds	r2, r3, #2
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3b02      	subs	r3, #2
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9e0:	e012      	b.n	800ea08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	330c      	adds	r3, #12
 800e9ec:	7812      	ldrb	r2, [r2, #0]
 800e9ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	3b01      	subs	r3, #1
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d148      	bne.n	800eaac <HAL_SPI_TransmitReceive+0x3aa>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d042      	beq.n	800eaac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d923      	bls.n	800ea7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68da      	ldr	r2, [r3, #12]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3c:	b292      	uxth	r2, r2
 800ea3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea44:	1c9a      	adds	r2, r3, #2
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	3b02      	subs	r3, #2
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d81f      	bhi.n	800eaa8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea76:	605a      	str	r2, [r3, #4]
 800ea78:	e016      	b.n	800eaa8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f103 020c 	add.w	r2, r3, #12
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea86:	7812      	ldrb	r2, [r2, #0]
 800ea88:	b2d2      	uxtb	r2, r2
 800ea8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea90:	1c5a      	adds	r2, r3, #1
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eaac:	f7fc ff92 	bl	800b9d4 <HAL_GetTick>
 800eab0:	4602      	mov	r2, r0
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d803      	bhi.n	800eac4 <HAL_SPI_TransmitReceive+0x3c2>
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac2:	d102      	bne.n	800eaca <HAL_SPI_TransmitReceive+0x3c8>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d103      	bne.n	800ead2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800eaca:	2303      	movs	r3, #3
 800eacc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ead0:	e01c      	b.n	800eb0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f47f af5b 	bne.w	800e994 <HAL_SPI_TransmitReceive+0x292>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f47f af54 	bne.w	800e994 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 f98f 	bl	800ee14 <SPI_EndRxTxTransaction>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d006      	beq.n	800eb0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2220      	movs	r2, #32
 800eb06:	661a      	str	r2, [r3, #96]	; 0x60
 800eb08:	e000      	b.n	800eb0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800eb0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800eb1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3728      	adds	r7, #40	; 0x28
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b088      	sub	sp, #32
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	603b      	str	r3, [r7, #0]
 800eb34:	4613      	mov	r3, r2
 800eb36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eb38:	f7fc ff4c 	bl	800b9d4 <HAL_GetTick>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	1a9b      	subs	r3, r3, r2
 800eb42:	683a      	ldr	r2, [r7, #0]
 800eb44:	4413      	add	r3, r2
 800eb46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eb48:	f7fc ff44 	bl	800b9d4 <HAL_GetTick>
 800eb4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eb4e:	4b39      	ldr	r3, [pc, #228]	; (800ec34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	015b      	lsls	r3, r3, #5
 800eb54:	0d1b      	lsrs	r3, r3, #20
 800eb56:	69fa      	ldr	r2, [r7, #28]
 800eb58:	fb02 f303 	mul.w	r3, r2, r3
 800eb5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb5e:	e054      	b.n	800ec0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d050      	beq.n	800ec0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb68:	f7fc ff34 	bl	800b9d4 <HAL_GetTick>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d902      	bls.n	800eb7e <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d13d      	bne.n	800ebfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eb8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb96:	d111      	bne.n	800ebbc <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eba0:	d004      	beq.n	800ebac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebaa:	d107      	bne.n	800ebbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebc4:	d10f      	bne.n	800ebe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ebd4:	601a      	str	r2, [r3, #0]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	e017      	b.n	800ec2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	3b01      	subs	r3, #1
 800ec08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4013      	ands	r3, r2
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	bf0c      	ite	eq
 800ec1a:	2301      	moveq	r3, #1
 800ec1c:	2300      	movne	r3, #0
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	461a      	mov	r2, r3
 800ec22:	79fb      	ldrb	r3, [r7, #7]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d19b      	bne.n	800eb60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3720      	adds	r7, #32
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	20000014 	.word	0x20000014

0800ec38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b08a      	sub	sp, #40	; 0x28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ec46:	2300      	movs	r3, #0
 800ec48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ec4a:	f7fc fec3 	bl	800b9d4 <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	4413      	add	r3, r2
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ec5a:	f7fc febb 	bl	800b9d4 <HAL_GetTick>
 800ec5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	330c      	adds	r3, #12
 800ec66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ec68:	4b3d      	ldr	r3, [pc, #244]	; (800ed60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4413      	add	r3, r2
 800ec72:	00da      	lsls	r2, r3, #3
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	0d1b      	lsrs	r3, r3, #20
 800ec78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7a:	fb02 f303 	mul.w	r3, r2, r3
 800ec7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ec80:	e060      	b.n	800ed44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ec88:	d107      	bne.n	800ec9a <SPI_WaitFifoStateUntilTimeout+0x62>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d104      	bne.n	800ec9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ec98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca0:	d050      	beq.n	800ed44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eca2:	f7fc fe97 	bl	800b9d4 <HAL_GetTick>
 800eca6:	4602      	mov	r2, r0
 800eca8:	6a3b      	ldr	r3, [r7, #32]
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d902      	bls.n	800ecb8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d13d      	bne.n	800ed34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ecc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecd0:	d111      	bne.n	800ecf6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecda:	d004      	beq.n	800ece6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ece4:	d107      	bne.n	800ecf6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecf4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecfe:	d10f      	bne.n	800ed20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ed30:	2303      	movs	r3, #3
 800ed32:	e010      	b.n	800ed56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d101      	bne.n	800ed3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	3b01      	subs	r3, #1
 800ed42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689a      	ldr	r2, [r3, #8]
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	4013      	ands	r3, r2
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d196      	bne.n	800ec82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3728      	adds	r7, #40	; 0x28
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	20000014 	.word	0x20000014

0800ed64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af02      	add	r7, sp, #8
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed78:	d111      	bne.n	800ed9e <SPI_EndRxTransaction+0x3a>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed82:	d004      	beq.n	800ed8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed8c:	d107      	bne.n	800ed9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed9c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2200      	movs	r2, #0
 800eda6:	2180      	movs	r1, #128	; 0x80
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff febd 	bl	800eb28 <SPI_WaitFlagStateUntilTimeout>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d007      	beq.n	800edc4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edb8:	f043 0220 	orr.w	r2, r3, #32
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	e023      	b.n	800ee0c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edcc:	d11d      	bne.n	800ee0a <SPI_EndRxTransaction+0xa6>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edd6:	d004      	beq.n	800ede2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ede0:	d113      	bne.n	800ee0a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	2200      	movs	r2, #0
 800edea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f7ff ff22 	bl	800ec38 <SPI_WaitFifoStateUntilTimeout>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d007      	beq.n	800ee0a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edfe:	f043 0220 	orr.w	r2, r3, #32
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e000      	b.n	800ee0c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af02      	add	r7, sp, #8
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	9300      	str	r3, [sp, #0]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff ff03 	bl	800ec38 <SPI_WaitFifoStateUntilTimeout>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d007      	beq.n	800ee48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee3c:	f043 0220 	orr.w	r2, r3, #32
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e027      	b.n	800ee98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2180      	movs	r1, #128	; 0x80
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7ff fe68 	bl	800eb28 <SPI_WaitFlagStateUntilTimeout>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d007      	beq.n	800ee6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee62:	f043 0220 	orr.w	r2, r3, #32
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	e014      	b.n	800ee98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f7ff fedc 	bl	800ec38 <SPI_WaitFifoStateUntilTimeout>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d007      	beq.n	800ee96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee8a:	f043 0220 	orr.w	r2, r3, #32
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee92:	2303      	movs	r3, #3
 800ee94:	e000      	b.n	800ee98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e049      	b.n	800ef46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d106      	bne.n	800eecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7f4 f926 	bl	8003118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2202      	movs	r2, #2
 800eed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3304      	adds	r3, #4
 800eedc:	4619      	mov	r1, r3
 800eede:	4610      	mov	r0, r2
 800eee0:	f000 fae6 	bl	800f4b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
	...

0800ef50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d001      	beq.n	800ef68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef64:	2301      	movs	r3, #1
 800ef66:	e033      	b.n	800efd0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a19      	ldr	r2, [pc, #100]	; (800efdc <HAL_TIM_Base_Start+0x8c>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d009      	beq.n	800ef8e <HAL_TIM_Base_Start+0x3e>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef82:	d004      	beq.n	800ef8e <HAL_TIM_Base_Start+0x3e>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a15      	ldr	r2, [pc, #84]	; (800efe0 <HAL_TIM_Base_Start+0x90>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d115      	bne.n	800efba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	689a      	ldr	r2, [r3, #8]
 800ef94:	4b13      	ldr	r3, [pc, #76]	; (800efe4 <HAL_TIM_Base_Start+0x94>)
 800ef96:	4013      	ands	r3, r2
 800ef98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2b06      	cmp	r3, #6
 800ef9e:	d015      	beq.n	800efcc <HAL_TIM_Base_Start+0x7c>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efa6:	d011      	beq.n	800efcc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f042 0201 	orr.w	r2, r2, #1
 800efb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efb8:	e008      	b.n	800efcc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f042 0201 	orr.w	r2, r2, #1
 800efc8:	601a      	str	r2, [r3, #0]
 800efca:	e000      	b.n	800efce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3714      	adds	r7, #20
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr
 800efdc:	40012c00 	.word	0x40012c00
 800efe0:	40014000 	.word	0x40014000
 800efe4:	00010007 	.word	0x00010007

0800efe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d001      	beq.n	800f000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800effc:	2301      	movs	r3, #1
 800effe:	e03b      	b.n	800f078 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2202      	movs	r2, #2
 800f004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68da      	ldr	r2, [r3, #12]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f042 0201 	orr.w	r2, r2, #1
 800f016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a19      	ldr	r2, [pc, #100]	; (800f084 <HAL_TIM_Base_Start_IT+0x9c>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d009      	beq.n	800f036 <HAL_TIM_Base_Start_IT+0x4e>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f02a:	d004      	beq.n	800f036 <HAL_TIM_Base_Start_IT+0x4e>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a15      	ldr	r2, [pc, #84]	; (800f088 <HAL_TIM_Base_Start_IT+0xa0>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d115      	bne.n	800f062 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	689a      	ldr	r2, [r3, #8]
 800f03c:	4b13      	ldr	r3, [pc, #76]	; (800f08c <HAL_TIM_Base_Start_IT+0xa4>)
 800f03e:	4013      	ands	r3, r2
 800f040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b06      	cmp	r3, #6
 800f046:	d015      	beq.n	800f074 <HAL_TIM_Base_Start_IT+0x8c>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f04e:	d011      	beq.n	800f074 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f042 0201 	orr.w	r2, r2, #1
 800f05e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f060:	e008      	b.n	800f074 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f042 0201 	orr.w	r2, r2, #1
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	e000      	b.n	800f076 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f074:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3714      	adds	r7, #20
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	40012c00 	.word	0x40012c00
 800f088:	40014000 	.word	0x40014000
 800f08c:	00010007 	.word	0x00010007

0800f090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	f003 0302 	and.w	r3, r3, #2
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d122      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	f003 0302 	and.w	r3, r3, #2
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d11b      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f06f 0202 	mvn.w	r2, #2
 800f0bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	f003 0303 	and.w	r3, r3, #3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f9ce 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f0d8:	e005      	b.n	800f0e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 f9c0 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f9d1 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	f003 0304 	and.w	r3, r3, #4
 800f0f6:	2b04      	cmp	r3, #4
 800f0f8:	d122      	bne.n	800f140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	f003 0304 	and.w	r3, r3, #4
 800f104:	2b04      	cmp	r3, #4
 800f106:	d11b      	bne.n	800f140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f06f 0204 	mvn.w	r2, #4
 800f110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2202      	movs	r2, #2
 800f116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	699b      	ldr	r3, [r3, #24]
 800f11e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f122:	2b00      	cmp	r3, #0
 800f124:	d003      	beq.n	800f12e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f9a4 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f12c:	e005      	b.n	800f13a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 f996 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 f9a7 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	691b      	ldr	r3, [r3, #16]
 800f146:	f003 0308 	and.w	r3, r3, #8
 800f14a:	2b08      	cmp	r3, #8
 800f14c:	d122      	bne.n	800f194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	f003 0308 	and.w	r3, r3, #8
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d11b      	bne.n	800f194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f06f 0208 	mvn.w	r2, #8
 800f164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2204      	movs	r2, #4
 800f16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	f003 0303 	and.w	r3, r3, #3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f97a 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f180:	e005      	b.n	800f18e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f96c 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 f97d 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	f003 0310 	and.w	r3, r3, #16
 800f19e:	2b10      	cmp	r3, #16
 800f1a0:	d122      	bne.n	800f1e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	f003 0310 	and.w	r3, r3, #16
 800f1ac:	2b10      	cmp	r3, #16
 800f1ae:	d11b      	bne.n	800f1e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f06f 0210 	mvn.w	r2, #16
 800f1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2208      	movs	r2, #8
 800f1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	69db      	ldr	r3, [r3, #28]
 800f1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f950 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f1d4:	e005      	b.n	800f1e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 f942 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f953 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	f003 0301 	and.w	r3, r3, #1
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d10e      	bne.n	800f214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b01      	cmp	r3, #1
 800f202:	d107      	bne.n	800f214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f06f 0201 	mvn.w	r2, #1
 800f20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7f3 f820 	bl	8002254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	691b      	ldr	r3, [r3, #16]
 800f21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f21e:	2b80      	cmp	r3, #128	; 0x80
 800f220:	d10e      	bne.n	800f240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f22c:	2b80      	cmp	r3, #128	; 0x80
 800f22e:	d107      	bne.n	800f240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 faa6 	bl	800f78c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f24e:	d10e      	bne.n	800f26e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f25a:	2b80      	cmp	r3, #128	; 0x80
 800f25c:	d107      	bne.n	800f26e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fa99 	bl	800f7a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f278:	2b40      	cmp	r3, #64	; 0x40
 800f27a:	d10e      	bne.n	800f29a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f286:	2b40      	cmp	r3, #64	; 0x40
 800f288:	d107      	bne.n	800f29a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 f901 	bl	800f49c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	691b      	ldr	r3, [r3, #16]
 800f2a0:	f003 0320 	and.w	r3, r3, #32
 800f2a4:	2b20      	cmp	r3, #32
 800f2a6:	d10e      	bne.n	800f2c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	f003 0320 	and.w	r3, r3, #32
 800f2b2:	2b20      	cmp	r3, #32
 800f2b4:	d107      	bne.n	800f2c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f06f 0220 	mvn.w	r2, #32
 800f2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fa59 	bl	800f778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2c6:	bf00      	nop
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b084      	sub	sp, #16
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d101      	bne.n	800f2ea <HAL_TIM_ConfigClockSource+0x1c>
 800f2e6:	2302      	movs	r3, #2
 800f2e8:	e0b6      	b.n	800f458 <HAL_TIM_ConfigClockSource+0x18a>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2202      	movs	r2, #2
 800f2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f308:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f30c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f314:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f326:	d03e      	beq.n	800f3a6 <HAL_TIM_ConfigClockSource+0xd8>
 800f328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f32c:	f200 8087 	bhi.w	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f334:	f000 8086 	beq.w	800f444 <HAL_TIM_ConfigClockSource+0x176>
 800f338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f33c:	d87f      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f33e:	2b70      	cmp	r3, #112	; 0x70
 800f340:	d01a      	beq.n	800f378 <HAL_TIM_ConfigClockSource+0xaa>
 800f342:	2b70      	cmp	r3, #112	; 0x70
 800f344:	d87b      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f346:	2b60      	cmp	r3, #96	; 0x60
 800f348:	d050      	beq.n	800f3ec <HAL_TIM_ConfigClockSource+0x11e>
 800f34a:	2b60      	cmp	r3, #96	; 0x60
 800f34c:	d877      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f34e:	2b50      	cmp	r3, #80	; 0x50
 800f350:	d03c      	beq.n	800f3cc <HAL_TIM_ConfigClockSource+0xfe>
 800f352:	2b50      	cmp	r3, #80	; 0x50
 800f354:	d873      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f356:	2b40      	cmp	r3, #64	; 0x40
 800f358:	d058      	beq.n	800f40c <HAL_TIM_ConfigClockSource+0x13e>
 800f35a:	2b40      	cmp	r3, #64	; 0x40
 800f35c:	d86f      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f35e:	2b30      	cmp	r3, #48	; 0x30
 800f360:	d064      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x15e>
 800f362:	2b30      	cmp	r3, #48	; 0x30
 800f364:	d86b      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f366:	2b20      	cmp	r3, #32
 800f368:	d060      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x15e>
 800f36a:	2b20      	cmp	r3, #32
 800f36c:	d867      	bhi.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d05c      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x15e>
 800f372:	2b10      	cmp	r3, #16
 800f374:	d05a      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x15e>
 800f376:	e062      	b.n	800f43e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	6899      	ldr	r1, [r3, #8]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f000 f970 	bl	800f66c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f39a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	609a      	str	r2, [r3, #8]
      break;
 800f3a4:	e04f      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6899      	ldr	r1, [r3, #8]
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	f000 f959 	bl	800f66c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	689a      	ldr	r2, [r3, #8]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f3c8:	609a      	str	r2, [r3, #8]
      break;
 800f3ca:	e03c      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6818      	ldr	r0, [r3, #0]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6859      	ldr	r1, [r3, #4]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	f000 f8cd 	bl	800f578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2150      	movs	r1, #80	; 0x50
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f000 f926 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f3ea:	e02c      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6818      	ldr	r0, [r3, #0]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	6859      	ldr	r1, [r3, #4]
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	f000 f8ec 	bl	800f5d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2160      	movs	r1, #96	; 0x60
 800f404:	4618      	mov	r0, r3
 800f406:	f000 f916 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f40a:	e01c      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6818      	ldr	r0, [r3, #0]
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	6859      	ldr	r1, [r3, #4]
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	461a      	mov	r2, r3
 800f41a:	f000 f8ad 	bl	800f578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2140      	movs	r1, #64	; 0x40
 800f424:	4618      	mov	r0, r3
 800f426:	f000 f906 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f42a:	e00c      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f000 f8fd 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f43c:	e003      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	73fb      	strb	r3, [r7, #15]
      break;
 800f442:	e000      	b.n	800f446 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f444:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f456:	7bfb      	ldrb	r3, [r7, #15]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f47c:	bf00      	nop
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f490:	bf00      	nop
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a2a      	ldr	r2, [pc, #168]	; (800f56c <TIM_Base_SetConfig+0xbc>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d003      	beq.n	800f4d0 <TIM_Base_SetConfig+0x20>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4ce:	d108      	bne.n	800f4e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	68fa      	ldr	r2, [r7, #12]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a21      	ldr	r2, [pc, #132]	; (800f56c <TIM_Base_SetConfig+0xbc>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d00b      	beq.n	800f502 <TIM_Base_SetConfig+0x52>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4f0:	d007      	beq.n	800f502 <TIM_Base_SetConfig+0x52>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a1e      	ldr	r2, [pc, #120]	; (800f570 <TIM_Base_SetConfig+0xc0>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d003      	beq.n	800f502 <TIM_Base_SetConfig+0x52>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a1d      	ldr	r2, [pc, #116]	; (800f574 <TIM_Base_SetConfig+0xc4>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d108      	bne.n	800f514 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	4313      	orrs	r3, r2
 800f512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	4313      	orrs	r3, r2
 800f520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	689a      	ldr	r2, [r3, #8]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a0c      	ldr	r2, [pc, #48]	; (800f56c <TIM_Base_SetConfig+0xbc>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d007      	beq.n	800f550 <TIM_Base_SetConfig+0xa0>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a0b      	ldr	r2, [pc, #44]	; (800f570 <TIM_Base_SetConfig+0xc0>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d003      	beq.n	800f550 <TIM_Base_SetConfig+0xa0>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a0a      	ldr	r2, [pc, #40]	; (800f574 <TIM_Base_SetConfig+0xc4>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d103      	bne.n	800f558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	691a      	ldr	r2, [r3, #16]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	615a      	str	r2, [r3, #20]
}
 800f55e:	bf00      	nop
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	40012c00 	.word	0x40012c00
 800f570:	40014000 	.word	0x40014000
 800f574:	40014400 	.word	0x40014400

0800f578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f578:	b480      	push	{r7}
 800f57a:	b087      	sub	sp, #28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6a1b      	ldr	r3, [r3, #32]
 800f588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	f023 0201 	bic.w	r2, r3, #1
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	011b      	lsls	r3, r3, #4
 800f5a8:	693a      	ldr	r2, [r7, #16]
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	f023 030a 	bic.w	r3, r3, #10
 800f5b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	693a      	ldr	r2, [r7, #16]
 800f5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	621a      	str	r2, [r3, #32]
}
 800f5ca:	bf00      	nop
 800f5cc:	371c      	adds	r7, #28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b087      	sub	sp, #28
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	60b9      	str	r1, [r7, #8]
 800f5e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	f023 0210 	bic.w	r2, r3, #16
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	031b      	lsls	r3, r3, #12
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	4313      	orrs	r3, r2
 800f60a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	011b      	lsls	r3, r3, #4
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	4313      	orrs	r3, r2
 800f61c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	697a      	ldr	r2, [r7, #20]
 800f622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	621a      	str	r2, [r3, #32]
}
 800f62a:	bf00      	nop
 800f62c:	371c      	adds	r7, #28
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f636:	b480      	push	{r7}
 800f638:	b085      	sub	sp, #20
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
 800f63e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f64e:	683a      	ldr	r2, [r7, #0]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	4313      	orrs	r3, r2
 800f654:	f043 0307 	orr.w	r3, r3, #7
 800f658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	609a      	str	r2, [r3, #8]
}
 800f660:	bf00      	nop
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]
 800f678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	021a      	lsls	r2, r3, #8
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	431a      	orrs	r2, r3
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	4313      	orrs	r3, r2
 800f694:	697a      	ldr	r2, [r7, #20]
 800f696:	4313      	orrs	r3, r2
 800f698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	697a      	ldr	r2, [r7, #20]
 800f69e:	609a      	str	r2, [r3, #8]
}
 800f6a0:	bf00      	nop
 800f6a2:	371c      	adds	r7, #28
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d101      	bne.n	800f6c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f6c0:	2302      	movs	r3, #2
 800f6c2:	e04f      	b.n	800f764 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2202      	movs	r2, #2
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a21      	ldr	r2, [pc, #132]	; (800f770 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d108      	bne.n	800f700 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f6f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	4313      	orrs	r3, r2
 800f710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a14      	ldr	r2, [pc, #80]	; (800f770 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d009      	beq.n	800f738 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f72c:	d004      	beq.n	800f738 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	4a10      	ldr	r2, [pc, #64]	; (800f774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d10c      	bne.n	800f752 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f73e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	4313      	orrs	r3, r2
 800f748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2201      	movs	r2, #1
 800f756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f762:	2300      	movs	r3, #0
}
 800f764:	4618      	mov	r0, r3
 800f766:	3714      	adds	r7, #20
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr
 800f770:	40012c00 	.word	0x40012c00
 800f774:	40014000 	.word	0x40014000

0800f778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f794:	bf00      	nop
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f7a8:	bf00      	nop
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d101      	bne.n	800f7c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e040      	b.n	800f848 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d106      	bne.n	800f7dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f7f3 fb2a 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2224      	movs	r2, #36	; 0x24
 800f7e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f022 0201 	bic.w	r2, r2, #1
 800f7f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 fbe8 	bl	800ffc8 <UART_SetConfig>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d101      	bne.n	800f802 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	e022      	b.n	800f848 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f806:	2b00      	cmp	r3, #0
 800f808:	d002      	beq.n	800f810 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 fe36 	bl	801047c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f81e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	689a      	ldr	r2, [r3, #8]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f82e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f042 0201 	orr.w	r2, r2, #1
 800f83e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 febd 	bl	80105c0 <UART_CheckIdleState>
 800f846:	4603      	mov	r3, r0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f850:	b480      	push	{r7}
 800f852:	b08b      	sub	sp, #44	; 0x2c
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	4613      	mov	r3, r2
 800f85c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f862:	2b20      	cmp	r3, #32
 800f864:	d156      	bne.n	800f914 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <HAL_UART_Transmit_IT+0x22>
 800f86c:	88fb      	ldrh	r3, [r7, #6]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d101      	bne.n	800f876 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800f872:	2301      	movs	r3, #1
 800f874:	e04f      	b.n	800f916 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d101      	bne.n	800f884 <HAL_UART_Transmit_IT+0x34>
 800f880:	2302      	movs	r3, #2
 800f882:	e048      	b.n	800f916 <HAL_UART_Transmit_IT+0xc6>
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	88fa      	ldrh	r2, [r7, #6]
 800f896:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	88fa      	ldrh	r2, [r7, #6]
 800f89e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2221      	movs	r2, #33	; 0x21
 800f8b4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	689b      	ldr	r3, [r3, #8]
 800f8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8be:	d107      	bne.n	800f8d0 <HAL_UART_Transmit_IT+0x80>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d103      	bne.n	800f8d0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	4a16      	ldr	r2, [pc, #88]	; (800f924 <HAL_UART_Transmit_IT+0xd4>)
 800f8cc:	669a      	str	r2, [r3, #104]	; 0x68
 800f8ce:	e002      	b.n	800f8d6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	4a15      	ldr	r2, [pc, #84]	; (800f928 <HAL_UART_Transmit_IT+0xd8>)
 800f8d4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	e853 3f00 	ldrex	r3, [r3]
 800f8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fc:	623b      	str	r3, [r7, #32]
 800f8fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f900:	69f9      	ldr	r1, [r7, #28]
 800f902:	6a3a      	ldr	r2, [r7, #32]
 800f904:	e841 2300 	strex	r3, r2, [r1]
 800f908:	61bb      	str	r3, [r7, #24]
   return(result);
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1e6      	bne.n	800f8de <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	e000      	b.n	800f916 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800f914:	2302      	movs	r3, #2
  }
}
 800f916:	4618      	mov	r0, r3
 800f918:	372c      	adds	r7, #44	; 0x2c
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	08010b1b 	.word	0x08010b1b
 800f928:	08010a63 	.word	0x08010a63

0800f92c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08a      	sub	sp, #40	; 0x28
 800f930:	af00      	add	r7, sp, #0
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	4613      	mov	r3, r2
 800f938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f93e:	2b20      	cmp	r3, #32
 800f940:	d142      	bne.n	800f9c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <HAL_UART_Receive_IT+0x22>
 800f948:	88fb      	ldrh	r3, [r7, #6]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	e03b      	b.n	800f9ca <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d101      	bne.n	800f960 <HAL_UART_Receive_IT+0x34>
 800f95c:	2302      	movs	r3, #2
 800f95e:	e034      	b.n	800f9ca <HAL_UART_Receive_IT+0x9e>
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2200      	movs	r2, #0
 800f96c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4a18      	ldr	r2, [pc, #96]	; (800f9d4 <HAL_UART_Receive_IT+0xa8>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d01f      	beq.n	800f9b8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f982:	2b00      	cmp	r3, #0
 800f984:	d018      	beq.n	800f9b8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	e853 3f00 	ldrex	r3, [r3]
 800f992:	613b      	str	r3, [r7, #16]
   return(result);
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f99a:	627b      	str	r3, [r7, #36]	; 0x24
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a4:	623b      	str	r3, [r7, #32]
 800f9a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a8:	69f9      	ldr	r1, [r7, #28]
 800f9aa:	6a3a      	ldr	r2, [r7, #32]
 800f9ac:	e841 2300 	strex	r3, r2, [r1]
 800f9b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1e6      	bne.n	800f986 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f9b8:	88fb      	ldrh	r3, [r7, #6]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	68b9      	ldr	r1, [r7, #8]
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f000 ff0c 	bl	80107dc <UART_Start_Receive_IT>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	e000      	b.n	800f9ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800f9c8:	2302      	movs	r3, #2
  }
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3728      	adds	r7, #40	; 0x28
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	40008000 	.word	0x40008000

0800f9d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b0ba      	sub	sp, #232	; 0xe8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	69db      	ldr	r3, [r3, #28]
 800f9e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f9fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fa02:	f640 030f 	movw	r3, #2063	; 0x80f
 800fa06:	4013      	ands	r3, r2
 800fa08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fa0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d115      	bne.n	800fa40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fa14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa18:	f003 0320 	and.w	r3, r3, #32
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00f      	beq.n	800fa40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fa20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa24:	f003 0320 	and.w	r3, r3, #32
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d009      	beq.n	800fa40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 82a6 	beq.w	800ff82 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	4798      	blx	r3
      }
      return;
 800fa3e:	e2a0      	b.n	800ff82 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800fa40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f000 8117 	beq.w	800fc78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fa4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa4e:	f003 0301 	and.w	r3, r3, #1
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d106      	bne.n	800fa64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fa56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fa5a:	4b85      	ldr	r3, [pc, #532]	; (800fc70 <HAL_UART_IRQHandler+0x298>)
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f000 810a 	beq.w	800fc78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa68:	f003 0301 	and.w	r3, r3, #1
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d011      	beq.n	800fa94 <HAL_UART_IRQHandler+0xbc>
 800fa70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00b      	beq.n	800fa94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2201      	movs	r2, #1
 800fa82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa8a:	f043 0201 	orr.w	r2, r3, #1
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa98:	f003 0302 	and.w	r3, r3, #2
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d011      	beq.n	800fac4 <HAL_UART_IRQHandler+0xec>
 800faa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800faa4:	f003 0301 	and.w	r3, r3, #1
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00b      	beq.n	800fac4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2202      	movs	r2, #2
 800fab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faba:	f043 0204 	orr.w	r2, r3, #4
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fac8:	f003 0304 	and.w	r3, r3, #4
 800facc:	2b00      	cmp	r3, #0
 800face:	d011      	beq.n	800faf4 <HAL_UART_IRQHandler+0x11c>
 800fad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fad4:	f003 0301 	and.w	r3, r3, #1
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00b      	beq.n	800faf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2204      	movs	r2, #4
 800fae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faea:	f043 0202 	orr.w	r2, r3, #2
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800faf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faf8:	f003 0308 	and.w	r3, r3, #8
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d017      	beq.n	800fb30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb04:	f003 0320 	and.w	r3, r3, #32
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d105      	bne.n	800fb18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fb0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fb10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00b      	beq.n	800fb30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2208      	movs	r2, #8
 800fb1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb26:	f043 0208 	orr.w	r2, r3, #8
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fb30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d012      	beq.n	800fb62 <HAL_UART_IRQHandler+0x18a>
 800fb3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00c      	beq.n	800fb62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb58:	f043 0220 	orr.w	r2, r3, #32
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f000 820c 	beq.w	800ff86 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fb6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb72:	f003 0320 	and.w	r3, r3, #32
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00d      	beq.n	800fb96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fb7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb7e:	f003 0320 	and.w	r3, r3, #32
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d007      	beq.n	800fb96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbaa:	2b40      	cmp	r3, #64	; 0x40
 800fbac:	d005      	beq.n	800fbba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fbae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fbb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d04f      	beq.n	800fc5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 fed8 	bl	8010970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	689b      	ldr	r3, [r3, #8]
 800fbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbca:	2b40      	cmp	r3, #64	; 0x40
 800fbcc:	d141      	bne.n	800fc52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fbdc:	e853 3f00 	ldrex	r3, [r3]
 800fbe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fbe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fbe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	3308      	adds	r3, #8
 800fbf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fbfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fbfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fc06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fc0a:	e841 2300 	strex	r3, r2, [r1]
 800fc0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fc12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1d9      	bne.n	800fbce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d013      	beq.n	800fc4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc26:	4a13      	ldr	r2, [pc, #76]	; (800fc74 <HAL_UART_IRQHandler+0x29c>)
 800fc28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7fc f84f 	bl	800bcd2 <HAL_DMA_Abort_IT>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d017      	beq.n	800fc6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800fc44:	4610      	mov	r0, r2
 800fc46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc48:	e00f      	b.n	800fc6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f9a6 	bl	800ff9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc50:	e00b      	b.n	800fc6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f9a2 	bl	800ff9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc58:	e007      	b.n	800fc6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 f99e 	bl	800ff9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800fc68:	e18d      	b.n	800ff86 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc6a:	bf00      	nop
    return;
 800fc6c:	e18b      	b.n	800ff86 <HAL_UART_IRQHandler+0x5ae>
 800fc6e:	bf00      	nop
 800fc70:	04000120 	.word	0x04000120
 800fc74:	08010a37 	.word	0x08010a37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	f040 8146 	bne.w	800ff0e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fc82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc86:	f003 0310 	and.w	r3, r3, #16
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f000 813f 	beq.w	800ff0e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc94:	f003 0310 	and.w	r3, r3, #16
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	f000 8138 	beq.w	800ff0e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2210      	movs	r2, #16
 800fca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcb0:	2b40      	cmp	r3, #64	; 0x40
 800fcb2:	f040 80b4 	bne.w	800fe1e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fcc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 815f 	beq.w	800ff8a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fcd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f080 8157 	bcs.w	800ff8a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fce2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f003 0320 	and.w	r3, r3, #32
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	f040 8085 	bne.w	800fe02 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd04:	e853 3f00 	ldrex	r3, [r3]
 800fd08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fd0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fd22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fd26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fd2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fd32:	e841 2300 	strex	r3, r2, [r1]
 800fd36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fd3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1da      	bne.n	800fcf8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3308      	adds	r3, #8
 800fd48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd4c:	e853 3f00 	ldrex	r3, [r3]
 800fd50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fd52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd54:	f023 0301 	bic.w	r3, r3, #1
 800fd58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3308      	adds	r3, #8
 800fd62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fd66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fd6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fd6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fd72:	e841 2300 	strex	r3, r2, [r1]
 800fd76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fd78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1e1      	bne.n	800fd42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3308      	adds	r3, #8
 800fd84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd88:	e853 3f00 	ldrex	r3, [r3]
 800fd8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fda2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fda4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fda8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fdaa:	e841 2300 	strex	r3, r2, [r1]
 800fdae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fdb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1e3      	bne.n	800fd7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2220      	movs	r2, #32
 800fdba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdca:	e853 3f00 	ldrex	r3, [r3]
 800fdce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fdd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdd2:	f023 0310 	bic.w	r3, r3, #16
 800fdd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	461a      	mov	r2, r3
 800fde0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fde4:	65bb      	str	r3, [r7, #88]	; 0x58
 800fde6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fdea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fdec:	e841 2300 	strex	r3, r2, [r1]
 800fdf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fdf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1e4      	bne.n	800fdc2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fb ff2a 	bl	800bc56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4619      	mov	r1, r3
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f8ca 	bl	800ffb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe1c:	e0b5      	b.n	800ff8a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	f000 80a7 	beq.w	800ff8e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800fe40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f000 80a2 	beq.w	800ff8e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	e853 3f00 	ldrex	r3, [r3]
 800fe56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe6c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe74:	e841 2300 	strex	r3, r2, [r1]
 800fe78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d1e4      	bne.n	800fe4a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	3308      	adds	r3, #8
 800fe86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8a:	e853 3f00 	ldrex	r3, [r3]
 800fe8e:	623b      	str	r3, [r7, #32]
   return(result);
 800fe90:	6a3b      	ldr	r3, [r7, #32]
 800fe92:	f023 0301 	bic.w	r3, r3, #1
 800fe96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	3308      	adds	r3, #8
 800fea0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fea4:	633a      	str	r2, [r7, #48]	; 0x30
 800fea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800feaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feac:	e841 2300 	strex	r3, r2, [r1]
 800feb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800feb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d1e3      	bne.n	800fe80 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2220      	movs	r2, #32
 800febc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	e853 3f00 	ldrex	r3, [r3]
 800fed6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f023 0310 	bic.w	r3, r3, #16
 800fede:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	461a      	mov	r2, r3
 800fee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800feec:	61fb      	str	r3, [r7, #28]
 800feee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef0:	69b9      	ldr	r1, [r7, #24]
 800fef2:	69fa      	ldr	r2, [r7, #28]
 800fef4:	e841 2300 	strex	r3, r2, [r1]
 800fef8:	617b      	str	r3, [r7, #20]
   return(result);
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1e4      	bne.n	800feca <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ff00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f852 	bl	800ffb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ff0c:	e03f      	b.n	800ff8e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ff0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00e      	beq.n	800ff38 <HAL_UART_IRQHandler+0x560>
 800ff1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d008      	beq.n	800ff38 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ff2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 ffdc 	bl	8010eee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff36:	e02d      	b.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ff38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d00e      	beq.n	800ff62 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ff44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d008      	beq.n	800ff62 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d01c      	beq.n	800ff92 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	4798      	blx	r3
    }
    return;
 800ff60:	e017      	b.n	800ff92 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ff62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d012      	beq.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
 800ff6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00c      	beq.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 fe2d 	bl	8010bda <UART_EndTransmit_IT>
    return;
 800ff80:	e008      	b.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ff82:	bf00      	nop
 800ff84:	e006      	b.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
    return;
 800ff86:	bf00      	nop
 800ff88:	e004      	b.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ff8a:	bf00      	nop
 800ff8c:	e002      	b.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ff8e:	bf00      	nop
 800ff90:	e000      	b.n	800ff94 <HAL_UART_IRQHandler+0x5bc>
    return;
 800ff92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ff94:	37e8      	adds	r7, #232	; 0xe8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop

0800ff9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ffa4:	bf00      	nop
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ffbc:	bf00      	nop
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffcc:	b08a      	sub	sp, #40	; 0x28
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	689a      	ldr	r2, [r3, #8]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	691b      	ldr	r3, [r3, #16]
 800ffe0:	431a      	orrs	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	695b      	ldr	r3, [r3, #20]
 800ffe6:	431a      	orrs	r2, r3
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	69db      	ldr	r3, [r3, #28]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	4b9e      	ldr	r3, [pc, #632]	; (8010270 <UART_SetConfig+0x2a8>)
 800fff8:	4013      	ands	r3, r2
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	6812      	ldr	r2, [r2, #0]
 800fffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010000:	430b      	orrs	r3, r1
 8010002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	68da      	ldr	r2, [r3, #12]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	430a      	orrs	r2, r1
 8010018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	699b      	ldr	r3, [r3, #24]
 801001e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a93      	ldr	r2, [pc, #588]	; (8010274 <UART_SetConfig+0x2ac>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d004      	beq.n	8010034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6a1b      	ldr	r3, [r3, #32]
 801002e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010030:	4313      	orrs	r3, r2
 8010032:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010044:	430a      	orrs	r2, r1
 8010046:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a8a      	ldr	r2, [pc, #552]	; (8010278 <UART_SetConfig+0x2b0>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d126      	bne.n	80100a0 <UART_SetConfig+0xd8>
 8010052:	4b8a      	ldr	r3, [pc, #552]	; (801027c <UART_SetConfig+0x2b4>)
 8010054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010058:	f003 0303 	and.w	r3, r3, #3
 801005c:	2b03      	cmp	r3, #3
 801005e:	d81b      	bhi.n	8010098 <UART_SetConfig+0xd0>
 8010060:	a201      	add	r2, pc, #4	; (adr r2, 8010068 <UART_SetConfig+0xa0>)
 8010062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010066:	bf00      	nop
 8010068:	08010079 	.word	0x08010079
 801006c:	08010089 	.word	0x08010089
 8010070:	08010081 	.word	0x08010081
 8010074:	08010091 	.word	0x08010091
 8010078:	2301      	movs	r3, #1
 801007a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801007e:	e0ab      	b.n	80101d8 <UART_SetConfig+0x210>
 8010080:	2302      	movs	r3, #2
 8010082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010086:	e0a7      	b.n	80101d8 <UART_SetConfig+0x210>
 8010088:	2304      	movs	r3, #4
 801008a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801008e:	e0a3      	b.n	80101d8 <UART_SetConfig+0x210>
 8010090:	2308      	movs	r3, #8
 8010092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010096:	e09f      	b.n	80101d8 <UART_SetConfig+0x210>
 8010098:	2310      	movs	r3, #16
 801009a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801009e:	e09b      	b.n	80101d8 <UART_SetConfig+0x210>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a76      	ldr	r2, [pc, #472]	; (8010280 <UART_SetConfig+0x2b8>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d138      	bne.n	801011c <UART_SetConfig+0x154>
 80100aa:	4b74      	ldr	r3, [pc, #464]	; (801027c <UART_SetConfig+0x2b4>)
 80100ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100b0:	f003 030c 	and.w	r3, r3, #12
 80100b4:	2b0c      	cmp	r3, #12
 80100b6:	d82d      	bhi.n	8010114 <UART_SetConfig+0x14c>
 80100b8:	a201      	add	r2, pc, #4	; (adr r2, 80100c0 <UART_SetConfig+0xf8>)
 80100ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100be:	bf00      	nop
 80100c0:	080100f5 	.word	0x080100f5
 80100c4:	08010115 	.word	0x08010115
 80100c8:	08010115 	.word	0x08010115
 80100cc:	08010115 	.word	0x08010115
 80100d0:	08010105 	.word	0x08010105
 80100d4:	08010115 	.word	0x08010115
 80100d8:	08010115 	.word	0x08010115
 80100dc:	08010115 	.word	0x08010115
 80100e0:	080100fd 	.word	0x080100fd
 80100e4:	08010115 	.word	0x08010115
 80100e8:	08010115 	.word	0x08010115
 80100ec:	08010115 	.word	0x08010115
 80100f0:	0801010d 	.word	0x0801010d
 80100f4:	2300      	movs	r3, #0
 80100f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100fa:	e06d      	b.n	80101d8 <UART_SetConfig+0x210>
 80100fc:	2302      	movs	r3, #2
 80100fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010102:	e069      	b.n	80101d8 <UART_SetConfig+0x210>
 8010104:	2304      	movs	r3, #4
 8010106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801010a:	e065      	b.n	80101d8 <UART_SetConfig+0x210>
 801010c:	2308      	movs	r3, #8
 801010e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010112:	e061      	b.n	80101d8 <UART_SetConfig+0x210>
 8010114:	2310      	movs	r3, #16
 8010116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801011a:	e05d      	b.n	80101d8 <UART_SetConfig+0x210>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4a58      	ldr	r2, [pc, #352]	; (8010284 <UART_SetConfig+0x2bc>)
 8010122:	4293      	cmp	r3, r2
 8010124:	d125      	bne.n	8010172 <UART_SetConfig+0x1aa>
 8010126:	4b55      	ldr	r3, [pc, #340]	; (801027c <UART_SetConfig+0x2b4>)
 8010128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801012c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010130:	2b30      	cmp	r3, #48	; 0x30
 8010132:	d016      	beq.n	8010162 <UART_SetConfig+0x19a>
 8010134:	2b30      	cmp	r3, #48	; 0x30
 8010136:	d818      	bhi.n	801016a <UART_SetConfig+0x1a2>
 8010138:	2b20      	cmp	r3, #32
 801013a:	d00a      	beq.n	8010152 <UART_SetConfig+0x18a>
 801013c:	2b20      	cmp	r3, #32
 801013e:	d814      	bhi.n	801016a <UART_SetConfig+0x1a2>
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <UART_SetConfig+0x182>
 8010144:	2b10      	cmp	r3, #16
 8010146:	d008      	beq.n	801015a <UART_SetConfig+0x192>
 8010148:	e00f      	b.n	801016a <UART_SetConfig+0x1a2>
 801014a:	2300      	movs	r3, #0
 801014c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010150:	e042      	b.n	80101d8 <UART_SetConfig+0x210>
 8010152:	2302      	movs	r3, #2
 8010154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010158:	e03e      	b.n	80101d8 <UART_SetConfig+0x210>
 801015a:	2304      	movs	r3, #4
 801015c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010160:	e03a      	b.n	80101d8 <UART_SetConfig+0x210>
 8010162:	2308      	movs	r3, #8
 8010164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010168:	e036      	b.n	80101d8 <UART_SetConfig+0x210>
 801016a:	2310      	movs	r3, #16
 801016c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010170:	e032      	b.n	80101d8 <UART_SetConfig+0x210>
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a3f      	ldr	r2, [pc, #252]	; (8010274 <UART_SetConfig+0x2ac>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d12a      	bne.n	80101d2 <UART_SetConfig+0x20a>
 801017c:	4b3f      	ldr	r3, [pc, #252]	; (801027c <UART_SetConfig+0x2b4>)
 801017e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010182:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801018a:	d01a      	beq.n	80101c2 <UART_SetConfig+0x1fa>
 801018c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010190:	d81b      	bhi.n	80101ca <UART_SetConfig+0x202>
 8010192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010196:	d00c      	beq.n	80101b2 <UART_SetConfig+0x1ea>
 8010198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801019c:	d815      	bhi.n	80101ca <UART_SetConfig+0x202>
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d003      	beq.n	80101aa <UART_SetConfig+0x1e2>
 80101a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101a6:	d008      	beq.n	80101ba <UART_SetConfig+0x1f2>
 80101a8:	e00f      	b.n	80101ca <UART_SetConfig+0x202>
 80101aa:	2300      	movs	r3, #0
 80101ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101b0:	e012      	b.n	80101d8 <UART_SetConfig+0x210>
 80101b2:	2302      	movs	r3, #2
 80101b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101b8:	e00e      	b.n	80101d8 <UART_SetConfig+0x210>
 80101ba:	2304      	movs	r3, #4
 80101bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101c0:	e00a      	b.n	80101d8 <UART_SetConfig+0x210>
 80101c2:	2308      	movs	r3, #8
 80101c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101c8:	e006      	b.n	80101d8 <UART_SetConfig+0x210>
 80101ca:	2310      	movs	r3, #16
 80101cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101d0:	e002      	b.n	80101d8 <UART_SetConfig+0x210>
 80101d2:	2310      	movs	r3, #16
 80101d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4a25      	ldr	r2, [pc, #148]	; (8010274 <UART_SetConfig+0x2ac>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	f040 808a 	bne.w	80102f8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80101e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101e8:	2b08      	cmp	r3, #8
 80101ea:	d824      	bhi.n	8010236 <UART_SetConfig+0x26e>
 80101ec:	a201      	add	r2, pc, #4	; (adr r2, 80101f4 <UART_SetConfig+0x22c>)
 80101ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f2:	bf00      	nop
 80101f4:	08010219 	.word	0x08010219
 80101f8:	08010237 	.word	0x08010237
 80101fc:	08010221 	.word	0x08010221
 8010200:	08010237 	.word	0x08010237
 8010204:	08010227 	.word	0x08010227
 8010208:	08010237 	.word	0x08010237
 801020c:	08010237 	.word	0x08010237
 8010210:	08010237 	.word	0x08010237
 8010214:	0801022f 	.word	0x0801022f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010218:	f7fd fb6a 	bl	800d8f0 <HAL_RCC_GetPCLK1Freq>
 801021c:	61f8      	str	r0, [r7, #28]
        break;
 801021e:	e010      	b.n	8010242 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010220:	4b19      	ldr	r3, [pc, #100]	; (8010288 <UART_SetConfig+0x2c0>)
 8010222:	61fb      	str	r3, [r7, #28]
        break;
 8010224:	e00d      	b.n	8010242 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010226:	f7fd facb 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 801022a:	61f8      	str	r0, [r7, #28]
        break;
 801022c:	e009      	b.n	8010242 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010232:	61fb      	str	r3, [r7, #28]
        break;
 8010234:	e005      	b.n	8010242 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8010236:	2300      	movs	r3, #0
 8010238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801023a:	2301      	movs	r3, #1
 801023c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8010240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 8109 	beq.w	801045c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	685a      	ldr	r2, [r3, #4]
 801024e:	4613      	mov	r3, r2
 8010250:	005b      	lsls	r3, r3, #1
 8010252:	4413      	add	r3, r2
 8010254:	69fa      	ldr	r2, [r7, #28]
 8010256:	429a      	cmp	r2, r3
 8010258:	d305      	bcc.n	8010266 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010260:	69fa      	ldr	r2, [r7, #28]
 8010262:	429a      	cmp	r2, r3
 8010264:	d912      	bls.n	801028c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8010266:	2301      	movs	r3, #1
 8010268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801026c:	e0f6      	b.n	801045c <UART_SetConfig+0x494>
 801026e:	bf00      	nop
 8010270:	efff69f3 	.word	0xefff69f3
 8010274:	40008000 	.word	0x40008000
 8010278:	40013800 	.word	0x40013800
 801027c:	40021000 	.word	0x40021000
 8010280:	40004400 	.word	0x40004400
 8010284:	40004800 	.word	0x40004800
 8010288:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	2200      	movs	r2, #0
 8010290:	461c      	mov	r4, r3
 8010292:	4615      	mov	r5, r2
 8010294:	f04f 0200 	mov.w	r2, #0
 8010298:	f04f 0300 	mov.w	r3, #0
 801029c:	022b      	lsls	r3, r5, #8
 801029e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80102a2:	0222      	lsls	r2, r4, #8
 80102a4:	68f9      	ldr	r1, [r7, #12]
 80102a6:	6849      	ldr	r1, [r1, #4]
 80102a8:	0849      	lsrs	r1, r1, #1
 80102aa:	2000      	movs	r0, #0
 80102ac:	4688      	mov	r8, r1
 80102ae:	4681      	mov	r9, r0
 80102b0:	eb12 0a08 	adds.w	sl, r2, r8
 80102b4:	eb43 0b09 	adc.w	fp, r3, r9
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	603b      	str	r3, [r7, #0]
 80102c0:	607a      	str	r2, [r7, #4]
 80102c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102c6:	4650      	mov	r0, sl
 80102c8:	4659      	mov	r1, fp
 80102ca:	f7ef ffd9 	bl	8000280 <__aeabi_uldivmod>
 80102ce:	4602      	mov	r2, r0
 80102d0:	460b      	mov	r3, r1
 80102d2:	4613      	mov	r3, r2
 80102d4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102dc:	d308      	bcc.n	80102f0 <UART_SetConfig+0x328>
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102e4:	d204      	bcs.n	80102f0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	69ba      	ldr	r2, [r7, #24]
 80102ec:	60da      	str	r2, [r3, #12]
 80102ee:	e0b5      	b.n	801045c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80102f6:	e0b1      	b.n	801045c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	69db      	ldr	r3, [r3, #28]
 80102fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010300:	d15d      	bne.n	80103be <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8010302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010306:	2b08      	cmp	r3, #8
 8010308:	d827      	bhi.n	801035a <UART_SetConfig+0x392>
 801030a:	a201      	add	r2, pc, #4	; (adr r2, 8010310 <UART_SetConfig+0x348>)
 801030c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010310:	08010335 	.word	0x08010335
 8010314:	0801033d 	.word	0x0801033d
 8010318:	08010345 	.word	0x08010345
 801031c:	0801035b 	.word	0x0801035b
 8010320:	0801034b 	.word	0x0801034b
 8010324:	0801035b 	.word	0x0801035b
 8010328:	0801035b 	.word	0x0801035b
 801032c:	0801035b 	.word	0x0801035b
 8010330:	08010353 	.word	0x08010353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010334:	f7fd fadc 	bl	800d8f0 <HAL_RCC_GetPCLK1Freq>
 8010338:	61f8      	str	r0, [r7, #28]
        break;
 801033a:	e014      	b.n	8010366 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801033c:	f7fd faee 	bl	800d91c <HAL_RCC_GetPCLK2Freq>
 8010340:	61f8      	str	r0, [r7, #28]
        break;
 8010342:	e010      	b.n	8010366 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010344:	4b4c      	ldr	r3, [pc, #304]	; (8010478 <UART_SetConfig+0x4b0>)
 8010346:	61fb      	str	r3, [r7, #28]
        break;
 8010348:	e00d      	b.n	8010366 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801034a:	f7fd fa39 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 801034e:	61f8      	str	r0, [r7, #28]
        break;
 8010350:	e009      	b.n	8010366 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010356:	61fb      	str	r3, [r7, #28]
        break;
 8010358:	e005      	b.n	8010366 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801035a:	2300      	movs	r3, #0
 801035c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801035e:	2301      	movs	r3, #1
 8010360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8010364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d077      	beq.n	801045c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	005a      	lsls	r2, r3, #1
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	085b      	lsrs	r3, r3, #1
 8010376:	441a      	add	r2, r3
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010380:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	2b0f      	cmp	r3, #15
 8010386:	d916      	bls.n	80103b6 <UART_SetConfig+0x3ee>
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801038e:	d212      	bcs.n	80103b6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	b29b      	uxth	r3, r3
 8010394:	f023 030f 	bic.w	r3, r3, #15
 8010398:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	085b      	lsrs	r3, r3, #1
 801039e:	b29b      	uxth	r3, r3
 80103a0:	f003 0307 	and.w	r3, r3, #7
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	8afb      	ldrh	r3, [r7, #22]
 80103a8:	4313      	orrs	r3, r2
 80103aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	8afa      	ldrh	r2, [r7, #22]
 80103b2:	60da      	str	r2, [r3, #12]
 80103b4:	e052      	b.n	801045c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80103b6:	2301      	movs	r3, #1
 80103b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80103bc:	e04e      	b.n	801045c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80103be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80103c2:	2b08      	cmp	r3, #8
 80103c4:	d827      	bhi.n	8010416 <UART_SetConfig+0x44e>
 80103c6:	a201      	add	r2, pc, #4	; (adr r2, 80103cc <UART_SetConfig+0x404>)
 80103c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103cc:	080103f1 	.word	0x080103f1
 80103d0:	080103f9 	.word	0x080103f9
 80103d4:	08010401 	.word	0x08010401
 80103d8:	08010417 	.word	0x08010417
 80103dc:	08010407 	.word	0x08010407
 80103e0:	08010417 	.word	0x08010417
 80103e4:	08010417 	.word	0x08010417
 80103e8:	08010417 	.word	0x08010417
 80103ec:	0801040f 	.word	0x0801040f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103f0:	f7fd fa7e 	bl	800d8f0 <HAL_RCC_GetPCLK1Freq>
 80103f4:	61f8      	str	r0, [r7, #28]
        break;
 80103f6:	e014      	b.n	8010422 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103f8:	f7fd fa90 	bl	800d91c <HAL_RCC_GetPCLK2Freq>
 80103fc:	61f8      	str	r0, [r7, #28]
        break;
 80103fe:	e010      	b.n	8010422 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010400:	4b1d      	ldr	r3, [pc, #116]	; (8010478 <UART_SetConfig+0x4b0>)
 8010402:	61fb      	str	r3, [r7, #28]
        break;
 8010404:	e00d      	b.n	8010422 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010406:	f7fd f9db 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 801040a:	61f8      	str	r0, [r7, #28]
        break;
 801040c:	e009      	b.n	8010422 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801040e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010412:	61fb      	str	r3, [r7, #28]
        break;
 8010414:	e005      	b.n	8010422 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8010416:	2300      	movs	r3, #0
 8010418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8010420:	bf00      	nop
    }

    if (pclk != 0U)
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d019      	beq.n	801045c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	085a      	lsrs	r2, r3, #1
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	441a      	add	r2, r3
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	fbb2 f3f3 	udiv	r3, r2, r3
 801043a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	2b0f      	cmp	r3, #15
 8010440:	d909      	bls.n	8010456 <UART_SetConfig+0x48e>
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010448:	d205      	bcs.n	8010456 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	b29a      	uxth	r2, r3
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	60da      	str	r2, [r3, #12]
 8010454:	e002      	b.n	801045c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8010456:	2301      	movs	r3, #1
 8010458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2200      	movs	r2, #0
 8010466:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010468:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 801046c:	4618      	mov	r0, r3
 801046e:	3728      	adds	r7, #40	; 0x28
 8010470:	46bd      	mov	sp, r7
 8010472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010476:	bf00      	nop
 8010478:	00f42400 	.word	0x00f42400

0801047c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010488:	f003 0301 	and.w	r3, r3, #1
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00a      	beq.n	80104a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	430a      	orrs	r2, r1
 80104a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104aa:	f003 0302 	and.w	r3, r3, #2
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00a      	beq.n	80104c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	430a      	orrs	r2, r1
 80104c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104cc:	f003 0304 	and.w	r3, r3, #4
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00a      	beq.n	80104ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	430a      	orrs	r2, r1
 80104e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ee:	f003 0308 	and.w	r3, r3, #8
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00a      	beq.n	801050c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	430a      	orrs	r2, r1
 801050a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010510:	f003 0310 	and.w	r3, r3, #16
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00a      	beq.n	801052e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	430a      	orrs	r2, r1
 801052c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010532:	f003 0320 	and.w	r3, r3, #32
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00a      	beq.n	8010550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	430a      	orrs	r2, r1
 801054e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010558:	2b00      	cmp	r3, #0
 801055a:	d01a      	beq.n	8010592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	430a      	orrs	r2, r1
 8010570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801057a:	d10a      	bne.n	8010592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	430a      	orrs	r2, r1
 8010590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00a      	beq.n	80105b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	430a      	orrs	r2, r1
 80105b2:	605a      	str	r2, [r3, #4]
  }
}
 80105b4:	bf00      	nop
 80105b6:	370c      	adds	r7, #12
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr

080105c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b086      	sub	sp, #24
 80105c4:	af02      	add	r7, sp, #8
 80105c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80105d0:	f7fb fa00 	bl	800b9d4 <HAL_GetTick>
 80105d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f003 0308 	and.w	r3, r3, #8
 80105e0:	2b08      	cmp	r3, #8
 80105e2:	d10e      	bne.n	8010602 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2200      	movs	r2, #0
 80105ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 f82d 	bl	8010652 <UART_WaitOnFlagUntilTimeout>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d001      	beq.n	8010602 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105fe:	2303      	movs	r3, #3
 8010600:	e023      	b.n	801064a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f003 0304 	and.w	r3, r3, #4
 801060c:	2b04      	cmp	r3, #4
 801060e:	d10e      	bne.n	801062e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010614:	9300      	str	r3, [sp, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2200      	movs	r2, #0
 801061a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 f817 	bl	8010652 <UART_WaitOnFlagUntilTimeout>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d001      	beq.n	801062e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801062a:	2303      	movs	r3, #3
 801062c:	e00d      	b.n	801064a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2220      	movs	r2, #32
 8010632:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2220      	movs	r2, #32
 8010638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2200      	movs	r2, #0
 801063e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b09c      	sub	sp, #112	; 0x70
 8010656:	af00      	add	r7, sp, #0
 8010658:	60f8      	str	r0, [r7, #12]
 801065a:	60b9      	str	r1, [r7, #8]
 801065c:	603b      	str	r3, [r7, #0]
 801065e:	4613      	mov	r3, r2
 8010660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010662:	e0a5      	b.n	80107b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066a:	f000 80a1 	beq.w	80107b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801066e:	f7fb f9b1 	bl	800b9d4 <HAL_GetTick>
 8010672:	4602      	mov	r2, r0
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801067a:	429a      	cmp	r2, r3
 801067c:	d302      	bcc.n	8010684 <UART_WaitOnFlagUntilTimeout+0x32>
 801067e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010680:	2b00      	cmp	r3, #0
 8010682:	d13e      	bne.n	8010702 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801068c:	e853 3f00 	ldrex	r3, [r3]
 8010690:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010694:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010698:	667b      	str	r3, [r7, #100]	; 0x64
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	461a      	mov	r2, r3
 80106a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80106aa:	e841 2300 	strex	r3, r2, [r1]
 80106ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80106b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1e6      	bne.n	8010684 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3308      	adds	r3, #8
 80106bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c0:	e853 3f00 	ldrex	r3, [r3]
 80106c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c8:	f023 0301 	bic.w	r3, r3, #1
 80106cc:	663b      	str	r3, [r7, #96]	; 0x60
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	3308      	adds	r3, #8
 80106d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80106d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106de:	e841 2300 	strex	r3, r2, [r1]
 80106e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80106e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1e5      	bne.n	80106b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2220      	movs	r2, #32
 80106ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2220      	movs	r2, #32
 80106f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80106fe:	2303      	movs	r3, #3
 8010700:	e067      	b.n	80107d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f003 0304 	and.w	r3, r3, #4
 801070c:	2b00      	cmp	r3, #0
 801070e:	d04f      	beq.n	80107b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	69db      	ldr	r3, [r3, #28]
 8010716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801071a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801071e:	d147      	bne.n	80107b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010728:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010732:	e853 3f00 	ldrex	r3, [r3]
 8010736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801073e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	461a      	mov	r2, r3
 8010746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010748:	637b      	str	r3, [r7, #52]	; 0x34
 801074a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801074c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801074e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010750:	e841 2300 	strex	r3, r2, [r1]
 8010754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1e6      	bne.n	801072a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3308      	adds	r3, #8
 8010762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	e853 3f00 	ldrex	r3, [r3]
 801076a:	613b      	str	r3, [r7, #16]
   return(result);
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	f023 0301 	bic.w	r3, r3, #1
 8010772:	66bb      	str	r3, [r7, #104]	; 0x68
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	3308      	adds	r3, #8
 801077a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801077c:	623a      	str	r2, [r7, #32]
 801077e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010780:	69f9      	ldr	r1, [r7, #28]
 8010782:	6a3a      	ldr	r2, [r7, #32]
 8010784:	e841 2300 	strex	r3, r2, [r1]
 8010788:	61bb      	str	r3, [r7, #24]
   return(result);
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1e5      	bne.n	801075c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2220      	movs	r2, #32
 8010794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2220      	movs	r2, #32
 801079a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2220      	movs	r2, #32
 80107a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2200      	movs	r2, #0
 80107a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80107ac:	2303      	movs	r3, #3
 80107ae:	e010      	b.n	80107d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	69da      	ldr	r2, [r3, #28]
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	4013      	ands	r3, r2
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	429a      	cmp	r2, r3
 80107be:	bf0c      	ite	eq
 80107c0:	2301      	moveq	r3, #1
 80107c2:	2300      	movne	r3, #0
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	461a      	mov	r2, r3
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	f43f af4a 	beq.w	8010664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107d0:	2300      	movs	r3, #0
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3770      	adds	r7, #112	; 0x70
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
	...

080107dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107dc:	b480      	push	{r7}
 80107de:	b097      	sub	sp, #92	; 0x5c
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	4613      	mov	r3, r2
 80107e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	88fa      	ldrh	r2, [r7, #6]
 80107f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	88fa      	ldrh	r2, [r7, #6]
 80107fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801080e:	d10e      	bne.n	801082e <UART_Start_Receive_IT+0x52>
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d105      	bne.n	8010824 <UART_Start_Receive_IT+0x48>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801081e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010822:	e02d      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	22ff      	movs	r2, #255	; 0xff
 8010828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801082c:	e028      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	689b      	ldr	r3, [r3, #8]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d10d      	bne.n	8010852 <UART_Start_Receive_IT+0x76>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d104      	bne.n	8010848 <UART_Start_Receive_IT+0x6c>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	22ff      	movs	r2, #255	; 0xff
 8010842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010846:	e01b      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	227f      	movs	r2, #127	; 0x7f
 801084c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010850:	e016      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801085a:	d10d      	bne.n	8010878 <UART_Start_Receive_IT+0x9c>
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d104      	bne.n	801086e <UART_Start_Receive_IT+0x92>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	227f      	movs	r2, #127	; 0x7f
 8010868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801086c:	e008      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	223f      	movs	r2, #63	; 0x3f
 8010872:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010876:	e003      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2222      	movs	r2, #34	; 0x22
 801088c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3308      	adds	r3, #8
 8010894:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010898:	e853 3f00 	ldrex	r3, [r3]
 801089c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801089e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a0:	f043 0301 	orr.w	r3, r3, #1
 80108a4:	657b      	str	r3, [r7, #84]	; 0x54
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	3308      	adds	r3, #8
 80108ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80108b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108b6:	e841 2300 	strex	r3, r2, [r1]
 80108ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80108bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d1e5      	bne.n	801088e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	689b      	ldr	r3, [r3, #8]
 80108c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ca:	d107      	bne.n	80108dc <UART_Start_Receive_IT+0x100>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d103      	bne.n	80108dc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4a24      	ldr	r2, [pc, #144]	; (8010968 <UART_Start_Receive_IT+0x18c>)
 80108d8:	665a      	str	r2, [r3, #100]	; 0x64
 80108da:	e002      	b.n	80108e2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4a23      	ldr	r2, [pc, #140]	; (801096c <UART_Start_Receive_IT+0x190>)
 80108e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	691b      	ldr	r3, [r3, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d019      	beq.n	8010926 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	e853 3f00 	ldrex	r3, [r3]
 80108fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010902:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	461a      	mov	r2, r3
 801090e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010910:	637b      	str	r3, [r7, #52]	; 0x34
 8010912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010918:	e841 2300 	strex	r3, r2, [r1]
 801091c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1e6      	bne.n	80108f2 <UART_Start_Receive_IT+0x116>
 8010924:	e018      	b.n	8010958 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	e853 3f00 	ldrex	r3, [r3]
 8010932:	613b      	str	r3, [r7, #16]
   return(result);
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	f043 0320 	orr.w	r3, r3, #32
 801093a:	653b      	str	r3, [r7, #80]	; 0x50
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	461a      	mov	r2, r3
 8010942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010944:	623b      	str	r3, [r7, #32]
 8010946:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010948:	69f9      	ldr	r1, [r7, #28]
 801094a:	6a3a      	ldr	r2, [r7, #32]
 801094c:	e841 2300 	strex	r3, r2, [r1]
 8010950:	61bb      	str	r3, [r7, #24]
   return(result);
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1e6      	bne.n	8010926 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8010958:	2300      	movs	r3, #0
}
 801095a:	4618      	mov	r0, r3
 801095c:	375c      	adds	r7, #92	; 0x5c
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	08010d8f 	.word	0x08010d8f
 801096c:	08010c2f 	.word	0x08010c2f

08010970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010970:	b480      	push	{r7}
 8010972:	b095      	sub	sp, #84	; 0x54
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801097e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010980:	e853 3f00 	ldrex	r3, [r3]
 8010984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801098c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	461a      	mov	r2, r3
 8010994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010996:	643b      	str	r3, [r7, #64]	; 0x40
 8010998:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801099c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801099e:	e841 2300 	strex	r3, r2, [r1]
 80109a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1e6      	bne.n	8010978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	3308      	adds	r3, #8
 80109b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	e853 3f00 	ldrex	r3, [r3]
 80109b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	f023 0301 	bic.w	r3, r3, #1
 80109c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	3308      	adds	r3, #8
 80109c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109d2:	e841 2300 	strex	r3, r2, [r1]
 80109d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d1e5      	bne.n	80109aa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d118      	bne.n	8010a18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	e853 3f00 	ldrex	r3, [r3]
 80109f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	f023 0310 	bic.w	r3, r3, #16
 80109fa:	647b      	str	r3, [r7, #68]	; 0x44
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	461a      	mov	r2, r3
 8010a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a04:	61bb      	str	r3, [r7, #24]
 8010a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a08:	6979      	ldr	r1, [r7, #20]
 8010a0a:	69ba      	ldr	r2, [r7, #24]
 8010a0c:	e841 2300 	strex	r3, r2, [r1]
 8010a10:	613b      	str	r3, [r7, #16]
   return(result);
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e6      	bne.n	80109e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2220      	movs	r2, #32
 8010a1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2200      	movs	r2, #0
 8010a22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010a2a:	bf00      	nop
 8010a2c:	3754      	adds	r7, #84	; 0x54
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b084      	sub	sp, #16
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f7ff faa1 	bl	800ff9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a5a:	bf00      	nop
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010a62:	b480      	push	{r7}
 8010a64:	b08f      	sub	sp, #60	; 0x3c
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a6e:	2b21      	cmp	r3, #33	; 0x21
 8010a70:	d14d      	bne.n	8010b0e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d132      	bne.n	8010ae4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a84:	6a3b      	ldr	r3, [r7, #32]
 8010a86:	e853 3f00 	ldrex	r3, [r3]
 8010a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a92:	637b      	str	r3, [r7, #52]	; 0x34
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aa4:	e841 2300 	strex	r3, r2, [r1]
 8010aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1e6      	bne.n	8010a7e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	e853 3f00 	ldrex	r3, [r3]
 8010abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	461a      	mov	r2, r3
 8010acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ace:	61bb      	str	r3, [r7, #24]
 8010ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad2:	6979      	ldr	r1, [r7, #20]
 8010ad4:	69ba      	ldr	r2, [r7, #24]
 8010ad6:	e841 2300 	strex	r3, r2, [r1]
 8010ada:	613b      	str	r3, [r7, #16]
   return(result);
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1e6      	bne.n	8010ab0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010ae2:	e014      	b.n	8010b0e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ae8:	781a      	ldrb	r2, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	b292      	uxth	r2, r2
 8010af0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010af6:	1c5a      	adds	r2, r3, #1
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	3b01      	subs	r3, #1
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8010b0e:	bf00      	nop
 8010b10:	373c      	adds	r7, #60	; 0x3c
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr

08010b1a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010b1a:	b480      	push	{r7}
 8010b1c:	b091      	sub	sp, #68	; 0x44
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b26:	2b21      	cmp	r3, #33	; 0x21
 8010b28:	d151      	bne.n	8010bce <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d132      	bne.n	8010b9c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3e:	e853 3f00 	ldrex	r3, [r3]
 8010b42:	623b      	str	r3, [r7, #32]
   return(result);
 8010b44:	6a3b      	ldr	r3, [r7, #32]
 8010b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	461a      	mov	r2, r3
 8010b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b54:	633b      	str	r3, [r7, #48]	; 0x30
 8010b56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b5c:	e841 2300 	strex	r3, r2, [r1]
 8010b60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e6      	bne.n	8010b36 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	e853 3f00 	ldrex	r3, [r3]
 8010b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	461a      	mov	r2, r3
 8010b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b86:	61fb      	str	r3, [r7, #28]
 8010b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b8a:	69b9      	ldr	r1, [r7, #24]
 8010b8c:	69fa      	ldr	r2, [r7, #28]
 8010b8e:	e841 2300 	strex	r3, r2, [r1]
 8010b92:	617b      	str	r3, [r7, #20]
   return(result);
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1e6      	bne.n	8010b68 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010b9a:	e018      	b.n	8010bce <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ba4:	881a      	ldrh	r2, [r3, #0]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010bae:	b292      	uxth	r2, r2
 8010bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bb6:	1c9a      	adds	r2, r3, #2
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8010bce:	bf00      	nop
 8010bd0:	3744      	adds	r7, #68	; 0x44
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b088      	sub	sp, #32
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	e853 3f00 	ldrex	r3, [r3]
 8010bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bf6:	61fb      	str	r3, [r7, #28]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	61bb      	str	r3, [r7, #24]
 8010c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c04:	6979      	ldr	r1, [r7, #20]
 8010c06:	69ba      	ldr	r2, [r7, #24]
 8010c08:	e841 2300 	strex	r3, r2, [r1]
 8010c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1e6      	bne.n	8010be2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2220      	movs	r2, #32
 8010c18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7f8 fd7d 	bl	8009720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c26:	bf00      	nop
 8010c28:	3720      	adds	r7, #32
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b096      	sub	sp, #88	; 0x58
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c44:	2b22      	cmp	r3, #34	; 0x22
 8010c46:	f040 8094 	bne.w	8010d72 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c50:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010c54:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010c58:	b2d9      	uxtb	r1, r3
 8010c5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c64:	400a      	ands	r2, r1
 8010c66:	b2d2      	uxtb	r2, r2
 8010c68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d179      	bne.n	8010d86 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9a:	e853 3f00 	ldrex	r3, [r3]
 8010c9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	461a      	mov	r2, r3
 8010cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8010cb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cb8:	e841 2300 	strex	r3, r2, [r1]
 8010cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1e6      	bne.n	8010c92 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	3308      	adds	r3, #8
 8010cca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cce:	e853 3f00 	ldrex	r3, [r3]
 8010cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8010cd4:	6a3b      	ldr	r3, [r7, #32]
 8010cd6:	f023 0301 	bic.w	r3, r3, #1
 8010cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ce4:	633a      	str	r2, [r7, #48]	; 0x30
 8010ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cec:	e841 2300 	strex	r3, r2, [r1]
 8010cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1e5      	bne.n	8010cc4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2220      	movs	r2, #32
 8010cfc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2200      	movs	r2, #0
 8010d02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d12e      	bne.n	8010d6a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	e853 3f00 	ldrex	r3, [r3]
 8010d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f023 0310 	bic.w	r3, r3, #16
 8010d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d30:	61fb      	str	r3, [r7, #28]
 8010d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d34:	69b9      	ldr	r1, [r7, #24]
 8010d36:	69fa      	ldr	r2, [r7, #28]
 8010d38:	e841 2300 	strex	r3, r2, [r1]
 8010d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1e6      	bne.n	8010d12 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	69db      	ldr	r3, [r3, #28]
 8010d4a:	f003 0310 	and.w	r3, r3, #16
 8010d4e:	2b10      	cmp	r3, #16
 8010d50:	d103      	bne.n	8010d5a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2210      	movs	r2, #16
 8010d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010d60:	4619      	mov	r1, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7ff f924 	bl	800ffb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d68:	e00d      	b.n	8010d86 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7f1 fad8 	bl	8002320 <HAL_UART_RxCpltCallback>
}
 8010d70:	e009      	b.n	8010d86 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	8b1b      	ldrh	r3, [r3, #24]
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f042 0208 	orr.w	r2, r2, #8
 8010d82:	b292      	uxth	r2, r2
 8010d84:	831a      	strh	r2, [r3, #24]
}
 8010d86:	bf00      	nop
 8010d88:	3758      	adds	r7, #88	; 0x58
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b096      	sub	sp, #88	; 0x58
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010da4:	2b22      	cmp	r3, #34	; 0x22
 8010da6:	f040 8094 	bne.w	8010ed2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010db0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010db8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010dba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010dbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010dc2:	4013      	ands	r3, r2
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dce:	1c9a      	adds	r2, r3, #2
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d179      	bne.n	8010ee6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfa:	e853 3f00 	ldrex	r3, [r3]
 8010dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e10:	643b      	str	r3, [r7, #64]	; 0x40
 8010e12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010e18:	e841 2300 	strex	r3, r2, [r1]
 8010e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1e6      	bne.n	8010df2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	3308      	adds	r3, #8
 8010e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2c:	6a3b      	ldr	r3, [r7, #32]
 8010e2e:	e853 3f00 	ldrex	r3, [r3]
 8010e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	f023 0301 	bic.w	r3, r3, #1
 8010e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	3308      	adds	r3, #8
 8010e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e4c:	e841 2300 	strex	r3, r2, [r1]
 8010e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1e5      	bne.n	8010e24 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2220      	movs	r2, #32
 8010e5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d12e      	bne.n	8010eca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	e853 3f00 	ldrex	r3, [r3]
 8010e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	f023 0310 	bic.w	r3, r3, #16
 8010e86:	647b      	str	r3, [r7, #68]	; 0x44
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e90:	61bb      	str	r3, [r7, #24]
 8010e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e94:	6979      	ldr	r1, [r7, #20]
 8010e96:	69ba      	ldr	r2, [r7, #24]
 8010e98:	e841 2300 	strex	r3, r2, [r1]
 8010e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e6      	bne.n	8010e72 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	f003 0310 	and.w	r3, r3, #16
 8010eae:	2b10      	cmp	r3, #16
 8010eb0:	d103      	bne.n	8010eba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2210      	movs	r2, #16
 8010eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7ff f874 	bl	800ffb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010ec8:	e00d      	b.n	8010ee6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7f1 fa28 	bl	8002320 <HAL_UART_RxCpltCallback>
}
 8010ed0:	e009      	b.n	8010ee6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	8b1b      	ldrh	r3, [r3, #24]
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f042 0208 	orr.w	r2, r2, #8
 8010ee2:	b292      	uxth	r2, r2
 8010ee4:	831a      	strh	r2, [r3, #24]
}
 8010ee6:	bf00      	nop
 8010ee8:	3758      	adds	r7, #88	; 0x58
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010ef6:	bf00      	nop
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <_ZdlPvj>:
 8010f02:	f000 b800 	b.w	8010f06 <_ZdlPv>

08010f06 <_ZdlPv>:
 8010f06:	f000 b82b 	b.w	8010f60 <free>
	...

08010f0c <__errno>:
 8010f0c:	4b01      	ldr	r3, [pc, #4]	; (8010f14 <__errno+0x8>)
 8010f0e:	6818      	ldr	r0, [r3, #0]
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	20000024 	.word	0x20000024

08010f18 <__libc_init_array>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	4d0d      	ldr	r5, [pc, #52]	; (8010f50 <__libc_init_array+0x38>)
 8010f1c:	4c0d      	ldr	r4, [pc, #52]	; (8010f54 <__libc_init_array+0x3c>)
 8010f1e:	1b64      	subs	r4, r4, r5
 8010f20:	10a4      	asrs	r4, r4, #2
 8010f22:	2600      	movs	r6, #0
 8010f24:	42a6      	cmp	r6, r4
 8010f26:	d109      	bne.n	8010f3c <__libc_init_array+0x24>
 8010f28:	4d0b      	ldr	r5, [pc, #44]	; (8010f58 <__libc_init_array+0x40>)
 8010f2a:	4c0c      	ldr	r4, [pc, #48]	; (8010f5c <__libc_init_array+0x44>)
 8010f2c:	f000 fc96 	bl	801185c <_init>
 8010f30:	1b64      	subs	r4, r4, r5
 8010f32:	10a4      	asrs	r4, r4, #2
 8010f34:	2600      	movs	r6, #0
 8010f36:	42a6      	cmp	r6, r4
 8010f38:	d105      	bne.n	8010f46 <__libc_init_array+0x2e>
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f40:	4798      	blx	r3
 8010f42:	3601      	adds	r6, #1
 8010f44:	e7ee      	b.n	8010f24 <__libc_init_array+0xc>
 8010f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f4a:	4798      	blx	r3
 8010f4c:	3601      	adds	r6, #1
 8010f4e:	e7f2      	b.n	8010f36 <__libc_init_array+0x1e>
 8010f50:	08011e4c 	.word	0x08011e4c
 8010f54:	08011e4c 	.word	0x08011e4c
 8010f58:	08011e4c 	.word	0x08011e4c
 8010f5c:	08011e54 	.word	0x08011e54

08010f60 <free>:
 8010f60:	4b02      	ldr	r3, [pc, #8]	; (8010f6c <free+0xc>)
 8010f62:	4601      	mov	r1, r0
 8010f64:	6818      	ldr	r0, [r3, #0]
 8010f66:	f000 b819 	b.w	8010f9c <_free_r>
 8010f6a:	bf00      	nop
 8010f6c:	20000024 	.word	0x20000024

08010f70 <memcpy>:
 8010f70:	440a      	add	r2, r1
 8010f72:	4291      	cmp	r1, r2
 8010f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f78:	d100      	bne.n	8010f7c <memcpy+0xc>
 8010f7a:	4770      	bx	lr
 8010f7c:	b510      	push	{r4, lr}
 8010f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f86:	4291      	cmp	r1, r2
 8010f88:	d1f9      	bne.n	8010f7e <memcpy+0xe>
 8010f8a:	bd10      	pop	{r4, pc}

08010f8c <memset>:
 8010f8c:	4402      	add	r2, r0
 8010f8e:	4603      	mov	r3, r0
 8010f90:	4293      	cmp	r3, r2
 8010f92:	d100      	bne.n	8010f96 <memset+0xa>
 8010f94:	4770      	bx	lr
 8010f96:	f803 1b01 	strb.w	r1, [r3], #1
 8010f9a:	e7f9      	b.n	8010f90 <memset+0x4>

08010f9c <_free_r>:
 8010f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f9e:	2900      	cmp	r1, #0
 8010fa0:	d044      	beq.n	801102c <_free_r+0x90>
 8010fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fa6:	9001      	str	r0, [sp, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f1a1 0404 	sub.w	r4, r1, #4
 8010fae:	bfb8      	it	lt
 8010fb0:	18e4      	addlt	r4, r4, r3
 8010fb2:	f000 f903 	bl	80111bc <__malloc_lock>
 8010fb6:	4a1e      	ldr	r2, [pc, #120]	; (8011030 <_free_r+0x94>)
 8010fb8:	9801      	ldr	r0, [sp, #4]
 8010fba:	6813      	ldr	r3, [r2, #0]
 8010fbc:	b933      	cbnz	r3, 8010fcc <_free_r+0x30>
 8010fbe:	6063      	str	r3, [r4, #4]
 8010fc0:	6014      	str	r4, [r2, #0]
 8010fc2:	b003      	add	sp, #12
 8010fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fc8:	f000 b8fe 	b.w	80111c8 <__malloc_unlock>
 8010fcc:	42a3      	cmp	r3, r4
 8010fce:	d908      	bls.n	8010fe2 <_free_r+0x46>
 8010fd0:	6825      	ldr	r5, [r4, #0]
 8010fd2:	1961      	adds	r1, r4, r5
 8010fd4:	428b      	cmp	r3, r1
 8010fd6:	bf01      	itttt	eq
 8010fd8:	6819      	ldreq	r1, [r3, #0]
 8010fda:	685b      	ldreq	r3, [r3, #4]
 8010fdc:	1949      	addeq	r1, r1, r5
 8010fde:	6021      	streq	r1, [r4, #0]
 8010fe0:	e7ed      	b.n	8010fbe <_free_r+0x22>
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	b10b      	cbz	r3, 8010fec <_free_r+0x50>
 8010fe8:	42a3      	cmp	r3, r4
 8010fea:	d9fa      	bls.n	8010fe2 <_free_r+0x46>
 8010fec:	6811      	ldr	r1, [r2, #0]
 8010fee:	1855      	adds	r5, r2, r1
 8010ff0:	42a5      	cmp	r5, r4
 8010ff2:	d10b      	bne.n	801100c <_free_r+0x70>
 8010ff4:	6824      	ldr	r4, [r4, #0]
 8010ff6:	4421      	add	r1, r4
 8010ff8:	1854      	adds	r4, r2, r1
 8010ffa:	42a3      	cmp	r3, r4
 8010ffc:	6011      	str	r1, [r2, #0]
 8010ffe:	d1e0      	bne.n	8010fc2 <_free_r+0x26>
 8011000:	681c      	ldr	r4, [r3, #0]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	6053      	str	r3, [r2, #4]
 8011006:	4421      	add	r1, r4
 8011008:	6011      	str	r1, [r2, #0]
 801100a:	e7da      	b.n	8010fc2 <_free_r+0x26>
 801100c:	d902      	bls.n	8011014 <_free_r+0x78>
 801100e:	230c      	movs	r3, #12
 8011010:	6003      	str	r3, [r0, #0]
 8011012:	e7d6      	b.n	8010fc2 <_free_r+0x26>
 8011014:	6825      	ldr	r5, [r4, #0]
 8011016:	1961      	adds	r1, r4, r5
 8011018:	428b      	cmp	r3, r1
 801101a:	bf04      	itt	eq
 801101c:	6819      	ldreq	r1, [r3, #0]
 801101e:	685b      	ldreq	r3, [r3, #4]
 8011020:	6063      	str	r3, [r4, #4]
 8011022:	bf04      	itt	eq
 8011024:	1949      	addeq	r1, r1, r5
 8011026:	6021      	streq	r1, [r4, #0]
 8011028:	6054      	str	r4, [r2, #4]
 801102a:	e7ca      	b.n	8010fc2 <_free_r+0x26>
 801102c:	b003      	add	sp, #12
 801102e:	bd30      	pop	{r4, r5, pc}
 8011030:	20000fa0 	.word	0x20000fa0

08011034 <sbrk_aligned>:
 8011034:	b570      	push	{r4, r5, r6, lr}
 8011036:	4e0e      	ldr	r6, [pc, #56]	; (8011070 <sbrk_aligned+0x3c>)
 8011038:	460c      	mov	r4, r1
 801103a:	6831      	ldr	r1, [r6, #0]
 801103c:	4605      	mov	r5, r0
 801103e:	b911      	cbnz	r1, 8011046 <sbrk_aligned+0x12>
 8011040:	f000 f88c 	bl	801115c <_sbrk_r>
 8011044:	6030      	str	r0, [r6, #0]
 8011046:	4621      	mov	r1, r4
 8011048:	4628      	mov	r0, r5
 801104a:	f000 f887 	bl	801115c <_sbrk_r>
 801104e:	1c43      	adds	r3, r0, #1
 8011050:	d00a      	beq.n	8011068 <sbrk_aligned+0x34>
 8011052:	1cc4      	adds	r4, r0, #3
 8011054:	f024 0403 	bic.w	r4, r4, #3
 8011058:	42a0      	cmp	r0, r4
 801105a:	d007      	beq.n	801106c <sbrk_aligned+0x38>
 801105c:	1a21      	subs	r1, r4, r0
 801105e:	4628      	mov	r0, r5
 8011060:	f000 f87c 	bl	801115c <_sbrk_r>
 8011064:	3001      	adds	r0, #1
 8011066:	d101      	bne.n	801106c <sbrk_aligned+0x38>
 8011068:	f04f 34ff 	mov.w	r4, #4294967295
 801106c:	4620      	mov	r0, r4
 801106e:	bd70      	pop	{r4, r5, r6, pc}
 8011070:	20000fa4 	.word	0x20000fa4

08011074 <_malloc_r>:
 8011074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011078:	1ccd      	adds	r5, r1, #3
 801107a:	f025 0503 	bic.w	r5, r5, #3
 801107e:	3508      	adds	r5, #8
 8011080:	2d0c      	cmp	r5, #12
 8011082:	bf38      	it	cc
 8011084:	250c      	movcc	r5, #12
 8011086:	2d00      	cmp	r5, #0
 8011088:	4607      	mov	r7, r0
 801108a:	db01      	blt.n	8011090 <_malloc_r+0x1c>
 801108c:	42a9      	cmp	r1, r5
 801108e:	d905      	bls.n	801109c <_malloc_r+0x28>
 8011090:	230c      	movs	r3, #12
 8011092:	603b      	str	r3, [r7, #0]
 8011094:	2600      	movs	r6, #0
 8011096:	4630      	mov	r0, r6
 8011098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109c:	4e2e      	ldr	r6, [pc, #184]	; (8011158 <_malloc_r+0xe4>)
 801109e:	f000 f88d 	bl	80111bc <__malloc_lock>
 80110a2:	6833      	ldr	r3, [r6, #0]
 80110a4:	461c      	mov	r4, r3
 80110a6:	bb34      	cbnz	r4, 80110f6 <_malloc_r+0x82>
 80110a8:	4629      	mov	r1, r5
 80110aa:	4638      	mov	r0, r7
 80110ac:	f7ff ffc2 	bl	8011034 <sbrk_aligned>
 80110b0:	1c43      	adds	r3, r0, #1
 80110b2:	4604      	mov	r4, r0
 80110b4:	d14d      	bne.n	8011152 <_malloc_r+0xde>
 80110b6:	6834      	ldr	r4, [r6, #0]
 80110b8:	4626      	mov	r6, r4
 80110ba:	2e00      	cmp	r6, #0
 80110bc:	d140      	bne.n	8011140 <_malloc_r+0xcc>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	4631      	mov	r1, r6
 80110c2:	4638      	mov	r0, r7
 80110c4:	eb04 0803 	add.w	r8, r4, r3
 80110c8:	f000 f848 	bl	801115c <_sbrk_r>
 80110cc:	4580      	cmp	r8, r0
 80110ce:	d13a      	bne.n	8011146 <_malloc_r+0xd2>
 80110d0:	6821      	ldr	r1, [r4, #0]
 80110d2:	3503      	adds	r5, #3
 80110d4:	1a6d      	subs	r5, r5, r1
 80110d6:	f025 0503 	bic.w	r5, r5, #3
 80110da:	3508      	adds	r5, #8
 80110dc:	2d0c      	cmp	r5, #12
 80110de:	bf38      	it	cc
 80110e0:	250c      	movcc	r5, #12
 80110e2:	4629      	mov	r1, r5
 80110e4:	4638      	mov	r0, r7
 80110e6:	f7ff ffa5 	bl	8011034 <sbrk_aligned>
 80110ea:	3001      	adds	r0, #1
 80110ec:	d02b      	beq.n	8011146 <_malloc_r+0xd2>
 80110ee:	6823      	ldr	r3, [r4, #0]
 80110f0:	442b      	add	r3, r5
 80110f2:	6023      	str	r3, [r4, #0]
 80110f4:	e00e      	b.n	8011114 <_malloc_r+0xa0>
 80110f6:	6822      	ldr	r2, [r4, #0]
 80110f8:	1b52      	subs	r2, r2, r5
 80110fa:	d41e      	bmi.n	801113a <_malloc_r+0xc6>
 80110fc:	2a0b      	cmp	r2, #11
 80110fe:	d916      	bls.n	801112e <_malloc_r+0xba>
 8011100:	1961      	adds	r1, r4, r5
 8011102:	42a3      	cmp	r3, r4
 8011104:	6025      	str	r5, [r4, #0]
 8011106:	bf18      	it	ne
 8011108:	6059      	strne	r1, [r3, #4]
 801110a:	6863      	ldr	r3, [r4, #4]
 801110c:	bf08      	it	eq
 801110e:	6031      	streq	r1, [r6, #0]
 8011110:	5162      	str	r2, [r4, r5]
 8011112:	604b      	str	r3, [r1, #4]
 8011114:	4638      	mov	r0, r7
 8011116:	f104 060b 	add.w	r6, r4, #11
 801111a:	f000 f855 	bl	80111c8 <__malloc_unlock>
 801111e:	f026 0607 	bic.w	r6, r6, #7
 8011122:	1d23      	adds	r3, r4, #4
 8011124:	1af2      	subs	r2, r6, r3
 8011126:	d0b6      	beq.n	8011096 <_malloc_r+0x22>
 8011128:	1b9b      	subs	r3, r3, r6
 801112a:	50a3      	str	r3, [r4, r2]
 801112c:	e7b3      	b.n	8011096 <_malloc_r+0x22>
 801112e:	6862      	ldr	r2, [r4, #4]
 8011130:	42a3      	cmp	r3, r4
 8011132:	bf0c      	ite	eq
 8011134:	6032      	streq	r2, [r6, #0]
 8011136:	605a      	strne	r2, [r3, #4]
 8011138:	e7ec      	b.n	8011114 <_malloc_r+0xa0>
 801113a:	4623      	mov	r3, r4
 801113c:	6864      	ldr	r4, [r4, #4]
 801113e:	e7b2      	b.n	80110a6 <_malloc_r+0x32>
 8011140:	4634      	mov	r4, r6
 8011142:	6876      	ldr	r6, [r6, #4]
 8011144:	e7b9      	b.n	80110ba <_malloc_r+0x46>
 8011146:	230c      	movs	r3, #12
 8011148:	603b      	str	r3, [r7, #0]
 801114a:	4638      	mov	r0, r7
 801114c:	f000 f83c 	bl	80111c8 <__malloc_unlock>
 8011150:	e7a1      	b.n	8011096 <_malloc_r+0x22>
 8011152:	6025      	str	r5, [r4, #0]
 8011154:	e7de      	b.n	8011114 <_malloc_r+0xa0>
 8011156:	bf00      	nop
 8011158:	20000fa0 	.word	0x20000fa0

0801115c <_sbrk_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4d06      	ldr	r5, [pc, #24]	; (8011178 <_sbrk_r+0x1c>)
 8011160:	2300      	movs	r3, #0
 8011162:	4604      	mov	r4, r0
 8011164:	4608      	mov	r0, r1
 8011166:	602b      	str	r3, [r5, #0]
 8011168:	f7f2 f894 	bl	8003294 <_sbrk>
 801116c:	1c43      	adds	r3, r0, #1
 801116e:	d102      	bne.n	8011176 <_sbrk_r+0x1a>
 8011170:	682b      	ldr	r3, [r5, #0]
 8011172:	b103      	cbz	r3, 8011176 <_sbrk_r+0x1a>
 8011174:	6023      	str	r3, [r4, #0]
 8011176:	bd38      	pop	{r3, r4, r5, pc}
 8011178:	20000fa8 	.word	0x20000fa8

0801117c <siprintf>:
 801117c:	b40e      	push	{r1, r2, r3}
 801117e:	b500      	push	{lr}
 8011180:	b09c      	sub	sp, #112	; 0x70
 8011182:	ab1d      	add	r3, sp, #116	; 0x74
 8011184:	9002      	str	r0, [sp, #8]
 8011186:	9006      	str	r0, [sp, #24]
 8011188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801118c:	4809      	ldr	r0, [pc, #36]	; (80111b4 <siprintf+0x38>)
 801118e:	9107      	str	r1, [sp, #28]
 8011190:	9104      	str	r1, [sp, #16]
 8011192:	4909      	ldr	r1, [pc, #36]	; (80111b8 <siprintf+0x3c>)
 8011194:	f853 2b04 	ldr.w	r2, [r3], #4
 8011198:	9105      	str	r1, [sp, #20]
 801119a:	6800      	ldr	r0, [r0, #0]
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	a902      	add	r1, sp, #8
 80111a0:	f000 f874 	bl	801128c <_svfiprintf_r>
 80111a4:	9b02      	ldr	r3, [sp, #8]
 80111a6:	2200      	movs	r2, #0
 80111a8:	701a      	strb	r2, [r3, #0]
 80111aa:	b01c      	add	sp, #112	; 0x70
 80111ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80111b0:	b003      	add	sp, #12
 80111b2:	4770      	bx	lr
 80111b4:	20000024 	.word	0x20000024
 80111b8:	ffff0208 	.word	0xffff0208

080111bc <__malloc_lock>:
 80111bc:	4801      	ldr	r0, [pc, #4]	; (80111c4 <__malloc_lock+0x8>)
 80111be:	f000 baf9 	b.w	80117b4 <__retarget_lock_acquire_recursive>
 80111c2:	bf00      	nop
 80111c4:	20000fac 	.word	0x20000fac

080111c8 <__malloc_unlock>:
 80111c8:	4801      	ldr	r0, [pc, #4]	; (80111d0 <__malloc_unlock+0x8>)
 80111ca:	f000 baf4 	b.w	80117b6 <__retarget_lock_release_recursive>
 80111ce:	bf00      	nop
 80111d0:	20000fac 	.word	0x20000fac

080111d4 <__ssputs_r>:
 80111d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d8:	688e      	ldr	r6, [r1, #8]
 80111da:	429e      	cmp	r6, r3
 80111dc:	4682      	mov	sl, r0
 80111de:	460c      	mov	r4, r1
 80111e0:	4690      	mov	r8, r2
 80111e2:	461f      	mov	r7, r3
 80111e4:	d838      	bhi.n	8011258 <__ssputs_r+0x84>
 80111e6:	898a      	ldrh	r2, [r1, #12]
 80111e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111ec:	d032      	beq.n	8011254 <__ssputs_r+0x80>
 80111ee:	6825      	ldr	r5, [r4, #0]
 80111f0:	6909      	ldr	r1, [r1, #16]
 80111f2:	eba5 0901 	sub.w	r9, r5, r1
 80111f6:	6965      	ldr	r5, [r4, #20]
 80111f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011200:	3301      	adds	r3, #1
 8011202:	444b      	add	r3, r9
 8011204:	106d      	asrs	r5, r5, #1
 8011206:	429d      	cmp	r5, r3
 8011208:	bf38      	it	cc
 801120a:	461d      	movcc	r5, r3
 801120c:	0553      	lsls	r3, r2, #21
 801120e:	d531      	bpl.n	8011274 <__ssputs_r+0xa0>
 8011210:	4629      	mov	r1, r5
 8011212:	f7ff ff2f 	bl	8011074 <_malloc_r>
 8011216:	4606      	mov	r6, r0
 8011218:	b950      	cbnz	r0, 8011230 <__ssputs_r+0x5c>
 801121a:	230c      	movs	r3, #12
 801121c:	f8ca 3000 	str.w	r3, [sl]
 8011220:	89a3      	ldrh	r3, [r4, #12]
 8011222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011226:	81a3      	strh	r3, [r4, #12]
 8011228:	f04f 30ff 	mov.w	r0, #4294967295
 801122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011230:	6921      	ldr	r1, [r4, #16]
 8011232:	464a      	mov	r2, r9
 8011234:	f7ff fe9c 	bl	8010f70 <memcpy>
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011242:	81a3      	strh	r3, [r4, #12]
 8011244:	6126      	str	r6, [r4, #16]
 8011246:	6165      	str	r5, [r4, #20]
 8011248:	444e      	add	r6, r9
 801124a:	eba5 0509 	sub.w	r5, r5, r9
 801124e:	6026      	str	r6, [r4, #0]
 8011250:	60a5      	str	r5, [r4, #8]
 8011252:	463e      	mov	r6, r7
 8011254:	42be      	cmp	r6, r7
 8011256:	d900      	bls.n	801125a <__ssputs_r+0x86>
 8011258:	463e      	mov	r6, r7
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	4632      	mov	r2, r6
 801125e:	4641      	mov	r1, r8
 8011260:	f000 faaa 	bl	80117b8 <memmove>
 8011264:	68a3      	ldr	r3, [r4, #8]
 8011266:	1b9b      	subs	r3, r3, r6
 8011268:	60a3      	str	r3, [r4, #8]
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	4433      	add	r3, r6
 801126e:	6023      	str	r3, [r4, #0]
 8011270:	2000      	movs	r0, #0
 8011272:	e7db      	b.n	801122c <__ssputs_r+0x58>
 8011274:	462a      	mov	r2, r5
 8011276:	f000 fab9 	bl	80117ec <_realloc_r>
 801127a:	4606      	mov	r6, r0
 801127c:	2800      	cmp	r0, #0
 801127e:	d1e1      	bne.n	8011244 <__ssputs_r+0x70>
 8011280:	6921      	ldr	r1, [r4, #16]
 8011282:	4650      	mov	r0, sl
 8011284:	f7ff fe8a 	bl	8010f9c <_free_r>
 8011288:	e7c7      	b.n	801121a <__ssputs_r+0x46>
	...

0801128c <_svfiprintf_r>:
 801128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011290:	4698      	mov	r8, r3
 8011292:	898b      	ldrh	r3, [r1, #12]
 8011294:	061b      	lsls	r3, r3, #24
 8011296:	b09d      	sub	sp, #116	; 0x74
 8011298:	4607      	mov	r7, r0
 801129a:	460d      	mov	r5, r1
 801129c:	4614      	mov	r4, r2
 801129e:	d50e      	bpl.n	80112be <_svfiprintf_r+0x32>
 80112a0:	690b      	ldr	r3, [r1, #16]
 80112a2:	b963      	cbnz	r3, 80112be <_svfiprintf_r+0x32>
 80112a4:	2140      	movs	r1, #64	; 0x40
 80112a6:	f7ff fee5 	bl	8011074 <_malloc_r>
 80112aa:	6028      	str	r0, [r5, #0]
 80112ac:	6128      	str	r0, [r5, #16]
 80112ae:	b920      	cbnz	r0, 80112ba <_svfiprintf_r+0x2e>
 80112b0:	230c      	movs	r3, #12
 80112b2:	603b      	str	r3, [r7, #0]
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	e0d1      	b.n	801145e <_svfiprintf_r+0x1d2>
 80112ba:	2340      	movs	r3, #64	; 0x40
 80112bc:	616b      	str	r3, [r5, #20]
 80112be:	2300      	movs	r3, #0
 80112c0:	9309      	str	r3, [sp, #36]	; 0x24
 80112c2:	2320      	movs	r3, #32
 80112c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80112cc:	2330      	movs	r3, #48	; 0x30
 80112ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011478 <_svfiprintf_r+0x1ec>
 80112d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112d6:	f04f 0901 	mov.w	r9, #1
 80112da:	4623      	mov	r3, r4
 80112dc:	469a      	mov	sl, r3
 80112de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112e2:	b10a      	cbz	r2, 80112e8 <_svfiprintf_r+0x5c>
 80112e4:	2a25      	cmp	r2, #37	; 0x25
 80112e6:	d1f9      	bne.n	80112dc <_svfiprintf_r+0x50>
 80112e8:	ebba 0b04 	subs.w	fp, sl, r4
 80112ec:	d00b      	beq.n	8011306 <_svfiprintf_r+0x7a>
 80112ee:	465b      	mov	r3, fp
 80112f0:	4622      	mov	r2, r4
 80112f2:	4629      	mov	r1, r5
 80112f4:	4638      	mov	r0, r7
 80112f6:	f7ff ff6d 	bl	80111d4 <__ssputs_r>
 80112fa:	3001      	adds	r0, #1
 80112fc:	f000 80aa 	beq.w	8011454 <_svfiprintf_r+0x1c8>
 8011300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011302:	445a      	add	r2, fp
 8011304:	9209      	str	r2, [sp, #36]	; 0x24
 8011306:	f89a 3000 	ldrb.w	r3, [sl]
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 80a2 	beq.w	8011454 <_svfiprintf_r+0x1c8>
 8011310:	2300      	movs	r3, #0
 8011312:	f04f 32ff 	mov.w	r2, #4294967295
 8011316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801131a:	f10a 0a01 	add.w	sl, sl, #1
 801131e:	9304      	str	r3, [sp, #16]
 8011320:	9307      	str	r3, [sp, #28]
 8011322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011326:	931a      	str	r3, [sp, #104]	; 0x68
 8011328:	4654      	mov	r4, sl
 801132a:	2205      	movs	r2, #5
 801132c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011330:	4851      	ldr	r0, [pc, #324]	; (8011478 <_svfiprintf_r+0x1ec>)
 8011332:	f7ee ff55 	bl	80001e0 <memchr>
 8011336:	9a04      	ldr	r2, [sp, #16]
 8011338:	b9d8      	cbnz	r0, 8011372 <_svfiprintf_r+0xe6>
 801133a:	06d0      	lsls	r0, r2, #27
 801133c:	bf44      	itt	mi
 801133e:	2320      	movmi	r3, #32
 8011340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011344:	0711      	lsls	r1, r2, #28
 8011346:	bf44      	itt	mi
 8011348:	232b      	movmi	r3, #43	; 0x2b
 801134a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801134e:	f89a 3000 	ldrb.w	r3, [sl]
 8011352:	2b2a      	cmp	r3, #42	; 0x2a
 8011354:	d015      	beq.n	8011382 <_svfiprintf_r+0xf6>
 8011356:	9a07      	ldr	r2, [sp, #28]
 8011358:	4654      	mov	r4, sl
 801135a:	2000      	movs	r0, #0
 801135c:	f04f 0c0a 	mov.w	ip, #10
 8011360:	4621      	mov	r1, r4
 8011362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011366:	3b30      	subs	r3, #48	; 0x30
 8011368:	2b09      	cmp	r3, #9
 801136a:	d94e      	bls.n	801140a <_svfiprintf_r+0x17e>
 801136c:	b1b0      	cbz	r0, 801139c <_svfiprintf_r+0x110>
 801136e:	9207      	str	r2, [sp, #28]
 8011370:	e014      	b.n	801139c <_svfiprintf_r+0x110>
 8011372:	eba0 0308 	sub.w	r3, r0, r8
 8011376:	fa09 f303 	lsl.w	r3, r9, r3
 801137a:	4313      	orrs	r3, r2
 801137c:	9304      	str	r3, [sp, #16]
 801137e:	46a2      	mov	sl, r4
 8011380:	e7d2      	b.n	8011328 <_svfiprintf_r+0x9c>
 8011382:	9b03      	ldr	r3, [sp, #12]
 8011384:	1d19      	adds	r1, r3, #4
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	9103      	str	r1, [sp, #12]
 801138a:	2b00      	cmp	r3, #0
 801138c:	bfbb      	ittet	lt
 801138e:	425b      	neglt	r3, r3
 8011390:	f042 0202 	orrlt.w	r2, r2, #2
 8011394:	9307      	strge	r3, [sp, #28]
 8011396:	9307      	strlt	r3, [sp, #28]
 8011398:	bfb8      	it	lt
 801139a:	9204      	strlt	r2, [sp, #16]
 801139c:	7823      	ldrb	r3, [r4, #0]
 801139e:	2b2e      	cmp	r3, #46	; 0x2e
 80113a0:	d10c      	bne.n	80113bc <_svfiprintf_r+0x130>
 80113a2:	7863      	ldrb	r3, [r4, #1]
 80113a4:	2b2a      	cmp	r3, #42	; 0x2a
 80113a6:	d135      	bne.n	8011414 <_svfiprintf_r+0x188>
 80113a8:	9b03      	ldr	r3, [sp, #12]
 80113aa:	1d1a      	adds	r2, r3, #4
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	9203      	str	r2, [sp, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	bfb8      	it	lt
 80113b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80113b8:	3402      	adds	r4, #2
 80113ba:	9305      	str	r3, [sp, #20]
 80113bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011488 <_svfiprintf_r+0x1fc>
 80113c0:	7821      	ldrb	r1, [r4, #0]
 80113c2:	2203      	movs	r2, #3
 80113c4:	4650      	mov	r0, sl
 80113c6:	f7ee ff0b 	bl	80001e0 <memchr>
 80113ca:	b140      	cbz	r0, 80113de <_svfiprintf_r+0x152>
 80113cc:	2340      	movs	r3, #64	; 0x40
 80113ce:	eba0 000a 	sub.w	r0, r0, sl
 80113d2:	fa03 f000 	lsl.w	r0, r3, r0
 80113d6:	9b04      	ldr	r3, [sp, #16]
 80113d8:	4303      	orrs	r3, r0
 80113da:	3401      	adds	r4, #1
 80113dc:	9304      	str	r3, [sp, #16]
 80113de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113e2:	4826      	ldr	r0, [pc, #152]	; (801147c <_svfiprintf_r+0x1f0>)
 80113e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113e8:	2206      	movs	r2, #6
 80113ea:	f7ee fef9 	bl	80001e0 <memchr>
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d038      	beq.n	8011464 <_svfiprintf_r+0x1d8>
 80113f2:	4b23      	ldr	r3, [pc, #140]	; (8011480 <_svfiprintf_r+0x1f4>)
 80113f4:	bb1b      	cbnz	r3, 801143e <_svfiprintf_r+0x1b2>
 80113f6:	9b03      	ldr	r3, [sp, #12]
 80113f8:	3307      	adds	r3, #7
 80113fa:	f023 0307 	bic.w	r3, r3, #7
 80113fe:	3308      	adds	r3, #8
 8011400:	9303      	str	r3, [sp, #12]
 8011402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011404:	4433      	add	r3, r6
 8011406:	9309      	str	r3, [sp, #36]	; 0x24
 8011408:	e767      	b.n	80112da <_svfiprintf_r+0x4e>
 801140a:	fb0c 3202 	mla	r2, ip, r2, r3
 801140e:	460c      	mov	r4, r1
 8011410:	2001      	movs	r0, #1
 8011412:	e7a5      	b.n	8011360 <_svfiprintf_r+0xd4>
 8011414:	2300      	movs	r3, #0
 8011416:	3401      	adds	r4, #1
 8011418:	9305      	str	r3, [sp, #20]
 801141a:	4619      	mov	r1, r3
 801141c:	f04f 0c0a 	mov.w	ip, #10
 8011420:	4620      	mov	r0, r4
 8011422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011426:	3a30      	subs	r2, #48	; 0x30
 8011428:	2a09      	cmp	r2, #9
 801142a:	d903      	bls.n	8011434 <_svfiprintf_r+0x1a8>
 801142c:	2b00      	cmp	r3, #0
 801142e:	d0c5      	beq.n	80113bc <_svfiprintf_r+0x130>
 8011430:	9105      	str	r1, [sp, #20]
 8011432:	e7c3      	b.n	80113bc <_svfiprintf_r+0x130>
 8011434:	fb0c 2101 	mla	r1, ip, r1, r2
 8011438:	4604      	mov	r4, r0
 801143a:	2301      	movs	r3, #1
 801143c:	e7f0      	b.n	8011420 <_svfiprintf_r+0x194>
 801143e:	ab03      	add	r3, sp, #12
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	462a      	mov	r2, r5
 8011444:	4b0f      	ldr	r3, [pc, #60]	; (8011484 <_svfiprintf_r+0x1f8>)
 8011446:	a904      	add	r1, sp, #16
 8011448:	4638      	mov	r0, r7
 801144a:	f3af 8000 	nop.w
 801144e:	1c42      	adds	r2, r0, #1
 8011450:	4606      	mov	r6, r0
 8011452:	d1d6      	bne.n	8011402 <_svfiprintf_r+0x176>
 8011454:	89ab      	ldrh	r3, [r5, #12]
 8011456:	065b      	lsls	r3, r3, #25
 8011458:	f53f af2c 	bmi.w	80112b4 <_svfiprintf_r+0x28>
 801145c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801145e:	b01d      	add	sp, #116	; 0x74
 8011460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011464:	ab03      	add	r3, sp, #12
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	462a      	mov	r2, r5
 801146a:	4b06      	ldr	r3, [pc, #24]	; (8011484 <_svfiprintf_r+0x1f8>)
 801146c:	a904      	add	r1, sp, #16
 801146e:	4638      	mov	r0, r7
 8011470:	f000 f87a 	bl	8011568 <_printf_i>
 8011474:	e7eb      	b.n	801144e <_svfiprintf_r+0x1c2>
 8011476:	bf00      	nop
 8011478:	08011e10 	.word	0x08011e10
 801147c:	08011e1a 	.word	0x08011e1a
 8011480:	00000000 	.word	0x00000000
 8011484:	080111d5 	.word	0x080111d5
 8011488:	08011e16 	.word	0x08011e16

0801148c <_printf_common>:
 801148c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011490:	4616      	mov	r6, r2
 8011492:	4699      	mov	r9, r3
 8011494:	688a      	ldr	r2, [r1, #8]
 8011496:	690b      	ldr	r3, [r1, #16]
 8011498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801149c:	4293      	cmp	r3, r2
 801149e:	bfb8      	it	lt
 80114a0:	4613      	movlt	r3, r2
 80114a2:	6033      	str	r3, [r6, #0]
 80114a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114a8:	4607      	mov	r7, r0
 80114aa:	460c      	mov	r4, r1
 80114ac:	b10a      	cbz	r2, 80114b2 <_printf_common+0x26>
 80114ae:	3301      	adds	r3, #1
 80114b0:	6033      	str	r3, [r6, #0]
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	0699      	lsls	r1, r3, #26
 80114b6:	bf42      	ittt	mi
 80114b8:	6833      	ldrmi	r3, [r6, #0]
 80114ba:	3302      	addmi	r3, #2
 80114bc:	6033      	strmi	r3, [r6, #0]
 80114be:	6825      	ldr	r5, [r4, #0]
 80114c0:	f015 0506 	ands.w	r5, r5, #6
 80114c4:	d106      	bne.n	80114d4 <_printf_common+0x48>
 80114c6:	f104 0a19 	add.w	sl, r4, #25
 80114ca:	68e3      	ldr	r3, [r4, #12]
 80114cc:	6832      	ldr	r2, [r6, #0]
 80114ce:	1a9b      	subs	r3, r3, r2
 80114d0:	42ab      	cmp	r3, r5
 80114d2:	dc26      	bgt.n	8011522 <_printf_common+0x96>
 80114d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80114d8:	1e13      	subs	r3, r2, #0
 80114da:	6822      	ldr	r2, [r4, #0]
 80114dc:	bf18      	it	ne
 80114de:	2301      	movne	r3, #1
 80114e0:	0692      	lsls	r2, r2, #26
 80114e2:	d42b      	bmi.n	801153c <_printf_common+0xb0>
 80114e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114e8:	4649      	mov	r1, r9
 80114ea:	4638      	mov	r0, r7
 80114ec:	47c0      	blx	r8
 80114ee:	3001      	adds	r0, #1
 80114f0:	d01e      	beq.n	8011530 <_printf_common+0xa4>
 80114f2:	6823      	ldr	r3, [r4, #0]
 80114f4:	68e5      	ldr	r5, [r4, #12]
 80114f6:	6832      	ldr	r2, [r6, #0]
 80114f8:	f003 0306 	and.w	r3, r3, #6
 80114fc:	2b04      	cmp	r3, #4
 80114fe:	bf08      	it	eq
 8011500:	1aad      	subeq	r5, r5, r2
 8011502:	68a3      	ldr	r3, [r4, #8]
 8011504:	6922      	ldr	r2, [r4, #16]
 8011506:	bf0c      	ite	eq
 8011508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801150c:	2500      	movne	r5, #0
 801150e:	4293      	cmp	r3, r2
 8011510:	bfc4      	itt	gt
 8011512:	1a9b      	subgt	r3, r3, r2
 8011514:	18ed      	addgt	r5, r5, r3
 8011516:	2600      	movs	r6, #0
 8011518:	341a      	adds	r4, #26
 801151a:	42b5      	cmp	r5, r6
 801151c:	d11a      	bne.n	8011554 <_printf_common+0xc8>
 801151e:	2000      	movs	r0, #0
 8011520:	e008      	b.n	8011534 <_printf_common+0xa8>
 8011522:	2301      	movs	r3, #1
 8011524:	4652      	mov	r2, sl
 8011526:	4649      	mov	r1, r9
 8011528:	4638      	mov	r0, r7
 801152a:	47c0      	blx	r8
 801152c:	3001      	adds	r0, #1
 801152e:	d103      	bne.n	8011538 <_printf_common+0xac>
 8011530:	f04f 30ff 	mov.w	r0, #4294967295
 8011534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011538:	3501      	adds	r5, #1
 801153a:	e7c6      	b.n	80114ca <_printf_common+0x3e>
 801153c:	18e1      	adds	r1, r4, r3
 801153e:	1c5a      	adds	r2, r3, #1
 8011540:	2030      	movs	r0, #48	; 0x30
 8011542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011546:	4422      	add	r2, r4
 8011548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801154c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011550:	3302      	adds	r3, #2
 8011552:	e7c7      	b.n	80114e4 <_printf_common+0x58>
 8011554:	2301      	movs	r3, #1
 8011556:	4622      	mov	r2, r4
 8011558:	4649      	mov	r1, r9
 801155a:	4638      	mov	r0, r7
 801155c:	47c0      	blx	r8
 801155e:	3001      	adds	r0, #1
 8011560:	d0e6      	beq.n	8011530 <_printf_common+0xa4>
 8011562:	3601      	adds	r6, #1
 8011564:	e7d9      	b.n	801151a <_printf_common+0x8e>
	...

08011568 <_printf_i>:
 8011568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801156c:	7e0f      	ldrb	r7, [r1, #24]
 801156e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011570:	2f78      	cmp	r7, #120	; 0x78
 8011572:	4691      	mov	r9, r2
 8011574:	4680      	mov	r8, r0
 8011576:	460c      	mov	r4, r1
 8011578:	469a      	mov	sl, r3
 801157a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801157e:	d807      	bhi.n	8011590 <_printf_i+0x28>
 8011580:	2f62      	cmp	r7, #98	; 0x62
 8011582:	d80a      	bhi.n	801159a <_printf_i+0x32>
 8011584:	2f00      	cmp	r7, #0
 8011586:	f000 80d8 	beq.w	801173a <_printf_i+0x1d2>
 801158a:	2f58      	cmp	r7, #88	; 0x58
 801158c:	f000 80a3 	beq.w	80116d6 <_printf_i+0x16e>
 8011590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011598:	e03a      	b.n	8011610 <_printf_i+0xa8>
 801159a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801159e:	2b15      	cmp	r3, #21
 80115a0:	d8f6      	bhi.n	8011590 <_printf_i+0x28>
 80115a2:	a101      	add	r1, pc, #4	; (adr r1, 80115a8 <_printf_i+0x40>)
 80115a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115a8:	08011601 	.word	0x08011601
 80115ac:	08011615 	.word	0x08011615
 80115b0:	08011591 	.word	0x08011591
 80115b4:	08011591 	.word	0x08011591
 80115b8:	08011591 	.word	0x08011591
 80115bc:	08011591 	.word	0x08011591
 80115c0:	08011615 	.word	0x08011615
 80115c4:	08011591 	.word	0x08011591
 80115c8:	08011591 	.word	0x08011591
 80115cc:	08011591 	.word	0x08011591
 80115d0:	08011591 	.word	0x08011591
 80115d4:	08011721 	.word	0x08011721
 80115d8:	08011645 	.word	0x08011645
 80115dc:	08011703 	.word	0x08011703
 80115e0:	08011591 	.word	0x08011591
 80115e4:	08011591 	.word	0x08011591
 80115e8:	08011743 	.word	0x08011743
 80115ec:	08011591 	.word	0x08011591
 80115f0:	08011645 	.word	0x08011645
 80115f4:	08011591 	.word	0x08011591
 80115f8:	08011591 	.word	0x08011591
 80115fc:	0801170b 	.word	0x0801170b
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	1d1a      	adds	r2, r3, #4
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	602a      	str	r2, [r5, #0]
 8011608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801160c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011610:	2301      	movs	r3, #1
 8011612:	e0a3      	b.n	801175c <_printf_i+0x1f4>
 8011614:	6820      	ldr	r0, [r4, #0]
 8011616:	6829      	ldr	r1, [r5, #0]
 8011618:	0606      	lsls	r6, r0, #24
 801161a:	f101 0304 	add.w	r3, r1, #4
 801161e:	d50a      	bpl.n	8011636 <_printf_i+0xce>
 8011620:	680e      	ldr	r6, [r1, #0]
 8011622:	602b      	str	r3, [r5, #0]
 8011624:	2e00      	cmp	r6, #0
 8011626:	da03      	bge.n	8011630 <_printf_i+0xc8>
 8011628:	232d      	movs	r3, #45	; 0x2d
 801162a:	4276      	negs	r6, r6
 801162c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011630:	485e      	ldr	r0, [pc, #376]	; (80117ac <_printf_i+0x244>)
 8011632:	230a      	movs	r3, #10
 8011634:	e019      	b.n	801166a <_printf_i+0x102>
 8011636:	680e      	ldr	r6, [r1, #0]
 8011638:	602b      	str	r3, [r5, #0]
 801163a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801163e:	bf18      	it	ne
 8011640:	b236      	sxthne	r6, r6
 8011642:	e7ef      	b.n	8011624 <_printf_i+0xbc>
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	6820      	ldr	r0, [r4, #0]
 8011648:	1d19      	adds	r1, r3, #4
 801164a:	6029      	str	r1, [r5, #0]
 801164c:	0601      	lsls	r1, r0, #24
 801164e:	d501      	bpl.n	8011654 <_printf_i+0xec>
 8011650:	681e      	ldr	r6, [r3, #0]
 8011652:	e002      	b.n	801165a <_printf_i+0xf2>
 8011654:	0646      	lsls	r6, r0, #25
 8011656:	d5fb      	bpl.n	8011650 <_printf_i+0xe8>
 8011658:	881e      	ldrh	r6, [r3, #0]
 801165a:	4854      	ldr	r0, [pc, #336]	; (80117ac <_printf_i+0x244>)
 801165c:	2f6f      	cmp	r7, #111	; 0x6f
 801165e:	bf0c      	ite	eq
 8011660:	2308      	moveq	r3, #8
 8011662:	230a      	movne	r3, #10
 8011664:	2100      	movs	r1, #0
 8011666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801166a:	6865      	ldr	r5, [r4, #4]
 801166c:	60a5      	str	r5, [r4, #8]
 801166e:	2d00      	cmp	r5, #0
 8011670:	bfa2      	ittt	ge
 8011672:	6821      	ldrge	r1, [r4, #0]
 8011674:	f021 0104 	bicge.w	r1, r1, #4
 8011678:	6021      	strge	r1, [r4, #0]
 801167a:	b90e      	cbnz	r6, 8011680 <_printf_i+0x118>
 801167c:	2d00      	cmp	r5, #0
 801167e:	d04d      	beq.n	801171c <_printf_i+0x1b4>
 8011680:	4615      	mov	r5, r2
 8011682:	fbb6 f1f3 	udiv	r1, r6, r3
 8011686:	fb03 6711 	mls	r7, r3, r1, r6
 801168a:	5dc7      	ldrb	r7, [r0, r7]
 801168c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011690:	4637      	mov	r7, r6
 8011692:	42bb      	cmp	r3, r7
 8011694:	460e      	mov	r6, r1
 8011696:	d9f4      	bls.n	8011682 <_printf_i+0x11a>
 8011698:	2b08      	cmp	r3, #8
 801169a:	d10b      	bne.n	80116b4 <_printf_i+0x14c>
 801169c:	6823      	ldr	r3, [r4, #0]
 801169e:	07de      	lsls	r6, r3, #31
 80116a0:	d508      	bpl.n	80116b4 <_printf_i+0x14c>
 80116a2:	6923      	ldr	r3, [r4, #16]
 80116a4:	6861      	ldr	r1, [r4, #4]
 80116a6:	4299      	cmp	r1, r3
 80116a8:	bfde      	ittt	le
 80116aa:	2330      	movle	r3, #48	; 0x30
 80116ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80116b4:	1b52      	subs	r2, r2, r5
 80116b6:	6122      	str	r2, [r4, #16]
 80116b8:	f8cd a000 	str.w	sl, [sp]
 80116bc:	464b      	mov	r3, r9
 80116be:	aa03      	add	r2, sp, #12
 80116c0:	4621      	mov	r1, r4
 80116c2:	4640      	mov	r0, r8
 80116c4:	f7ff fee2 	bl	801148c <_printf_common>
 80116c8:	3001      	adds	r0, #1
 80116ca:	d14c      	bne.n	8011766 <_printf_i+0x1fe>
 80116cc:	f04f 30ff 	mov.w	r0, #4294967295
 80116d0:	b004      	add	sp, #16
 80116d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d6:	4835      	ldr	r0, [pc, #212]	; (80117ac <_printf_i+0x244>)
 80116d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80116dc:	6829      	ldr	r1, [r5, #0]
 80116de:	6823      	ldr	r3, [r4, #0]
 80116e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80116e4:	6029      	str	r1, [r5, #0]
 80116e6:	061d      	lsls	r5, r3, #24
 80116e8:	d514      	bpl.n	8011714 <_printf_i+0x1ac>
 80116ea:	07df      	lsls	r7, r3, #31
 80116ec:	bf44      	itt	mi
 80116ee:	f043 0320 	orrmi.w	r3, r3, #32
 80116f2:	6023      	strmi	r3, [r4, #0]
 80116f4:	b91e      	cbnz	r6, 80116fe <_printf_i+0x196>
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	f023 0320 	bic.w	r3, r3, #32
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	2310      	movs	r3, #16
 8011700:	e7b0      	b.n	8011664 <_printf_i+0xfc>
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	f043 0320 	orr.w	r3, r3, #32
 8011708:	6023      	str	r3, [r4, #0]
 801170a:	2378      	movs	r3, #120	; 0x78
 801170c:	4828      	ldr	r0, [pc, #160]	; (80117b0 <_printf_i+0x248>)
 801170e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011712:	e7e3      	b.n	80116dc <_printf_i+0x174>
 8011714:	0659      	lsls	r1, r3, #25
 8011716:	bf48      	it	mi
 8011718:	b2b6      	uxthmi	r6, r6
 801171a:	e7e6      	b.n	80116ea <_printf_i+0x182>
 801171c:	4615      	mov	r5, r2
 801171e:	e7bb      	b.n	8011698 <_printf_i+0x130>
 8011720:	682b      	ldr	r3, [r5, #0]
 8011722:	6826      	ldr	r6, [r4, #0]
 8011724:	6961      	ldr	r1, [r4, #20]
 8011726:	1d18      	adds	r0, r3, #4
 8011728:	6028      	str	r0, [r5, #0]
 801172a:	0635      	lsls	r5, r6, #24
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	d501      	bpl.n	8011734 <_printf_i+0x1cc>
 8011730:	6019      	str	r1, [r3, #0]
 8011732:	e002      	b.n	801173a <_printf_i+0x1d2>
 8011734:	0670      	lsls	r0, r6, #25
 8011736:	d5fb      	bpl.n	8011730 <_printf_i+0x1c8>
 8011738:	8019      	strh	r1, [r3, #0]
 801173a:	2300      	movs	r3, #0
 801173c:	6123      	str	r3, [r4, #16]
 801173e:	4615      	mov	r5, r2
 8011740:	e7ba      	b.n	80116b8 <_printf_i+0x150>
 8011742:	682b      	ldr	r3, [r5, #0]
 8011744:	1d1a      	adds	r2, r3, #4
 8011746:	602a      	str	r2, [r5, #0]
 8011748:	681d      	ldr	r5, [r3, #0]
 801174a:	6862      	ldr	r2, [r4, #4]
 801174c:	2100      	movs	r1, #0
 801174e:	4628      	mov	r0, r5
 8011750:	f7ee fd46 	bl	80001e0 <memchr>
 8011754:	b108      	cbz	r0, 801175a <_printf_i+0x1f2>
 8011756:	1b40      	subs	r0, r0, r5
 8011758:	6060      	str	r0, [r4, #4]
 801175a:	6863      	ldr	r3, [r4, #4]
 801175c:	6123      	str	r3, [r4, #16]
 801175e:	2300      	movs	r3, #0
 8011760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011764:	e7a8      	b.n	80116b8 <_printf_i+0x150>
 8011766:	6923      	ldr	r3, [r4, #16]
 8011768:	462a      	mov	r2, r5
 801176a:	4649      	mov	r1, r9
 801176c:	4640      	mov	r0, r8
 801176e:	47d0      	blx	sl
 8011770:	3001      	adds	r0, #1
 8011772:	d0ab      	beq.n	80116cc <_printf_i+0x164>
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	079b      	lsls	r3, r3, #30
 8011778:	d413      	bmi.n	80117a2 <_printf_i+0x23a>
 801177a:	68e0      	ldr	r0, [r4, #12]
 801177c:	9b03      	ldr	r3, [sp, #12]
 801177e:	4298      	cmp	r0, r3
 8011780:	bfb8      	it	lt
 8011782:	4618      	movlt	r0, r3
 8011784:	e7a4      	b.n	80116d0 <_printf_i+0x168>
 8011786:	2301      	movs	r3, #1
 8011788:	4632      	mov	r2, r6
 801178a:	4649      	mov	r1, r9
 801178c:	4640      	mov	r0, r8
 801178e:	47d0      	blx	sl
 8011790:	3001      	adds	r0, #1
 8011792:	d09b      	beq.n	80116cc <_printf_i+0x164>
 8011794:	3501      	adds	r5, #1
 8011796:	68e3      	ldr	r3, [r4, #12]
 8011798:	9903      	ldr	r1, [sp, #12]
 801179a:	1a5b      	subs	r3, r3, r1
 801179c:	42ab      	cmp	r3, r5
 801179e:	dcf2      	bgt.n	8011786 <_printf_i+0x21e>
 80117a0:	e7eb      	b.n	801177a <_printf_i+0x212>
 80117a2:	2500      	movs	r5, #0
 80117a4:	f104 0619 	add.w	r6, r4, #25
 80117a8:	e7f5      	b.n	8011796 <_printf_i+0x22e>
 80117aa:	bf00      	nop
 80117ac:	08011e21 	.word	0x08011e21
 80117b0:	08011e32 	.word	0x08011e32

080117b4 <__retarget_lock_acquire_recursive>:
 80117b4:	4770      	bx	lr

080117b6 <__retarget_lock_release_recursive>:
 80117b6:	4770      	bx	lr

080117b8 <memmove>:
 80117b8:	4288      	cmp	r0, r1
 80117ba:	b510      	push	{r4, lr}
 80117bc:	eb01 0402 	add.w	r4, r1, r2
 80117c0:	d902      	bls.n	80117c8 <memmove+0x10>
 80117c2:	4284      	cmp	r4, r0
 80117c4:	4623      	mov	r3, r4
 80117c6:	d807      	bhi.n	80117d8 <memmove+0x20>
 80117c8:	1e43      	subs	r3, r0, #1
 80117ca:	42a1      	cmp	r1, r4
 80117cc:	d008      	beq.n	80117e0 <memmove+0x28>
 80117ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117d6:	e7f8      	b.n	80117ca <memmove+0x12>
 80117d8:	4402      	add	r2, r0
 80117da:	4601      	mov	r1, r0
 80117dc:	428a      	cmp	r2, r1
 80117de:	d100      	bne.n	80117e2 <memmove+0x2a>
 80117e0:	bd10      	pop	{r4, pc}
 80117e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117ea:	e7f7      	b.n	80117dc <memmove+0x24>

080117ec <_realloc_r>:
 80117ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f0:	4680      	mov	r8, r0
 80117f2:	4614      	mov	r4, r2
 80117f4:	460e      	mov	r6, r1
 80117f6:	b921      	cbnz	r1, 8011802 <_realloc_r+0x16>
 80117f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117fc:	4611      	mov	r1, r2
 80117fe:	f7ff bc39 	b.w	8011074 <_malloc_r>
 8011802:	b92a      	cbnz	r2, 8011810 <_realloc_r+0x24>
 8011804:	f7ff fbca 	bl	8010f9c <_free_r>
 8011808:	4625      	mov	r5, r4
 801180a:	4628      	mov	r0, r5
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	f000 f81b 	bl	801184a <_malloc_usable_size_r>
 8011814:	4284      	cmp	r4, r0
 8011816:	4607      	mov	r7, r0
 8011818:	d802      	bhi.n	8011820 <_realloc_r+0x34>
 801181a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801181e:	d812      	bhi.n	8011846 <_realloc_r+0x5a>
 8011820:	4621      	mov	r1, r4
 8011822:	4640      	mov	r0, r8
 8011824:	f7ff fc26 	bl	8011074 <_malloc_r>
 8011828:	4605      	mov	r5, r0
 801182a:	2800      	cmp	r0, #0
 801182c:	d0ed      	beq.n	801180a <_realloc_r+0x1e>
 801182e:	42bc      	cmp	r4, r7
 8011830:	4622      	mov	r2, r4
 8011832:	4631      	mov	r1, r6
 8011834:	bf28      	it	cs
 8011836:	463a      	movcs	r2, r7
 8011838:	f7ff fb9a 	bl	8010f70 <memcpy>
 801183c:	4631      	mov	r1, r6
 801183e:	4640      	mov	r0, r8
 8011840:	f7ff fbac 	bl	8010f9c <_free_r>
 8011844:	e7e1      	b.n	801180a <_realloc_r+0x1e>
 8011846:	4635      	mov	r5, r6
 8011848:	e7df      	b.n	801180a <_realloc_r+0x1e>

0801184a <_malloc_usable_size_r>:
 801184a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801184e:	1f18      	subs	r0, r3, #4
 8011850:	2b00      	cmp	r3, #0
 8011852:	bfbc      	itt	lt
 8011854:	580b      	ldrlt	r3, [r1, r0]
 8011856:	18c0      	addlt	r0, r0, r3
 8011858:	4770      	bx	lr
	...

0801185c <_init>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	bf00      	nop
 8011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011862:	bc08      	pop	{r3}
 8011864:	469e      	mov	lr, r3
 8011866:	4770      	bx	lr

08011868 <_fini>:
 8011868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186a:	bf00      	nop
 801186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801186e:	bc08      	pop	{r3}
 8011870:	469e      	mov	lr, r3
 8011872:	4770      	bx	lr
