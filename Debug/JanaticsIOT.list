
JanaticsIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800f7a4  0800f7a4  0001f7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd20  0800fd20  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd20  0800fd20  0001fd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd28  0800fd28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fd28  0800fd28  0001fd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800fd38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca0  20000078  0800fdb0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  0800fdb0  00020d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f42b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ccb  00000000  00000000  0003f4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  000441a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  00045ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000706f  00000000  00000000  00047260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d38  00000000  00000000  0004e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000decb1  00000000  00000000  00070007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ecb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c7c  00000000  00000000  0014ed08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f78c 	.word	0x0800f78c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f78c 	.word	0x0800f78c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ESPRXDataSeg>:
extern void W25qxx_EraseSector(uint32_t SectorAddr);

void ReadOnlineData(void);

void ESPRXDataSeg(void)
{
 8000584:	b490      	push	{r4, r7}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
	uint16_t ReceivePLCData,ReceivePLCData2,ReceivePLCData3,ReceivePLCData4;
	uint16_t ReceivePLCData7;
	uint8_t ReceivePLCData11,ReceivePLCData12,ReceivePLCData13,ReceivePLCData14;
	uint8_t ReceivePLCData5,ReceivePLCData6,ReceivePLCData8,ReceivePLCData9,ReceivePLCData10;
	uint8_t UpdateOLdataMem  =0;
 800058a:	2300      	movs	r3, #0
 800058c:	75fb      	strb	r3, [r7, #23]
	uint8_t FlashWriteOLdata[10];
	if(!RxCompleteU2C1WIFI){return;}
 800058e:	4b75      	ldr	r3, [pc, #468]	; (8000764 <ESPRXDataSeg+0x1e0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	f000 80e0 	beq.w	8000758 <ESPRXDataSeg+0x1d4>
	RxCompleteU2C1WIFI=0;
 8000598:	4b72      	ldr	r3, [pc, #456]	; (8000764 <ESPRXDataSeg+0x1e0>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]

	ReceivePLCData  = Uart_rx_buffer[19]+(Uart_rx_buffer[18]*10)+(Uart_rx_buffer[17]*100)+(Uart_rx_buffer[16]*1000)+(Uart_rx_buffer[15]*10000);//Production
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80005a0:	7cdb      	ldrb	r3, [r3, #19]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b70      	ldr	r3, [pc, #448]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80005a6:	7c5b      	ldrb	r3, [r3, #17]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	0089      	lsls	r1, r1, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	4619      	mov	r1, r3
 80005b2:	0088      	lsls	r0, r1, #2
 80005b4:	4619      	mov	r1, r3
 80005b6:	4603      	mov	r3, r0
 80005b8:	440b      	add	r3, r1
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	b299      	uxth	r1, r3
 80005be:	4b6a      	ldr	r3, [pc, #424]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80005c0:	7c9b      	ldrb	r3, [r3, #18]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	0080      	lsls	r0, r0, #2
 80005c8:	4403      	add	r3, r0
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	440b      	add	r3, r1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	4413      	add	r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80005d8:	7bdb      	ldrb	r3, [r3, #15]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	0149      	lsls	r1, r1, #5
 80005e0:	1ac9      	subs	r1, r1, r3
 80005e2:	0089      	lsls	r1, r1, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	4619      	mov	r1, r3
 80005e8:	0088      	lsls	r0, r1, #2
 80005ea:	4619      	mov	r1, r3
 80005ec:	4603      	mov	r3, r0
 80005ee:	440b      	add	r3, r1
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	b299      	uxth	r1, r3
 80005f4:	4b5c      	ldr	r3, [pc, #368]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80005f6:	7c1b      	ldrb	r3, [r3, #16]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	0140      	lsls	r0, r0, #5
 80005fe:	1ac0      	subs	r0, r0, r3
 8000600:	0080      	lsls	r0, r0, #2
 8000602:	4403      	add	r3, r0
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	b29b      	uxth	r3, r3
 8000608:	440b      	add	r3, r1
 800060a:	b29b      	uxth	r3, r3
 800060c:	4413      	add	r3, r2
 800060e:	82bb      	strh	r3, [r7, #20]
	ReceivePLCData2 = Uart_rx_buffer[24]+(Uart_rx_buffer[23]*10)+(Uart_rx_buffer[22]*100)+(Uart_rx_buffer[21]*1000)+(Uart_rx_buffer[20]*10000);//Rejection
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000612:	7e1b      	ldrb	r3, [r3, #24]
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b54      	ldr	r3, [pc, #336]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000618:	7d9b      	ldrb	r3, [r3, #22]
 800061a:	b29b      	uxth	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	0089      	lsls	r1, r1, #2
 8000620:	440b      	add	r3, r1
 8000622:	4619      	mov	r1, r3
 8000624:	0088      	lsls	r0, r1, #2
 8000626:	4619      	mov	r1, r3
 8000628:	4603      	mov	r3, r0
 800062a:	440b      	add	r3, r1
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	b299      	uxth	r1, r3
 8000630:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000632:	7ddb      	ldrb	r3, [r3, #23]
 8000634:	b29b      	uxth	r3, r3
 8000636:	4618      	mov	r0, r3
 8000638:	0080      	lsls	r0, r0, #2
 800063a:	4403      	add	r3, r0
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	b29b      	uxth	r3, r3
 8000640:	440b      	add	r3, r1
 8000642:	b29b      	uxth	r3, r3
 8000644:	4413      	add	r3, r2
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <ESPRXDataSeg+0x1e4>)
 800064a:	7d1b      	ldrb	r3, [r3, #20]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	0149      	lsls	r1, r1, #5
 8000652:	1ac9      	subs	r1, r1, r3
 8000654:	0089      	lsls	r1, r1, #2
 8000656:	440b      	add	r3, r1
 8000658:	4619      	mov	r1, r3
 800065a:	0088      	lsls	r0, r1, #2
 800065c:	4619      	mov	r1, r3
 800065e:	4603      	mov	r3, r0
 8000660:	440b      	add	r3, r1
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	b299      	uxth	r1, r3
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000668:	7d5b      	ldrb	r3, [r3, #21]
 800066a:	b29b      	uxth	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	0140      	lsls	r0, r0, #5
 8000670:	1ac0      	subs	r0, r0, r3
 8000672:	0080      	lsls	r0, r0, #2
 8000674:	4403      	add	r3, r0
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	b29b      	uxth	r3, r3
 800067a:	440b      	add	r3, r1
 800067c:	b29b      	uxth	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	827b      	strh	r3, [r7, #18]
/*	ReceivePLCData3 = Uart_rx_buffer[11]+(Uart_rx_buffer[10]*10)+(Uart_rx_buffer[9]*100)+(Uart_rx_buffer[8]*1000); //Metal Temperature Low set
	ReceivePLCData4 = Uart_rx_buffer[15]+(Uart_rx_buffer[14]*10)+(Uart_rx_buffer[13]*100)+(Uart_rx_buffer[12]*1000);//Process Time
*/
	ReceivePLCData4 = Uart_rx_buffer[2]+Uart_rx_buffer[1]*100+(Uart_rx_buffer[0]*10);
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000684:	789b      	ldrb	r3, [r3, #2]
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b37      	ldr	r3, [pc, #220]	; (8000768 <ESPRXDataSeg+0x1e4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b29b      	uxth	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	0089      	lsls	r1, r1, #2
 8000692:	440b      	add	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b299      	uxth	r1, r3
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <ESPRXDataSeg+0x1e4>)
 800069a:	785b      	ldrb	r3, [r3, #1]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	0080      	lsls	r0, r0, #2
 80006a2:	4403      	add	r3, r0
 80006a4:	4618      	mov	r0, r3
 80006a6:	0084      	lsls	r4, r0, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	4623      	mov	r3, r4
 80006ac:	4403      	add	r3, r0
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	440b      	add	r3, r1
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	823b      	strh	r3, [r7, #16]
	//Date,Month,Year
	ReceivePLCData5 = Uart_rx_buffer[4]+(Uart_rx_buffer[3]*10);//SW_Date
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80006bc:	791a      	ldrb	r2, [r3, #4]
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80006c0:	78db      	ldrb	r3, [r3, #3]
 80006c2:	4619      	mov	r1, r3
 80006c4:	0089      	lsls	r1, r1, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	73fb      	strb	r3, [r7, #15]
	ReceivePLCData6 = Uart_rx_buffer[6]+(Uart_rx_buffer[5]*10);//SW_Month
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80006d2:	799a      	ldrb	r2, [r3, #6]
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	4619      	mov	r1, r3
 80006da:	0089      	lsls	r1, r1, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	73bb      	strb	r3, [r7, #14]
	ReceivePLCData7 = Uart_rx_buffer[8]+(Uart_rx_buffer[7]*10);//SW_Year
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80006e8:	7a1b      	ldrb	r3, [r3, #8]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <ESPRXDataSeg+0x1e4>)
 80006ee:	79db      	ldrb	r3, [r3, #7]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	0089      	lsls	r1, r1, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	81bb      	strh	r3, [r7, #12]
	ReceivePLCData8 = Uart_rx_buffer[10]+(Uart_rx_buffer[9]*10);//SW_Hour
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000702:	7a9a      	ldrb	r2, [r3, #10]
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000706:	7a5b      	ldrb	r3, [r3, #9]
 8000708:	4619      	mov	r1, r3
 800070a:	0089      	lsls	r1, r1, #2
 800070c:	440b      	add	r3, r1
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4413      	add	r3, r2
 8000714:	72fb      	strb	r3, [r7, #11]
	ReceivePLCData9 = Uart_rx_buffer[12]+(Uart_rx_buffer[11]*10);//SW_Minute
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <ESPRXDataSeg+0x1e4>)
 8000718:	7b1a      	ldrb	r2, [r3, #12]
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <ESPRXDataSeg+0x1e4>)
 800071c:	7adb      	ldrb	r3, [r3, #11]
 800071e:	4619      	mov	r1, r3
 8000720:	0089      	lsls	r1, r1, #2
 8000722:	440b      	add	r3, r1
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4413      	add	r3, r2
 800072a:	72bb      	strb	r3, [r7, #10]
	ReceivePLCData11 = Uart_rx_buffer[30]+(Uart_rx_buffer[29]*10);//Hys +
	ReceivePLCData12 = Uart_rx_buffer[32]+(Uart_rx_buffer[31]*10);//Hys -
	ReceivePLCData13 = Uart_rx_buffer[34]+(Uart_rx_buffer[33]*10);//Production reset status
	ReceivePLCData14 = Uart_rx_buffer[36]+(Uart_rx_buffer[35]*10);//Entry Status
*/
	SW_Hour = ReceivePLCData8;
 800072c:	4a0f      	ldr	r2, [pc, #60]	; (800076c <ESPRXDataSeg+0x1e8>)
 800072e:	7afb      	ldrb	r3, [r7, #11]
 8000730:	7013      	strb	r3, [r2, #0]
	SW_Minute = ReceivePLCData9;
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <ESPRXDataSeg+0x1ec>)
 8000734:	7abb      	ldrb	r3, [r7, #10]
 8000736:	7013      	strb	r3, [r2, #0]
	SW_Date = ReceivePLCData5;
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <ESPRXDataSeg+0x1f0>)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	7013      	strb	r3, [r2, #0]
	SW_Month = ReceivePLCData6;
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <ESPRXDataSeg+0x1f4>)
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	7013      	strb	r3, [r2, #0]
	SW_Year = 23;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <ESPRXDataSeg+0x1f8>)
 8000746:	2217      	movs	r2, #23
 8000748:	701a      	strb	r2, [r3, #0]

	Production_Total = ReceivePLCData;
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <ESPRXDataSeg+0x1fc>)
 800074c:	8abb      	ldrh	r3, [r7, #20]
 800074e:	8013      	strh	r3, [r2, #0]
	Rejection_Total = ReceivePLCData2;
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <ESPRXDataSeg+0x200>)
 8000752:	8a7b      	ldrh	r3, [r7, #18]
 8000754:	8013      	strh	r3, [r2, #0]
 8000756:	e000      	b.n	800075a <ESPRXDataSeg+0x1d6>
	if(!RxCompleteU2C1WIFI){return;}
 8000758:	bf00      	nop


}
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bc90      	pop	{r4, r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000df 	.word	0x200000df
 8000768:	20000094 	.word	0x20000094
 800076c:	200000e1 	.word	0x200000e1
 8000770:	200000e2 	.word	0x200000e2
 8000774:	200000e3 	.word	0x200000e3
 8000778:	200000e4 	.word	0x200000e4
 800077c:	200000e5 	.word	0x200000e5
 8000780:	200000ee 	.word	0x200000ee
 8000784:	200000f0 	.word	0x200000f0

08000788 <ESPRxDecoder>:
	productionhysNegSetOL   = FlashReadOLdata[9];
}


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	3b01      	subs	r3, #1
 800079c:	2b09      	cmp	r3, #9
 800079e:	f200 86cf 	bhi.w	8001540 <ESPRxDecoder+0xdb8>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <ESPRxDecoder+0x20>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007d1 	.word	0x080007d1
 80007ac:	080008e7 	.word	0x080008e7
 80007b0:	08000925 	.word	0x08000925
 80007b4:	08000b35 	.word	0x08000b35
 80007b8:	08000b73 	.word	0x08000b73
 80007bc:	08000d89 	.word	0x08000d89
 80007c0:	08000dad 	.word	0x08000dad
 80007c4:	0800150b 	.word	0x0800150b
 80007c8:	08001541 	.word	0x08001541
 80007cc:	08000ad9 	.word	0x08000ad9
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b4f      	cmp	r3, #79	; 0x4f
 80007d4:	d107      	bne.n	80007e6 <ESPRxDecoder+0x5e>
 80007d6:	4b8a      	ldr	r3, [pc, #552]	; (8000a00 <ESPRxDecoder+0x278>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d103      	bne.n	80007e6 <ESPRxDecoder+0x5e>
			 {
			 	bufferptr=1;
 80007de:	4b88      	ldr	r3, [pc, #544]	; (8000a00 <ESPRxDecoder+0x278>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e011      	b.n	800080a <ESPRxDecoder+0x82>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b4b      	cmp	r3, #75	; 0x4b
 80007ea:	d10e      	bne.n	800080a <ESPRxDecoder+0x82>
 80007ec:	4b84      	ldr	r3, [pc, #528]	; (8000a00 <ESPRxDecoder+0x278>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10a      	bne.n	800080a <ESPRxDecoder+0x82>
			 {
			 	bufferptr=0;
 80007f4:	4b82      	ldr	r3, [pc, #520]	; (8000a00 <ESPRxDecoder+0x278>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 80007fe:	4b81      	ldr	r3, [pc, #516]	; (8000a04 <ESPRxDecoder+0x27c>)
 8000800:	221e      	movs	r2, #30
 8000802:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 8000804:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <ESPRxDecoder+0x280>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b6e      	cmp	r3, #110	; 0x6e
 800080e:	d107      	bne.n	8000820 <ESPRxDecoder+0x98>
 8000810:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <ESPRxDecoder+0x278>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d103      	bne.n	8000820 <ESPRxDecoder+0x98>
			 {
			 	bufferptr=1;
 8000818:	4b79      	ldr	r3, [pc, #484]	; (8000a00 <ESPRxDecoder+0x278>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e060      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b6f      	cmp	r3, #111	; 0x6f
 8000824:	d107      	bne.n	8000836 <ESPRxDecoder+0xae>
 8000826:	4b76      	ldr	r3, [pc, #472]	; (8000a00 <ESPRxDecoder+0x278>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d103      	bne.n	8000836 <ESPRxDecoder+0xae>
			 {
			 	bufferptr=2;
 800082e:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <ESPRxDecoder+0x278>)
 8000830:	2202      	movs	r2, #2
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e055      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 }
			 else if(bufferptr==2)
 8000836:	4b72      	ldr	r3, [pc, #456]	; (8000a00 <ESPRxDecoder+0x278>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d104      	bne.n	8000848 <ESPRxDecoder+0xc0>
			 {
			 	bufferptr=3;
 800083e:	4b70      	ldr	r3, [pc, #448]	; (8000a00 <ESPRxDecoder+0x278>)
 8000840:	2203      	movs	r2, #3
 8000842:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 8000844:	f000 be7e 	b.w	8001544 <ESPRxDecoder+0xdbc>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b63      	cmp	r3, #99	; 0x63
 800084c:	d107      	bne.n	800085e <ESPRxDecoder+0xd6>
 800084e:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <ESPRxDecoder+0x278>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d103      	bne.n	800085e <ESPRxDecoder+0xd6>
			 	bufferptr=4;
 8000856:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <ESPRxDecoder+0x278>)
 8000858:	2204      	movs	r2, #4
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e041      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b68      	cmp	r3, #104	; 0x68
 8000862:	d107      	bne.n	8000874 <ESPRxDecoder+0xec>
 8000864:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <ESPRxDecoder+0x278>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b04      	cmp	r3, #4
 800086a:	d103      	bne.n	8000874 <ESPRxDecoder+0xec>
			 	bufferptr=5;
 800086c:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <ESPRxDecoder+0x278>)
 800086e:	2205      	movs	r2, #5
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	e036      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b61      	cmp	r3, #97	; 0x61
 8000878:	d107      	bne.n	800088a <ESPRxDecoder+0x102>
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <ESPRxDecoder+0x278>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b05      	cmp	r3, #5
 8000880:	d103      	bne.n	800088a <ESPRxDecoder+0x102>
			 	bufferptr=6;
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <ESPRxDecoder+0x278>)
 8000884:	2206      	movs	r2, #6
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e02b      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b6e      	cmp	r3, #110	; 0x6e
 800088e:	d107      	bne.n	80008a0 <ESPRxDecoder+0x118>
 8000890:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <ESPRxDecoder+0x278>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b06      	cmp	r3, #6
 8000896:	d103      	bne.n	80008a0 <ESPRxDecoder+0x118>
			 	bufferptr=7;
 8000898:	4b59      	ldr	r3, [pc, #356]	; (8000a00 <ESPRxDecoder+0x278>)
 800089a:	2207      	movs	r2, #7
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e020      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b67      	cmp	r3, #103	; 0x67
 80008a4:	d107      	bne.n	80008b6 <ESPRxDecoder+0x12e>
 80008a6:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <ESPRxDecoder+0x278>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d103      	bne.n	80008b6 <ESPRxDecoder+0x12e>
			 	bufferptr=8;
 80008ae:	4b54      	ldr	r3, [pc, #336]	; (8000a00 <ESPRxDecoder+0x278>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e015      	b.n	80008e2 <ESPRxDecoder+0x15a>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b65      	cmp	r3, #101	; 0x65
 80008ba:	f040 8643 	bne.w	8001544 <ESPRxDecoder+0xdbc>
 80008be:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <ESPRxDecoder+0x278>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	f040 863e 	bne.w	8001544 <ESPRxDecoder+0xdbc>
			 	bufferptr=0;
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <ESPRxDecoder+0x278>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 80008d2:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <ESPRxDecoder+0x27c>)
 80008d4:	221e      	movs	r2, #30
 80008d6:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 80008d8:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <ESPRxDecoder+0x280>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
		break;
 80008de:	f000 be31 	b.w	8001544 <ESPRxDecoder+0xdbc>
 80008e2:	f000 be2f 	b.w	8001544 <ESPRxDecoder+0xdbc>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b4f      	cmp	r3, #79	; 0x4f
 80008ea:	d108      	bne.n	80008fe <ESPRxDecoder+0x176>
 80008ec:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <ESPRxDecoder+0x278>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d104      	bne.n	80008fe <ESPRxDecoder+0x176>
			 {
			 	bufferptr=1;
 80008f4:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <ESPRxDecoder+0x278>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=49;
			 }
		break;
 80008fa:	f000 be25 	b.w	8001548 <ESPRxDecoder+0xdc0>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b4b      	cmp	r3, #75	; 0x4b
 8000902:	f040 8621 	bne.w	8001548 <ESPRxDecoder+0xdc0>
 8000906:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <ESPRxDecoder+0x278>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	f040 861c 	bne.w	8001548 <ESPRxDecoder+0xdc0>
			 	bufferptr=0;
 8000910:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <ESPRxDecoder+0x278>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000916:	2300      	movs	r3, #0
 8000918:	71bb      	strb	r3, [r7, #6]
				wifi_command=49;
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <ESPRxDecoder+0x27c>)
 800091c:	2231      	movs	r2, #49	; 0x31
 800091e:	701a      	strb	r2, [r3, #0]
		break;
 8000920:	f000 be12 	b.w	8001548 <ESPRxDecoder+0xdc0>
		case 3:
			if((Rxwifi_data=='s')&&(bufferptr==0))    //  skyfastspms
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b73      	cmp	r3, #115	; 0x73
 8000928:	d107      	bne.n	800093a <ESPRxDecoder+0x1b2>
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <ESPRxDecoder+0x278>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d103      	bne.n	800093a <ESPRxDecoder+0x1b2>
			 {
				bufferptr=1;
 8000932:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <ESPRxDecoder+0x278>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e080      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==1)) //  skyfastspms
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b6b      	cmp	r3, #107	; 0x6b
 800093e:	d107      	bne.n	8000950 <ESPRxDecoder+0x1c8>
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <ESPRxDecoder+0x278>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d103      	bne.n	8000950 <ESPRxDecoder+0x1c8>
			 {
				bufferptr=2;
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <ESPRxDecoder+0x278>)
 800094a:	2202      	movs	r2, #2
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e075      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='y')&&(bufferptr==2)) //  skyfastspms
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b79      	cmp	r3, #121	; 0x79
 8000954:	d107      	bne.n	8000966 <ESPRxDecoder+0x1de>
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <ESPRxDecoder+0x278>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d103      	bne.n	8000966 <ESPRxDecoder+0x1de>
			 {
				bufferptr=3;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <ESPRxDecoder+0x278>)
 8000960:	2203      	movs	r2, #3
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e06a      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }

			 else if((Rxwifi_data=='f')&&(bufferptr==3)) //  skyfastspms
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b66      	cmp	r3, #102	; 0x66
 800096a:	d107      	bne.n	800097c <ESPRxDecoder+0x1f4>
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <ESPRxDecoder+0x278>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d103      	bne.n	800097c <ESPRxDecoder+0x1f4>
			 {
				bufferptr=4;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <ESPRxDecoder+0x278>)
 8000976:	2204      	movs	r2, #4
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e05f      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='a')&&(bufferptr==4)) //  skyfastspms
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b61      	cmp	r3, #97	; 0x61
 8000980:	d107      	bne.n	8000992 <ESPRxDecoder+0x20a>
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <ESPRxDecoder+0x278>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d103      	bne.n	8000992 <ESPRxDecoder+0x20a>
			 {
				bufferptr=5;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <ESPRxDecoder+0x278>)
 800098c:	2205      	movs	r2, #5
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e054      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='s')&&(bufferptr==5)) //  skyfastspms
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b73      	cmp	r3, #115	; 0x73
 8000996:	d107      	bne.n	80009a8 <ESPRxDecoder+0x220>
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <ESPRxDecoder+0x278>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b05      	cmp	r3, #5
 800099e:	d103      	bne.n	80009a8 <ESPRxDecoder+0x220>
			 {
				bufferptr=6;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <ESPRxDecoder+0x278>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e049      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='t')&&(bufferptr==6)) //  skyfastspms
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b74      	cmp	r3, #116	; 0x74
 80009ac:	d107      	bne.n	80009be <ESPRxDecoder+0x236>
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <ESPRxDecoder+0x278>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d103      	bne.n	80009be <ESPRxDecoder+0x236>
			 {
				bufferptr=7;
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <ESPRxDecoder+0x278>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e03e      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='s')&&(bufferptr==7))
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b73      	cmp	r3, #115	; 0x73
 80009c2:	d107      	bne.n	80009d4 <ESPRxDecoder+0x24c>
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <ESPRxDecoder+0x278>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d103      	bne.n	80009d4 <ESPRxDecoder+0x24c>
			 {
				bufferptr=8;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <ESPRxDecoder+0x278>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e033      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='p')&&(bufferptr==8))
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b70      	cmp	r3, #112	; 0x70
 80009d8:	d107      	bne.n	80009ea <ESPRxDecoder+0x262>
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <ESPRxDecoder+0x278>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d103      	bne.n	80009ea <ESPRxDecoder+0x262>
			 {
				bufferptr=9;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <ESPRxDecoder+0x278>)
 80009e4:	2209      	movs	r2, #9
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e028      	b.n	8000a3c <ESPRxDecoder+0x2b4>
			 }
			 else if((Rxwifi_data=='m')&&(bufferptr==9))
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b6d      	cmp	r3, #109	; 0x6d
 80009ee:	d10d      	bne.n	8000a0c <ESPRxDecoder+0x284>
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <ESPRxDecoder+0x278>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b09      	cmp	r3, #9
 80009f6:	d109      	bne.n	8000a0c <ESPRxDecoder+0x284>
			 {
				bufferptr=10;
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <ESPRxDecoder+0x278>)
 80009fa:	220a      	movs	r2, #10
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e01d      	b.n	8000a3c <ESPRxDecoder+0x2b4>
 8000a00:	200009a0 	.word	0x200009a0
 8000a04:	200007d9 	.word	0x200007d9
 8000a08:	200009a2 	.word	0x200009a2
			 }
			 else if((Rxwifi_data=='s')&&(bufferptr==10)) //  skyfastspms
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b73      	cmp	r3, #115	; 0x73
 8000a10:	d114      	bne.n	8000a3c <ESPRxDecoder+0x2b4>
 8000a12:	4b9b      	ldr	r3, [pc, #620]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b0a      	cmp	r3, #10
 8000a18:	d110      	bne.n	8000a3c <ESPRxDecoder+0x2b4>
			 {

				bufferptr=0;
 8000a1a:	4b99      	ldr	r3, [pc, #612]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000a20:	4b98      	ldr	r3, [pc, #608]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	71bb      	strb	r3, [r7, #6]
				wifi_command=60;
 8000a2a:	4b97      	ldr	r3, [pc, #604]	; (8000c88 <ESPRxDecoder+0x500>)
 8000a2c:	223c      	movs	r2, #60	; 0x3c
 8000a2e:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000a30:	4b96      	ldr	r3, [pc, #600]	; (8000c8c <ESPRxDecoder+0x504>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000a36:	4b96      	ldr	r3, [pc, #600]	; (8000c90 <ESPRxDecoder+0x508>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
			 }



			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b4e      	cmp	r3, #78	; 0x4e
 8000a40:	d107      	bne.n	8000a52 <ESPRxDecoder+0x2ca>
 8000a42:	4b90      	ldr	r3, [pc, #576]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d103      	bne.n	8000a52 <ESPRxDecoder+0x2ca>
			 {
			 	Err_bufferptr=1;
 8000a4a:	4b8e      	ldr	r3, [pc, #568]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	e040      	b.n	8000ad4 <ESPRxDecoder+0x34c>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b6f      	cmp	r3, #111	; 0x6f
 8000a56:	d107      	bne.n	8000a68 <ESPRxDecoder+0x2e0>
 8000a58:	4b8a      	ldr	r3, [pc, #552]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d103      	bne.n	8000a68 <ESPRxDecoder+0x2e0>
			 {
			 	Err_bufferptr=2;
 8000a60:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e035      	b.n	8000ad4 <ESPRxDecoder+0x34c>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b41      	cmp	r3, #65	; 0x41
 8000a6c:	d107      	bne.n	8000a7e <ESPRxDecoder+0x2f6>
 8000a6e:	4b85      	ldr	r3, [pc, #532]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d103      	bne.n	8000a7e <ESPRxDecoder+0x2f6>
			 {
			 	Err_bufferptr=3;
 8000a76:	4b83      	ldr	r3, [pc, #524]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e02a      	b.n	8000ad4 <ESPRxDecoder+0x34c>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b50      	cmp	r3, #80	; 0x50
 8000a82:	f040 8563 	bne.w	800154c <ESPRxDecoder+0xdc4>
 8000a86:	4b7f      	ldr	r3, [pc, #508]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	f040 855e 	bne.w	800154c <ESPRxDecoder+0xdc4>
			 {
			 	Err_bufferptr=0;
 8000a90:	4b7c      	ldr	r3, [pc, #496]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000a96:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 8000aa0:	4b7b      	ldr	r3, [pc, #492]	; (8000c90 <ESPRxDecoder+0x508>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000aa6:	4b79      	ldr	r3, [pc, #484]	; (8000c8c <ESPRxDecoder+0x504>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b77      	ldr	r3, [pc, #476]	; (8000c8c <ESPRxDecoder+0x504>)
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	4b76      	ldr	r3, [pc, #472]	; (8000c8c <ESPRxDecoder+0x504>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d804      	bhi.n	8000ac4 <ESPRxDecoder+0x33c>
				{
				   wifi_command=50;
 8000aba:	4b73      	ldr	r3, [pc, #460]	; (8000c88 <ESPRxDecoder+0x500>)
 8000abc:	2232      	movs	r2, #50	; 0x32
 8000abe:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 8000ac0:	f000 bd44 	b.w	800154c <ESPRxDecoder+0xdc4>
				   wifi_command=10;
 8000ac4:	4b70      	ldr	r3, [pc, #448]	; (8000c88 <ESPRxDecoder+0x500>)
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000aca:	4b70      	ldr	r3, [pc, #448]	; (8000c8c <ESPRxDecoder+0x504>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	f000 bd3c 	b.w	800154c <ESPRxDecoder+0xdc4>
 8000ad4:	f000 bd3a 	b.w	800154c <ESPRxDecoder+0xdc4>
		case 10:
			if((Rxwifi_data=='+')&&(bufferptr==0))
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b2b      	cmp	r3, #43	; 0x2b
 8000adc:	d108      	bne.n	8000af0 <ESPRxDecoder+0x368>
 8000ade:	4b68      	ldr	r3, [pc, #416]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <ESPRxDecoder+0x368>
			{
				bufferptr=1;
 8000ae6:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
					Ip_index=0;
					wifi_command=70;
				}
			}

		break;
 8000aec:	f000 bd30 	b.w	8001550 <ESPRxDecoder+0xdc8>
			else if(bufferptr==1)
 8000af0:	4b63      	ldr	r3, [pc, #396]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	f040 852b 	bne.w	8001550 <ESPRxDecoder+0xdc8>
				ActIP[Ip_index]=Rxwifi_data;
 8000afa:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <ESPRxDecoder+0x50c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4a65      	ldr	r2, [pc, #404]	; (8000c98 <ESPRxDecoder+0x510>)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	5453      	strb	r3, [r2, r1]
				Ip_index++;
 8000b06:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <ESPRxDecoder+0x50c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b61      	ldr	r3, [pc, #388]	; (8000c94 <ESPRxDecoder+0x50c>)
 8000b10:	701a      	strb	r2, [r3, #0]
				if(Rxwifi_data=='+'){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b2b      	cmp	r3, #43	; 0x2b
 8000b16:	f040 851b 	bne.w	8001550 <ESPRxDecoder+0xdc8>
					bufferptr=0;
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
					Rxseqdecoder=0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	71bb      	strb	r3, [r7, #6]
					Ip_index=0;
 8000b24:	4b5b      	ldr	r3, [pc, #364]	; (8000c94 <ESPRxDecoder+0x50c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
					wifi_command=70;
 8000b2a:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <ESPRxDecoder+0x500>)
 8000b2c:	2246      	movs	r2, #70	; 0x46
 8000b2e:	701a      	strb	r2, [r3, #0]
		break;
 8000b30:	f000 bd0e 	b.w	8001550 <ESPRxDecoder+0xdc8>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b4f      	cmp	r3, #79	; 0x4f
 8000b38:	d108      	bne.n	8000b4c <ESPRxDecoder+0x3c4>
 8000b3a:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <ESPRxDecoder+0x3c4>
			 {
			 	bufferptr=1;
 8000b42:	4b4f      	ldr	r3, [pc, #316]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 8000b48:	f000 bd04 	b.w	8001554 <ESPRxDecoder+0xdcc>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b4b      	cmp	r3, #75	; 0x4b
 8000b50:	f040 8500 	bne.w	8001554 <ESPRxDecoder+0xdcc>
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	f040 84fb 	bne.w	8001554 <ESPRxDecoder+0xdcc>
			 	bufferptr=0;
 8000b5e:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 8000b68:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <ESPRxDecoder+0x500>)
 8000b6a:	2250      	movs	r2, #80	; 0x50
 8000b6c:	701a      	strb	r2, [r3, #0]
		break;
 8000b6e:	f000 bcf1 	b.w	8001554 <ESPRxDecoder+0xdcc>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b43      	cmp	r3, #67	; 0x43
 8000b76:	d107      	bne.n	8000b88 <ESPRxDecoder+0x400>
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d103      	bne.n	8000b88 <ESPRxDecoder+0x400>
			 {
			 	bufferptr=1;
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e04e      	b.n	8000c26 <ESPRxDecoder+0x49e>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b4f      	cmp	r3, #79	; 0x4f
 8000b8c:	d107      	bne.n	8000b9e <ESPRxDecoder+0x416>
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d103      	bne.n	8000b9e <ESPRxDecoder+0x416>
			 {
			 	bufferptr=2;
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e043      	b.n	8000c26 <ESPRxDecoder+0x49e>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b4e      	cmp	r3, #78	; 0x4e
 8000ba2:	d107      	bne.n	8000bb4 <ESPRxDecoder+0x42c>
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d103      	bne.n	8000bb4 <ESPRxDecoder+0x42c>
			 {
			 	bufferptr=3;
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e038      	b.n	8000c26 <ESPRxDecoder+0x49e>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b4e      	cmp	r3, #78	; 0x4e
 8000bb8:	d107      	bne.n	8000bca <ESPRxDecoder+0x442>
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d103      	bne.n	8000bca <ESPRxDecoder+0x442>
			 {
			 	bufferptr=4;
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e02d      	b.n	8000c26 <ESPRxDecoder+0x49e>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b45      	cmp	r3, #69	; 0x45
 8000bce:	d107      	bne.n	8000be0 <ESPRxDecoder+0x458>
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d103      	bne.n	8000be0 <ESPRxDecoder+0x458>
			 {
			 	bufferptr=5;
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bda:	2205      	movs	r2, #5
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e022      	b.n	8000c26 <ESPRxDecoder+0x49e>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b43      	cmp	r3, #67	; 0x43
 8000be4:	d107      	bne.n	8000bf6 <ESPRxDecoder+0x46e>
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	d103      	bne.n	8000bf6 <ESPRxDecoder+0x46e>
			 {
			 	bufferptr=6;
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e017      	b.n	8000c26 <ESPRxDecoder+0x49e>
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b54      	cmp	r3, #84	; 0x54
 8000bfa:	d114      	bne.n	8000c26 <ESPRxDecoder+0x49e>
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	d110      	bne.n	8000c26 <ESPRxDecoder+0x49e>
			 {
			 	Rxseqdecoder=0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <ESPRxDecoder+0x500>)
 8000c0a:	225a      	movs	r2, #90	; 0x5a
 8000c0c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <ESPRxDecoder+0x504>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ESPRxDecoder+0x4fc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <ESPRxDecoder+0x508>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b4c      	cmp	r3, #76	; 0x4c
 8000c2a:	d107      	bne.n	8000c3c <ESPRxDecoder+0x4b4>
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d103      	bne.n	8000c3c <ESPRxDecoder+0x4b4>
			 {
			 	bufferptr=1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e04f      	b.n	8000cdc <ESPRxDecoder+0x554>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b69      	cmp	r3, #105	; 0x69
 8000c40:	d107      	bne.n	8000c52 <ESPRxDecoder+0x4ca>
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d103      	bne.n	8000c52 <ESPRxDecoder+0x4ca>
			 {
			 	bufferptr=2;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e044      	b.n	8000cdc <ESPRxDecoder+0x554>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b6e      	cmp	r3, #110	; 0x6e
 8000c56:	d107      	bne.n	8000c68 <ESPRxDecoder+0x4e0>
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d103      	bne.n	8000c68 <ESPRxDecoder+0x4e0>
			 {
			 	bufferptr=3;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c62:	2203      	movs	r2, #3
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e039      	b.n	8000cdc <ESPRxDecoder+0x554>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b6b      	cmp	r3, #107	; 0x6b
 8000c6c:	d116      	bne.n	8000c9c <ESPRxDecoder+0x514>
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d112      	bne.n	8000c9c <ESPRxDecoder+0x514>
			 {
			 	bufferptr=4;
 8000c76:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <ESPRxDecoder+0x4f8>)
 8000c78:	2204      	movs	r2, #4
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e02e      	b.n	8000cdc <ESPRxDecoder+0x554>
 8000c7e:	bf00      	nop
 8000c80:	200009a0 	.word	0x200009a0
 8000c84:	200000db 	.word	0x200000db
 8000c88:	200007d9 	.word	0x200007d9
 8000c8c:	2000011d 	.word	0x2000011d
 8000c90:	200000dc 	.word	0x200000dc
 8000c94:	2000011c 	.word	0x2000011c
 8000c98:	200000f4 	.word	0x200000f4
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b65      	cmp	r3, #101	; 0x65
 8000ca0:	d107      	bne.n	8000cb2 <ESPRxDecoder+0x52a>
 8000ca2:	4b9b      	ldr	r3, [pc, #620]	; (8000f10 <ESPRxDecoder+0x788>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d103      	bne.n	8000cb2 <ESPRxDecoder+0x52a>
			 {
			 	bufferptr=5;
 8000caa:	4b99      	ldr	r3, [pc, #612]	; (8000f10 <ESPRxDecoder+0x788>)
 8000cac:	2205      	movs	r2, #5
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e014      	b.n	8000cdc <ESPRxDecoder+0x554>
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b64      	cmp	r3, #100	; 0x64
 8000cb6:	d111      	bne.n	8000cdc <ESPRxDecoder+0x554>
 8000cb8:	4b95      	ldr	r3, [pc, #596]	; (8000f10 <ESPRxDecoder+0x788>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b05      	cmp	r3, #5
 8000cbe:	d10d      	bne.n	8000cdc <ESPRxDecoder+0x554>
			 {
			 	Rxseqdecoder=0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000cc4:	4b93      	ldr	r3, [pc, #588]	; (8000f14 <ESPRxDecoder+0x78c>)
 8000cc6:	225a      	movs	r2, #90	; 0x5a
 8000cc8:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000cca:	4b91      	ldr	r3, [pc, #580]	; (8000f10 <ESPRxDecoder+0x788>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000cd0:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <ESPRxDecoder+0x790>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000cd6:	4b91      	ldr	r3, [pc, #580]	; (8000f1c <ESPRxDecoder+0x794>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b45      	cmp	r3, #69	; 0x45
 8000ce0:	d107      	bne.n	8000cf2 <ESPRxDecoder+0x56a>
 8000ce2:	4b8e      	ldr	r3, [pc, #568]	; (8000f1c <ESPRxDecoder+0x794>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <ESPRxDecoder+0x56a>
			 {
			 	Err_bufferptr=1;
 8000cea:	4b8c      	ldr	r3, [pc, #560]	; (8000f1c <ESPRxDecoder+0x794>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e049      	b.n	8000d86 <ESPRxDecoder+0x5fe>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b52      	cmp	r3, #82	; 0x52
 8000cf6:	d107      	bne.n	8000d08 <ESPRxDecoder+0x580>
 8000cf8:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <ESPRxDecoder+0x794>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d103      	bne.n	8000d08 <ESPRxDecoder+0x580>
			 {
			 	Err_bufferptr=2;
 8000d00:	4b86      	ldr	r3, [pc, #536]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e03e      	b.n	8000d86 <ESPRxDecoder+0x5fe>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b52      	cmp	r3, #82	; 0x52
 8000d0c:	d107      	bne.n	8000d1e <ESPRxDecoder+0x596>
 8000d0e:	4b83      	ldr	r3, [pc, #524]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d103      	bne.n	8000d1e <ESPRxDecoder+0x596>
			 {
			 	Err_bufferptr=3;
 8000d16:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e033      	b.n	8000d86 <ESPRxDecoder+0x5fe>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b4f      	cmp	r3, #79	; 0x4f
 8000d22:	d107      	bne.n	8000d34 <ESPRxDecoder+0x5ac>
 8000d24:	4b7d      	ldr	r3, [pc, #500]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d103      	bne.n	8000d34 <ESPRxDecoder+0x5ac>
			 {
			 	Err_bufferptr=4;
 8000d2c:	4b7b      	ldr	r3, [pc, #492]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e028      	b.n	8000d86 <ESPRxDecoder+0x5fe>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b52      	cmp	r3, #82	; 0x52
 8000d38:	f040 840e 	bne.w	8001558 <ESPRxDecoder+0xdd0>
 8000d3c:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	f040 8409 	bne.w	8001558 <ESPRxDecoder+0xdd0>
			 {
			   	Err_bufferptr=0;
 8000d46:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <ESPRxDecoder+0x794>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000d4c:	4b70      	ldr	r3, [pc, #448]	; (8000f10 <ESPRxDecoder+0x788>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8000d56:	4b72      	ldr	r3, [pc, #456]	; (8000f20 <ESPRxDecoder+0x798>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000d5c:	4b6e      	ldr	r3, [pc, #440]	; (8000f18 <ESPRxDecoder+0x790>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b6c      	ldr	r3, [pc, #432]	; (8000f18 <ESPRxDecoder+0x790>)
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	4b6b      	ldr	r3, [pc, #428]	; (8000f18 <ESPRxDecoder+0x790>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d803      	bhi.n	8000d78 <ESPRxDecoder+0x5f0>
				{
				   wifi_command=80;
 8000d70:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <ESPRxDecoder+0x78c>)
 8000d72:	2250      	movs	r2, #80	; 0x50
 8000d74:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 8000d76:	e3ef      	b.n	8001558 <ESPRxDecoder+0xdd0>
				   wifi_command=50;	 // modified by satheesh
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <ESPRxDecoder+0x78c>)
 8000d7a:	2232      	movs	r2, #50	; 0x32
 8000d7c:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000d7e:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <ESPRxDecoder+0x790>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		break;
 8000d84:	e3e8      	b.n	8001558 <ESPRxDecoder+0xdd0>
 8000d86:	e3e7      	b.n	8001558 <ESPRxDecoder+0xdd0>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8000d8c:	f040 83e6 	bne.w	800155c <ESPRxDecoder+0xdd4>
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <ESPRxDecoder+0x788>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f040 83e1 	bne.w	800155c <ESPRxDecoder+0xdd4>
			 {
			 	bufferptr=0;
 8000d9a:	4b5d      	ldr	r3, [pc, #372]	; (8000f10 <ESPRxDecoder+0x788>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	71bb      	strb	r3, [r7, #6]
				wifi_command=100;
 8000da4:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <ESPRxDecoder+0x78c>)
 8000da6:	2264      	movs	r2, #100	; 0x64
 8000da8:	701a      	strb	r2, [r3, #0]
			 }
		break;
 8000daa:	e3d7      	b.n	800155c <ESPRxDecoder+0xdd4>
		case 7:
			checkbuff[refinc]= Rxwifi_data;
 8000dac:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <ESPRxDecoder+0x79c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4a5d      	ldr	r2, [pc, #372]	; (8000f28 <ESPRxDecoder+0x7a0>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	5453      	strb	r3, [r2, r1]
			refinc++;
 8000db8:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <ESPRxDecoder+0x79c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b58      	ldr	r3, [pc, #352]	; (8000f24 <ESPRxDecoder+0x79c>)
 8000dc2:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b24      	cmp	r3, #36	; 0x24
 8000dc8:	d10a      	bne.n	8000de0 <ESPRxDecoder+0x658>
 8000dca:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <ESPRxDecoder+0x658>
			{
				 Data_bufferptr=1;
 8000dd2:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
				 Valid_DataWifi1= 1;
 8000dd8:	4b55      	ldr	r3, [pc, #340]	; (8000f30 <ESPRxDecoder+0x7a8>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e23a      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==1)
 8000de0:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10b      	bne.n	8000e00 <ESPRxDecoder+0x678>
			 {
				Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fbc8 	bl	8001580 <DecToASCIIFun>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000df6:	701a      	strb	r2, [r3, #0]
				Data_bufferptr=2;
 8000df8:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e22a      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==2)
 8000e00:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10b      	bne.n	8000e20 <ESPRxDecoder+0x698>
			{
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fbb8 	bl	8001580 <DecToASCIIFun>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000e16:	705a      	strb	r2, [r3, #1]
				 Data_bufferptr=3;
 8000e18:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e21a      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==3)//,
 8000e20:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d10b      	bne.n	8000e40 <ESPRxDecoder+0x6b8>
			{
				 Data_bufferptr=4;
 8000e28:	4b40      	ldr	r3, [pc, #256]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);//cyclic time
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fba5 	bl	8001580 <DecToASCIIFun>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000e3c:	709a      	strb	r2, [r3, #2]
 8000e3e:	e20a      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==4)
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d103      	bne.n	8000e50 <ESPRxDecoder+0x6c8>
			{
				 Data_bufferptr=5;
 8000e48:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e202      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==5)
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d10b      	bne.n	8000e70 <ESPRxDecoder+0x6e8>
			{
				Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fb90 	bl	8001580 <DecToASCIIFun>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000e66:	70da      	strb	r2, [r3, #3]
				 Data_bufferptr=6;
 8000e68:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e1f2      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==6)
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d10b      	bne.n	8000e90 <ESPRxDecoder+0x708>
			{
				Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);//date
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fb80 	bl	8001580 <DecToASCIIFun>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000e86:	711a      	strb	r2, [r3, #4]
				Data_bufferptr=7;
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e1e2      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==7)// '/'
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	d103      	bne.n	8000ea0 <ESPRxDecoder+0x718>
			{
				 Data_bufferptr=8;
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e1da      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==8)
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d10b      	bne.n	8000ec0 <ESPRxDecoder+0x738>
			{
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fb68 	bl	8001580 <DecToASCIIFun>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000eb6:	715a      	strb	r2, [r3, #5]
				 Data_bufferptr=9;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000eba:	2209      	movs	r2, #9
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e1ca      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==9)
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	d10b      	bne.n	8000ee0 <ESPRxDecoder+0x758>
			{
				Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fb58 	bl	8001580 <DecToASCIIFun>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000ed6:	719a      	strb	r2, [r3, #6]
				 Data_bufferptr=10;//month
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000eda:	220a      	movs	r2, #10
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e1ba      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==10)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b0a      	cmp	r3, #10
 8000ee6:	d103      	bne.n	8000ef0 <ESPRxDecoder+0x768>
			{
				 Data_bufferptr=11;//month
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000eea:	220b      	movs	r2, #11
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e1b2      	b.n	8001256 <ESPRxDecoder+0xace>
			}

			else if(Data_bufferptr==11)// '/'
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b0b      	cmp	r3, #11
 8000ef6:	d11f      	bne.n	8000f38 <ESPRxDecoder+0x7b0>
			 {
				Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fb40 	bl	8001580 <DecToASCIIFun>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <ESPRxDecoder+0x7ac>)
 8000f06:	71da      	strb	r2, [r3, #7]
				Data_bufferptr=12;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <ESPRxDecoder+0x7a4>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e1a2      	b.n	8001256 <ESPRxDecoder+0xace>
 8000f10:	200009a0 	.word	0x200009a0
 8000f14:	200007d9 	.word	0x200007d9
 8000f18:	2000011d 	.word	0x2000011d
 8000f1c:	200000db 	.word	0x200000db
 8000f20:	200000dc 	.word	0x200000dc
 8000f24:	200001ec 	.word	0x200001ec
 8000f28:	20000124 	.word	0x20000124
 8000f2c:	200000da 	.word	0x200000da
 8000f30:	200000e0 	.word	0x200000e0
 8000f34:	20000094 	.word	0x20000094
			}
			else if(Data_bufferptr==12)////year
 8000f38:	4ba0      	ldr	r3, [pc, #640]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	d10b      	bne.n	8000f58 <ESPRxDecoder+0x7d0>
			{
				Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fb1c 	bl	8001580 <DecToASCIIFun>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	; (80011c0 <ESPRxDecoder+0xa38>)
 8000f4e:	721a      	strb	r2, [r3, #8]
				 Data_bufferptr=13;
 8000f50:	4b9a      	ldr	r3, [pc, #616]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f52:	220d      	movs	r2, #13
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e17e      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==13)//_
 8000f58:	4b98      	ldr	r3, [pc, #608]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b0d      	cmp	r3, #13
 8000f5e:	d103      	bne.n	8000f68 <ESPRxDecoder+0x7e0>
			{

				 Data_bufferptr=14;
 8000f60:	4b96      	ldr	r3, [pc, #600]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f62:	220e      	movs	r2, #14
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e176      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==14)//
 8000f68:	4b94      	ldr	r3, [pc, #592]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b0e      	cmp	r3, #14
 8000f6e:	d10b      	bne.n	8000f88 <ESPRxDecoder+0x800>
			{
				Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fb04 	bl	8001580 <DecToASCIIFun>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b90      	ldr	r3, [pc, #576]	; (80011c0 <ESPRxDecoder+0xa38>)
 8000f7e:	725a      	strb	r2, [r3, #9]
				Data_bufferptr=15;
 8000f80:	4b8e      	ldr	r3, [pc, #568]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f82:	220f      	movs	r2, #15
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e166      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==15)
 8000f88:	4b8c      	ldr	r3, [pc, #560]	; (80011bc <ESPRxDecoder+0xa34>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d10b      	bne.n	8000fa8 <ESPRxDecoder+0x820>
			{
				Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 faf4 	bl	8001580 <DecToASCIIFun>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <ESPRxDecoder+0xa38>)
 8000f9e:	729a      	strb	r2, [r3, #10]
				Data_bufferptr=16;
 8000fa0:	4b86      	ldr	r3, [pc, #536]	; (80011bc <ESPRxDecoder+0xa34>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e156      	b.n	8001256 <ESPRxDecoder+0xace>
			}

			else if(Data_bufferptr==16)
 8000fa8:	4b84      	ldr	r3, [pc, #528]	; (80011bc <ESPRxDecoder+0xa34>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d103      	bne.n	8000fb8 <ESPRxDecoder+0x830>
			 {

				Data_bufferptr=17;//hour
 8000fb0:	4b82      	ldr	r3, [pc, #520]	; (80011bc <ESPRxDecoder+0xa34>)
 8000fb2:	2211      	movs	r2, #17
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e14e      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==17)//:
 8000fb8:	4b80      	ldr	r3, [pc, #512]	; (80011bc <ESPRxDecoder+0xa34>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b11      	cmp	r3, #17
 8000fbe:	d10b      	bne.n	8000fd8 <ESPRxDecoder+0x850>
			{
				Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fadc 	bl	8001580 <DecToASCIIFun>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b7c      	ldr	r3, [pc, #496]	; (80011c0 <ESPRxDecoder+0xa38>)
 8000fce:	72da      	strb	r2, [r3, #11]
				 Data_bufferptr=18;//minute
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <ESPRxDecoder+0xa34>)
 8000fd2:	2212      	movs	r2, #18
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e13e      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==18)
 8000fd8:	4b78      	ldr	r3, [pc, #480]	; (80011bc <ESPRxDecoder+0xa34>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b12      	cmp	r3, #18
 8000fde:	d10b      	bne.n	8000ff8 <ESPRxDecoder+0x870>
			{
				Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 facc 	bl	8001580 <DecToASCIIFun>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b74      	ldr	r3, [pc, #464]	; (80011c0 <ESPRxDecoder+0xa38>)
 8000fee:	731a      	strb	r2, [r3, #12]
				Data_bufferptr=19;
 8000ff0:	4b72      	ldr	r3, [pc, #456]	; (80011bc <ESPRxDecoder+0xa34>)
 8000ff2:	2213      	movs	r2, #19
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e12e      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==19)
 8000ff8:	4b70      	ldr	r3, [pc, #448]	; (80011bc <ESPRxDecoder+0xa34>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b13      	cmp	r3, #19
 8000ffe:	d103      	bne.n	8001008 <ESPRxDecoder+0x880>
			{

				 Data_bufferptr=20;
 8001000:	4b6e      	ldr	r3, [pc, #440]	; (80011bc <ESPRxDecoder+0xa34>)
 8001002:	2214      	movs	r2, #20
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e126      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==20)//:
 8001008:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <ESPRxDecoder+0xa34>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b14      	cmp	r3, #20
 800100e:	d10b      	bne.n	8001028 <ESPRxDecoder+0x8a0>
			{
				Data_bufferptr=21;
 8001010:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <ESPRxDecoder+0xa34>)
 8001012:	2215      	movs	r2, #21
 8001014:	701a      	strb	r2, [r3, #0]
				Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fab1 	bl	8001580 <DecToASCIIFun>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <ESPRxDecoder+0xa38>)
 8001024:	735a      	strb	r2, [r3, #13]
 8001026:	e116      	b.n	8001256 <ESPRxDecoder+0xace>
			}

			else if(Data_bufferptr==21)       	//seconds
 8001028:	4b64      	ldr	r3, [pc, #400]	; (80011bc <ESPRxDecoder+0xa34>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b15      	cmp	r3, #21
 800102e:	d10b      	bne.n	8001048 <ESPRxDecoder+0x8c0>
			 {
				Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 faa4 	bl	8001580 <DecToASCIIFun>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <ESPRxDecoder+0xa38>)
 800103e:	739a      	strb	r2, [r3, #14]
				Data_bufferptr=22;
 8001040:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <ESPRxDecoder+0xa34>)
 8001042:	2216      	movs	r2, #22
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e106      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==22)
 8001048:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <ESPRxDecoder+0xa34>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b16      	cmp	r3, #22
 800104e:	d103      	bne.n	8001058 <ESPRxDecoder+0x8d0>
			{

				 Data_bufferptr=23;
 8001050:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <ESPRxDecoder+0xa34>)
 8001052:	2217      	movs	r2, #23
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e0fe      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==23)      //,(to seperate data)
 8001058:	4b58      	ldr	r3, [pc, #352]	; (80011bc <ESPRxDecoder+0xa34>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b17      	cmp	r3, #23
 800105e:	d10b      	bne.n	8001078 <ESPRxDecoder+0x8f0>
			{
				 Data_bufferptr=24;
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <ESPRxDecoder+0xa34>)
 8001062:	2218      	movs	r2, #24
 8001064:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fa89 	bl	8001580 <DecToASCIIFun>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <ESPRxDecoder+0xa38>)
 8001074:	73da      	strb	r2, [r3, #15]
 8001076:	e0ee      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==24)
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <ESPRxDecoder+0xa34>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b18      	cmp	r3, #24
 800107e:	d10b      	bne.n	8001098 <ESPRxDecoder+0x910>
			{
				Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fa7c 	bl	8001580 <DecToASCIIFun>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <ESPRxDecoder+0xa38>)
 800108e:	741a      	strb	r2, [r3, #16]
				 Data_bufferptr=25;
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <ESPRxDecoder+0xa34>)
 8001092:	2219      	movs	r2, #25
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e0de      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==25)
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <ESPRxDecoder+0xa34>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b19      	cmp	r3, #25
 800109e:	d10b      	bne.n	80010b8 <ESPRxDecoder+0x930>
			{
				Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fa6c 	bl	8001580 <DecToASCIIFun>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <ESPRxDecoder+0xa38>)
 80010ae:	745a      	strb	r2, [r3, #17]
				 Data_bufferptr=26;
 80010b0:	4b42      	ldr	r3, [pc, #264]	; (80011bc <ESPRxDecoder+0xa34>)
 80010b2:	221a      	movs	r2, #26
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e0ce      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==26)
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <ESPRxDecoder+0xa34>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b1a      	cmp	r3, #26
 80010be:	d10b      	bne.n	80010d8 <ESPRxDecoder+0x950>
			{
				 Data_bufferptr=27;
 80010c0:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <ESPRxDecoder+0xa34>)
 80010c2:	221b      	movs	r2, #27
 80010c4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fa59 	bl	8001580 <DecToASCIIFun>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <ESPRxDecoder+0xa38>)
 80010d4:	749a      	strb	r2, [r3, #18]
 80010d6:	e0be      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==27)
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <ESPRxDecoder+0xa34>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b1b      	cmp	r3, #27
 80010de:	d10b      	bne.n	80010f8 <ESPRxDecoder+0x970>
			 {
				Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fa4c 	bl	8001580 <DecToASCIIFun>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <ESPRxDecoder+0xa38>)
 80010ee:	74da      	strb	r2, [r3, #19]
				Data_bufferptr=28;//production
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <ESPRxDecoder+0xa34>)
 80010f2:	221c      	movs	r2, #28
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e0ae      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==28)//,
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <ESPRxDecoder+0xa34>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b1c      	cmp	r3, #28
 80010fe:	d103      	bne.n	8001108 <ESPRxDecoder+0x980>
			{

				 Data_bufferptr=29;
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <ESPRxDecoder+0xa34>)
 8001102:	221d      	movs	r2, #29
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e0a6      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==29)//rejection
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <ESPRxDecoder+0xa34>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b1d      	cmp	r3, #29
 800110e:	d10b      	bne.n	8001128 <ESPRxDecoder+0x9a0>
			{
				 Data_bufferptr=30;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <ESPRxDecoder+0xa34>)
 8001112:	221e      	movs	r2, #30
 8001114:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fa31 	bl	8001580 <DecToASCIIFun>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <ESPRxDecoder+0xa38>)
 8001124:	751a      	strb	r2, [r3, #20]
 8001126:	e096      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==30)
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <ESPRxDecoder+0xa34>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b1e      	cmp	r3, #30
 800112e:	d10b      	bne.n	8001148 <ESPRxDecoder+0x9c0>
			{
				Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fa24 	bl	8001580 <DecToASCIIFun>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <ESPRxDecoder+0xa38>)
 800113e:	755a      	strb	r2, [r3, #21]
				 Data_bufferptr=31;
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <ESPRxDecoder+0xa34>)
 8001142:	221f      	movs	r2, #31
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e086      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==31)
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <ESPRxDecoder+0xa34>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b1f      	cmp	r3, #31
 800114e:	d10b      	bne.n	8001168 <ESPRxDecoder+0x9e0>
			{
				 Data_bufferptr=32;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <ESPRxDecoder+0xa34>)
 8001152:	2220      	movs	r2, #32
 8001154:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fa11 	bl	8001580 <DecToASCIIFun>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <ESPRxDecoder+0xa38>)
 8001164:	759a      	strb	r2, [r3, #22]
 8001166:	e076      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==32)
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <ESPRxDecoder+0xa34>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b20      	cmp	r3, #32
 800116e:	d10b      	bne.n	8001188 <ESPRxDecoder+0xa00>
			{
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fa04 	bl	8001580 <DecToASCIIFun>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <ESPRxDecoder+0xa38>)
 800117e:	75da      	strb	r2, [r3, #23]
				 Data_bufferptr=33;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <ESPRxDecoder+0xa34>)
 8001182:	2221      	movs	r2, #33	; 0x21
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e066      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==33)
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <ESPRxDecoder+0xa34>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b21      	cmp	r3, #33	; 0x21
 800118e:	d11f      	bne.n	80011d0 <ESPRxDecoder+0xa48>
			{
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f9f4 	bl	8001580 <DecToASCIIFun>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <ESPRxDecoder+0xa38>)
 800119e:	761a      	strb	r2, [r3, #24]
				 Data_bufferptr=0;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <ESPRxDecoder+0xa34>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <ESPRxDecoder+0xa3c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <ESPRxDecoder+0xa40>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <ESPRxDecoder+0xa44>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e04d      	b.n	8001256 <ESPRxDecoder+0xace>
 80011ba:	bf00      	nop
 80011bc:	200000da 	.word	0x200000da
 80011c0:	20000094 	.word	0x20000094
 80011c4:	200009aa 	.word	0x200009aa
 80011c8:	200000df 	.word	0x200000df
 80011cc:	200000de 	.word	0x200000de
			}
			else if(Data_bufferptr==36)      //rejection
 80011d0:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <ESPRxDecoder+0xc7c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b24      	cmp	r3, #36	; 0x24
 80011d6:	d10c      	bne.n	80011f2 <ESPRxDecoder+0xa6a>
			{
				//Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
				Data_bufferptr=0;
 80011d8:	4b8a      	ldr	r3, [pc, #552]	; (8001404 <ESPRxDecoder+0xc7c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 80011de:	4b8a      	ldr	r3, [pc, #552]	; (8001408 <ESPRxDecoder+0xc80>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 80011e4:	4b89      	ldr	r3, [pc, #548]	; (800140c <ESPRxDecoder+0xc84>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <ESPRxDecoder+0xc88>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e031      	b.n	8001256 <ESPRxDecoder+0xace>
				/* Data_bufferptr=0;
				   RefreshBlockInfo = 0;
		  		   RxCompleteU2C1WIFI=1;
				   Updatetimeinfo=1;*/
			}
			else if(Data_bufferptr==35)      //System Minute
 80011f2:	4b84      	ldr	r3, [pc, #528]	; (8001404 <ESPRxDecoder+0xc7c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b23      	cmp	r3, #35	; 0x23
 80011f8:	d10c      	bne.n	8001214 <ESPRxDecoder+0xa8c>
			 {
				Data_bufferptr=0;
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <ESPRxDecoder+0xc7c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 8001200:	4b81      	ldr	r3, [pc, #516]	; (8001408 <ESPRxDecoder+0xc80>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 8001206:	4b81      	ldr	r3, [pc, #516]	; (800140c <ESPRxDecoder+0xc84>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 800120c:	4b80      	ldr	r3, [pc, #512]	; (8001410 <ESPRxDecoder+0xc88>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	e020      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==50)
 8001214:	4b7b      	ldr	r3, [pc, #492]	; (8001404 <ESPRxDecoder+0xc7c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b32      	cmp	r3, #50	; 0x32
 800121a:	d115      	bne.n	8001248 <ESPRxDecoder+0xac0>
			 {
				Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f9ae 	bl	8001580 <DecToASCIIFun>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <ESPRxDecoder+0xc8c>)
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Data_bufferptr=0;
 800122e:	4b75      	ldr	r3, [pc, #468]	; (8001404 <ESPRxDecoder+0xc7c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
				RefreshBlockInfo = 0;
 8001234:	4b74      	ldr	r3, [pc, #464]	; (8001408 <ESPRxDecoder+0xc80>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
				RxCompleteU2C1WIFI=1;
 800123a:	4b74      	ldr	r3, [pc, #464]	; (800140c <ESPRxDecoder+0xc84>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
				Updatetimeinfo=1;
 8001240:	4b73      	ldr	r3, [pc, #460]	; (8001410 <ESPRxDecoder+0xc88>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e006      	b.n	8001256 <ESPRxDecoder+0xace>
			}
			else if(Data_bufferptr==51)      //Dummy
 8001248:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <ESPRxDecoder+0xc7c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b33      	cmp	r3, #51	; 0x33
 800124e:	d102      	bne.n	8001256 <ESPRxDecoder+0xace>
			{
				 Data_bufferptr=0;
 8001250:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <ESPRxDecoder+0xc7c>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
			}

		   if(Valid_DataWifi1)
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <ESPRxDecoder+0xc90>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 809b 	beq.w	8001396 <ESPRxDecoder+0xc0e>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b55      	cmp	r3, #85	; 0x55
 8001264:	d107      	bne.n	8001276 <ESPRxDecoder+0xaee>
 8001266:	4b6d      	ldr	r3, [pc, #436]	; (800141c <ESPRxDecoder+0xc94>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <ESPRxDecoder+0xaee>
			 {
			 	bufferptr=1;
 800126e:	4b6b      	ldr	r3, [pc, #428]	; (800141c <ESPRxDecoder+0xc94>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e040      	b.n	80012f8 <ESPRxDecoder+0xb70>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b6e      	cmp	r3, #110	; 0x6e
 800127a:	d107      	bne.n	800128c <ESPRxDecoder+0xb04>
 800127c:	4b67      	ldr	r3, [pc, #412]	; (800141c <ESPRxDecoder+0xc94>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d103      	bne.n	800128c <ESPRxDecoder+0xb04>
			 {
			 	bufferptr=2;
 8001284:	4b65      	ldr	r3, [pc, #404]	; (800141c <ESPRxDecoder+0xc94>)
 8001286:	2202      	movs	r2, #2
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e035      	b.n	80012f8 <ESPRxDecoder+0xb70>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b6c      	cmp	r3, #108	; 0x6c
 8001290:	d107      	bne.n	80012a2 <ESPRxDecoder+0xb1a>
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <ESPRxDecoder+0xc94>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d103      	bne.n	80012a2 <ESPRxDecoder+0xb1a>
			 {
			    bufferptr=3;
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <ESPRxDecoder+0xc94>)
 800129c:	2203      	movs	r2, #3
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e02a      	b.n	80012f8 <ESPRxDecoder+0xb70>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b69      	cmp	r3, #105	; 0x69
 80012a6:	d107      	bne.n	80012b8 <ESPRxDecoder+0xb30>
 80012a8:	4b5c      	ldr	r3, [pc, #368]	; (800141c <ESPRxDecoder+0xc94>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d103      	bne.n	80012b8 <ESPRxDecoder+0xb30>
			 {
			    bufferptr=4;
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <ESPRxDecoder+0xc94>)
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e01f      	b.n	80012f8 <ESPRxDecoder+0xb70>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b6e      	cmp	r3, #110	; 0x6e
 80012bc:	d107      	bne.n	80012ce <ESPRxDecoder+0xb46>
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <ESPRxDecoder+0xc94>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d103      	bne.n	80012ce <ESPRxDecoder+0xb46>
			 {
			    bufferptr=5;
 80012c6:	4b55      	ldr	r3, [pc, #340]	; (800141c <ESPRxDecoder+0xc94>)
 80012c8:	2205      	movs	r2, #5
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e014      	b.n	80012f8 <ESPRxDecoder+0xb70>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b6b      	cmp	r3, #107	; 0x6b
 80012d2:	d111      	bne.n	80012f8 <ESPRxDecoder+0xb70>
 80012d4:	4b51      	ldr	r3, [pc, #324]	; (800141c <ESPRxDecoder+0xc94>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d10d      	bne.n	80012f8 <ESPRxDecoder+0xb70>
			 {
			    bufferptr=0;
 80012dc:	4b4f      	ldr	r3, [pc, #316]	; (800141c <ESPRxDecoder+0xc94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 80012e6:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <ESPRxDecoder+0xc98>)
 80012e8:	2266      	movs	r2, #102	; 0x66
 80012ea:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <ESPRxDecoder+0xc9c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <ESPRxDecoder+0xc90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b43      	cmp	r3, #67	; 0x43
 80012fc:	d107      	bne.n	800130e <ESPRxDecoder+0xb86>
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <ESPRxDecoder+0xc94>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <ESPRxDecoder+0xb86>
			 {
			 	bufferptr=1;
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <ESPRxDecoder+0xc94>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e0fc      	b.n	8001508 <ESPRxDecoder+0xd80>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b4c      	cmp	r3, #76	; 0x4c
 8001312:	d107      	bne.n	8001324 <ESPRxDecoder+0xb9c>
 8001314:	4b41      	ldr	r3, [pc, #260]	; (800141c <ESPRxDecoder+0xc94>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d103      	bne.n	8001324 <ESPRxDecoder+0xb9c>
			 {
			 	bufferptr=2;
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <ESPRxDecoder+0xc94>)
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e0f1      	b.n	8001508 <ESPRxDecoder+0xd80>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b4f      	cmp	r3, #79	; 0x4f
 8001328:	d107      	bne.n	800133a <ESPRxDecoder+0xbb2>
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <ESPRxDecoder+0xc94>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d103      	bne.n	800133a <ESPRxDecoder+0xbb2>
			 {
			    bufferptr=3;
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <ESPRxDecoder+0xc94>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e0e6      	b.n	8001508 <ESPRxDecoder+0xd80>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b53      	cmp	r3, #83	; 0x53
 800133e:	d107      	bne.n	8001350 <ESPRxDecoder+0xbc8>
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <ESPRxDecoder+0xc94>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d103      	bne.n	8001350 <ESPRxDecoder+0xbc8>
			 {
			    bufferptr=4;
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <ESPRxDecoder+0xc94>)
 800134a:	2204      	movs	r2, #4
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e0db      	b.n	8001508 <ESPRxDecoder+0xd80>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b45      	cmp	r3, #69	; 0x45
 8001354:	d107      	bne.n	8001366 <ESPRxDecoder+0xbde>
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <ESPRxDecoder+0xc94>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d103      	bne.n	8001366 <ESPRxDecoder+0xbde>
			 {
			    bufferptr=5;
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <ESPRxDecoder+0xc94>)
 8001360:	2205      	movs	r2, #5
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e0d0      	b.n	8001508 <ESPRxDecoder+0xd80>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b44      	cmp	r3, #68	; 0x44
 800136a:	f040 80f9 	bne.w	8001560 <ESPRxDecoder+0xdd8>
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <ESPRxDecoder+0xc94>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b05      	cmp	r3, #5
 8001374:	f040 80f4 	bne.w	8001560 <ESPRxDecoder+0xdd8>
			 {
			    bufferptr=0;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <ESPRxDecoder+0xc94>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 800137e:	2300      	movs	r3, #0
 8001380:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <ESPRxDecoder+0xc98>)
 8001384:	2266      	movs	r2, #102	; 0x66
 8001386:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <ESPRxDecoder+0xc9c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <ESPRxDecoder+0xc90>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8001394:	e0e4      	b.n	8001560 <ESPRxDecoder+0xdd8>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b55      	cmp	r3, #85	; 0x55
 800139a:	d107      	bne.n	80013ac <ESPRxDecoder+0xc24>
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <ESPRxDecoder+0xc94>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <ESPRxDecoder+0xc24>
			 	bufferptr=1;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <ESPRxDecoder+0xc94>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e052      	b.n	8001452 <ESPRxDecoder+0xcca>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b6e      	cmp	r3, #110	; 0x6e
 80013b0:	d107      	bne.n	80013c2 <ESPRxDecoder+0xc3a>
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <ESPRxDecoder+0xc94>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d103      	bne.n	80013c2 <ESPRxDecoder+0xc3a>
			 	bufferptr=2;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <ESPRxDecoder+0xc94>)
 80013bc:	2202      	movs	r2, #2
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	e047      	b.n	8001452 <ESPRxDecoder+0xcca>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b6c      	cmp	r3, #108	; 0x6c
 80013c6:	d107      	bne.n	80013d8 <ESPRxDecoder+0xc50>
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <ESPRxDecoder+0xc94>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d103      	bne.n	80013d8 <ESPRxDecoder+0xc50>
			    bufferptr=3;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <ESPRxDecoder+0xc94>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e03c      	b.n	8001452 <ESPRxDecoder+0xcca>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b69      	cmp	r3, #105	; 0x69
 80013dc:	d107      	bne.n	80013ee <ESPRxDecoder+0xc66>
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <ESPRxDecoder+0xc94>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d103      	bne.n	80013ee <ESPRxDecoder+0xc66>
			    bufferptr=4;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <ESPRxDecoder+0xc94>)
 80013e8:	2204      	movs	r2, #4
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e031      	b.n	8001452 <ESPRxDecoder+0xcca>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b6e      	cmp	r3, #110	; 0x6e
 80013f2:	d119      	bne.n	8001428 <ESPRxDecoder+0xca0>
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <ESPRxDecoder+0xc94>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d115      	bne.n	8001428 <ESPRxDecoder+0xca0>
			    bufferptr=5;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <ESPRxDecoder+0xc94>)
 80013fe:	2205      	movs	r2, #5
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e026      	b.n	8001452 <ESPRxDecoder+0xcca>
 8001404:	200000da 	.word	0x200000da
 8001408:	200009aa 	.word	0x200009aa
 800140c:	200000df 	.word	0x200000df
 8001410:	200000de 	.word	0x200000de
 8001414:	20000094 	.word	0x20000094
 8001418:	200000e0 	.word	0x200000e0
 800141c:	200009a0 	.word	0x200009a0
 8001420:	200007d9 	.word	0x200007d9
 8001424:	200000dd 	.word	0x200000dd
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b6b      	cmp	r3, #107	; 0x6b
 800142c:	d111      	bne.n	8001452 <ESPRxDecoder+0xcca>
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <ESPRxDecoder+0xde8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10d      	bne.n	8001452 <ESPRxDecoder+0xcca>
			    bufferptr=0;
 8001436:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <ESPRxDecoder+0xde8>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 800143c:	2300      	movs	r3, #0
 800143e:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <ESPRxDecoder+0xdec>)
 8001442:	2266      	movs	r2, #102	; 0x66
 8001444:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <ESPRxDecoder+0xdf0>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <ESPRxDecoder+0xdf4>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b43      	cmp	r3, #67	; 0x43
 8001456:	d107      	bne.n	8001468 <ESPRxDecoder+0xce0>
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <ESPRxDecoder+0xde8>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <ESPRxDecoder+0xce0>
			 	bufferptr=1;
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <ESPRxDecoder+0xde8>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e04f      	b.n	8001508 <ESPRxDecoder+0xd80>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b4c      	cmp	r3, #76	; 0x4c
 800146c:	d107      	bne.n	800147e <ESPRxDecoder+0xcf6>
 800146e:	4b40      	ldr	r3, [pc, #256]	; (8001570 <ESPRxDecoder+0xde8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d103      	bne.n	800147e <ESPRxDecoder+0xcf6>
			 	bufferptr=2;
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <ESPRxDecoder+0xde8>)
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e044      	b.n	8001508 <ESPRxDecoder+0xd80>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b4f      	cmp	r3, #79	; 0x4f
 8001482:	d107      	bne.n	8001494 <ESPRxDecoder+0xd0c>
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <ESPRxDecoder+0xde8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d103      	bne.n	8001494 <ESPRxDecoder+0xd0c>
			    bufferptr=3;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <ESPRxDecoder+0xde8>)
 800148e:	2203      	movs	r2, #3
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e039      	b.n	8001508 <ESPRxDecoder+0xd80>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b53      	cmp	r3, #83	; 0x53
 8001498:	d107      	bne.n	80014aa <ESPRxDecoder+0xd22>
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <ESPRxDecoder+0xde8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d103      	bne.n	80014aa <ESPRxDecoder+0xd22>
			    bufferptr=4;
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <ESPRxDecoder+0xde8>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e02e      	b.n	8001508 <ESPRxDecoder+0xd80>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b45      	cmp	r3, #69	; 0x45
 80014ae:	d107      	bne.n	80014c0 <ESPRxDecoder+0xd38>
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <ESPRxDecoder+0xde8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d103      	bne.n	80014c0 <ESPRxDecoder+0xd38>
			    bufferptr=5;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <ESPRxDecoder+0xde8>)
 80014ba:	2205      	movs	r2, #5
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e023      	b.n	8001508 <ESPRxDecoder+0xd80>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b44      	cmp	r3, #68	; 0x44
 80014c4:	d14c      	bne.n	8001560 <ESPRxDecoder+0xdd8>
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <ESPRxDecoder+0xde8>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d148      	bne.n	8001560 <ESPRxDecoder+0xdd8>
			    bufferptr=0;
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <ESPRxDecoder+0xde8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <ESPRxDecoder+0xdf0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <ESPRxDecoder+0xdf0>)
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <ESPRxDecoder+0xdf0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d906      	bls.n	80014fa <ESPRxDecoder+0xd72>
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <ESPRxDecoder+0xdec>)
 80014ee:	220a      	movs	r2, #10
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <ESPRxDecoder+0xdf0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e002      	b.n	8001500 <ESPRxDecoder+0xd78>
					wifi_command=102;}
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <ESPRxDecoder+0xdec>)
 80014fc:	2266      	movs	r2, #102	; 0x66
 80014fe:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <ESPRxDecoder+0xdf4>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
		break;
 8001506:	e02b      	b.n	8001560 <ESPRxDecoder+0xdd8>
 8001508:	e02a      	b.n	8001560 <ESPRxDecoder+0xdd8>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b4f      	cmp	r3, #79	; 0x4f
 800150e:	d107      	bne.n	8001520 <ESPRxDecoder+0xd98>
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <ESPRxDecoder+0xde8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <ESPRxDecoder+0xd98>
			 {
			 	bufferptr=1;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <ESPRxDecoder+0xde8>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 800151e:	e021      	b.n	8001564 <ESPRxDecoder+0xddc>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b4b      	cmp	r3, #75	; 0x4b
 8001524:	d11e      	bne.n	8001564 <ESPRxDecoder+0xddc>
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <ESPRxDecoder+0xde8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d11a      	bne.n	8001564 <ESPRxDecoder+0xddc>
			 	bufferptr=0;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <ESPRxDecoder+0xde8>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001534:	2300      	movs	r3, #0
 8001536:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <ESPRxDecoder+0xdec>)
 800153a:	2214      	movs	r2, #20
 800153c:	701a      	strb	r2, [r3, #0]
		break;
 800153e:	e011      	b.n	8001564 <ESPRxDecoder+0xddc>
	   	default:
		break;
 8001540:	bf00      	nop
 8001542:	e010      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001544:	bf00      	nop
 8001546:	e00e      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001548:	bf00      	nop
 800154a:	e00c      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 800154c:	bf00      	nop
 800154e:	e00a      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001550:	bf00      	nop
 8001552:	e008      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001554:	bf00      	nop
 8001556:	e006      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001558:	bf00      	nop
 800155a:	e004      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 800155c:	bf00      	nop
 800155e:	e002      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <ESPRxDecoder+0xdde>
		break;
 8001564:	bf00      	nop
		}
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200009a0 	.word	0x200009a0
 8001574:	200007d9 	.word	0x200007d9
 8001578:	200000dd 	.word	0x200000dd
 800157c:	200000e0 	.word	0x200000e0

08001580 <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3b30      	subs	r3, #48	; 0x30
 800158e:	2b16      	cmp	r3, #22
 8001590:	d860      	bhi.n	8001654 <DecToASCIIFun+0xd4>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <DecToASCIIFun+0x18>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015f5 	.word	0x080015f5
 800159c:	080015fb 	.word	0x080015fb
 80015a0:	08001601 	.word	0x08001601
 80015a4:	08001607 	.word	0x08001607
 80015a8:	0800160d 	.word	0x0800160d
 80015ac:	08001613 	.word	0x08001613
 80015b0:	08001619 	.word	0x08001619
 80015b4:	0800161f 	.word	0x0800161f
 80015b8:	08001625 	.word	0x08001625
 80015bc:	0800162b 	.word	0x0800162b
 80015c0:	08001655 	.word	0x08001655
 80015c4:	08001655 	.word	0x08001655
 80015c8:	08001655 	.word	0x08001655
 80015cc:	08001655 	.word	0x08001655
 80015d0:	08001655 	.word	0x08001655
 80015d4:	08001655 	.word	0x08001655
 80015d8:	08001655 	.word	0x08001655
 80015dc:	08001631 	.word	0x08001631
 80015e0:	08001637 	.word	0x08001637
 80015e4:	0800163d 	.word	0x0800163d
 80015e8:	08001643 	.word	0x08001643
 80015ec:	08001649 	.word	0x08001649
 80015f0:	0800164f 	.word	0x0800164f
	{
	case 48:
			ASCIIHex = 0x00;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
			break;
 80015f8:	e02c      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
			break;
 80015fe:	e029      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8001600:	2302      	movs	r3, #2
 8001602:	73fb      	strb	r3, [r7, #15]
			break;
 8001604:	e026      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8001606:	2303      	movs	r3, #3
 8001608:	73fb      	strb	r3, [r7, #15]
			break;
 800160a:	e023      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 800160c:	2304      	movs	r3, #4
 800160e:	73fb      	strb	r3, [r7, #15]
			break;
 8001610:	e020      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8001612:	2305      	movs	r3, #5
 8001614:	73fb      	strb	r3, [r7, #15]
			break;
 8001616:	e01d      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8001618:	2306      	movs	r3, #6
 800161a:	73fb      	strb	r3, [r7, #15]
			break;
 800161c:	e01a      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 800161e:	2307      	movs	r3, #7
 8001620:	73fb      	strb	r3, [r7, #15]
			break;
 8001622:	e017      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8001624:	2308      	movs	r3, #8
 8001626:	73fb      	strb	r3, [r7, #15]
			break;
 8001628:	e014      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 800162a:	2309      	movs	r3, #9
 800162c:	73fb      	strb	r3, [r7, #15]
			break;
 800162e:	e011      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8001630:	230a      	movs	r3, #10
 8001632:	73fb      	strb	r3, [r7, #15]
			break;
 8001634:	e00e      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8001636:	230b      	movs	r3, #11
 8001638:	73fb      	strb	r3, [r7, #15]
			break;
 800163a:	e00b      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 800163c:	230c      	movs	r3, #12
 800163e:	73fb      	strb	r3, [r7, #15]
			break;
 8001640:	e008      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8001642:	230d      	movs	r3, #13
 8001644:	73fb      	strb	r3, [r7, #15]
			break;
 8001646:	e005      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8001648:	230e      	movs	r3, #14
 800164a:	73fb      	strb	r3, [r7, #15]
			break;
 800164c:	e002      	b.n	8001654 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 800164e:	230f      	movs	r3, #15
 8001650:	73fb      	strb	r3, [r7, #15]
			break;
 8001652:	bf00      	nop
	}
	return (ASCIIHex);
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop

08001664 <HAL_TIM_PeriodElapsedCallback>:
 uint8_t LocCount1S;
 extern uint8_t MAC_A_Prod_Input1_StartTimer;
 extern uint16_t MAC_A_Prod_Input1_CountBase;
 
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d102      	bne.n	800167a <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12d      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
 		Flag100milliSeconds=1;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 		if(++LocCount1S >= 10)
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b09      	cmp	r3, #9
 800169a:	d916      	bls.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			LocCount1S=0;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b13      	cmp	r3, #19
 80016b4:	d906      	bls.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				SimCount=0;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 80016bc:	2120      	movs	r1, #32
 80016be:	4810      	ldr	r0, [pc, #64]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016c0:	f008 fc88 	bl	8009fd4 <HAL_GPIO_TogglePin>
			}
			Flag1Second =1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
		}
		if(MAC_A_Prod_Input1_StartTimer)
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
		   ++MAC_A_Prod_Input1_CountBase;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80016dc:	801a      	strh	r2, [r3, #0]
		}

	}
 
 }
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000534 	.word	0x20000534
 80016ec:	2000011e 	.word	0x2000011e
 80016f0:	200004e8 	.word	0x200004e8
 80016f4:	20000120 	.word	0x20000120
 80016f8:	20000122 	.word	0x20000122
 80016fc:	20000121 	.word	0x20000121
 8001700:	48000800 	.word	0x48000800
 8001704:	2000011f 	.word	0x2000011f
 8001708:	200005b7 	.word	0x200005b7
 800170c:	200005b8 	.word	0x200005b8

08001710 <HAL_UART_RxCpltCallback>:

extern uint8_t Rxseqdecoder;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_UART_RxCpltCallback+0xc0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d10c      	bne.n	800173a <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <HAL_UART_RxCpltCallback+0xc4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f82c 	bl	8000788 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8001730:	2201      	movs	r2, #1
 8001732:	4928      	ldr	r1, [pc, #160]	; (80017d4 <HAL_UART_RxCpltCallback+0xc4>)
 8001734:	4826      	ldr	r0, [pc, #152]	; (80017d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001736:	f00c f891 	bl	800d85c <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a27      	ldr	r2, [pc, #156]	; (80017dc <HAL_UART_RxCpltCallback+0xcc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d141      	bne.n	80017c6 <HAL_UART_RxCpltCallback+0xb6>
	{
		if((u8rxbuf[0]==1)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d11c      	bne.n	8001784 <HAL_UART_RxCpltCallback+0x74>
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d118      	bne.n	8001784 <HAL_UART_RxCpltCallback+0x74>
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001754:	789b      	ldrb	r3, [r3, #2]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d114      	bne.n	8001784 <HAL_UART_RxCpltCallback+0x74>
		{
			Dye_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 800175c:	78db      	ldrb	r3, [r3, #3]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_UART_RxCpltCallback+0xd4>)
 8001770:	801a      	strh	r2, [r3, #0]
			Dye_Temperature = Dye_Temperature/10;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_UART_RxCpltCallback+0xd4>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_UART_RxCpltCallback+0xd8>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_RxCpltCallback+0xd4>)
 8001782:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0]==2)&&(u8rxbuf[1]==3)&&(u8rxbuf[2]==8))
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d11c      	bne.n	80017c6 <HAL_UART_RxCpltCallback+0xb6>
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d118      	bne.n	80017c6 <HAL_UART_RxCpltCallback+0xb6>
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001796:	789b      	ldrb	r3, [r3, #2]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d114      	bne.n	80017c6 <HAL_UART_RxCpltCallback+0xb6>
		{
			Connector_Temperature = (u8rxbuf[3]<<8|u8rxbuf[4]);
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 800179e:	78db      	ldrb	r3, [r3, #3]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_UART_RxCpltCallback+0xd0>)
 80017a6:	791b      	ldrb	r3, [r3, #4]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_UART_RxCpltCallback+0xdc>)
 80017b2:	801a      	strh	r2, [r3, #0]
			Connector_Temperature = Connector_Temperature/10;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_UART_RxCpltCallback+0xdc>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_UART_RxCpltCallback+0xd8>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_UART_RxCpltCallback+0xdc>)
 80017c4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000248 	.word	0x20000248
 80017d4:	20000580 	.word	0x20000580
 80017d8:	200009a1 	.word	0x200009a1
 80017dc:	200002cc 	.word	0x200002cc
 80017e0:	200005d8 	.word	0x200005d8
 80017e4:	200001ee 	.word	0x200001ee
 80017e8:	cccccccd 	.word	0xcccccccd
 80017ec:	200001f0 	.word	0x200001f0

080017f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f4:	f008 f81c 	bl	8009830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f8:	f000 f842 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fc:	f000 fab0 	bl	8001d60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001800:	f000 f92c 	bl	8001a5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001804:	f000 f88e 	bl	8001924 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001808:	f000 f8f8 	bl	80019fc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800180c:	f000 fa3a 	bl	8001c84 <MX_TIM6_Init>
  MX_SPI2_Init();
 8001810:	f000 f99c 	bl	8001b4c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001814:	f000 f9e2 	bl	8001bdc <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8001818:	f000 f8c4 	bl	80019a4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800181c:	f000 f94e 	bl	8001abc <MX_SPI1_Init>
  MX_TIM7_Init();
 8001820:	f000 fa66 	bl	8001cf0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <main+0x7c>)
 8001826:	f00b fb77 	bl	800cf18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <main+0x80>)
 800182c:	f00b fb74 	bl	800cf18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <main+0x84>)
 8001832:	f00b fb25 	bl	800ce80 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f008 fbb0 	bl	8009fa4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f008 f867 	bl	8009918 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f008 fba6 	bl	8009fa4 <HAL_GPIO_WritePin>
  {
	  while(1);
  }
#endif
 // HAL_UART_Transmit_IT(&huart1,data,sizeof(data));
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8001858:	2201      	movs	r2, #1
 800185a:	4907      	ldr	r1, [pc, #28]	; (8001878 <main+0x88>)
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <main+0x8c>)
 800185e:	f00b fffd 	bl	800d85c <HAL_UART_Receive_IT>
  W25qxx_Init();
 8001862:	f001 f86d 	bl	8002940 <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  while (1)
  {
	  cppMain();
 8001866:	f007 ff5f 	bl	8009728 <cppMain>
 800186a:	e7fc      	b.n	8001866 <main+0x76>
 800186c:	200004e8 	.word	0x200004e8
 8001870:	20000534 	.word	0x20000534
 8001874:	2000049c 	.word	0x2000049c
 8001878:	20000580 	.word	0x20000580
 800187c:	20000248 	.word	0x20000248

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b096      	sub	sp, #88	; 0x58
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2244      	movs	r2, #68	; 0x44
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f00d fb14 	bl	800eebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	463b      	mov	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018a6:	f009 f9b9 	bl	800ac1c <HAL_PWREx_ControlVoltageScaling>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018b0:	f000 fb48 	bl	8001f44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018b4:	2310      	movs	r3, #16
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018c8:	2301      	movs	r3, #1
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 80018d0:	2356      	movs	r3, #86	; 0x56
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018d8:	2302      	movs	r3, #2
 80018da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80018dc:	2308      	movs	r3, #8
 80018de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4618      	mov	r0, r3
 80018e6:	f009 f9ef 	bl	800acc8 <HAL_RCC_OscConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80018f0:	f000 fb28 	bl	8001f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	230f      	movs	r3, #15
 80018f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2303      	movs	r3, #3
 80018fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001908:	463b      	mov	r3, r7
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f009 fdef 	bl	800b4f0 <HAL_RCC_ClockConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001918:	f000 fb14 	bl	8001f44 <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	3758      	adds	r7, #88	; 0x58
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_I2C1_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <MX_I2C1_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_I2C1_Init+0x74>)
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <MX_I2C1_Init+0x7c>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_I2C1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_I2C1_Init+0x74>)
 800193c:	2201      	movs	r2, #1
 800193e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_I2C1_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800195e:	480e      	ldr	r0, [pc, #56]	; (8001998 <MX_I2C1_Init+0x74>)
 8001960:	f008 fb52 	bl	800a008 <HAL_I2C_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800196a:	f000 faeb 	bl	8001f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800196e:	2100      	movs	r1, #0
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <MX_I2C1_Init+0x74>)
 8001972:	f009 f8ad 	bl	800aad0 <HAL_I2CEx_ConfigAnalogFilter>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800197c:	f000 fae2 	bl	8001f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001980:	2100      	movs	r1, #0
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_I2C1_Init+0x74>)
 8001984:	f009 f8ef 	bl	800ab66 <HAL_I2CEx_ConfigDigitalFilter>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800198e:	f000 fad9 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001f4 	.word	0x200001f4
 800199c:	40005400 	.word	0x40005400
 80019a0:	00a0a7fd 	.word	0x00a0a7fd

080019a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_LPUART1_UART_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_LPUART1_UART_Init+0x50>)
 80019e2:	f00b fe7f 	bl	800d6e4 <HAL_UART_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f000 faaa 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000248 	.word	0x20000248
 80019f8:	40008000 	.word	0x40008000

080019fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <MX_USART1_UART_Init+0x5c>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_USART1_UART_Init+0x58>)
 8001a40:	f00b fe50 	bl	800d6e4 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f000 fa7b 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200002cc 	.word	0x200002cc
 8001a58:	40013800 	.word	0x40013800

08001a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a62:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <MX_USART2_UART_Init+0x5c>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART2_UART_Init+0x58>)
 8001aa0:	f00b fe20 	bl	800d6e4 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aaa:	f000 fa4b 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000350 	.word	0x20000350
 8001ab8:	40004400 	.word	0x40004400

08001abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001ac2:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <MX_SPI1_Init+0x88>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001ad6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ada:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001af2:	2210      	movs	r2, #16
 8001af4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b1a:	4809      	ldr	r0, [pc, #36]	; (8001b40 <MX_SPI1_Init+0x84>)
 8001b1c:	f00a fa48 	bl	800bfb0 <HAL_SPI_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f000 fa0d 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b38:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200003d4 	.word	0x200003d4
 8001b44:	40013000 	.word	0x40013000
 8001b48:	20000438 	.word	0x20000438

08001b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <MX_SPI2_Init+0x88>)
 8001b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b82:	2208      	movs	r2, #8
 8001b84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001baa:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <MX_SPI2_Init+0x84>)
 8001bac:	f00a fa00 	bl	800bfb0 <HAL_SPI_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bb6:	f000 f9c5 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <MX_SPI2_Init+0x8c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <MX_SPI2_Init+0x8c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000438 	.word	0x20000438
 8001bd4:	40003800 	.word	0x40003800
 8001bd8:	200003d4 	.word	0x200003d4

08001bdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001bfc:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <MX_TIM1_Init+0xa4>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c26:	4815      	ldr	r0, [pc, #84]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c28:	f00b f8d2 	bl	800cdd0 <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c32:	f000 f987 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c44:	f00b fadb 	bl	800d1fe <HAL_TIM_ConfigClockSource>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c4e:	f000 f979 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM1_Init+0xa0>)
 8001c64:	f00b fcba 	bl	800d5dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c6e:	f000 f969 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000049c 	.word	0x2000049c
 8001c80:	40012c00 	.word	0x40012c00

08001c84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_TIM6_Init+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001c9c:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8001ca0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001caa:	2264      	movs	r2, #100	; 0x64
 8001cac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cb6:	f00b f88b 	bl	800cdd0 <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001cc0:	f000 f940 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cd2:	f00b fc83 	bl	800d5dc <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f000 f932 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200004e8 	.word	0x200004e8
 8001cec:	40001000 	.word	0x40001000

08001cf0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d02:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <MX_TIM7_Init+0x6c>)
 8001d04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d08:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8001d0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d24:	f00b f854 	bl	800cdd0 <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001d2e:	f000 f909 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM7_Init+0x68>)
 8001d40:	f00b fc4c 	bl	800d5dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001d4a:	f000 f8fb 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000534 	.word	0x20000534
 8001d5c:	40001400 	.word	0x40001400

08001d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a68      	ldr	r2, [pc, #416]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a62      	ldr	r2, [pc, #392]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a5c      	ldr	r2, [pc, #368]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <MX_GPIO_Init+0x1d4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8001ddc:	4856      	ldr	r0, [pc, #344]	; (8001f38 <MX_GPIO_Init+0x1d8>)
 8001dde:	f008 f8e1 	bl	8009fa4 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2112      	movs	r1, #18
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f008 f8db 	bl	8009fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2125      	movs	r1, #37	; 0x25
 8001df2:	4852      	ldr	r0, [pc, #328]	; (8001f3c <MX_GPIO_Init+0x1dc>)
 8001df4:	f008 f8d6 	bl	8009fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfe:	484f      	ldr	r0, [pc, #316]	; (8001f3c <MX_GPIO_Init+0x1dc>)
 8001e00:	f008 f8d0 	bl	8009fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	484b      	ldr	r0, [pc, #300]	; (8001f38 <MX_GPIO_Init+0x1d8>)
 8001e0a:	f008 f8cb 	bl	8009fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f008 f8c4 	bl	8009fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2104      	movs	r1, #4
 8001e20:	4847      	ldr	r0, [pc, #284]	; (8001f40 <MX_GPIO_Init+0x1e0>)
 8001e22:	f008 f8bf 	bl	8009fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8001e26:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001e2a:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	483e      	ldr	r0, [pc, #248]	; (8001f38 <MX_GPIO_Init+0x1d8>)
 8001e40:	f007 ff1e 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8001e44:	f241 0302 	movw	r3, #4098	; 0x1002
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e60:	f007 ff0e 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8001e64:	2310      	movs	r3, #16
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f007 feff 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 8001e82:	2325      	movs	r3, #37	; 0x25
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4828      	ldr	r0, [pc, #160]	; (8001f3c <MX_GPIO_Init+0x1dc>)
 8001e9a:	f007 fef1 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4821      	ldr	r0, [pc, #132]	; (8001f3c <MX_GPIO_Init+0x1dc>)
 8001eb8:	f007 fee2 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4819      	ldr	r0, [pc, #100]	; (8001f38 <MX_GPIO_Init+0x1d8>)
 8001ed2:	f007 fed5 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 8001ed6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f007 fec7 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 8001ef2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480b      	ldr	r0, [pc, #44]	; (8001f38 <MX_GPIO_Init+0x1d8>)
 8001f0c:	f007 feb8 	bl	8009c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8001f10:	2304      	movs	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	; (8001f40 <MX_GPIO_Init+0x1e0>)
 8001f28:	f007 feaa 	bl	8009c80 <HAL_GPIO_Init>

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	; 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	48000c00 	.word	0x48000c00

08001f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
}
 8001f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <Error_Handler+0x8>
	...

08001f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_MspInit+0x44>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_MspInit+0x44>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6613      	str	r3, [r2, #96]	; 0x60
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_MspInit+0x44>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_MspInit+0x44>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_MspInit+0x44>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_MspInit+0x44>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0a2      	sub	sp, #136	; 0x88
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2260      	movs	r2, #96	; 0x60
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00c ff7f 	bl	800eebc <memset>
  if(hi2c->Instance==I2C1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_I2C_MspInit+0xac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d138      	bne.n	800203a <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fc8:	2340      	movs	r3, #64	; 0x40
 8001fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 fcaf 	bl	800b938 <HAL_RCCEx_PeriphCLKConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fe0:	f7ff ffb0 	bl	8001f44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_I2C_MspInit+0xb0>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_I2C_MspInit+0xb0>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_I2C_MspInit+0xb0>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002000:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002002:	2312      	movs	r3, #18
 8002004:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002010:	2304      	movs	r3, #4
 8002012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800201a:	4619      	mov	r1, r3
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <HAL_I2C_MspInit+0xb4>)
 800201e:	f007 fe2f 	bl	8009c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_I2C_MspInit+0xb0>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_I2C_MspInit+0xb0>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_I2C_MspInit+0xb0>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3788      	adds	r7, #136	; 0x88
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40005400 	.word	0x40005400
 8002048:	40021000 	.word	0x40021000
 800204c:	48000400 	.word	0x48000400

08002050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0a6      	sub	sp, #152	; 0x98
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	2260      	movs	r2, #96	; 0x60
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f00c ff23 	bl	800eebc <memset>
  if(huart->Instance==LPUART1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6b      	ldr	r2, [pc, #428]	; (8002228 <HAL_UART_MspInit+0x1d8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d144      	bne.n	800210a <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002080:	2320      	movs	r3, #32
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002084:	2300      	movs	r3, #0
 8002086:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	4618      	mov	r0, r3
 800208e:	f009 fc53 	bl	800b938 <HAL_RCCEx_PeriphCLKConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002098:	f7ff ff54 	bl	8001f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800209c:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_UART_MspInit+0x1dc>)
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	4a62      	ldr	r2, [pc, #392]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020a8:	4b60      	ldr	r3, [pc, #384]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	4a5c      	ldr	r2, [pc, #368]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020e6:	2308      	movs	r3, #8
 80020e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020f0:	4619      	mov	r1, r3
 80020f2:	484f      	ldr	r0, [pc, #316]	; (8002230 <HAL_UART_MspInit+0x1e0>)
 80020f4:	f007 fdc4 	bl	8009c80 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2046      	movs	r0, #70	; 0x46
 80020fe:	f007 fd0a 	bl	8009b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002102:	2046      	movs	r0, #70	; 0x46
 8002104:	f007 fd23 	bl	8009b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002108:	e089      	b.n	800221e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_UART_MspInit+0x1e4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d143      	bne.n	800219c <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002118:	2300      	movs	r3, #0
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4618      	mov	r0, r3
 8002122:	f009 fc09 	bl	800b938 <HAL_RCCEx_PeriphCLKConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800212c:	f7ff ff0a 	bl	8001f44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <HAL_UART_MspInit+0x1dc>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_UART_MspInit+0x1dc>)
 8002136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213a:	6613      	str	r3, [r2, #96]	; 0x60
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_UART_MspInit+0x1dc>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_UART_MspInit+0x1dc>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	4a37      	ldr	r2, [pc, #220]	; (800222c <HAL_UART_MspInit+0x1dc>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002154:	4b35      	ldr	r3, [pc, #212]	; (800222c <HAL_UART_MspInit+0x1dc>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002178:	2307      	movs	r3, #7
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002182:	4619      	mov	r1, r3
 8002184:	482a      	ldr	r0, [pc, #168]	; (8002230 <HAL_UART_MspInit+0x1e0>)
 8002186:	f007 fd7b 	bl	8009c80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2025      	movs	r0, #37	; 0x25
 8002190:	f007 fcc1 	bl	8009b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002194:	2025      	movs	r0, #37	; 0x25
 8002196:	f007 fcda 	bl	8009b4e <HAL_NVIC_EnableIRQ>
}
 800219a:	e040      	b.n	800221e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_UART_MspInit+0x1e8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d13b      	bne.n	800221e <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	4618      	mov	r0, r3
 80021b4:	f009 fbc0 	bl	800b938 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80021be:	f7ff fec1 	bl	8001f44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_UART_MspInit+0x1dc>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021f2:	230c      	movs	r3, #12
 80021f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220a:	2307      	movs	r3, #7
 800220c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f007 fd31 	bl	8009c80 <HAL_GPIO_Init>
}
 800221e:	bf00      	nop
 8002220:	3798      	adds	r7, #152	; 0x98
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40008000 	.word	0x40008000
 800222c:	40021000 	.word	0x40021000
 8002230:	48000400 	.word	0x48000400
 8002234:	40013800 	.word	0x40013800
 8002238:	40004400 	.word	0x40004400

0800223c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <HAL_SPI_MspInit+0xdc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d129      	bne.n	80022b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_SPI_MspInit+0xe0>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002262:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_SPI_MspInit+0xe0>)
 8002264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002268:	6613      	str	r3, [r2, #96]	; 0x60
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_SPI_MspInit+0xe0>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_SPI_MspInit+0xe0>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_SPI_MspInit+0xe0>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_SPI_MspInit+0xe0>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800228e:	23e0      	movs	r3, #224	; 0xe0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229e:	2305      	movs	r3, #5
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ac:	f007 fce8 	bl	8009c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022b0:	e02d      	b.n	800230e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_SPI_MspInit+0xe4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d128      	bne.n	800230e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_SPI_MspInit+0xe0>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_SPI_MspInit+0xe0>)
 80022c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c6:	6593      	str	r3, [r2, #88]	; 0x58
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_SPI_MspInit+0xe0>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_SPI_MspInit+0xe0>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_SPI_MspInit+0xe0>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_SPI_MspInit+0xe0>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fe:	2305      	movs	r3, #5
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <HAL_SPI_MspInit+0xe8>)
 800230a:	f007 fcb9 	bl	8009c80 <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3730      	adds	r7, #48	; 0x30
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40013000 	.word	0x40013000
 800231c:	40021000 	.word	0x40021000
 8002320:	40003800 	.word	0x40003800
 8002324:	48000400 	.word	0x48000400

08002328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_TIM_Base_MspInit+0x9c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10c      	bne.n	8002354 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 800233c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233e:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 8002340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002344:	6613      	str	r3, [r2, #96]	; 0x60
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002352:	e032      	b.n	80023ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_TIM_Base_MspInit+0xa4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d114      	bne.n	8002388 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2036      	movs	r0, #54	; 0x36
 800237c:	f007 fbcb 	bl	8009b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002380:	2036      	movs	r0, #54	; 0x36
 8002382:	f007 fbe4 	bl	8009b4e <HAL_NVIC_EnableIRQ>
}
 8002386:	e018      	b.n	80023ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_TIM_Base_MspInit+0xa8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 8002398:	f043 0320 	orr.w	r3, r3, #32
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_TIM_Base_MspInit+0xa0>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2037      	movs	r0, #55	; 0x37
 80023b0:	f007 fbb1 	bl	8009b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023b4:	2037      	movs	r0, #55	; 0x37
 80023b6:	f007 fbca 	bl	8009b4e <HAL_NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40001000 	.word	0x40001000
 80023d0:	40001400 	.word	0x40001400

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <NMI_Handler+0x4>

080023da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <HardFault_Handler+0x4>

080023e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <MemManage_Handler+0x4>

080023e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <BusFault_Handler+0x4>

080023ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <UsageFault_Handler+0x4>

080023f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002420:	f007 fa5a 	bl	80098d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <USART1_IRQHandler+0x10>)
 800242e:	f00b fa6b 	bl	800d908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200002cc 	.word	0x200002cc

0800243c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <TIM6_DAC_IRQHandler+0x10>)
 8002442:	f00a fdbd 	bl	800cfc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200004e8 	.word	0x200004e8

08002450 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <TIM7_IRQHandler+0x10>)
 8002456:	f00a fdb3 	bl	800cfc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000534 	.word	0x20000534

08002464 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <LPUART1_IRQHandler+0x10>)
 800246a:	f00b fa4d 	bl	800d908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000248 	.word	0x20000248

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f00c fcc8 	bl	800ee3c <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20010000 	.word	0x20010000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	20000588 	.word	0x20000588
 80024e0:	20000d18 	.word	0x20000d18

080024e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4413      	add	r3, r2
 800252c:	b2db      	uxtb	r3, r3
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <bin2bcd+0x44>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	08db      	lsrs	r3, r3, #3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	b258      	sxtb	r0, r3
 8002556:	79fa      	ldrb	r2, [r7, #7]
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <bin2bcd+0x44>)
 800255a:	fba3 1302 	umull	r1, r3, r3, r2
 800255e:	08d9      	lsrs	r1, r3, #3
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	b25b      	sxtb	r3, r3
 800256e:	4303      	orrs	r3, r0
 8002570:	b25b      	sxtb	r3, r3
 8002572:	b2db      	uxtb	r3, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	cccccccd 	.word	0xcccccccd

08002584 <rtc_get_time>:

	rtc_write(0x07,rs);
}

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af04      	add	r7, sp, #16
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8002590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002594:	9302      	str	r3, [sp, #8]
 8002596:	2303      	movs	r3, #3
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2301      	movs	r3, #1
 80025a2:	2200      	movs	r2, #0
 80025a4:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80025a8:	480f      	ldr	r0, [pc, #60]	; (80025e8 <rtc_get_time+0x64>)
 80025aa:	f007 fed1 	bl	800a350 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*sec=bcd2bin(data[0]);
 80025ae:	7d3b      	ldrb	r3, [r7, #20]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ffa9 	bl	8002508 <bcd2bin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 80025be:	7d7b      	ldrb	r3, [r7, #21]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ffa1 	bl	8002508 <bcd2bin>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 80025ce:	7dbb      	ldrb	r3, [r7, #22]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff99 	bl	8002508 <bcd2bin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200001f4 	.word	0x200001f4

080025ec <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af04      	add	r7, sp, #16
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	460b      	mov	r3, r1
 80025f8:	71bb      	strb	r3, [r7, #6]
 80025fa:	4613      	mov	r3, r2
 80025fc:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 80025fe:	797b      	ldrb	r3, [r7, #5]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff9b 	bl	800253c <bin2bcd>
 8002606:	4603      	mov	r3, r0
 8002608:	733b      	strb	r3, [r7, #12]
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff95 	bl	800253c <bin2bcd>
 8002612:	4603      	mov	r3, r0
 8002614:	737b      	strb	r3, [r7, #13]
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff8f 	bl	800253c <bin2bcd>
 800261e:	4603      	mov	r3, r0
 8002620:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2303      	movs	r3, #3
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	2200      	movs	r2, #0
 8002636:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <rtc_set_time+0x5c>)
 800263c:	f007 fd74 	bl	800a128 <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200001f4 	.word	0x200001f4

0800264c <rtc_get_date>:

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af04      	add	r7, sp, #16
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 800265e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	2304      	movs	r3, #4
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8002676:	4811      	ldr	r0, [pc, #68]	; (80026bc <rtc_get_date+0x70>)
 8002678:	f007 fe6a 	bl	800a350 <HAL_I2C_Mem_Read>
	//	_Error_Handler(__FILE__,__LINE__);
	}

	*week_day=data[0];
 800267c:	7d3a      	ldrb	r2, [r7, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8002682:	7d7b      	ldrb	r3, [r7, #21]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff3f 	bl	8002508 <bcd2bin>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8002692:	7dbb      	ldrb	r3, [r7, #22]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff37 	bl	8002508 <bcd2bin>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff2f 	bl	8002508 <bcd2bin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200001f4 	.word	0x200001f4

080026c0 <rtc_set_date>:

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	4603      	mov	r3, r0
 80026d4:	71bb      	strb	r3, [r7, #6]
 80026d6:	460b      	mov	r3, r1
 80026d8:	717b      	strb	r3, [r7, #5]
 80026da:	4613      	mov	r3, r2
 80026dc:	713b      	strb	r3, [r7, #4]
	uint8_t data[4]={week_day,bin2bcd(day),bin2bcd(month),bin2bcd(year)};
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	733b      	strb	r3, [r7, #12]
 80026e2:	79bb      	ldrb	r3, [r7, #6]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff29 	bl	800253c <bin2bcd>
 80026ea:	4603      	mov	r3, r0
 80026ec:	737b      	strb	r3, [r7, #13]
 80026ee:	797b      	ldrb	r3, [r7, #5]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff23 	bl	800253c <bin2bcd>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73bb      	strb	r3, [r7, #14]
 80026fa:	793b      	ldrb	r3, [r7, #4]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff1d 	bl	800253c <bin2bcd>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8002706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	2304      	movs	r3, #4
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800271e:	4803      	ldr	r0, [pc, #12]	; (800272c <rtc_set_date+0x6c>)
 8002720:	f007 fd02 	bl	800a128 <HAL_I2C_Mem_Write>
	//	_Error_Handler(__FILE__,__LINE__);
	}
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}
 800272c:	200001f4 	.word	0x200001f4

08002730 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800273a:	f107 020f 	add.w	r2, r7, #15
 800273e:	1df9      	adds	r1, r7, #7
 8002740:	2364      	movs	r3, #100	; 0x64
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2301      	movs	r3, #1
 8002746:	4804      	ldr	r0, [pc, #16]	; (8002758 <W25qxx_Spi+0x28>)
 8002748:	f009 ff73 	bl	800c632 <HAL_SPI_TransmitReceive>
	return ret;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003d4 	.word	0x200003d4

0800275c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	2101      	movs	r1, #1
 8002776:	4813      	ldr	r0, [pc, #76]	; (80027c4 <W25qxx_ReadID+0x68>)
 8002778:	f007 fc14 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800277c:	209f      	movs	r0, #159	; 0x9f
 800277e:	f7ff ffd7 	bl	8002730 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002782:	20a5      	movs	r0, #165	; 0xa5
 8002784:	f7ff ffd4 	bl	8002730 <W25qxx_Spi>
 8002788:	4603      	mov	r3, r0
 800278a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800278c:	20a5      	movs	r0, #165	; 0xa5
 800278e:	f7ff ffcf 	bl	8002730 <W25qxx_Spi>
 8002792:	4603      	mov	r3, r0
 8002794:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002796:	20a5      	movs	r0, #165	; 0xa5
 8002798:	f7ff ffca 	bl	8002730 <W25qxx_Spi>
 800279c:	4603      	mov	r3, r0
 800279e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80027a0:	2201      	movs	r2, #1
 80027a2:	2101      	movs	r1, #1
 80027a4:	4807      	ldr	r0, [pc, #28]	; (80027c4 <W25qxx_ReadID+0x68>)
 80027a6:	f007 fbfd 	bl	8009fa4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4313      	orrs	r3, r2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
	return Temp;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	48000400 	.word	0x48000400

080027c8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2101      	movs	r1, #1
 80027d2:	4816      	ldr	r0, [pc, #88]	; (800282c <W25qxx_ReadUniqID+0x64>)
 80027d4:	f007 fbe6 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80027d8:	204b      	movs	r0, #75	; 0x4b
 80027da:	f7ff ffa9 	bl	8002730 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80027de:	2300      	movs	r3, #0
 80027e0:	71fb      	strb	r3, [r7, #7]
 80027e2:	e005      	b.n	80027f0 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80027e4:	20a5      	movs	r0, #165	; 0xa5
 80027e6:	f7ff ffa3 	bl	8002730 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	3301      	adds	r3, #1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d9f6      	bls.n	80027e4 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	71bb      	strb	r3, [r7, #6]
 80027fa:	e00b      	b.n	8002814 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80027fc:	79bc      	ldrb	r4, [r7, #6]
 80027fe:	20a5      	movs	r0, #165	; 0xa5
 8002800:	f7ff ff96 	bl	8002730 <W25qxx_Spi>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <W25qxx_ReadUniqID+0x68>)
 800280a:	4423      	add	r3, r4
 800280c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	3301      	adds	r3, #1
 8002812:	71bb      	strb	r3, [r7, #6]
 8002814:	79bb      	ldrb	r3, [r7, #6]
 8002816:	2b07      	cmp	r3, #7
 8002818:	d9f0      	bls.n	80027fc <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800281a:	2201      	movs	r2, #1
 800281c:	2101      	movs	r1, #1
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <W25qxx_ReadUniqID+0x64>)
 8002820:	f007 fbc0 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	48000400 	.word	0x48000400
 8002830:	2000058c 	.word	0x2000058c

08002834 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	2101      	movs	r1, #1
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <W25qxx_WriteEnable+0x28>)
 800283e:	f007 fbb1 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002842:	2006      	movs	r0, #6
 8002844:	f7ff ff74 	bl	8002730 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	2101      	movs	r1, #1
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <W25qxx_WriteEnable+0x28>)
 800284e:	f007 fba9 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f007 f860 	bl	8009918 <HAL_Delay>
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	48000400 	.word	0x48000400

08002860 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800286e:	2200      	movs	r2, #0
 8002870:	2101      	movs	r1, #1
 8002872:	481c      	ldr	r0, [pc, #112]	; (80028e4 <W25qxx_ReadStatusRegister+0x84>)
 8002874:	f007 fb96 	bl	8009fa4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10c      	bne.n	8002898 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800287e:	2005      	movs	r0, #5
 8002880:	f7ff ff56 	bl	8002730 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002884:	20a5      	movs	r0, #165	; 0xa5
 8002886:	f7ff ff53 	bl	8002730 <W25qxx_Spi>
 800288a:	4603      	mov	r3, r0
 800288c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <W25qxx_ReadStatusRegister+0x88>)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002896:	e01b      	b.n	80028d0 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d10c      	bne.n	80028b8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800289e:	2035      	movs	r0, #53	; 0x35
 80028a0:	f7ff ff46 	bl	8002730 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028a4:	20a5      	movs	r0, #165	; 0xa5
 80028a6:	f7ff ff43 	bl	8002730 <W25qxx_Spi>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80028ae:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <W25qxx_ReadStatusRegister+0x88>)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80028b6:	e00b      	b.n	80028d0 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80028b8:	2015      	movs	r0, #21
 80028ba:	f7ff ff39 	bl	8002730 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028be:	20a5      	movs	r0, #165	; 0xa5
 80028c0:	f7ff ff36 	bl	8002730 <W25qxx_Spi>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <W25qxx_ReadStatusRegister+0x88>)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80028d0:	2201      	movs	r2, #1
 80028d2:	2101      	movs	r1, #1
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <W25qxx_ReadStatusRegister+0x84>)
 80028d6:	f007 fb65 	bl	8009fa4 <HAL_GPIO_WritePin>
	return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	48000400 	.word	0x48000400
 80028e8:	2000058c 	.word	0x2000058c

080028ec <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f007 f811 	bl	8009918 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2101      	movs	r1, #1
 80028fa:	480f      	ldr	r0, [pc, #60]	; (8002938 <W25qxx_WaitForWriteEnd+0x4c>)
 80028fc:	f007 fb52 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002900:	2005      	movs	r0, #5
 8002902:	f7ff ff15 	bl	8002730 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002906:	20a5      	movs	r0, #165	; 0xa5
 8002908:	f7ff ff12 	bl	8002730 <W25qxx_Spi>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <W25qxx_WaitForWriteEnd+0x50>)
 8002912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f006 fffe 	bl	8009918 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <W25qxx_WaitForWriteEnd+0x50>)
 800291e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ed      	bne.n	8002906 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800292a:	2201      	movs	r2, #1
 800292c:	2101      	movs	r1, #1
 800292e:	4802      	ldr	r0, [pc, #8]	; (8002938 <W25qxx_WaitForWriteEnd+0x4c>)
 8002930:	f007 fb38 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	48000400 	.word	0x48000400
 800293c:	2000058c 	.word	0x2000058c

08002940 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <W25qxx_Init+0x19c>)
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800294e:	e002      	b.n	8002956 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002950:	2001      	movs	r0, #1
 8002952:	f006 ffe1 	bl	8009918 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8002956:	f006 ffd3 	bl	8009900 <HAL_GetTick>
 800295a:	4603      	mov	r3, r0
 800295c:	2b63      	cmp	r3, #99	; 0x63
 800295e:	d9f7      	bls.n	8002950 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2101      	movs	r1, #1
 8002964:	485e      	ldr	r0, [pc, #376]	; (8002ae0 <W25qxx_Init+0x1a0>)
 8002966:	f007 fb1d 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800296a:	2064      	movs	r0, #100	; 0x64
 800296c:	f006 ffd4 	bl	8009918 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8002970:	f7ff fef4 	bl	800275c <W25qxx_ReadID>
 8002974:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b11      	subs	r3, #17
 800297c:	2b0f      	cmp	r3, #15
 800297e:	d86c      	bhi.n	8002a5a <W25qxx_Init+0x11a>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <W25qxx_Init+0x48>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002a4d 	.word	0x08002a4d
 800298c:	08002a3f 	.word	0x08002a3f
 8002990:	08002a31 	.word	0x08002a31
 8002994:	08002a23 	.word	0x08002a23
 8002998:	08002a15 	.word	0x08002a15
 800299c:	08002a07 	.word	0x08002a07
 80029a0:	080029f9 	.word	0x080029f9
 80029a4:	080029e9 	.word	0x080029e9
 80029a8:	080029d9 	.word	0x080029d9
 80029ac:	08002a5b 	.word	0x08002a5b
 80029b0:	08002a5b 	.word	0x08002a5b
 80029b4:	08002a5b 	.word	0x08002a5b
 80029b8:	08002a5b 	.word	0x08002a5b
 80029bc:	08002a5b 	.word	0x08002a5b
 80029c0:	08002a5b 	.word	0x08002a5b
 80029c4:	080029c9 	.word	0x080029c9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80029c8:	4b44      	ldr	r3, [pc, #272]	; (8002adc <W25qxx_Init+0x19c>)
 80029ca:	220a      	movs	r2, #10
 80029cc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80029ce:	4b43      	ldr	r3, [pc, #268]	; (8002adc <W25qxx_Init+0x19c>)
 80029d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80029d6:	e046      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <W25qxx_Init+0x19c>)
 80029da:	2209      	movs	r2, #9
 80029dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <W25qxx_Init+0x19c>)
 80029e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80029e6:	e03e      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80029e8:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <W25qxx_Init+0x19c>)
 80029ea:	2208      	movs	r2, #8
 80029ec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <W25qxx_Init+0x19c>)
 80029f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80029f6:	e036      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <W25qxx_Init+0x19c>)
 80029fa:	2207      	movs	r2, #7
 80029fc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <W25qxx_Init+0x19c>)
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002a04:	e02f      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <W25qxx_Init+0x19c>)
 8002a08:	2206      	movs	r2, #6
 8002a0a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <W25qxx_Init+0x19c>)
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002a12:	e028      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <W25qxx_Init+0x19c>)
 8002a16:	2205      	movs	r2, #5
 8002a18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002a1a:	4b30      	ldr	r3, [pc, #192]	; (8002adc <W25qxx_Init+0x19c>)
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002a20:	e021      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002a22:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <W25qxx_Init+0x19c>)
 8002a24:	2204      	movs	r2, #4
 8002a26:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <W25qxx_Init+0x19c>)
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002a2e:	e01a      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002a30:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <W25qxx_Init+0x19c>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <W25qxx_Init+0x19c>)
 8002a38:	2208      	movs	r2, #8
 8002a3a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002a3c:	e013      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002a3e:	4b27      	ldr	r3, [pc, #156]	; (8002adc <W25qxx_Init+0x19c>)
 8002a40:	2202      	movs	r2, #2
 8002a42:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <W25qxx_Init+0x19c>)
 8002a46:	2204      	movs	r2, #4
 8002a48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8002a4a:	e00c      	b.n	8002a66 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <W25qxx_Init+0x19c>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <W25qxx_Init+0x19c>)
 8002a54:	2202      	movs	r2, #2
 8002a56:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002a58:	e005      	b.n	8002a66 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <W25qxx_Init+0x19c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e036      	b.n	8002ad4 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <W25qxx_Init+0x19c>)
 8002a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <W25qxx_Init+0x19c>)
 8002a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a74:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002a76:	4b19      	ldr	r3, [pc, #100]	; (8002adc <W25qxx_Init+0x19c>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <W25qxx_Init+0x19c>)
 8002a7e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <W25qxx_Init+0x19c>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <W25qxx_Init+0x19c>)
 8002a86:	6912      	ldr	r2, [r2, #16]
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	4a13      	ldr	r2, [pc, #76]	; (8002adc <W25qxx_Init+0x19c>)
 8002a8e:	8952      	ldrh	r2, [r2, #10]
 8002a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <W25qxx_Init+0x19c>)
 8002a96:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <W25qxx_Init+0x19c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <W25qxx_Init+0x19c>)
 8002aa0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <W25qxx_Init+0x19c>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <W25qxx_Init+0x19c>)
 8002aa8:	6912      	ldr	r2, [r2, #16]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	0a9b      	lsrs	r3, r3, #10
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <W25qxx_Init+0x19c>)
 8002ab2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002ab4:	f7ff fe88 	bl	80027c8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f7ff fed1 	bl	8002860 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f7ff fece 	bl	8002860 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f7ff fecb 	bl	8002860 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <W25qxx_Init+0x19c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000058c 	.word	0x2000058c
 8002ae0:	48000400 	.word	0x48000400

08002ae4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002aec:	e002      	b.n	8002af4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8002aee:	2001      	movs	r0, #1
 8002af0:	f006 ff12 	bl	8009918 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <W25qxx_EraseSector+0xa8>)
 8002af6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d0f7      	beq.n	8002aee <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <W25qxx_EraseSector+0xa8>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8002b06:	f7ff fef1 	bl	80028ec <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <W25qxx_EraseSector+0xa8>)
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8002b16:	f7ff fe8d 	bl	8002834 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	481c      	ldr	r0, [pc, #112]	; (8002b90 <W25qxx_EraseSector+0xac>)
 8002b20:	f007 fa40 	bl	8009fa4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <W25qxx_EraseSector+0xa8>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d909      	bls.n	8002b40 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8002b2c:	2021      	movs	r0, #33	; 0x21
 8002b2e:	f7ff fdff 	bl	8002730 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0e1b      	lsrs	r3, r3, #24
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fdf9 	bl	8002730 <W25qxx_Spi>
 8002b3e:	e002      	b.n	8002b46 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8002b40:	2020      	movs	r0, #32
 8002b42:	f7ff fdf5 	bl	8002730 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fdef 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fde9 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fde4 	bl	8002730 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4808      	ldr	r0, [pc, #32]	; (8002b90 <W25qxx_EraseSector+0xac>)
 8002b6e:	f007 fa19 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002b72:	f7ff febb 	bl	80028ec <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8002b76:	2001      	movs	r0, #1
 8002b78:	f006 fece 	bl	8009918 <HAL_Delay>
	w25qxx.Lock = 0;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <W25qxx_EraseSector+0xa8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000058c 	.word	0x2000058c
 8002b90:	48000400 	.word	0x48000400

08002b94 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <W25qxx_SectorToPage+0x28>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <W25qxx_SectorToPage+0x28>)
 8002ba8:	8952      	ldrh	r2, [r2, #10]
 8002baa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000058c 	.word	0x2000058c

08002bc0 <W25qxx_IsEmptySector>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b090      	sub	sp, #64	; 0x40
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8002bcc:	e002      	b.n	8002bd4 <W25qxx_IsEmptySector+0x14>
		W25qxx_Delay(1);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f006 fea2 	bl	8009918 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002bd6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d0f7      	beq.n	8002bce <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock = 1;
 8002bde:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToCheck_up_to_SectorSize == 0))
 8002be6:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d802      	bhi.n	8002bf6 <W25qxx_IsEmptySector+0x36>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	607b      	str	r3, [r7, #4]
	uint32_t StartTime = HAL_GetTick();
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c00:	e055      	b.n	8002cae <W25qxx_IsEmptySector+0xee>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2101      	movs	r1, #1
 8002c06:	4861      	ldr	r0, [pc, #388]	; (8002d8c <W25qxx_IsEmptySector+0x1cc>)
 8002c08:	f007 f9cc 	bl	8009fa4 <HAL_GPIO_WritePin>
		WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c18:	4413      	add	r3, r2
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
		if (w25qxx.ID >= W25Q256)
 8002c1c:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d909      	bls.n	8002c38 <W25qxx_IsEmptySector+0x78>
		{
			W25qxx_Spi(0x0C);
 8002c24:	200c      	movs	r0, #12
 8002c26:	f7ff fd83 	bl	8002730 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	0e1b      	lsrs	r3, r3, #24
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fd7d 	bl	8002730 <W25qxx_Spi>
 8002c36:	e002      	b.n	8002c3e <W25qxx_IsEmptySector+0x7e>
		}
		else
		{
			W25qxx_Spi(0x0B);
 8002c38:	200b      	movs	r0, #11
 8002c3a:	f7ff fd79 	bl	8002730 <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fd73 	bl	8002730 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fd6d 	bl	8002730 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fd68 	bl	8002730 <W25qxx_Spi>
		W25qxx_Spi(0);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff fd65 	bl	8002730 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 8002c66:	f107 0114 	add.w	r1, r7, #20
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	4848      	ldr	r0, [pc, #288]	; (8002d90 <W25qxx_IsEmptySector+0x1d0>)
 8002c70:	f009 fbaf 	bl	800c3d2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	2101      	movs	r1, #1
 8002c78:	4844      	ldr	r0, [pc, #272]	; (8002d8c <W25qxx_IsEmptySector+0x1cc>)
 8002c7a:	f007 f993 	bl	8009fa4 <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002c84:	e00c      	b.n	8002ca0 <W25qxx_IsEmptySector+0xe0>
		{
			if (pBuffer[x] != 0xFF)
 8002c86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c8a:	3340      	adds	r3, #64	; 0x40
 8002c8c:	443b      	add	r3, r7
 8002c8e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002c92:	2bff      	cmp	r3, #255	; 0xff
 8002c94:	d16b      	bne.n	8002d6e <W25qxx_IsEmptySector+0x1ae>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8002c96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002ca0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ca4:	2b1f      	cmp	r3, #31
 8002ca6:	d9ee      	bls.n	8002c86 <W25qxx_IsEmptySector+0xc6>
	for (i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer))
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002caa:	3320      	adds	r3, #32
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cae:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3a4      	bcc.n	8002c02 <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0)
 8002cb8:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d04c      	beq.n	8002d62 <W25qxx_IsEmptySector+0x1a2>
	{
		i -= sizeof(pBuffer);
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cca:	3b20      	subs	r3, #32
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.SectorSize; i++)
 8002cce:	e043      	b.n	8002d58 <W25qxx_IsEmptySector+0x198>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	482d      	ldr	r0, [pc, #180]	; (8002d8c <W25qxx_IsEmptySector+0x1cc>)
 8002cd6:	f007 f965 	bl	8009fa4 <HAL_GPIO_WritePin>
			WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce6:	4413      	add	r3, r2
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
			if (w25qxx.ID >= W25Q256)
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d909      	bls.n	8002d06 <W25qxx_IsEmptySector+0x146>
			{
				W25qxx_Spi(0x0C);
 8002cf2:	200c      	movs	r0, #12
 8002cf4:	f7ff fd1c 	bl	8002730 <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	0e1b      	lsrs	r3, r3, #24
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fd16 	bl	8002730 <W25qxx_Spi>
 8002d04:	e002      	b.n	8002d0c <W25qxx_IsEmptySector+0x14c>
			}
			else
			{
				W25qxx_Spi(0x0B);
 8002d06:	200b      	movs	r0, #11
 8002d08:	f7ff fd12 	bl	8002730 <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd0c 	bl	8002730 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fd06 	bl	8002730 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fd01 	bl	8002730 <W25qxx_Spi>
			W25qxx_Spi(0);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7ff fcfe 	bl	8002730 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 8002d34:	f107 0114 	add.w	r1, r7, #20
 8002d38:	2364      	movs	r3, #100	; 0x64
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4814      	ldr	r0, [pc, #80]	; (8002d90 <W25qxx_IsEmptySector+0x1d0>)
 8002d3e:	f009 fb48 	bl	800c3d2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002d42:	2201      	movs	r2, #1
 8002d44:	2101      	movs	r1, #1
 8002d46:	4811      	ldr	r0, [pc, #68]	; (8002d8c <W25qxx_IsEmptySector+0x1cc>)
 8002d48:	f007 f92c 	bl	8009fa4 <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 8002d4c:	7d3b      	ldrb	r3, [r7, #20]
 8002d4e:	2bff      	cmp	r3, #255	; 0xff
 8002d50:	d10f      	bne.n	8002d72 <W25qxx_IsEmptySector+0x1b2>
		for (; i < w25qxx.SectorSize; i++)
 8002d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d54:	3301      	adds	r3, #1
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d3b6      	bcc.n	8002cd0 <W25qxx_IsEmptySector+0x110>
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e007      	b.n	8002d7e <W25qxx_IsEmptySector+0x1be>
				goto NOT_EMPTY;
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <W25qxx_IsEmptySector+0x1b4>
				goto NOT_EMPTY;
 8002d72:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	w25qxx.Lock = 0;
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <W25qxx_IsEmptySector+0x1c8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3740      	adds	r7, #64	; 0x40
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000058c 	.word	0x2000058c
 8002d8c:	48000400 	.word	0x48000400
 8002d90:	200003d4 	.word	0x200003d4

08002d94 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002da2:	e002      	b.n	8002daa <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002da4:	2001      	movs	r0, #1
 8002da6:	f006 fdb7 	bl	8009918 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002dac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d0f7      	beq.n	8002da4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002dc4:	8952      	ldrh	r2, [r2, #10]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d802      	bhi.n	8002dd0 <W25qxx_WritePage+0x3c>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002dd2:	895b      	ldrh	r3, [r3, #10]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a2b      	ldr	r2, [pc, #172]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002de4:	8952      	ldrh	r2, [r2, #10]
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d905      	bls.n	8002df6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002dea:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002dec:	895b      	ldrh	r3, [r3, #10]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002df6:	f7ff fd79 	bl	80028ec <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002dfa:	f7ff fd1b 	bl	8002834 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2101      	movs	r1, #1
 8002e02:	4824      	ldr	r0, [pc, #144]	; (8002e94 <W25qxx_WritePage+0x100>)
 8002e04:	f007 f8ce 	bl	8009fa4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002e0a:	895b      	ldrh	r3, [r3, #10]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d909      	bls.n	8002e36 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8002e22:	2012      	movs	r0, #18
 8002e24:	f7ff fc84 	bl	8002730 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0e1b      	lsrs	r3, r3, #24
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc7e 	bl	8002730 <W25qxx_Spi>
 8002e34:	e002      	b.n	8002e3c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8002e36:	2002      	movs	r0, #2
 8002e38:	f7ff fc7a 	bl	8002730 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fc74 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fc6e 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fc69 	bl	8002730 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	2364      	movs	r3, #100	; 0x64
 8002e64:	68f9      	ldr	r1, [r7, #12]
 8002e66:	480c      	ldr	r0, [pc, #48]	; (8002e98 <W25qxx_WritePage+0x104>)
 8002e68:	f009 f945 	bl	800c0f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4808      	ldr	r0, [pc, #32]	; (8002e94 <W25qxx_WritePage+0x100>)
 8002e72:	f007 f897 	bl	8009fa4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002e76:	f7ff fd39 	bl	80028ec <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f006 fd4c 	bl	8009918 <HAL_Delay>
	w25qxx.Lock = 0;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <W25qxx_WritePage+0xfc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000058c 	.word	0x2000058c
 8002e94:	48000400 	.word	0x48000400
 8002e98:	200003d4 	.word	0x200003d4

08002e9c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d802      	bhi.n	8002eba <W25qxx_WriteSector+0x1e>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d243      	bcs.n	8002f52 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	441a      	add	r2, r3
 8002ed0:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d905      	bls.n	8002ee4 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e001      	b.n	8002ee8 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002ee8:	68b8      	ldr	r0, [r7, #8]
 8002eea:	f7ff fe53 	bl	8002b94 <W25qxx_SectorToPage>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002ef2:	895b      	ldrh	r3, [r3, #10]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efc:	4413      	add	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002f02:	895b      	ldrh	r3, [r3, #10]
 8002f04:	461a      	mov	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f0c:	fb01 f202 	mul.w	r2, r1, r2
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	69f9      	ldr	r1, [r7, #28]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ff3a 	bl	8002d94 <W25qxx_WritePage>
		StartPage++;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002f28:	895b      	ldrh	r3, [r3, #10]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1a9a      	subs	r2, r3, r2
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <W25qxx_WriteSector+0xc0>)
 8002f38:	895b      	ldrh	r3, [r3, #10]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	dce1      	bgt.n	8002f14 <W25qxx_WriteSector+0x78>
 8002f50:	e000      	b.n	8002f54 <W25qxx_WriteSector+0xb8>
		return;
 8002f52:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000058c 	.word	0x2000058c

08002f60 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002f6e:	e002      	b.n	8002f76 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f006 fcd1 	bl	8009918 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002f78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d0f7      	beq.n	8002f70 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8002f80:	4b33      	ldr	r3, [pc, #204]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002f8a:	895b      	ldrh	r3, [r3, #10]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d802      	bhi.n	8002f9a <W25qxx_ReadPage+0x3a>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002f9c:	895b      	ldrh	r3, [r3, #10]
 8002f9e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002fa8:	8952      	ldrh	r2, [r2, #10]
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d905      	bls.n	8002fba <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002fb0:	895b      	ldrh	r3, [r3, #10]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002fbc:	895b      	ldrh	r3, [r3, #10]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4820      	ldr	r0, [pc, #128]	; (8003054 <W25qxx_ReadPage+0xf4>)
 8002fd2:	f006 ffe7 	bl	8009fa4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d909      	bls.n	8002ff2 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8002fde:	200c      	movs	r0, #12
 8002fe0:	f7ff fba6 	bl	8002730 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0e1b      	lsrs	r3, r3, #24
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fba0 	bl	8002730 <W25qxx_Spi>
 8002ff0:	e002      	b.n	8002ff8 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002ff2:	200b      	movs	r0, #11
 8002ff4:	f7ff fb9c 	bl	8002730 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fb96 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fb90 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fb8b 	bl	8002730 <W25qxx_Spi>
	W25qxx_Spi(0);
 800301a:	2000      	movs	r0, #0
 800301c:	f7ff fb88 	bl	8002730 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b29a      	uxth	r2, r3
 8003024:	2364      	movs	r3, #100	; 0x64
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	480b      	ldr	r0, [pc, #44]	; (8003058 <W25qxx_ReadPage+0xf8>)
 800302a:	f009 f9d2 	bl	800c3d2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800302e:	2201      	movs	r2, #1
 8003030:	2101      	movs	r1, #1
 8003032:	4808      	ldr	r0, [pc, #32]	; (8003054 <W25qxx_ReadPage+0xf4>)
 8003034:	f006 ffb6 	bl	8009fa4 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f006 fc6d 	bl	8009918 <HAL_Delay>
	w25qxx.Lock = 0;
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <W25qxx_ReadPage+0xf0>)
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000058c 	.word	0x2000058c
 8003054:	48000400 	.word	0x48000400
 8003058:	200003d4 	.word	0x200003d4

0800305c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800306a:	4b2c      	ldr	r3, [pc, #176]	; (800311c <W25qxx_ReadSector+0xc0>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d802      	bhi.n	800307a <W25qxx_ReadSector+0x1e>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <W25qxx_ReadSector+0xc0>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <W25qxx_ReadSector+0xc0>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d243      	bcs.n	8003112 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	441a      	add	r2, r3
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <W25qxx_ReadSector+0xc0>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	429a      	cmp	r2, r3
 8003096:	d905      	bls.n	80030a4 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <W25qxx_ReadSector+0xc0>)
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e001      	b.n	80030a8 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f7ff fd73 	bl	8002b94 <W25qxx_SectorToPage>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <W25qxx_ReadSector+0xc0>)
 80030b2:	895b      	ldrh	r3, [r3, #10]
 80030b4:	4619      	mov	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80030bc:	4413      	add	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <W25qxx_ReadSector+0xc0>)
 80030c2:	895b      	ldrh	r3, [r3, #10]
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80030cc:	fb01 f202 	mul.w	r2, r1, r2
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	69f9      	ldr	r1, [r7, #28]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff40 	bl	8002f60 <W25qxx_ReadPage>
		StartPage++;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3301      	adds	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <W25qxx_ReadSector+0xc0>)
 80030e8:	895b      	ldrh	r3, [r3, #10]
 80030ea:	461a      	mov	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1a9a      	subs	r2, r3, r2
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <W25qxx_ReadSector+0xc0>)
 80030f8:	895b      	ldrh	r3, [r3, #10]
 80030fa:	461a      	mov	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	dce1      	bgt.n	80030d4 <W25qxx_ReadSector+0x78>
 8003110:	e000      	b.n	8003114 <W25qxx_ReadSector+0xb8>
		return;
 8003112:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000058c 	.word	0x2000058c

08003120 <Reset_Handler>:
 8003120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003158 <LoopForever+0x2>
 8003124:	f7ff f9de 	bl	80024e4 <SystemInit>
 8003128:	480c      	ldr	r0, [pc, #48]	; (800315c <LoopForever+0x6>)
 800312a:	490d      	ldr	r1, [pc, #52]	; (8003160 <LoopForever+0xa>)
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <LoopForever+0xe>)
 800312e:	2300      	movs	r3, #0
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:
 8003132:	58d4      	ldr	r4, [r2, r3]
 8003134:	50c4      	str	r4, [r0, r3]
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:
 8003138:	18c4      	adds	r4, r0, r3
 800313a:	428c      	cmp	r4, r1
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <LoopForever+0x12>)
 8003140:	4c0a      	ldr	r4, [pc, #40]	; (800316c <LoopForever+0x16>)
 8003142:	2300      	movs	r3, #0
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:
 800314a:	42a2      	cmp	r2, r4
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>
 800314e:	f00b fe7b 	bl	800ee48 <__libc_init_array>
 8003152:	f7fe fb4d 	bl	80017f0 <main>

08003156 <LoopForever>:
 8003156:	e7fe      	b.n	8003156 <LoopForever>
 8003158:	20010000 	.word	0x20010000
 800315c:	20000000 	.word	0x20000000
 8003160:	20000078 	.word	0x20000078
 8003164:	0800fd38 	.word	0x0800fd38
 8003168:	20000078 	.word	0x20000078
 800316c:	20000d18 	.word	0x20000d18

08003170 <ADC1_IRQHandler>:
 8003170:	e7fe      	b.n	8003170 <ADC1_IRQHandler>
	...

08003174 <_ZN9LpdcLogicC1Ev>:
extern uint16_t productiontimeSetOL;
extern uint8_t productionhysPosSetOL,productionhysNegSetOL,productChangeOL;
extern uint8_t alarmOnOff;


LpdcLogic::LpdcLogic() {
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	4a06      	ldr	r2, [pc, #24]	; (8003198 <_ZN9LpdcLogicC1Ev+0x24>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	721a      	strb	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	0800fc64 	.word	0x0800fc64

0800319c <_ZN9LpdcLogicD1Ev>:

LpdcLogic::~LpdcLogic() {
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <_ZN9LpdcLogicD1Ev+0x1c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	0800fc64 	.word	0x0800fc64

080031bc <_ZN9LpdcLogicD0Ev>:
LpdcLogic::~LpdcLogic() {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
}
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ffe9 	bl	800319c <_ZN9LpdcLogicD1Ev>
 80031ca:	210c      	movs	r1, #12
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f00b fe30 	bl	800ee32 <_ZdlPvj>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_ZN9LpdcLogic3runEv>:

void LpdcLogic::run()
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	shiftChange();
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f811 	bl	800320c <_ZN9LpdcLogic11shiftChangeEv>
	productChange();
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f84e 	bl	800328c <_ZN9LpdcLogic13productChangeEv>
	production();
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f883 	bl	80032fc <_ZN9LpdcLogic10productionEv>
	manualRejection();
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8ca 	bl	8003390 <_ZN9LpdcLogic15manualRejectionEv>
	mAlarmControl();
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8fd 	bl	80033fc <_ZN9LpdcLogic13mAlarmControlEv>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <_ZN9LpdcLogic11shiftChangeEv>:

void LpdcLogic::shiftChange()
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	if((CurrentShift != CurrentShift_K1)&&(UpdateShiftInfo==1))
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 8003216:	781a      	ldrb	r2, [r3, #0]
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d01c      	beq.n	800325a <_ZN9LpdcLogic11shiftChangeEv+0x4e>
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d118      	bne.n	800325a <_ZN9LpdcLogic11shiftChangeEv+0x4e>
	{
		MAC_Gen_Prod_Input1_Production=0;
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <_ZN9LpdcLogic11shiftChangeEv+0x68>)
 800322a:	2200      	movs	r2, #0
 800322c:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <_ZN9LpdcLogic11shiftChangeEv+0x6c>)
 8003230:	2200      	movs	r2, #0
 8003232:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <_ZN9LpdcLogic11shiftChangeEv+0x70>)
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <_ZN9LpdcLogic11shiftChangeEv+0x74>)
 800323c:	2200      	movs	r2, #0
 800323e:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <_ZN9LpdcLogic11shiftChangeEv+0x78>)
 8003242:	2200      	movs	r2, #0
 8003244:	801a      	strh	r2, [r3, #0]
		UpdateShiftInfo=0;
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <_ZN9LpdcLogic11shiftChangeEv+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
		CurrentShift_K1= CurrentShift;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <_ZN9LpdcLogic11shiftChangeEv+0x5c>)
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <_ZN9LpdcLogic11shiftChangeEv+0x60>)
 8003252:	701a      	strb	r2, [r3, #0]
		IsCurrentShiftUpdated=1;
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <_ZN9LpdcLogic11shiftChangeEv+0x7c>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
	}
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	200007d7 	.word	0x200007d7
 800326c:	200005c4 	.word	0x200005c4
 8003270:	200007d8 	.word	0x200007d8
 8003274:	200005ba 	.word	0x200005ba
 8003278:	200005be 	.word	0x200005be
 800327c:	200005c2 	.word	0x200005c2
 8003280:	200005bc 	.word	0x200005bc
 8003284:	200005c0 	.word	0x200005c0
 8003288:	200005c5 	.word	0x200005c5

0800328c <_ZN9LpdcLogic13productChangeEv>:

void LpdcLogic::productChange()
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	if((productChangeOL ==1)&&(Debounce_productChangeOL ==1))	  /*reset due to product change*/
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <_ZN9LpdcLogic13productChangeEv+0x58>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d116      	bne.n	80032ca <_ZN9LpdcLogic13productChangeEv+0x3e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7a1b      	ldrb	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d112      	bne.n	80032ca <_ZN9LpdcLogic13productChangeEv+0x3e>
	  {
		MAC_Gen_Prod_Input1_Production=0;
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <_ZN9LpdcLogic13productChangeEv+0x5c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	801a      	strh	r2, [r3, #0]
		MAC_Gen_Rej_Input_Production=0;
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_ZN9LpdcLogic13productChangeEv+0x60>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	801a      	strh	r2, [r3, #0]
		Manual_RejectionCount=0;
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <_ZN9LpdcLogic13productChangeEv+0x64>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	801a      	strh	r2, [r3, #0]
		Production_Zeit=0;
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <_ZN9LpdcLogic13productChangeEv+0x68>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]
		Rejection_Zeit=0;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <_ZN9LpdcLogic13productChangeEv+0x6c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	801a      	strh	r2, [r3, #0]
		Debounce_productChangeOL=0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	721a      	strb	r2, [r3, #8]
	  }
	  else if(productChangeOL==0)
	  {
	  	Debounce_productChangeOL=1;
	  }
}
 80032c8:	e006      	b.n	80032d8 <_ZN9LpdcLogic13productChangeEv+0x4c>
	  else if(productChangeOL==0)
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <_ZN9LpdcLogic13productChangeEv+0x58>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <_ZN9LpdcLogic13productChangeEv+0x4c>
	  	Debounce_productChangeOL=1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	721a      	strb	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200000ec 	.word	0x200000ec
 80032e8:	200005ba 	.word	0x200005ba
 80032ec:	200005be 	.word	0x200005be
 80032f0:	200005c2 	.word	0x200005c2
 80032f4:	200005bc 	.word	0x200005bc
 80032f8:	200005c0 	.word	0x200005c0

080032fc <_ZN9LpdcLogic10productionEv>:

void LpdcLogic::production()
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

GPIO_PinStateMac = HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
 8003304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003308:	481b      	ldr	r0, [pc, #108]	; (8003378 <_ZN9LpdcLogic10productionEv+0x7c>)
 800330a:	f006 fe33 	bl	8009f74 <HAL_GPIO_ReadPin>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <_ZN9LpdcLogic10productionEv+0x80>)
 8003314:	701a      	strb	r2, [r3, #0]
GPIO_PinStateEjection = HAL_GPIO_ReadPin(GPIOC,InputMachine2_Pin);
 8003316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800331a:	4817      	ldr	r0, [pc, #92]	; (8003378 <_ZN9LpdcLogic10productionEv+0x7c>)
 800331c:	f006 fe2a 	bl	8009f74 <HAL_GPIO_ReadPin>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <_ZN9LpdcLogic10productionEv+0x84>)
 8003326:	701a      	strb	r2, [r3, #0]
if(GPIO_PinStateMac == GPIO_PIN_RESET){
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <_ZN9LpdcLogic10productionEv+0x80>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11f      	bne.n	8003370 <_ZN9LpdcLogic10productionEv+0x74>
	if((GPIO_PinStateEjection ==GPIO_PIN_RESET)&&(MAC_A_Prod_Input1_DeBounce))
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <_ZN9LpdcLogic10productionEv+0x84>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d110      	bne.n	800335a <_ZN9LpdcLogic10productionEv+0x5e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00c      	beq.n	800335a <_ZN9LpdcLogic10productionEv+0x5e>
	{
		  MAC_A_Prod_Input1_DeBounce	= 0;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	711a      	strb	r2, [r3, #4]
		  MAC_Gen_Prod_Input1_Production =1;
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <_ZN9LpdcLogic10productionEv+0x88>)
 8003348:	2201      	movs	r2, #1
 800334a:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production = 0;
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <_ZN9LpdcLogic10productionEv+0x8c>)
 800334e:	2200      	movs	r2, #0
 8003350:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <_ZN9LpdcLogic10productionEv+0x90>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]

	}
	else{}
}

}
 8003358:	e00a      	b.n	8003370 <_ZN9LpdcLogic10productionEv+0x74>
	else if((GPIO_PinStateEjection==GPIO_PIN_SET)&&(!MAC_A_Prod_Input1_DeBounce))
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <_ZN9LpdcLogic10productionEv+0x84>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d106      	bne.n	8003370 <_ZN9LpdcLogic10productionEv+0x74>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	791b      	ldrb	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <_ZN9LpdcLogic10productionEv+0x74>
		   MAC_A_Prod_Input1_DeBounce	 =1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	711a      	strb	r2, [r3, #4]
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	48000800 	.word	0x48000800
 800337c:	200005b4 	.word	0x200005b4
 8003380:	200005b5 	.word	0x200005b5
 8003384:	200005ba 	.word	0x200005ba
 8003388:	200005be 	.word	0x200005be
 800338c:	200005c6 	.word	0x200005c6

08003390 <_ZN9LpdcLogic15manualRejectionEv>:

void LpdcLogic::manualRejection()
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	GPIO_PinStateRej = HAL_GPIO_ReadPin(GPIOA,InputMachine3_Pin);
 8003398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800339c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a0:	f006 fde8 	bl	8009f74 <HAL_GPIO_ReadPin>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <_ZN9LpdcLogic15manualRejectionEv+0x5c>)
 80033aa:	701a      	strb	r2, [r3, #0]
	if((GPIO_PinStateRej ==GPIO_PIN_RESET)&&(DebounceMACA_Rej))
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <_ZN9LpdcLogic15manualRejectionEv+0x5c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d110      	bne.n	80033d6 <_ZN9LpdcLogic15manualRejectionEv+0x46>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	795b      	ldrb	r3, [r3, #5]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <_ZN9LpdcLogic15manualRejectionEv+0x46>
	 {
		  DebounceMACA_Rej=0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	715a      	strb	r2, [r3, #5]
		  //Manual_RejectionCount	=  Manual_RejectionCount+1;
		  MAC_Gen_Prod_Input1_Production =0;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <_ZN9LpdcLogic15manualRejectionEv+0x60>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	801a      	strh	r2, [r3, #0]
		  MAC_Gen_Rej_Input_Production = 1;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <_ZN9LpdcLogic15manualRejectionEv+0x64>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	801a      	strh	r2, [r3, #0]
		  UpdateStorage=1;
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <_ZN9LpdcLogic15manualRejectionEv+0x68>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
	 }
	 else if(GPIO_PinStateRej ==GPIO_PIN_SET)
	 {
		 DebounceMACA_Rej=1;
	 }
}
 80033d4:	e006      	b.n	80033e4 <_ZN9LpdcLogic15manualRejectionEv+0x54>
	 else if(GPIO_PinStateRej ==GPIO_PIN_SET)
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <_ZN9LpdcLogic15manualRejectionEv+0x5c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <_ZN9LpdcLogic15manualRejectionEv+0x54>
		 DebounceMACA_Rej=1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	715a      	strb	r2, [r3, #5]
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200005b6 	.word	0x200005b6
 80033f0:	200005ba 	.word	0x200005ba
 80033f4:	200005be 	.word	0x200005be
 80033f8:	200005c6 	.word	0x200005c6

080033fc <_ZN9LpdcLogic13mAlarmControlEv>:

void LpdcLogic::mAlarmControl(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	}
	else
	{
	//	HAL_GPIO_WritePin(GPIOC, RELAY4_Pin, GPIO_PIN_RESET);
	}
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <_ZN6commonC1Ev+0x1c>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	0800fc74 	.word	0x0800fc74

08003430 <_ZN6commonD1Ev>:

common::~common() {
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <_ZN6commonD1Ev+0x1c>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	0800fc74 	.word	0x0800fc74

08003450 <_ZN6commonD0Ev>:
common::~common() {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
}
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ffe9 	bl	8003430 <_ZN6commonD1Ev>
 800345e:	2104      	movs	r1, #4
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f00b fce6 	bl	800ee32 <_ZdlPvj>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_ZN14DisplayRoutineC1Ev>:
extern uint16_t productiontimeSetOL;

char GLCDNumericArray[2];
char gLCDNumericArraySize_4[4];

DisplayRoutine::DisplayRoutine() {
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <_ZN14DisplayRoutineC1Ev+0xa4>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fa2a 	bl	80038dc <_ZN4GLCDC1Ev>
 8003488:	687d      	ldr	r5, [r7, #4]
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <_ZN14DisplayRoutineC1Ev+0xa8>)
 800348c:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8003490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003492:	c407      	stmia	r4!, {r0, r1, r2}
 8003494:	8023      	strh	r3, [r4, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1f      	ldr	r2, [pc, #124]	; (800351c <_ZN14DisplayRoutineC1Ev+0xac>)
 80034a0:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	491d      	ldr	r1, [pc, #116]	; (8003520 <_ZN14DisplayRoutineC1Ev+0xb0>)
 80034ac:	f603 2219 	addw	r2, r3, #2585	; 0xa19
 80034b0:	8808      	ldrh	r0, [r1, #0]
 80034b2:	7889      	ldrb	r1, [r1, #2]
 80034b4:	8010      	strh	r0, [r2, #0]
 80034b6:	7091      	strb	r1, [r2, #2]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <_ZN14DisplayRoutineC1Ev+0xb4>)
 80034c2:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	687d      	ldr	r5, [r7, #4]
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <_ZN14DisplayRoutineC1Ev+0xb8>)
 80034ce:	f605 241f 	addw	r4, r5, #2591	; 0xa1f
 80034d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034d4:	6020      	str	r0, [r4, #0]
 80034d6:	6061      	str	r1, [r4, #4]
 80034d8:	60a2      	str	r2, [r4, #8]
 80034da:	2300      	movs	r3, #0
 80034dc:	f885 3a2b 	strb.w	r3, [r5, #2603]	; 0xa2b
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <_ZN14DisplayRoutineC1Ev+0xbc>)
 80034e4:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 80034e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 80034f4:	687d      	ldr	r5, [r7, #4]
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <_ZN14DisplayRoutineC1Ev+0xc0>)
 80034f8:	f605 2439 	addw	r4, r5, #2617	; 0xa39
 80034fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034fe:	6020      	str	r0, [r4, #0]
 8003500:	6061      	str	r1, [r4, #4]
 8003502:	60a2      	str	r2, [r4, #8]
 8003504:	2300      	movs	r3, #0
 8003506:	f885 3a45 	strb.w	r3, [r5, #2629]	; 0xa45
	// TODO Auto-generated constructor stub

}
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bdb0      	pop	{r4, r5, r7, pc}
 8003514:	0800fc84 	.word	0x0800fc84
 8003518:	0800f7a4 	.word	0x0800f7a4
 800351c:	0800f7b4 	.word	0x0800f7b4
 8003520:	0800f7b8 	.word	0x0800f7b8
 8003524:	0800f7bc 	.word	0x0800f7bc
 8003528:	0800f7c0 	.word	0x0800f7c0
 800352c:	0800f7d0 	.word	0x0800f7d0
 8003530:	0800f7e0 	.word	0x0800f7e0

08003534 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4a06      	ldr	r2, [pc, #24]	; (8003558 <_ZN14DisplayRoutineD1Ev+0x24>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f004 f944 	bl	80077d4 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800fc84 	.word	0x0800fc84

0800355c <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
}
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe5 	bl	8003534 <_ZN14DisplayRoutineD1Ev>
 800356a:	f640 2148 	movw	r1, #2632	; 0xa48
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f00b fc5f 	bl	800ee32 <_ZdlPvj>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1d18      	adds	r0, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8003592:	2201      	movs	r2, #1
 8003594:	2100      	movs	r1, #0
 8003596:	f004 fbdd 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(hour_t,2,0);
 800359a:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <_ZN14DisplayRoutine3runEv+0x160>)
 800359c:	7819      	ldrb	r1, [r3, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	2202      	movs	r2, #2
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8b2 	bl	800370c <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(15,2,colon);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1d18      	adds	r0, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 80035b2:	2202      	movs	r2, #2
 80035b4:	210f      	movs	r1, #15
 80035b6:	f004 fbcd 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(min_t,2,20);
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <_ZN14DisplayRoutine3runEv+0x164>)
 80035bc:	7819      	ldrb	r1, [r3, #0]
 80035be:	2314      	movs	r3, #20
 80035c0:	2202      	movs	r2, #2
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8a2 	bl	800370c <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(35,2,colon);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1d18      	adds	r0, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 80035d2:	2202      	movs	r2, #2
 80035d4:	2123      	movs	r1, #35	; 0x23
 80035d6:	f004 fbbd 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(sec_t,2,40);
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <_ZN14DisplayRoutine3runEv+0x168>)
 80035dc:	7819      	ldrb	r1, [r3, #0]
 80035de:	2328      	movs	r3, #40	; 0x28
 80035e0:	2202      	movs	r2, #2
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f892 	bl	800370c <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(54,2,space);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1d18      	adds	r0, r3, #4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 80035f2:	2202      	movs	r2, #2
 80035f4:	2136      	movs	r1, #54	; 0x36
 80035f6:	f004 fbad 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(date_Rtc,2,65);
 80035fa:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <_ZN14DisplayRoutine3runEv+0x16c>)
 80035fc:	7819      	ldrb	r1, [r3, #0]
 80035fe:	2341      	movs	r3, #65	; 0x41
 8003600:	2202      	movs	r2, #2
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f882 	bl	800370c <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(81,2,backslash);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1d18      	adds	r0, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8003612:	2202      	movs	r2, #2
 8003614:	2151      	movs	r1, #81	; 0x51
 8003616:	f004 fb9d 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(month_Rtc,2,86);
 800361a:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <_ZN14DisplayRoutine3runEv+0x170>)
 800361c:	7819      	ldrb	r1, [r3, #0]
 800361e:	2356      	movs	r3, #86	; 0x56
 8003620:	2202      	movs	r2, #2
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f872 	bl	800370c <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(103,2,backslash);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1d18      	adds	r0, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 8003632:	2202      	movs	r2, #2
 8003634:	2167      	movs	r1, #103	; 0x67
 8003636:	f004 fb8d 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value2Digit(year_Rtc,2,110);
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <_ZN14DisplayRoutine3runEv+0x174>)
 800363c:	7819      	ldrb	r1, [r3, #0]
 800363e:	236e      	movs	r3, #110	; 0x6e
 8003640:	2202      	movs	r2, #2
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f862 	bl	800370c <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(0,3,production);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1d18      	adds	r0, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f603 231f 	addw	r3, r3, #2591	; 0xa1f
 8003652:	2203      	movs	r2, #3
 8003654:	2100      	movs	r1, #0
 8003656:	f004 fb7d 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Production_Total,3,85);
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <_ZN14DisplayRoutine3runEv+0x178>)
 800365c:	8819      	ldrh	r1, [r3, #0]
 800365e:	2355      	movs	r3, #85	; 0x55
 8003660:	2203      	movs	r2, #3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f892 	bl	800378c <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	1d18      	adds	r0, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8003672:	2204      	movs	r2, #4
 8003674:	2100      	movs	r1, #0
 8003676:	f004 fb6d 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(Rejection_Total,4,85);
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <_ZN14DisplayRoutine3runEv+0x17c>)
 800367c:	8819      	ldrh	r1, [r3, #0]
 800367e:	2355      	movs	r3, #85	; 0x55
 8003680:	2204      	movs	r2, #4
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f882 	bl	800378c <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1d18      	adds	r0, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f603 2339 	addw	r3, r3, #2617	; 0xa39
 8003692:	2205      	movs	r2, #5
 8003694:	2100      	movs	r1, #0
 8003696:	f004 fb5d 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(productiontimeSetOL,5,90);
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <_ZN14DisplayRoutine3runEv+0x180>)
 800369c:	8819      	ldrh	r1, [r3, #0]
 800369e:	235a      	movs	r3, #90	; 0x5a
 80036a0:	2205      	movs	r2, #5
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f872 	bl	800378c <_ZN14DisplayRoutine11value4DigitEthh>
	value4Digit(wifi_command,6,0);
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <_ZN14DisplayRoutine3runEv+0x184>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b299      	uxth	r1, r3
 80036ae:	2300      	movs	r3, #0
 80036b0:	2206      	movs	r2, #6
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f86a 	bl	800378c <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(40,6,space);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1d18      	adds	r0, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 80036c2:	2206      	movs	r2, #6
 80036c4:	2128      	movs	r1, #40	; 0x28
 80036c6:	f004 fb45 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
	value4Digit(SectorPos,6,80);
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <_ZN14DisplayRoutine3runEv+0x188>)
 80036cc:	8819      	ldrh	r1, [r3, #0]
 80036ce:	2350      	movs	r3, #80	; 0x50
 80036d0:	2206      	movs	r2, #6
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f85a 	bl	800378c <_ZN14DisplayRoutine11value4DigitEthh>

}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200007d0 	.word	0x200007d0
 80036e4:	200007d1 	.word	0x200007d1
 80036e8:	200007d2 	.word	0x200007d2
 80036ec:	200007d4 	.word	0x200007d4
 80036f0:	200007d5 	.word	0x200007d5
 80036f4:	200007d6 	.word	0x200007d6
 80036f8:	200000ee 	.word	0x200000ee
 80036fc:	200000f0 	.word	0x200000f0
 8003700:	20000000 	.word	0x20000000
 8003704:	200007d9 	.word	0x200007d9
 8003708:	200007a6 	.word	0x200007a6

0800370c <_ZN14DisplayRoutine11value2DigitEhhh>:

void DisplayRoutine::value2Digit(uint8_t value,uint8_t posLine,uint8_t posCol)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	70fb      	strb	r3, [r7, #3]
 800371e:	460b      	mov	r3, r1
 8003720:	70bb      	strb	r3, [r7, #2]
 8003722:	4613      	mov	r3, r2
 8003724:	707b      	strb	r3, [r7, #1]
	GLCDNumericArray[0] =(unsigned char)(((value%100)/10)+0x30);
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <_ZN14DisplayRoutine11value2DigitEhhh+0x74>)
 800372a:	fba2 1203 	umull	r1, r2, r2, r3
 800372e:	0952      	lsrs	r2, r2, #5
 8003730:	2164      	movs	r1, #100	; 0x64
 8003732:	fb01 f202 	mul.w	r2, r1, r2
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	b2db      	uxtb	r3, r3
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3330      	adds	r3, #48	; 0x30
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 800374a:	701a      	strb	r2, [r3, #0]
    GLCDNumericArray[1] =(unsigned char)((value%10)+0x30);
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <_ZN14DisplayRoutine11value2DigitEhhh+0x78>)
 8003750:	fba3 1302 	umull	r1, r3, r3, r2
 8003754:	08d9      	lsrs	r1, r3, #3
 8003756:	460b      	mov	r3, r1
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3330      	adds	r3, #48	; 0x30
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8003768:	705a      	strb	r2, [r3, #1]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	1d18      	adds	r0, r3, #4
 800376e:	78ba      	ldrb	r2, [r7, #2]
 8003770:	7879      	ldrb	r1, [r7, #1]
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 8003774:	f004 faee 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	51eb851f 	.word	0x51eb851f
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	200005c8 	.word	0x200005c8

0800378c <_ZN14DisplayRoutine11value4DigitEthh>:
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	807b      	strh	r3, [r7, #2]
 800379e:	460b      	mov	r3, r1
 80037a0:	707b      	strb	r3, [r7, #1]
 80037a2:	4613      	mov	r3, r2
 80037a4:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <_ZN14DisplayRoutine11value4DigitEthh+0xcc>)
 80037aa:	fba2 1203 	umull	r1, r2, r2, r3
 80037ae:	0b52      	lsrs	r2, r2, #13
 80037b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80037b4:	fb01 f202 	mul.w	r2, r1, r2
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3330      	adds	r3, #48	; 0x30
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80037ce:	701a      	strb	r2, [r3, #0]
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	4a22      	ldr	r2, [pc, #136]	; (800385c <_ZN14DisplayRoutine11value4DigitEthh+0xd0>)
 80037d4:	fba2 1203 	umull	r1, r2, r2, r3
 80037d8:	0992      	lsrs	r2, r2, #6
 80037da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037de:	fb01 f202 	mul.w	r2, r1, r2
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3330      	adds	r3, #48	; 0x30
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 80037f8:	705a      	strb	r2, [r3, #1]
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80037fe:	fba2 1203 	umull	r1, r2, r2, r3
 8003802:	0952      	lsrs	r2, r2, #5
 8003804:	2164      	movs	r1, #100	; 0x64
 8003806:	fb01 f202 	mul.w	r2, r1, r2
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	b29b      	uxth	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3330      	adds	r3, #48	; 0x30
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8003820:	709a      	strb	r2, [r3, #2]
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8003826:	fba3 1302 	umull	r1, r3, r3, r2
 800382a:	08d9      	lsrs	r1, r3, #3
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3330      	adds	r3, #48	; 0x30
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 8003840:	70da      	strb	r2, [r3, #3]
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1d18      	adds	r0, r3, #4
 8003846:	787a      	ldrb	r2, [r7, #1]
 8003848:	7839      	ldrb	r1, [r7, #0]
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <_ZN14DisplayRoutine11value4DigitEthh+0xd4>)
 800384c:	f004 fa82 	bl	8007d54 <_ZN4GLCD10m_lcdputs1EhhPc>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	d1b71759 	.word	0xd1b71759
 800385c:	10624dd3 	.word	0x10624dd3
 8003860:	200005cc 	.word	0x200005cc
 8003864:	51eb851f 	.word	0x51eb851f
 8003868:	cccccccd 	.word	0xcccccccd

0800386c <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f004 f88d 	bl	8007998 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f004 f989 	bl	8007b9c <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f004 faa0 	bl	8007dd4 <_ZN4GLCD8m_clrlcdEv>


}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
 80038a8:	4613      	mov	r3, r2
 80038aa:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2201      	movs	r2, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	78bb      	ldrb	r3, [r7, #2]
 80038ba:	4013      	ands	r3, r2
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e001      	b.n	80038cc <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
	}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <_ZN4GLCDC1Ev>:
#include "main.h"
#include <string.h>
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
uint8_t length;
GLCD::GLCD() {
 80038dc:	b5b0      	push	{r4, r5, r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fd92 	bl	8003410 <_ZN6commonC1Ev>
 80038ec:	4ac8      	ldr	r2, [pc, #800]	; (8003c10 <_ZN4GLCDC1Ev+0x334>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	687d      	ldr	r5, [r7, #4]
 80038f4:	4bc7      	ldr	r3, [pc, #796]	; (8003c14 <_ZN4GLCDC1Ev+0x338>)
 80038f6:	1d2c      	adds	r4, r5, #4
 80038f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038fa:	c407      	stmia	r4!, {r0, r1, r2}
 80038fc:	8023      	strh	r3, [r4, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	74ab      	strb	r3, [r5, #18]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	615a      	str	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	775a      	strb	r2, [r3, #29]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	331e      	adds	r3, #30
 8003918:	f640 0208 	movw	r2, #2056	; 0x808
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f00b facc 	bl	800eebc <memset>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	227e      	movs	r2, #126	; 0x7e
 8003928:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2281      	movs	r2, #129	; 0x81
 8003930:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2295      	movs	r2, #149	; 0x95
 8003938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	22b1      	movs	r2, #177	; 0xb1
 8003940:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	22b1      	movs	r2, #177	; 0xb1
 8003948:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2295      	movs	r2, #149	; 0x95
 8003950:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2281      	movs	r2, #129	; 0x81
 8003958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	227e      	movs	r2, #126	; 0x7e
 8003960:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	227e      	movs	r2, #126	; 0x7e
 8003968:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	22ff      	movs	r2, #255	; 0xff
 8003970:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	22eb      	movs	r2, #235	; 0xeb
 8003978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	22cf      	movs	r2, #207	; 0xcf
 8003980:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	22cf      	movs	r2, #207	; 0xcf
 8003988:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	22eb      	movs	r2, #235	; 0xeb
 8003990:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	22ff      	movs	r2, #255	; 0xff
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	227e      	movs	r2, #126	; 0x7e
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	220e      	movs	r2, #14
 80039a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	221f      	movs	r2, #31
 80039b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	223f      	movs	r2, #63	; 0x3f
 80039b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	227e      	movs	r2, #126	; 0x7e
 80039c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	223f      	movs	r2, #63	; 0x3f
 80039c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	221f      	movs	r2, #31
 80039d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	220e      	movs	r2, #14
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2208      	movs	r2, #8
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	221c      	movs	r2, #28
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	223e      	movs	r2, #62	; 0x3e
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	227f      	movs	r2, #127	; 0x7f
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	223e      	movs	r2, #62	; 0x3e
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	221c      	movs	r2, #28
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2208      	movs	r2, #8
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2218      	movs	r2, #24
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	22ba      	movs	r2, #186	; 0xba
 8003a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	22ff      	movs	r2, #255	; 0xff
 8003a30:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	22ba      	movs	r2, #186	; 0xba
 8003a40:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2218      	movs	r2, #24
 8003a48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	22b8      	movs	r2, #184	; 0xb8
 8003a58:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	22fc      	movs	r2, #252	; 0xfc
 8003a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	22fc      	movs	r2, #252	; 0xfc
 8003a70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	22b8      	movs	r2, #184	; 0xb8
 8003a78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2210      	movs	r2, #16
 8003a80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2218      	movs	r2, #24
 8003a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	223c      	movs	r2, #60	; 0x3c
 8003a90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	223c      	movs	r2, #60	; 0x3c
 8003a98:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2218      	movs	r2, #24
 8003aa0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	22ff      	movs	r2, #255	; 0xff
 8003aa8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	22ff      	movs	r2, #255	; 0xff
 8003ab0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	22e7      	movs	r2, #231	; 0xe7
 8003ab8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	22c3      	movs	r2, #195	; 0xc3
 8003ac0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	22c3      	movs	r2, #195	; 0xc3
 8003ac8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	22e7      	movs	r2, #231	; 0xe7
 8003ad0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	22ff      	movs	r2, #255	; 0xff
 8003ae0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	223c      	movs	r2, #60	; 0x3c
 8003ae8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2266      	movs	r2, #102	; 0x66
 8003af0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2242      	movs	r2, #66	; 0x42
 8003af8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2242      	movs	r2, #66	; 0x42
 8003b00:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2266      	movs	r2, #102	; 0x66
 8003b08:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	223c      	movs	r2, #60	; 0x3c
 8003b10:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	22c3      	movs	r2, #195	; 0xc3
 8003b20:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2299      	movs	r2, #153	; 0x99
 8003b28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	22bd      	movs	r2, #189	; 0xbd
 8003b30:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	22bd      	movs	r2, #189	; 0xbd
 8003b38:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2299      	movs	r2, #153	; 0x99
 8003b40:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	22c3      	movs	r2, #195	; 0xc3
 8003b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	22ff      	movs	r2, #255	; 0xff
 8003b50:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2270      	movs	r2, #112	; 0x70
 8003b58:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	22f8      	movs	r2, #248	; 0xf8
 8003b60:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2288      	movs	r2, #136	; 0x88
 8003b68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2288      	movs	r2, #136	; 0x88
 8003b70:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	22fd      	movs	r2, #253	; 0xfd
 8003b78:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	227f      	movs	r2, #127	; 0x7f
 8003b80:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2207      	movs	r2, #7
 8003b88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	220f      	movs	r2, #15
 8003b90:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	224e      	movs	r2, #78	; 0x4e
 8003b98:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	225f      	movs	r2, #95	; 0x5f
 8003ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	22f1      	movs	r2, #241	; 0xf1
 8003ba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	22f1      	movs	r2, #241	; 0xf1
 8003bb0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	225f      	movs	r2, #95	; 0x5f
 8003bb8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	224e      	movs	r2, #78	; 0x4e
 8003bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	22c0      	movs	r2, #192	; 0xc0
 8003bc8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	22e0      	movs	r2, #224	; 0xe0
 8003bd0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	227f      	movs	r2, #127	; 0x7f
 8003be0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2205      	movs	r2, #5
 8003be8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2205      	movs	r2, #5
 8003bf0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2207      	movs	r2, #7
 8003c00:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	22c0      	movs	r2, #192	; 0xc0
 8003c08:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003c0c:	e004      	b.n	8003c18 <_ZN4GLCDC1Ev+0x33c>
 8003c0e:	bf00      	nop
 8003c10:	0800fc94 	.word	0x0800fc94
 8003c14:	0800f7f0 	.word	0x0800f7f0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	227f      	movs	r2, #127	; 0x7f
 8003c24:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2205      	movs	r2, #5
 8003c34:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2265      	movs	r2, #101	; 0x65
 8003c3c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	227f      	movs	r2, #127	; 0x7f
 8003c44:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	223f      	movs	r2, #63	; 0x3f
 8003c4c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2299      	movs	r2, #153	; 0x99
 8003c54:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	225a      	movs	r2, #90	; 0x5a
 8003c5c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	223c      	movs	r2, #60	; 0x3c
 8003c64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	22e7      	movs	r2, #231	; 0xe7
 8003c6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	22e7      	movs	r2, #231	; 0xe7
 8003c74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	223c      	movs	r2, #60	; 0x3c
 8003c7c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	225a      	movs	r2, #90	; 0x5a
 8003c84:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2299      	movs	r2, #153	; 0x99
 8003c8c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	227f      	movs	r2, #127	; 0x7f
 8003c94:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	223e      	movs	r2, #62	; 0x3e
 8003c9c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	223e      	movs	r2, #62	; 0x3e
 8003ca4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	221c      	movs	r2, #28
 8003cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	221c      	movs	r2, #28
 8003cb4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2208      	movs	r2, #8
 8003cbc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	221c      	movs	r2, #28
 8003cdc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	221c      	movs	r2, #28
 8003ce4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	223e      	movs	r2, #62	; 0x3e
 8003cec:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	223e      	movs	r2, #62	; 0x3e
 8003cf4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	227f      	movs	r2, #127	; 0x7f
 8003cfc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2266      	movs	r2, #102	; 0x66
 8003d0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	22ff      	movs	r2, #255	; 0xff
 8003d14:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2266      	movs	r2, #102	; 0x66
 8003d24:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	225f      	movs	r2, #95	; 0x5f
 8003d34:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	225f      	movs	r2, #95	; 0x5f
 8003d3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	225f      	movs	r2, #95	; 0x5f
 8003d44:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	225f      	movs	r2, #95	; 0x5f
 8003d4c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2206      	movs	r2, #6
 8003d54:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	220f      	movs	r2, #15
 8003d5c:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2209      	movs	r2, #9
 8003d64:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	227f      	movs	r2, #127	; 0x7f
 8003d6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	227f      	movs	r2, #127	; 0x7f
 8003d74:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	227f      	movs	r2, #127	; 0x7f
 8003d84:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	227f      	movs	r2, #127	; 0x7f
 8003d8c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	22da      	movs	r2, #218	; 0xda
 8003d9c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	22bf      	movs	r2, #191	; 0xbf
 8003da4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	22a5      	movs	r2, #165	; 0xa5
 8003dac:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	22fd      	movs	r2, #253	; 0xfd
 8003db4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2259      	movs	r2, #89	; 0x59
 8003dbc:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2270      	movs	r2, #112	; 0x70
 8003dd4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2270      	movs	r2, #112	; 0x70
 8003ddc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2270      	movs	r2, #112	; 0x70
 8003de4:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2270      	movs	r2, #112	; 0x70
 8003dec:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2270      	movs	r2, #112	; 0x70
 8003df4:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2270      	movs	r2, #112	; 0x70
 8003dfc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2294      	movs	r2, #148	; 0x94
 8003e0c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	22b6      	movs	r2, #182	; 0xb6
 8003e14:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	22b6      	movs	r2, #182	; 0xb6
 8003e2c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2294      	movs	r2, #148	; 0x94
 8003e34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2206      	movs	r2, #6
 8003e4c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	227f      	movs	r2, #127	; 0x7f
 8003e54:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	227f      	movs	r2, #127	; 0x7f
 8003e5c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2206      	movs	r2, #6
 8003e64:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2210      	movs	r2, #16
 8003e74:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2230      	movs	r2, #48	; 0x30
 8003e7c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	227f      	movs	r2, #127	; 0x7f
 8003e84:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	227f      	movs	r2, #127	; 0x7f
 8003e8c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2230      	movs	r2, #48	; 0x30
 8003e94:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	222a      	movs	r2, #42	; 0x2a
 8003ebc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	223e      	movs	r2, #62	; 0x3e
 8003ec4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	221c      	movs	r2, #28
 8003ecc:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2208      	movs	r2, #8
 8003edc:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	221c      	movs	r2, #28
 8003ee4:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	223e      	movs	r2, #62	; 0x3e
 8003eec:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	222a      	movs	r2, #42	; 0x2a
 8003ef4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2208      	movs	r2, #8
 8003efc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2208      	movs	r2, #8
 8003f04:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	223c      	movs	r2, #60	; 0x3c
 8003f14:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	223c      	movs	r2, #60	; 0x3c
 8003f1c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	221c      	movs	r2, #28
 8003f54:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	223e      	movs	r2, #62	; 0x3e
 8003f5c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2208      	movs	r2, #8
 8003f64:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	223e      	movs	r2, #62	; 0x3e
 8003f74:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	221c      	movs	r2, #28
 8003f7c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2208      	movs	r2, #8
 8003f84:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2230      	movs	r2, #48	; 0x30
 8003f8c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2238      	movs	r2, #56	; 0x38
 8003f94:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	223c      	movs	r2, #60	; 0x3c
 8003f9c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	223e      	movs	r2, #62	; 0x3e
 8003fa4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	223e      	movs	r2, #62	; 0x3e
 8003fac:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	223c      	movs	r2, #60	; 0x3c
 8003fb4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2238      	movs	r2, #56	; 0x38
 8003fbc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2230      	movs	r2, #48	; 0x30
 8003fc4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2206      	movs	r2, #6
 8003fcc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	220e      	movs	r2, #14
 8003fd4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	221e      	movs	r2, #30
 8003fdc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223e      	movs	r2, #62	; 0x3e
 8003fe4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	223e      	movs	r2, #62	; 0x3e
 8003fec:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	221e      	movs	r2, #30
 8003ff4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	220e      	movs	r2, #14
 8003ffc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2206      	movs	r2, #6
 8004004:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2206      	movs	r2, #6
 800400c:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	225f      	movs	r2, #95	; 0x5f
 8004014:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	225f      	movs	r2, #95	; 0x5f
 800401c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2206      	movs	r2, #6
 8004024:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2207      	movs	r2, #7
 800402c:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2207      	movs	r2, #7
 8004034:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2207      	movs	r2, #7
 800403c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2207      	movs	r2, #7
 8004044:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2214      	movs	r2, #20
 800404c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	227f      	movs	r2, #127	; 0x7f
 8004054:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	227f      	movs	r2, #127	; 0x7f
 800405c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2214      	movs	r2, #20
 8004064:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	227f      	movs	r2, #127	; 0x7f
 800406c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	227f      	movs	r2, #127	; 0x7f
 8004074:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2214      	movs	r2, #20
 800407c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	222e      	movs	r2, #46	; 0x2e
 800408c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	226b      	movs	r2, #107	; 0x6b
 8004094:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	226b      	movs	r2, #107	; 0x6b
 800409c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	223a      	movs	r2, #58	; 0x3a
 80040a4:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2212      	movs	r2, #18
 80040ac:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2246      	movs	r2, #70	; 0x46
 80040b4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2266      	movs	r2, #102	; 0x66
 80040bc:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2230      	movs	r2, #48	; 0x30
 80040c4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2218      	movs	r2, #24
 80040cc:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	220c      	movs	r2, #12
 80040d4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2266      	movs	r2, #102	; 0x66
 80040dc:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2262      	movs	r2, #98	; 0x62
 80040e4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2230      	movs	r2, #48	; 0x30
 80040ec:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	227a      	movs	r2, #122	; 0x7a
 80040f4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	224f      	movs	r2, #79	; 0x4f
 80040fc:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	225d      	movs	r2, #93	; 0x5d
 8004104:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2237      	movs	r2, #55	; 0x37
 800410c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	227a      	movs	r2, #122	; 0x7a
 8004114:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2248      	movs	r2, #72	; 0x48
 800411c:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2204      	movs	r2, #4
 8004124:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2207      	movs	r2, #7
 800412c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2203      	movs	r2, #3
 8004134:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	221c      	movs	r2, #28
 800413c:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	223e      	movs	r2, #62	; 0x3e
 8004144:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2263      	movs	r2, #99	; 0x63
 800414c:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2241      	movs	r2, #65	; 0x41
 8004154:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2241      	movs	r2, #65	; 0x41
 800415c:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2263      	movs	r2, #99	; 0x63
 8004164:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	223e      	movs	r2, #62	; 0x3e
 800416c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	221c      	movs	r2, #28
 8004174:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2208      	movs	r2, #8
 800417c:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	222a      	movs	r2, #42	; 0x2a
 8004184:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	223e      	movs	r2, #62	; 0x3e
 800418c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	221c      	movs	r2, #28
 8004194:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	221c      	movs	r2, #28
 800419c:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	223e      	movs	r2, #62	; 0x3e
 80041a4:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	222a      	movs	r2, #42	; 0x2a
 80041ac:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2208      	movs	r2, #8
 80041b4:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2208      	movs	r2, #8
 80041bc:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2208      	movs	r2, #8
 80041c4:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	223e      	movs	r2, #62	; 0x3e
 80041cc:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	223e      	movs	r2, #62	; 0x3e
 80041d4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2208      	movs	r2, #8
 80041dc:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2208      	movs	r2, #8
 80041e4:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	22e0      	movs	r2, #224	; 0xe0
 80041f4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2260      	movs	r2, #96	; 0x60
 80041fc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2208      	movs	r2, #8
 8004204:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2208      	movs	r2, #8
 800420c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2208      	movs	r2, #8
 8004214:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2208      	movs	r2, #8
 800421c:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2208      	movs	r2, #8
 8004224:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2208      	movs	r2, #8
 800422c:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2260      	movs	r2, #96	; 0x60
 8004234:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2260      	movs	r2, #96	; 0x60
 800423c:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2260      	movs	r2, #96	; 0x60
 8004244:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2230      	movs	r2, #48	; 0x30
 800424c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2218      	movs	r2, #24
 8004254:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	220c      	movs	r2, #12
 800425c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2206      	movs	r2, #6
 8004264:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2203      	movs	r2, #3
 800426c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	223e      	movs	r2, #62	; 0x3e
 800427c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	227f      	movs	r2, #127	; 0x7f
 8004284:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2271      	movs	r2, #113	; 0x71
 800428c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2259      	movs	r2, #89	; 0x59
 8004294:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	224d      	movs	r2, #77	; 0x4d
 800429c:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	227f      	movs	r2, #127	; 0x7f
 80042a4:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223e      	movs	r2, #62	; 0x3e
 80042ac:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2240      	movs	r2, #64	; 0x40
 80042b4:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2242      	movs	r2, #66	; 0x42
 80042bc:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	227f      	movs	r2, #127	; 0x7f
 80042c4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	227f      	movs	r2, #127	; 0x7f
 80042cc:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2262      	movs	r2, #98	; 0x62
 80042e4:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2273      	movs	r2, #115	; 0x73
 80042ec:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2259      	movs	r2, #89	; 0x59
 80042f4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2249      	movs	r2, #73	; 0x49
 80042fc:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	226f      	movs	r2, #111	; 0x6f
 8004304:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2266      	movs	r2, #102	; 0x66
 800430c:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2222      	movs	r2, #34	; 0x22
 8004314:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2263      	movs	r2, #99	; 0x63
 800431c:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2249      	movs	r2, #73	; 0x49
 8004324:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2249      	movs	r2, #73	; 0x49
 800432c:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	227f      	movs	r2, #127	; 0x7f
 8004334:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2236      	movs	r2, #54	; 0x36
 800433c:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2218      	movs	r2, #24
 8004344:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	221c      	movs	r2, #28
 800434c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2216      	movs	r2, #22
 8004354:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2253      	movs	r2, #83	; 0x53
 800435c:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	227f      	movs	r2, #127	; 0x7f
 8004364:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	227f      	movs	r2, #127	; 0x7f
 800436c:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2250      	movs	r2, #80	; 0x50
 8004374:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2227      	movs	r2, #39	; 0x27
 800437c:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2267      	movs	r2, #103	; 0x67
 8004384:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2245      	movs	r2, #69	; 0x45
 800438c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2245      	movs	r2, #69	; 0x45
 8004394:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	227d      	movs	r2, #125	; 0x7d
 800439c:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2239      	movs	r2, #57	; 0x39
 80043a4:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	223c      	movs	r2, #60	; 0x3c
 80043ac:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	227e      	movs	r2, #126	; 0x7e
 80043b4:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	224b      	movs	r2, #75	; 0x4b
 80043bc:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2249      	movs	r2, #73	; 0x49
 80043c4:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2279      	movs	r2, #121	; 0x79
 80043cc:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2230      	movs	r2, #48	; 0x30
 80043d4:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2203      	movs	r2, #3
 80043dc:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2203      	movs	r2, #3
 80043e4:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2271      	movs	r2, #113	; 0x71
 80043ec:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2279      	movs	r2, #121	; 0x79
 80043f4:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	220f      	movs	r2, #15
 80043fc:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2207      	movs	r2, #7
 8004404:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2236      	movs	r2, #54	; 0x36
 800440c:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	227f      	movs	r2, #127	; 0x7f
 8004414:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2249      	movs	r2, #73	; 0x49
 800441c:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2249      	movs	r2, #73	; 0x49
 8004424:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	227f      	movs	r2, #127	; 0x7f
 800442c:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2236      	movs	r2, #54	; 0x36
 8004434:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2206      	movs	r2, #6
 800443c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	224f      	movs	r2, #79	; 0x4f
 8004444:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2249      	movs	r2, #73	; 0x49
 800444c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2269      	movs	r2, #105	; 0x69
 8004454:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	223f      	movs	r2, #63	; 0x3f
 800445c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	221e      	movs	r2, #30
 8004464:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2266      	movs	r2, #102	; 0x66
 800446c:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2266      	movs	r2, #102	; 0x66
 8004474:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	22e6      	movs	r2, #230	; 0xe6
 8004484:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2266      	movs	r2, #102	; 0x66
 800448c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2208      	movs	r2, #8
 8004494:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	221c      	movs	r2, #28
 800449c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2236      	movs	r2, #54	; 0x36
 80044a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2263      	movs	r2, #99	; 0x63
 80044ac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2241      	movs	r2, #65	; 0x41
 80044b4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	; 0x24
 80044d4:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2241      	movs	r2, #65	; 0x41
 80044ec:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2263      	movs	r2, #99	; 0x63
 80044f4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2236      	movs	r2, #54	; 0x36
 80044fc:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	221c      	movs	r2, #28
 8004504:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2208      	movs	r2, #8
 800450c:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2203      	movs	r2, #3
 800451c:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2251      	movs	r2, #81	; 0x51
 8004524:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2259      	movs	r2, #89	; 0x59
 800452c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	220f      	movs	r2, #15
 8004534:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2206      	movs	r2, #6
 800453c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	223e      	movs	r2, #62	; 0x3e
 8004544:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	227f      	movs	r2, #127	; 0x7f
 800454c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2241      	movs	r2, #65	; 0x41
 8004554:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	225d      	movs	r2, #93	; 0x5d
 800455c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	225d      	movs	r2, #93	; 0x5d
 8004564:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	221f      	movs	r2, #31
 800456c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	221e      	movs	r2, #30
 8004574:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	227c      	movs	r2, #124	; 0x7c
 800457c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	227e      	movs	r2, #126	; 0x7e
 8004584:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2213      	movs	r2, #19
 800458c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2213      	movs	r2, #19
 8004594:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	227e      	movs	r2, #126	; 0x7e
 800459c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	227c      	movs	r2, #124	; 0x7c
 80045a4:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2241      	movs	r2, #65	; 0x41
 80045ac:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	227f      	movs	r2, #127	; 0x7f
 80045b4:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	227f      	movs	r2, #127	; 0x7f
 80045bc:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2249      	movs	r2, #73	; 0x49
 80045c4:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2249      	movs	r2, #73	; 0x49
 80045cc:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	227f      	movs	r2, #127	; 0x7f
 80045d4:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2236      	movs	r2, #54	; 0x36
 80045dc:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	221c      	movs	r2, #28
 80045e4:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223e      	movs	r2, #62	; 0x3e
 80045ec:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2263      	movs	r2, #99	; 0x63
 80045f4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2241      	movs	r2, #65	; 0x41
 80045fc:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2241      	movs	r2, #65	; 0x41
 8004604:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2263      	movs	r2, #99	; 0x63
 800460c:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2222      	movs	r2, #34	; 0x22
 8004614:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	227f      	movs	r2, #127	; 0x7f
 8004624:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	227f      	movs	r2, #127	; 0x7f
 800462c:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2241      	movs	r2, #65	; 0x41
 8004634:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2263      	movs	r2, #99	; 0x63
 800463c:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	223e      	movs	r2, #62	; 0x3e
 8004644:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	221c      	movs	r2, #28
 800464c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2241      	movs	r2, #65	; 0x41
 8004654:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	227f      	movs	r2, #127	; 0x7f
 800465c:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	227f      	movs	r2, #127	; 0x7f
 8004664:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2249      	movs	r2, #73	; 0x49
 800466c:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	225d      	movs	r2, #93	; 0x5d
 8004674:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2241      	movs	r2, #65	; 0x41
 800467c:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2263      	movs	r2, #99	; 0x63
 8004684:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2241      	movs	r2, #65	; 0x41
 800468c:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	227f      	movs	r2, #127	; 0x7f
 8004694:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	227f      	movs	r2, #127	; 0x7f
 800469c:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2249      	movs	r2, #73	; 0x49
 80046a4:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	221d      	movs	r2, #29
 80046ac:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	221c      	movs	r2, #28
 80046c4:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	223e      	movs	r2, #62	; 0x3e
 80046cc:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2263      	movs	r2, #99	; 0x63
 80046d4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2241      	movs	r2, #65	; 0x41
 80046dc:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2251      	movs	r2, #81	; 0x51
 80046e4:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2273      	movs	r2, #115	; 0x73
 80046ec:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2272      	movs	r2, #114	; 0x72
 80046f4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	227f      	movs	r2, #127	; 0x7f
 80046fc:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	227f      	movs	r2, #127	; 0x7f
 8004704:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2208      	movs	r2, #8
 800470c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2208      	movs	r2, #8
 8004714:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	227f      	movs	r2, #127	; 0x7f
 800471c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	227f      	movs	r2, #127	; 0x7f
 8004724:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2241      	movs	r2, #65	; 0x41
 800472c:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	227f      	movs	r2, #127	; 0x7f
 8004734:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	227f      	movs	r2, #127	; 0x7f
 800473c:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2241      	movs	r2, #65	; 0x41
 8004744:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2230      	movs	r2, #48	; 0x30
 800474c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2270      	movs	r2, #112	; 0x70
 8004754:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2240      	movs	r2, #64	; 0x40
 800475c:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2241      	movs	r2, #65	; 0x41
 8004764:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	227f      	movs	r2, #127	; 0x7f
 800476c:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223f      	movs	r2, #63	; 0x3f
 8004774:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2241      	movs	r2, #65	; 0x41
 8004784:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	227f      	movs	r2, #127	; 0x7f
 800478c:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	227f      	movs	r2, #127	; 0x7f
 8004794:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2208      	movs	r2, #8
 800479c:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	221c      	movs	r2, #28
 80047a4:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2277      	movs	r2, #119	; 0x77
 80047ac:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2263      	movs	r2, #99	; 0x63
 80047b4:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2241      	movs	r2, #65	; 0x41
 80047bc:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	227f      	movs	r2, #127	; 0x7f
 80047c4:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	227f      	movs	r2, #127	; 0x7f
 80047cc:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2241      	movs	r2, #65	; 0x41
 80047d4:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2260      	movs	r2, #96	; 0x60
 80047e4:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2270      	movs	r2, #112	; 0x70
 80047ec:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	227f      	movs	r2, #127	; 0x7f
 80047f4:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	227f      	movs	r2, #127	; 0x7f
 80047fc:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	220e      	movs	r2, #14
 8004804:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	221c      	movs	r2, #28
 800480c:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	220e      	movs	r2, #14
 8004814:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	227f      	movs	r2, #127	; 0x7f
 800481c:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	227f      	movs	r2, #127	; 0x7f
 8004824:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	227f      	movs	r2, #127	; 0x7f
 800482c:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	227f      	movs	r2, #127	; 0x7f
 8004834:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2206      	movs	r2, #6
 800483c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	220c      	movs	r2, #12
 8004844:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2218      	movs	r2, #24
 800484c:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	227f      	movs	r2, #127	; 0x7f
 8004854:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	227f      	movs	r2, #127	; 0x7f
 800485c:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	221c      	movs	r2, #28
 8004864:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	223e      	movs	r2, #62	; 0x3e
 800486c:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2263      	movs	r2, #99	; 0x63
 8004874:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2241      	movs	r2, #65	; 0x41
 800487c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2263      	movs	r2, #99	; 0x63
 8004884:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	223e      	movs	r2, #62	; 0x3e
 800488c:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	221c      	movs	r2, #28
 8004894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2241      	movs	r2, #65	; 0x41
 800489c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	227f      	movs	r2, #127	; 0x7f
 80048a4:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	227f      	movs	r2, #127	; 0x7f
 80048ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2249      	movs	r2, #73	; 0x49
 80048b4:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2209      	movs	r2, #9
 80048bc:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	220f      	movs	r2, #15
 80048c4:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2206      	movs	r2, #6
 80048cc:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	221e      	movs	r2, #30
 80048d4:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	223f      	movs	r2, #63	; 0x3f
 80048dc:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2221      	movs	r2, #33	; 0x21
 80048e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2271      	movs	r2, #113	; 0x71
 80048ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	227f      	movs	r2, #127	; 0x7f
 80048f4:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	225e      	movs	r2, #94	; 0x5e
 80048fc:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2241      	movs	r2, #65	; 0x41
 8004904:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	227f      	movs	r2, #127	; 0x7f
 800490c:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	227f      	movs	r2, #127	; 0x7f
 8004914:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2209      	movs	r2, #9
 800491c:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2219      	movs	r2, #25
 8004924:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	227f      	movs	r2, #127	; 0x7f
 800492c:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2266      	movs	r2, #102	; 0x66
 8004934:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2226      	movs	r2, #38	; 0x26
 800493c:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	226f      	movs	r2, #111	; 0x6f
 8004944:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	224d      	movs	r2, #77	; 0x4d
 800494c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2259      	movs	r2, #89	; 0x59
 8004954:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2273      	movs	r2, #115	; 0x73
 800495c:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2232      	movs	r2, #50	; 0x32
 8004964:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2203      	movs	r2, #3
 800496c:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2241      	movs	r2, #65	; 0x41
 8004974:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	227f      	movs	r2, #127	; 0x7f
 800497c:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	227f      	movs	r2, #127	; 0x7f
 8004984:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2203      	movs	r2, #3
 8004994:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	227f      	movs	r2, #127	; 0x7f
 800499c:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	227f      	movs	r2, #127	; 0x7f
 80049a4:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2240      	movs	r2, #64	; 0x40
 80049b4:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	227f      	movs	r2, #127	; 0x7f
 80049bc:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	227f      	movs	r2, #127	; 0x7f
 80049c4:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	221f      	movs	r2, #31
 80049cc:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	223f      	movs	r2, #63	; 0x3f
 80049d4:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2260      	movs	r2, #96	; 0x60
 80049dc:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2260      	movs	r2, #96	; 0x60
 80049e4:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	223f      	movs	r2, #63	; 0x3f
 80049ec:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	221f      	movs	r2, #31
 80049f4:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	227f      	movs	r2, #127	; 0x7f
 80049fc:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	227f      	movs	r2, #127	; 0x7f
 8004a04:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2230      	movs	r2, #48	; 0x30
 8004a0c:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2218      	movs	r2, #24
 8004a14:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2230      	movs	r2, #48	; 0x30
 8004a1c:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	227f      	movs	r2, #127	; 0x7f
 8004a2c:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2243      	movs	r2, #67	; 0x43
 8004a34:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2267      	movs	r2, #103	; 0x67
 8004a3c:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	223c      	movs	r2, #60	; 0x3c
 8004a44:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2218      	movs	r2, #24
 8004a4c:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	223c      	movs	r2, #60	; 0x3c
 8004a54:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2267      	movs	r2, #103	; 0x67
 8004a5c:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2243      	movs	r2, #67	; 0x43
 8004a64:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	224f      	movs	r2, #79	; 0x4f
 8004a74:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2278      	movs	r2, #120	; 0x78
 8004a7c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2278      	movs	r2, #120	; 0x78
 8004a84:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	224f      	movs	r2, #79	; 0x4f
 8004a8c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2207      	movs	r2, #7
 8004a94:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2247      	movs	r2, #71	; 0x47
 8004a9c:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2263      	movs	r2, #99	; 0x63
 8004aa4:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2271      	movs	r2, #113	; 0x71
 8004aac:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2259      	movs	r2, #89	; 0x59
 8004ab4:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	224d      	movs	r2, #77	; 0x4d
 8004abc:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2267      	movs	r2, #103	; 0x67
 8004ac4:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2273      	movs	r2, #115	; 0x73
 8004acc:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	227f      	movs	r2, #127	; 0x7f
 8004ad4:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	227f      	movs	r2, #127	; 0x7f
 8004adc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2241      	movs	r2, #65	; 0x41
 8004ae4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2241      	movs	r2, #65	; 0x41
 8004aec:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2203      	movs	r2, #3
 8004afc:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2206      	movs	r2, #6
 8004b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	220c      	movs	r2, #12
 8004b0c:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2218      	movs	r2, #24
 8004b14:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2230      	movs	r2, #48	; 0x30
 8004b1c:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2260      	movs	r2, #96	; 0x60
 8004b24:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2241      	movs	r2, #65	; 0x41
 8004b2c:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2241      	movs	r2, #65	; 0x41
 8004b34:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	227f      	movs	r2, #127	; 0x7f
 8004b3c:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	227f      	movs	r2, #127	; 0x7f
 8004b44:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	220c      	movs	r2, #12
 8004b54:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2206      	movs	r2, #6
 8004b5c:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2203      	movs	r2, #3
 8004b64:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2206      	movs	r2, #6
 8004b6c:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	220c      	movs	r2, #12
 8004b74:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2280      	movs	r2, #128	; 0x80
 8004b8c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2207      	movs	r2, #7
 8004bcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2274      	movs	r2, #116	; 0x74
 8004be4:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2254      	movs	r2, #84	; 0x54
 8004bec:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2254      	movs	r2, #84	; 0x54
 8004bf4:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223c      	movs	r2, #60	; 0x3c
 8004bfc:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2278      	movs	r2, #120	; 0x78
 8004c04:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2240      	movs	r2, #64	; 0x40
 8004c0c:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2241      	movs	r2, #65	; 0x41
 8004c14:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	227f      	movs	r2, #127	; 0x7f
 8004c1c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	223f      	movs	r2, #63	; 0x3f
 8004c24:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2248      	movs	r2, #72	; 0x48
 8004c2c:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2248      	movs	r2, #72	; 0x48
 8004c34:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2278      	movs	r2, #120	; 0x78
 8004c3c:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2230      	movs	r2, #48	; 0x30
 8004c44:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2238      	movs	r2, #56	; 0x38
 8004c4c:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	227c      	movs	r2, #124	; 0x7c
 8004c54:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2244      	movs	r2, #68	; 0x44
 8004c5c:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2244      	movs	r2, #68	; 0x44
 8004c64:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	226c      	movs	r2, #108	; 0x6c
 8004c6c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2228      	movs	r2, #40	; 0x28
 8004c74:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2230      	movs	r2, #48	; 0x30
 8004c7c:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2278      	movs	r2, #120	; 0x78
 8004c84:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2248      	movs	r2, #72	; 0x48
 8004c8c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2249      	movs	r2, #73	; 0x49
 8004c94:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	223f      	movs	r2, #63	; 0x3f
 8004c9c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	227f      	movs	r2, #127	; 0x7f
 8004ca4:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2240      	movs	r2, #64	; 0x40
 8004cac:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2238      	movs	r2, #56	; 0x38
 8004cb4:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	227c      	movs	r2, #124	; 0x7c
 8004cbc:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2254      	movs	r2, #84	; 0x54
 8004cc4:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2254      	movs	r2, #84	; 0x54
 8004ccc:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	225c      	movs	r2, #92	; 0x5c
 8004cd4:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2218      	movs	r2, #24
 8004cdc:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2248      	movs	r2, #72	; 0x48
 8004ce4:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	227e      	movs	r2, #126	; 0x7e
 8004cec:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	227f      	movs	r2, #127	; 0x7f
 8004cf4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2249      	movs	r2, #73	; 0x49
 8004cfc:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2203      	movs	r2, #3
 8004d04:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2298      	movs	r2, #152	; 0x98
 8004d14:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	22bc      	movs	r2, #188	; 0xbc
 8004d1c:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	22a4      	movs	r2, #164	; 0xa4
 8004d24:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	22a4      	movs	r2, #164	; 0xa4
 8004d2c:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	22f8      	movs	r2, #248	; 0xf8
 8004d34:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	227c      	movs	r2, #124	; 0x7c
 8004d3c:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2204      	movs	r2, #4
 8004d44:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2241      	movs	r2, #65	; 0x41
 8004d4c:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	227f      	movs	r2, #127	; 0x7f
 8004d54:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	227f      	movs	r2, #127	; 0x7f
 8004d5c:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2208      	movs	r2, #8
 8004d64:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	227c      	movs	r2, #124	; 0x7c
 8004d74:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2278      	movs	r2, #120	; 0x78
 8004d7c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2244      	movs	r2, #68	; 0x44
 8004d84:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	227d      	movs	r2, #125	; 0x7d
 8004d8c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	227d      	movs	r2, #125	; 0x7d
 8004d94:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2240      	movs	r2, #64	; 0x40
 8004d9c:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2260      	movs	r2, #96	; 0x60
 8004da4:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	22e0      	movs	r2, #224	; 0xe0
 8004dac:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	22fd      	movs	r2, #253	; 0xfd
 8004dc4:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	227d      	movs	r2, #125	; 0x7d
 8004dcc:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2241      	movs	r2, #65	; 0x41
 8004dd4:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	227f      	movs	r2, #127	; 0x7f
 8004ddc:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	227f      	movs	r2, #127	; 0x7f
 8004de4:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2210      	movs	r2, #16
 8004dec:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2238      	movs	r2, #56	; 0x38
 8004df4:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	226c      	movs	r2, #108	; 0x6c
 8004dfc:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2244      	movs	r2, #68	; 0x44
 8004e04:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2241      	movs	r2, #65	; 0x41
 8004e0c:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	227f      	movs	r2, #127	; 0x7f
 8004e14:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	227f      	movs	r2, #127	; 0x7f
 8004e1c:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	227c      	movs	r2, #124	; 0x7c
 8004e2c:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	227c      	movs	r2, #124	; 0x7c
 8004e34:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2218      	movs	r2, #24
 8004e3c:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2238      	movs	r2, #56	; 0x38
 8004e44:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	221c      	movs	r2, #28
 8004e4c:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	227c      	movs	r2, #124	; 0x7c
 8004e54:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2278      	movs	r2, #120	; 0x78
 8004e5c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	227c      	movs	r2, #124	; 0x7c
 8004e64:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	227c      	movs	r2, #124	; 0x7c
 8004e6c:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2204      	movs	r2, #4
 8004e74:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	227c      	movs	r2, #124	; 0x7c
 8004e84:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2278      	movs	r2, #120	; 0x78
 8004e8c:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2238      	movs	r2, #56	; 0x38
 8004e94:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	227c      	movs	r2, #124	; 0x7c
 8004e9c:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2244      	movs	r2, #68	; 0x44
 8004ea4:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2244      	movs	r2, #68	; 0x44
 8004eac:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	227c      	movs	r2, #124	; 0x7c
 8004eb4:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2238      	movs	r2, #56	; 0x38
 8004ebc:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2284      	movs	r2, #132	; 0x84
 8004ec4:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	22fc      	movs	r2, #252	; 0xfc
 8004ecc:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	22f8      	movs	r2, #248	; 0xf8
 8004ed4:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	22a4      	movs	r2, #164	; 0xa4
 8004edc:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	223c      	movs	r2, #60	; 0x3c
 8004eec:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2218      	movs	r2, #24
 8004ef4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2218      	movs	r2, #24
 8004efc:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223c      	movs	r2, #60	; 0x3c
 8004f04:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	; 0x24
 8004f0c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	22a4      	movs	r2, #164	; 0xa4
 8004f14:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	22f8      	movs	r2, #248	; 0xf8
 8004f1c:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	22fc      	movs	r2, #252	; 0xfc
 8004f24:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2284      	movs	r2, #132	; 0x84
 8004f2c:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2244      	movs	r2, #68	; 0x44
 8004f34:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	227c      	movs	r2, #124	; 0x7c
 8004f3c:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2278      	movs	r2, #120	; 0x78
 8004f44:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	224c      	movs	r2, #76	; 0x4c
 8004f4c:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2204      	movs	r2, #4
 8004f54:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	221c      	movs	r2, #28
 8004f5c:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2218      	movs	r2, #24
 8004f64:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2248      	movs	r2, #72	; 0x48
 8004f6c:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	225c      	movs	r2, #92	; 0x5c
 8004f74:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2254      	movs	r2, #84	; 0x54
 8004f7c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2254      	movs	r2, #84	; 0x54
 8004f84:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2274      	movs	r2, #116	; 0x74
 8004f8c:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	223e      	movs	r2, #62	; 0x3e
 8004fa4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	227f      	movs	r2, #127	; 0x7f
 8004fac:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2244      	movs	r2, #68	; 0x44
 8004fb4:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	223c      	movs	r2, #60	; 0x3c
 8004fc4:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	227c      	movs	r2, #124	; 0x7c
 8004fcc:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2240      	movs	r2, #64	; 0x40
 8004fd4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	223c      	movs	r2, #60	; 0x3c
 8004fe4:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	227c      	movs	r2, #124	; 0x7c
 8004fec:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2240      	movs	r2, #64	; 0x40
 8004ff4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	221c      	movs	r2, #28
 8004ffc:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	223c      	movs	r2, #60	; 0x3c
 8005004:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2260      	movs	r2, #96	; 0x60
 800500c:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2260      	movs	r2, #96	; 0x60
 8005014:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	223c      	movs	r2, #60	; 0x3c
 800501c:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	221c      	movs	r2, #28
 8005024:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	223c      	movs	r2, #60	; 0x3c
 800502c:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	227c      	movs	r2, #124	; 0x7c
 8005034:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2270      	movs	r2, #112	; 0x70
 800503c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2238      	movs	r2, #56	; 0x38
 8005044:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2270      	movs	r2, #112	; 0x70
 800504c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	227c      	movs	r2, #124	; 0x7c
 8005054:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	223c      	movs	r2, #60	; 0x3c
 800505c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2244      	movs	r2, #68	; 0x44
 8005064:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	226c      	movs	r2, #108	; 0x6c
 800506c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2238      	movs	r2, #56	; 0x38
 8005074:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2210      	movs	r2, #16
 800507c:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2238      	movs	r2, #56	; 0x38
 8005084:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	226c      	movs	r2, #108	; 0x6c
 800508c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2244      	movs	r2, #68	; 0x44
 8005094:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	229c      	movs	r2, #156	; 0x9c
 800509c:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	22bc      	movs	r2, #188	; 0xbc
 80050a4:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	22a0      	movs	r2, #160	; 0xa0
 80050ac:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	22a0      	movs	r2, #160	; 0xa0
 80050b4:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	22fc      	movs	r2, #252	; 0xfc
 80050bc:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	227c      	movs	r2, #124	; 0x7c
 80050c4:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	224c      	movs	r2, #76	; 0x4c
 80050cc:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2264      	movs	r2, #100	; 0x64
 80050d4:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2274      	movs	r2, #116	; 0x74
 80050dc:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	225c      	movs	r2, #92	; 0x5c
 80050e4:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	224c      	movs	r2, #76	; 0x4c
 80050ec:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2264      	movs	r2, #100	; 0x64
 80050f4:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2208      	movs	r2, #8
 80050fc:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2208      	movs	r2, #8
 8005104:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	223e      	movs	r2, #62	; 0x3e
 800510c:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2277      	movs	r2, #119	; 0x77
 8005114:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2241      	movs	r2, #65	; 0x41
 800511c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2241      	movs	r2, #65	; 0x41
 8005124:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2277      	movs	r2, #119	; 0x77
 800512c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2277      	movs	r2, #119	; 0x77
 8005134:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2241      	movs	r2, #65	; 0x41
 800513c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2241      	movs	r2, #65	; 0x41
 8005144:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2277      	movs	r2, #119	; 0x77
 800514c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	223e      	movs	r2, #62	; 0x3e
 8005154:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2208      	movs	r2, #8
 800515c:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2208      	movs	r2, #8
 8005164:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2203      	movs	r2, #3
 8005174:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2270      	movs	r2, #112	; 0x70
 80051a4:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2278      	movs	r2, #120	; 0x78
 80051ac:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	224c      	movs	r2, #76	; 0x4c
 80051b4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2246      	movs	r2, #70	; 0x46
 80051bc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	224c      	movs	r2, #76	; 0x4c
 80051c4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2278      	movs	r2, #120	; 0x78
 80051cc:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2270      	movs	r2, #112	; 0x70
 80051d4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	220e      	movs	r2, #14
 80051dc:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	229f      	movs	r2, #159	; 0x9f
 80051e4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2291      	movs	r2, #145	; 0x91
 80051ec:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	22b1      	movs	r2, #177	; 0xb1
 80051f4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	22fb      	movs	r2, #251	; 0xfb
 80051fc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	224a      	movs	r2, #74	; 0x4a
 8005204:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	223a      	movs	r2, #58	; 0x3a
 800520c:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	227a      	movs	r2, #122	; 0x7a
 8005214:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2240      	movs	r2, #64	; 0x40
 800521c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	227a      	movs	r2, #122	; 0x7a
 800522c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	227a      	movs	r2, #122	; 0x7a
 8005234:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2238      	movs	r2, #56	; 0x38
 8005244:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	227c      	movs	r2, #124	; 0x7c
 800524c:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2254      	movs	r2, #84	; 0x54
 8005254:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2255      	movs	r2, #85	; 0x55
 800525c:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	225d      	movs	r2, #93	; 0x5d
 8005264:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2219      	movs	r2, #25
 800526c:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2223      	movs	r2, #35	; 0x23
 800527c:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2275      	movs	r2, #117	; 0x75
 8005284:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2255      	movs	r2, #85	; 0x55
 800528c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2255      	movs	r2, #85	; 0x55
 8005294:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	227d      	movs	r2, #125	; 0x7d
 800529c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	227b      	movs	r2, #123	; 0x7b
 80052a4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2242      	movs	r2, #66	; 0x42
 80052ac:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2221      	movs	r2, #33	; 0x21
 80052b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2275      	movs	r2, #117	; 0x75
 80052bc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2254      	movs	r2, #84	; 0x54
 80052c4:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2254      	movs	r2, #84	; 0x54
 80052cc:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	227d      	movs	r2, #125	; 0x7d
 80052d4:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2279      	movs	r2, #121	; 0x79
 80052dc:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2221      	movs	r2, #33	; 0x21
 80052ec:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2275      	movs	r2, #117	; 0x75
 80052f4:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2255      	movs	r2, #85	; 0x55
 80052fc:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2254      	movs	r2, #84	; 0x54
 8005304:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	227c      	movs	r2, #124	; 0x7c
 800530c:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2278      	movs	r2, #120	; 0x78
 8005314:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2240      	movs	r2, #64	; 0x40
 800531c:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2274      	movs	r2, #116	; 0x74
 800532c:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2257      	movs	r2, #87	; 0x57
 8005334:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2257      	movs	r2, #87	; 0x57
 800533c:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	227c      	movs	r2, #124	; 0x7c
 8005344:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2278      	movs	r2, #120	; 0x78
 800534c:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2240      	movs	r2, #64	; 0x40
 8005354:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2218      	movs	r2, #24
 800535c:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	223c      	movs	r2, #60	; 0x3c
 8005364:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	22a4      	movs	r2, #164	; 0xa4
 800536c:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	22a4      	movs	r2, #164	; 0xa4
 8005374:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	22e4      	movs	r2, #228	; 0xe4
 800537c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2240      	movs	r2, #64	; 0x40
 8005384:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	223b      	movs	r2, #59	; 0x3b
 8005394:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	227d      	movs	r2, #125	; 0x7d
 800539c:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2255      	movs	r2, #85	; 0x55
 80053a4:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2255      	movs	r2, #85	; 0x55
 80053ac:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	225d      	movs	r2, #93	; 0x5d
 80053b4:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	221b      	movs	r2, #27
 80053bc:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2239      	movs	r2, #57	; 0x39
 80053cc:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	227d      	movs	r2, #125	; 0x7d
 80053d4:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2254      	movs	r2, #84	; 0x54
 80053dc:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2254      	movs	r2, #84	; 0x54
 80053e4:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	225d      	movs	r2, #93	; 0x5d
 80053ec:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2219      	movs	r2, #25
 80053f4:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2239      	movs	r2, #57	; 0x39
 80053fc:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	227d      	movs	r2, #125	; 0x7d
 8005404:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2255      	movs	r2, #85	; 0x55
 800540c:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2254      	movs	r2, #84	; 0x54
 8005414:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	225c      	movs	r2, #92	; 0x5c
 800541c:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2218      	movs	r2, #24
 8005424:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2245      	movs	r2, #69	; 0x45
 8005434:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	227c      	movs	r2, #124	; 0x7c
 800543c:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	227c      	movs	r2, #124	; 0x7c
 8005444:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2241      	movs	r2, #65	; 0x41
 800544c:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2245      	movs	r2, #69	; 0x45
 800546c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	227d      	movs	r2, #125	; 0x7d
 8005474:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	227d      	movs	r2, #125	; 0x7d
 800547c:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2243      	movs	r2, #67	; 0x43
 8005484:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2245      	movs	r2, #69	; 0x45
 800549c:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	227d      	movs	r2, #125	; 0x7d
 80054a4:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	227c      	movs	r2, #124	; 0x7c
 80054ac:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2240      	movs	r2, #64	; 0x40
 80054b4:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2279      	movs	r2, #121	; 0x79
 80054bc:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	227d      	movs	r2, #125	; 0x7d
 80054c4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2216      	movs	r2, #22
 80054cc:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2212      	movs	r2, #18
 80054d4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2216      	movs	r2, #22
 80054dc:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	227d      	movs	r2, #125	; 0x7d
 80054e4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2279      	movs	r2, #121	; 0x79
 80054ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2270      	movs	r2, #112	; 0x70
 80054f4:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2278      	movs	r2, #120	; 0x78
 80054fc:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	222b      	movs	r2, #43	; 0x2b
 8005504:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	222b      	movs	r2, #43	; 0x2b
 800550c:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2278      	movs	r2, #120	; 0x78
 8005514:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2270      	movs	r2, #112	; 0x70
 800551c:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2244      	movs	r2, #68	; 0x44
 8005524:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	227c      	movs	r2, #124	; 0x7c
 800552c:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	227c      	movs	r2, #124	; 0x7c
 8005534:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2255      	movs	r2, #85	; 0x55
 800553c:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2255      	movs	r2, #85	; 0x55
 8005544:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2245      	movs	r2, #69	; 0x45
 800554c:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2274      	movs	r2, #116	; 0x74
 800555c:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2254      	movs	r2, #84	; 0x54
 8005564:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2254      	movs	r2, #84	; 0x54
 800556c:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	227c      	movs	r2, #124	; 0x7c
 8005574:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	227c      	movs	r2, #124	; 0x7c
 800557c:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2254      	movs	r2, #84	; 0x54
 8005584:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2254      	movs	r2, #84	; 0x54
 800558c:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	227c      	movs	r2, #124	; 0x7c
 8005594:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	227e      	movs	r2, #126	; 0x7e
 800559c:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	220b      	movs	r2, #11
 80055a4:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2209      	movs	r2, #9
 80055ac:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	227f      	movs	r2, #127	; 0x7f
 80055b4:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	227f      	movs	r2, #127	; 0x7f
 80055bc:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2249      	movs	r2, #73	; 0x49
 80055c4:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2232      	movs	r2, #50	; 0x32
 80055cc:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	227b      	movs	r2, #123	; 0x7b
 80055d4:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2249      	movs	r2, #73	; 0x49
 80055dc:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2249      	movs	r2, #73	; 0x49
 80055e4:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	227b      	movs	r2, #123	; 0x7b
 80055ec:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2232      	movs	r2, #50	; 0x32
 80055f4:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2232      	movs	r2, #50	; 0x32
 80055fc:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	227a      	movs	r2, #122	; 0x7a
 8005604:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2248      	movs	r2, #72	; 0x48
 800560c:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2248      	movs	r2, #72	; 0x48
 8005614:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	227a      	movs	r2, #122	; 0x7a
 800561c:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2232      	movs	r2, #50	; 0x32
 8005624:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2232      	movs	r2, #50	; 0x32
 800562c:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	227a      	movs	r2, #122	; 0x7a
 8005634:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	224a      	movs	r2, #74	; 0x4a
 800563c:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2248      	movs	r2, #72	; 0x48
 8005644:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2278      	movs	r2, #120	; 0x78
 800564c:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2230      	movs	r2, #48	; 0x30
 8005654:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	223a      	movs	r2, #58	; 0x3a
 800565c:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	227b      	movs	r2, #123	; 0x7b
 8005664:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2241      	movs	r2, #65	; 0x41
 800566c:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2241      	movs	r2, #65	; 0x41
 8005674:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	227b      	movs	r2, #123	; 0x7b
 800567c:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	227a      	movs	r2, #122	; 0x7a
 8005684:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	223a      	movs	r2, #58	; 0x3a
 8005694:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	227a      	movs	r2, #122	; 0x7a
 800569c:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2242      	movs	r2, #66	; 0x42
 80056a4:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2278      	movs	r2, #120	; 0x78
 80056b4:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2278      	movs	r2, #120	; 0x78
 80056bc:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	229a      	movs	r2, #154	; 0x9a
 80056cc:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	22ba      	movs	r2, #186	; 0xba
 80056d4:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	22a0      	movs	r2, #160	; 0xa0
 80056dc:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	22a0      	movs	r2, #160	; 0xa0
 80056e4:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	22fa      	movs	r2, #250	; 0xfa
 80056ec:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	227a      	movs	r2, #122	; 0x7a
 80056f4:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2219      	movs	r2, #25
 8005704:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	223c      	movs	r2, #60	; 0x3c
 800570c:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2266      	movs	r2, #102	; 0x66
 8005714:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2266      	movs	r2, #102	; 0x66
 800571c:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	223c      	movs	r2, #60	; 0x3c
 8005724:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2219      	movs	r2, #25
 800572c:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	223d      	movs	r2, #61	; 0x3d
 800573c:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	227d      	movs	r2, #125	; 0x7d
 8005744:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	227d      	movs	r2, #125	; 0x7d
 800575c:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	223d      	movs	r2, #61	; 0x3d
 8005764:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2218      	movs	r2, #24
 800576c:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	223c      	movs	r2, #60	; 0x3c
 8005774:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	; 0x24
 800577c:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	22e7      	movs	r2, #231	; 0xe7
 8005784:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	22e7      	movs	r2, #231	; 0xe7
 800578c:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2224      	movs	r2, #36	; 0x24
 8005794:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	; 0x24
 800579c:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2268      	movs	r2, #104	; 0x68
 80057a4:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	227e      	movs	r2, #126	; 0x7e
 80057ac:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	227f      	movs	r2, #127	; 0x7f
 80057b4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2249      	movs	r2, #73	; 0x49
 80057bc:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2243      	movs	r2, #67	; 0x43
 80057c4:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2266      	movs	r2, #102	; 0x66
 80057cc:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	222b      	movs	r2, #43	; 0x2b
 80057dc:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	222f      	movs	r2, #47	; 0x2f
 80057e4:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	22fc      	movs	r2, #252	; 0xfc
 80057ec:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	22fc      	movs	r2, #252	; 0xfc
 80057f4:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	222f      	movs	r2, #47	; 0x2f
 80057fc:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	222b      	movs	r2, #43	; 0x2b
 8005804:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	22ff      	movs	r2, #255	; 0xff
 800580c:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	22ff      	movs	r2, #255	; 0xff
 8005814:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2209      	movs	r2, #9
 800581c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2209      	movs	r2, #9
 8005824:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	222f      	movs	r2, #47	; 0x2f
 800582c:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	22f6      	movs	r2, #246	; 0xf6
 8005834:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	22f8      	movs	r2, #248	; 0xf8
 800583c:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	22a0      	movs	r2, #160	; 0xa0
 8005844:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2240      	movs	r2, #64	; 0x40
 800584c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	22c0      	movs	r2, #192	; 0xc0
 8005854:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2288      	movs	r2, #136	; 0x88
 800585c:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	22fe      	movs	r2, #254	; 0xfe
 8005864:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	227f      	movs	r2, #127	; 0x7f
 800586c:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2209      	movs	r2, #9
 8005874:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2274      	movs	r2, #116	; 0x74
 8005894:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2254      	movs	r2, #84	; 0x54
 800589c:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2255      	movs	r2, #85	; 0x55
 80058a4:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	227d      	movs	r2, #125	; 0x7d
 80058ac:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2279      	movs	r2, #121	; 0x79
 80058b4:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2244      	movs	r2, #68	; 0x44
 80058c4:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	227d      	movs	r2, #125	; 0x7d
 80058cc:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	227d      	movs	r2, #125	; 0x7d
 80058d4:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2241      	movs	r2, #65	; 0x41
 80058dc:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2230      	movs	r2, #48	; 0x30
 80058e4:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2278      	movs	r2, #120	; 0x78
 80058ec:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2248      	movs	r2, #72	; 0x48
 80058f4:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	224a      	movs	r2, #74	; 0x4a
 80058fc:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	227a      	movs	r2, #122	; 0x7a
 8005904:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2232      	movs	r2, #50	; 0x32
 800590c:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2238      	movs	r2, #56	; 0x38
 8005914:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2278      	movs	r2, #120	; 0x78
 800591c:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2242      	movs	r2, #66	; 0x42
 800592c:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	227a      	movs	r2, #122	; 0x7a
 8005934:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	227a      	movs	r2, #122	; 0x7a
 800593c:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	227a      	movs	r2, #122	; 0x7a
 800594c:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	227a      	movs	r2, #122	; 0x7a
 8005954:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	220a      	movs	r2, #10
 800595c:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	220a      	movs	r2, #10
 8005964:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	227a      	movs	r2, #122	; 0x7a
 800596c:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2270      	movs	r2, #112	; 0x70
 8005974:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	227d      	movs	r2, #125	; 0x7d
 800597c:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	227d      	movs	r2, #125	; 0x7d
 8005984:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2219      	movs	r2, #25
 800598c:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2231      	movs	r2, #49	; 0x31
 8005994:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	227d      	movs	r2, #125	; 0x7d
 800599c:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	227d      	movs	r2, #125	; 0x7d
 80059a4:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2226      	movs	r2, #38	; 0x26
 80059ac:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	222f      	movs	r2, #47	; 0x2f
 80059b4:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2229      	movs	r2, #41	; 0x29
 80059bc:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	222f      	movs	r2, #47	; 0x2f
 80059c4:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	222f      	movs	r2, #47	; 0x2f
 80059cc:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2228      	movs	r2, #40	; 0x28
 80059d4:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2226      	movs	r2, #38	; 0x26
 80059dc:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	222f      	movs	r2, #47	; 0x2f
 80059e4:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2229      	movs	r2, #41	; 0x29
 80059ec:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	222f      	movs	r2, #47	; 0x2f
 80059f4:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2226      	movs	r2, #38	; 0x26
 80059fc:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2230      	movs	r2, #48	; 0x30
 8005a04:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2278      	movs	r2, #120	; 0x78
 8005a0c:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	224d      	movs	r2, #77	; 0x4d
 8005a14:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2245      	movs	r2, #69	; 0x45
 8005a1c:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2260      	movs	r2, #96	; 0x60
 8005a24:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2238      	movs	r2, #56	; 0x38
 8005a34:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2238      	movs	r2, #56	; 0x38
 8005a3c:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2208      	movs	r2, #8
 8005a44:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2208      	movs	r2, #8
 8005a54:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2208      	movs	r2, #8
 8005a64:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2208      	movs	r2, #8
 8005a74:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2238      	movs	r2, #56	; 0x38
 8005a84:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2238      	movs	r2, #56	; 0x38
 8005a8c:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	224f      	movs	r2, #79	; 0x4f
 8005a94:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	226f      	movs	r2, #111	; 0x6f
 8005a9c:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2230      	movs	r2, #48	; 0x30
 8005aa4:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2218      	movs	r2, #24
 8005aac:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	22cc      	movs	r2, #204	; 0xcc
 8005ab4:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	22ee      	movs	r2, #238	; 0xee
 8005abc:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	22bb      	movs	r2, #187	; 0xbb
 8005ac4:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2291      	movs	r2, #145	; 0x91
 8005acc:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	224f      	movs	r2, #79	; 0x4f
 8005ad4:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	226f      	movs	r2, #111	; 0x6f
 8005adc:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2230      	movs	r2, #48	; 0x30
 8005ae4:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2218      	movs	r2, #24
 8005aec:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	226c      	movs	r2, #108	; 0x6c
 8005af4:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2276      	movs	r2, #118	; 0x76
 8005afc:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	22fb      	movs	r2, #251	; 0xfb
 8005b04:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	22f9      	movs	r2, #249	; 0xf9
 8005b0c:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	227b      	movs	r2, #123	; 0x7b
 8005b14:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	227b      	movs	r2, #123	; 0x7b
 8005b1c:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2208      	movs	r2, #8
 8005b24:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	221c      	movs	r2, #28
 8005b2c:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2236      	movs	r2, #54	; 0x36
 8005b34:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2222      	movs	r2, #34	; 0x22
 8005b3c:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2208      	movs	r2, #8
 8005b44:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	221c      	movs	r2, #28
 8005b4c:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2236      	movs	r2, #54	; 0x36
 8005b54:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2222      	movs	r2, #34	; 0x22
 8005b5c:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2222      	movs	r2, #34	; 0x22
 8005b64:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2236      	movs	r2, #54	; 0x36
 8005b6c:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	221c      	movs	r2, #28
 8005b74:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2222      	movs	r2, #34	; 0x22
 8005b84:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2236      	movs	r2, #54	; 0x36
 8005b8c:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	221c      	movs	r2, #28
 8005b94:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	22aa      	movs	r2, #170	; 0xaa
 8005ba4:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2255      	movs	r2, #85	; 0x55
 8005bac:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	22aa      	movs	r2, #170	; 0xaa
 8005bb4:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2255      	movs	r2, #85	; 0x55
 8005bbc:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	22aa      	movs	r2, #170	; 0xaa
 8005bc4:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2255      	movs	r2, #85	; 0x55
 8005bcc:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	22aa      	movs	r2, #170	; 0xaa
 8005bd4:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2255      	movs	r2, #85	; 0x55
 8005bdc:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	22aa      	movs	r2, #170	; 0xaa
 8005be4:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2255      	movs	r2, #85	; 0x55
 8005bec:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	22aa      	movs	r2, #170	; 0xaa
 8005bf4:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2255      	movs	r2, #85	; 0x55
 8005bfc:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	22dd      	movs	r2, #221	; 0xdd
 8005c04:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	22ff      	movs	r2, #255	; 0xff
 8005c0c:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	22aa      	movs	r2, #170	; 0xaa
 8005c14:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2277      	movs	r2, #119	; 0x77
 8005c1c:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	22dd      	movs	r2, #221	; 0xdd
 8005c24:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	22aa      	movs	r2, #170	; 0xaa
 8005c2c:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	22ff      	movs	r2, #255	; 0xff
 8005c34:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2277      	movs	r2, #119	; 0x77
 8005c3c:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	22ff      	movs	r2, #255	; 0xff
 8005c44:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2210      	movs	r2, #16
 8005c54:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2210      	movs	r2, #16
 8005c5c:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2210      	movs	r2, #16
 8005c64:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	22ff      	movs	r2, #255	; 0xff
 8005c6c:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	22ff      	movs	r2, #255	; 0xff
 8005c74:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2214      	movs	r2, #20
 8005c7c:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2214      	movs	r2, #20
 8005c84:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2214      	movs	r2, #20
 8005c8c:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	22ff      	movs	r2, #255	; 0xff
 8005c9c:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2210      	movs	r2, #16
 8005cac:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	22ff      	movs	r2, #255	; 0xff
 8005cb4:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	22ff      	movs	r2, #255	; 0xff
 8005cbc:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	22ff      	movs	r2, #255	; 0xff
 8005cc4:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	22ff      	movs	r2, #255	; 0xff
 8005ccc:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2210      	movs	r2, #16
 8005cdc:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	22f0      	movs	r2, #240	; 0xf0
 8005ce4:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	22f0      	movs	r2, #240	; 0xf0
 8005cec:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	22f0      	movs	r2, #240	; 0xf0
 8005cfc:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	22f0      	movs	r2, #240	; 0xf0
 8005d04:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2214      	movs	r2, #20
 8005d0c:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2214      	movs	r2, #20
 8005d14:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2214      	movs	r2, #20
 8005d1c:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	22fc      	movs	r2, #252	; 0xfc
 8005d24:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	22fc      	movs	r2, #252	; 0xfc
 8005d2c:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2214      	movs	r2, #20
 8005d34:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2214      	movs	r2, #20
 8005d3c:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	22f7      	movs	r2, #247	; 0xf7
 8005d44:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	22f7      	movs	r2, #247	; 0xf7
 8005d4c:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	22ff      	movs	r2, #255	; 0xff
 8005d5c:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	22ff      	movs	r2, #255	; 0xff
 8005d74:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2214      	movs	r2, #20
 8005d84:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2214      	movs	r2, #20
 8005d8c:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	22f4      	movs	r2, #244	; 0xf4
 8005d94:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	22f4      	movs	r2, #244	; 0xf4
 8005d9c:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	22fc      	movs	r2, #252	; 0xfc
 8005dac:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	22fc      	movs	r2, #252	; 0xfc
 8005db4:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2214      	movs	r2, #20
 8005dbc:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2214      	movs	r2, #20
 8005dc4:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2217      	movs	r2, #23
 8005dcc:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2217      	movs	r2, #23
 8005dd4:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2210      	movs	r2, #16
 8005ddc:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	221f      	movs	r2, #31
 8005de4:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	221f      	movs	r2, #31
 8005dec:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2210      	movs	r2, #16
 8005df4:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2210      	movs	r2, #16
 8005dfc:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	221f      	movs	r2, #31
 8005e04:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	221f      	movs	r2, #31
 8005e0c:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2210      	movs	r2, #16
 8005e14:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	221f      	movs	r2, #31
 8005e1c:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	221f      	movs	r2, #31
 8005e24:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2214      	movs	r2, #20
 8005e2c:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2214      	movs	r2, #20
 8005e34:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2214      	movs	r2, #20
 8005e3c:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	221f      	movs	r2, #31
 8005e44:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	221f      	movs	r2, #31
 8005e4c:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2210      	movs	r2, #16
 8005e54:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2210      	movs	r2, #16
 8005e64:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	22f0      	movs	r2, #240	; 0xf0
 8005e6c:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	22f0      	movs	r2, #240	; 0xf0
 8005e74:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	221f      	movs	r2, #31
 8005e7c:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	221f      	movs	r2, #31
 8005e84:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2210      	movs	r2, #16
 8005e94:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2210      	movs	r2, #16
 8005eac:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	221f      	movs	r2, #31
 8005ebc:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	221f      	movs	r2, #31
 8005ec4:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2210      	movs	r2, #16
 8005ecc:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2210      	movs	r2, #16
 8005edc:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2210      	movs	r2, #16
 8005eec:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	22f0      	movs	r2, #240	; 0xf0
 8005efc:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	22f0      	movs	r2, #240	; 0xf0
 8005f04:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2210      	movs	r2, #16
 8005f0c:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2210      	movs	r2, #16
 8005f14:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	22ff      	movs	r2, #255	; 0xff
 8005f24:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	22ff      	movs	r2, #255	; 0xff
 8005f2c:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2210      	movs	r2, #16
 8005f34:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2210      	movs	r2, #16
 8005f44:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2210      	movs	r2, #16
 8005f54:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2210      	movs	r2, #16
 8005f64:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2210      	movs	r2, #16
 8005f74:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2210      	movs	r2, #16
 8005f84:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2210      	movs	r2, #16
 8005f94:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	22ff      	movs	r2, #255	; 0xff
 8005fa4:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	22ff      	movs	r2, #255	; 0xff
 8005fac:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	22ff      	movs	r2, #255	; 0xff
 8005fcc:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	22ff      	movs	r2, #255	; 0xff
 8005fd4:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2214      	movs	r2, #20
 8005fdc:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2214      	movs	r2, #20
 8005fe4:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2214      	movs	r2, #20
 8005fec:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	22ff      	movs	r2, #255	; 0xff
 8005ff4:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	22ff      	movs	r2, #255	; 0xff
 8005ffc:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2210      	movs	r2, #16
 8006014:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	221f      	movs	r2, #31
 800601c:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	221f      	movs	r2, #31
 8006024:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2210      	movs	r2, #16
 800602c:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2217      	movs	r2, #23
 8006034:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2217      	movs	r2, #23
 800603c:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2214      	movs	r2, #20
 8006044:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	22fc      	movs	r2, #252	; 0xfc
 800604c:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	22fc      	movs	r2, #252	; 0xfc
 8006054:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2204      	movs	r2, #4
 800605c:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	22f4      	movs	r2, #244	; 0xf4
 8006064:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	22f4      	movs	r2, #244	; 0xf4
 800606c:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2214      	movs	r2, #20
 8006074:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2214      	movs	r2, #20
 800607c:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2214      	movs	r2, #20
 8006084:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2217      	movs	r2, #23
 800608c:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2217      	movs	r2, #23
 8006094:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2210      	movs	r2, #16
 800609c:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2217      	movs	r2, #23
 80060a4:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2217      	movs	r2, #23
 80060ac:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2214      	movs	r2, #20
 80060b4:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2214      	movs	r2, #20
 80060bc:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2214      	movs	r2, #20
 80060c4:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	22f4      	movs	r2, #244	; 0xf4
 80060cc:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	22f4      	movs	r2, #244	; 0xf4
 80060d4:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2204      	movs	r2, #4
 80060dc:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	22f4      	movs	r2, #244	; 0xf4
 80060e4:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	22f4      	movs	r2, #244	; 0xf4
 80060ec:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2214      	movs	r2, #20
 80060f4:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	22ff      	movs	r2, #255	; 0xff
 80060fc:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	22ff      	movs	r2, #255	; 0xff
 8006104:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	22f7      	movs	r2, #247	; 0xf7
 800610c:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	22f7      	movs	r2, #247	; 0xf7
 8006114:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2214      	movs	r2, #20
 800611c:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2214      	movs	r2, #20
 8006124:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2214      	movs	r2, #20
 800612c:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2214      	movs	r2, #20
 8006134:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2214      	movs	r2, #20
 800613c:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2214      	movs	r2, #20
 8006144:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2214      	movs	r2, #20
 800614c:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2214      	movs	r2, #20
 8006154:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2214      	movs	r2, #20
 800615c:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2214      	movs	r2, #20
 8006164:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2214      	movs	r2, #20
 800616c:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	22f7      	movs	r2, #247	; 0xf7
 8006174:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	22f7      	movs	r2, #247	; 0xf7
 800617c:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	22f7      	movs	r2, #247	; 0xf7
 8006184:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	22f7      	movs	r2, #247	; 0xf7
 800618c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2214      	movs	r2, #20
 8006194:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2214      	movs	r2, #20
 800619c:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2214      	movs	r2, #20
 80061a4:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2214      	movs	r2, #20
 80061ac:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2217      	movs	r2, #23
 80061b4:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2217      	movs	r2, #23
 80061bc:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2214      	movs	r2, #20
 80061c4:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2214      	movs	r2, #20
 80061cc:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2214      	movs	r2, #20
 80061d4:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2210      	movs	r2, #16
 80061dc:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2210      	movs	r2, #16
 80061e4:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	221f      	movs	r2, #31
 80061ec:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	221f      	movs	r2, #31
 80061f4:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2210      	movs	r2, #16
 80061fc:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	221f      	movs	r2, #31
 8006204:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	221f      	movs	r2, #31
 800620c:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2210      	movs	r2, #16
 8006214:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2214      	movs	r2, #20
 800621c:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2214      	movs	r2, #20
 8006224:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2214      	movs	r2, #20
 800622c:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	22f4      	movs	r2, #244	; 0xf4
 8006234:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	22f4      	movs	r2, #244	; 0xf4
 800623c:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2214      	movs	r2, #20
 8006244:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2214      	movs	r2, #20
 800624c:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2214      	movs	r2, #20
 8006254:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2210      	movs	r2, #16
 800625c:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2210      	movs	r2, #16
 8006264:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	22f0      	movs	r2, #240	; 0xf0
 800626c:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	22f0      	movs	r2, #240	; 0xf0
 8006274:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2210      	movs	r2, #16
 800627c:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	22f0      	movs	r2, #240	; 0xf0
 8006284:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	22f0      	movs	r2, #240	; 0xf0
 800628c:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2210      	movs	r2, #16
 8006294:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	221f      	movs	r2, #31
 800629c:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	221f      	movs	r2, #31
 80062a4:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2210      	movs	r2, #16
 80062ac:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	221f      	movs	r2, #31
 80062b4:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	221f      	movs	r2, #31
 80062bc:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2210      	movs	r2, #16
 80062c4:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	221f      	movs	r2, #31
 80062cc:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	221f      	movs	r2, #31
 80062d4:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2214      	movs	r2, #20
 80062dc:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2214      	movs	r2, #20
 80062e4:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2214      	movs	r2, #20
 80062ec:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	22fc      	movs	r2, #252	; 0xfc
 80062f4:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	22fc      	movs	r2, #252	; 0xfc
 80062fc:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2214      	movs	r2, #20
 8006304:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2214      	movs	r2, #20
 800630c:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2214      	movs	r2, #20
 8006314:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	22f0      	movs	r2, #240	; 0xf0
 800631c:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	22f0      	movs	r2, #240	; 0xf0
 8006324:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2210      	movs	r2, #16
 800632c:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	22f0      	movs	r2, #240	; 0xf0
 8006334:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	22f0      	movs	r2, #240	; 0xf0
 800633c:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2210      	movs	r2, #16
 8006344:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2210      	movs	r2, #16
 800634c:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2210      	movs	r2, #16
 8006354:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	22ff      	movs	r2, #255	; 0xff
 8006364:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2210      	movs	r2, #16
 800636c:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	22ff      	movs	r2, #255	; 0xff
 8006374:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	22ff      	movs	r2, #255	; 0xff
 800637c:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2210      	movs	r2, #16
 8006384:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2214      	movs	r2, #20
 800638c:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2214      	movs	r2, #20
 8006394:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2214      	movs	r2, #20
 800639c:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	22ff      	movs	r2, #255	; 0xff
 80063a4:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	22ff      	movs	r2, #255	; 0xff
 80063ac:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2214      	movs	r2, #20
 80063b4:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2214      	movs	r2, #20
 80063bc:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2214      	movs	r2, #20
 80063c4:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2210      	movs	r2, #16
 80063cc:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2210      	movs	r2, #16
 80063d4:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2210      	movs	r2, #16
 80063dc:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	221f      	movs	r2, #31
 80063e4:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	221f      	movs	r2, #31
 80063ec:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	22f0      	movs	r2, #240	; 0xf0
 80063f4:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	22f0      	movs	r2, #240	; 0xf0
 80063fc:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2210      	movs	r2, #16
 8006404:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2210      	movs	r2, #16
 800640c:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2210      	movs	r2, #16
 8006414:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	22ff      	movs	r2, #255	; 0xff
 800642c:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	22ff      	movs	r2, #255	; 0xff
 8006434:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	22ff      	movs	r2, #255	; 0xff
 800643c:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	22ff      	movs	r2, #255	; 0xff
 800644c:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	22ff      	movs	r2, #255	; 0xff
 8006454:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	22f0      	movs	r2, #240	; 0xf0
 800645c:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	22f0      	movs	r2, #240	; 0xf0
 8006464:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	22f0      	movs	r2, #240	; 0xf0
 800646c:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	22f0      	movs	r2, #240	; 0xf0
 8006474:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	22f0      	movs	r2, #240	; 0xf0
 800647c:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	22f0      	movs	r2, #240	; 0xf0
 8006484:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	22f0      	movs	r2, #240	; 0xf0
 800648c:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	22f0      	movs	r2, #240	; 0xf0
 8006494:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	22ff      	movs	r2, #255	; 0xff
 800649c:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	22ff      	movs	r2, #255	; 0xff
 80064a4:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	22ff      	movs	r2, #255	; 0xff
 80064ac:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	22ff      	movs	r2, #255	; 0xff
 80064c4:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	22ff      	movs	r2, #255	; 0xff
 80064cc:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	22ff      	movs	r2, #255	; 0xff
 80064d4:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	220f      	movs	r2, #15
 80064dc:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	220f      	movs	r2, #15
 80064e4:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	220f      	movs	r2, #15
 80064ec:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	220f      	movs	r2, #15
 80064f4:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	220f      	movs	r2, #15
 80064fc:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	220f      	movs	r2, #15
 8006504:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	220f      	movs	r2, #15
 800650c:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	220f      	movs	r2, #15
 8006514:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2238      	movs	r2, #56	; 0x38
 800651c:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	227c      	movs	r2, #124	; 0x7c
 8006524:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2244      	movs	r2, #68	; 0x44
 800652c:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	226c      	movs	r2, #108	; 0x6c
 8006534:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2238      	movs	r2, #56	; 0x38
 800653c:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	226c      	movs	r2, #108	; 0x6c
 8006544:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2244      	movs	r2, #68	; 0x44
 800654c:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	22fc      	movs	r2, #252	; 0xfc
 8006554:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	22fe      	movs	r2, #254	; 0xfe
 800655c:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	222a      	movs	r2, #42	; 0x2a
 8006564:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	222a      	movs	r2, #42	; 0x2a
 800656c:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	223e      	movs	r2, #62	; 0x3e
 8006574:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2214      	movs	r2, #20
 800657c:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	227e      	movs	r2, #126	; 0x7e
 8006584:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	227e      	movs	r2, #126	; 0x7e
 800658c:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2206      	movs	r2, #6
 80065a4:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2206      	movs	r2, #6
 80065ac:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	227e      	movs	r2, #126	; 0x7e
 80065bc:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	227e      	movs	r2, #126	; 0x7e
 80065c4:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	227e      	movs	r2, #126	; 0x7e
 80065d4:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	227e      	movs	r2, #126	; 0x7e
 80065dc:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2263      	movs	r2, #99	; 0x63
 80065ec:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2277      	movs	r2, #119	; 0x77
 80065f4:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	225d      	movs	r2, #93	; 0x5d
 80065fc:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2249      	movs	r2, #73	; 0x49
 8006604:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2263      	movs	r2, #99	; 0x63
 800660c:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2263      	movs	r2, #99	; 0x63
 8006614:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2238      	movs	r2, #56	; 0x38
 800661c:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	227c      	movs	r2, #124	; 0x7c
 8006624:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2244      	movs	r2, #68	; 0x44
 800662c:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	227c      	movs	r2, #124	; 0x7c
 8006634:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	223c      	movs	r2, #60	; 0x3c
 800663c:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2204      	movs	r2, #4
 800664c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2280      	movs	r2, #128	; 0x80
 8006654:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	22fe      	movs	r2, #254	; 0xfe
 800665c:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	227e      	movs	r2, #126	; 0x7e
 8006664:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	223e      	movs	r2, #62	; 0x3e
 800667c:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	221e      	movs	r2, #30
 8006684:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2204      	movs	r2, #4
 800668c:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2206      	movs	r2, #6
 8006694:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	227e      	movs	r2, #126	; 0x7e
 80066a4:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	227c      	movs	r2, #124	; 0x7c
 80066ac:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2206      	movs	r2, #6
 80066b4:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2299      	movs	r2, #153	; 0x99
 80066c4:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	22bd      	movs	r2, #189	; 0xbd
 80066cc:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	22e7      	movs	r2, #231	; 0xe7
 80066d4:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	22e7      	movs	r2, #231	; 0xe7
 80066dc:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	22bd      	movs	r2, #189	; 0xbd
 80066e4:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2299      	movs	r2, #153	; 0x99
 80066ec:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	221c      	movs	r2, #28
 80066f4:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	223e      	movs	r2, #62	; 0x3e
 80066fc:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	226b      	movs	r2, #107	; 0x6b
 8006704:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2249      	movs	r2, #73	; 0x49
 800670c:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	226b      	movs	r2, #107	; 0x6b
 8006714:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	223e      	movs	r2, #62	; 0x3e
 800671c:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	221c      	movs	r2, #28
 8006724:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	224c      	movs	r2, #76	; 0x4c
 800672c:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	227e      	movs	r2, #126	; 0x7e
 8006734:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2273      	movs	r2, #115	; 0x73
 800673c:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2273      	movs	r2, #115	; 0x73
 800674c:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	227e      	movs	r2, #126	; 0x7e
 8006754:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	224c      	movs	r2, #76	; 0x4c
 800675c:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2230      	movs	r2, #48	; 0x30
 8006764:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2278      	movs	r2, #120	; 0x78
 800676c:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	224a      	movs	r2, #74	; 0x4a
 8006774:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	224f      	movs	r2, #79	; 0x4f
 800677c:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	227d      	movs	r2, #125	; 0x7d
 8006784:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2239      	movs	r2, #57	; 0x39
 800678c:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2218      	movs	r2, #24
 8006794:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	223c      	movs	r2, #60	; 0x3c
 800679c:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	; 0x24
 80067a4:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	223c      	movs	r2, #60	; 0x3c
 80067ac:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	223c      	movs	r2, #60	; 0x3c
 80067b4:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	; 0x24
 80067bc:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	223c      	movs	r2, #60	; 0x3c
 80067c4:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2218      	movs	r2, #24
 80067cc:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2298      	movs	r2, #152	; 0x98
 80067d4:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	22fc      	movs	r2, #252	; 0xfc
 80067dc:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2264      	movs	r2, #100	; 0x64
 80067e4:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	223c      	movs	r2, #60	; 0x3c
 80067ec:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	223e      	movs	r2, #62	; 0x3e
 80067f4:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2227      	movs	r2, #39	; 0x27
 80067fc:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	223d      	movs	r2, #61	; 0x3d
 8006804:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2218      	movs	r2, #24
 800680c:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	221c      	movs	r2, #28
 8006814:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	223e      	movs	r2, #62	; 0x3e
 800681c:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	226b      	movs	r2, #107	; 0x6b
 8006824:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2249      	movs	r2, #73	; 0x49
 800682c:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2249      	movs	r2, #73	; 0x49
 8006834:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	227e      	movs	r2, #126	; 0x7e
 800683c:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	227f      	movs	r2, #127	; 0x7f
 8006844:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	227f      	movs	r2, #127	; 0x7f
 800685c:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	227e      	movs	r2, #126	; 0x7e
 8006864:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	222a      	movs	r2, #42	; 0x2a
 800686c:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	222a      	movs	r2, #42	; 0x2a
 8006874:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	222a      	movs	r2, #42	; 0x2a
 800687c:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	222a      	movs	r2, #42	; 0x2a
 8006884:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	222a      	movs	r2, #42	; 0x2a
 800688c:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	222a      	movs	r2, #42	; 0x2a
 8006894:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2244      	movs	r2, #68	; 0x44
 800689c:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2244      	movs	r2, #68	; 0x44
 80068a4:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	225f      	movs	r2, #95	; 0x5f
 80068ac:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	225f      	movs	r2, #95	; 0x5f
 80068b4:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2244      	movs	r2, #68	; 0x44
 80068bc:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2244      	movs	r2, #68	; 0x44
 80068c4:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2240      	movs	r2, #64	; 0x40
 80068cc:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2251      	movs	r2, #81	; 0x51
 80068d4:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	225b      	movs	r2, #91	; 0x5b
 80068dc:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	224e      	movs	r2, #78	; 0x4e
 80068e4:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2244      	movs	r2, #68	; 0x44
 80068ec:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2240      	movs	r2, #64	; 0x40
 80068f4:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2240      	movs	r2, #64	; 0x40
 80068fc:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2244      	movs	r2, #68	; 0x44
 8006904:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	224e      	movs	r2, #78	; 0x4e
 800690c:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	225b      	movs	r2, #91	; 0x5b
 8006914:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2251      	movs	r2, #81	; 0x51
 800691c:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2240      	movs	r2, #64	; 0x40
 8006924:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	22fe      	movs	r2, #254	; 0xfe
 800692c:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	22ff      	movs	r2, #255	; 0xff
 8006934:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2207      	movs	r2, #7
 8006944:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2206      	movs	r2, #6
 800694c:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2260      	movs	r2, #96	; 0x60
 8006954:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	22e0      	movs	r2, #224	; 0xe0
 800695c:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	22ff      	movs	r2, #255	; 0xff
 800696c:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	227f      	movs	r2, #127	; 0x7f
 8006974:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2208      	movs	r2, #8
 800697c:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2208      	movs	r2, #8
 8006984:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	226b      	movs	r2, #107	; 0x6b
 800698c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	226b      	movs	r2, #107	; 0x6b
 8006994:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2208      	movs	r2, #8
 800699c:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2208      	movs	r2, #8
 80069a4:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2224      	movs	r2, #36	; 0x24
 80069ac:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2236      	movs	r2, #54	; 0x36
 80069b4:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2212      	movs	r2, #18
 80069bc:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2236      	movs	r2, #54	; 0x36
 80069c4:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2224      	movs	r2, #36	; 0x24
 80069cc:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2236      	movs	r2, #54	; 0x36
 80069d4:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2212      	movs	r2, #18
 80069dc:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2206      	movs	r2, #6
 80069e4:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	220f      	movs	r2, #15
 80069ec:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2209      	movs	r2, #9
 80069f4:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	220f      	movs	r2, #15
 80069fc:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2206      	movs	r2, #6
 8006a04:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2218      	movs	r2, #24
 8006a0c:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2218      	movs	r2, #24
 8006a14:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2210      	movs	r2, #16
 8006a1c:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2210      	movs	r2, #16
 8006a24:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2230      	movs	r2, #48	; 0x30
 8006a34:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2270      	movs	r2, #112	; 0x70
 8006a3c:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	22c0      	movs	r2, #192	; 0xc0
 8006a44:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	22ff      	movs	r2, #255	; 0xff
 8006a4c:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	22ff      	movs	r2, #255	; 0xff
 8006a54:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	221f      	movs	r2, #31
 8006a6c:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	221f      	movs	r2, #31
 8006a74:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	221f      	movs	r2, #31
 8006a84:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	221e      	movs	r2, #30
 8006a8c:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2219      	movs	r2, #25
 8006a94:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	221d      	movs	r2, #29
 8006a9c:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2217      	movs	r2, #23
 8006aa4:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2212      	movs	r2, #18
 8006aac:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	223c      	movs	r2, #60	; 0x3c
 8006ab4:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	223c      	movs	r2, #60	; 0x3c
 8006abc:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	223c      	movs	r2, #60	; 0x3c
 8006ac4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	223c      	movs	r2, #60	; 0x3c
 8006acc:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f603 0326 	addw	r3, r3, #2086	; 0x826
 8006ad6:	f240 12db 	movw	r2, #475	; 0x1db
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f008 f9ed 	bl	800eebc <memset>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	225f      	movs	r2, #95	; 0x5f
 8006ae6:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2207      	movs	r2, #7
 8006aee:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2207      	movs	r2, #7
 8006af6:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2214      	movs	r2, #20
 8006afe:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	227f      	movs	r2, #127	; 0x7f
 8006b06:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2214      	movs	r2, #20
 8006b0e:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	227f      	movs	r2, #127	; 0x7f
 8006b16:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2214      	movs	r2, #20
 8006b1e:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2224      	movs	r2, #36	; 0x24
 8006b26:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	222a      	movs	r2, #42	; 0x2a
 8006b2e:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	227f      	movs	r2, #127	; 0x7f
 8006b36:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	222a      	movs	r2, #42	; 0x2a
 8006b3e:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2212      	movs	r2, #18
 8006b46:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2223      	movs	r2, #35	; 0x23
 8006b4e:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2213      	movs	r2, #19
 8006b56:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2264      	movs	r2, #100	; 0x64
 8006b66:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2262      	movs	r2, #98	; 0x62
 8006b6e:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2236      	movs	r2, #54	; 0x36
 8006b76:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2249      	movs	r2, #73	; 0x49
 8006b7e:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2255      	movs	r2, #85	; 0x55
 8006b86:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2222      	movs	r2, #34	; 0x22
 8006b8e:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2250      	movs	r2, #80	; 0x50
 8006b96:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2205      	movs	r2, #5
 8006b9e:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	221c      	movs	r2, #28
 8006bae:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2222      	movs	r2, #34	; 0x22
 8006bb6:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2241      	movs	r2, #65	; 0x41
 8006bbe:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2241      	movs	r2, #65	; 0x41
 8006bc6:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2222      	movs	r2, #34	; 0x22
 8006bce:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	221c      	movs	r2, #28
 8006bd6:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	222a      	movs	r2, #42	; 0x2a
 8006be6:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	221c      	movs	r2, #28
 8006bee:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	222a      	movs	r2, #42	; 0x2a
 8006bf6:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2208      	movs	r2, #8
 8006c06:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	223e      	movs	r2, #62	; 0x3e
 8006c16:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2208      	movs	r2, #8
 8006c26:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2250      	movs	r2, #80	; 0x50
 8006c2e:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2230      	movs	r2, #48	; 0x30
 8006c36:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2208      	movs	r2, #8
 8006c46:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2208      	movs	r2, #8
 8006c56:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2230      	movs	r2, #48	; 0x30
 8006c66:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2230      	movs	r2, #48	; 0x30
 8006c6e:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2208      	movs	r2, #8
 8006c86:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	223e      	movs	r2, #62	; 0x3e
 8006c9e:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2251      	movs	r2, #81	; 0x51
 8006ca6:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2249      	movs	r2, #73	; 0x49
 8006cae:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2245      	movs	r2, #69	; 0x45
 8006cb6:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	223e      	movs	r2, #62	; 0x3e
 8006cbe:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2242      	movs	r2, #66	; 0x42
 8006cc6:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	227f      	movs	r2, #127	; 0x7f
 8006cce:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2240      	movs	r2, #64	; 0x40
 8006cd6:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2242      	movs	r2, #66	; 0x42
 8006cde:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2261      	movs	r2, #97	; 0x61
 8006ce6:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2251      	movs	r2, #81	; 0x51
 8006cee:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2249      	movs	r2, #73	; 0x49
 8006cf6:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2246      	movs	r2, #70	; 0x46
 8006cfe:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2221      	movs	r2, #33	; 0x21
 8006d06:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2241      	movs	r2, #65	; 0x41
 8006d0e:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2245      	movs	r2, #69	; 0x45
 8006d16:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	224b      	movs	r2, #75	; 0x4b
 8006d1e:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2231      	movs	r2, #49	; 0x31
 8006d26:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2218      	movs	r2, #24
 8006d2e:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2214      	movs	r2, #20
 8006d36:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2212      	movs	r2, #18
 8006d3e:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	227f      	movs	r2, #127	; 0x7f
 8006d46:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2227      	movs	r2, #39	; 0x27
 8006d56:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2245      	movs	r2, #69	; 0x45
 8006d5e:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2245      	movs	r2, #69	; 0x45
 8006d66:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2245      	movs	r2, #69	; 0x45
 8006d6e:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2239      	movs	r2, #57	; 0x39
 8006d76:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	223c      	movs	r2, #60	; 0x3c
 8006d7e:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	224a      	movs	r2, #74	; 0x4a
 8006d86:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2249      	movs	r2, #73	; 0x49
 8006d8e:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2249      	movs	r2, #73	; 0x49
 8006d96:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2230      	movs	r2, #48	; 0x30
 8006d9e:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2271      	movs	r2, #113	; 0x71
 8006dae:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2209      	movs	r2, #9
 8006db6:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2236      	movs	r2, #54	; 0x36
 8006dce:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2249      	movs	r2, #73	; 0x49
 8006dd6:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2249      	movs	r2, #73	; 0x49
 8006dde:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2249      	movs	r2, #73	; 0x49
 8006de6:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2236      	movs	r2, #54	; 0x36
 8006dee:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2206      	movs	r2, #6
 8006df6:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2249      	movs	r2, #73	; 0x49
 8006dfe:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2249      	movs	r2, #73	; 0x49
 8006e06:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2229      	movs	r2, #41	; 0x29
 8006e0e:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	221e      	movs	r2, #30
 8006e16:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2236      	movs	r2, #54	; 0x36
 8006e1e:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2236      	movs	r2, #54	; 0x36
 8006e26:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2256      	movs	r2, #86	; 0x56
 8006e2e:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2236      	movs	r2, #54	; 0x36
 8006e36:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2214      	movs	r2, #20
 8006e46:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2222      	movs	r2, #34	; 0x22
 8006e4e:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2241      	movs	r2, #65	; 0x41
 8006e56:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2214      	movs	r2, #20
 8006e5e:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2214      	movs	r2, #20
 8006e66:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2214      	movs	r2, #20
 8006e6e:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2214      	movs	r2, #20
 8006e76:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2214      	movs	r2, #20
 8006e7e:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2241      	movs	r2, #65	; 0x41
 8006e86:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2222      	movs	r2, #34	; 0x22
 8006e8e:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2214      	movs	r2, #20
 8006e96:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2251      	movs	r2, #81	; 0x51
 8006eb6:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2209      	movs	r2, #9
 8006ebe:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2206      	movs	r2, #6
 8006ec6:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2232      	movs	r2, #50	; 0x32
 8006ece:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2249      	movs	r2, #73	; 0x49
 8006ed6:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2279      	movs	r2, #121	; 0x79
 8006ede:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2241      	movs	r2, #65	; 0x41
 8006ee6:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	223e      	movs	r2, #62	; 0x3e
 8006eee:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	227e      	movs	r2, #126	; 0x7e
 8006ef6:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2211      	movs	r2, #17
 8006efe:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2211      	movs	r2, #17
 8006f06:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2211      	movs	r2, #17
 8006f0e:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	227e      	movs	r2, #126	; 0x7e
 8006f16:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	227f      	movs	r2, #127	; 0x7f
 8006f1e:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2249      	movs	r2, #73	; 0x49
 8006f26:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2249      	movs	r2, #73	; 0x49
 8006f2e:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2249      	movs	r2, #73	; 0x49
 8006f36:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2236      	movs	r2, #54	; 0x36
 8006f3e:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	223e      	movs	r2, #62	; 0x3e
 8006f46:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2241      	movs	r2, #65	; 0x41
 8006f4e:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2241      	movs	r2, #65	; 0x41
 8006f56:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2241      	movs	r2, #65	; 0x41
 8006f5e:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2222      	movs	r2, #34	; 0x22
 8006f66:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	227f      	movs	r2, #127	; 0x7f
 8006f6e:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2241      	movs	r2, #65	; 0x41
 8006f76:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2241      	movs	r2, #65	; 0x41
 8006f7e:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2222      	movs	r2, #34	; 0x22
 8006f86:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	221c      	movs	r2, #28
 8006f8e:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	227f      	movs	r2, #127	; 0x7f
 8006f96:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2249      	movs	r2, #73	; 0x49
 8006f9e:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2249      	movs	r2, #73	; 0x49
 8006fa6:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2249      	movs	r2, #73	; 0x49
 8006fae:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2241      	movs	r2, #65	; 0x41
 8006fb6:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	227f      	movs	r2, #127	; 0x7f
 8006fbe:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2209      	movs	r2, #9
 8006fc6:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2209      	movs	r2, #9
 8006fce:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	223e      	movs	r2, #62	; 0x3e
 8006fe6:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2241      	movs	r2, #65	; 0x41
 8006fee:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2241      	movs	r2, #65	; 0x41
 8006ff6:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2251      	movs	r2, #81	; 0x51
 8006ffe:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2232      	movs	r2, #50	; 0x32
 8007006:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	227f      	movs	r2, #127	; 0x7f
 800700e:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2208      	movs	r2, #8
 8007016:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2208      	movs	r2, #8
 800701e:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2208      	movs	r2, #8
 8007026:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	227f      	movs	r2, #127	; 0x7f
 800702e:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2241      	movs	r2, #65	; 0x41
 8007036:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	227f      	movs	r2, #127	; 0x7f
 800703e:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2241      	movs	r2, #65	; 0x41
 8007046:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2240      	movs	r2, #64	; 0x40
 8007056:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2241      	movs	r2, #65	; 0x41
 800705e:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	223f      	movs	r2, #63	; 0x3f
 8007066:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	227f      	movs	r2, #127	; 0x7f
 8007076:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2208      	movs	r2, #8
 800707e:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2214      	movs	r2, #20
 8007086:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2222      	movs	r2, #34	; 0x22
 800708e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2241      	movs	r2, #65	; 0x41
 8007096:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	227f      	movs	r2, #127	; 0x7f
 800709e:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2240      	movs	r2, #64	; 0x40
 80070a6:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2240      	movs	r2, #64	; 0x40
 80070ae:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2240      	movs	r2, #64	; 0x40
 80070b6:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2240      	movs	r2, #64	; 0x40
 80070be:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	227f      	movs	r2, #127	; 0x7f
 80070c6:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	227f      	movs	r2, #127	; 0x7f
 80070e6:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	227f      	movs	r2, #127	; 0x7f
 80070ee:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2204      	movs	r2, #4
 80070f6:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2208      	movs	r2, #8
 80070fe:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2210      	movs	r2, #16
 8007106:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	227f      	movs	r2, #127	; 0x7f
 800710e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	223e      	movs	r2, #62	; 0x3e
 8007116:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2241      	movs	r2, #65	; 0x41
 800711e:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2241      	movs	r2, #65	; 0x41
 8007126:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2241      	movs	r2, #65	; 0x41
 800712e:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	223e      	movs	r2, #62	; 0x3e
 8007136:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	227f      	movs	r2, #127	; 0x7f
 800713e:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2209      	movs	r2, #9
 8007146:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2209      	movs	r2, #9
 800714e:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2209      	movs	r2, #9
 8007156:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2206      	movs	r2, #6
 800715e:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	223e      	movs	r2, #62	; 0x3e
 8007166:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2241      	movs	r2, #65	; 0x41
 800716e:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2251      	movs	r2, #81	; 0x51
 8007176:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2221      	movs	r2, #33	; 0x21
 800717e:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	225e      	movs	r2, #94	; 0x5e
 8007186:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	227f      	movs	r2, #127	; 0x7f
 800718e:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2209      	movs	r2, #9
 8007196:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2219      	movs	r2, #25
 800719e:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2229      	movs	r2, #41	; 0x29
 80071a6:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2246      	movs	r2, #70	; 0x46
 80071ae:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2246      	movs	r2, #70	; 0x46
 80071b6:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2249      	movs	r2, #73	; 0x49
 80071be:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2249      	movs	r2, #73	; 0x49
 80071c6:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2249      	movs	r2, #73	; 0x49
 80071ce:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2231      	movs	r2, #49	; 0x31
 80071d6:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	227f      	movs	r2, #127	; 0x7f
 80071ee:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	223f      	movs	r2, #63	; 0x3f
 8007206:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2240      	movs	r2, #64	; 0x40
 800720e:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2240      	movs	r2, #64	; 0x40
 8007216:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2240      	movs	r2, #64	; 0x40
 800721e:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	223f      	movs	r2, #63	; 0x3f
 8007226:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	221f      	movs	r2, #31
 800722e:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2240      	movs	r2, #64	; 0x40
 800723e:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	221f      	movs	r2, #31
 800724e:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	227f      	movs	r2, #127	; 0x7f
 8007256:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2218      	movs	r2, #24
 8007266:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	227f      	movs	r2, #127	; 0x7f
 8007276:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2263      	movs	r2, #99	; 0x63
 800727e:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2214      	movs	r2, #20
 8007286:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2208      	movs	r2, #8
 800728e:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2214      	movs	r2, #20
 8007296:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2263      	movs	r2, #99	; 0x63
 800729e:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2203      	movs	r2, #3
 80072a6:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2204      	movs	r2, #4
 80072ae:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2278      	movs	r2, #120	; 0x78
 80072b6:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2204      	movs	r2, #4
 80072be:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2261      	movs	r2, #97	; 0x61
 80072ce:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2251      	movs	r2, #81	; 0x51
 80072d6:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2249      	movs	r2, #73	; 0x49
 80072de:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2245      	movs	r2, #69	; 0x45
 80072e6:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2243      	movs	r2, #67	; 0x43
 80072ee:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	227f      	movs	r2, #127	; 0x7f
 80072f6:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2241      	movs	r2, #65	; 0x41
 80072fe:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2241      	movs	r2, #65	; 0x41
 8007306:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2204      	movs	r2, #4
 8007316:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2208      	movs	r2, #8
 800731e:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2210      	movs	r2, #16
 8007326:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2241      	movs	r2, #65	; 0x41
 8007336:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2241      	movs	r2, #65	; 0x41
 800733e:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	227f      	movs	r2, #127	; 0x7f
 8007346:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2204      	movs	r2, #4
 800734e:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2204      	movs	r2, #4
 800736e:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2240      	movs	r2, #64	; 0x40
 8007376:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2240      	movs	r2, #64	; 0x40
 800737e:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2240      	movs	r2, #64	; 0x40
 8007386:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2240      	movs	r2, #64	; 0x40
 800738e:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2240      	movs	r2, #64	; 0x40
 8007396:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2254      	movs	r2, #84	; 0x54
 80073be:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2254      	movs	r2, #84	; 0x54
 80073c6:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2254      	movs	r2, #84	; 0x54
 80073ce:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2278      	movs	r2, #120	; 0x78
 80073d6:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	227f      	movs	r2, #127	; 0x7f
 80073de:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2248      	movs	r2, #72	; 0x48
 80073e6:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2244      	movs	r2, #68	; 0x44
 80073ee:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2244      	movs	r2, #68	; 0x44
 80073f6:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2238      	movs	r2, #56	; 0x38
 80073fe:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2238      	movs	r2, #56	; 0x38
 8007406:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2244      	movs	r2, #68	; 0x44
 800740e:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2244      	movs	r2, #68	; 0x44
 8007416:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2244      	movs	r2, #68	; 0x44
 800741e:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2238      	movs	r2, #56	; 0x38
 800742e:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2244      	movs	r2, #68	; 0x44
 8007436:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2244      	movs	r2, #68	; 0x44
 800743e:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2248      	movs	r2, #72	; 0x48
 8007446:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	227f      	movs	r2, #127	; 0x7f
 800744e:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2238      	movs	r2, #56	; 0x38
 8007456:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2254      	movs	r2, #84	; 0x54
 800745e:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2254      	movs	r2, #84	; 0x54
 8007466:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2254      	movs	r2, #84	; 0x54
 800746e:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2218      	movs	r2, #24
 8007476:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2208      	movs	r2, #8
 800747e:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	227e      	movs	r2, #126	; 0x7e
 8007486:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2209      	movs	r2, #9
 800748e:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2208      	movs	r2, #8
 80074a6:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2214      	movs	r2, #20
 80074ae:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2254      	movs	r2, #84	; 0x54
 80074b6:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2254      	movs	r2, #84	; 0x54
 80074be:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	223c      	movs	r2, #60	; 0x3c
 80074c6:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	227f      	movs	r2, #127	; 0x7f
 80074ce:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2208      	movs	r2, #8
 80074d6:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2204      	movs	r2, #4
 80074de:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2278      	movs	r2, #120	; 0x78
 80074ee:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2244      	movs	r2, #68	; 0x44
 80074f6:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	227d      	movs	r2, #125	; 0x7d
 80074fe:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2240      	movs	r2, #64	; 0x40
 8007506:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2244      	movs	r2, #68	; 0x44
 800751e:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	223d      	movs	r2, #61	; 0x3d
 8007526:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	227f      	movs	r2, #127	; 0x7f
 800752e:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2210      	movs	r2, #16
 8007536:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2228      	movs	r2, #40	; 0x28
 800753e:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2244      	movs	r2, #68	; 0x44
 8007546:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2241      	movs	r2, #65	; 0x41
 800754e:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	227f      	movs	r2, #127	; 0x7f
 8007556:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	227c      	movs	r2, #124	; 0x7c
 8007566:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2204      	movs	r2, #4
 800756e:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2218      	movs	r2, #24
 8007576:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2204      	movs	r2, #4
 800757e:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2278      	movs	r2, #120	; 0x78
 8007586:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	227c      	movs	r2, #124	; 0x7c
 800758e:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2208      	movs	r2, #8
 8007596:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2204      	movs	r2, #4
 800759e:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2204      	movs	r2, #4
 80075a6:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2278      	movs	r2, #120	; 0x78
 80075ae:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2238      	movs	r2, #56	; 0x38
 80075b6:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2244      	movs	r2, #68	; 0x44
 80075be:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2244      	movs	r2, #68	; 0x44
 80075c6:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2244      	movs	r2, #68	; 0x44
 80075ce:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2238      	movs	r2, #56	; 0x38
 80075d6:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	227c      	movs	r2, #124	; 0x7c
 80075de:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2214      	movs	r2, #20
 80075e6:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2214      	movs	r2, #20
 80075ee:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2214      	movs	r2, #20
 80075f6:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2208      	movs	r2, #8
 80075fe:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2208      	movs	r2, #8
 8007606:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2214      	movs	r2, #20
 800760e:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2214      	movs	r2, #20
 8007616:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2218      	movs	r2, #24
 800761e:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	227c      	movs	r2, #124	; 0x7c
 8007626:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	227c      	movs	r2, #124	; 0x7c
 800762e:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2208      	movs	r2, #8
 8007636:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2204      	movs	r2, #4
 8007646:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2208      	movs	r2, #8
 800764e:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2248      	movs	r2, #72	; 0x48
 8007656:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2254      	movs	r2, #84	; 0x54
 800765e:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2254      	movs	r2, #84	; 0x54
 8007666:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2254      	movs	r2, #84	; 0x54
 800766e:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2204      	movs	r2, #4
 800767e:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	223f      	movs	r2, #63	; 0x3f
 8007686:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2244      	movs	r2, #68	; 0x44
 800768e:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2240      	movs	r2, #64	; 0x40
 8007696:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	223c      	movs	r2, #60	; 0x3c
 80076a6:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2240      	movs	r2, #64	; 0x40
 80076ae:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2240      	movs	r2, #64	; 0x40
 80076b6:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	227c      	movs	r2, #124	; 0x7c
 80076c6:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	221c      	movs	r2, #28
 80076ce:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2240      	movs	r2, #64	; 0x40
 80076de:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	221c      	movs	r2, #28
 80076ee:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	223c      	movs	r2, #60	; 0x3c
 80076f6:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2240      	movs	r2, #64	; 0x40
 80076fe:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2230      	movs	r2, #48	; 0x30
 8007706:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2240      	movs	r2, #64	; 0x40
 800770e:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	223c      	movs	r2, #60	; 0x3c
 8007716:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2244      	movs	r2, #68	; 0x44
 800771e:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2228      	movs	r2, #40	; 0x28
 8007726:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2210      	movs	r2, #16
 800772e:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2228      	movs	r2, #40	; 0x28
 8007736:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2244      	movs	r2, #68	; 0x44
 800773e:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	220c      	movs	r2, #12
 8007746:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2250      	movs	r2, #80	; 0x50
 800774e:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2250      	movs	r2, #80	; 0x50
 8007756:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2250      	movs	r2, #80	; 0x50
 800775e:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	223c      	movs	r2, #60	; 0x3c
 8007766:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2244      	movs	r2, #68	; 0x44
 800776e:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2264      	movs	r2, #100	; 0x64
 8007776:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2254      	movs	r2, #84	; 0x54
 800777e:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	224c      	movs	r2, #76	; 0x4c
 8007786:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2244      	movs	r2, #68	; 0x44
 800778e:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2208      	movs	r2, #8
 8007796:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2236      	movs	r2, #54	; 0x36
 800779e:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2241      	movs	r2, #65	; 0x41
 80077a6:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	227f      	movs	r2, #127	; 0x7f
 80077ae:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2241      	movs	r2, #65	; 0x41
 80077b6:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2236      	movs	r2, #54	; 0x36
 80077be:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2208      	movs	r2, #8
 80077c6:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bdb0      	pop	{r4, r5, r7, pc}

080077d4 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	4a05      	ldr	r2, [pc, #20]	; (80077f4 <_ZN4GLCDD1Ev+0x20>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fb fe23 	bl	8003430 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	0800fc94 	.word	0x0800fc94

080077f8 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
}
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ffe7 	bl	80077d4 <_ZN4GLCDD1Ev>
 8007806:	f640 2104 	movw	r1, #2564	; 0xa04
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f007 fb11 	bl	800ee32 <_ZdlPvj>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007824:	2200      	movs	r2, #0
 8007826:	2110      	movs	r1, #16
 8007828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800782c:	f002 fbba 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007830:	2200      	movs	r2, #0
 8007832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007836:	480c      	ldr	r0, [pc, #48]	; (8007868 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007838:	f002 fbb4 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800783c:	2200      	movs	r2, #0
 800783e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007842:	4809      	ldr	r0, [pc, #36]	; (8007868 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007844:	f002 fbae 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007848:	2200      	movs	r2, #0
 800784a:	2104      	movs	r1, #4
 800784c:	4807      	ldr	r0, [pc, #28]	; (800786c <_ZN4GLCD9m_ctrloffEv+0x50>)
 800784e:	f002 fba9 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007852:	2200      	movs	r2, #0
 8007854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007858:	4803      	ldr	r0, [pc, #12]	; (8007868 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 800785a:	f002 fba3 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	48000800 	.word	0x48000800
 800786c:	48000c00 	.word	0x48000c00

08007870 <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	d20d      	bcs.n	80078a6 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 800788a:	2300      	movs	r3, #0
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	429a      	cmp	r2, r3
 8007894:	d203      	bcs.n	800789e <_ZN4GLCD7m_delayEjh+0x2e>
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	3301      	adds	r3, #1
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e7f7      	b.n	800788e <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3301      	adds	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e7ed      	b.n	8007882 <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fb ffe8 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	2108      	movs	r1, #8
 80078d2:	482f      	ldr	r0, [pc, #188]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80078d4:	f002 fb66 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	2101      	movs	r1, #1
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fb ffdc 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	2104      	movs	r1, #4
 80078ea:	4829      	ldr	r0, [pc, #164]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80078ec:	f002 fb5a 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	2102      	movs	r1, #2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fb ffd0 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	2102      	movs	r1, #2
 8007902:	4823      	ldr	r0, [pc, #140]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007904:	f002 fb4e 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	2103      	movs	r1, #3
 800790e:	4618      	mov	r0, r3
 8007910:	f7fb ffc4 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007914:	4603      	mov	r3, r0
 8007916:	461a      	mov	r2, r3
 8007918:	2101      	movs	r1, #1
 800791a:	481d      	ldr	r0, [pc, #116]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 800791c:	f002 fb42 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	2104      	movs	r1, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fb ffb8 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007934:	4816      	ldr	r0, [pc, #88]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007936:	f002 fb35 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	2105      	movs	r1, #5
 8007940:	4618      	mov	r0, r3
 8007942:	f7fb ffab 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800794e:	4810      	ldr	r0, [pc, #64]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007950:	f002 fb28 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	2106      	movs	r1, #6
 800795a:	4618      	mov	r0, r3
 800795c:	f7fb ff9e 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007968:	4809      	ldr	r0, [pc, #36]	; (8007990 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 800796a:	f002 fb1b 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	2107      	movs	r1, #7
 8007974:	4618      	mov	r0, r3
 8007976:	f7fb ff91 	bl	800389c <_ZN6common26ReadtheValueAssignPinstateEhh>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	2120      	movs	r1, #32
 8007980:	4804      	ldr	r0, [pc, #16]	; (8007994 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8007982:	f002 fb0f 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	48000800 	.word	0x48000800
 8007994:	48000400 	.word	0x48000400

08007998 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ff3b 	bl	800781c <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 80079a6:	213f      	movs	r1, #63	; 0x3f
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff83 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80079ae:	2201      	movs	r2, #1
 80079b0:	2104      	movs	r1, #4
 80079b2:	4815      	ldr	r0, [pc, #84]	; (8007a08 <_ZN4GLCD11m_displayonEv+0x70>)
 80079b4:	f002 faf6 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80079b8:	2201      	movs	r2, #1
 80079ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079be:	4813      	ldr	r0, [pc, #76]	; (8007a0c <_ZN4GLCD11m_displayonEv+0x74>)
 80079c0:	f002 faf0 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2110      	movs	r1, #16
 80079c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079cc:	f002 faea 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80079d0:	2200      	movs	r2, #0
 80079d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079d6:	480d      	ldr	r0, [pc, #52]	; (8007a0c <_ZN4GLCD11m_displayonEv+0x74>)
 80079d8:	f002 fae4 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80079dc:	2201      	movs	r2, #1
 80079de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079e2:	480a      	ldr	r0, [pc, #40]	; (8007a0c <_ZN4GLCD11m_displayonEv+0x74>)
 80079e4:	f002 fade 	bl	8009fa4 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80079e8:	2264      	movs	r2, #100	; 0x64
 80079ea:	210a      	movs	r1, #10
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff3f 	bl	8007870 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80079f2:	2200      	movs	r2, #0
 80079f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079f8:	4804      	ldr	r0, [pc, #16]	; (8007a0c <_ZN4GLCD11m_displayonEv+0x74>)
 80079fa:	f002 fad3 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	48000c00 	.word	0x48000c00
 8007a0c:	48000800 	.word	0x48000800

08007a10 <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	2b3f      	cmp	r3, #63	; 0x3f
 8007a20:	d839      	bhi.n	8007a96 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff fefa 	bl	800781c <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff ff38 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007a44:	2201      	movs	r2, #1
 8007a46:	2104      	movs	r1, #4
 8007a48:	4831      	ldr	r0, [pc, #196]	; (8007b10 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007a4a:	f002 faab 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a54:	482f      	ldr	r0, [pc, #188]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007a56:	f002 faa5 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a62:	f002 fa9f 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007a66:	2200      	movs	r2, #0
 8007a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a6c:	4829      	ldr	r0, [pc, #164]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007a6e:	f002 fa99 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007a72:	2201      	movs	r2, #1
 8007a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a78:	4826      	ldr	r0, [pc, #152]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007a7a:	f002 fa93 	bl	8009fa4 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 8007a7e:	2264      	movs	r2, #100	; 0x64
 8007a80:	210a      	movs	r1, #10
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fef4 	bl	8007870 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a8e:	4821      	ldr	r0, [pc, #132]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007a90:	f002 fa88 	bl	8009fa4 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8007a94:	e038      	b.n	8007b08 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8007a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aaa:	b25b      	sxtb	r3, r3
 8007aac:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fefe 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2104      	movs	r1, #4
 8007abc:	4814      	ldr	r0, [pc, #80]	; (8007b10 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007abe:	f002 fa71 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ac8:	4812      	ldr	r0, [pc, #72]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007aca:	f002 fa6b 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2110      	movs	r1, #16
 8007ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ad6:	f002 fa65 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007ada:	2200      	movs	r2, #0
 8007adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ae0:	480c      	ldr	r0, [pc, #48]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007ae2:	f002 fa5f 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007aec:	4809      	ldr	r0, [pc, #36]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007aee:	f002 fa59 	bl	8009fa4 <HAL_GPIO_WritePin>
		m_delay(10,100);
 8007af2:	2264      	movs	r2, #100	; 0x64
 8007af4:	210a      	movs	r1, #10
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff feba 	bl	8007870 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007afc:	2200      	movs	r2, #0
 8007afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b02:	4804      	ldr	r0, [pc, #16]	; (8007b14 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007b04:	f002 fa4e 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	48000c00 	.word	0x48000c00
 8007b14:	48000800 	.word	0x48000800

08007b18 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fe79 	bl	800781c <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f063 0347 	orn	r3, r3, #71	; 0x47
 8007b30:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff febc 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2104      	movs	r1, #4
 8007b40:	4814      	ldr	r0, [pc, #80]	; (8007b94 <_ZN4GLCD9m_setpageEh+0x7c>)
 8007b42:	f002 fa2f 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007b46:	2201      	movs	r2, #1
 8007b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b4c:	4812      	ldr	r0, [pc, #72]	; (8007b98 <_ZN4GLCD9m_setpageEh+0x80>)
 8007b4e:	f002 fa29 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007b52:	2200      	movs	r2, #0
 8007b54:	2110      	movs	r1, #16
 8007b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b5a:	f002 fa23 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b64:	480c      	ldr	r0, [pc, #48]	; (8007b98 <_ZN4GLCD9m_setpageEh+0x80>)
 8007b66:	f002 fa1d 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b70:	4809      	ldr	r0, [pc, #36]	; (8007b98 <_ZN4GLCD9m_setpageEh+0x80>)
 8007b72:	f002 fa17 	bl	8009fa4 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007b76:	2264      	movs	r2, #100	; 0x64
 8007b78:	210a      	movs	r1, #10
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff fe78 	bl	8007870 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007b80:	2200      	movs	r2, #0
 8007b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b86:	4804      	ldr	r0, [pc, #16]	; (8007b98 <_ZN4GLCD9m_setpageEh+0x80>)
 8007b88:	f002 fa0c 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	48000c00 	.word	0x48000c00
 8007b98:	48000800 	.word	0x48000800

08007b9c <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fe37 	bl	800781c <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007bb4:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff fe7a 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2104      	movs	r1, #4
 8007bc4:	4814      	ldr	r0, [pc, #80]	; (8007c18 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 8007bc6:	f002 f9ed 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bd0:	4812      	ldr	r0, [pc, #72]	; (8007c1c <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007bd2:	f002 f9e7 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2110      	movs	r1, #16
 8007bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bde:	f002 f9e1 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007be2:	2200      	movs	r2, #0
 8007be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007be8:	480c      	ldr	r0, [pc, #48]	; (8007c1c <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007bea:	f002 f9db 	bl	8009fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bf4:	4809      	ldr	r0, [pc, #36]	; (8007c1c <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007bf6:	f002 f9d5 	bl	8009fa4 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007bfa:	2264      	movs	r2, #100	; 0x64
 8007bfc:	210a      	movs	r1, #10
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff fe36 	bl	8007870 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007c04:	2200      	movs	r2, #0
 8007c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c0a:	4804      	ldr	r0, [pc, #16]	; (8007c1c <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007c0c:	f002 f9ca 	bl	8009fa4 <HAL_GPIO_WritePin>
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	48000c00 	.word	0x48000c00
 8007c1c:	48000800 	.word	0x48000800

08007c20 <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	82fb      	strh	r3, [r7, #22]
 8007c32:	8afa      	ldrh	r2, [r7, #22]
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	f080 8085 	bcs.w	8007d46 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	7f1b      	ldrb	r3, [r3, #28]
 8007c40:	2b3f      	cmp	r3, #63	; 0x3f
 8007c42:	d838      	bhi.n	8007cb6 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8007c44:	8afb      	ldrh	r3, [r7, #22]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	4413      	add	r3, r2
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8007c4e:	7d7b      	ldrb	r3, [r7, #21]
 8007c50:	4619      	mov	r1, r3
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fe2e 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007c58:	2201      	movs	r2, #1
 8007c5a:	2104      	movs	r1, #4
 8007c5c:	483b      	ldr	r0, [pc, #236]	; (8007d4c <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8007c5e:	f002 f9a1 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007c62:	2200      	movs	r2, #0
 8007c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c68:	4839      	ldr	r0, [pc, #228]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007c6a:	f002 f99b 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8007c6e:	2201      	movs	r2, #1
 8007c70:	2110      	movs	r1, #16
 8007c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c76:	f002 f995 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c80:	4833      	ldr	r0, [pc, #204]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007c82:	f002 f98f 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007c86:	2201      	movs	r2, #1
 8007c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c8c:	4830      	ldr	r0, [pc, #192]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007c8e:	f002 f989 	bl	8009fa4 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8007c92:	2264      	movs	r2, #100	; 0x64
 8007c94:	210a      	movs	r1, #10
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff fdea 	bl	8007870 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ca2:	482b      	ldr	r0, [pc, #172]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007ca4:	f002 f97e 	bl	8009fa4 <HAL_GPIO_WritePin>
			c++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	7f1b      	ldrb	r3, [r3, #28]
 8007cac:	3301      	adds	r3, #1
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	771a      	strb	r2, [r3, #28]
 8007cb4:	e03d      	b.n	8007d32 <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	7f1b      	ldrb	r3, [r3, #28]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fea7 	bl	8007a10 <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8007cc2:	8afb      	ldrh	r3, [r7, #22]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8007ccc:	7d7b      	ldrb	r3, [r7, #21]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff fdef 	bl	80078b4 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2104      	movs	r1, #4
 8007cda:	481c      	ldr	r0, [pc, #112]	; (8007d4c <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8007cdc:	f002 f962 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ce6:	481a      	ldr	r0, [pc, #104]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007ce8:	f002 f95c 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8007cec:	2201      	movs	r2, #1
 8007cee:	2110      	movs	r1, #16
 8007cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cf4:	f002 f956 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cfe:	4814      	ldr	r0, [pc, #80]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007d00:	f002 f950 	bl	8009fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007d04:	2201      	movs	r2, #1
 8007d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d0a:	4811      	ldr	r0, [pc, #68]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007d0c:	f002 f94a 	bl	8009fa4 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8007d10:	2264      	movs	r2, #100	; 0x64
 8007d12:	210a      	movs	r1, #10
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff fdab 	bl	8007870 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d20:	480b      	ldr	r0, [pc, #44]	; (8007d50 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007d22:	f002 f93f 	bl	8009fa4 <HAL_GPIO_WritePin>
			c++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	7f1b      	ldrb	r3, [r3, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	7f1b      	ldrb	r3, [r3, #28]
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	db03      	blt.n	8007d44 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 8007d3c:	8afb      	ldrh	r3, [r7, #22]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	82fb      	strh	r3, [r7, #22]
 8007d42:	e776      	b.n	8007c32 <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8007d44:	bf00      	nop
	}
}
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	48000c00 	.word	0x48000c00
 8007d50:	48000800 	.word	0x48000800

08007d54 <_ZN4GLCD10m_lcdputs1EhhPc>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,char *str)
{
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	72fb      	strb	r3, [r7, #11]
 8007d62:	4613      	mov	r3, r2
 8007d64:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fe50 	bl	8007a10 <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8007d70:	7abb      	ldrb	r3, [r7, #10]
 8007d72:	4619      	mov	r1, r3
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff fecf 	bl	8007b18 <_ZN4GLCD9m_setpageEh>
	//for(i=0;str[i]!=0;i++)
	length =strlen(str);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7f8 fa28 	bl	80001d0 <strlen>
 8007d80:	4603      	mov	r3, r0
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <_ZN4GLCD10m_lcdputs1EhhPc+0x7c>)
 8007d86:	701a      	strb	r2, [r3, #0]
	for(i=0;i< strlen(str);i++)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]
 8007d8c:	7dfc      	ldrb	r4, [r7, #23]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7f8 fa1e 	bl	80001d0 <strlen>
 8007d94:	4603      	mov	r3, r0
 8007d96:	429c      	cmp	r4, r3
 8007d98:	d215      	bcs.n	8007dc6 <_ZN4GLCD10m_lcdputs1EhhPc+0x72>
	{
		a=(*(str+i));
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4413      	add	r3, r2
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8007da4:	8abb      	ldrh	r3, [r7, #20]
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 8007daa:	8abb      	ldrh	r3, [r7, #20]
 8007dac:	3318      	adds	r3, #24
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	3306      	adds	r3, #6
 8007db4:	2208      	movs	r2, #8
 8007db6:	4619      	mov	r1, r3
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff ff31 	bl	8007c20 <_ZN4GLCD9m_lcddataEPht>
	for(i=0;i< strlen(str);i++)
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
 8007dc4:	e7e2      	b.n	8007d8c <_ZN4GLCD10m_lcdputs1EhhPc+0x38>
	}
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd90      	pop	{r4, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	200005d0 	.word	0x200005d0

08007dd4 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b07      	cmp	r3, #7
 8007de4:	d81d      	bhi.n	8007e22 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff fe94 	bl	8007b18 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff fe0c 	bl	8007a10 <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73bb      	strb	r3, [r7, #14]
 8007dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	db0a      	blt.n	8007e1a <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	331d      	adds	r3, #29
 8007e08:	2201      	movs	r2, #1
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff ff07 	bl	8007c20 <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	3301      	adds	r3, #1
 8007e16:	73bb      	strb	r3, [r7, #14]
 8007e18:	e7f0      	b.n	8007dfc <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e7de      	b.n	8007de0 <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	4a04      	ldr	r2, [pc, #16]	; (8007e48 <_ZN10W5500ClassC1Ev+0x1c>)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	0800fca4 	.word	0x0800fca4

08007e4c <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <_ZN10W5500ClassD1Ev+0x1c>)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	0800fca4 	.word	0x0800fca4

08007e6c <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
}
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ffe9 	bl	8007e4c <_ZN10W5500ClassD1Ev>
 8007e7a:	2104      	movs	r1, #4
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f006 ffd8 	bl	800ee32 <_ZdlPvj>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <_Z41__static_initialization_and_destruction_0ii>:
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d107      	bne.n	8007eac <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d102      	bne.n	8007eac <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8007ea6:	4809      	ldr	r0, [pc, #36]	; (8007ecc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007ea8:	f7ff ffc0 	bl	8007e2c <_ZN10W5500ClassC1Ev>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d107      	bne.n	8007ec2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d102      	bne.n	8007ec2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007ebc:	4803      	ldr	r0, [pc, #12]	; (8007ecc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007ebe:	f7ff ffc5 	bl	8007e4c <_ZN10W5500ClassD1Ev>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	200005d4 	.word	0x200005d4

08007ed0 <_GLOBAL__sub_I_w5500>:
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f7ff ffd7 	bl	8007e8c <_Z41__static_initialization_and_destruction_0ii>
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <_GLOBAL__sub_D_w5500>:
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f7ff ffcf 	bl	8007e8c <_Z41__static_initialization_and_destruction_0ii>
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <_ZN9ModbusrtuC1Ev>:
#include "Modbus_types.h"

extern uint16_t temperatureSetOL,temperaturehighSetOL,temperatureLowSetOL;

uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	4a0e      	ldr	r2, [pc, #56]	; (8007f34 <_ZN9ModbusrtuC1Ev+0x44>)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	761a      	strb	r2, [r3, #24]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a0c      	ldr	r2, [pc, #48]	; (8007f38 <_ZN9ModbusrtuC1Ev+0x48>)
 8007f08:	3319      	adds	r3, #25
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f10:	4618      	mov	r0, r3
 8007f12:	f006 ffc5 	bl	800eea0 <memcpy>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <_ZN9ModbusrtuC1Ev+0x4c>)
 8007f1a:	f203 1319 	addw	r3, r3, #281	; 0x119
 8007f1e:	4611      	mov	r1, r2
 8007f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f24:	4618      	mov	r0, r3
 8007f26:	f006 ffbb 	bl	800eea0 <memcpy>
	// TODO Auto-generated constructor stub

}
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0800fcb4 	.word	0x0800fcb4
 8007f38:	0800f800 	.word	0x0800f800
 8007f3c:	0800f900 	.word	0x0800f900

08007f40 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	4a04      	ldr	r2, [pc, #16]	; (8007f5c <_ZN9ModbusrtuD1Ev+0x1c>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	0800fcb4 	.word	0x0800fcb4

08007f60 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
}
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff ffe9 	bl	8007f40 <_ZN9ModbusrtuD1Ev>
 8007f6e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f006 ff5d 	bl	800ee32 <_ZdlPvj>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
	//read_rxint_set out_read_rxint_set;
	switch(Cntid)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	791b      	ldrb	r3, [r3, #4]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	f200 8135 	bhi.w	8008200 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x27c>
 8007f96:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x18>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	0800803d 	.word	0x0800803d
 8007fa4:	080080c7 	.word	0x080080c7
 8007fa8:	08008151 	.word	0x08008151
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	7e1a      	ldrb	r2, [r3, #24]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x03;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	719a      	strb	r2, [r3, #6]
		_u16ReadAddress 	= 0x00;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x04;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	819a      	strh	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	795a      	ldrb	r2, [r3, #5]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	799a      	ldrb	r2, [r3, #6]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	891b      	ldrh	r3, [r3, #8]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	891b      	ldrh	r3, [r3, #8]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadQty & 0xff00)>>8);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	899b      	ldrh	r3, [r3, #12]
 8007ff2:	0a1b      	lsrs	r3, r3, #8
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadQty & 0x00ff);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	899b      	ldrh	r3, [r3, #12]
 8008000:	b2da      	uxtb	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3310      	adds	r3, #16
 800800a:	2206      	movs	r2, #6
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f922 	bl	8008258 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008014:	4603      	mov	r3, r0
 8008016:	461a      	mov	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	89db      	ldrh	r3, [r3, #14]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	89db      	ldrh	r3, [r3, #14]
 800802a:	0a1b      	lsrs	r3, r3, #8
 800802c:	b29b      	uxth	r3, r3
 800802e:	b2da      	uxtb	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	75da      	strb	r2, [r3, #23]

		Cntid=1;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	711a      	strb	r2, [r3, #4]
	break;
 800803a:	e0e8      	b.n	800820e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 1:
		_u8MBSlave 			= mTemperatureSensorId;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7e1a      	ldrb	r2, [r3, #24]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x06;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2206      	movs	r2, #6
 8008048:	719a      	strb	r2, [r3, #6]
		_u16WriteAddress 	= 0x00;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	815a      	strh	r2, [r3, #10]
		u8ModbusRegister[0] = _u8MBSlave;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	795a      	ldrb	r2, [r3, #5]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[1] =  u8MBFunction;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	799a      	ldrb	r2, [r3, #6]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	895b      	ldrh	r3, [r3, #10]
 8008064:	0a1b      	lsrs	r3, r3, #8
 8008066:	b29b      	uxth	r3, r3
 8008068:	b2da      	uxtb	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	895b      	ldrh	r3, [r3, #10]
 8008072:	b2da      	uxtb	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[4] = static_cast<uint8_t>((temperatureSetOL & 0xff00)>>8);
 8008078:	4b6a      	ldr	r3, [pc, #424]	; (8008224 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	0a1b      	lsrs	r3, r3, #8
 800807e:	b29b      	uxth	r3, r3
 8008080:	b2da      	uxtb	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[5] = static_cast<uint8_t>(temperatureSetOL & 0x00ff);
 8008086:	4b67      	ldr	r3, [pc, #412]	; (8008224 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a0>)
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	755a      	strb	r2, [r3, #21]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3310      	adds	r3, #16
 8008094:	2206      	movs	r2, #6
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8dd 	bl	8008258 <_ZN9Modbusrtu11ASCChecksumEPhh>
 800809e:	4603      	mov	r3, r0
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	89db      	ldrh	r3, [r3, #14]
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	89db      	ldrh	r3, [r3, #14]
 80080b4:	0a1b      	lsrs	r3, r3, #8
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	75da      	strb	r2, [r3, #23]
		Cntid=2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	711a      	strb	r2, [r3, #4]
	break;
 80080c4:	e0a3      	b.n	800820e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 2:
			_u8MBSlave 			= mTemperatureSensorId;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	7e1a      	ldrb	r2, [r3, #24]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2206      	movs	r2, #6
 80080d2:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x01;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	795a      	ldrb	r2, [r3, #5]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	799a      	ldrb	r2, [r3, #6]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	895b      	ldrh	r3, [r3, #10]
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	895b      	ldrh	r3, [r3, #10]
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperaturehighSetOL & 0xff00)>>8);
 8008102:	4b49      	ldr	r3, [pc, #292]	; (8008228 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	b2da      	uxtb	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperaturehighSetOL & 0x00ff);
 8008110:	4b45      	ldr	r3, [pc, #276]	; (8008228 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a4>)
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3310      	adds	r3, #16
 800811e:	2206      	movs	r2, #6
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f898 	bl	8008258 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	89db      	ldrh	r3, [r3, #14]
 8008134:	b2da      	uxtb	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	89db      	ldrh	r3, [r3, #14]
 800813e:	0a1b      	lsrs	r3, r3, #8
 8008140:	b29b      	uxth	r3, r3
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	75da      	strb	r2, [r3, #23]
			Cntid=3;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2203      	movs	r2, #3
 800814c:	711a      	strb	r2, [r3, #4]
		break;
 800814e:	e05e      	b.n	800820e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	case 3:
			_u8MBSlave 			= mTemperatureSensorId;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7e1a      	ldrb	r2, [r3, #24]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2206      	movs	r2, #6
 800815c:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x02;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	795a      	ldrb	r2, [r3, #5]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[1] =  u8MBFunction;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	799a      	ldrb	r2, [r3, #6]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	895b      	ldrh	r3, [r3, #10]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	b2da      	uxtb	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	895b      	ldrh	r3, [r3, #10]
 8008186:	b2da      	uxtb	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[4] = static_cast<uint8_t>((temperatureLowSetOL & 0xff00)>>8);
 800818c:	4b27      	ldr	r3, [pc, #156]	; (800822c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	b29b      	uxth	r3, r3
 8008194:	b2da      	uxtb	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[5] = static_cast<uint8_t>(temperatureLowSetOL & 0x00ff);
 800819a:	4b24      	ldr	r3, [pc, #144]	; (800822c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2a8>)
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	755a      	strb	r2, [r3, #21]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3310      	adds	r3, #16
 80081a8:	2206      	movs	r2, #6
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f853 	bl	8008258 <_ZN9Modbusrtu11ASCChecksumEPhh>
 80081b2:	4603      	mov	r3, r0
 80081b4:	461a      	mov	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	89db      	ldrh	r3, [r3, #14]
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	89db      	ldrh	r3, [r3, #14]
 80081c8:	0a1b      	lsrs	r3, r3, #8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	75da      	strb	r2, [r3, #23]
			Cntid=0;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	711a      	strb	r2, [r3, #4]
			if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7e1b      	ldrb	r3, [r3, #24]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d103      	bne.n	80081e8 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x264>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	761a      	strb	r2, [r3, #24]
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
			else{mTemperatureSensorId=1;}
		break;
 80081e6:	e012      	b.n	800820e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7e1b      	ldrb	r3, [r3, #24]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d103      	bne.n	80081f8 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x274>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2203      	movs	r2, #3
 80081f4:	761a      	strb	r2, [r3, #24]
		break;
 80081f6:	e00a      	b.n	800820e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
			else{mTemperatureSensorId=1;}
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	761a      	strb	r2, [r3, #24]
		break;
 80081fe:	e006      	b.n	800820e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x28a>
	default:
		Cntid=0;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	761a      	strb	r2, [r3, #24]
	break;
 800820c:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,sizeof(u8ModbusRegister));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3310      	adds	r3, #16
 8008212:	2208      	movs	r2, #8
 8008214:	4619      	mov	r1, r3
 8008216:	4806      	ldr	r0, [pc, #24]	; (8008230 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2ac>)
 8008218:	f005 fab2 	bl	800d780 <HAL_UART_Transmit_IT>

}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	200000e6 	.word	0x200000e6
 8008228:	200000e8 	.word	0x200000e8
 800822c:	200000ea 	.word	0x200000ea
 8008230:	200002cc 	.word	0x200002cc

08008234 <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
 800823c:	220d      	movs	r2, #13
 800823e:	4904      	ldr	r1, [pc, #16]	; (8008250 <HAL_UART_TxCpltCallback+0x1c>)
 8008240:	4804      	ldr	r0, [pc, #16]	; (8008254 <HAL_UART_TxCpltCallback+0x20>)
 8008242:	f005 fb0b 	bl	800d85c <HAL_UART_Receive_IT>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	200005d8 	.word	0x200005d8
 8008254:	200002cc 	.word	0x200002cc

08008258 <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8008266:	23ff      	movs	r3, #255	; 0xff
 8008268:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 800826a:	23ff      	movs	r3, #255	; 0xff
 800826c:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 8008272:	2300      	movs	r3, #0
 8008274:	75fb      	strb	r3, [r7, #23]
 8008276:	7dfa      	ldrb	r2, [r7, #23]
 8008278:	7d3b      	ldrb	r3, [r7, #20]
 800827a:	429a      	cmp	r2, r3
 800827c:	d217      	bcs.n	80082ae <_ZN9Modbusrtu11ASCChecksumEPhh+0x56>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	60ba      	str	r2, [r7, #8]
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	7dbb      	ldrb	r3, [r7, #22]
 8008288:	4053      	eors	r3, r2
 800828a:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 800828c:	7cfb      	ldrb	r3, [r7, #19]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	7e5a      	ldrb	r2, [r3, #25]
 8008294:	7d7b      	ldrb	r3, [r7, #21]
 8008296:	4053      	eors	r3, r2
 8008298:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 800829a:	7cfb      	ldrb	r3, [r7, #19]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 80082a4:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	3301      	adds	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
 80082ac:	e7e3      	b.n	8008276 <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 80082ae:	7d7b      	ldrb	r3, [r7, #21]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	b21a      	sxth	r2, r3
 80082b4:	7dbb      	ldrb	r3, [r7, #22]
 80082b6:	b21b      	sxth	r3, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b21b      	sxth	r3, r3
 80082bc:	b29b      	uxth	r3, r3
}
 80082be:	4618      	mov	r0, r3
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
	...

080082cc <_ZN14OfflineStorageC1Ev>:
uint8_t checkvar;
uint8_t BlockStatusOffline[40];
extern uint8_t IsCurrentShiftUpdated;
extern uint8_t UpdateStorage;

OfflineStorage::OfflineStorage() {
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	4a04      	ldr	r2, [pc, #16]	; (80082e8 <_ZN14OfflineStorageC1Ev+0x1c>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	0800fcc4 	.word	0x0800fcc4

080082ec <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	4a04      	ldr	r2, [pc, #16]	; (8008308 <_ZN14OfflineStorageD1Ev+0x1c>)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	0800fcc4 	.word	0x0800fcc4

0800830c <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
}
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff ffe9 	bl	80082ec <_ZN14OfflineStorageD1Ev>
 800831a:	2120      	movs	r1, #32
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f006 fd88 	bl	800ee32 <_ZdlPvj>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 800832c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800832e:	b097      	sub	sp, #92	; 0x5c
 8008330:	af0e      	add	r7, sp, #56	; 0x38
 8008332:	61f8      	str	r0, [r7, #28]
	if(UpdateStorage==0){return;}
 8008334:	4b43      	ldr	r3, [pc, #268]	; (8008444 <_ZN14OfflineStorage3runEv+0x118>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 818a 	beq.w	8008652 <_ZN14OfflineStorage3runEv+0x326>
	UpdateStorage=0;
 800833e:	4b41      	ldr	r3, [pc, #260]	; (8008444 <_ZN14OfflineStorage3runEv+0x118>)
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]

	ProductionSet_charFormat[100]={'\0'};
 8008344:	4b40      	ldr	r3, [pc, #256]	; (8008448 <_ZN14OfflineStorage3runEv+0x11c>)
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	sprintf(ProductionSet_charFormat,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',CurrentShift,MAC_Gen_Prod_Input1_Production,
 800834c:	4b3f      	ldr	r3, [pc, #252]	; (800844c <_ZN14OfflineStorage3runEv+0x120>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	469c      	mov	ip, r3
 8008352:	4b3f      	ldr	r3, [pc, #252]	; (8008450 <_ZN14OfflineStorage3runEv+0x124>)
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	4b3e      	ldr	r3, [pc, #248]	; (8008454 <_ZN14OfflineStorage3runEv+0x128>)
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	4619      	mov	r1, r3
 800835e:	4b3e      	ldr	r3, [pc, #248]	; (8008458 <_ZN14OfflineStorage3runEv+0x12c>)
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	4b3d      	ldr	r3, [pc, #244]	; (800845c <_ZN14OfflineStorage3runEv+0x130>)
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	461c      	mov	r4, r3
 800836a:	4b3d      	ldr	r3, [pc, #244]	; (8008460 <_ZN14OfflineStorage3runEv+0x134>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	461d      	mov	r5, r3
 8008370:	4b3c      	ldr	r3, [pc, #240]	; (8008464 <_ZN14OfflineStorage3runEv+0x138>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	461e      	mov	r6, r3
 8008376:	4b3c      	ldr	r3, [pc, #240]	; (8008468 <_ZN14OfflineStorage3runEv+0x13c>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	4b3b      	ldr	r3, [pc, #236]	; (800846c <_ZN14OfflineStorage3runEv+0x140>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	4b3b      	ldr	r3, [pc, #236]	; (8008470 <_ZN14OfflineStorage3runEv+0x144>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	4b3a      	ldr	r3, [pc, #232]	; (8008474 <_ZN14OfflineStorage3runEv+0x148>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <_ZN14OfflineStorage3runEv+0x14c>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	60bb      	str	r3, [r7, #8]
 8008394:	4b39      	ldr	r3, [pc, #228]	; (800847c <_ZN14OfflineStorage3runEv+0x150>)
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	2322      	movs	r3, #34	; 0x22
 800839c:	930d      	str	r3, [sp, #52]	; 0x34
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	930c      	str	r3, [sp, #48]	; 0x30
 80083a2:	237b      	movs	r3, #123	; 0x7b
 80083a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	930a      	str	r3, [sp, #40]	; 0x28
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	9309      	str	r3, [sp, #36]	; 0x24
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	9307      	str	r3, [sp, #28]
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	9306      	str	r3, [sp, #24]
 80083ba:	9605      	str	r6, [sp, #20]
 80083bc:	9504      	str	r5, [sp, #16]
 80083be:	9403      	str	r4, [sp, #12]
 80083c0:	9002      	str	r0, [sp, #8]
 80083c2:	9101      	str	r1, [sp, #4]
 80083c4:	9200      	str	r2, [sp, #0]
 80083c6:	4663      	mov	r3, ip
 80083c8:	2222      	movs	r2, #34	; 0x22
 80083ca:	492d      	ldr	r1, [pc, #180]	; (8008480 <_ZN14OfflineStorage3runEv+0x154>)
 80083cc:	481e      	ldr	r0, [pc, #120]	; (8008448 <_ZN14OfflineStorage3runEv+0x11c>)
 80083ce:	f006 fe6d 	bl	800f0ac <siprintf>
			MAC_Gen_Rej_Input_Production,Dye_Temperature,Connector_Temperature,hour_t,
			min_t,sec_t,date_Rtc,month_Rtc,year_Rtc,Manual_RejectionCount,123,SectorPos,'"');

	//Fix the size
	NoofData = strlen(ProductionSet_charFormat);
 80083d2:	481d      	ldr	r0, [pc, #116]	; (8008448 <_ZN14OfflineStorage3runEv+0x11c>)
 80083d4:	f7f7 fefc 	bl	80001d0 <strlen>
 80083d8:	4603      	mov	r3, r0
 80083da:	b29a      	uxth	r2, r3
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	835a      	strh	r2, [r3, #26]
	memcpy(ProductionSet_uintFormat,ProductionSet_charFormat,NoofData);
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	8b5b      	ldrh	r3, [r3, #26]
 80083e4:	461a      	mov	r2, r3
 80083e6:	4918      	ldr	r1, [pc, #96]	; (8008448 <_ZN14OfflineStorage3runEv+0x11c>)
 80083e8:	4826      	ldr	r0, [pc, #152]	; (8008484 <_ZN14OfflineStorage3runEv+0x158>)
 80083ea:	f006 fd59 	bl	800eea0 <memcpy>

	SectorPos = SectorPos+1;
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <_ZN14OfflineStorage3runEv+0x150>)
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	4b21      	ldr	r3, [pc, #132]	; (800847c <_ZN14OfflineStorage3runEv+0x150>)
 80083f8:	801a      	strh	r2, [r3, #0]

	if((SectorPos % 16)==0)
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <_ZN14OfflineStorage3runEv+0x150>)
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	2b00      	cmp	r3, #0
 8008404:	d156      	bne.n	80084b4 <_ZN14OfflineStorage3runEv+0x188>
	{
		tempBlockcalc = SectorPos/16;
 8008406:	4b1d      	ldr	r3, [pc, #116]	; (800847c <_ZN14OfflineStorage3runEv+0x150>)
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	091b      	lsrs	r3, r3, #4
 800840c:	b29b      	uxth	r3, r3
 800840e:	b2da      	uxtb	r2, r3
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	771a      	strb	r2, [r3, #28]
		BlockStatusOffline[tempBlockcalc-1]	=1;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	7f1b      	ldrb	r3, [r3, #28]
 8008418:	3b01      	subs	r3, #1
 800841a:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <_ZN14OfflineStorage3runEv+0x15c>)
 800841c:	2101      	movs	r1, #1
 800841e:	54d1      	strb	r1, [r2, r3]
		updateInBlockFill=1;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2201      	movs	r2, #1
 8008424:	775a      	strb	r2, [r3, #29]
		if(tempBlockcalc >= MAXNOOFBLOCK)
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	7f1b      	ldrb	r3, [r3, #28]
 800842a:	2b1f      	cmp	r3, #31
 800842c:	d92e      	bls.n	800848c <_ZN14OfflineStorage3runEv+0x160>
		{
			tempBlockcalc=0;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
			BlockStatusOffline[tempBlockcalc]	=2;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	7f1b      	ldrb	r3, [r3, #28]
 8008438:	461a      	mov	r2, r3
 800843a:	4b13      	ldr	r3, [pc, #76]	; (8008488 <_ZN14OfflineStorage3runEv+0x15c>)
 800843c:	2102      	movs	r1, #2
 800843e:	5499      	strb	r1, [r3, r2]
 8008440:	e02a      	b.n	8008498 <_ZN14OfflineStorage3runEv+0x16c>
 8008442:	bf00      	nop
 8008444:	200005c6 	.word	0x200005c6
 8008448:	2000073c 	.word	0x2000073c
 800844c:	200007d7 	.word	0x200007d7
 8008450:	200005ba 	.word	0x200005ba
 8008454:	200005be 	.word	0x200005be
 8008458:	200001ee 	.word	0x200001ee
 800845c:	200001f0 	.word	0x200001f0
 8008460:	200007d0 	.word	0x200007d0
 8008464:	200007d1 	.word	0x200007d1
 8008468:	200007d2 	.word	0x200007d2
 800846c:	200007d4 	.word	0x200007d4
 8008470:	200007d5 	.word	0x200007d5
 8008474:	200007d6 	.word	0x200007d6
 8008478:	200005c2 	.word	0x200005c2
 800847c:	200007a6 	.word	0x200007a6
 8008480:	0800fa00 	.word	0x0800fa00
 8008484:	200006d8 	.word	0x200006d8
 8008488:	200007a8 	.word	0x200007a8
		}
		else
		{
			BlockStatusOffline[tempBlockcalc]	=2;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	7f1b      	ldrb	r3, [r3, #28]
 8008490:	461a      	mov	r2, r3
 8008492:	4b72      	ldr	r3, [pc, #456]	; (800865c <_ZN14OfflineStorage3runEv+0x330>)
 8008494:	2102      	movs	r1, #2
 8008496:	5499      	strb	r1, [r3, r2]
		}
		if(SectorPos >= 512){SectorPos=0;}
 8008498:	4b71      	ldr	r3, [pc, #452]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a0:	d302      	bcc.n	80084a8 <_ZN14OfflineStorage3runEv+0x17c>
 80084a2:	4b6f      	ldr	r3, [pc, #444]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	801a      	strh	r2, [r3, #0]
		SectorPos = SectorPos+1;
 80084a8:	4b6d      	ldr	r3, [pc, #436]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	4b6b      	ldr	r3, [pc, #428]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80084b2:	801a      	strh	r2, [r3, #0]
	}


	W25qxx_EraseSector(SectorPos-1);
 80084b4:	4b6a      	ldr	r3, [pc, #424]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fa fb12 	bl	8002ae4 <W25qxx_EraseSector>
	W25qxx_WriteSector(ProductionSet_uintFormat,(SectorPos-1),0,NoofData);
 80084c0:	4b67      	ldr	r3, [pc, #412]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	4619      	mov	r1, r3
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	8b5b      	ldrh	r3, [r3, #26]
 80084cc:	2200      	movs	r2, #0
 80084ce:	4865      	ldr	r0, [pc, #404]	; (8008664 <_ZN14OfflineStorage3runEv+0x338>)
 80084d0:	f7fa fce4 	bl	8002e9c <W25qxx_WriteSector>
	MAC_Gen_Prod_Input1_Production=0;
 80084d4:	4b64      	ldr	r3, [pc, #400]	; (8008668 <_ZN14OfflineStorage3runEv+0x33c>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production=0;
 80084da:	4b64      	ldr	r3, [pc, #400]	; (800866c <_ZN14OfflineStorage3runEv+0x340>)
 80084dc:	2200      	movs	r2, #0
 80084de:	801a      	strh	r2, [r3, #0]

	MAC_Gen_Prod_Input1_Production_K1 = MAC_Gen_Prod_Input1_Production;
 80084e0:	4b61      	ldr	r3, [pc, #388]	; (8008668 <_ZN14OfflineStorage3runEv+0x33c>)
 80084e2:	881a      	ldrh	r2, [r3, #0]
 80084e4:	4b62      	ldr	r3, [pc, #392]	; (8008670 <_ZN14OfflineStorage3runEv+0x344>)
 80084e6:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1   = MAC_Gen_Rej_Input_Production;
 80084e8:	4b60      	ldr	r3, [pc, #384]	; (800866c <_ZN14OfflineStorage3runEv+0x340>)
 80084ea:	881a      	ldrh	r2, [r3, #0]
 80084ec:	4b61      	ldr	r3, [pc, #388]	; (8008674 <_ZN14OfflineStorage3runEv+0x348>)
 80084ee:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount_K1          = Manual_RejectionCount;
 80084f0:	4b61      	ldr	r3, [pc, #388]	; (8008678 <_ZN14OfflineStorage3runEv+0x34c>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	4b61      	ldr	r3, [pc, #388]	; (800867c <_ZN14OfflineStorage3runEv+0x350>)
 80084f8:	801a      	strh	r2, [r3, #0]
	IsCurrentShiftUpdated=0;
 80084fa:	4b61      	ldr	r3, [pc, #388]	; (8008680 <_ZN14OfflineStorage3runEv+0x354>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	701a      	strb	r2, [r3, #0]

	FlashMemProductiondata[0] = (uint8_t)MAC_Gen_Prod_Input1_Production&0x00ff;
 8008500:	4b59      	ldr	r3, [pc, #356]	; (8008668 <_ZN14OfflineStorage3runEv+0x33c>)
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	711a      	strb	r2, [r3, #4]
	FlashMemProductiondata[1] = (uint8_t)(MAC_Gen_Prod_Input1_Production>>8)&0x00ff;
 800850a:	4b57      	ldr	r3, [pc, #348]	; (8008668 <_ZN14OfflineStorage3runEv+0x33c>)
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	0a1b      	lsrs	r3, r3, #8
 8008510:	b29b      	uxth	r3, r3
 8008512:	b2da      	uxtb	r2, r3
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	715a      	strb	r2, [r3, #5]
	FlashMemProductiondata[2] = (uint8_t)MAC_Gen_Prod_Input1_Production_K1&0x00ff;
 8008518:	4b55      	ldr	r3, [pc, #340]	; (8008670 <_ZN14OfflineStorage3runEv+0x344>)
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b2da      	uxtb	r2, r3
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	719a      	strb	r2, [r3, #6]
	FlashMemProductiondata[3] = (uint8_t)(MAC_Gen_Prod_Input1_Production_K1>>8)&0x00ff;
 8008522:	4b53      	ldr	r3, [pc, #332]	; (8008670 <_ZN14OfflineStorage3runEv+0x344>)
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	b29b      	uxth	r3, r3
 800852a:	b2da      	uxtb	r2, r3
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	71da      	strb	r2, [r3, #7]
	FlashMemProductiondata[4] = (uint8_t)MAC_Gen_Rej_Input_Production&0x00ff;
 8008530:	4b4e      	ldr	r3, [pc, #312]	; (800866c <_ZN14OfflineStorage3runEv+0x340>)
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	721a      	strb	r2, [r3, #8]
	FlashMemProductiondata[5] = (uint8_t)(MAC_Gen_Rej_Input_Production>>8)&0x00ff;
 800853a:	4b4c      	ldr	r3, [pc, #304]	; (800866c <_ZN14OfflineStorage3runEv+0x340>)
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	b2da      	uxtb	r2, r3
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	725a      	strb	r2, [r3, #9]
	FlashMemProductiondata[6] = (uint8_t)MAC_Gen_Rej_Input_Production_K1&0x00ff;
 8008548:	4b4a      	ldr	r3, [pc, #296]	; (8008674 <_ZN14OfflineStorage3runEv+0x348>)
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	729a      	strb	r2, [r3, #10]
	FlashMemProductiondata[7] = (uint8_t)(MAC_Gen_Rej_Input_Production_K1>>8)&0x00ff;
 8008552:	4b48      	ldr	r3, [pc, #288]	; (8008674 <_ZN14OfflineStorage3runEv+0x348>)
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	b29b      	uxth	r3, r3
 800855a:	b2da      	uxtb	r2, r3
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	72da      	strb	r2, [r3, #11]
	FlashMemProductiondata[8] = (uint8_t)Production_Zeit&0x00ff;
 8008560:	4b48      	ldr	r3, [pc, #288]	; (8008684 <_ZN14OfflineStorage3runEv+0x358>)
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b2da      	uxtb	r2, r3
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	731a      	strb	r2, [r3, #12]
	FlashMemProductiondata[9] = (uint8_t)(Production_Zeit>>8)&0x00ff;
 800856a:	4b46      	ldr	r3, [pc, #280]	; (8008684 <_ZN14OfflineStorage3runEv+0x358>)
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	b29b      	uxth	r3, r3
 8008572:	b2da      	uxtb	r2, r3
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	735a      	strb	r2, [r3, #13]
	FlashMemProductiondata[10] = (uint8_t)Rejection_Zeit&0x00ff;
 8008578:	4b43      	ldr	r3, [pc, #268]	; (8008688 <_ZN14OfflineStorage3runEv+0x35c>)
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b2da      	uxtb	r2, r3
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	739a      	strb	r2, [r3, #14]
	FlashMemProductiondata[11] = (uint8_t)(Rejection_Zeit>>8)&0x00ff;
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <_ZN14OfflineStorage3runEv+0x35c>)
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	b2da      	uxtb	r2, r3
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	73da      	strb	r2, [r3, #15]
	FlashMemProductiondata[12] = (hour_t);
 8008590:	4b3e      	ldr	r3, [pc, #248]	; (800868c <_ZN14OfflineStorage3runEv+0x360>)
 8008592:	781a      	ldrb	r2, [r3, #0]
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	741a      	strb	r2, [r3, #16]
	FlashMemProductiondata[13] = (min_t);
 8008598:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <_ZN14OfflineStorage3runEv+0x364>)
 800859a:	781a      	ldrb	r2, [r3, #0]
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	745a      	strb	r2, [r3, #17]
	FlashMemProductiondata[14] = (sec_t);
 80085a0:	4b3c      	ldr	r3, [pc, #240]	; (8008694 <_ZN14OfflineStorage3runEv+0x368>)
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	749a      	strb	r2, [r3, #18]
	FlashMemProductiondata[15] = date_Rtc;
 80085a8:	4b3b      	ldr	r3, [pc, #236]	; (8008698 <_ZN14OfflineStorage3runEv+0x36c>)
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	74da      	strb	r2, [r3, #19]
	FlashMemProductiondata[16] = month_Rtc;
 80085b0:	4b3a      	ldr	r3, [pc, #232]	; (800869c <_ZN14OfflineStorage3runEv+0x370>)
 80085b2:	781a      	ldrb	r2, [r3, #0]
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	751a      	strb	r2, [r3, #20]
	FlashMemProductiondata[17] = year_Rtc;
 80085b8:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <_ZN14OfflineStorage3runEv+0x374>)
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	755a      	strb	r2, [r3, #21]
	FlashMemProductiondata[18] = (uint8_t)SectorPos&0x00ff;
 80085c0:	4b27      	ldr	r3, [pc, #156]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	759a      	strb	r2, [r3, #22]
	FlashMemProductiondata[19] = (uint8_t)(SectorPos>>8)&0x00ff;
 80085ca:	4b25      	ldr	r3, [pc, #148]	; (8008660 <_ZN14OfflineStorage3runEv+0x334>)
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	0a1b      	lsrs	r3, r3, #8
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	75da      	strb	r2, [r3, #23]
	FlashMemProductiondata[20] = (uint8_t)Manual_RejectionCount&0x00ff;
 80085d8:	4b27      	ldr	r3, [pc, #156]	; (8008678 <_ZN14OfflineStorage3runEv+0x34c>)
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	761a      	strb	r2, [r3, #24]
	FlashMemProductiondata[21] = (uint8_t)(Manual_RejectionCount>>8)&0x00ff;
 80085e0:	4b25      	ldr	r3, [pc, #148]	; (8008678 <_ZN14OfflineStorage3runEv+0x34c>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	121b      	asrs	r3, r3, #8
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	765a      	strb	r2, [r3, #25]
	FlashMemProductiondata[22] = (uint8_t)Manual_RejectionCount_K1&0x00ff;
 80085ec:	4b23      	ldr	r3, [pc, #140]	; (800867c <_ZN14OfflineStorage3runEv+0x350>)
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	769a      	strb	r2, [r3, #26]
	FlashMemProductiondata[23] = (uint8_t)(Manual_RejectionCount_K1>>8)&0x00ff;
 80085f6:	4b21      	ldr	r3, [pc, #132]	; (800867c <_ZN14OfflineStorage3runEv+0x350>)
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	76da      	strb	r2, [r3, #27]
	FlashMemProductiondata[24] = CurrentShift;
 8008604:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <_ZN14OfflineStorage3runEv+0x378>)
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	771a      	strb	r2, [r3, #28]
	FlashMemProductiondata[25] = CurrentShift_K1;
 800860c:	4b26      	ldr	r3, [pc, #152]	; (80086a8 <_ZN14OfflineStorage3runEv+0x37c>)
 800860e:	781a      	ldrb	r2, [r3, #0]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	775a      	strb	r2, [r3, #29]
	W25qxx_EraseSector(600);
 8008614:	f44f 7016 	mov.w	r0, #600	; 0x258
 8008618:	f7fa fa64 	bl	8002ae4 <W25qxx_EraseSector>
	W25qxx_WriteSector(FlashMemProductiondata,600,0,26);
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	1d18      	adds	r0, r3, #4
 8008620:	231a      	movs	r3, #26
 8008622:	2200      	movs	r2, #0
 8008624:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008628:	f7fa fc38 	bl	8002e9c <W25qxx_WriteSector>

	if(updateInBlockFill)
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	7f5b      	ldrb	r3, [r3, #29]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00f      	beq.n	8008654 <_ZN14OfflineStorage3runEv+0x328>
	{
		updateInBlockFill=0;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	2200      	movs	r2, #0
 8008638:	775a      	strb	r2, [r3, #29]
		W25qxx_EraseSector(601);
 800863a:	f240 2059 	movw	r0, #601	; 0x259
 800863e:	f7fa fa51 	bl	8002ae4 <W25qxx_EraseSector>
		W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 8008642:	2328      	movs	r3, #40	; 0x28
 8008644:	2200      	movs	r2, #0
 8008646:	f240 2159 	movw	r1, #601	; 0x259
 800864a:	4804      	ldr	r0, [pc, #16]	; (800865c <_ZN14OfflineStorage3runEv+0x330>)
 800864c:	f7fa fc26 	bl	8002e9c <W25qxx_WriteSector>
 8008650:	e000      	b.n	8008654 <_ZN14OfflineStorage3runEv+0x328>
	if(UpdateStorage==0){return;}
 8008652:	bf00      	nop
	}

}
 8008654:	3724      	adds	r7, #36	; 0x24
 8008656:	46bd      	mov	sp, r7
 8008658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865a:	bf00      	nop
 800865c:	200007a8 	.word	0x200007a8
 8008660:	200007a6 	.word	0x200007a6
 8008664:	200006d8 	.word	0x200006d8
 8008668:	200005ba 	.word	0x200005ba
 800866c:	200005be 	.word	0x200005be
 8008670:	200007a0 	.word	0x200007a0
 8008674:	200007a2 	.word	0x200007a2
 8008678:	200005c2 	.word	0x200005c2
 800867c:	200007a4 	.word	0x200007a4
 8008680:	200005c5 	.word	0x200005c5
 8008684:	200005bc 	.word	0x200005bc
 8008688:	200005c0 	.word	0x200005c0
 800868c:	200007d0 	.word	0x200007d0
 8008690:	200007d1 	.word	0x200007d1
 8008694:	200007d2 	.word	0x200007d2
 8008698:	200007d4 	.word	0x200007d4
 800869c:	200007d5 	.word	0x200007d5
 80086a0:	200007d6 	.word	0x200007d6
 80086a4:	200007d7 	.word	0x200007d7
 80086a8:	200005c4 	.word	0x200005c4

080086ac <_ZN14OfflineStorage19ReadOfflinedataInitEv>:

void OfflineStorage::ReadOfflinedataInit()
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(FlashMemProductiondata,600,0,26);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	1d18      	adds	r0, r3, #4
 80086b8:	231a      	movs	r3, #26
 80086ba:	2200      	movs	r2, #0
 80086bc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80086c0:	f7fa fccc 	bl	800305c <W25qxx_ReadSector>
	MAC_Gen_Prod_Input1_Production 		= 0;//(FlashMemProductiondata[1]<<8|FlashMemProductiondata[0]);
 80086c4:	4b39      	ldr	r3, [pc, #228]	; (80087ac <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x100>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Prod_Input1_Production_K1 	= (FlashMemProductiondata[3]<<8|FlashMemProductiondata[2]);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	79db      	ldrb	r3, [r3, #7]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b21a      	sxth	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	799b      	ldrb	r3, [r3, #6]
 80086d6:	b21b      	sxth	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	b21b      	sxth	r3, r3
 80086dc:	b29a      	uxth	r2, r3
 80086de:	4b34      	ldr	r3, [pc, #208]	; (80087b0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x104>)
 80086e0:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production 		= 0;//(FlashMemProductiondata[5]<<8|FlashMemProductiondata[4]);
 80086e2:	4b34      	ldr	r3, [pc, #208]	; (80087b4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x108>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	801a      	strh	r2, [r3, #0]
	MAC_Gen_Rej_Input_Production_K1 	= (FlashMemProductiondata[7]<<8|FlashMemProductiondata[6]);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	7adb      	ldrb	r3, [r3, #11]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	b21a      	sxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7a9b      	ldrb	r3, [r3, #10]
 80086f4:	b21b      	sxth	r3, r3
 80086f6:	4313      	orrs	r3, r2
 80086f8:	b21b      	sxth	r3, r3
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x10c>)
 80086fe:	801a      	strh	r2, [r3, #0]
	Production_Zeit 					= (FlashMemProductiondata[9]<<8|FlashMemProductiondata[8]);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7b5b      	ldrb	r3, [r3, #13]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	b21a      	sxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	7b1b      	ldrb	r3, [r3, #12]
 800870c:	b21b      	sxth	r3, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	b21b      	sxth	r3, r3
 8008712:	b29a      	uxth	r2, r3
 8008714:	4b29      	ldr	r3, [pc, #164]	; (80087bc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x110>)
 8008716:	801a      	strh	r2, [r3, #0]
	Rejection_Zeit 						= (FlashMemProductiondata[11]<<8|FlashMemProductiondata[10]);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7bdb      	ldrb	r3, [r3, #15]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	b21a      	sxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7b9b      	ldrb	r3, [r3, #14]
 8008724:	b21b      	sxth	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b21b      	sxth	r3, r3
 800872a:	b29a      	uxth	r2, r3
 800872c:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x114>)
 800872e:	801a      	strh	r2, [r3, #0]
	hour_t								= FlashMemProductiondata[12];
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7c1a      	ldrb	r2, [r3, #16]
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x118>)
 8008736:	701a      	strb	r2, [r3, #0]
	min_t								= FlashMemProductiondata[13];
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7c5a      	ldrb	r2, [r3, #17]
 800873c:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x11c>)
 800873e:	701a      	strb	r2, [r3, #0]
	sec_t								= FlashMemProductiondata[14];
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	7c9a      	ldrb	r2, [r3, #18]
 8008744:	4b21      	ldr	r3, [pc, #132]	; (80087cc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x120>)
 8008746:	701a      	strb	r2, [r3, #0]
	date_Rtc							= FlashMemProductiondata[15];
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7cda      	ldrb	r2, [r3, #19]
 800874c:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x124>)
 800874e:	701a      	strb	r2, [r3, #0]
	month_Rtc							= FlashMemProductiondata[16];
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7d1a      	ldrb	r2, [r3, #20]
 8008754:	4b1f      	ldr	r3, [pc, #124]	; (80087d4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x128>)
 8008756:	701a      	strb	r2, [r3, #0]
	year_Rtc							= FlashMemProductiondata[17];
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7d5a      	ldrb	r2, [r3, #21]
 800875c:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x12c>)
 800875e:	701a      	strb	r2, [r3, #0]
	SectorPos 							= (FlashMemProductiondata[19]<<8|FlashMemProductiondata[18]);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7ddb      	ldrb	r3, [r3, #23]
 8008764:	021b      	lsls	r3, r3, #8
 8008766:	b21a      	sxth	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7d9b      	ldrb	r3, [r3, #22]
 800876c:	b21b      	sxth	r3, r3
 800876e:	4313      	orrs	r3, r2
 8008770:	b21b      	sxth	r3, r3
 8008772:	b29a      	uxth	r2, r3
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x130>)
 8008776:	801a      	strh	r2, [r3, #0]
	Manual_RejectionCount				= 0;(FlashMemProductiondata[21]<<8|FlashMemProductiondata[20]);
 8008778:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x134>)
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
	Manual_RejectionCount_K1	        = 0;(FlashMemProductiondata[23]<<8|FlashMemProductiondata[22]);
 800877e:	4b19      	ldr	r3, [pc, #100]	; (80087e4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x138>)
 8008780:	2200      	movs	r2, #0
 8008782:	801a      	strh	r2, [r3, #0]
	CurrentShift						= FlashMemProductiondata[24];
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7f1a      	ldrb	r2, [r3, #28]
 8008788:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x13c>)
 800878a:	701a      	strb	r2, [r3, #0]
	CurrentShift_K1						= FlashMemProductiondata[25];
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7f5a      	ldrb	r2, [r3, #29]
 8008790:	4b16      	ldr	r3, [pc, #88]	; (80087ec <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x140>)
 8008792:	701a      	strb	r2, [r3, #0]

	W25qxx_ReadSector(BlockStatusOffline,601,0,40);
 8008794:	2328      	movs	r3, #40	; 0x28
 8008796:	2200      	movs	r2, #0
 8008798:	f240 2159 	movw	r1, #601	; 0x259
 800879c:	4814      	ldr	r0, [pc, #80]	; (80087f0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x144>)
 800879e:	f7fa fc5d 	bl	800305c <W25qxx_ReadSector>

	//if(SectorPos)

//	W25qxx_EraseBlock(23);
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200005ba 	.word	0x200005ba
 80087b0:	200007a0 	.word	0x200007a0
 80087b4:	200005be 	.word	0x200005be
 80087b8:	200007a2 	.word	0x200007a2
 80087bc:	200005bc 	.word	0x200005bc
 80087c0:	200005c0 	.word	0x200005c0
 80087c4:	200007d0 	.word	0x200007d0
 80087c8:	200007d1 	.word	0x200007d1
 80087cc:	200007d2 	.word	0x200007d2
 80087d0:	200007d4 	.word	0x200007d4
 80087d4:	200007d5 	.word	0x200007d5
 80087d8:	200007d6 	.word	0x200007d6
 80087dc:	200007a6 	.word	0x200007a6
 80087e0:	200005c2 	.word	0x200005c2
 80087e4:	200007a4 	.word	0x200007a4
 80087e8:	200007d7 	.word	0x200007d7
 80087ec:	200005c4 	.word	0x200005c4
 80087f0:	200007a8 	.word	0x200007a8

080087f4 <_ZN5SHIFTC1Ev>:

extern uint8_t SW_Hour,SW_Minute;
extern uint8_t Updatetimeinfo;
extern uint8_t SW_Date,SW_Month,SW_Year;

SHIFT::SHIFT() {
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	4a04      	ldr	r2, [pc, #16]	; (8008810 <_ZN5SHIFTC1Ev+0x1c>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	0800fcd4 	.word	0x0800fcd4

08008814 <_ZN5SHIFTD1Ev>:

SHIFT::~SHIFT() {
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	4a04      	ldr	r2, [pc, #16]	; (8008830 <_ZN5SHIFTD1Ev+0x1c>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	0800fcd4 	.word	0x0800fcd4

08008834 <_ZN5SHIFTD0Ev>:
SHIFT::~SHIFT() {
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
}
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ffe9 	bl	8008814 <_ZN5SHIFTD1Ev>
 8008842:	2118      	movs	r1, #24
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f006 faf4 	bl	800ee32 <_ZdlPvj>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <_ZN5SHIFT16shiftCalculationEv>:

void SHIFT::shiftCalculation(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	rtc_get_time(&hour_t,&min_t,&sec_t);
 800885c:	4a61      	ldr	r2, [pc, #388]	; (80089e4 <_ZN5SHIFT16shiftCalculationEv+0x190>)
 800885e:	4962      	ldr	r1, [pc, #392]	; (80089e8 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 8008860:	4862      	ldr	r0, [pc, #392]	; (80089ec <_ZN5SHIFT16shiftCalculationEv+0x198>)
 8008862:	f7f9 fe8f 	bl	8002584 <rtc_get_time>
	rtc_get_date(&Wdate_Rtc,&date_Rtc,&month_Rtc,&year_Rtc);
 8008866:	4b62      	ldr	r3, [pc, #392]	; (80089f0 <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 8008868:	4a62      	ldr	r2, [pc, #392]	; (80089f4 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 800886a:	4963      	ldr	r1, [pc, #396]	; (80089f8 <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 800886c:	4863      	ldr	r0, [pc, #396]	; (80089fc <_ZN5SHIFT16shiftCalculationEv+0x1a8>)
 800886e:	f7f9 feed 	bl	800264c <rtc_get_date>

	if(Updatetimeinfo)
 8008872:	4b63      	ldr	r3, [pc, #396]	; (8008a00 <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d051      	beq.n	800891e <_ZN5SHIFT16shiftCalculationEv+0xca>
	{
		Updatetimeinfo=0;
 800887a:	4b61      	ldr	r3, [pc, #388]	; (8008a00 <_ZN5SHIFT16shiftCalculationEv+0x1ac>)
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
		locTimeTotal    =  (((hour_t)*(60))+(min_t));
 8008880:	4b5a      	ldr	r3, [pc, #360]	; (80089ec <_ZN5SHIFT16shiftCalculationEv+0x198>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	b29b      	uxth	r3, r3
 8008886:	461a      	mov	r2, r3
 8008888:	0112      	lsls	r2, r2, #4
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	b29a      	uxth	r2, r3
 8008890:	4b55      	ldr	r3, [pc, #340]	; (80089e8 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	4413      	add	r3, r2
 8008898:	b29a      	uxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	829a      	strh	r2, [r3, #20]
		onlineTimeTotal =  (((SW_Hour)*(60))+(SW_Minute));
 800889e:	4b59      	ldr	r3, [pc, #356]	; (8008a04 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	0112      	lsls	r2, r2, #4
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	4b56      	ldr	r3, [pc, #344]	; (8008a08 <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	82da      	strh	r2, [r3, #22]
		if((locTimeTotal <= (onlineTimeTotal-3)) || (locTimeTotal >= (onlineTimeTotal+3)))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8adb      	ldrh	r3, [r3, #22]
 80088c0:	3b02      	subs	r3, #2
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	8a92      	ldrh	r2, [r2, #20]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dc06      	bgt.n	80088d8 <_ZN5SHIFT16shiftCalculationEv+0x84>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8adb      	ldrh	r3, [r3, #22]
 80088ce:	3302      	adds	r3, #2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	8a92      	ldrh	r2, [r2, #20]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	da07      	bge.n	80088e8 <_ZN5SHIFT16shiftCalculationEv+0x94>
		{
			  rtc_set_time(SW_Hour,SW_Minute,30);
 80088d8:	4b4a      	ldr	r3, [pc, #296]	; (8008a04 <_ZN5SHIFT16shiftCalculationEv+0x1b0>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	4a4a      	ldr	r2, [pc, #296]	; (8008a08 <_ZN5SHIFT16shiftCalculationEv+0x1b4>)
 80088de:	7811      	ldrb	r1, [r2, #0]
 80088e0:	221e      	movs	r2, #30
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7f9 fe82 	bl	80025ec <rtc_set_time>
		}
		if((date_Rtc != SW_Date) || (month_Rtc != SW_Month) || (year_Rtc != SW_Year))
 80088e8:	4b43      	ldr	r3, [pc, #268]	; (80089f8 <_ZN5SHIFT16shiftCalculationEv+0x1a4>)
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	4b47      	ldr	r3, [pc, #284]	; (8008a0c <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d10b      	bne.n	800890c <_ZN5SHIFT16shiftCalculationEv+0xb8>
 80088f4:	4b3f      	ldr	r3, [pc, #252]	; (80089f4 <_ZN5SHIFT16shiftCalculationEv+0x1a0>)
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	4b45      	ldr	r3, [pc, #276]	; (8008a10 <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d105      	bne.n	800890c <_ZN5SHIFT16shiftCalculationEv+0xb8>
 8008900:	4b3b      	ldr	r3, [pc, #236]	; (80089f0 <_ZN5SHIFT16shiftCalculationEv+0x19c>)
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	4b43      	ldr	r3, [pc, #268]	; (8008a14 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d008      	beq.n	800891e <_ZN5SHIFT16shiftCalculationEv+0xca>
		{
			rtc_set_date(2,SW_Date,SW_Month,SW_Year);
 800890c:	4b3f      	ldr	r3, [pc, #252]	; (8008a0c <_ZN5SHIFT16shiftCalculationEv+0x1b8>)
 800890e:	7819      	ldrb	r1, [r3, #0]
 8008910:	4b3f      	ldr	r3, [pc, #252]	; (8008a10 <_ZN5SHIFT16shiftCalculationEv+0x1bc>)
 8008912:	781a      	ldrb	r2, [r3, #0]
 8008914:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <_ZN5SHIFT16shiftCalculationEv+0x1c0>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2002      	movs	r0, #2
 800891a:	f7f9 fed1 	bl	80026c0 <rtc_set_date>
		}
	}
	TotalMinutesvar = (((hour_t)*(60))+(min_t));
 800891e:	4b33      	ldr	r3, [pc, #204]	; (80089ec <_ZN5SHIFT16shiftCalculationEv+0x198>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	0112      	lsls	r2, r2, #4
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	b29a      	uxth	r2, r3
 800892e:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <_ZN5SHIFT16shiftCalculationEv+0x194>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	4413      	add	r3, r2
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	809a      	strh	r2, [r3, #4]
	Shift1_OnTime = (((8)*(60))+(31));	  //495
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008942:	80da      	strh	r2, [r3, #6]
	Shift1_OffTime = (((16)*(60))+(30)); //974
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f240 32de 	movw	r2, #990	; 0x3de
 800894a:	811a      	strh	r2, [r3, #8]

	Shift2_OnTime = (((16)*(60))+(31));	 //975
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f240 32df 	movw	r2, #991	; 0x3df
 8008952:	815a      	strh	r2, [r3, #10]
	shift2_buffer_time_1 = (((23)*(60))+(59)); // 1439
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f240 529f 	movw	r2, #1439	; 0x59f
 800895a:	819a      	strh	r2, [r3, #12]
	Shift2_OffTime = (((0)*(60))+(30));	 //14
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	221e      	movs	r2, #30
 8008960:	81da      	strh	r2, [r3, #14]

	Shift3_OnTime = (((0)*(60))+(31));	//15
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	221f      	movs	r2, #31
 8008966:	821a      	strh	r2, [r3, #16]
	Shift3_OffTime = (((8)*(60))+(30));	 //494
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800896e:	825a      	strh	r2, [r3, #18]

	if((TotalMinutesvar >=  Shift1_OnTime)&&(TotalMinutesvar <= Shift1_OffTime))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	889a      	ldrh	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	88db      	ldrh	r3, [r3, #6]
 8008978:	429a      	cmp	r2, r3
 800897a:	d309      	bcc.n	8008990 <_ZN5SHIFT16shiftCalculationEv+0x13c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	889a      	ldrh	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	891b      	ldrh	r3, [r3, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	d803      	bhi.n	8008990 <_ZN5SHIFT16shiftCalculationEv+0x13c>
	{
	   CurrentShift=1;
 8008988:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 800898a:	2201      	movs	r2, #1
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e025      	b.n	80089dc <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if(((TotalMinutesvar >=  Shift2_OnTime)&&(TotalMinutesvar <= shift2_buffer_time_1))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	889a      	ldrh	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	895b      	ldrh	r3, [r3, #10]
 8008998:	429a      	cmp	r2, r3
 800899a:	d305      	bcc.n	80089a8 <_ZN5SHIFT16shiftCalculationEv+0x154>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	889a      	ldrh	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	899b      	ldrh	r3, [r3, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d905      	bls.n	80089b4 <_ZN5SHIFT16shiftCalculationEv+0x160>
				||((TotalMinutesvar>= 0)&&(TotalMinutesvar<=Shift2_OffTime)))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	889a      	ldrh	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	89db      	ldrh	r3, [r3, #14]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d803      	bhi.n	80089bc <_ZN5SHIFT16shiftCalculationEv+0x168>
	{//Included one brace to solve warning?
		CurrentShift=2;
 80089b4:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 80089b6:	2202      	movs	r2, #2
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	e00f      	b.n	80089dc <_ZN5SHIFT16shiftCalculationEv+0x188>
	}
	else if((TotalMinutesvar >=  Shift3_OnTime)&&(TotalMinutesvar <= Shift3_OffTime))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	889a      	ldrh	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	8a1b      	ldrh	r3, [r3, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d309      	bcc.n	80089dc <_ZN5SHIFT16shiftCalculationEv+0x188>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	889a      	ldrh	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8a5b      	ldrh	r3, [r3, #18]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d803      	bhi.n	80089dc <_ZN5SHIFT16shiftCalculationEv+0x188>
	{
		CurrentShift=3;
 80089d4:	4b10      	ldr	r3, [pc, #64]	; (8008a18 <_ZN5SHIFT16shiftCalculationEv+0x1c4>)
 80089d6:	2203      	movs	r2, #3
 80089d8:	701a      	strb	r2, [r3, #0]
	else
	{
	/*Error return*/
	}
	//UpdateShiftInfo =1;
}
 80089da:	e7ff      	b.n	80089dc <_ZN5SHIFT16shiftCalculationEv+0x188>
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200007d2 	.word	0x200007d2
 80089e8:	200007d1 	.word	0x200007d1
 80089ec:	200007d0 	.word	0x200007d0
 80089f0:	200007d6 	.word	0x200007d6
 80089f4:	200007d5 	.word	0x200007d5
 80089f8:	200007d4 	.word	0x200007d4
 80089fc:	200007d3 	.word	0x200007d3
 8008a00:	200000de 	.word	0x200000de
 8008a04:	200000e1 	.word	0x200000e1
 8008a08:	200000e2 	.word	0x200000e2
 8008a0c:	200000e3 	.word	0x200000e3
 8008a10:	200000e4 	.word	0x200000e4
 8008a14:	200000e5 	.word	0x200000e5
 8008a18:	200007d7 	.word	0x200007d7

08008a1c <_ZN5SHIFT3runEv>:

void SHIFT::run()
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	shiftCalculation();
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff15 	bl	8008854 <_ZN5SHIFT16shiftCalculationEv>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <_ZN7ESP8266C1Ev>:
extern uint8_t ProductionSet_uintFormat[200];
uint8_t ProductionSet_uintFormat_MEM[850]={0};
uint8_t len=137;


ESP8266::ESP8266() {
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	4a4c      	ldr	r2, [pc, #304]	; (8008b70 <_ZN7ESP8266C1Ev+0x13c>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	494b      	ldr	r1, [pc, #300]	; (8008b74 <_ZN7ESP8266C1Ev+0x140>)
 8008a46:	f103 020e 	add.w	r2, r3, #14
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	cb03      	ldmia	r3!, {r0, r1}
 8008a4e:	6010      	str	r0, [r2, #0]
 8008a50:	6051      	str	r1, [r2, #4]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	7213      	strb	r3, [r2, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a47      	ldr	r2, [pc, #284]	; (8008b78 <_ZN7ESP8266C1Ev+0x144>)
 8008a5a:	3317      	adds	r3, #23
 8008a5c:	6810      	ldr	r0, [r2, #0]
 8008a5e:	6018      	str	r0, [r3, #0]
 8008a60:	8891      	ldrh	r1, [r2, #4]
 8008a62:	7992      	ldrb	r2, [r2, #6]
 8008a64:	8099      	strh	r1, [r3, #4]
 8008a66:	719a      	strb	r2, [r3, #6]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4944      	ldr	r1, [pc, #272]	; (8008b7c <_ZN7ESP8266C1Ev+0x148>)
 8008a6c:	f103 021e 	add.w	r2, r3, #30
 8008a70:	6808      	ldr	r0, [r1, #0]
 8008a72:	6010      	str	r0, [r2, #0]
 8008a74:	7909      	ldrb	r1, [r1, #4]
 8008a76:	7111      	strb	r1, [r2, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8008a7e:	687d      	ldr	r5, [r7, #4]
 8008a80:	4b3f      	ldr	r3, [pc, #252]	; (8008b80 <_ZN7ESP8266C1Ev+0x14c>)
 8008a82:	f105 0424 	add.w	r4, r5, #36	; 0x24
 8008a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a88:	c407      	stmia	r4!, {r0, r1, r2}
 8008a8a:	8023      	strh	r3, [r4, #0]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a3b      	ldr	r2, [pc, #236]	; (8008b84 <_ZN7ESP8266C1Ev+0x150>)
 8008a96:	4614      	mov	r4, r2
 8008a98:	f103 0c33 	add.w	ip, r3, #51	; 0x33
 8008a9c:	f104 0e20 	add.w	lr, r4, #32
 8008aa0:	4665      	mov	r5, ip
 8008aa2:	4626      	mov	r6, r4
 8008aa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008aa6:	6028      	str	r0, [r5, #0]
 8008aa8:	6069      	str	r1, [r5, #4]
 8008aaa:	60aa      	str	r2, [r5, #8]
 8008aac:	60eb      	str	r3, [r5, #12]
 8008aae:	3410      	adds	r4, #16
 8008ab0:	f10c 0c10 	add.w	ip, ip, #16
 8008ab4:	4574      	cmp	r4, lr
 8008ab6:	d1f3      	bne.n	8008aa0 <_ZN7ESP8266C1Ev+0x6c>
 8008ab8:	4665      	mov	r5, ip
 8008aba:	4623      	mov	r3, r4
 8008abc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008abe:	6028      	str	r0, [r5, #0]
 8008ac0:	6069      	str	r1, [r5, #4]
 8008ac2:	60aa      	str	r2, [r5, #8]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	732b      	strb	r3, [r5, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a2f      	ldr	r2, [pc, #188]	; (8008b88 <_ZN7ESP8266C1Ev+0x154>)
 8008acc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8008adc:	687d      	ldr	r5, [r7, #4]
 8008ade:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <_ZN7ESP8266C1Ev+0x158>)
 8008ae0:	f105 046d 	add.w	r4, r5, #109	; 0x6d
 8008ae4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ae6:	6020      	str	r0, [r4, #0]
 8008ae8:	6061      	str	r1, [r4, #4]
 8008aea:	60a2      	str	r2, [r4, #8]
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	2300      	movs	r3, #0
 8008af2:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a25      	ldr	r2, [pc, #148]	; (8008b90 <_ZN7ESP8266C1Ev+0x15c>)
 8008afa:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8008afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a21      	ldr	r2, [pc, #132]	; (8008b94 <_ZN7ESP8266C1Ev+0x160>)
 8008b0e:	4614      	mov	r4, r2
 8008b10:	f103 0c89 	add.w	ip, r3, #137	; 0x89
 8008b14:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8008b18:	4665      	mov	r5, ip
 8008b1a:	4626      	mov	r6, r4
 8008b1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008b1e:	6028      	str	r0, [r5, #0]
 8008b20:	6069      	str	r1, [r5, #4]
 8008b22:	60aa      	str	r2, [r5, #8]
 8008b24:	60eb      	str	r3, [r5, #12]
 8008b26:	3410      	adds	r4, #16
 8008b28:	f10c 0c10 	add.w	ip, ip, #16
 8008b2c:	4574      	cmp	r4, lr
 8008b2e:	d1f3      	bne.n	8008b18 <_ZN7ESP8266C1Ev+0xe4>
 8008b30:	4663      	mov	r3, ip
 8008b32:	4622      	mov	r2, r4
 8008b34:	6810      	ldr	r0, [r2, #0]
 8008b36:	6018      	str	r0, [r3, #0]
 8008b38:	8891      	ldrh	r1, [r2, #4]
 8008b3a:	7992      	ldrb	r2, [r2, #6]
 8008b3c:	8099      	strh	r1, [r3, #4]
 8008b3e:	719a      	strb	r2, [r3, #6]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	33d4      	adds	r3, #212	; 0xd4
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	611a      	str	r2, [r3, #16]
 8008b50:	687d      	ldr	r5, [r7, #4]
 8008b52:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <_ZN7ESP8266C1Ev+0x164>)
 8008b54:	f505 7428 	add.w	r4, r5, #672	; 0x2a0
 8008b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b5a:	c407      	stmia	r4!, {r0, r1, r2}
 8008b5c:	8023      	strh	r3, [r4, #0]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f885 32ae 	strb.w	r3, [r5, #686]	; 0x2ae
	// TODO Auto-generated constructor stub

}
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	0800fce4 	.word	0x0800fce4
 8008b74:	0800fa4c 	.word	0x0800fa4c
 8008b78:	0800fa58 	.word	0x0800fa58
 8008b7c:	0800fa60 	.word	0x0800fa60
 8008b80:	0800fa68 	.word	0x0800fa68
 8008b84:	0800fa78 	.word	0x0800fa78
 8008b88:	0800faa8 	.word	0x0800faa8
 8008b8c:	0800fab8 	.word	0x0800fab8
 8008b90:	0800fac8 	.word	0x0800fac8
 8008b94:	0800fad8 	.word	0x0800fad8
 8008b98:	0800fb10 	.word	0x0800fb10

08008b9c <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	4a04      	ldr	r2, [pc, #16]	; (8008bb8 <_ZN7ESP8266D1Ev+0x1c>)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	0800fce4 	.word	0x0800fce4

08008bbc <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
}
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff ffe9 	bl	8008b9c <_ZN7ESP8266D1Ev>
 8008bca:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f006 f92f 	bl	800ee32 <_ZdlPvj>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b082      	sub	sp, #8
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
	RefreshWifiData();
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fc28 	bl	800943c <_ZN7ESP826615RefreshWifiDataEv>
	Send_WifiCmd();
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f805 	bl	8008bfc <_ZN7ESP826612Send_WifiCmdEv>

}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	switch(wifi_command)
 8008c04:	4bc0      	ldr	r3, [pc, #768]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	3b05      	subs	r3, #5
 8008c0a:	2b73      	cmp	r3, #115	; 0x73
 8008c0c:	f200 83d4 	bhi.w	80093b8 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008de9 	.word	0x08008de9
 8008c1c:	080093b9 	.word	0x080093b9
 8008c20:	080093b9 	.word	0x080093b9
 8008c24:	080093b9 	.word	0x080093b9
 8008c28:	080093b9 	.word	0x080093b9
 8008c2c:	08008e0d 	.word	0x08008e0d
 8008c30:	08008e37 	.word	0x08008e37
 8008c34:	08008e65 	.word	0x08008e65
 8008c38:	08008e89 	.word	0x08008e89
 8008c3c:	08008eb7 	.word	0x08008eb7
 8008c40:	08008ee1 	.word	0x08008ee1
 8008c44:	080093b9 	.word	0x080093b9
 8008c48:	080093b9 	.word	0x080093b9
 8008c4c:	080093b9 	.word	0x080093b9
 8008c50:	080093b9 	.word	0x080093b9
 8008c54:	08008f25 	.word	0x08008f25
 8008c58:	08008f61 	.word	0x08008f61
 8008c5c:	080093b9 	.word	0x080093b9
 8008c60:	080093b9 	.word	0x080093b9
 8008c64:	080093b9 	.word	0x080093b9
 8008c68:	080093b9 	.word	0x080093b9
 8008c6c:	080093b9 	.word	0x080093b9
 8008c70:	080093b9 	.word	0x080093b9
 8008c74:	080093b9 	.word	0x080093b9
 8008c78:	080093b9 	.word	0x080093b9
 8008c7c:	08008fa5 	.word	0x08008fa5
 8008c80:	080093b9 	.word	0x080093b9
 8008c84:	080093b9 	.word	0x080093b9
 8008c88:	080093b9 	.word	0x080093b9
 8008c8c:	080093b9 	.word	0x080093b9
 8008c90:	080093b9 	.word	0x080093b9
 8008c94:	080093b9 	.word	0x080093b9
 8008c98:	080093b9 	.word	0x080093b9
 8008c9c:	080093b9 	.word	0x080093b9
 8008ca0:	080093b9 	.word	0x080093b9
 8008ca4:	080093b9 	.word	0x080093b9
 8008ca8:	08008fd5 	.word	0x08008fd5
 8008cac:	080093b9 	.word	0x080093b9
 8008cb0:	080093b9 	.word	0x080093b9
 8008cb4:	080093b9 	.word	0x080093b9
 8008cb8:	080093b9 	.word	0x080093b9
 8008cbc:	080093b9 	.word	0x080093b9
 8008cc0:	080093b9 	.word	0x080093b9
 8008cc4:	080093b9 	.word	0x080093b9
 8008cc8:	08009003 	.word	0x08009003
 8008ccc:	08009031 	.word	0x08009031
 8008cd0:	0800905b 	.word	0x0800905b
 8008cd4:	080093b9 	.word	0x080093b9
 8008cd8:	080093b9 	.word	0x080093b9
 8008cdc:	080093b9 	.word	0x080093b9
 8008ce0:	080093b9 	.word	0x080093b9
 8008ce4:	080093b9 	.word	0x080093b9
 8008ce8:	080093b9 	.word	0x080093b9
 8008cec:	080093b9 	.word	0x080093b9
 8008cf0:	080093b9 	.word	0x080093b9
 8008cf4:	08009089 	.word	0x08009089
 8008cf8:	080090b3 	.word	0x080090b3
 8008cfc:	080093b9 	.word	0x080093b9
 8008d00:	080093b9 	.word	0x080093b9
 8008d04:	080093b9 	.word	0x080093b9
 8008d08:	080093b9 	.word	0x080093b9
 8008d0c:	080093b9 	.word	0x080093b9
 8008d10:	080093b9 	.word	0x080093b9
 8008d14:	080093b9 	.word	0x080093b9
 8008d18:	080093b9 	.word	0x080093b9
 8008d1c:	080090e1 	.word	0x080090e1
 8008d20:	0800910b 	.word	0x0800910b
 8008d24:	080093b9 	.word	0x080093b9
 8008d28:	080093b9 	.word	0x080093b9
 8008d2c:	080093b9 	.word	0x080093b9
 8008d30:	080093b9 	.word	0x080093b9
 8008d34:	080093b9 	.word	0x080093b9
 8008d38:	080093b9 	.word	0x080093b9
 8008d3c:	080093b9 	.word	0x080093b9
 8008d40:	080093b9 	.word	0x080093b9
 8008d44:	08009139 	.word	0x08009139
 8008d48:	08009163 	.word	0x08009163
 8008d4c:	080093b9 	.word	0x080093b9
 8008d50:	080093b9 	.word	0x080093b9
 8008d54:	080093b9 	.word	0x080093b9
 8008d58:	080093b9 	.word	0x080093b9
 8008d5c:	080093b9 	.word	0x080093b9
 8008d60:	080093b9 	.word	0x080093b9
 8008d64:	080093b9 	.word	0x080093b9
 8008d68:	080093b9 	.word	0x080093b9
 8008d6c:	080091ad 	.word	0x080091ad
 8008d70:	08009229 	.word	0x08009229
 8008d74:	080093b9 	.word	0x080093b9
 8008d78:	080093b9 	.word	0x080093b9
 8008d7c:	080093b9 	.word	0x080093b9
 8008d80:	080093b9 	.word	0x080093b9
 8008d84:	080093b9 	.word	0x080093b9
 8008d88:	080093b9 	.word	0x080093b9
 8008d8c:	080093b9 	.word	0x080093b9
 8008d90:	080093b9 	.word	0x080093b9
 8008d94:	08009257 	.word	0x08009257
 8008d98:	080092bb 	.word	0x080092bb
 8008d9c:	08009341 	.word	0x08009341
 8008da0:	0800936d 	.word	0x0800936d
 8008da4:	080092d9 	.word	0x080092d9
 8008da8:	08009315 	.word	0x08009315
 8008dac:	080093b9 	.word	0x080093b9
 8008db0:	080093b9 	.word	0x080093b9
 8008db4:	080093b9 	.word	0x080093b9
 8008db8:	080093b9 	.word	0x080093b9
 8008dbc:	08009399 	.word	0x08009399
 8008dc0:	080093b9 	.word	0x080093b9
 8008dc4:	080093b9 	.word	0x080093b9
 8008dc8:	080093b9 	.word	0x080093b9
 8008dcc:	080093b9 	.word	0x080093b9
 8008dd0:	080093b9 	.word	0x080093b9
 8008dd4:	080093b9 	.word	0x080093b9
 8008dd8:	080093b9 	.word	0x080093b9
 8008ddc:	080093b9 	.word	0x080093b9
 8008de0:	080093b9 	.word	0x080093b9
 8008de4:	080093c1 	.word	0x080093c1
	{
	case 5:
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 8008de8:	2201      	movs	r2, #1
 8008dea:	2104      	movs	r1, #4
 8008dec:	4847      	ldr	r0, [pc, #284]	; (8008f0c <_ZN7ESP826612Send_WifiCmdEv+0x310>)
 8008dee:	f001 f8d9 	bl	8009fa4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8008df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008df6:	f000 fd8f 	bl	8009918 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2104      	movs	r1, #4
 8008dfe:	4843      	ldr	r0, [pc, #268]	; (8008f0c <_ZN7ESP826612Send_WifiCmdEv+0x310>)
 8008e00:	f001 f8d0 	bl	8009fa4 <HAL_GPIO_WritePin>
		wifi_command=13;
 8008e04:	4b40      	ldr	r3, [pc, #256]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008e06:	220d      	movs	r2, #13
 8008e08:	701a      	strb	r2, [r3, #0]

	break;
 8008e0a:	e2f6      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 10://reset
	NoOfdata_byte=7;
 8008e0c:	4b40      	ldr	r3, [pc, #256]	; (8008f10 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8008e0e:	2207      	movs	r2, #7
 8008e10:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 8008e12:	4b3d      	ldr	r3, [pc, #244]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008e14:	220d      	movs	r2, #13
 8008e16:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8008e18:	4b3e      	ldr	r3, [pc, #248]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8008e1e:	4b3e      	ldr	r3, [pc, #248]	; (8008f18 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	330e      	adds	r3, #14
 8008e28:	4a39      	ldr	r2, [pc, #228]	; (8008f10 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8008e2a:	8812      	ldrh	r2, [r2, #0]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	483b      	ldr	r0, [pc, #236]	; (8008f1c <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8008e30:	f004 fca6 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 8008e34:	e2e1      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 11:
	if(++Timerdelay >6)
 8008e36:	4b37      	ldr	r3, [pc, #220]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	4b35      	ldr	r3, [pc, #212]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b06      	cmp	r3, #6
 8008e48:	bf8c      	ite	hi
 8008e4a:	2301      	movhi	r3, #1
 8008e4c:	2300      	movls	r3, #0
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 82b7 	beq.w	80093c4 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>
	{
		Timerdelay=0;
 8008e56:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 8008e5c:	4b2a      	ldr	r3, [pc, #168]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008e5e:	220e      	movs	r2, #14
 8008e60:	701a      	strb	r2, [r3, #0]
	}
	break;
 8008e62:	e2af      	b.n	80093c4 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>
	case 12:
	NoOfdata_byte=6;
 8008e64:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8008e66:	2206      	movs	r2, #6
 8008e68:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 8008e6a:	4b27      	ldr	r3, [pc, #156]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8008e70:	4b28      	ldr	r3, [pc, #160]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3317      	adds	r3, #23
 8008e7a:	4a25      	ldr	r2, [pc, #148]	; (8008f10 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8008e7c:	8812      	ldrh	r2, [r2, #0]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4826      	ldr	r0, [pc, #152]	; (8008f1c <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8008e82:	f004 fc7d 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 8008e86:	e2b8      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 13:
	if(++Timerdelay >12)
 8008e88:	4b22      	ldr	r3, [pc, #136]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	4b1f      	ldr	r3, [pc, #124]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b0c      	cmp	r3, #12
 8008e9a:	bf8c      	ite	hi
 8008e9c:	2301      	movhi	r3, #1
 8008e9e:	2300      	movls	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8290 	beq.w	80093c8 <_ZN7ESP826612Send_WifiCmdEv+0x7cc>
	{
		Timerdelay=0;
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 8008eae:	4b16      	ldr	r3, [pc, #88]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008eb0:	2214      	movs	r2, #20
 8008eb2:	701a      	strb	r2, [r3, #0]
	}
	break;
 8008eb4:	e288      	b.n	80093c8 <_ZN7ESP826612Send_WifiCmdEv+0x7cc>
	case 14:
	NoOfdata_byte=4;
 8008eb6:	4b16      	ldr	r3, [pc, #88]	; (8008f10 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8008eb8:	2204      	movs	r2, #4
 8008eba:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 8008ebc:	4b18      	ldr	r3, [pc, #96]	; (8008f20 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 8008ec2:	4b11      	ldr	r3, [pc, #68]	; (8008f08 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8008ec4:	2214      	movs	r2, #20
 8008ec6:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8008ec8:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	331e      	adds	r3, #30
 8008ed2:	4a0f      	ldr	r2, [pc, #60]	; (8008f10 <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8008ed4:	8812      	ldrh	r2, [r2, #0]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4810      	ldr	r0, [pc, #64]	; (8008f1c <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8008eda:	f004 fc51 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 8008ede:	e28c      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 15:
	if(++Timerdelay >2)
 8008ee0:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008eea:	701a      	strb	r2, [r3, #0]
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	bf8c      	ite	hi
 8008ef4:	2301      	movhi	r3, #1
 8008ef6:	2300      	movls	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8266 	beq.w	80093cc <_ZN7ESP826612Send_WifiCmdEv+0x7d0>
	{
		Timerdelay=0;
 8008f00:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
	}
	break;
 8008f06:	e261      	b.n	80093cc <_ZN7ESP826612Send_WifiCmdEv+0x7d0>
 8008f08:	200007d9 	.word	0x200007d9
 8008f0c:	48000400 	.word	0x48000400
 8008f10:	200009a4 	.word	0x200009a4
 8008f14:	200009a6 	.word	0x200009a6
 8008f18:	200009a0 	.word	0x200009a0
 8008f1c:	20000248 	.word	0x20000248
 8008f20:	200009a1 	.word	0x200009a1
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 8008f24:	4b9a      	ldr	r3, [pc, #616]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 8008f26:	220d      	movs	r2, #13
 8008f28:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 8008f2a:	4b9a      	ldr	r3, [pc, #616]	; (8009194 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8008f30:	4b99      	ldr	r3, [pc, #612]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8008f36:	4b99      	ldr	r3, [pc, #612]	; (800919c <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3324      	adds	r3, #36	; 0x24
 8008f40:	4a93      	ldr	r2, [pc, #588]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 8008f42:	8812      	ldrh	r2, [r2, #0]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4896      	ldr	r0, [pc, #600]	; (80091a0 <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 8008f48:	f004 fc1a 	bl	800d780 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 8008f4c:	4b95      	ldr	r3, [pc, #596]	; (80091a4 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	4b93      	ldr	r3, [pc, #588]	; (80091a4 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 8008f56:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 8008f58:	4b93      	ldr	r3, [pc, #588]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8008f5a:	2215      	movs	r2, #21
 8008f5c:	701a      	strb	r2, [r3, #0]

	break;
 8008f5e:	e24c      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >5)
 8008f60:	4b8d      	ldr	r3, [pc, #564]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	3301      	adds	r3, #1
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	4b8b      	ldr	r3, [pc, #556]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	4b8a      	ldr	r3, [pc, #552]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b05      	cmp	r3, #5
 8008f72:	bf8c      	ite	hi
 8008f74:	2301      	movhi	r3, #1
 8008f76:	2300      	movls	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8228 	beq.w	80093d0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>
	{
		Timerdelay=0;
 8008f80:	4b85      	ldr	r3, [pc, #532]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 8008f86:	4b87      	ldr	r3, [pc, #540]	; (80091a4 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	d106      	bne.n	8008f9c <_ZN7ESP826612Send_WifiCmdEv+0x3a0>
		{
			wifi_command=5;	 //Hardware reset
 8008f8e:	4b86      	ldr	r3, [pc, #536]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8008f90:	2205      	movs	r2, #5
 8008f92:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 8008f94:	4b83      	ldr	r3, [pc, #524]	; (80091a4 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 8008f9a:	e219      	b.n	80093d0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>
			wifi_command=10;
 8008f9c:	4b82      	ldr	r3, [pc, #520]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8008f9e:	220a      	movs	r2, #10
 8008fa0:	701a      	strb	r2, [r3, #0]
	break;
 8008fa2:	e215      	b.n	80093d0 <_ZN7ESP826612Send_WifiCmdEv+0x7d4>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	NoOfdata_byte=45;//41;//32;
 8008fa4:	4b7a      	ldr	r3, [pc, #488]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 8008fa6:	222d      	movs	r2, #45	; 0x2d
 8008fa8:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=2;
 8008faa:	4b7a      	ldr	r3, [pc, #488]	; (8009194 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8008fac:	2202      	movs	r2, #2
 8008fae:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 8008fb0:	4b7d      	ldr	r3, [pc, #500]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8008fb2:	2229      	movs	r2, #41	; 0x29
 8008fb4:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8008fb6:	4b78      	ldr	r3, [pc, #480]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8008fbc:	4b77      	ldr	r3, [pc, #476]	; (800919c <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePsw,NoOfdata_byte);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3333      	adds	r3, #51	; 0x33
 8008fc6:	4a72      	ldr	r2, [pc, #456]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 8008fc8:	8812      	ldrh	r2, [r2, #0]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4874      	ldr	r0, [pc, #464]	; (80091a0 <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 8008fce:	f004 fbd7 	bl	800d780 <HAL_UART_Transmit_IT>
	break;		   //add retry
 8008fd2:	e212      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 41:	   //resend if o replay
	if(++Timerdelay >30)
 8008fd4:	4b70      	ldr	r3, [pc, #448]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	4b6e      	ldr	r3, [pc, #440]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	4b6d      	ldr	r3, [pc, #436]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b1e      	cmp	r3, #30
 8008fe6:	bf8c      	ite	hi
 8008fe8:	2301      	movhi	r3, #1
 8008fea:	2300      	movls	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 81f0 	beq.w	80093d4 <_ZN7ESP826612Send_WifiCmdEv+0x7d8>
	{
		Timerdelay=0;
 8008ff4:	4b68      	ldr	r3, [pc, #416]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 8008ffa:	4b6b      	ldr	r3, [pc, #428]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8008ffc:	220a      	movs	r2, #10
 8008ffe:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009000:	e1e8      	b.n	80093d4 <_ZN7ESP826612Send_WifiCmdEv+0x7d8>
	case 49:
	if(++Timerdelay >8)
 8009002:	4b65      	ldr	r3, [pc, #404]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b63      	ldr	r3, [pc, #396]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	4b62      	ldr	r3, [pc, #392]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b08      	cmp	r3, #8
 8009014:	bf8c      	ite	hi
 8009016:	2301      	movhi	r3, #1
 8009018:	2300      	movls	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 81db 	beq.w	80093d8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>
	{
		Timerdelay=0;
 8009022:	4b5d      	ldr	r3, [pc, #372]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8009028:	4b5f      	ldr	r3, [pc, #380]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 800902a:	2232      	movs	r2, #50	; 0x32
 800902c:	701a      	strb	r2, [r3, #0]
	}
	break;
 800902e:	e1d3      	b.n	80093d8 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 8009030:	4b57      	ldr	r3, [pc, #348]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 8009032:	220b      	movs	r2, #11
 8009034:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 8009036:	4b5c      	ldr	r3, [pc, #368]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009038:	2233      	movs	r2, #51	; 0x33
 800903a:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 800903c:	4b55      	ldr	r3, [pc, #340]	; (8009194 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 800903e:	2203      	movs	r2, #3
 8009040:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009042:	4b55      	ldr	r3, [pc, #340]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009044:	2200      	movs	r2, #0
 8009046:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3360      	adds	r3, #96	; 0x60
 800904c:	4a50      	ldr	r2, [pc, #320]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 800904e:	8812      	ldrh	r2, [r2, #0]
 8009050:	4619      	mov	r1, r3
 8009052:	4853      	ldr	r0, [pc, #332]	; (80091a0 <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 8009054:	f004 fb94 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 8009058:	e1cf      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 51:
	if(++Timerdelay >15)
 800905a:	4b4f      	ldr	r3, [pc, #316]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	3301      	adds	r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	4b4d      	ldr	r3, [pc, #308]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	4b4c      	ldr	r3, [pc, #304]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b0f      	cmp	r3, #15
 800906c:	bf8c      	ite	hi
 800906e:	2301      	movhi	r3, #1
 8009070:	2300      	movls	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 81b1 	beq.w	80093dc <_ZN7ESP826612Send_WifiCmdEv+0x7e0>
	{
		Timerdelay=0;
 800907a:	4b47      	ldr	r3, [pc, #284]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 8009080:	4b49      	ldr	r3, [pc, #292]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009082:	220a      	movs	r2, #10
 8009084:	701a      	strb	r2, [r3, #0]
	}

	break;
 8009086:	e1a9      	b.n	80093dc <_ZN7ESP826612Send_WifiCmdEv+0x7e0>
	case 60:
		NoOfdata_byte=11;
 8009088:	4b41      	ldr	r3, [pc, #260]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 800908a:	220b      	movs	r2, #11
 800908c:	801a      	strh	r2, [r3, #0]
		wifi_command=61;
 800908e:	4b46      	ldr	r3, [pc, #280]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009090:	223d      	movs	r2, #61	; 0x3d
 8009092:	701a      	strb	r2, [r3, #0]
		Rxseqdecoder=10;
 8009094:	4b3f      	ldr	r3, [pc, #252]	; (8009194 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009096:	220a      	movs	r2, #10
 8009098:	701a      	strb	r2, [r3, #0]
		Timerdelay=0;
 800909a:	4b3f      	ldr	r3, [pc, #252]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,CMDATCifsrRead,NoOfdata_byte);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	337c      	adds	r3, #124	; 0x7c
 80090a4:	4a3a      	ldr	r2, [pc, #232]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 80090a6:	8812      	ldrh	r2, [r2, #0]
 80090a8:	4619      	mov	r1, r3
 80090aa:	483d      	ldr	r0, [pc, #244]	; (80091a0 <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 80090ac:	f004 fb68 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 80090b0:	e1a3      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 61:
		if(++Timerdelay >15)
 80090b2:	4b39      	ldr	r3, [pc, #228]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	4b37      	ldr	r3, [pc, #220]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	4b36      	ldr	r3, [pc, #216]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	bf8c      	ite	hi
 80090c6:	2301      	movhi	r3, #1
 80090c8:	2300      	movls	r3, #0
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8187 	beq.w	80093e0 <_ZN7ESP826612Send_WifiCmdEv+0x7e4>
		{
			Timerdelay=0;
 80090d2:	4b31      	ldr	r3, [pc, #196]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
			wifi_command=10;
 80090d8:	4b33      	ldr	r3, [pc, #204]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 80090da:	220a      	movs	r2, #10
 80090dc:	701a      	strb	r2, [r3, #0]
		}
	break;
 80090de:	e17f      	b.n	80093e0 <_ZN7ESP826612Send_WifiCmdEv+0x7e4>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 80090e0:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 80090e2:	220d      	movs	r2, #13
 80090e4:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 80090e6:	4b30      	ldr	r3, [pc, #192]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 80090e8:	2247      	movs	r2, #71	; 0x47
 80090ea:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 80090ec:	4b29      	ldr	r3, [pc, #164]	; (8009194 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80090ee:	2204      	movs	r2, #4
 80090f0:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80090f2:	4b29      	ldr	r3, [pc, #164]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	336d      	adds	r3, #109	; 0x6d
 80090fc:	4a24      	ldr	r2, [pc, #144]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 80090fe:	8812      	ldrh	r2, [r2, #0]
 8009100:	4619      	mov	r1, r3
 8009102:	4827      	ldr	r0, [pc, #156]	; (80091a0 <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 8009104:	f004 fb3c 	bl	800d780 <HAL_UART_Transmit_IT>
	break;	  //2sec
 8009108:	e177      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 71:
	if(++Timerdelay >15)
 800910a:	4b23      	ldr	r3, [pc, #140]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	3301      	adds	r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	4b21      	ldr	r3, [pc, #132]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	4b20      	ldr	r3, [pc, #128]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b0f      	cmp	r3, #15
 800911c:	bf8c      	ite	hi
 800911e:	2301      	movhi	r3, #1
 8009120:	2300      	movls	r3, #0
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 815d 	beq.w	80093e4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>
	{
		Timerdelay=0;
 800912a:	4b1b      	ldr	r3, [pc, #108]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800912c:	2200      	movs	r2, #0
 800912e:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 8009130:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009132:	220a      	movs	r2, #10
 8009134:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009136:	e155      	b.n	80093e4 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>
	case 80:
	NoOfdata_byte=55;//41;//41;
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 800913a:	2237      	movs	r2, #55	; 0x37
 800913c:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 800913e:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009140:	2251      	movs	r2, #81	; 0x51
 8009142:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 8009144:	4b13      	ldr	r3, [pc, #76]	; (8009194 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009146:	2205      	movs	r2, #5
 8009148:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800914a:	4b13      	ldr	r3, [pc, #76]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3389      	adds	r3, #137	; 0x89
 8009154:	4a0e      	ldr	r2, [pc, #56]	; (8009190 <_ZN7ESP826612Send_WifiCmdEv+0x594>)
 8009156:	8812      	ldrh	r2, [r2, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	4811      	ldr	r0, [pc, #68]	; (80091a0 <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 800915c:	f004 fb10 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 8009160:	e14b      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 81:					//5sec
	if(++Timerdelay >20)
 8009162:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	b2da      	uxtb	r2, r3
 800916a:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b14      	cmp	r3, #20
 8009174:	bf8c      	ite	hi
 8009176:	2301      	movhi	r3, #1
 8009178:	2300      	movls	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 8133 	beq.w	80093e8 <_ZN7ESP826612Send_WifiCmdEv+0x7ec>
	{
		Timerdelay=0;
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8009188:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 800918a:	220a      	movs	r2, #10
 800918c:	701a      	strb	r2, [r3, #0]
	}
	break;
 800918e:	e12b      	b.n	80093e8 <_ZN7ESP826612Send_WifiCmdEv+0x7ec>
 8009190:	200009a4 	.word	0x200009a4
 8009194:	200009a1 	.word	0x200009a1
 8009198:	200009a6 	.word	0x200009a6
 800919c:	200009a0 	.word	0x200009a0
 80091a0:	20000248 	.word	0x20000248
 80091a4:	200009a2 	.word	0x200009a2
 80091a8:	200007d9 	.word	0x200007d9
	case 90:   //CIPSEND

	ContentLength = 811;//106
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f240 322b 	movw	r2, #811	; 0x32b
 80091b2:	819a      	strh	r2, [r3, #12]
	Dyn_data_calc = len+(ContentLength);
 80091b4:	4b93      	ldr	r3, [pc, #588]	; (8009404 <_ZN7ESP826612Send_WifiCmdEv+0x808>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	899b      	ldrh	r3, [r3, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	4b91      	ldr	r3, [pc, #580]	; (8009408 <_ZN7ESP826612Send_WifiCmdEv+0x80c>)
 80091c4:	801a      	strh	r2, [r3, #0]
	Framecheck=0;
 80091c6:	4b91      	ldr	r3, [pc, #580]	; (800940c <_ZN7ESP826612Send_WifiCmdEv+0x810>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= 16;
 80091cc:	4b90      	ldr	r3, [pc, #576]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 80091ce:	2210      	movs	r2, #16
 80091d0:	801a      	strh	r2, [r3, #0]
	sprintf(SendData_charFormat,"AT+CIPSEND=%d\r\n",Dyn_data_calc);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	33d4      	adds	r3, #212	; 0xd4
 80091d6:	4a8c      	ldr	r2, [pc, #560]	; (8009408 <_ZN7ESP826612Send_WifiCmdEv+0x80c>)
 80091d8:	8812      	ldrh	r2, [r2, #0]
 80091da:	498e      	ldr	r1, [pc, #568]	; (8009414 <_ZN7ESP826612Send_WifiCmdEv+0x818>)
 80091dc:	4618      	mov	r0, r3
 80091de:	f005 ff65 	bl	800f0ac <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	33d4      	adds	r3, #212	; 0xd4
 80091ec:	4a88      	ldr	r2, [pc, #544]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 80091ee:	8812      	ldrh	r2, [r2, #0]
 80091f0:	4619      	mov	r1, r3
 80091f2:	f005 fe55 	bl	800eea0 <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	33c0      	adds	r3, #192	; 0xc0
 80091fa:	4a85      	ldr	r2, [pc, #532]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 80091fc:	8812      	ldrh	r2, [r2, #0]
 80091fe:	4619      	mov	r1, r3
 8009200:	4885      	ldr	r0, [pc, #532]	; (8009418 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 8009202:	f004 fabd 	bl	800d780 <HAL_UART_Transmit_IT>
	wifi_command=91;
 8009206:	4b85      	ldr	r3, [pc, #532]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 8009208:	225b      	movs	r2, #91	; 0x5b
 800920a:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 800920c:	4b84      	ldr	r3, [pc, #528]	; (8009420 <_ZN7ESP826612Send_WifiCmdEv+0x824>)
 800920e:	2206      	movs	r2, #6
 8009210:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009212:	4b84      	ldr	r3, [pc, #528]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8009218:	4b7d      	ldr	r3, [pc, #500]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	4982      	ldr	r1, [pc, #520]	; (8009428 <_ZN7ESP826612Send_WifiCmdEv+0x82c>)
 8009220:	487d      	ldr	r0, [pc, #500]	; (8009418 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 8009222:	f004 faad 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 8009226:	e0e8      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 91:
	if(++Timerdelay >15)
 8009228:	4b7e      	ldr	r3, [pc, #504]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b7c      	ldr	r3, [pc, #496]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	4b7b      	ldr	r3, [pc, #492]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b0f      	cmp	r3, #15
 800923a:	bf8c      	ite	hi
 800923c:	2301      	movhi	r3, #1
 800923e:	2300      	movls	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80d2 	beq.w	80093ec <_ZN7ESP826612Send_WifiCmdEv+0x7f0>
	{
		Timerdelay=0;
 8009248:	4b76      	ldr	r3, [pc, #472]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800924e:	4b73      	ldr	r3, [pc, #460]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 8009250:	220a      	movs	r2, #10
 8009252:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009254:	e0ca      	b.n	80093ec <_ZN7ESP826612Send_WifiCmdEv+0x7f0>
	case 100:

		len = sprintf(PostUrl_CharFormat,"POST /production?mac=1001 HTTP/1.1\r\n"
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
									"Host: skyfastpms.janaticsindia.com:9010\r\n"
									"Accept: text/html\r\n"
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",ContentLength);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	899b      	ldrh	r3, [r3, #12]
		len = sprintf(PostUrl_CharFormat,"POST /production?mac=1001 HTTP/1.1\r\n"
 8009260:	461a      	mov	r2, r3
 8009262:	4972      	ldr	r1, [pc, #456]	; (800942c <_ZN7ESP826612Send_WifiCmdEv+0x830>)
 8009264:	f005 ff22 	bl	800f0ac <siprintf>
 8009268:	4603      	mov	r3, r0
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b65      	ldr	r3, [pc, #404]	; (8009404 <_ZN7ESP826612Send_WifiCmdEv+0x808>)
 800926e:	701a      	strb	r2, [r3, #0]
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 70e2 	add.w	r0, r3, #452	; 0x1c4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	33e8      	adds	r3, #232	; 0xe8
 800927a:	4a62      	ldr	r2, [pc, #392]	; (8009404 <_ZN7ESP826612Send_WifiCmdEv+0x808>)
 800927c:	7812      	ldrb	r2, [r2, #0]
 800927e:	4619      	mov	r1, r3
 8009280:	f005 fe0e 	bl	800eea0 <memcpy>
									"Content-Type: application/json\r\n"
									"Content-Length: %d\r\n\r\n[",ContentLength);
		memcpy(PostUrl_uintFormat,PostUrl_CharFormat,len); */


	NoOfdata_byte	= 	url_buffer;
 8009284:	4b6a      	ldr	r3, [pc, #424]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	b29a      	uxth	r2, r3
 800928a:	4b61      	ldr	r3, [pc, #388]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 800928c:	801a      	strh	r2, [r3, #0]
	wifi_command	=	101;
 800928e:	4b63      	ldr	r3, [pc, #396]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 8009290:	2265      	movs	r2, #101	; 0x65
 8009292:	701a      	strb	r2, [r3, #0]

	NoOfdata_byte	= url_buffer;
 8009294:	4b66      	ldr	r3, [pc, #408]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	b29a      	uxth	r2, r3
 800929a:	4b5d      	ldr	r3, [pc, #372]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 800929c:	801a      	strh	r2, [r3, #0]
	Timerdelay=0;
 800929e:	4b61      	ldr	r3, [pc, #388]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,len);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80092aa:	4a56      	ldr	r2, [pc, #344]	; (8009404 <_ZN7ESP826612Send_WifiCmdEv+0x808>)
 80092ac:	7812      	ldrb	r2, [r2, #0]
 80092ae:	b292      	uxth	r2, r2
 80092b0:	4619      	mov	r1, r3
 80092b2:	4859      	ldr	r0, [pc, #356]	; (8009418 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 80092b4:	f004 fa64 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 80092b8:	e09f      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 101:
		NoOfdata_byte = 809;//34
 80092ba:	4b55      	ldr	r3, [pc, #340]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 80092bc:	f240 3229 	movw	r2, #809	; 0x329
 80092c0:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,ProductionSet_uintFormat_MEM,NoOfdata_byte);
 80092c2:	4b53      	ldr	r3, [pc, #332]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	495a      	ldr	r1, [pc, #360]	; (8009434 <_ZN7ESP826612Send_WifiCmdEv+0x838>)
 80092ca:	4853      	ldr	r0, [pc, #332]	; (8009418 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 80092cc:	f004 fa58 	bl	800d780 <HAL_UART_Transmit_IT>
		wifi_command=104;
 80092d0:	4b52      	ldr	r3, [pc, #328]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 80092d2:	2268      	movs	r2, #104	; 0x68
 80092d4:	701a      	strb	r2, [r3, #0]
	break;
 80092d6:	e090      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 104:
		url_buffer=0;
 80092d8:	4b55      	ldr	r3, [pc, #340]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
		OnlineData_buffer[url_buffer] =  ']';
 80092de:	4b54      	ldr	r3, [pc, #336]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	4b54      	ldr	r3, [pc, #336]	; (8009438 <_ZN7ESP826612Send_WifiCmdEv+0x83c>)
 80092e6:	215d      	movs	r1, #93	; 0x5d
 80092e8:	5499      	strb	r1, [r3, r2]
		url_buffer++;
 80092ea:	4b51      	ldr	r3, [pc, #324]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	4b4f      	ldr	r3, [pc, #316]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 80092f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&hlpuart1,OnlineData_buffer,url_buffer);
 80092f6:	4b4e      	ldr	r3, [pc, #312]	; (8009430 <_ZN7ESP826612Send_WifiCmdEv+0x834>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	494e      	ldr	r1, [pc, #312]	; (8009438 <_ZN7ESP826612Send_WifiCmdEv+0x83c>)
 8009300:	4845      	ldr	r0, [pc, #276]	; (8009418 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 8009302:	f004 fa3d 	bl	800d780 <HAL_UART_Transmit_IT>
		Rxseqdecoder=7;
 8009306:	4b46      	ldr	r3, [pc, #280]	; (8009420 <_ZN7ESP826612Send_WifiCmdEv+0x824>)
 8009308:	2207      	movs	r2, #7
 800930a:	701a      	strb	r2, [r3, #0]
		wifi_command=105;
 800930c:	4b43      	ldr	r3, [pc, #268]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 800930e:	2269      	movs	r2, #105	; 0x69
 8009310:	701a      	strb	r2, [r3, #0]
	break;
 8009312:	e072      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 105:
		if(++Timerdelay>25)
 8009314:	4b43      	ldr	r3, [pc, #268]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	4b41      	ldr	r3, [pc, #260]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	4b40      	ldr	r3, [pc, #256]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b19      	cmp	r3, #25
 8009326:	bf8c      	ite	hi
 8009328:	2301      	movhi	r3, #1
 800932a:	2300      	movls	r3, #0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d05e      	beq.n	80093f0 <_ZN7ESP826612Send_WifiCmdEv+0x7f4>
	   {
		Timerdelay=0;
 8009332:	4b3c      	ldr	r3, [pc, #240]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8009338:	4b38      	ldr	r3, [pc, #224]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 800933a:	220a      	movs	r2, #10
 800933c:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800933e:	e057      	b.n	80093f0 <_ZN7ESP826612Send_WifiCmdEv+0x7f4>
	case 102:

	   if(++Timerdelay>5)
 8009340:	4b38      	ldr	r3, [pc, #224]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	4b36      	ldr	r3, [pc, #216]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800934a:	701a      	strb	r2, [r3, #0]
 800934c:	4b35      	ldr	r3, [pc, #212]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b05      	cmp	r3, #5
 8009352:	bf8c      	ite	hi
 8009354:	2301      	movhi	r3, #1
 8009356:	2300      	movls	r3, #0
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04a      	beq.n	80093f4 <_ZN7ESP826612Send_WifiCmdEv+0x7f8>
	   {
		Timerdelay=0;
 800935e:	4b31      	ldr	r3, [pc, #196]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009360:	2200      	movs	r2, #0
 8009362:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8009364:	4b2d      	ldr	r3, [pc, #180]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 8009366:	2232      	movs	r2, #50	; 0x32
 8009368:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800936a:	e043      	b.n	80093f4 <_ZN7ESP826612Send_WifiCmdEv+0x7f8>
	case 103:
	   if(++Timerdelay>2)
 800936c:	4b2d      	ldr	r3, [pc, #180]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	3301      	adds	r3, #1
 8009372:	b2da      	uxtb	r2, r3
 8009374:	4b2b      	ldr	r3, [pc, #172]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	4b2a      	ldr	r3, [pc, #168]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b02      	cmp	r3, #2
 800937e:	bf8c      	ite	hi
 8009380:	2301      	movhi	r3, #1
 8009382:	2300      	movls	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d036      	beq.n	80093f8 <_ZN7ESP826612Send_WifiCmdEv+0x7fc>
	   {
		Timerdelay=0;
 800938a:	4b26      	ldr	r3, [pc, #152]	; (8009424 <_ZN7ESP826612Send_WifiCmdEv+0x828>)
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8009390:	4b22      	ldr	r3, [pc, #136]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 8009392:	220a      	movs	r2, #10
 8009394:	701a      	strb	r2, [r3, #0]
	   }
	break;
 8009396:	e02f      	b.n	80093f8 <_ZN7ESP826612Send_WifiCmdEv+0x7fc>
	case 110:
	NoOfdata_byte=12;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 800939a:	220c      	movs	r2, #12
 800939c:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 800939e:	4b1f      	ldr	r3, [pc, #124]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 80093a0:	2232      	movs	r2, #50	; 0x32
 80093a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80093aa:	4a19      	ldr	r2, [pc, #100]	; (8009410 <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	4819      	ldr	r0, [pc, #100]	; (8009418 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 80093b2:	f004 f9e5 	bl	800d780 <HAL_UART_Transmit_IT>
	break;
 80093b6:	e020      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	case 120:
	break;
	default:
	wifi_command=5;
 80093b8:	4b18      	ldr	r3, [pc, #96]	; (800941c <_ZN7ESP826612Send_WifiCmdEv+0x820>)
 80093ba:	2205      	movs	r2, #5
 80093bc:	701a      	strb	r2, [r3, #0]
	break;
 80093be:	e01c      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093c0:	bf00      	nop
 80093c2:	e01a      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093c4:	bf00      	nop
 80093c6:	e018      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093c8:	bf00      	nop
 80093ca:	e016      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093cc:	bf00      	nop
 80093ce:	e014      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093d0:	bf00      	nop
 80093d2:	e012      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093d4:	bf00      	nop
 80093d6:	e010      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093d8:	bf00      	nop
 80093da:	e00e      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093dc:	bf00      	nop
 80093de:	e00c      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093e0:	bf00      	nop
 80093e2:	e00a      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093e4:	bf00      	nop
 80093e6:	e008      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093e8:	bf00      	nop
 80093ea:	e006      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093ec:	bf00      	nop
 80093ee:	e004      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093f0:	bf00      	nop
 80093f2:	e002      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093f4:	bf00      	nop
 80093f6:	e000      	b.n	80093fa <_ZN7ESP826612Send_WifiCmdEv+0x7fe>
	break;
 80093f8:	bf00      	nop
 }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000008 	.word	0x20000008
 8009408:	200009a8 	.word	0x200009a8
 800940c:	200009ac 	.word	0x200009ac
 8009410:	200009a4 	.word	0x200009a4
 8009414:	0800fb20 	.word	0x0800fb20
 8009418:	20000248 	.word	0x20000248
 800941c:	200007d9 	.word	0x200007d9
 8009420:	200009a1 	.word	0x200009a1
 8009424:	200009a6 	.word	0x200009a6
 8009428:	200007dc 	.word	0x200007dc
 800942c:	0800fb30 	.word	0x0800fb30
 8009430:	200009a7 	.word	0x200009a7
 8009434:	200009b0 	.word	0x200009b0
 8009438:	200008d8 	.word	0x200008d8

0800943c <_ZN7ESP826615RefreshWifiDataEv>:

void ESP8266::RefreshWifiData()
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b090      	sub	sp, #64	; 0x40
 8009440:	af0e      	add	r7, sp, #56	; 0x38
 8009442:	6078      	str	r0, [r7, #4]
	if((RefreshBlockInfo==0)||(powercycleRefresh==1))
 8009444:	4b93      	ldr	r3, [pc, #588]	; (8009694 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <_ZN7ESP826615RefreshWifiDataEv+0x1a>
 800944c:	4b92      	ldr	r3, [pc, #584]	; (8009698 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	f040 811a 	bne.w	800968a <_ZN7ESP826615RefreshWifiDataEv+0x24e>
	{
		RefreshBlockInfo=1;
 8009456:	4b8f      	ldr	r3, [pc, #572]	; (8009694 <_ZN7ESP826615RefreshWifiDataEv+0x258>)
 8009458:	2201      	movs	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
		if((currentdata==0)&&(powercycleRefresh==0))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 32b7 	ldrb.w	r3, [r3, #695]	; 0x2b7
 8009462:	2b00      	cmp	r3, #0
 8009464:	d115      	bne.n	8009492 <_ZN7ESP826615RefreshWifiDataEv+0x56>
 8009466:	4b8c      	ldr	r3, [pc, #560]	; (8009698 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d111      	bne.n	8009492 <_ZN7ESP826615RefreshWifiDataEv+0x56>
		{
			BlockStatusOffline[sectorTosend]=0;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 8009474:	461a      	mov	r2, r3
 8009476:	4b89      	ldr	r3, [pc, #548]	; (800969c <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 8009478:	2100      	movs	r1, #0
 800947a:	5499      	strb	r1, [r3, r2]
			W25qxx_EraseSector(601);
 800947c:	f240 2059 	movw	r0, #601	; 0x259
 8009480:	f7f9 fb30 	bl	8002ae4 <W25qxx_EraseSector>
			W25qxx_WriteSector(BlockStatusOffline,601,0,40);
 8009484:	2328      	movs	r3, #40	; 0x28
 8009486:	2200      	movs	r2, #0
 8009488:	f240 2159 	movw	r1, #601	; 0x259
 800948c:	4883      	ldr	r0, [pc, #524]	; (800969c <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 800948e:	f7f9 fd05 	bl	8002e9c <W25qxx_WriteSector>
		}
		powercycleRefresh=0;
 8009492:	4b81      	ldr	r3, [pc, #516]	; (8009698 <_ZN7ESP826615RefreshWifiDataEv+0x25c>)
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
		for(j=0;j<=32;j++)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	729a      	strb	r2, [r3, #10]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7a9b      	ldrb	r3, [r3, #10]
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d827      	bhi.n	80094f6 <_ZN7ESP826615RefreshWifiDataEv+0xba>
		{
			if(BlockStatusOffline[j] == 1)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7a9b      	ldrb	r3, [r3, #10]
 80094aa:	461a      	mov	r2, r3
 80094ac:	4b7b      	ldr	r3, [pc, #492]	; (800969c <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 80094ae:	5c9b      	ldrb	r3, [r3, r2]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d109      	bne.n	80094c8 <_ZN7ESP826615RefreshWifiDataEv+0x8c>
			{
				sectorTosend=j;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	7a9a      	ldrb	r2, [r3, #10]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
				currentdata=0;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
				break;
 80094c6:	e016      	b.n	80094f6 <_ZN7ESP826615RefreshWifiDataEv+0xba>
			}
			if(BlockStatusOffline[j] == 2)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7a9b      	ldrb	r3, [r3, #10]
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b73      	ldr	r3, [pc, #460]	; (800969c <_ZN7ESP826615RefreshWifiDataEv+0x260>)
 80094d0:	5c9b      	ldrb	r3, [r3, r2]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d108      	bne.n	80094e8 <_ZN7ESP826615RefreshWifiDataEv+0xac>
			{
				sectorTosend=j;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7a9a      	ldrb	r2, [r3, #10]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
				currentdata=1;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
		for(j=0;j<=32;j++)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7a9b      	ldrb	r3, [r3, #10]
 80094ec:	3301      	adds	r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	729a      	strb	r2, [r3, #10]
 80094f4:	e7d3      	b.n	800949e <_ZN7ESP826615RefreshWifiDataEv+0x62>
			}
		}

		sectorRead = 16*sectorTosend;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2
		if(W25qxx_IsEmptySector(sectorRead,0,53))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 32b2 	ldrh.w	r3, [r3, #690]	; 0x2b2
 800950e:	2235      	movs	r2, #53	; 0x35
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f7f9 fb54 	bl	8002bc0 <W25qxx_IsEmptySector>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d008      	beq.n	8009530 <_ZN7ESP826615RefreshWifiDataEv+0xf4>
		{
			memcpy(ProductionSet_uintFormat_MEM,dummydata,54);}
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8009524:	2236      	movs	r2, #54	; 0x36
 8009526:	4619      	mov	r1, r3
 8009528:	485d      	ldr	r0, [pc, #372]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800952a:	f005 fcb9 	bl	800eea0 <memcpy>
 800952e:	e00b      	b.n	8009548 <_ZN7ESP826615RefreshWifiDataEv+0x10c>
		else
		{
			W25qxx_ReadSector(ProductionSet_uintFormat_MEM,sectorRead,0,53);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 32b2 	ldrh.w	r3, [r3, #690]	; 0x2b2
 8009536:	4619      	mov	r1, r3
 8009538:	2335      	movs	r3, #53	; 0x35
 800953a:	2200      	movs	r2, #0
 800953c:	4858      	ldr	r0, [pc, #352]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800953e:	f7f9 fd8d 	bl	800305c <W25qxx_ReadSector>
			if(ProductionSet_uintFormat_MEM[0] != 34 || ProductionSet_uintFormat_MEM[52] != 34)
 8009542:	4b57      	ldr	r3, [pc, #348]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b22      	cmp	r3, #34	; 0x22
			{
			//	memcpy(ProductionSet_uintFormat_MEM,dummydata,54);
			}
		}
		sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 800954e:	4b55      	ldr	r3, [pc, #340]	; (80096a4 <_ZN7ESP826615RefreshWifiDataEv+0x268>)
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	2322      	movs	r3, #34	; 0x22
 8009556:	930d      	str	r3, [sp, #52]	; 0x34
 8009558:	920c      	str	r2, [sp, #48]	; 0x30
 800955a:	2300      	movs	r3, #0
 800955c:	930b      	str	r3, [sp, #44]	; 0x2c
 800955e:	2300      	movs	r3, #0
 8009560:	930a      	str	r3, [sp, #40]	; 0x28
 8009562:	2300      	movs	r3, #0
 8009564:	9309      	str	r3, [sp, #36]	; 0x24
 8009566:	2300      	movs	r3, #0
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	2300      	movs	r3, #0
 800956c:	9307      	str	r3, [sp, #28]
 800956e:	2300      	movs	r3, #0
 8009570:	9306      	str	r3, [sp, #24]
 8009572:	2300      	movs	r3, #0
 8009574:	9305      	str	r3, [sp, #20]
 8009576:	2300      	movs	r3, #0
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	2300      	movs	r3, #0
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	2300      	movs	r3, #0
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	2300      	movs	r3, #0
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	2300      	movs	r3, #0
 800958c:	2222      	movs	r2, #34	; 0x22
 800958e:	4946      	ldr	r1, [pc, #280]	; (80096a8 <_ZN7ESP826615RefreshWifiDataEv+0x26c>)
 8009590:	f005 fd8c 	bl	800f0ac <siprintf>
						0,0,0,0,0,0,0,0,0,0,0,SectorPos,'"');
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 80095a2:	2b0e      	cmp	r3, #14
 80095a4:	d871      	bhi.n	800968a <_ZN7ESP826615RefreshWifiDataEv+0x24e>
		{
			ProductionSet_uintFormat_MEM[(54*scanForUrl)-1]=',';
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 80095ac:	461a      	mov	r2, r3
 80095ae:	2336      	movs	r3, #54	; 0x36
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	4a3a      	ldr	r2, [pc, #232]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 80095b8:	212c      	movs	r1, #44	; 0x2c
 80095ba:	54d1      	strb	r1, [r2, r3]
			if(W25qxx_IsEmptySector(sectorRead+scanForUrl,0,53))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 32b2 	ldrh.w	r3, [r3, #690]	; 0x2b2
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 80095ca:	4413      	add	r3, r2
 80095cc:	2235      	movs	r2, #53	; 0x35
 80095ce:	2100      	movs	r1, #0
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f9 faf5 	bl	8002bc0 <W25qxx_IsEmptySector>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d010      	beq.n	80095fe <_ZN7ESP826615RefreshWifiDataEv+0x1c2>
			{
				memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 80095e2:	461a      	mov	r2, r3
 80095e4:	2336      	movs	r3, #54	; 0x36
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
 80095ea:	4a2d      	ldr	r2, [pc, #180]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 80095ec:	1898      	adds	r0, r3, r2
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80095f4:	2236      	movs	r2, #54	; 0x36
 80095f6:	4619      	mov	r1, r3
 80095f8:	f005 fc52 	bl	800eea0 <memcpy>
 80095fc:	e03c      	b.n	8009678 <_ZN7ESP826615RefreshWifiDataEv+0x23c>
	//			W25qxx_EraseSector(sectorRead+scanForUrl);
	//			W25qxx_WriteSector(ProductionSet_uintFormat_MEM,(sectorRead+scanForUrl),0,54);
			}
			else
			{
				W25qxx_ReadSector(&ProductionSet_uintFormat_MEM[54*scanForUrl],sectorRead+scanForUrl,0,53);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 8009604:	461a      	mov	r2, r3
 8009606:	2336      	movs	r3, #54	; 0x36
 8009608:	fb02 f303 	mul.w	r3, r2, r3
 800960c:	4a24      	ldr	r2, [pc, #144]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800960e:	1898      	adds	r0, r3, r2
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 32b2 	ldrh.w	r3, [r3, #690]	; 0x2b2
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800961e:	4413      	add	r3, r2
 8009620:	4619      	mov	r1, r3
 8009622:	2335      	movs	r3, #53	; 0x35
 8009624:	2200      	movs	r2, #0
 8009626:	f7f9 fd19 	bl	800305c <W25qxx_ReadSector>
				if(ProductionSet_uintFormat_MEM[54*scanForUrl] != 34 || ProductionSet_uintFormat_MEM[(54*scanForUrl)+52] != 34)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 8009630:	461a      	mov	r2, r3
 8009632:	2336      	movs	r3, #54	; 0x36
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	4a19      	ldr	r2, [pc, #100]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 800963a:	5cd3      	ldrb	r3, [r2, r3]
 800963c:	2b22      	cmp	r3, #34	; 0x22
 800963e:	d10b      	bne.n	8009658 <_ZN7ESP826615RefreshWifiDataEv+0x21c>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 8009646:	461a      	mov	r2, r3
 8009648:	2336      	movs	r3, #54	; 0x36
 800964a:	fb02 f303 	mul.w	r3, r2, r3
 800964e:	3334      	adds	r3, #52	; 0x34
 8009650:	4a13      	ldr	r2, [pc, #76]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 8009652:	5cd3      	ldrb	r3, [r2, r3]
 8009654:	2b22      	cmp	r3, #34	; 0x22
 8009656:	d00f      	beq.n	8009678 <_ZN7ESP826615RefreshWifiDataEv+0x23c>
				{
					memcpy(&ProductionSet_uintFormat_MEM[54*scanForUrl],dummydata,54);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800965e:	461a      	mov	r2, r3
 8009660:	2336      	movs	r3, #54	; 0x36
 8009662:	fb02 f303 	mul.w	r3, r2, r3
 8009666:	4a0e      	ldr	r2, [pc, #56]	; (80096a0 <_ZN7ESP826615RefreshWifiDataEv+0x264>)
 8009668:	1898      	adds	r0, r3, r2
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8009670:	2236      	movs	r2, #54	; 0x36
 8009672:	4619      	mov	r1, r3
 8009674:	f005 fc14 	bl	800eea0 <memcpy>
		for(scanForUrl=1;scanForUrl<=14;scanForUrl++)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800967e:	3301      	adds	r3, #1
 8009680:	b2da      	uxtb	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
 8009688:	e788      	b.n	800959c <_ZN7ESP826615RefreshWifiDataEv+0x160>

	/*	ProductionSet_uintFormat_MEM[(54*15)-1]=',';
		W25qxx_ReadSector(&ProductionSet_uintFormat_MEM[54*15],1,0,53);*///reduced due to tcp limitation

	}
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	200009aa 	.word	0x200009aa
 8009698:	200009ab 	.word	0x200009ab
 800969c:	200007a8 	.word	0x200007a8
 80096a0:	200009b0 	.word	0x200009b0
 80096a4:	200007a6 	.word	0x200007a6
 80096a8:	0800fbc8 	.word	0x0800fbc8

080096ac <_ZN7ESP82664InitEv>:

void ESP8266::Init(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b090      	sub	sp, #64	; 0x40
 80096b0:	af0e      	add	r7, sp, #56	; 0x38
 80096b2:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 80096ba:	2322      	movs	r3, #34	; 0x22
 80096bc:	930d      	str	r3, [sp, #52]	; 0x34
 80096be:	2300      	movs	r3, #0
 80096c0:	930c      	str	r3, [sp, #48]	; 0x30
 80096c2:	2300      	movs	r3, #0
 80096c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80096c6:	2300      	movs	r3, #0
 80096c8:	930a      	str	r3, [sp, #40]	; 0x28
 80096ca:	2300      	movs	r3, #0
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	2300      	movs	r3, #0
 80096d0:	9308      	str	r3, [sp, #32]
 80096d2:	2300      	movs	r3, #0
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	2300      	movs	r3, #0
 80096d8:	9306      	str	r3, [sp, #24]
 80096da:	2300      	movs	r3, #0
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	2300      	movs	r3, #0
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	9302      	str	r3, [sp, #8]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	2222      	movs	r2, #34	; 0x22
 80096f6:	4908      	ldr	r1, [pc, #32]	; (8009718 <_ZN7ESP82664InitEv+0x6c>)
 80096f8:	f005 fcd8 	bl	800f0ac <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 80096fc:	4b07      	ldr	r3, [pc, #28]	; (800971c <_ZN7ESP82664InitEv+0x70>)
 80096fe:	2201      	movs	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <_ZN7ESP82664InitEv+0x74>)
 8009704:	2205      	movs	r2, #5
 8009706:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <_ZN7ESP82664InitEv+0x78>)
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	0800fbc8 	.word	0x0800fbc8
 800971c:	200009ab 	.word	0x200009ab
 8009720:	200007d9 	.word	0x200007d9
 8009724:	200009aa 	.word	0x200009aa

08009728 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 8009728:	b580      	push	{r7, lr}
 800972a:	f5ad 5dcd 	sub.w	sp, sp, #6560	; 0x19a0
 800972e:	af00      	add	r7, sp, #0
	GLCD glcd;
 8009730:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 8009734:	4618      	mov	r0, r3
 8009736:	f7fa f8d1 	bl	80038dc <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 800973a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fbd6 	bl	8007ef0 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 8009744:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8009748:	3b08      	subs	r3, #8
 800974a:	4618      	mov	r0, r3
 800974c:	f7f9 fe90 	bl	8003470 <_ZN14DisplayRoutineC1Ev>
	LpdcLogic lpdcLogicInst;
 8009750:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8009754:	3b14      	subs	r3, #20
 8009756:	4618      	mov	r0, r3
 8009758:	f7f9 fd0c 	bl	8003174 <_ZN9LpdcLogicC1Ev>
	OfflineStorage offlineStorageInst;
 800975c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009760:	3b14      	subs	r3, #20
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fdb2 	bl	80082cc <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 8009768:	f107 0320 	add.w	r3, r7, #32
 800976c:	3b04      	subs	r3, #4
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff f960 	bl	8008a34 <_ZN7ESP8266C1Ev>
	SHIFT shiftInst;
 8009774:	f107 0320 	add.w	r3, r7, #32
 8009778:	3b1c      	subs	r3, #28
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff f83a 	bl	80087f4 <_ZN5SHIFTC1Ev>

	displayRoutineInst.Init();
 8009780:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8009784:	3b08      	subs	r3, #8
 8009786:	4618      	mov	r0, r3
 8009788:	f7fa f870 	bl	800386c <_ZN14DisplayRoutine4InitEv>
	//offlineStorageInst.ECUProductionInit();/* Not needed*/
	offlineStorageInst.ReadOfflinedataInit();
 800978c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009790:	3b14      	subs	r3, #20
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe ff8a 	bl	80086ac <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	esp8266Inst.Init();
 8009798:	f107 0320 	add.w	r3, r7, #32
 800979c:	3b04      	subs	r3, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff ff84 	bl	80096ac <_ZN7ESP82664InitEv>
	TxSeqComplete=1;
 80097a4:	4b1e      	ldr	r3, [pc, #120]	; (8009820 <cppMain+0xf8>)
 80097a6:	2201      	movs	r2, #1
 80097a8:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(Flag1MS)
 80097aa:	4b1e      	ldr	r3, [pc, #120]	; (8009824 <cppMain+0xfc>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d008      	beq.n	80097c4 <cppMain+0x9c>
		{
			Flag1MS=0;
 80097b2:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <cppMain+0xfc>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]
			lpdcLogicInst.run();
 80097b8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80097bc:	3b14      	subs	r3, #20
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f9 fd0c 	bl	80031dc <_ZN9LpdcLogic3runEv>
		}
 		if(Flag100milliSeconds)
 80097c4:	4b18      	ldr	r3, [pc, #96]	; (8009828 <cppMain+0x100>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <cppMain+0xc0>
		{
			Flag100milliSeconds=0;
 80097cc:	4b16      	ldr	r3, [pc, #88]	; (8009828 <cppMain+0x100>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 80097d2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80097d6:	3b14      	subs	r3, #20
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe fda7 	bl	800832c <_ZN14OfflineStorage3runEv>
			ModbusInst.ModbusReadTransaction();
 80097de:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fbce 	bl	8007f84 <_ZN9Modbusrtu21ModbusReadTransactionEv>

		}
		if(Flag1Second)
 80097e8:	4b10      	ldr	r3, [pc, #64]	; (800982c <cppMain+0x104>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d014      	beq.n	800981a <cppMain+0xf2>
		{
			Flag1Second=0;
 80097f0:	4b0e      	ldr	r3, [pc, #56]	; (800982c <cppMain+0x104>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 80097f6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80097fa:	3b08      	subs	r3, #8
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f9 febf 	bl	8003580 <_ZN14DisplayRoutine3runEv>
			esp8266Inst.run();
 8009802:	f107 0320 	add.w	r3, r7, #32
 8009806:	3b04      	subs	r3, #4
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff f9e8 	bl	8008bde <_ZN7ESP82663runEv>
			shiftInst.run();
 800980e:	f107 0320 	add.w	r3, r7, #32
 8009812:	3b1c      	subs	r3, #28
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff f901 	bl	8008a1c <_ZN5SHIFT3runEv>
		}
		ESPRXDataSeg();
 800981a:	f7f6 feb3 	bl	8000584 <ESPRXDataSeg>
		if(Flag1MS)
 800981e:	e7c4      	b.n	80097aa <cppMain+0x82>
 8009820:	200006d7 	.word	0x200006d7
 8009824:	2000011e 	.word	0x2000011e
 8009828:	20000120 	.word	0x20000120
 800982c:	2000011f 	.word	0x2000011f

08009830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800983a:	2003      	movs	r0, #3
 800983c:	f000 f960 	bl	8009b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009840:	200f      	movs	r0, #15
 8009842:	f000 f80d 	bl	8009860 <HAL_InitTick>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	71fb      	strb	r3, [r7, #7]
 8009850:	e001      	b.n	8009856 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009852:	f7f8 fb7d 	bl	8001f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009856:	79fb      	ldrb	r3, [r7, #7]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800986c:	4b17      	ldr	r3, [pc, #92]	; (80098cc <HAL_InitTick+0x6c>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d023      	beq.n	80098bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009874:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <HAL_InitTick+0x70>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	4b14      	ldr	r3, [pc, #80]	; (80098cc <HAL_InitTick+0x6c>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	4619      	mov	r1, r3
 800987e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009882:	fbb3 f3f1 	udiv	r3, r3, r1
 8009886:	fbb2 f3f3 	udiv	r3, r2, r3
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f96d 	bl	8009b6a <HAL_SYSTICK_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10f      	bne.n	80098b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b0f      	cmp	r3, #15
 800989a:	d809      	bhi.n	80098b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800989c:	2200      	movs	r2, #0
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	f000 f937 	bl	8009b16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80098a8:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <HAL_InitTick+0x74>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	e007      	b.n	80098c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
 80098b4:	e004      	b.n	80098c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]
 80098ba:	e001      	b.n	80098c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20000010 	.word	0x20000010
 80098d0:	20000004 	.word	0x20000004
 80098d4:	2000000c 	.word	0x2000000c

080098d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <HAL_IncTick+0x20>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b06      	ldr	r3, [pc, #24]	; (80098fc <HAL_IncTick+0x24>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4413      	add	r3, r2
 80098e8:	4a04      	ldr	r2, [pc, #16]	; (80098fc <HAL_IncTick+0x24>)
 80098ea:	6013      	str	r3, [r2, #0]
}
 80098ec:	bf00      	nop
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	20000010 	.word	0x20000010
 80098fc:	20000d04 	.word	0x20000d04

08009900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
  return uwTick;
 8009904:	4b03      	ldr	r3, [pc, #12]	; (8009914 <HAL_GetTick+0x14>)
 8009906:	681b      	ldr	r3, [r3, #0]
}
 8009908:	4618      	mov	r0, r3
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20000d04 	.word	0x20000d04

08009918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009920:	f7ff ffee 	bl	8009900 <HAL_GetTick>
 8009924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009930:	d005      	beq.n	800993e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009932:	4b0a      	ldr	r3, [pc, #40]	; (800995c <HAL_Delay+0x44>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800993e:	bf00      	nop
 8009940:	f7ff ffde 	bl	8009900 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	429a      	cmp	r2, r3
 800994e:	d8f7      	bhi.n	8009940 <HAL_Delay+0x28>
  {
  }
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000010 	.word	0x20000010

08009960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009970:	4b0c      	ldr	r3, [pc, #48]	; (80099a4 <__NVIC_SetPriorityGrouping+0x44>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800997c:	4013      	ands	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800998c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009992:	4a04      	ldr	r2, [pc, #16]	; (80099a4 <__NVIC_SetPriorityGrouping+0x44>)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	60d3      	str	r3, [r2, #12]
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	e000ed00 	.word	0xe000ed00

080099a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099ac:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <__NVIC_GetPriorityGrouping+0x18>)
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	0a1b      	lsrs	r3, r3, #8
 80099b2:	f003 0307 	and.w	r3, r3, #7
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	e000ed00 	.word	0xe000ed00

080099c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	db0b      	blt.n	80099ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	f003 021f 	and.w	r2, r3, #31
 80099dc:	4907      	ldr	r1, [pc, #28]	; (80099fc <__NVIC_EnableIRQ+0x38>)
 80099de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	2001      	movs	r0, #1
 80099e6:	fa00 f202 	lsl.w	r2, r0, r2
 80099ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	e000e100 	.word	0xe000e100

08009a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	db0a      	blt.n	8009a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	490c      	ldr	r1, [pc, #48]	; (8009a4c <__NVIC_SetPriority+0x4c>)
 8009a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1e:	0112      	lsls	r2, r2, #4
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	440b      	add	r3, r1
 8009a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a28:	e00a      	b.n	8009a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	4908      	ldr	r1, [pc, #32]	; (8009a50 <__NVIC_SetPriority+0x50>)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	f003 030f 	and.w	r3, r3, #15
 8009a36:	3b04      	subs	r3, #4
 8009a38:	0112      	lsls	r2, r2, #4
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	761a      	strb	r2, [r3, #24]
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	e000e100 	.word	0xe000e100
 8009a50:	e000ed00 	.word	0xe000ed00

08009a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b089      	sub	sp, #36	; 0x24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f1c3 0307 	rsb	r3, r3, #7
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	bf28      	it	cs
 8009a72:	2304      	movcs	r3, #4
 8009a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	2b06      	cmp	r3, #6
 8009a7c:	d902      	bls.n	8009a84 <NVIC_EncodePriority+0x30>
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	3b03      	subs	r3, #3
 8009a82:	e000      	b.n	8009a86 <NVIC_EncodePriority+0x32>
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	43da      	mvns	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	401a      	ands	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa6:	43d9      	mvns	r1, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009aac:	4313      	orrs	r3, r2
         );
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3724      	adds	r7, #36	; 0x24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
	...

08009abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009acc:	d301      	bcc.n	8009ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e00f      	b.n	8009af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ad2:	4a0a      	ldr	r2, [pc, #40]	; (8009afc <SysTick_Config+0x40>)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ada:	210f      	movs	r1, #15
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	f7ff ff8e 	bl	8009a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <SysTick_Config+0x40>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <SysTick_Config+0x40>)
 8009aec:	2207      	movs	r2, #7
 8009aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	e000e010 	.word	0xe000e010

08009b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff ff29 	bl	8009960 <__NVIC_SetPriorityGrouping>
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b086      	sub	sp, #24
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	607a      	str	r2, [r7, #4]
 8009b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009b28:	f7ff ff3e 	bl	80099a8 <__NVIC_GetPriorityGrouping>
 8009b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	6978      	ldr	r0, [r7, #20]
 8009b34:	f7ff ff8e 	bl	8009a54 <NVIC_EncodePriority>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff ff5d 	bl	8009a00 <__NVIC_SetPriority>
}
 8009b46:	bf00      	nop
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	4603      	mov	r3, r0
 8009b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff ff31 	bl	80099c4 <__NVIC_EnableIRQ>
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff ffa2 	bl	8009abc <SysTick_Config>
 8009b78:	4603      	mov	r3, r0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d008      	beq.n	8009bac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e022      	b.n	8009bf2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 020e 	bic.w	r2, r2, #14
 8009bba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0201 	bic.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd0:	f003 021c 	and.w	r2, r3, #28
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	2101      	movs	r1, #1
 8009bda:	fa01 f202 	lsl.w	r2, r1, r2
 8009bde:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d005      	beq.n	8009c22 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
 8009c20:	e029      	b.n	8009c76 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 020e 	bic.w	r2, r2, #14
 8009c30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f022 0201 	bic.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c46:	f003 021c 	and.w	r2, r3, #28
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	2101      	movs	r1, #1
 8009c50:	fa01 f202 	lsl.w	r2, r1, r2
 8009c54:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	4798      	blx	r3
    }
  }
  return status;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c8e:	e154      	b.n	8009f3a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	2101      	movs	r1, #1
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 8146 	beq.w	8009f34 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d005      	beq.n	8009cc0 <HAL_GPIO_Init+0x40>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f003 0303 	and.w	r3, r3, #3
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d130      	bne.n	8009d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	2203      	movs	r2, #3
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	005b      	lsls	r3, r3, #1
 8009ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfe:	43db      	mvns	r3, r3
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4013      	ands	r3, r2
 8009d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	091b      	lsrs	r3, r3, #4
 8009d0c:	f003 0201 	and.w	r2, r3, #1
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d017      	beq.n	8009d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	2203      	movs	r2, #3
 8009d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3e:	43db      	mvns	r3, r3
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4013      	ands	r3, r2
 8009d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d123      	bne.n	8009db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	08da      	lsrs	r2, r3, #3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3208      	adds	r2, #8
 8009d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	220f      	movs	r2, #15
 8009d82:	fa02 f303 	lsl.w	r3, r2, r3
 8009d86:	43db      	mvns	r3, r3
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	08da      	lsrs	r2, r3, #3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3208      	adds	r2, #8
 8009dac:	6939      	ldr	r1, [r7, #16]
 8009dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	2203      	movs	r2, #3
 8009dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc2:	43db      	mvns	r3, r3
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f003 0203 	and.w	r2, r3, #3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 80a0 	beq.w	8009f34 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009df4:	4b58      	ldr	r3, [pc, #352]	; (8009f58 <HAL_GPIO_Init+0x2d8>)
 8009df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009df8:	4a57      	ldr	r2, [pc, #348]	; (8009f58 <HAL_GPIO_Init+0x2d8>)
 8009dfa:	f043 0301 	orr.w	r3, r3, #1
 8009dfe:	6613      	str	r3, [r2, #96]	; 0x60
 8009e00:	4b55      	ldr	r3, [pc, #340]	; (8009f58 <HAL_GPIO_Init+0x2d8>)
 8009e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	60bb      	str	r3, [r7, #8]
 8009e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009e0c:	4a53      	ldr	r2, [pc, #332]	; (8009f5c <HAL_GPIO_Init+0x2dc>)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	089b      	lsrs	r3, r3, #2
 8009e12:	3302      	adds	r3, #2
 8009e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	220f      	movs	r2, #15
 8009e24:	fa02 f303 	lsl.w	r3, r2, r3
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009e36:	d019      	beq.n	8009e6c <HAL_GPIO_Init+0x1ec>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a49      	ldr	r2, [pc, #292]	; (8009f60 <HAL_GPIO_Init+0x2e0>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d013      	beq.n	8009e68 <HAL_GPIO_Init+0x1e8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a48      	ldr	r2, [pc, #288]	; (8009f64 <HAL_GPIO_Init+0x2e4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00d      	beq.n	8009e64 <HAL_GPIO_Init+0x1e4>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a47      	ldr	r2, [pc, #284]	; (8009f68 <HAL_GPIO_Init+0x2e8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d007      	beq.n	8009e60 <HAL_GPIO_Init+0x1e0>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a46      	ldr	r2, [pc, #280]	; (8009f6c <HAL_GPIO_Init+0x2ec>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d101      	bne.n	8009e5c <HAL_GPIO_Init+0x1dc>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	e008      	b.n	8009e6e <HAL_GPIO_Init+0x1ee>
 8009e5c:	2307      	movs	r3, #7
 8009e5e:	e006      	b.n	8009e6e <HAL_GPIO_Init+0x1ee>
 8009e60:	2303      	movs	r3, #3
 8009e62:	e004      	b.n	8009e6e <HAL_GPIO_Init+0x1ee>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e002      	b.n	8009e6e <HAL_GPIO_Init+0x1ee>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <HAL_GPIO_Init+0x1ee>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	f002 0203 	and.w	r2, r2, #3
 8009e74:	0092      	lsls	r2, r2, #2
 8009e76:	4093      	lsls	r3, r2
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009e7e:	4937      	ldr	r1, [pc, #220]	; (8009f5c <HAL_GPIO_Init+0x2dc>)
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	089b      	lsrs	r3, r3, #2
 8009e84:	3302      	adds	r3, #2
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009e8c:	4b38      	ldr	r3, [pc, #224]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	43db      	mvns	r3, r3
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009eb0:	4a2f      	ldr	r2, [pc, #188]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009eb6:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	43db      	mvns	r3, r3
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009eda:	4a25      	ldr	r2, [pc, #148]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009ee0:	4b23      	ldr	r3, [pc, #140]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	4013      	ands	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009f04:	4a1a      	ldr	r2, [pc, #104]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009f0a:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	43db      	mvns	r3, r3
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4013      	ands	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009f2e:	4a10      	ldr	r2, [pc, #64]	; (8009f70 <HAL_GPIO_Init+0x2f0>)
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	3301      	adds	r3, #1
 8009f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f47f aea3 	bne.w	8009c90 <HAL_GPIO_Init+0x10>
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	40021000 	.word	0x40021000
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	48000400 	.word	0x48000400
 8009f64:	48000800 	.word	0x48000800
 8009f68:	48000c00 	.word	0x48000c00
 8009f6c:	48001000 	.word	0x48001000
 8009f70:	40010400 	.word	0x40010400

08009f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	887b      	ldrh	r3, [r7, #2]
 8009f86:	4013      	ands	r3, r2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	73fb      	strb	r3, [r7, #15]
 8009f90:	e001      	b.n	8009f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	807b      	strh	r3, [r7, #2]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009fb4:	787b      	ldrb	r3, [r7, #1]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009fba:	887a      	ldrh	r2, [r7, #2]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009fc0:	e002      	b.n	8009fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009fc2:	887a      	ldrh	r2, [r7, #2]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009fe6:	887a      	ldrh	r2, [r7, #2]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4013      	ands	r3, r2
 8009fec:	041a      	lsls	r2, r3, #16
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	43d9      	mvns	r1, r3
 8009ff2:	887b      	ldrh	r3, [r7, #2]
 8009ff4:	400b      	ands	r3, r1
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	619a      	str	r2, [r3, #24]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e081      	b.n	800a11e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7f7 ffb2 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2224      	movs	r2, #36	; 0x24
 800a038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0201 	bic.w	r2, r2, #1
 800a04a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a058:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a068:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d107      	bne.n	800a082 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689a      	ldr	r2, [r3, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a07e:	609a      	str	r2, [r3, #8]
 800a080:	e006      	b.n	800a090 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a08e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d104      	bne.n	800a0a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6812      	ldr	r2, [r2, #0]
 800a0ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68da      	ldr	r2, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	69d9      	ldr	r1, [r3, #28]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1a      	ldr	r2, [r3, #32]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0201 	orr.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	4608      	mov	r0, r1
 800a132:	4611      	mov	r1, r2
 800a134:	461a      	mov	r2, r3
 800a136:	4603      	mov	r3, r0
 800a138:	817b      	strh	r3, [r7, #10]
 800a13a:	460b      	mov	r3, r1
 800a13c:	813b      	strh	r3, [r7, #8]
 800a13e:	4613      	mov	r3, r2
 800a140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b20      	cmp	r3, #32
 800a14c:	f040 80f9 	bne.w	800a342 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <HAL_I2C_Mem_Write+0x34>
 800a156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d105      	bne.n	800a168 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a162:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e0ed      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d101      	bne.n	800a176 <HAL_I2C_Mem_Write+0x4e>
 800a172:	2302      	movs	r3, #2
 800a174:	e0e6      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a17e:	f7ff fbbf 	bl	8009900 <HAL_GetTick>
 800a182:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	2319      	movs	r3, #25
 800a18a:	2201      	movs	r2, #1
 800a18c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 fac3 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e0d1      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2221      	movs	r2, #33	; 0x21
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2240      	movs	r2, #64	; 0x40
 800a1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a3a      	ldr	r2, [r7, #32]
 800a1ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1c8:	88f8      	ldrh	r0, [r7, #6]
 800a1ca:	893a      	ldrh	r2, [r7, #8]
 800a1cc:	8979      	ldrh	r1, [r7, #10]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f9d3 	bl	800a584 <I2C_RequestMemoryWrite>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0a9      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	2bff      	cmp	r3, #255	; 0xff
 800a1f8:	d90e      	bls.n	800a218 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	22ff      	movs	r2, #255	; 0xff
 800a1fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a204:	b2da      	uxtb	r2, r3
 800a206:	8979      	ldrh	r1, [r7, #10]
 800a208:	2300      	movs	r3, #0
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 fc2b 	bl	800aa6c <I2C_TransferConfig>
 800a216:	e00f      	b.n	800a238 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a226:	b2da      	uxtb	r2, r3
 800a228:	8979      	ldrh	r1, [r7, #10]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 fc1a 	bl	800aa6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 faad 	bl	800a79c <I2C_WaitOnTXISFlagUntilTimeout>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e07b      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a266:	b29b      	uxth	r3, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a274:	3b01      	subs	r3, #1
 800a276:	b29a      	uxth	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a280:	b29b      	uxth	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d034      	beq.n	800a2f0 <HAL_I2C_Mem_Write+0x1c8>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d130      	bne.n	800a2f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a294:	2200      	movs	r2, #0
 800a296:	2180      	movs	r1, #128	; 0x80
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fa3f 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e04d      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	2bff      	cmp	r3, #255	; 0xff
 800a2b0:	d90e      	bls.n	800a2d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	22ff      	movs	r2, #255	; 0xff
 800a2b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	8979      	ldrh	r1, [r7, #10]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fbcf 	bl	800aa6c <I2C_TransferConfig>
 800a2ce:	e00f      	b.n	800a2f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	8979      	ldrh	r1, [r7, #10]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fbbe 	bl	800aa6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d19e      	bne.n	800a238 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 fa8c 	bl	800a81c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e01a      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2220      	movs	r2, #32
 800a314:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6859      	ldr	r1, [r3, #4]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <HAL_I2C_Mem_Write+0x224>)
 800a322:	400b      	ands	r3, r1
 800a324:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2220      	movs	r2, #32
 800a32a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	e000      	b.n	800a344 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a342:	2302      	movs	r3, #2
  }
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	fe00e800 	.word	0xfe00e800

0800a350 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af02      	add	r7, sp, #8
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	461a      	mov	r2, r3
 800a35e:	4603      	mov	r3, r0
 800a360:	817b      	strh	r3, [r7, #10]
 800a362:	460b      	mov	r3, r1
 800a364:	813b      	strh	r3, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b20      	cmp	r3, #32
 800a374:	f040 80fd 	bne.w	800a572 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <HAL_I2C_Mem_Read+0x34>
 800a37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d105      	bne.n	800a390 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a38a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e0f1      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <HAL_I2C_Mem_Read+0x4e>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e0ea      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a3a6:	f7ff faab 	bl	8009900 <HAL_GetTick>
 800a3aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2319      	movs	r3, #25
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f9af 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e0d5      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2222      	movs	r2, #34	; 0x22
 800a3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2240      	movs	r2, #64	; 0x40
 800a3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a3a      	ldr	r2, [r7, #32]
 800a3e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3f0:	88f8      	ldrh	r0, [r7, #6]
 800a3f2:	893a      	ldrh	r2, [r7, #8]
 800a3f4:	8979      	ldrh	r1, [r7, #10]
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4603      	mov	r3, r0
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f913 	bl	800a62c <I2C_RequestMemoryRead>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e0ad      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	2bff      	cmp	r3, #255	; 0xff
 800a420:	d90e      	bls.n	800a440 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	22ff      	movs	r2, #255	; 0xff
 800a426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	8979      	ldrh	r1, [r7, #10]
 800a430:	4b52      	ldr	r3, [pc, #328]	; (800a57c <HAL_I2C_Mem_Read+0x22c>)
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 fb17 	bl	800aa6c <I2C_TransferConfig>
 800a43e:	e00f      	b.n	800a460 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a444:	b29a      	uxth	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	8979      	ldrh	r1, [r7, #10]
 800a452:	4b4a      	ldr	r3, [pc, #296]	; (800a57c <HAL_I2C_Mem_Read+0x22c>)
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 fb06 	bl	800aa6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	2200      	movs	r2, #0
 800a468:	2104      	movs	r1, #4
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 f956 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e07c      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	b2d2      	uxtb	r2, r2
 800a486:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	3b01      	subs	r3, #1
 800a498:	b29a      	uxth	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d034      	beq.n	800a520 <HAL_I2C_Mem_Read+0x1d0>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d130      	bne.n	800a520 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2180      	movs	r1, #128	; 0x80
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 f927 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e04d      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	2bff      	cmp	r3, #255	; 0xff
 800a4e0:	d90e      	bls.n	800a500 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	22ff      	movs	r2, #255	; 0xff
 800a4e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	8979      	ldrh	r1, [r7, #10]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fab7 	bl	800aa6c <I2C_TransferConfig>
 800a4fe:	e00f      	b.n	800a520 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a504:	b29a      	uxth	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	8979      	ldrh	r1, [r7, #10]
 800a512:	2300      	movs	r3, #0
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 faa6 	bl	800aa6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d19a      	bne.n	800a460 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f974 	bl	800a81c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e01a      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2220      	movs	r2, #32
 800a544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6859      	ldr	r1, [r3, #4]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <HAL_I2C_Mem_Read+0x230>)
 800a552:	400b      	ands	r3, r1
 800a554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2220      	movs	r2, #32
 800a55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	e000      	b.n	800a574 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a572:	2302      	movs	r3, #2
  }
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	80002400 	.word	0x80002400
 800a580:	fe00e800 	.word	0xfe00e800

0800a584 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af02      	add	r7, sp, #8
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	4603      	mov	r3, r0
 800a594:	817b      	strh	r3, [r7, #10]
 800a596:	460b      	mov	r3, r1
 800a598:	813b      	strh	r3, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	8979      	ldrh	r1, [r7, #10]
 800a5a4:	4b20      	ldr	r3, [pc, #128]	; (800a628 <I2C_RequestMemoryWrite+0xa4>)
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fa5d 	bl	800aa6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	69b9      	ldr	r1, [r7, #24]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f8f0 	bl	800a79c <I2C_WaitOnTXISFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e02c      	b.n	800a620 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d105      	bne.n	800a5d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5cc:	893b      	ldrh	r3, [r7, #8]
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	629a      	str	r2, [r3, #40]	; 0x28
 800a5d6:	e015      	b.n	800a604 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a5d8:	893b      	ldrh	r3, [r7, #8]
 800a5da:	0a1b      	lsrs	r3, r3, #8
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	69b9      	ldr	r1, [r7, #24]
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 f8d6 	bl	800a79c <I2C_WaitOnTXISFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e012      	b.n	800a620 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5fa:	893b      	ldrh	r3, [r7, #8]
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2200      	movs	r2, #0
 800a60c:	2180      	movs	r1, #128	; 0x80
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 f884 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	80002000 	.word	0x80002000

0800a62c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	817b      	strh	r3, [r7, #10]
 800a63e:	460b      	mov	r3, r1
 800a640:	813b      	strh	r3, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	8979      	ldrh	r1, [r7, #10]
 800a64c:	4b20      	ldr	r3, [pc, #128]	; (800a6d0 <I2C_RequestMemoryRead+0xa4>)
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	2300      	movs	r3, #0
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fa0a 	bl	800aa6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	69b9      	ldr	r1, [r7, #24]
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 f89d 	bl	800a79c <I2C_WaitOnTXISFlagUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e02c      	b.n	800a6c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a66c:	88fb      	ldrh	r3, [r7, #6]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d105      	bne.n	800a67e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a672:	893b      	ldrh	r3, [r7, #8]
 800a674:	b2da      	uxtb	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	629a      	str	r2, [r3, #40]	; 0x28
 800a67c:	e015      	b.n	800a6aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a67e:	893b      	ldrh	r3, [r7, #8]
 800a680:	0a1b      	lsrs	r3, r3, #8
 800a682:	b29b      	uxth	r3, r3
 800a684:	b2da      	uxtb	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a68c:	69fa      	ldr	r2, [r7, #28]
 800a68e:	69b9      	ldr	r1, [r7, #24]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 f883 	bl	800a79c <I2C_WaitOnTXISFlagUntilTimeout>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e012      	b.n	800a6c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a6a0:	893b      	ldrh	r3, [r7, #8]
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2140      	movs	r1, #64	; 0x40
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f831 	bl	800a71c <I2C_WaitOnFlagUntilTimeout>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e000      	b.n	800a6c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	80002000 	.word	0x80002000

0800a6d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d103      	bne.n	800a6f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d007      	beq.n	800a710 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699a      	ldr	r2, [r3, #24]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	619a      	str	r2, [r3, #24]
  }
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	4613      	mov	r3, r2
 800a72a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a72c:	e022      	b.n	800a774 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d01e      	beq.n	800a774 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a736:	f7ff f8e3 	bl	8009900 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d302      	bcc.n	800a74c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d113      	bne.n	800a774 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a750:	f043 0220 	orr.w	r2, r3, #32
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e00f      	b.n	800a794 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4013      	ands	r3, r2
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	429a      	cmp	r2, r3
 800a782:	bf0c      	ite	eq
 800a784:	2301      	moveq	r3, #1
 800a786:	2300      	movne	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d0cd      	beq.n	800a72e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7a8:	e02c      	b.n	800a804 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 f870 	bl	800a894 <I2C_IsErrorOccurred>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e02a      	b.n	800a814 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d01e      	beq.n	800a804 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7c6:	f7ff f89b 	bl	8009900 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d302      	bcc.n	800a7dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d113      	bne.n	800a804 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e0:	f043 0220 	orr.w	r2, r3, #32
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e007      	b.n	800a814 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d1cb      	bne.n	800a7aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a828:	e028      	b.n	800a87c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 f830 	bl	800a894 <I2C_IsErrorOccurred>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e026      	b.n	800a88c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a83e:	f7ff f85f 	bl	8009900 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d302      	bcc.n	800a854 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d113      	bne.n	800a87c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a858:	f043 0220 	orr.w	r2, r3, #32
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2220      	movs	r2, #32
 800a864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e007      	b.n	800a88c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b20      	cmp	r3, #32
 800a888:	d1cf      	bne.n	800a82a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d075      	beq.n	800a9ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2210      	movs	r2, #16
 800a8c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a8c8:	e056      	b.n	800a978 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d0:	d052      	beq.n	800a978 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a8d2:	f7ff f815 	bl	8009900 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d302      	bcc.n	800a8e8 <I2C_IsErrorOccurred+0x54>
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d147      	bne.n	800a978 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a90a:	d12e      	bne.n	800a96a <I2C_IsErrorOccurred+0xd6>
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a912:	d02a      	beq.n	800a96a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a914:	7cfb      	ldrb	r3, [r7, #19]
 800a916:	2b20      	cmp	r3, #32
 800a918:	d027      	beq.n	800a96a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a92a:	f7fe ffe9 	bl	8009900 <HAL_GetTick>
 800a92e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a930:	e01b      	b.n	800a96a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a932:	f7fe ffe5 	bl	8009900 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b19      	cmp	r3, #25
 800a93e:	d914      	bls.n	800a96a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a944:	f043 0220 	orr.w	r2, r3, #32
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2220      	movs	r2, #32
 800a950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b20      	cmp	r3, #32
 800a976:	d1dc      	bne.n	800a932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f003 0320 	and.w	r3, r3, #32
 800a982:	2b20      	cmp	r3, #32
 800a984:	d003      	beq.n	800a98e <I2C_IsErrorOccurred+0xfa>
 800a986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d09d      	beq.n	800a8ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a98e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a992:	2b00      	cmp	r3, #0
 800a994:	d103      	bne.n	800a99e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2220      	movs	r2, #32
 800a99c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	f043 0304 	orr.w	r3, r3, #4
 800a9a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00b      	beq.n	800a9d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	f043 0301 	orr.w	r3, r3, #1
 800a9c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	f043 0308 	orr.w	r3, r3, #8
 800a9e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00b      	beq.n	800aa1a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	f043 0302 	orr.w	r3, r3, #2
 800aa08:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aa1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d01c      	beq.n	800aa5c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff fe56 	bl	800a6d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6859      	ldr	r1, [r3, #4]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <I2C_IsErrorOccurred+0x1d4>)
 800aa34:	400b      	ands	r3, r1
 800aa36:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2220      	movs	r2, #32
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3728      	adds	r7, #40	; 0x28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	fe00e800 	.word	0xfe00e800

0800aa6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	607b      	str	r3, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	817b      	strh	r3, [r7, #10]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa7e:	897b      	ldrh	r3, [r7, #10]
 800aa80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa84:	7a7b      	ldrb	r3, [r7, #9]
 800aa86:	041b      	lsls	r3, r3, #16
 800aa88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	0d5b      	lsrs	r3, r3, #21
 800aaa6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aaaa:	4b08      	ldr	r3, [pc, #32]	; (800aacc <I2C_TransferConfig+0x60>)
 800aaac:	430b      	orrs	r3, r1
 800aaae:	43db      	mvns	r3, r3
 800aab0:	ea02 0103 	and.w	r1, r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aabe:	bf00      	nop
 800aac0:	371c      	adds	r7, #28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	03ff63ff 	.word	0x03ff63ff

0800aad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b20      	cmp	r3, #32
 800aae4:	d138      	bne.n	800ab58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e032      	b.n	800ab5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2224      	movs	r2, #36	; 0x24
 800ab00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0201 	bic.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0201 	orr.w	r2, r2, #1
 800ab42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e000      	b.n	800ab5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab58:	2302      	movs	r3, #2
  }
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b085      	sub	sp, #20
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b20      	cmp	r3, #32
 800ab7a:	d139      	bne.n	800abf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e033      	b.n	800abf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2224      	movs	r2, #36	; 0x24
 800ab96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0201 	bic.w	r2, r2, #1
 800aba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800abb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f042 0201 	orr.w	r2, r2, #1
 800abda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2220      	movs	r2, #32
 800abe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	e000      	b.n	800abf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800abf0:	2302      	movs	r3, #2
  }
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
	...

0800ac00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ac04:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <HAL_PWREx_GetVoltageRange+0x18>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	40007000 	.word	0x40007000

0800ac1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac2a:	d130      	bne.n	800ac8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac2c:	4b23      	ldr	r3, [pc, #140]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac38:	d038      	beq.n	800acac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac3a:	4b20      	ldr	r3, [pc, #128]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac42:	4a1e      	ldr	r2, [pc, #120]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ac4a:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2232      	movs	r2, #50	; 0x32
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	4a1b      	ldr	r2, [pc, #108]	; (800acc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ac56:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5a:	0c9b      	lsrs	r3, r3, #18
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac60:	e002      	b.n	800ac68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac68:	4b14      	ldr	r3, [pc, #80]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac74:	d102      	bne.n	800ac7c <HAL_PWREx_ControlVoltageScaling+0x60>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f2      	bne.n	800ac62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ac7c:	4b0f      	ldr	r3, [pc, #60]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac7e:	695b      	ldr	r3, [r3, #20]
 800ac80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac88:	d110      	bne.n	800acac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e00f      	b.n	800acae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac9a:	d007      	beq.n	800acac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ac9c:	4b07      	ldr	r3, [pc, #28]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aca4:	4a05      	ldr	r2, [pc, #20]	; (800acbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800acaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	40007000 	.word	0x40007000
 800acc0:	20000004 	.word	0x20000004
 800acc4:	431bde83 	.word	0x431bde83

0800acc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	f000 bc02 	b.w	800b4e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acdc:	4b96      	ldr	r3, [pc, #600]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f003 030c 	and.w	r3, r3, #12
 800ace4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ace6:	4b94      	ldr	r3, [pc, #592]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0310 	and.w	r3, r3, #16
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80e4 	beq.w	800aec6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d007      	beq.n	800ad14 <HAL_RCC_OscConfig+0x4c>
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b0c      	cmp	r3, #12
 800ad08:	f040 808b 	bne.w	800ae22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	f040 8087 	bne.w	800ae22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ad14:	4b88      	ldr	r3, [pc, #544]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d005      	beq.n	800ad2c <HAL_RCC_OscConfig+0x64>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e3d9      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1a      	ldr	r2, [r3, #32]
 800ad30:	4b81      	ldr	r3, [pc, #516]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 0308 	and.w	r3, r3, #8
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <HAL_RCC_OscConfig+0x7e>
 800ad3c:	4b7e      	ldr	r3, [pc, #504]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad44:	e005      	b.n	800ad52 <HAL_RCC_OscConfig+0x8a>
 800ad46:	4b7c      	ldr	r3, [pc, #496]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad4c:	091b      	lsrs	r3, r3, #4
 800ad4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d223      	bcs.n	800ad9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fd8c 	bl	800b878 <RCC_SetFlashLatencyFromMSIRange>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e3ba      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad6a:	4b73      	ldr	r3, [pc, #460]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a72      	ldr	r2, [pc, #456]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad70:	f043 0308 	orr.w	r3, r3, #8
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	4b70      	ldr	r3, [pc, #448]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	496d      	ldr	r1, [pc, #436]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad84:	4313      	orrs	r3, r2
 800ad86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad88:	4b6b      	ldr	r3, [pc, #428]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	4968      	ldr	r1, [pc, #416]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	604b      	str	r3, [r1, #4]
 800ad9c:	e025      	b.n	800adea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad9e:	4b66      	ldr	r3, [pc, #408]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a65      	ldr	r2, [pc, #404]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ada4:	f043 0308 	orr.w	r3, r3, #8
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	4b63      	ldr	r3, [pc, #396]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	4960      	ldr	r1, [pc, #384]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800adbc:	4b5e      	ldr	r3, [pc, #376]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	021b      	lsls	r3, r3, #8
 800adca:	495b      	ldr	r1, [pc, #364]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d109      	bne.n	800adea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fd4c 	bl	800b878 <RCC_SetFlashLatencyFromMSIRange>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e37a      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800adea:	f000 fc81 	bl	800b6f0 <HAL_RCC_GetSysClockFreq>
 800adee:	4602      	mov	r2, r0
 800adf0:	4b51      	ldr	r3, [pc, #324]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	091b      	lsrs	r3, r3, #4
 800adf6:	f003 030f 	and.w	r3, r3, #15
 800adfa:	4950      	ldr	r1, [pc, #320]	; (800af3c <HAL_RCC_OscConfig+0x274>)
 800adfc:	5ccb      	ldrb	r3, [r1, r3]
 800adfe:	f003 031f 	and.w	r3, r3, #31
 800ae02:	fa22 f303 	lsr.w	r3, r2, r3
 800ae06:	4a4e      	ldr	r2, [pc, #312]	; (800af40 <HAL_RCC_OscConfig+0x278>)
 800ae08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ae0a:	4b4e      	ldr	r3, [pc, #312]	; (800af44 <HAL_RCC_OscConfig+0x27c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fd26 	bl	8009860 <HAL_InitTick>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d052      	beq.n	800aec4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	e35e      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d032      	beq.n	800ae90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ae2a:	4b43      	ldr	r3, [pc, #268]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a42      	ldr	r2, [pc, #264]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae30:	f043 0301 	orr.w	r3, r3, #1
 800ae34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ae36:	f7fe fd63 	bl	8009900 <HAL_GetTick>
 800ae3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae3c:	e008      	b.n	800ae50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ae3e:	f7fe fd5f 	bl	8009900 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e347      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae50:	4b39      	ldr	r3, [pc, #228]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0302 	and.w	r3, r3, #2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0f0      	beq.n	800ae3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae5c:	4b36      	ldr	r3, [pc, #216]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a35      	ldr	r2, [pc, #212]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae62:	f043 0308 	orr.w	r3, r3, #8
 800ae66:	6013      	str	r3, [r2, #0]
 800ae68:	4b33      	ldr	r3, [pc, #204]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	4930      	ldr	r1, [pc, #192]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae7a:	4b2f      	ldr	r3, [pc, #188]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	492b      	ldr	r1, [pc, #172]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	604b      	str	r3, [r1, #4]
 800ae8e:	e01a      	b.n	800aec6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ae90:	4b29      	ldr	r3, [pc, #164]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a28      	ldr	r2, [pc, #160]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800ae96:	f023 0301 	bic.w	r3, r3, #1
 800ae9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ae9c:	f7fe fd30 	bl	8009900 <HAL_GetTick>
 800aea0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800aea2:	e008      	b.n	800aeb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aea4:	f7fe fd2c 	bl	8009900 <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d901      	bls.n	800aeb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e314      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800aeb6:	4b20      	ldr	r3, [pc, #128]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0302 	and.w	r3, r3, #2
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f0      	bne.n	800aea4 <HAL_RCC_OscConfig+0x1dc>
 800aec2:	e000      	b.n	800aec6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d073      	beq.n	800afba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	2b08      	cmp	r3, #8
 800aed6:	d005      	beq.n	800aee4 <HAL_RCC_OscConfig+0x21c>
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2b0c      	cmp	r3, #12
 800aedc:	d10e      	bne.n	800aefc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d10b      	bne.n	800aefc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aee4:	4b14      	ldr	r3, [pc, #80]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d063      	beq.n	800afb8 <HAL_RCC_OscConfig+0x2f0>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d15f      	bne.n	800afb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e2f1      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af04:	d106      	bne.n	800af14 <HAL_RCC_OscConfig+0x24c>
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a0b      	ldr	r2, [pc, #44]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800af0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	e025      	b.n	800af60 <HAL_RCC_OscConfig+0x298>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af1c:	d114      	bne.n	800af48 <HAL_RCC_OscConfig+0x280>
 800af1e:	4b06      	ldr	r3, [pc, #24]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a05      	ldr	r2, [pc, #20]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800af24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	4b03      	ldr	r3, [pc, #12]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a02      	ldr	r2, [pc, #8]	; (800af38 <HAL_RCC_OscConfig+0x270>)
 800af30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	e013      	b.n	800af60 <HAL_RCC_OscConfig+0x298>
 800af38:	40021000 	.word	0x40021000
 800af3c:	0800fc14 	.word	0x0800fc14
 800af40:	20000004 	.word	0x20000004
 800af44:	2000000c 	.word	0x2000000c
 800af48:	4ba0      	ldr	r3, [pc, #640]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a9f      	ldr	r2, [pc, #636]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800af4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	4b9d      	ldr	r3, [pc, #628]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a9c      	ldr	r2, [pc, #624]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800af5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d013      	beq.n	800af90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af68:	f7fe fcca 	bl	8009900 <HAL_GetTick>
 800af6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af6e:	e008      	b.n	800af82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af70:	f7fe fcc6 	bl	8009900 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b64      	cmp	r3, #100	; 0x64
 800af7c:	d901      	bls.n	800af82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e2ae      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af82:	4b92      	ldr	r3, [pc, #584]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCC_OscConfig+0x2a8>
 800af8e:	e014      	b.n	800afba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af90:	f7fe fcb6 	bl	8009900 <HAL_GetTick>
 800af94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af96:	e008      	b.n	800afaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af98:	f7fe fcb2 	bl	8009900 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b64      	cmp	r3, #100	; 0x64
 800afa4:	d901      	bls.n	800afaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e29a      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afaa:	4b88      	ldr	r3, [pc, #544]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1f0      	bne.n	800af98 <HAL_RCC_OscConfig+0x2d0>
 800afb6:	e000      	b.n	800afba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d060      	beq.n	800b088 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d005      	beq.n	800afd8 <HAL_RCC_OscConfig+0x310>
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2b0c      	cmp	r3, #12
 800afd0:	d119      	bne.n	800b006 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d116      	bne.n	800b006 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afd8:	4b7c      	ldr	r3, [pc, #496]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d005      	beq.n	800aff0 <HAL_RCC_OscConfig+0x328>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e277      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aff0:	4b76      	ldr	r3, [pc, #472]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	061b      	lsls	r3, r3, #24
 800affe:	4973      	ldr	r1, [pc, #460]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b000:	4313      	orrs	r3, r2
 800b002:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b004:	e040      	b.n	800b088 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d023      	beq.n	800b056 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b00e:	4b6f      	ldr	r3, [pc, #444]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a6e      	ldr	r2, [pc, #440]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b01a:	f7fe fc71 	bl	8009900 <HAL_GetTick>
 800b01e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b020:	e008      	b.n	800b034 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b022:	f7fe fc6d 	bl	8009900 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d901      	bls.n	800b034 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e255      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b034:	4b65      	ldr	r3, [pc, #404]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0f0      	beq.n	800b022 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b040:	4b62      	ldr	r3, [pc, #392]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	061b      	lsls	r3, r3, #24
 800b04e:	495f      	ldr	r1, [pc, #380]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b050:	4313      	orrs	r3, r2
 800b052:	604b      	str	r3, [r1, #4]
 800b054:	e018      	b.n	800b088 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b056:	4b5d      	ldr	r3, [pc, #372]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a5c      	ldr	r2, [pc, #368]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b05c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b062:	f7fe fc4d 	bl	8009900 <HAL_GetTick>
 800b066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b068:	e008      	b.n	800b07c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b06a:	f7fe fc49 	bl	8009900 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	2b02      	cmp	r3, #2
 800b076:	d901      	bls.n	800b07c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e231      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b07c:	4b53      	ldr	r3, [pc, #332]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1f0      	bne.n	800b06a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0308 	and.w	r3, r3, #8
 800b090:	2b00      	cmp	r3, #0
 800b092:	d03c      	beq.n	800b10e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01c      	beq.n	800b0d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b09c:	4b4b      	ldr	r3, [pc, #300]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b09e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0a2:	4a4a      	ldr	r2, [pc, #296]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b0a4:	f043 0301 	orr.w	r3, r3, #1
 800b0a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0ac:	f7fe fc28 	bl	8009900 <HAL_GetTick>
 800b0b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0b2:	e008      	b.n	800b0c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0b4:	f7fe fc24 	bl	8009900 <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d901      	bls.n	800b0c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e20c      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0c6:	4b41      	ldr	r3, [pc, #260]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b0c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0ef      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x3ec>
 800b0d4:	e01b      	b.n	800b10e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0d6:	4b3d      	ldr	r3, [pc, #244]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0dc:	4a3b      	ldr	r2, [pc, #236]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b0de:	f023 0301 	bic.w	r3, r3, #1
 800b0e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0e6:	f7fe fc0b 	bl	8009900 <HAL_GetTick>
 800b0ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0ec:	e008      	b.n	800b100 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0ee:	f7fe fc07 	bl	8009900 <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d901      	bls.n	800b100 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e1ef      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b100:	4b32      	ldr	r3, [pc, #200]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b106:	f003 0302 	and.w	r3, r3, #2
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1ef      	bne.n	800b0ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0304 	and.w	r3, r3, #4
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 80a6 	beq.w	800b268 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b11c:	2300      	movs	r3, #0
 800b11e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b120:	4b2a      	ldr	r3, [pc, #168]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10d      	bne.n	800b148 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b12c:	4b27      	ldr	r3, [pc, #156]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b130:	4a26      	ldr	r2, [pc, #152]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b136:	6593      	str	r3, [r2, #88]	; 0x58
 800b138:	4b24      	ldr	r3, [pc, #144]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b140:	60bb      	str	r3, [r7, #8]
 800b142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b144:	2301      	movs	r3, #1
 800b146:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b148:	4b21      	ldr	r3, [pc, #132]	; (800b1d0 <HAL_RCC_OscConfig+0x508>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b150:	2b00      	cmp	r3, #0
 800b152:	d118      	bne.n	800b186 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b154:	4b1e      	ldr	r3, [pc, #120]	; (800b1d0 <HAL_RCC_OscConfig+0x508>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a1d      	ldr	r2, [pc, #116]	; (800b1d0 <HAL_RCC_OscConfig+0x508>)
 800b15a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b15e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b160:	f7fe fbce 	bl	8009900 <HAL_GetTick>
 800b164:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b166:	e008      	b.n	800b17a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b168:	f7fe fbca 	bl	8009900 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b02      	cmp	r3, #2
 800b174:	d901      	bls.n	800b17a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e1b2      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b17a:	4b15      	ldr	r3, [pc, #84]	; (800b1d0 <HAL_RCC_OscConfig+0x508>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0f0      	beq.n	800b168 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d108      	bne.n	800b1a0 <HAL_RCC_OscConfig+0x4d8>
 800b18e:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b194:	4a0d      	ldr	r2, [pc, #52]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b196:	f043 0301 	orr.w	r3, r3, #1
 800b19a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b19e:	e029      	b.n	800b1f4 <HAL_RCC_OscConfig+0x52c>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	d115      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x50c>
 800b1a8:	4b08      	ldr	r3, [pc, #32]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ae:	4a07      	ldr	r2, [pc, #28]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b1b0:	f043 0304 	orr.w	r3, r3, #4
 800b1b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1b8:	4b04      	ldr	r3, [pc, #16]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1be:	4a03      	ldr	r2, [pc, #12]	; (800b1cc <HAL_RCC_OscConfig+0x504>)
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1c8:	e014      	b.n	800b1f4 <HAL_RCC_OscConfig+0x52c>
 800b1ca:	bf00      	nop
 800b1cc:	40021000 	.word	0x40021000
 800b1d0:	40007000 	.word	0x40007000
 800b1d4:	4b9a      	ldr	r3, [pc, #616]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1da:	4a99      	ldr	r2, [pc, #612]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b1dc:	f023 0301 	bic.w	r3, r3, #1
 800b1e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1e4:	4b96      	ldr	r3, [pc, #600]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ea:	4a95      	ldr	r2, [pc, #596]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b1ec:	f023 0304 	bic.w	r3, r3, #4
 800b1f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d016      	beq.n	800b22a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1fc:	f7fe fb80 	bl	8009900 <HAL_GetTick>
 800b200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b202:	e00a      	b.n	800b21a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b204:	f7fe fb7c 	bl	8009900 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b212:	4293      	cmp	r3, r2
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e162      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b21a:	4b89      	ldr	r3, [pc, #548]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0ed      	beq.n	800b204 <HAL_RCC_OscConfig+0x53c>
 800b228:	e015      	b.n	800b256 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b22a:	f7fe fb69 	bl	8009900 <HAL_GetTick>
 800b22e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b230:	e00a      	b.n	800b248 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b232:	f7fe fb65 	bl	8009900 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b240:	4293      	cmp	r3, r2
 800b242:	d901      	bls.n	800b248 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e14b      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b248:	4b7d      	ldr	r3, [pc, #500]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1ed      	bne.n	800b232 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b256:	7ffb      	ldrb	r3, [r7, #31]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d105      	bne.n	800b268 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b25c:	4b78      	ldr	r3, [pc, #480]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b260:	4a77      	ldr	r2, [pc, #476]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b266:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0320 	and.w	r3, r3, #32
 800b270:	2b00      	cmp	r3, #0
 800b272:	d03c      	beq.n	800b2ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01c      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b27c:	4b70      	ldr	r3, [pc, #448]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b27e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b282:	4a6f      	ldr	r2, [pc, #444]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b284:	f043 0301 	orr.w	r3, r3, #1
 800b288:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b28c:	f7fe fb38 	bl	8009900 <HAL_GetTick>
 800b290:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b294:	f7fe fb34 	bl	8009900 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e11c      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2a6:	4b66      	ldr	r3, [pc, #408]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b2a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0ef      	beq.n	800b294 <HAL_RCC_OscConfig+0x5cc>
 800b2b4:	e01b      	b.n	800b2ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2b6:	4b62      	ldr	r3, [pc, #392]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b2b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2bc:	4a60      	ldr	r2, [pc, #384]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c6:	f7fe fb1b 	bl	8009900 <HAL_GetTick>
 800b2ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2ce:	f7fe fb17 	bl	8009900 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d901      	bls.n	800b2e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e0ff      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2e0:	4b57      	ldr	r3, [pc, #348]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b2e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1ef      	bne.n	800b2ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 80f3 	beq.w	800b4de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	f040 80c9 	bne.w	800b494 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b302:	4b4f      	ldr	r3, [pc, #316]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	f003 0203 	and.w	r2, r3, #3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	429a      	cmp	r2, r3
 800b314:	d12c      	bne.n	800b370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b320:	3b01      	subs	r3, #1
 800b322:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b324:	429a      	cmp	r2, r3
 800b326:	d123      	bne.n	800b370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b332:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b334:	429a      	cmp	r2, r3
 800b336:	d11b      	bne.n	800b370 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b342:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b344:	429a      	cmp	r2, r3
 800b346:	d113      	bne.n	800b370 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b352:	085b      	lsrs	r3, r3, #1
 800b354:	3b01      	subs	r3, #1
 800b356:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b358:	429a      	cmp	r2, r3
 800b35a:	d109      	bne.n	800b370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	085b      	lsrs	r3, r3, #1
 800b368:	3b01      	subs	r3, #1
 800b36a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d06b      	beq.n	800b448 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	2b0c      	cmp	r3, #12
 800b374:	d062      	beq.n	800b43c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b376:	4b32      	ldr	r3, [pc, #200]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e0ac      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b386:	4b2e      	ldr	r3, [pc, #184]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a2d      	ldr	r2, [pc, #180]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b38c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b390:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b392:	f7fe fab5 	bl	8009900 <HAL_GetTick>
 800b396:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b398:	e008      	b.n	800b3ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b39a:	f7fe fab1 	bl	8009900 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d901      	bls.n	800b3ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e099      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3ac:	4b24      	ldr	r3, [pc, #144]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f0      	bne.n	800b39a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3b8:	4b21      	ldr	r3, [pc, #132]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	4b21      	ldr	r3, [pc, #132]	; (800b444 <HAL_RCC_OscConfig+0x77c>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3c8:	3a01      	subs	r2, #1
 800b3ca:	0112      	lsls	r2, r2, #4
 800b3cc:	4311      	orrs	r1, r2
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3d2:	0212      	lsls	r2, r2, #8
 800b3d4:	4311      	orrs	r1, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b3da:	0852      	lsrs	r2, r2, #1
 800b3dc:	3a01      	subs	r2, #1
 800b3de:	0552      	lsls	r2, r2, #21
 800b3e0:	4311      	orrs	r1, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b3e6:	0852      	lsrs	r2, r2, #1
 800b3e8:	3a01      	subs	r2, #1
 800b3ea:	0652      	lsls	r2, r2, #25
 800b3ec:	4311      	orrs	r1, r2
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b3f2:	06d2      	lsls	r2, r2, #27
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	4912      	ldr	r1, [pc, #72]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b3fc:	4b10      	ldr	r3, [pc, #64]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a0f      	ldr	r2, [pc, #60]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b408:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	4a0c      	ldr	r2, [pc, #48]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b40e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b414:	f7fe fa74 	bl	8009900 <HAL_GetTick>
 800b418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b41a:	e008      	b.n	800b42e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b41c:	f7fe fa70 	bl	8009900 <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2b02      	cmp	r3, #2
 800b428:	d901      	bls.n	800b42e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e058      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b42e:	4b04      	ldr	r3, [pc, #16]	; (800b440 <HAL_RCC_OscConfig+0x778>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0f0      	beq.n	800b41c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b43a:	e050      	b.n	800b4de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e04f      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
 800b440:	40021000 	.word	0x40021000
 800b444:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b448:	4b27      	ldr	r3, [pc, #156]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d144      	bne.n	800b4de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b454:	4b24      	ldr	r3, [pc, #144]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a23      	ldr	r2, [pc, #140]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b45a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b45e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b460:	4b21      	ldr	r3, [pc, #132]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	4a20      	ldr	r2, [pc, #128]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b46a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b46c:	f7fe fa48 	bl	8009900 <HAL_GetTick>
 800b470:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b472:	e008      	b.n	800b486 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b474:	f7fe fa44 	bl	8009900 <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d901      	bls.n	800b486 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e02c      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f0      	beq.n	800b474 <HAL_RCC_OscConfig+0x7ac>
 800b492:	e024      	b.n	800b4de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2b0c      	cmp	r3, #12
 800b498:	d01f      	beq.n	800b4da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b49a:	4b13      	ldr	r3, [pc, #76]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a12      	ldr	r2, [pc, #72]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b4a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a6:	f7fe fa2b 	bl	8009900 <HAL_GetTick>
 800b4aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4ac:	e008      	b.n	800b4c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ae:	f7fe fa27 	bl	8009900 <HAL_GetTick>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d901      	bls.n	800b4c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	e00f      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4c0:	4b09      	ldr	r3, [pc, #36]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f0      	bne.n	800b4ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	4905      	ldr	r1, [pc, #20]	; (800b4e8 <HAL_RCC_OscConfig+0x820>)
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <HAL_RCC_OscConfig+0x824>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	60cb      	str	r3, [r1, #12]
 800b4d8:	e001      	b.n	800b4de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	40021000 	.word	0x40021000
 800b4ec:	feeefffc 	.word	0xfeeefffc

0800b4f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e0e7      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b504:	4b75      	ldr	r3, [pc, #468]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d910      	bls.n	800b534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b512:	4b72      	ldr	r3, [pc, #456]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f023 0207 	bic.w	r2, r3, #7
 800b51a:	4970      	ldr	r1, [pc, #448]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	4313      	orrs	r3, r2
 800b520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b522:	4b6e      	ldr	r3, [pc, #440]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d001      	beq.n	800b534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e0cf      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0302 	and.w	r3, r3, #2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689a      	ldr	r2, [r3, #8]
 800b544:	4b66      	ldr	r3, [pc, #408]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d908      	bls.n	800b562 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b550:	4b63      	ldr	r3, [pc, #396]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	4960      	ldr	r1, [pc, #384]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d04c      	beq.n	800b608 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b03      	cmp	r3, #3
 800b574:	d107      	bne.n	800b586 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b576:	4b5a      	ldr	r3, [pc, #360]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d121      	bne.n	800b5c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e0a6      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d107      	bne.n	800b59e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b58e:	4b54      	ldr	r3, [pc, #336]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b596:	2b00      	cmp	r3, #0
 800b598:	d115      	bne.n	800b5c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e09a      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d107      	bne.n	800b5b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b5a6:	4b4e      	ldr	r3, [pc, #312]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d109      	bne.n	800b5c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e08e      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e086      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b5c6:	4b46      	ldr	r3, [pc, #280]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f023 0203 	bic.w	r2, r3, #3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	4943      	ldr	r1, [pc, #268]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5d8:	f7fe f992 	bl	8009900 <HAL_GetTick>
 800b5dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5de:	e00a      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5e0:	f7fe f98e 	bl	8009900 <HAL_GetTick>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e06e      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5f6:	4b3a      	ldr	r3, [pc, #232]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f003 020c 	and.w	r2, r3, #12
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	429a      	cmp	r2, r3
 800b606:	d1eb      	bne.n	800b5e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d010      	beq.n	800b636 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b620:	429a      	cmp	r2, r3
 800b622:	d208      	bcs.n	800b636 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b624:	4b2e      	ldr	r3, [pc, #184]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	492b      	ldr	r1, [pc, #172]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b632:	4313      	orrs	r3, r2
 800b634:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b636:	4b29      	ldr	r3, [pc, #164]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0307 	and.w	r3, r3, #7
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d210      	bcs.n	800b666 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b644:	4b25      	ldr	r3, [pc, #148]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f023 0207 	bic.w	r2, r3, #7
 800b64c:	4923      	ldr	r1, [pc, #140]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	4313      	orrs	r3, r2
 800b652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b654:	4b21      	ldr	r3, [pc, #132]	; (800b6dc <HAL_RCC_ClockConfig+0x1ec>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0307 	and.w	r3, r3, #7
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d001      	beq.n	800b666 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e036      	b.n	800b6d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d008      	beq.n	800b684 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b672:	4b1b      	ldr	r3, [pc, #108]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	4918      	ldr	r1, [pc, #96]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b680:	4313      	orrs	r3, r2
 800b682:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0308 	and.w	r3, r3, #8
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b690:	4b13      	ldr	r3, [pc, #76]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	4910      	ldr	r1, [pc, #64]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b6a4:	f000 f824 	bl	800b6f0 <HAL_RCC_GetSysClockFreq>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <HAL_RCC_ClockConfig+0x1f0>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	091b      	lsrs	r3, r3, #4
 800b6b0:	f003 030f 	and.w	r3, r3, #15
 800b6b4:	490b      	ldr	r1, [pc, #44]	; (800b6e4 <HAL_RCC_ClockConfig+0x1f4>)
 800b6b6:	5ccb      	ldrb	r3, [r1, r3]
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c0:	4a09      	ldr	r2, [pc, #36]	; (800b6e8 <HAL_RCC_ClockConfig+0x1f8>)
 800b6c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b6c4:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <HAL_RCC_ClockConfig+0x1fc>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe f8c9 	bl	8009860 <HAL_InitTick>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	72fb      	strb	r3, [r7, #11]

  return status;
 800b6d2:	7afb      	ldrb	r3, [r7, #11]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	40022000 	.word	0x40022000
 800b6e0:	40021000 	.word	0x40021000
 800b6e4:	0800fc14 	.word	0x0800fc14
 800b6e8:	20000004 	.word	0x20000004
 800b6ec:	2000000c 	.word	0x2000000c

0800b6f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b089      	sub	sp, #36	; 0x24
 800b6f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	61fb      	str	r3, [r7, #28]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6fe:	4b3e      	ldr	r3, [pc, #248]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f003 030c 	and.w	r3, r3, #12
 800b706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b708:	4b3b      	ldr	r3, [pc, #236]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f003 0303 	and.w	r3, r3, #3
 800b710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <HAL_RCC_GetSysClockFreq+0x34>
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	2b0c      	cmp	r3, #12
 800b71c:	d121      	bne.n	800b762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d11e      	bne.n	800b762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b724:	4b34      	ldr	r3, [pc, #208]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0308 	and.w	r3, r3, #8
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d107      	bne.n	800b740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b730:	4b31      	ldr	r3, [pc, #196]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b736:	0a1b      	lsrs	r3, r3, #8
 800b738:	f003 030f 	and.w	r3, r3, #15
 800b73c:	61fb      	str	r3, [r7, #28]
 800b73e:	e005      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b740:	4b2d      	ldr	r3, [pc, #180]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	091b      	lsrs	r3, r3, #4
 800b746:	f003 030f 	and.w	r3, r3, #15
 800b74a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b74c:	4a2b      	ldr	r2, [pc, #172]	; (800b7fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10d      	bne.n	800b778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b760:	e00a      	b.n	800b778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b04      	cmp	r3, #4
 800b766:	d102      	bne.n	800b76e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <HAL_RCC_GetSysClockFreq+0x110>)
 800b76a:	61bb      	str	r3, [r7, #24]
 800b76c:	e004      	b.n	800b778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b08      	cmp	r3, #8
 800b772:	d101      	bne.n	800b778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b774:	4b23      	ldr	r3, [pc, #140]	; (800b804 <HAL_RCC_GetSysClockFreq+0x114>)
 800b776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2b0c      	cmp	r3, #12
 800b77c:	d134      	bne.n	800b7e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b77e:	4b1e      	ldr	r3, [pc, #120]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d003      	beq.n	800b796 <HAL_RCC_GetSysClockFreq+0xa6>
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2b03      	cmp	r3, #3
 800b792:	d003      	beq.n	800b79c <HAL_RCC_GetSysClockFreq+0xac>
 800b794:	e005      	b.n	800b7a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b796:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <HAL_RCC_GetSysClockFreq+0x110>)
 800b798:	617b      	str	r3, [r7, #20]
      break;
 800b79a:	e005      	b.n	800b7a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b79c:	4b19      	ldr	r3, [pc, #100]	; (800b804 <HAL_RCC_GetSysClockFreq+0x114>)
 800b79e:	617b      	str	r3, [r7, #20]
      break;
 800b7a0:	e002      	b.n	800b7a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	617b      	str	r3, [r7, #20]
      break;
 800b7a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b7a8:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	091b      	lsrs	r3, r3, #4
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	fb03 f202 	mul.w	r2, r3, r2
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b7ce:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	0e5b      	lsrs	r3, r3, #25
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	3301      	adds	r3, #1
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3724      	adds	r7, #36	; 0x24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	0800fc2c 	.word	0x0800fc2c
 800b800:	00f42400 	.word	0x00f42400
 800b804:	007a1200 	.word	0x007a1200

0800b808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b808:	b480      	push	{r7}
 800b80a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b80c:	4b03      	ldr	r3, [pc, #12]	; (800b81c <HAL_RCC_GetHCLKFreq+0x14>)
 800b80e:	681b      	ldr	r3, [r3, #0]
}
 800b810:	4618      	mov	r0, r3
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	20000004 	.word	0x20000004

0800b820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b824:	f7ff fff0 	bl	800b808 <HAL_RCC_GetHCLKFreq>
 800b828:	4602      	mov	r2, r0
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	0a1b      	lsrs	r3, r3, #8
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	4904      	ldr	r1, [pc, #16]	; (800b848 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b836:	5ccb      	ldrb	r3, [r1, r3]
 800b838:	f003 031f 	and.w	r3, r3, #31
 800b83c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b840:	4618      	mov	r0, r3
 800b842:	bd80      	pop	{r7, pc}
 800b844:	40021000 	.word	0x40021000
 800b848:	0800fc24 	.word	0x0800fc24

0800b84c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b850:	f7ff ffda 	bl	800b808 <HAL_RCC_GetHCLKFreq>
 800b854:	4602      	mov	r2, r0
 800b856:	4b06      	ldr	r3, [pc, #24]	; (800b870 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	0adb      	lsrs	r3, r3, #11
 800b85c:	f003 0307 	and.w	r3, r3, #7
 800b860:	4904      	ldr	r1, [pc, #16]	; (800b874 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b862:	5ccb      	ldrb	r3, [r1, r3]
 800b864:	f003 031f 	and.w	r3, r3, #31
 800b868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	40021000 	.word	0x40021000
 800b874:	0800fc24 	.word	0x0800fc24

0800b878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b884:	4b2a      	ldr	r3, [pc, #168]	; (800b930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b890:	f7ff f9b6 	bl	800ac00 <HAL_PWREx_GetVoltageRange>
 800b894:	6178      	str	r0, [r7, #20]
 800b896:	e014      	b.n	800b8c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b898:	4b25      	ldr	r3, [pc, #148]	; (800b930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b89c:	4a24      	ldr	r2, [pc, #144]	; (800b930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8a4:	4b22      	ldr	r3, [pc, #136]	; (800b930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b8b0:	f7ff f9a6 	bl	800ac00 <HAL_PWREx_GetVoltageRange>
 800b8b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b8b6:	4b1e      	ldr	r3, [pc, #120]	; (800b930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ba:	4a1d      	ldr	r2, [pc, #116]	; (800b930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b8bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c8:	d10b      	bne.n	800b8e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b80      	cmp	r3, #128	; 0x80
 800b8ce:	d919      	bls.n	800b904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2ba0      	cmp	r3, #160	; 0xa0
 800b8d4:	d902      	bls.n	800b8dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	613b      	str	r3, [r7, #16]
 800b8da:	e013      	b.n	800b904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b8dc:	2301      	movs	r3, #1
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	e010      	b.n	800b904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b80      	cmp	r3, #128	; 0x80
 800b8e6:	d902      	bls.n	800b8ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	613b      	str	r3, [r7, #16]
 800b8ec:	e00a      	b.n	800b904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b80      	cmp	r3, #128	; 0x80
 800b8f2:	d102      	bne.n	800b8fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	e004      	b.n	800b904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b70      	cmp	r3, #112	; 0x70
 800b8fe:	d101      	bne.n	800b904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b900:	2301      	movs	r3, #1
 800b902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b904:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f023 0207 	bic.w	r2, r3, #7
 800b90c:	4909      	ldr	r1, [pc, #36]	; (800b934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b914:	4b07      	ldr	r3, [pc, #28]	; (800b934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d001      	beq.n	800b926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40021000 	.word	0x40021000
 800b934:	40022000 	.word	0x40022000

0800b938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b940:	2300      	movs	r3, #0
 800b942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b944:	2300      	movs	r3, #0
 800b946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b950:	2b00      	cmp	r3, #0
 800b952:	d031      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b95c:	d01a      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b95e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b962:	d814      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b96c:	d10f      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b96e:	4b5d      	ldr	r3, [pc, #372]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	4a5c      	ldr	r2, [pc, #368]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b978:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b97a:	e00c      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3304      	adds	r3, #4
 800b980:	2100      	movs	r1, #0
 800b982:	4618      	mov	r0, r3
 800b984:	f000 fa22 	bl	800bdcc <RCCEx_PLLSAI1_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b98c:	e003      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	74fb      	strb	r3, [r7, #19]
      break;
 800b992:	e000      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b994:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b996:	7cfb      	ldrb	r3, [r7, #19]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10b      	bne.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b99c:	4b51      	ldr	r3, [pc, #324]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9aa:	494e      	ldr	r1, [pc, #312]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b9b2:	e001      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b4:	7cfb      	ldrb	r3, [r7, #19]
 800b9b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 809e 	beq.w	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b9ca:	4b46      	ldr	r3, [pc, #280]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00d      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9e0:	4b40      	ldr	r3, [pc, #256]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b9e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e4:	4a3f      	ldr	r2, [pc, #252]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b9e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ea:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ec:	4b3d      	ldr	r3, [pc, #244]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9f4:	60bb      	str	r3, [r7, #8]
 800b9f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9fc:	4b3a      	ldr	r3, [pc, #232]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a39      	ldr	r2, [pc, #228]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ba02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba08:	f7fd ff7a 	bl	8009900 <HAL_GetTick>
 800ba0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ba0e:	e009      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba10:	f7fd ff76 	bl	8009900 <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d902      	bls.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	74fb      	strb	r3, [r7, #19]
        break;
 800ba22:	e005      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ba24:	4b30      	ldr	r3, [pc, #192]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d0ef      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800ba30:	7cfb      	ldrb	r3, [r7, #19]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d15a      	bne.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba36:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01e      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d019      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba5e:	4b21      	ldr	r3, [pc, #132]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba64:	4a1f      	ldr	r2, [pc, #124]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba6e:	4b1d      	ldr	r3, [pc, #116]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba74:	4a1b      	ldr	r2, [pc, #108]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ba7e:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d016      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba90:	f7fd ff36 	bl	8009900 <HAL_GetTick>
 800ba94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba96:	e00b      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba98:	f7fd ff32 	bl	8009900 <HAL_GetTick>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d902      	bls.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	74fb      	strb	r3, [r7, #19]
            break;
 800baae:	e006      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bab0:	4b0c      	ldr	r3, [pc, #48]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0ec      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800babe:	7cfb      	ldrb	r3, [r7, #19]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10b      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bac4:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bad2:	4904      	ldr	r1, [pc, #16]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bada:	e009      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800badc:	7cfb      	ldrb	r3, [r7, #19]
 800bade:	74bb      	strb	r3, [r7, #18]
 800bae0:	e006      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800bae2:	bf00      	nop
 800bae4:	40021000 	.word	0x40021000
 800bae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baec:	7cfb      	ldrb	r3, [r7, #19]
 800baee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800baf0:	7c7b      	ldrb	r3, [r7, #17]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d105      	bne.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800baf6:	4b8d      	ldr	r3, [pc, #564]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800baf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafa:	4a8c      	ldr	r2, [pc, #560]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bafc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb0e:	4b87      	ldr	r3, [pc, #540]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb14:	f023 0203 	bic.w	r2, r3, #3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	4983      	ldr	r1, [pc, #524]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00a      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb30:	4b7e      	ldr	r3, [pc, #504]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb36:	f023 020c 	bic.w	r2, r3, #12
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	497b      	ldr	r1, [pc, #492]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb40:	4313      	orrs	r3, r2
 800bb42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0304 	and.w	r3, r3, #4
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00a      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb52:	4b76      	ldr	r3, [pc, #472]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb60:	4972      	ldr	r1, [pc, #456]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0320 	and.w	r3, r3, #32
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00a      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb74:	4b6d      	ldr	r3, [pc, #436]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	496a      	ldr	r1, [pc, #424]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb96:	4b65      	ldr	r3, [pc, #404]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba4:	4961      	ldr	r1, [pc, #388]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bbb8:	4b5c      	ldr	r3, [pc, #368]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bbba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	4959      	ldr	r1, [pc, #356]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bbda:	4b54      	ldr	r3, [pc, #336]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe8:	4950      	ldr	r1, [pc, #320]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bbfc:	4b4b      	ldr	r3, [pc, #300]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc0a:	4948      	ldr	r1, [pc, #288]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc1e:	4b43      	ldr	r3, [pc, #268]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2c:	493f      	ldr	r1, [pc, #252]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d028      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc40:	4b3a      	ldr	r3, [pc, #232]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc4e:	4937      	ldr	r1, [pc, #220]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc5e:	d106      	bne.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc60:	4b32      	ldr	r3, [pc, #200]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	4a31      	ldr	r2, [pc, #196]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bc66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc6a:	60d3      	str	r3, [r2, #12]
 800bc6c:	e011      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc76:	d10c      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 f8a4 	bl	800bdcc <RCCEx_PLLSAI1_Config>
 800bc84:	4603      	mov	r3, r0
 800bc86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bc88:	7cfb      	ldrb	r3, [r7, #19]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800bc8e:	7cfb      	ldrb	r3, [r7, #19]
 800bc90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d028      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bc9e:	4b23      	ldr	r3, [pc, #140]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcac:	491f      	ldr	r1, [pc, #124]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcbc:	d106      	bne.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcbe:	4b1b      	ldr	r3, [pc, #108]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	4a1a      	ldr	r2, [pc, #104]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bcc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcc8:	60d3      	str	r3, [r2, #12]
 800bcca:	e011      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcd4:	d10c      	bne.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	2101      	movs	r1, #1
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f875 	bl	800bdcc <RCCEx_PLLSAI1_Config>
 800bce2:	4603      	mov	r3, r0
 800bce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bce6:	7cfb      	ldrb	r3, [r7, #19]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800bcec:	7cfb      	ldrb	r3, [r7, #19]
 800bcee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d02b      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd0a:	4908      	ldr	r1, [pc, #32]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd1a:	d109      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd1c:	4b03      	ldr	r3, [pc, #12]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	4a02      	ldr	r2, [pc, #8]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bd22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd26:	60d3      	str	r3, [r2, #12]
 800bd28:	e014      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800bd2a:	bf00      	nop
 800bd2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd38:	d10c      	bne.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	2101      	movs	r1, #1
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 f843 	bl	800bdcc <RCCEx_PLLSAI1_Config>
 800bd46:	4603      	mov	r3, r0
 800bd48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bd4a:	7cfb      	ldrb	r3, [r7, #19]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800bd50:	7cfb      	ldrb	r3, [r7, #19]
 800bd52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d01c      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd60:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6e:	4916      	ldr	r1, [pc, #88]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd7e:	d10c      	bne.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	2102      	movs	r1, #2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f820 	bl	800bdcc <RCCEx_PLLSAI1_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bd90:	7cfb      	ldrb	r3, [r7, #19]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800bd96:	7cfb      	ldrb	r3, [r7, #19]
 800bd98:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bda6:	4b08      	ldr	r3, [pc, #32]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb4:	4904      	ldr	r1, [pc, #16]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bdbc:	7cbb      	ldrb	r3, [r7, #18]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	40021000 	.word	0x40021000

0800bdcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bdda:	4b74      	ldr	r3, [pc, #464]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d018      	beq.n	800be18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800bde6:	4b71      	ldr	r3, [pc, #452]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	f003 0203 	and.w	r2, r3, #3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d10d      	bne.n	800be12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
       ||
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d009      	beq.n	800be12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800bdfe:	4b6b      	ldr	r3, [pc, #428]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	091b      	lsrs	r3, r3, #4
 800be04:	f003 0307 	and.w	r3, r3, #7
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
       ||
 800be0e:	429a      	cmp	r2, r3
 800be10:	d047      	beq.n	800bea2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	73fb      	strb	r3, [r7, #15]
 800be16:	e044      	b.n	800bea2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d018      	beq.n	800be52 <RCCEx_PLLSAI1_Config+0x86>
 800be20:	2b03      	cmp	r3, #3
 800be22:	d825      	bhi.n	800be70 <RCCEx_PLLSAI1_Config+0xa4>
 800be24:	2b01      	cmp	r3, #1
 800be26:	d002      	beq.n	800be2e <RCCEx_PLLSAI1_Config+0x62>
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d009      	beq.n	800be40 <RCCEx_PLLSAI1_Config+0x74>
 800be2c:	e020      	b.n	800be70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800be2e:	4b5f      	ldr	r3, [pc, #380]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b00      	cmp	r3, #0
 800be38:	d11d      	bne.n	800be76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be3e:	e01a      	b.n	800be76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800be40:	4b5a      	ldr	r3, [pc, #360]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d116      	bne.n	800be7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be50:	e013      	b.n	800be7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800be52:	4b56      	ldr	r3, [pc, #344]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10f      	bne.n	800be7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800be5e:	4b53      	ldr	r3, [pc, #332]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d109      	bne.n	800be7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be6e:	e006      	b.n	800be7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	73fb      	strb	r3, [r7, #15]
      break;
 800be74:	e004      	b.n	800be80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800be76:	bf00      	nop
 800be78:	e002      	b.n	800be80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800be7a:	bf00      	nop
 800be7c:	e000      	b.n	800be80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800be7e:	bf00      	nop
    }

    if(status == HAL_OK)
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10d      	bne.n	800bea2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800be86:	4b49      	ldr	r3, [pc, #292]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6819      	ldr	r1, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	3b01      	subs	r3, #1
 800be98:	011b      	lsls	r3, r3, #4
 800be9a:	430b      	orrs	r3, r1
 800be9c:	4943      	ldr	r1, [pc, #268]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d17c      	bne.n	800bfa2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bea8:	4b40      	ldr	r3, [pc, #256]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a3f      	ldr	r2, [pc, #252]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800beae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800beb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beb4:	f7fd fd24 	bl	8009900 <HAL_GetTick>
 800beb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800beba:	e009      	b.n	800bed0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bebc:	f7fd fd20 	bl	8009900 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d902      	bls.n	800bed0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	73fb      	strb	r3, [r7, #15]
        break;
 800bece:	e005      	b.n	800bedc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bed0:	4b36      	ldr	r3, [pc, #216]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1ef      	bne.n	800bebc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d15f      	bne.n	800bfa2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d110      	bne.n	800bf0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bee8:	4b30      	ldr	r3, [pc, #192]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	6892      	ldr	r2, [r2, #8]
 800bef8:	0211      	lsls	r1, r2, #8
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	68d2      	ldr	r2, [r2, #12]
 800befe:	06d2      	lsls	r2, r2, #27
 800bf00:	430a      	orrs	r2, r1
 800bf02:	492a      	ldr	r1, [pc, #168]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf04:	4313      	orrs	r3, r2
 800bf06:	610b      	str	r3, [r1, #16]
 800bf08:	e027      	b.n	800bf5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d112      	bne.n	800bf36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bf10:	4b26      	ldr	r3, [pc, #152]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bf18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	6892      	ldr	r2, [r2, #8]
 800bf20:	0211      	lsls	r1, r2, #8
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	6912      	ldr	r2, [r2, #16]
 800bf26:	0852      	lsrs	r2, r2, #1
 800bf28:	3a01      	subs	r2, #1
 800bf2a:	0552      	lsls	r2, r2, #21
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	491f      	ldr	r1, [pc, #124]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	610b      	str	r3, [r1, #16]
 800bf34:	e011      	b.n	800bf5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bf36:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bf3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	6892      	ldr	r2, [r2, #8]
 800bf46:	0211      	lsls	r1, r2, #8
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6952      	ldr	r2, [r2, #20]
 800bf4c:	0852      	lsrs	r2, r2, #1
 800bf4e:	3a01      	subs	r2, #1
 800bf50:	0652      	lsls	r2, r2, #25
 800bf52:	430a      	orrs	r2, r1
 800bf54:	4915      	ldr	r1, [pc, #84]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf56:	4313      	orrs	r3, r2
 800bf58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bf5a:	4b14      	ldr	r3, [pc, #80]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a13      	ldr	r2, [pc, #76]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf66:	f7fd fccb 	bl	8009900 <HAL_GetTick>
 800bf6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bf6c:	e009      	b.n	800bf82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bf6e:	f7fd fcc7 	bl	8009900 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d902      	bls.n	800bf82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	73fb      	strb	r3, [r7, #15]
          break;
 800bf80:	e005      	b.n	800bf8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bf82:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0ef      	beq.n	800bf6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bf94:	4b05      	ldr	r3, [pc, #20]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf96:	691a      	ldr	r2, [r3, #16]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	4903      	ldr	r1, [pc, #12]	; (800bfac <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	40021000 	.word	0x40021000

0800bfb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e095      	b.n	800c0ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d108      	bne.n	800bfdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfd2:	d009      	beq.n	800bfe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	61da      	str	r2, [r3, #28]
 800bfda:	e005      	b.n	800bfe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d106      	bne.n	800c008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7f6 f91a 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2202      	movs	r2, #2
 800c00c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c01e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c028:	d902      	bls.n	800c030 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	e002      	b.n	800c036 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c034:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c03e:	d007      	beq.n	800c050 <HAL_SPI_Init+0xa0>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c048:	d002      	beq.n	800c050 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c060:	431a      	orrs	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	f003 0302 	and.w	r3, r3, #2
 800c06a:	431a      	orrs	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	431a      	orrs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c07e:	431a      	orrs	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	69db      	ldr	r3, [r3, #28]
 800c084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c092:	ea42 0103 	orr.w	r1, r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	0c1b      	lsrs	r3, r3, #16
 800c0ac:	f003 0204 	and.w	r2, r3, #4
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	f003 0310 	and.w	r3, r3, #16
 800c0b8:	431a      	orrs	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0be:	f003 0308 	and.w	r3, r3, #8
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c0cc:	ea42 0103 	orr.w	r1, r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	430a      	orrs	r2, r1
 800c0dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b088      	sub	sp, #32
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	603b      	str	r3, [r7, #0]
 800c102:	4613      	mov	r3, r2
 800c104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c110:	2b01      	cmp	r3, #1
 800c112:	d101      	bne.n	800c118 <HAL_SPI_Transmit+0x22>
 800c114:	2302      	movs	r3, #2
 800c116:	e158      	b.n	800c3ca <HAL_SPI_Transmit+0x2d4>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c120:	f7fd fbee 	bl	8009900 <HAL_GetTick>
 800c124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c126:	88fb      	ldrh	r3, [r7, #6]
 800c128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b01      	cmp	r3, #1
 800c134:	d002      	beq.n	800c13c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c136:	2302      	movs	r3, #2
 800c138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c13a:	e13d      	b.n	800c3b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d002      	beq.n	800c148 <HAL_SPI_Transmit+0x52>
 800c142:	88fb      	ldrh	r3, [r7, #6]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d102      	bne.n	800c14e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c14c:	e134      	b.n	800c3b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2203      	movs	r2, #3
 800c152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	88fa      	ldrh	r2, [r7, #6]
 800c166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	88fa      	ldrh	r2, [r7, #6]
 800c16c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c198:	d10f      	bne.n	800c1ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c4:	2b40      	cmp	r3, #64	; 0x40
 800c1c6:	d007      	beq.n	800c1d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c1e0:	d94b      	bls.n	800c27a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <HAL_SPI_Transmit+0xfa>
 800c1ea:	8afb      	ldrh	r3, [r7, #22]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d13e      	bne.n	800c26e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f4:	881a      	ldrh	r2, [r3, #0]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	1c9a      	adds	r2, r3, #2
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	3b01      	subs	r3, #1
 800c20e:	b29a      	uxth	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c214:	e02b      	b.n	800c26e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b02      	cmp	r3, #2
 800c222:	d112      	bne.n	800c24a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	881a      	ldrh	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c234:	1c9a      	adds	r2, r3, #2
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c23e:	b29b      	uxth	r3, r3
 800c240:	3b01      	subs	r3, #1
 800c242:	b29a      	uxth	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c248:	e011      	b.n	800c26e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c24a:	f7fd fb59 	bl	8009900 <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	429a      	cmp	r2, r3
 800c258:	d803      	bhi.n	800c262 <HAL_SPI_Transmit+0x16c>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d102      	bne.n	800c268 <HAL_SPI_Transmit+0x172>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d102      	bne.n	800c26e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c26c:	e0a4      	b.n	800c3b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c272:	b29b      	uxth	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ce      	bne.n	800c216 <HAL_SPI_Transmit+0x120>
 800c278:	e07c      	b.n	800c374 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <HAL_SPI_Transmit+0x192>
 800c282:	8afb      	ldrh	r3, [r7, #22]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d170      	bne.n	800c36a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d912      	bls.n	800c2b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	881a      	ldrh	r2, [r3, #0]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	1c9a      	adds	r2, r3, #2
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	3b02      	subs	r3, #2
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2b6:	e058      	b.n	800c36a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	330c      	adds	r3, #12
 800c2c2:	7812      	ldrb	r2, [r2, #0]
 800c2c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c2de:	e044      	b.n	800c36a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f003 0302 	and.w	r3, r3, #2
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d12b      	bne.n	800c346 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d912      	bls.n	800c31e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fc:	881a      	ldrh	r2, [r3, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	1c9a      	adds	r2, r3, #2
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c312:	b29b      	uxth	r3, r3
 800c314:	3b02      	subs	r3, #2
 800c316:	b29a      	uxth	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c31c:	e025      	b.n	800c36a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	330c      	adds	r3, #12
 800c328:	7812      	ldrb	r2, [r2, #0]
 800c32a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	3b01      	subs	r3, #1
 800c33e:	b29a      	uxth	r2, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c344:	e011      	b.n	800c36a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c346:	f7fd fadb 	bl	8009900 <HAL_GetTick>
 800c34a:	4602      	mov	r2, r0
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d803      	bhi.n	800c35e <HAL_SPI_Transmit+0x268>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35c:	d102      	bne.n	800c364 <HAL_SPI_Transmit+0x26e>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d102      	bne.n	800c36a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c364:	2303      	movs	r3, #3
 800c366:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c368:	e026      	b.n	800c3b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c36e:	b29b      	uxth	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1b5      	bne.n	800c2e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 fce3 	bl	800cd44 <SPI_EndRxTxTransaction>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2220      	movs	r2, #32
 800c388:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c392:	2300      	movs	r3, #0
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	613b      	str	r3, [r7, #16]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	613b      	str	r3, [r7, #16]
 800c3a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	77fb      	strb	r3, [r7, #31]
 800c3b4:	e000      	b.n	800c3b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c3b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c3c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3720      	adds	r7, #32
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b088      	sub	sp, #32
 800c3d6:	af02      	add	r7, sp, #8
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	60b9      	str	r1, [r7, #8]
 800c3dc:	603b      	str	r3, [r7, #0]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3ee:	d112      	bne.n	800c416 <HAL_SPI_Receive+0x44>
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10e      	bne.n	800c416 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2204      	movs	r2, #4
 800c3fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c400:	88fa      	ldrh	r2, [r7, #6]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	4613      	mov	r3, r2
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	68b9      	ldr	r1, [r7, #8]
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f000 f910 	bl	800c632 <HAL_SPI_TransmitReceive>
 800c412:	4603      	mov	r3, r0
 800c414:	e109      	b.n	800c62a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d101      	bne.n	800c424 <HAL_SPI_Receive+0x52>
 800c420:	2302      	movs	r3, #2
 800c422:	e102      	b.n	800c62a <HAL_SPI_Receive+0x258>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c42c:	f7fd fa68 	bl	8009900 <HAL_GetTick>
 800c430:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d002      	beq.n	800c444 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c43e:	2302      	movs	r3, #2
 800c440:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c442:	e0e9      	b.n	800c618 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <HAL_SPI_Receive+0x7e>
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c454:	e0e0      	b.n	800c618 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2204      	movs	r2, #4
 800c45a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	88fa      	ldrh	r2, [r7, #6]
 800c46e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	88fa      	ldrh	r2, [r7, #6]
 800c476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2200      	movs	r2, #0
 800c484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c4a0:	d908      	bls.n	800c4b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c4b0:	605a      	str	r2, [r3, #4]
 800c4b2:	e007      	b.n	800c4c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4cc:	d10f      	bne.n	800c4ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c4ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f8:	2b40      	cmp	r3, #64	; 0x40
 800c4fa:	d007      	beq.n	800c50c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c50a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c514:	d867      	bhi.n	800c5e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c516:	e030      	b.n	800c57a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b01      	cmp	r3, #1
 800c524:	d117      	bne.n	800c556 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f103 020c 	add.w	r2, r3, #12
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c532:	7812      	ldrb	r2, [r2, #0]
 800c534:	b2d2      	uxtb	r2, r2
 800c536:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c548:	b29b      	uxth	r3, r3
 800c54a:	3b01      	subs	r3, #1
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c554:	e011      	b.n	800c57a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c556:	f7fd f9d3 	bl	8009900 <HAL_GetTick>
 800c55a:	4602      	mov	r2, r0
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d803      	bhi.n	800c56e <HAL_SPI_Receive+0x19c>
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56c:	d102      	bne.n	800c574 <HAL_SPI_Receive+0x1a2>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c574:	2303      	movs	r3, #3
 800c576:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c578:	e04e      	b.n	800c618 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c580:	b29b      	uxth	r3, r3
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1c8      	bne.n	800c518 <HAL_SPI_Receive+0x146>
 800c586:	e034      	b.n	800c5f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b01      	cmp	r3, #1
 800c594:	d115      	bne.n	800c5c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68da      	ldr	r2, [r3, #12]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a0:	b292      	uxth	r2, r2
 800c5a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a8:	1c9a      	adds	r2, r3, #2
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c5c0:	e011      	b.n	800c5e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5c2:	f7fd f99d 	bl	8009900 <HAL_GetTick>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d803      	bhi.n	800c5da <HAL_SPI_Receive+0x208>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d8:	d102      	bne.n	800c5e0 <HAL_SPI_Receive+0x20e>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c5e4:	e018      	b.n	800c618 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1ca      	bne.n	800c588 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 fb4c 	bl	800cc94 <SPI_EndRxTransaction>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d002      	beq.n	800c608 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2220      	movs	r2, #32
 800c606:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	75fb      	strb	r3, [r7, #23]
 800c614:	e000      	b.n	800c618 <HAL_SPI_Receive+0x246>
  }

error :
 800c616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c628:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b08a      	sub	sp, #40	; 0x28
 800c636:	af00      	add	r7, sp, #0
 800c638:	60f8      	str	r0, [r7, #12]
 800c63a:	60b9      	str	r1, [r7, #8]
 800c63c:	607a      	str	r2, [r7, #4]
 800c63e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c640:	2301      	movs	r3, #1
 800c642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c650:	2b01      	cmp	r3, #1
 800c652:	d101      	bne.n	800c658 <HAL_SPI_TransmitReceive+0x26>
 800c654:	2302      	movs	r3, #2
 800c656:	e1fb      	b.n	800ca50 <HAL_SPI_TransmitReceive+0x41e>
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c660:	f7fd f94e 	bl	8009900 <HAL_GetTick>
 800c664:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c66c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c674:	887b      	ldrh	r3, [r7, #2]
 800c676:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c678:	887b      	ldrh	r3, [r7, #2]
 800c67a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c67c:	7efb      	ldrb	r3, [r7, #27]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d00e      	beq.n	800c6a0 <HAL_SPI_TransmitReceive+0x6e>
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c688:	d106      	bne.n	800c698 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d102      	bne.n	800c698 <HAL_SPI_TransmitReceive+0x66>
 800c692:	7efb      	ldrb	r3, [r7, #27]
 800c694:	2b04      	cmp	r3, #4
 800c696:	d003      	beq.n	800c6a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c698:	2302      	movs	r3, #2
 800c69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c69e:	e1cd      	b.n	800ca3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d005      	beq.n	800c6b2 <HAL_SPI_TransmitReceive+0x80>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <HAL_SPI_TransmitReceive+0x80>
 800c6ac:	887b      	ldrh	r3, [r7, #2]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c6b8:	e1c0      	b.n	800ca3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	d003      	beq.n	800c6ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2205      	movs	r2, #5
 800c6ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	887a      	ldrh	r2, [r7, #2]
 800c6de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	887a      	ldrh	r2, [r7, #2]
 800c6e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	887a      	ldrh	r2, [r7, #2]
 800c6f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	887a      	ldrh	r2, [r7, #2]
 800c6fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c710:	d802      	bhi.n	800c718 <HAL_SPI_TransmitReceive+0xe6>
 800c712:	8a3b      	ldrh	r3, [r7, #16]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d908      	bls.n	800c72a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c726:	605a      	str	r2, [r3, #4]
 800c728:	e007      	b.n	800c73a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c738:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c744:	2b40      	cmp	r3, #64	; 0x40
 800c746:	d007      	beq.n	800c758 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c760:	d97c      	bls.n	800c85c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <HAL_SPI_TransmitReceive+0x13e>
 800c76a:	8a7b      	ldrh	r3, [r7, #18]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d169      	bne.n	800c844 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c774:	881a      	ldrh	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	1c9a      	adds	r2, r3, #2
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	3b01      	subs	r3, #1
 800c78e:	b29a      	uxth	r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c794:	e056      	b.n	800c844 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f003 0302 	and.w	r3, r3, #2
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d11b      	bne.n	800c7dc <HAL_SPI_TransmitReceive+0x1aa>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d016      	beq.n	800c7dc <HAL_SPI_TransmitReceive+0x1aa>
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d113      	bne.n	800c7dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b8:	881a      	ldrh	r2, [r3, #0]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c4:	1c9a      	adds	r2, r3, #2
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d11c      	bne.n	800c824 <HAL_SPI_TransmitReceive+0x1f2>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d016      	beq.n	800c824 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68da      	ldr	r2, [r3, #12]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c800:	b292      	uxth	r2, r2
 800c802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c808:	1c9a      	adds	r2, r3, #2
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c814:	b29b      	uxth	r3, r3
 800c816:	3b01      	subs	r3, #1
 800c818:	b29a      	uxth	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c820:	2301      	movs	r3, #1
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c824:	f7fd f86c 	bl	8009900 <HAL_GetTick>
 800c828:	4602      	mov	r2, r0
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c830:	429a      	cmp	r2, r3
 800c832:	d807      	bhi.n	800c844 <HAL_SPI_TransmitReceive+0x212>
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83a:	d003      	beq.n	800c844 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c842:	e0fb      	b.n	800ca3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c848:	b29b      	uxth	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1a3      	bne.n	800c796 <HAL_SPI_TransmitReceive+0x164>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c854:	b29b      	uxth	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d19d      	bne.n	800c796 <HAL_SPI_TransmitReceive+0x164>
 800c85a:	e0df      	b.n	800ca1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <HAL_SPI_TransmitReceive+0x23a>
 800c864:	8a7b      	ldrh	r3, [r7, #18]
 800c866:	2b01      	cmp	r3, #1
 800c868:	f040 80cb 	bne.w	800ca02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c870:	b29b      	uxth	r3, r3
 800c872:	2b01      	cmp	r3, #1
 800c874:	d912      	bls.n	800c89c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	881a      	ldrh	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c886:	1c9a      	adds	r2, r3, #2
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c890:	b29b      	uxth	r3, r3
 800c892:	3b02      	subs	r3, #2
 800c894:	b29a      	uxth	r2, r3
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c89a:	e0b2      	b.n	800ca02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	7812      	ldrb	r2, [r2, #0]
 800c8a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8c2:	e09e      	b.n	800ca02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d134      	bne.n	800c93c <HAL_SPI_TransmitReceive+0x30a>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d02f      	beq.n	800c93c <HAL_SPI_TransmitReceive+0x30a>
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d12c      	bne.n	800c93c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d912      	bls.n	800c912 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f0:	881a      	ldrh	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fc:	1c9a      	adds	r2, r3, #2
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c906:	b29b      	uxth	r3, r3
 800c908:	3b02      	subs	r3, #2
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c910:	e012      	b.n	800c938 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	330c      	adds	r3, #12
 800c91c:	7812      	ldrb	r2, [r2, #0]
 800c91e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c92e:	b29b      	uxth	r3, r3
 800c930:	3b01      	subs	r3, #1
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	2b01      	cmp	r3, #1
 800c948:	d148      	bne.n	800c9dc <HAL_SPI_TransmitReceive+0x3aa>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c950:	b29b      	uxth	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d042      	beq.n	800c9dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d923      	bls.n	800c9aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68da      	ldr	r2, [r3, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96c:	b292      	uxth	r2, r2
 800c96e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c974:	1c9a      	adds	r2, r3, #2
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c980:	b29b      	uxth	r3, r3
 800c982:	3b02      	subs	r3, #2
 800c984:	b29a      	uxth	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c992:	b29b      	uxth	r3, r3
 800c994:	2b01      	cmp	r3, #1
 800c996:	d81f      	bhi.n	800c9d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9a6:	605a      	str	r2, [r3, #4]
 800c9a8:	e016      	b.n	800c9d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f103 020c 	add.w	r2, r3, #12
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b6:	7812      	ldrb	r2, [r2, #0]
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c9dc:	f7fc ff90 	bl	8009900 <HAL_GetTick>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d803      	bhi.n	800c9f4 <HAL_SPI_TransmitReceive+0x3c2>
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f2:	d102      	bne.n	800c9fa <HAL_SPI_TransmitReceive+0x3c8>
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ca00:	e01c      	b.n	800ca3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f47f af5b 	bne.w	800c8c4 <HAL_SPI_TransmitReceive+0x292>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f47f af54 	bne.w	800c8c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f000 f98f 	bl	800cd44 <SPI_EndRxTxTransaction>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d006      	beq.n	800ca3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2220      	movs	r2, #32
 800ca36:	661a      	str	r2, [r3, #96]	; 0x60
 800ca38:	e000      	b.n	800ca3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ca3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ca4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3728      	adds	r7, #40	; 0x28
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b088      	sub	sp, #32
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4613      	mov	r3, r2
 800ca66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ca68:	f7fc ff4a 	bl	8009900 <HAL_GetTick>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	1a9b      	subs	r3, r3, r2
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	4413      	add	r3, r2
 800ca76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ca78:	f7fc ff42 	bl	8009900 <HAL_GetTick>
 800ca7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ca7e:	4b39      	ldr	r3, [pc, #228]	; (800cb64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	015b      	lsls	r3, r3, #5
 800ca84:	0d1b      	lsrs	r3, r3, #20
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	fb02 f303 	mul.w	r3, r2, r3
 800ca8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca8e:	e054      	b.n	800cb3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d050      	beq.n	800cb3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ca98:	f7fc ff32 	bl	8009900 <HAL_GetTick>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d902      	bls.n	800caae <SPI_WaitFlagStateUntilTimeout+0x56>
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d13d      	bne.n	800cb2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cabc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cac6:	d111      	bne.n	800caec <SPI_WaitFlagStateUntilTimeout+0x94>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad0:	d004      	beq.n	800cadc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cada:	d107      	bne.n	800caec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caf4:	d10f      	bne.n	800cb16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e017      	b.n	800cb5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	4013      	ands	r3, r2
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	bf0c      	ite	eq
 800cb4a:	2301      	moveq	r3, #1
 800cb4c:	2300      	movne	r3, #0
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	79fb      	ldrb	r3, [r7, #7]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d19b      	bne.n	800ca90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3720      	adds	r7, #32
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20000004 	.word	0x20000004

0800cb68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08a      	sub	sp, #40	; 0x28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cb7a:	f7fc fec1 	bl	8009900 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb82:	1a9b      	subs	r3, r3, r2
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	4413      	add	r3, r2
 800cb88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cb8a:	f7fc feb9 	bl	8009900 <HAL_GetTick>
 800cb8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	330c      	adds	r3, #12
 800cb96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cb98:	4b3d      	ldr	r3, [pc, #244]	; (800cc90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	00da      	lsls	r2, r3, #3
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	0d1b      	lsrs	r3, r3, #20
 800cba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbaa:	fb02 f303 	mul.w	r3, r2, r3
 800cbae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cbb0:	e060      	b.n	800cc74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cbb8:	d107      	bne.n	800cbca <SPI_WaitFifoStateUntilTimeout+0x62>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d104      	bne.n	800cbca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd0:	d050      	beq.n	800cc74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cbd2:	f7fc fe95 	bl	8009900 <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d902      	bls.n	800cbe8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d13d      	bne.n	800cc64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cbf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc00:	d111      	bne.n	800cc26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc0a:	d004      	beq.n	800cc16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc14:	d107      	bne.n	800cc26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc2e:	d10f      	bne.n	800cc50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e010      	b.n	800cc86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d196      	bne.n	800cbb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3728      	adds	r7, #40	; 0x28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20000004 	.word	0x20000004

0800cc94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af02      	add	r7, sp, #8
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cca8:	d111      	bne.n	800ccce <SPI_EndRxTransaction+0x3a>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccb2:	d004      	beq.n	800ccbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccbc:	d107      	bne.n	800ccce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cccc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2180      	movs	r1, #128	; 0x80
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f7ff febd 	bl	800ca58 <SPI_WaitFlagStateUntilTimeout>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d007      	beq.n	800ccf4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cce8:	f043 0220 	orr.w	r2, r3, #32
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	e023      	b.n	800cd3c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccfc:	d11d      	bne.n	800cd3a <SPI_EndRxTransaction+0xa6>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd06:	d004      	beq.n	800cd12 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd10:	d113      	bne.n	800cd3a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7ff ff22 	bl	800cb68 <SPI_WaitFifoStateUntilTimeout>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d007      	beq.n	800cd3a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd2e:	f043 0220 	orr.w	r2, r3, #32
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e000      	b.n	800cd3c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af02      	add	r7, sp, #8
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7ff ff03 	bl	800cb68 <SPI_WaitFifoStateUntilTimeout>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d007      	beq.n	800cd78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd6c:	f043 0220 	orr.w	r2, r3, #32
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e027      	b.n	800cdc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	2180      	movs	r1, #128	; 0x80
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fe68 	bl	800ca58 <SPI_WaitFlagStateUntilTimeout>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d007      	beq.n	800cd9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd92:	f043 0220 	orr.w	r2, r3, #32
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e014      	b.n	800cdc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff fedc 	bl	800cb68 <SPI_WaitFifoStateUntilTimeout>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d007      	beq.n	800cdc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdba:	f043 0220 	orr.w	r2, r3, #32
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	e000      	b.n	800cdc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d101      	bne.n	800cde2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e049      	b.n	800ce76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d106      	bne.n	800cdfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f7f5 fa96 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4610      	mov	r0, r2
 800ce10:	f000 fae6 	bl	800d3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d001      	beq.n	800ce98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e033      	b.n	800cf00 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a19      	ldr	r2, [pc, #100]	; (800cf0c <HAL_TIM_Base_Start+0x8c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d009      	beq.n	800cebe <HAL_TIM_Base_Start+0x3e>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceb2:	d004      	beq.n	800cebe <HAL_TIM_Base_Start+0x3e>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a15      	ldr	r2, [pc, #84]	; (800cf10 <HAL_TIM_Base_Start+0x90>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d115      	bne.n	800ceea <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	4b13      	ldr	r3, [pc, #76]	; (800cf14 <HAL_TIM_Base_Start+0x94>)
 800cec6:	4013      	ands	r3, r2
 800cec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b06      	cmp	r3, #6
 800cece:	d015      	beq.n	800cefc <HAL_TIM_Base_Start+0x7c>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ced6:	d011      	beq.n	800cefc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f042 0201 	orr.w	r2, r2, #1
 800cee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cee8:	e008      	b.n	800cefc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f042 0201 	orr.w	r2, r2, #1
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	e000      	b.n	800cefe <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cefc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3714      	adds	r7, #20
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	40012c00 	.word	0x40012c00
 800cf10:	40014000 	.word	0x40014000
 800cf14:	00010007 	.word	0x00010007

0800cf18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d001      	beq.n	800cf30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e03b      	b.n	800cfa8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2202      	movs	r2, #2
 800cf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68da      	ldr	r2, [r3, #12]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f042 0201 	orr.w	r2, r2, #1
 800cf46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a19      	ldr	r2, [pc, #100]	; (800cfb4 <HAL_TIM_Base_Start_IT+0x9c>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d009      	beq.n	800cf66 <HAL_TIM_Base_Start_IT+0x4e>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf5a:	d004      	beq.n	800cf66 <HAL_TIM_Base_Start_IT+0x4e>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a15      	ldr	r2, [pc, #84]	; (800cfb8 <HAL_TIM_Base_Start_IT+0xa0>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d115      	bne.n	800cf92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <HAL_TIM_Base_Start_IT+0xa4>)
 800cf6e:	4013      	ands	r3, r2
 800cf70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2b06      	cmp	r3, #6
 800cf76:	d015      	beq.n	800cfa4 <HAL_TIM_Base_Start_IT+0x8c>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf7e:	d011      	beq.n	800cfa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f042 0201 	orr.w	r2, r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf90:	e008      	b.n	800cfa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f042 0201 	orr.w	r2, r2, #1
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	e000      	b.n	800cfa6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	40012c00 	.word	0x40012c00
 800cfb8:	40014000 	.word	0x40014000
 800cfbc:	00010007 	.word	0x00010007

0800cfc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d122      	bne.n	800d01c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	f003 0302 	and.w	r3, r3, #2
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d11b      	bne.n	800d01c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f06f 0202 	mvn.w	r2, #2
 800cfec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f9ce 	bl	800d3a4 <HAL_TIM_IC_CaptureCallback>
 800d008:	e005      	b.n	800d016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f9c0 	bl	800d390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f9d1 	bl	800d3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	f003 0304 	and.w	r3, r3, #4
 800d026:	2b04      	cmp	r3, #4
 800d028:	d122      	bne.n	800d070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	f003 0304 	and.w	r3, r3, #4
 800d034:	2b04      	cmp	r3, #4
 800d036:	d11b      	bne.n	800d070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f06f 0204 	mvn.w	r2, #4
 800d040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2202      	movs	r2, #2
 800d046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d052:	2b00      	cmp	r3, #0
 800d054:	d003      	beq.n	800d05e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f9a4 	bl	800d3a4 <HAL_TIM_IC_CaptureCallback>
 800d05c:	e005      	b.n	800d06a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f996 	bl	800d390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f9a7 	bl	800d3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	f003 0308 	and.w	r3, r3, #8
 800d07a:	2b08      	cmp	r3, #8
 800d07c:	d122      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f003 0308 	and.w	r3, r3, #8
 800d088:	2b08      	cmp	r3, #8
 800d08a:	d11b      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f06f 0208 	mvn.w	r2, #8
 800d094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2204      	movs	r2, #4
 800d09a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	69db      	ldr	r3, [r3, #28]
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f97a 	bl	800d3a4 <HAL_TIM_IC_CaptureCallback>
 800d0b0:	e005      	b.n	800d0be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f96c 	bl	800d390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f97d 	bl	800d3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f003 0310 	and.w	r3, r3, #16
 800d0ce:	2b10      	cmp	r3, #16
 800d0d0:	d122      	bne.n	800d118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	f003 0310 	and.w	r3, r3, #16
 800d0dc:	2b10      	cmp	r3, #16
 800d0de:	d11b      	bne.n	800d118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f06f 0210 	mvn.w	r2, #16
 800d0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2208      	movs	r2, #8
 800d0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f950 	bl	800d3a4 <HAL_TIM_IC_CaptureCallback>
 800d104:	e005      	b.n	800d112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f942 	bl	800d390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f953 	bl	800d3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	2b01      	cmp	r3, #1
 800d124:	d10e      	bne.n	800d144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	2b01      	cmp	r3, #1
 800d132:	d107      	bne.n	800d144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f06f 0201 	mvn.w	r2, #1
 800d13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7f4 fa90 	bl	8001664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d14e:	2b80      	cmp	r3, #128	; 0x80
 800d150:	d10e      	bne.n	800d170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d15c:	2b80      	cmp	r3, #128	; 0x80
 800d15e:	d107      	bne.n	800d170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 faa6 	bl	800d6bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d17e:	d10e      	bne.n	800d19e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d18a:	2b80      	cmp	r3, #128	; 0x80
 800d18c:	d107      	bne.n	800d19e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fa99 	bl	800d6d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1a8:	2b40      	cmp	r3, #64	; 0x40
 800d1aa:	d10e      	bne.n	800d1ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b6:	2b40      	cmp	r3, #64	; 0x40
 800d1b8:	d107      	bne.n	800d1ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d1c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f901 	bl	800d3cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	f003 0320 	and.w	r3, r3, #32
 800d1d4:	2b20      	cmp	r3, #32
 800d1d6:	d10e      	bne.n	800d1f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	f003 0320 	and.w	r3, r3, #32
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	d107      	bne.n	800d1f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f06f 0220 	mvn.w	r2, #32
 800d1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fa59 	bl	800d6a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1f6:	bf00      	nop
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d212:	2b01      	cmp	r3, #1
 800d214:	d101      	bne.n	800d21a <HAL_TIM_ConfigClockSource+0x1c>
 800d216:	2302      	movs	r3, #2
 800d218:	e0b6      	b.n	800d388 <HAL_TIM_ConfigClockSource+0x18a>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2202      	movs	r2, #2
 800d226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d23c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d244:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d256:	d03e      	beq.n	800d2d6 <HAL_TIM_ConfigClockSource+0xd8>
 800d258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d25c:	f200 8087 	bhi.w	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d264:	f000 8086 	beq.w	800d374 <HAL_TIM_ConfigClockSource+0x176>
 800d268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d26c:	d87f      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d26e:	2b70      	cmp	r3, #112	; 0x70
 800d270:	d01a      	beq.n	800d2a8 <HAL_TIM_ConfigClockSource+0xaa>
 800d272:	2b70      	cmp	r3, #112	; 0x70
 800d274:	d87b      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d276:	2b60      	cmp	r3, #96	; 0x60
 800d278:	d050      	beq.n	800d31c <HAL_TIM_ConfigClockSource+0x11e>
 800d27a:	2b60      	cmp	r3, #96	; 0x60
 800d27c:	d877      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d27e:	2b50      	cmp	r3, #80	; 0x50
 800d280:	d03c      	beq.n	800d2fc <HAL_TIM_ConfigClockSource+0xfe>
 800d282:	2b50      	cmp	r3, #80	; 0x50
 800d284:	d873      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d286:	2b40      	cmp	r3, #64	; 0x40
 800d288:	d058      	beq.n	800d33c <HAL_TIM_ConfigClockSource+0x13e>
 800d28a:	2b40      	cmp	r3, #64	; 0x40
 800d28c:	d86f      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d28e:	2b30      	cmp	r3, #48	; 0x30
 800d290:	d064      	beq.n	800d35c <HAL_TIM_ConfigClockSource+0x15e>
 800d292:	2b30      	cmp	r3, #48	; 0x30
 800d294:	d86b      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d296:	2b20      	cmp	r3, #32
 800d298:	d060      	beq.n	800d35c <HAL_TIM_ConfigClockSource+0x15e>
 800d29a:	2b20      	cmp	r3, #32
 800d29c:	d867      	bhi.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d05c      	beq.n	800d35c <HAL_TIM_ConfigClockSource+0x15e>
 800d2a2:	2b10      	cmp	r3, #16
 800d2a4:	d05a      	beq.n	800d35c <HAL_TIM_ConfigClockSource+0x15e>
 800d2a6:	e062      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6818      	ldr	r0, [r3, #0]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	6899      	ldr	r1, [r3, #8]
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	f000 f970 	bl	800d59c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	609a      	str	r2, [r3, #8]
      break;
 800d2d4:	e04f      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6818      	ldr	r0, [r3, #0]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	6899      	ldr	r1, [r3, #8]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	685a      	ldr	r2, [r3, #4]
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	f000 f959 	bl	800d59c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2f8:	609a      	str	r2, [r3, #8]
      break;
 800d2fa:	e03c      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6818      	ldr	r0, [r3, #0]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	6859      	ldr	r1, [r3, #4]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	461a      	mov	r2, r3
 800d30a:	f000 f8cd 	bl	800d4a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2150      	movs	r1, #80	; 0x50
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f926 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d31a:	e02c      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6818      	ldr	r0, [r3, #0]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	6859      	ldr	r1, [r3, #4]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	461a      	mov	r2, r3
 800d32a:	f000 f8ec 	bl	800d506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2160      	movs	r1, #96	; 0x60
 800d334:	4618      	mov	r0, r3
 800d336:	f000 f916 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d33a:	e01c      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	6859      	ldr	r1, [r3, #4]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	461a      	mov	r2, r3
 800d34a:	f000 f8ad 	bl	800d4a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2140      	movs	r1, #64	; 0x40
 800d354:	4618      	mov	r0, r3
 800d356:	f000 f906 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d35a:	e00c      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4619      	mov	r1, r3
 800d366:	4610      	mov	r0, r2
 800d368:	f000 f8fd 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d36c:	e003      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	73fb      	strb	r3, [r7, #15]
      break;
 800d372:	e000      	b.n	800d376 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d374:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d386:	7bfb      	ldrb	r3, [r7, #15]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a2a      	ldr	r2, [pc, #168]	; (800d49c <TIM_Base_SetConfig+0xbc>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d003      	beq.n	800d400 <TIM_Base_SetConfig+0x20>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3fe:	d108      	bne.n	800d412 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a21      	ldr	r2, [pc, #132]	; (800d49c <TIM_Base_SetConfig+0xbc>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d00b      	beq.n	800d432 <TIM_Base_SetConfig+0x52>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d420:	d007      	beq.n	800d432 <TIM_Base_SetConfig+0x52>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a1e      	ldr	r2, [pc, #120]	; (800d4a0 <TIM_Base_SetConfig+0xc0>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d003      	beq.n	800d432 <TIM_Base_SetConfig+0x52>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a1d      	ldr	r2, [pc, #116]	; (800d4a4 <TIM_Base_SetConfig+0xc4>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d108      	bne.n	800d444 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	4313      	orrs	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	695b      	ldr	r3, [r3, #20]
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	689a      	ldr	r2, [r3, #8]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a0c      	ldr	r2, [pc, #48]	; (800d49c <TIM_Base_SetConfig+0xbc>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d007      	beq.n	800d480 <TIM_Base_SetConfig+0xa0>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a0b      	ldr	r2, [pc, #44]	; (800d4a0 <TIM_Base_SetConfig+0xc0>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d003      	beq.n	800d480 <TIM_Base_SetConfig+0xa0>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a0a      	ldr	r2, [pc, #40]	; (800d4a4 <TIM_Base_SetConfig+0xc4>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d103      	bne.n	800d488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	691a      	ldr	r2, [r3, #16]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	615a      	str	r2, [r3, #20]
}
 800d48e:	bf00      	nop
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	40012c00 	.word	0x40012c00
 800d4a0:	40014000 	.word	0x40014000
 800d4a4:	40014400 	.word	0x40014400

0800d4a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	f023 0201 	bic.w	r2, r3, #1
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	011b      	lsls	r3, r3, #4
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	f023 030a 	bic.w	r3, r3, #10
 800d4e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	621a      	str	r2, [r3, #32]
}
 800d4fa:	bf00      	nop
 800d4fc:	371c      	adds	r7, #28
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d506:	b480      	push	{r7}
 800d508:	b087      	sub	sp, #28
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	60f8      	str	r0, [r7, #12]
 800d50e:	60b9      	str	r1, [r7, #8]
 800d510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	f023 0210 	bic.w	r2, r3, #16
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6a1b      	ldr	r3, [r3, #32]
 800d528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	031b      	lsls	r3, r3, #12
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	4313      	orrs	r3, r2
 800d53a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	011b      	lsls	r3, r3, #4
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	621a      	str	r2, [r3, #32]
}
 800d55a:	bf00      	nop
 800d55c:	371c      	adds	r7, #28
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d566:	b480      	push	{r7}
 800d568:	b085      	sub	sp, #20
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	4313      	orrs	r3, r2
 800d584:	f043 0307 	orr.w	r3, r3, #7
 800d588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	609a      	str	r2, [r3, #8]
}
 800d590:	bf00      	nop
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b087      	sub	sp, #28
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
 800d5a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	021a      	lsls	r2, r3, #8
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	697a      	ldr	r2, [r7, #20]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	609a      	str	r2, [r3, #8]
}
 800d5d0:	bf00      	nop
 800d5d2:	371c      	adds	r7, #28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d101      	bne.n	800d5f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	e04f      	b.n	800d694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a21      	ldr	r2, [pc, #132]	; (800d6a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d108      	bne.n	800d630 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d624:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	4313      	orrs	r3, r2
 800d640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a14      	ldr	r2, [pc, #80]	; (800d6a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d009      	beq.n	800d668 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d65c:	d004      	beq.n	800d668 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a10      	ldr	r2, [pc, #64]	; (800d6a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d10c      	bne.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d66e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	4313      	orrs	r3, r2
 800d678:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68ba      	ldr	r2, [r7, #8]
 800d680:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	40012c00 	.word	0x40012c00
 800d6a4:	40014000 	.word	0x40014000

0800d6a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e040      	b.n	800d778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7f4 fca2 	bl	8002050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2224      	movs	r2, #36	; 0x24
 800d710:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f022 0201 	bic.w	r2, r2, #1
 800d720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 fbe8 	bl	800def8 <UART_SetConfig>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d101      	bne.n	800d732 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e022      	b.n	800d778 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fe36 	bl	800e3ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d74e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	689a      	ldr	r2, [r3, #8]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d75e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f042 0201 	orr.w	r2, r2, #1
 800d76e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 febd 	bl	800e4f0 <UART_CheckIdleState>
 800d776:	4603      	mov	r3, r0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d780:	b480      	push	{r7}
 800d782:	b08b      	sub	sp, #44	; 0x2c
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	4613      	mov	r3, r2
 800d78c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d792:	2b20      	cmp	r3, #32
 800d794:	d156      	bne.n	800d844 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <HAL_UART_Transmit_IT+0x22>
 800d79c:	88fb      	ldrh	r3, [r7, #6]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d101      	bne.n	800d7a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e04f      	b.n	800d846 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d101      	bne.n	800d7b4 <HAL_UART_Transmit_IT+0x34>
 800d7b0:	2302      	movs	r3, #2
 800d7b2:	e048      	b.n	800d846 <HAL_UART_Transmit_IT+0xc6>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	88fa      	ldrh	r2, [r7, #6]
 800d7c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	88fa      	ldrh	r2, [r7, #6]
 800d7ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2221      	movs	r2, #33	; 0x21
 800d7e4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ee:	d107      	bne.n	800d800 <HAL_UART_Transmit_IT+0x80>
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d103      	bne.n	800d800 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	4a16      	ldr	r2, [pc, #88]	; (800d854 <HAL_UART_Transmit_IT+0xd4>)
 800d7fc:	669a      	str	r2, [r3, #104]	; 0x68
 800d7fe:	e002      	b.n	800d806 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a15      	ldr	r2, [pc, #84]	; (800d858 <HAL_UART_Transmit_IT+0xd8>)
 800d804:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	e853 3f00 	ldrex	r3, [r3]
 800d81a:	613b      	str	r3, [r7, #16]
   return(result);
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d822:	627b      	str	r3, [r7, #36]	; 0x24
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	461a      	mov	r2, r3
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	623b      	str	r3, [r7, #32]
 800d82e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d830:	69f9      	ldr	r1, [r7, #28]
 800d832:	6a3a      	ldr	r2, [r7, #32]
 800d834:	e841 2300 	strex	r3, r2, [r1]
 800d838:	61bb      	str	r3, [r7, #24]
   return(result);
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1e6      	bne.n	800d80e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	e000      	b.n	800d846 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800d844:	2302      	movs	r3, #2
  }
}
 800d846:	4618      	mov	r0, r3
 800d848:	372c      	adds	r7, #44	; 0x2c
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	0800ea4b 	.word	0x0800ea4b
 800d858:	0800e993 	.word	0x0800e993

0800d85c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08a      	sub	sp, #40	; 0x28
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	4613      	mov	r3, r2
 800d868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d86e:	2b20      	cmp	r3, #32
 800d870:	d142      	bne.n	800d8f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <HAL_UART_Receive_IT+0x22>
 800d878:	88fb      	ldrh	r3, [r7, #6]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e03b      	b.n	800d8fa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d101      	bne.n	800d890 <HAL_UART_Receive_IT+0x34>
 800d88c:	2302      	movs	r3, #2
 800d88e:	e034      	b.n	800d8fa <HAL_UART_Receive_IT+0x9e>
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a18      	ldr	r2, [pc, #96]	; (800d904 <HAL_UART_Receive_IT+0xa8>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d01f      	beq.n	800d8e8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d018      	beq.n	800d8e8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	623b      	str	r3, [r7, #32]
 800d8d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d8:	69f9      	ldr	r1, [r7, #28]
 800d8da:	6a3a      	ldr	r2, [r7, #32]
 800d8dc:	e841 2300 	strex	r3, r2, [r1]
 800d8e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e6      	bne.n	800d8b6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	68b9      	ldr	r1, [r7, #8]
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f000 ff0c 	bl	800e70c <UART_Start_Receive_IT>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	e000      	b.n	800d8fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d8f8:	2302      	movs	r3, #2
  }
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3728      	adds	r7, #40	; 0x28
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	40008000 	.word	0x40008000

0800d908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b0ba      	sub	sp, #232	; 0xe8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	69db      	ldr	r3, [r3, #28]
 800d916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d92e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d932:	f640 030f 	movw	r3, #2063	; 0x80f
 800d936:	4013      	ands	r3, r2
 800d938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d93c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d940:	2b00      	cmp	r3, #0
 800d942:	d115      	bne.n	800d970 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d948:	f003 0320 	and.w	r3, r3, #32
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00f      	beq.n	800d970 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d954:	f003 0320 	and.w	r3, r3, #32
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d009      	beq.n	800d970 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 82a6 	beq.w	800deb2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	4798      	blx	r3
      }
      return;
 800d96e:	e2a0      	b.n	800deb2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 8117 	beq.w	800dba8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d97a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d98a:	4b85      	ldr	r3, [pc, #532]	; (800dba0 <HAL_UART_IRQHandler+0x298>)
 800d98c:	4013      	ands	r3, r2
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f000 810a 	beq.w	800dba8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d998:	f003 0301 	and.w	r3, r3, #1
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d011      	beq.n	800d9c4 <HAL_UART_IRQHandler+0xbc>
 800d9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9ba:	f043 0201 	orr.w	r2, r3, #1
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d011      	beq.n	800d9f4 <HAL_UART_IRQHandler+0xec>
 800d9d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00b      	beq.n	800d9f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9ea:	f043 0204 	orr.w	r2, r3, #4
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9f8:	f003 0304 	and.w	r3, r3, #4
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d011      	beq.n	800da24 <HAL_UART_IRQHandler+0x11c>
 800da00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da04:	f003 0301 	and.w	r3, r3, #1
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00b      	beq.n	800da24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2204      	movs	r2, #4
 800da12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da1a:	f043 0202 	orr.w	r2, r3, #2
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da28:	f003 0308 	and.w	r3, r3, #8
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d017      	beq.n	800da60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800da30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da34:	f003 0320 	and.w	r3, r3, #32
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d105      	bne.n	800da48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800da3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2208      	movs	r2, #8
 800da4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da56:	f043 0208 	orr.w	r2, r3, #8
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d012      	beq.n	800da92 <HAL_UART_IRQHandler+0x18a>
 800da6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00c      	beq.n	800da92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da88:	f043 0220 	orr.w	r2, r3, #32
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f000 820c 	beq.w	800deb6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800da9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daa2:	f003 0320 	and.w	r3, r3, #32
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00d      	beq.n	800dac6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800daaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daae:	f003 0320 	and.w	r3, r3, #32
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d007      	beq.n	800dac6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d003      	beq.n	800dac6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dacc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dada:	2b40      	cmp	r3, #64	; 0x40
 800dadc:	d005      	beq.n	800daea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d04f      	beq.n	800db8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 fed8 	bl	800e8a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafa:	2b40      	cmp	r3, #64	; 0x40
 800dafc:	d141      	bne.n	800db82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3308      	adds	r3, #8
 800db04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db0c:	e853 3f00 	ldrex	r3, [r3]
 800db10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3308      	adds	r3, #8
 800db26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db3a:	e841 2300 	strex	r3, r2, [r1]
 800db3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1d9      	bne.n	800dafe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d013      	beq.n	800db7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db56:	4a13      	ldr	r2, [pc, #76]	; (800dba4 <HAL_UART_IRQHandler+0x29c>)
 800db58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fc f84d 	bl	8009bfe <HAL_DMA_Abort_IT>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d017      	beq.n	800db9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800db74:	4610      	mov	r0, r2
 800db76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db78:	e00f      	b.n	800db9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f9a6 	bl	800decc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db80:	e00b      	b.n	800db9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f9a2 	bl	800decc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db88:	e007      	b.n	800db9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f99e 	bl	800decc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800db98:	e18d      	b.n	800deb6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db9a:	bf00      	nop
    return;
 800db9c:	e18b      	b.n	800deb6 <HAL_UART_IRQHandler+0x5ae>
 800db9e:	bf00      	nop
 800dba0:	04000120 	.word	0x04000120
 800dba4:	0800e967 	.word	0x0800e967

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	f040 8146 	bne.w	800de3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dbb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb6:	f003 0310 	and.w	r3, r3, #16
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 813f 	beq.w	800de3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbc4:	f003 0310 	and.w	r3, r3, #16
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 8138 	beq.w	800de3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2210      	movs	r2, #16
 800dbd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe0:	2b40      	cmp	r3, #64	; 0x40
 800dbe2:	f040 80b4 	bne.w	800dd4e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dbf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 815f 	beq.w	800deba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc06:	429a      	cmp	r2, r3
 800dc08:	f080 8157 	bcs.w	800deba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 0320 	and.w	r3, r3, #32
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f040 8085 	bne.w	800dd32 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc34:	e853 3f00 	ldrex	r3, [r3]
 800dc38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dc5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc62:	e841 2300 	strex	r3, r2, [r1]
 800dc66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dc6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1da      	bne.n	800dc28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3308      	adds	r3, #8
 800dc78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc7c:	e853 3f00 	ldrex	r3, [r3]
 800dc80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dc82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc84:	f023 0301 	bic.w	r3, r3, #1
 800dc88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	3308      	adds	r3, #8
 800dc92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dc9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dc9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dca2:	e841 2300 	strex	r3, r2, [r1]
 800dca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1e1      	bne.n	800dc72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	3308      	adds	r3, #8
 800dcb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcb8:	e853 3f00 	ldrex	r3, [r3]
 800dcbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dcbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3308      	adds	r3, #8
 800dcce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dcd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dcd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dcd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dcda:	e841 2300 	strex	r3, r2, [r1]
 800dcde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1e3      	bne.n	800dcae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2220      	movs	r2, #32
 800dcea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcfa:	e853 3f00 	ldrex	r3, [r3]
 800dcfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd02:	f023 0310 	bic.w	r3, r3, #16
 800dd06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd14:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd1c:	e841 2300 	strex	r3, r2, [r1]
 800dd20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1e4      	bne.n	800dcf2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fb ff28 	bl	8009b82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	4619      	mov	r1, r3
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 f8ca 	bl	800dee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd4c:	e0b5      	b.n	800deba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f000 80a7 	beq.w	800debe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800dd70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	f000 80a2 	beq.w	800debe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	e853 3f00 	ldrex	r3, [r3]
 800dd86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	461a      	mov	r2, r3
 800dd98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd9c:	647b      	str	r3, [r7, #68]	; 0x44
 800dd9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dda4:	e841 2300 	strex	r3, r2, [r1]
 800dda8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1e4      	bne.n	800dd7a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3308      	adds	r3, #8
 800ddb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	e853 3f00 	ldrex	r3, [r3]
 800ddbe:	623b      	str	r3, [r7, #32]
   return(result);
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	f023 0301 	bic.w	r3, r3, #1
 800ddc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ddd4:	633a      	str	r2, [r7, #48]	; 0x30
 800ddd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dddc:	e841 2300 	strex	r3, r2, [r1]
 800dde0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1e3      	bne.n	800ddb0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2220      	movs	r2, #32
 800ddec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	e853 3f00 	ldrex	r3, [r3]
 800de06:	60fb      	str	r3, [r7, #12]
   return(result);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f023 0310 	bic.w	r3, r3, #16
 800de0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	461a      	mov	r2, r3
 800de18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800de1c:	61fb      	str	r3, [r7, #28]
 800de1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de20:	69b9      	ldr	r1, [r7, #24]
 800de22:	69fa      	ldr	r2, [r7, #28]
 800de24:	e841 2300 	strex	r3, r2, [r1]
 800de28:	617b      	str	r3, [r7, #20]
   return(result);
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e4      	bne.n	800ddfa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de34:	4619      	mov	r1, r3
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 f852 	bl	800dee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de3c:	e03f      	b.n	800debe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00e      	beq.n	800de68 <HAL_UART_IRQHandler+0x560>
 800de4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d008      	beq.n	800de68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800de5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 ffdc 	bl	800ee1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de66:	e02d      	b.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800de68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00e      	beq.n	800de92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800de74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d008      	beq.n	800de92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de84:	2b00      	cmp	r3, #0
 800de86:	d01c      	beq.n	800dec2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	4798      	blx	r3
    }
    return;
 800de90:	e017      	b.n	800dec2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d012      	beq.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
 800de9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00c      	beq.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fe2d 	bl	800eb0a <UART_EndTransmit_IT>
    return;
 800deb0:	e008      	b.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800deb2:	bf00      	nop
 800deb4:	e006      	b.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800deb6:	bf00      	nop
 800deb8:	e004      	b.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800deba:	bf00      	nop
 800debc:	e002      	b.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800debe:	bf00      	nop
 800dec0:	e000      	b.n	800dec4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800dec2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800dec4:	37e8      	adds	r7, #232	; 0xe8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop

0800decc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	460b      	mov	r3, r1
 800deea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800def8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800defc:	b08a      	sub	sp, #40	; 0x28
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df02:	2300      	movs	r3, #0
 800df04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	689a      	ldr	r2, [r3, #8]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	431a      	orrs	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	431a      	orrs	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	69db      	ldr	r3, [r3, #28]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	4b9e      	ldr	r3, [pc, #632]	; (800e1a0 <UART_SetConfig+0x2a8>)
 800df28:	4013      	ands	r3, r2
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	6812      	ldr	r2, [r2, #0]
 800df2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df30:	430b      	orrs	r3, r1
 800df32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	68da      	ldr	r2, [r3, #12]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	430a      	orrs	r2, r1
 800df48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	699b      	ldr	r3, [r3, #24]
 800df4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a93      	ldr	r2, [pc, #588]	; (800e1a4 <UART_SetConfig+0x2ac>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d004      	beq.n	800df64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df60:	4313      	orrs	r3, r2
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df74:	430a      	orrs	r2, r1
 800df76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a8a      	ldr	r2, [pc, #552]	; (800e1a8 <UART_SetConfig+0x2b0>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d126      	bne.n	800dfd0 <UART_SetConfig+0xd8>
 800df82:	4b8a      	ldr	r3, [pc, #552]	; (800e1ac <UART_SetConfig+0x2b4>)
 800df84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df88:	f003 0303 	and.w	r3, r3, #3
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d81b      	bhi.n	800dfc8 <UART_SetConfig+0xd0>
 800df90:	a201      	add	r2, pc, #4	; (adr r2, 800df98 <UART_SetConfig+0xa0>)
 800df92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df96:	bf00      	nop
 800df98:	0800dfa9 	.word	0x0800dfa9
 800df9c:	0800dfb9 	.word	0x0800dfb9
 800dfa0:	0800dfb1 	.word	0x0800dfb1
 800dfa4:	0800dfc1 	.word	0x0800dfc1
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfae:	e0ab      	b.n	800e108 <UART_SetConfig+0x210>
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfb6:	e0a7      	b.n	800e108 <UART_SetConfig+0x210>
 800dfb8:	2304      	movs	r3, #4
 800dfba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfbe:	e0a3      	b.n	800e108 <UART_SetConfig+0x210>
 800dfc0:	2308      	movs	r3, #8
 800dfc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfc6:	e09f      	b.n	800e108 <UART_SetConfig+0x210>
 800dfc8:	2310      	movs	r3, #16
 800dfca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfce:	e09b      	b.n	800e108 <UART_SetConfig+0x210>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a76      	ldr	r2, [pc, #472]	; (800e1b0 <UART_SetConfig+0x2b8>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d138      	bne.n	800e04c <UART_SetConfig+0x154>
 800dfda:	4b74      	ldr	r3, [pc, #464]	; (800e1ac <UART_SetConfig+0x2b4>)
 800dfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfe0:	f003 030c 	and.w	r3, r3, #12
 800dfe4:	2b0c      	cmp	r3, #12
 800dfe6:	d82d      	bhi.n	800e044 <UART_SetConfig+0x14c>
 800dfe8:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <UART_SetConfig+0xf8>)
 800dfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfee:	bf00      	nop
 800dff0:	0800e025 	.word	0x0800e025
 800dff4:	0800e045 	.word	0x0800e045
 800dff8:	0800e045 	.word	0x0800e045
 800dffc:	0800e045 	.word	0x0800e045
 800e000:	0800e035 	.word	0x0800e035
 800e004:	0800e045 	.word	0x0800e045
 800e008:	0800e045 	.word	0x0800e045
 800e00c:	0800e045 	.word	0x0800e045
 800e010:	0800e02d 	.word	0x0800e02d
 800e014:	0800e045 	.word	0x0800e045
 800e018:	0800e045 	.word	0x0800e045
 800e01c:	0800e045 	.word	0x0800e045
 800e020:	0800e03d 	.word	0x0800e03d
 800e024:	2300      	movs	r3, #0
 800e026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e02a:	e06d      	b.n	800e108 <UART_SetConfig+0x210>
 800e02c:	2302      	movs	r3, #2
 800e02e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e032:	e069      	b.n	800e108 <UART_SetConfig+0x210>
 800e034:	2304      	movs	r3, #4
 800e036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e03a:	e065      	b.n	800e108 <UART_SetConfig+0x210>
 800e03c:	2308      	movs	r3, #8
 800e03e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e042:	e061      	b.n	800e108 <UART_SetConfig+0x210>
 800e044:	2310      	movs	r3, #16
 800e046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e04a:	e05d      	b.n	800e108 <UART_SetConfig+0x210>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a58      	ldr	r2, [pc, #352]	; (800e1b4 <UART_SetConfig+0x2bc>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d125      	bne.n	800e0a2 <UART_SetConfig+0x1aa>
 800e056:	4b55      	ldr	r3, [pc, #340]	; (800e1ac <UART_SetConfig+0x2b4>)
 800e058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e05c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e060:	2b30      	cmp	r3, #48	; 0x30
 800e062:	d016      	beq.n	800e092 <UART_SetConfig+0x19a>
 800e064:	2b30      	cmp	r3, #48	; 0x30
 800e066:	d818      	bhi.n	800e09a <UART_SetConfig+0x1a2>
 800e068:	2b20      	cmp	r3, #32
 800e06a:	d00a      	beq.n	800e082 <UART_SetConfig+0x18a>
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	d814      	bhi.n	800e09a <UART_SetConfig+0x1a2>
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <UART_SetConfig+0x182>
 800e074:	2b10      	cmp	r3, #16
 800e076:	d008      	beq.n	800e08a <UART_SetConfig+0x192>
 800e078:	e00f      	b.n	800e09a <UART_SetConfig+0x1a2>
 800e07a:	2300      	movs	r3, #0
 800e07c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e080:	e042      	b.n	800e108 <UART_SetConfig+0x210>
 800e082:	2302      	movs	r3, #2
 800e084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e088:	e03e      	b.n	800e108 <UART_SetConfig+0x210>
 800e08a:	2304      	movs	r3, #4
 800e08c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e090:	e03a      	b.n	800e108 <UART_SetConfig+0x210>
 800e092:	2308      	movs	r3, #8
 800e094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e098:	e036      	b.n	800e108 <UART_SetConfig+0x210>
 800e09a:	2310      	movs	r3, #16
 800e09c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0a0:	e032      	b.n	800e108 <UART_SetConfig+0x210>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a3f      	ldr	r2, [pc, #252]	; (800e1a4 <UART_SetConfig+0x2ac>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d12a      	bne.n	800e102 <UART_SetConfig+0x20a>
 800e0ac:	4b3f      	ldr	r3, [pc, #252]	; (800e1ac <UART_SetConfig+0x2b4>)
 800e0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e0b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e0ba:	d01a      	beq.n	800e0f2 <UART_SetConfig+0x1fa>
 800e0bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e0c0:	d81b      	bhi.n	800e0fa <UART_SetConfig+0x202>
 800e0c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0c6:	d00c      	beq.n	800e0e2 <UART_SetConfig+0x1ea>
 800e0c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0cc:	d815      	bhi.n	800e0fa <UART_SetConfig+0x202>
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <UART_SetConfig+0x1e2>
 800e0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0d6:	d008      	beq.n	800e0ea <UART_SetConfig+0x1f2>
 800e0d8:	e00f      	b.n	800e0fa <UART_SetConfig+0x202>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0e0:	e012      	b.n	800e108 <UART_SetConfig+0x210>
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0e8:	e00e      	b.n	800e108 <UART_SetConfig+0x210>
 800e0ea:	2304      	movs	r3, #4
 800e0ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0f0:	e00a      	b.n	800e108 <UART_SetConfig+0x210>
 800e0f2:	2308      	movs	r3, #8
 800e0f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0f8:	e006      	b.n	800e108 <UART_SetConfig+0x210>
 800e0fa:	2310      	movs	r3, #16
 800e0fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e100:	e002      	b.n	800e108 <UART_SetConfig+0x210>
 800e102:	2310      	movs	r3, #16
 800e104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a25      	ldr	r2, [pc, #148]	; (800e1a4 <UART_SetConfig+0x2ac>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	f040 808a 	bne.w	800e228 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e118:	2b08      	cmp	r3, #8
 800e11a:	d824      	bhi.n	800e166 <UART_SetConfig+0x26e>
 800e11c:	a201      	add	r2, pc, #4	; (adr r2, 800e124 <UART_SetConfig+0x22c>)
 800e11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e122:	bf00      	nop
 800e124:	0800e149 	.word	0x0800e149
 800e128:	0800e167 	.word	0x0800e167
 800e12c:	0800e151 	.word	0x0800e151
 800e130:	0800e167 	.word	0x0800e167
 800e134:	0800e157 	.word	0x0800e157
 800e138:	0800e167 	.word	0x0800e167
 800e13c:	0800e167 	.word	0x0800e167
 800e140:	0800e167 	.word	0x0800e167
 800e144:	0800e15f 	.word	0x0800e15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e148:	f7fd fb6a 	bl	800b820 <HAL_RCC_GetPCLK1Freq>
 800e14c:	61f8      	str	r0, [r7, #28]
        break;
 800e14e:	e010      	b.n	800e172 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e150:	4b19      	ldr	r3, [pc, #100]	; (800e1b8 <UART_SetConfig+0x2c0>)
 800e152:	61fb      	str	r3, [r7, #28]
        break;
 800e154:	e00d      	b.n	800e172 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e156:	f7fd facb 	bl	800b6f0 <HAL_RCC_GetSysClockFreq>
 800e15a:	61f8      	str	r0, [r7, #28]
        break;
 800e15c:	e009      	b.n	800e172 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e162:	61fb      	str	r3, [r7, #28]
        break;
 800e164:	e005      	b.n	800e172 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 8109 	beq.w	800e38c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	4613      	mov	r3, r2
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	69fa      	ldr	r2, [r7, #28]
 800e186:	429a      	cmp	r2, r3
 800e188:	d305      	bcc.n	800e196 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e190:	69fa      	ldr	r2, [r7, #28]
 800e192:	429a      	cmp	r2, r3
 800e194:	d912      	bls.n	800e1bc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800e196:	2301      	movs	r3, #1
 800e198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e19c:	e0f6      	b.n	800e38c <UART_SetConfig+0x494>
 800e19e:	bf00      	nop
 800e1a0:	efff69f3 	.word	0xefff69f3
 800e1a4:	40008000 	.word	0x40008000
 800e1a8:	40013800 	.word	0x40013800
 800e1ac:	40021000 	.word	0x40021000
 800e1b0:	40004400 	.word	0x40004400
 800e1b4:	40004800 	.word	0x40004800
 800e1b8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	461c      	mov	r4, r3
 800e1c2:	4615      	mov	r5, r2
 800e1c4:	f04f 0200 	mov.w	r2, #0
 800e1c8:	f04f 0300 	mov.w	r3, #0
 800e1cc:	022b      	lsls	r3, r5, #8
 800e1ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e1d2:	0222      	lsls	r2, r4, #8
 800e1d4:	68f9      	ldr	r1, [r7, #12]
 800e1d6:	6849      	ldr	r1, [r1, #4]
 800e1d8:	0849      	lsrs	r1, r1, #1
 800e1da:	2000      	movs	r0, #0
 800e1dc:	4688      	mov	r8, r1
 800e1de:	4681      	mov	r9, r0
 800e1e0:	eb12 0a08 	adds.w	sl, r2, r8
 800e1e4:	eb43 0b09 	adc.w	fp, r3, r9
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1f6:	4650      	mov	r0, sl
 800e1f8:	4659      	mov	r1, fp
 800e1fa:	f7f2 f841 	bl	8000280 <__aeabi_uldivmod>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4613      	mov	r3, r2
 800e204:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e20c:	d308      	bcc.n	800e220 <UART_SetConfig+0x328>
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e214:	d204      	bcs.n	800e220 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	60da      	str	r2, [r3, #12]
 800e21e:	e0b5      	b.n	800e38c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e226:	e0b1      	b.n	800e38c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	69db      	ldr	r3, [r3, #28]
 800e22c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e230:	d15d      	bne.n	800e2ee <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800e232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e236:	2b08      	cmp	r3, #8
 800e238:	d827      	bhi.n	800e28a <UART_SetConfig+0x392>
 800e23a:	a201      	add	r2, pc, #4	; (adr r2, 800e240 <UART_SetConfig+0x348>)
 800e23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e240:	0800e265 	.word	0x0800e265
 800e244:	0800e26d 	.word	0x0800e26d
 800e248:	0800e275 	.word	0x0800e275
 800e24c:	0800e28b 	.word	0x0800e28b
 800e250:	0800e27b 	.word	0x0800e27b
 800e254:	0800e28b 	.word	0x0800e28b
 800e258:	0800e28b 	.word	0x0800e28b
 800e25c:	0800e28b 	.word	0x0800e28b
 800e260:	0800e283 	.word	0x0800e283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e264:	f7fd fadc 	bl	800b820 <HAL_RCC_GetPCLK1Freq>
 800e268:	61f8      	str	r0, [r7, #28]
        break;
 800e26a:	e014      	b.n	800e296 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e26c:	f7fd faee 	bl	800b84c <HAL_RCC_GetPCLK2Freq>
 800e270:	61f8      	str	r0, [r7, #28]
        break;
 800e272:	e010      	b.n	800e296 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e274:	4b4c      	ldr	r3, [pc, #304]	; (800e3a8 <UART_SetConfig+0x4b0>)
 800e276:	61fb      	str	r3, [r7, #28]
        break;
 800e278:	e00d      	b.n	800e296 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e27a:	f7fd fa39 	bl	800b6f0 <HAL_RCC_GetSysClockFreq>
 800e27e:	61f8      	str	r0, [r7, #28]
        break;
 800e280:	e009      	b.n	800e296 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e286:	61fb      	str	r3, [r7, #28]
        break;
 800e288:	e005      	b.n	800e296 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800e28a:	2300      	movs	r3, #0
 800e28c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d077      	beq.n	800e38c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	005a      	lsls	r2, r3, #1
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	085b      	lsrs	r3, r3, #1
 800e2a6:	441a      	add	r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	2b0f      	cmp	r3, #15
 800e2b6:	d916      	bls.n	800e2e6 <UART_SetConfig+0x3ee>
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2be:	d212      	bcs.n	800e2e6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	f023 030f 	bic.w	r3, r3, #15
 800e2c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	085b      	lsrs	r3, r3, #1
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	f003 0307 	and.w	r3, r3, #7
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	8afb      	ldrh	r3, [r7, #22]
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	8afa      	ldrh	r2, [r7, #22]
 800e2e2:	60da      	str	r2, [r3, #12]
 800e2e4:	e052      	b.n	800e38c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e2ec:	e04e      	b.n	800e38c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2f2:	2b08      	cmp	r3, #8
 800e2f4:	d827      	bhi.n	800e346 <UART_SetConfig+0x44e>
 800e2f6:	a201      	add	r2, pc, #4	; (adr r2, 800e2fc <UART_SetConfig+0x404>)
 800e2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2fc:	0800e321 	.word	0x0800e321
 800e300:	0800e329 	.word	0x0800e329
 800e304:	0800e331 	.word	0x0800e331
 800e308:	0800e347 	.word	0x0800e347
 800e30c:	0800e337 	.word	0x0800e337
 800e310:	0800e347 	.word	0x0800e347
 800e314:	0800e347 	.word	0x0800e347
 800e318:	0800e347 	.word	0x0800e347
 800e31c:	0800e33f 	.word	0x0800e33f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e320:	f7fd fa7e 	bl	800b820 <HAL_RCC_GetPCLK1Freq>
 800e324:	61f8      	str	r0, [r7, #28]
        break;
 800e326:	e014      	b.n	800e352 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e328:	f7fd fa90 	bl	800b84c <HAL_RCC_GetPCLK2Freq>
 800e32c:	61f8      	str	r0, [r7, #28]
        break;
 800e32e:	e010      	b.n	800e352 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e330:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <UART_SetConfig+0x4b0>)
 800e332:	61fb      	str	r3, [r7, #28]
        break;
 800e334:	e00d      	b.n	800e352 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e336:	f7fd f9db 	bl	800b6f0 <HAL_RCC_GetSysClockFreq>
 800e33a:	61f8      	str	r0, [r7, #28]
        break;
 800e33c:	e009      	b.n	800e352 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e33e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e342:	61fb      	str	r3, [r7, #28]
        break;
 800e344:	e005      	b.n	800e352 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800e346:	2300      	movs	r3, #0
 800e348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e350:	bf00      	nop
    }

    if (pclk != 0U)
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d019      	beq.n	800e38c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	085a      	lsrs	r2, r3, #1
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	441a      	add	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	fbb2 f3f3 	udiv	r3, r2, r3
 800e36a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	2b0f      	cmp	r3, #15
 800e370:	d909      	bls.n	800e386 <UART_SetConfig+0x48e>
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e378:	d205      	bcs.n	800e386 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60da      	str	r2, [r3, #12]
 800e384:	e002      	b.n	800e38c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2200      	movs	r2, #0
 800e396:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e398:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3728      	adds	r7, #40	; 0x28
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3a6:	bf00      	nop
 800e3a8:	00f42400 	.word	0x00f42400

0800e3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00a      	beq.n	800e3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	430a      	orrs	r2, r1
 800e3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3da:	f003 0302 	and.w	r3, r3, #2
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00a      	beq.n	800e3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	430a      	orrs	r2, r1
 800e3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fc:	f003 0304 	and.w	r3, r3, #4
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00a      	beq.n	800e41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	430a      	orrs	r2, r1
 800e418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41e:	f003 0308 	and.w	r3, r3, #8
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00a      	beq.n	800e43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	430a      	orrs	r2, r1
 800e43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	f003 0310 	and.w	r3, r3, #16
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	430a      	orrs	r2, r1
 800e45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	f003 0320 	and.w	r3, r3, #32
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00a      	beq.n	800e480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	430a      	orrs	r2, r1
 800e47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d01a      	beq.n	800e4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4aa:	d10a      	bne.n	800e4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	430a      	orrs	r2, r1
 800e4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00a      	beq.n	800e4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	430a      	orrs	r2, r1
 800e4e2:	605a      	str	r2, [r3, #4]
  }
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af02      	add	r7, sp, #8
 800e4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e500:	f7fb f9fe 	bl	8009900 <HAL_GetTick>
 800e504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f003 0308 	and.w	r3, r3, #8
 800e510:	2b08      	cmp	r3, #8
 800e512:	d10e      	bne.n	800e532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f82d 	bl	800e582 <UART_WaitOnFlagUntilTimeout>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e023      	b.n	800e57a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f003 0304 	and.w	r3, r3, #4
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d10e      	bne.n	800e55e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f817 	bl	800e582 <UART_WaitOnFlagUntilTimeout>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e55a:	2303      	movs	r3, #3
 800e55c:	e00d      	b.n	800e57a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2220      	movs	r2, #32
 800e562:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2220      	movs	r2, #32
 800e568:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b09c      	sub	sp, #112	; 0x70
 800e586:	af00      	add	r7, sp, #0
 800e588:	60f8      	str	r0, [r7, #12]
 800e58a:	60b9      	str	r1, [r7, #8]
 800e58c:	603b      	str	r3, [r7, #0]
 800e58e:	4613      	mov	r3, r2
 800e590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e592:	e0a5      	b.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59a:	f000 80a1 	beq.w	800e6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e59e:	f7fb f9af 	bl	8009900 <HAL_GetTick>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d302      	bcc.n	800e5b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d13e      	bne.n	800e632 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5bc:	e853 3f00 	ldrex	r3, [r3]
 800e5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5c8:	667b      	str	r3, [r7, #100]	; 0x64
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5da:	e841 2300 	strex	r3, r2, [r1]
 800e5de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1e6      	bne.n	800e5b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3308      	adds	r3, #8
 800e5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f0:	e853 3f00 	ldrex	r3, [r3]
 800e5f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f8:	f023 0301 	bic.w	r3, r3, #1
 800e5fc:	663b      	str	r3, [r7, #96]	; 0x60
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3308      	adds	r3, #8
 800e604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e606:	64ba      	str	r2, [r7, #72]	; 0x48
 800e608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e60c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e60e:	e841 2300 	strex	r3, r2, [r1]
 800e612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e616:	2b00      	cmp	r3, #0
 800e618:	d1e5      	bne.n	800e5e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2220      	movs	r2, #32
 800e61e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2220      	movs	r2, #32
 800e624:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e62e:	2303      	movs	r3, #3
 800e630:	e067      	b.n	800e702 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f003 0304 	and.w	r3, r3, #4
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d04f      	beq.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	69db      	ldr	r3, [r3, #28]
 800e646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e64a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e64e:	d147      	bne.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e658:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	e853 3f00 	ldrex	r3, [r3]
 800e666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e66e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	461a      	mov	r2, r3
 800e676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e678:	637b      	str	r3, [r7, #52]	; 0x34
 800e67a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e680:	e841 2300 	strex	r3, r2, [r1]
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1e6      	bne.n	800e65a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3308      	adds	r3, #8
 800e692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	613b      	str	r3, [r7, #16]
   return(result);
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	f023 0301 	bic.w	r3, r3, #1
 800e6a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6ac:	623a      	str	r2, [r7, #32]
 800e6ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b0:	69f9      	ldr	r1, [r7, #28]
 800e6b2:	6a3a      	ldr	r2, [r7, #32]
 800e6b4:	e841 2300 	strex	r3, r2, [r1]
 800e6b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e5      	bne.n	800e68c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2220      	movs	r2, #32
 800e6ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e6dc:	2303      	movs	r3, #3
 800e6de:	e010      	b.n	800e702 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	69da      	ldr	r2, [r3, #28]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	bf0c      	ite	eq
 800e6f0:	2301      	moveq	r3, #1
 800e6f2:	2300      	movne	r3, #0
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	f43f af4a 	beq.w	800e594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3770      	adds	r7, #112	; 0x70
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
	...

0800e70c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b097      	sub	sp, #92	; 0x5c
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	4613      	mov	r3, r2
 800e718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	88fa      	ldrh	r2, [r7, #6]
 800e724:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	88fa      	ldrh	r2, [r7, #6]
 800e72c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e73e:	d10e      	bne.n	800e75e <UART_Start_Receive_IT+0x52>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d105      	bne.n	800e754 <UART_Start_Receive_IT+0x48>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e74e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e752:	e02d      	b.n	800e7b0 <UART_Start_Receive_IT+0xa4>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	22ff      	movs	r2, #255	; 0xff
 800e758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e75c:	e028      	b.n	800e7b0 <UART_Start_Receive_IT+0xa4>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d10d      	bne.n	800e782 <UART_Start_Receive_IT+0x76>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d104      	bne.n	800e778 <UART_Start_Receive_IT+0x6c>
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	22ff      	movs	r2, #255	; 0xff
 800e772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e776:	e01b      	b.n	800e7b0 <UART_Start_Receive_IT+0xa4>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	227f      	movs	r2, #127	; 0x7f
 800e77c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e780:	e016      	b.n	800e7b0 <UART_Start_Receive_IT+0xa4>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e78a:	d10d      	bne.n	800e7a8 <UART_Start_Receive_IT+0x9c>
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <UART_Start_Receive_IT+0x92>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	227f      	movs	r2, #127	; 0x7f
 800e798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e79c:	e008      	b.n	800e7b0 <UART_Start_Receive_IT+0xa4>
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	223f      	movs	r2, #63	; 0x3f
 800e7a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e7a6:	e003      	b.n	800e7b0 <UART_Start_Receive_IT+0xa4>
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2222      	movs	r2, #34	; 0x22
 800e7bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c8:	e853 3f00 	ldrex	r3, [r3]
 800e7cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	f043 0301 	orr.w	r3, r3, #1
 800e7d4:	657b      	str	r3, [r7, #84]	; 0x54
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	3308      	adds	r3, #8
 800e7dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7de:	64ba      	str	r2, [r7, #72]	; 0x48
 800e7e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7e6:	e841 2300 	strex	r3, r2, [r1]
 800e7ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1e5      	bne.n	800e7be <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7fa:	d107      	bne.n	800e80c <UART_Start_Receive_IT+0x100>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d103      	bne.n	800e80c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4a24      	ldr	r2, [pc, #144]	; (800e898 <UART_Start_Receive_IT+0x18c>)
 800e808:	665a      	str	r2, [r3, #100]	; 0x64
 800e80a:	e002      	b.n	800e812 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4a23      	ldr	r2, [pc, #140]	; (800e89c <UART_Start_Receive_IT+0x190>)
 800e810:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2200      	movs	r2, #0
 800e816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	691b      	ldr	r3, [r3, #16]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d019      	beq.n	800e856 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	e853 3f00 	ldrex	r3, [r3]
 800e82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e836:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	461a      	mov	r2, r3
 800e83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e840:	637b      	str	r3, [r7, #52]	; 0x34
 800e842:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e848:	e841 2300 	strex	r3, r2, [r1]
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1e6      	bne.n	800e822 <UART_Start_Receive_IT+0x116>
 800e854:	e018      	b.n	800e888 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	e853 3f00 	ldrex	r3, [r3]
 800e862:	613b      	str	r3, [r7, #16]
   return(result);
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f043 0320 	orr.w	r3, r3, #32
 800e86a:	653b      	str	r3, [r7, #80]	; 0x50
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	461a      	mov	r2, r3
 800e872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e874:	623b      	str	r3, [r7, #32]
 800e876:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e878:	69f9      	ldr	r1, [r7, #28]
 800e87a:	6a3a      	ldr	r2, [r7, #32]
 800e87c:	e841 2300 	strex	r3, r2, [r1]
 800e880:	61bb      	str	r3, [r7, #24]
   return(result);
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1e6      	bne.n	800e856 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	375c      	adds	r7, #92	; 0x5c
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	0800ecbf 	.word	0x0800ecbf
 800e89c:	0800eb5f 	.word	0x0800eb5f

0800e8a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b095      	sub	sp, #84	; 0x54
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b0:	e853 3f00 	ldrex	r3, [r3]
 800e8b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e8bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e8c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e6      	bne.n	800e8a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	e853 3f00 	ldrex	r3, [r3]
 800e8e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	f023 0301 	bic.w	r3, r3, #1
 800e8f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e902:	e841 2300 	strex	r3, r2, [r1]
 800e906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1e5      	bne.n	800e8da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e912:	2b01      	cmp	r3, #1
 800e914:	d118      	bne.n	800e948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	e853 3f00 	ldrex	r3, [r3]
 800e922:	60bb      	str	r3, [r7, #8]
   return(result);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	f023 0310 	bic.w	r3, r3, #16
 800e92a:	647b      	str	r3, [r7, #68]	; 0x44
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	461a      	mov	r2, r3
 800e932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e934:	61bb      	str	r3, [r7, #24]
 800e936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e938:	6979      	ldr	r1, [r7, #20]
 800e93a:	69ba      	ldr	r2, [r7, #24]
 800e93c:	e841 2300 	strex	r3, r2, [r1]
 800e940:	613b      	str	r3, [r7, #16]
   return(result);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1e6      	bne.n	800e916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2220      	movs	r2, #32
 800e94c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e95a:	bf00      	nop
 800e95c:	3754      	adds	r7, #84	; 0x54
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7ff faa1 	bl	800decc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e98a:	bf00      	nop
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e992:	b480      	push	{r7}
 800e994:	b08f      	sub	sp, #60	; 0x3c
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e99e:	2b21      	cmp	r3, #33	; 0x21
 800e9a0:	d14d      	bne.n	800ea3e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d132      	bne.n	800ea14 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	e853 3f00 	ldrex	r3, [r3]
 800e9ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d4:	e841 2300 	strex	r3, r2, [r1]
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1e6      	bne.n	800e9ae <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	e853 3f00 	ldrex	r3, [r3]
 800e9ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	61bb      	str	r3, [r7, #24]
 800ea00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea02:	6979      	ldr	r1, [r7, #20]
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	e841 2300 	strex	r3, r2, [r1]
 800ea0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1e6      	bne.n	800e9e0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ea12:	e014      	b.n	800ea3e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea18:	781a      	ldrb	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	b292      	uxth	r2, r2
 800ea20:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	3b01      	subs	r3, #1
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ea3e:	bf00      	nop
 800ea40:	373c      	adds	r7, #60	; 0x3c
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b091      	sub	sp, #68	; 0x44
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea56:	2b21      	cmp	r3, #33	; 0x21
 800ea58:	d151      	bne.n	800eafe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d132      	bne.n	800eacc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	e853 3f00 	ldrex	r3, [r3]
 800ea72:	623b      	str	r3, [r7, #32]
   return(result);
 800ea74:	6a3b      	ldr	r3, [r7, #32]
 800ea76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea7a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	461a      	mov	r2, r3
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	633b      	str	r3, [r7, #48]	; 0x30
 800ea86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea8c:	e841 2300 	strex	r3, r2, [r1]
 800ea90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1e6      	bne.n	800ea66 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	e853 3f00 	ldrex	r3, [r3]
 800eaa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaac:	637b      	str	r3, [r7, #52]	; 0x34
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab6:	61fb      	str	r3, [r7, #28]
 800eab8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaba:	69b9      	ldr	r1, [r7, #24]
 800eabc:	69fa      	ldr	r2, [r7, #28]
 800eabe:	e841 2300 	strex	r3, r2, [r1]
 800eac2:	617b      	str	r3, [r7, #20]
   return(result);
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e6      	bne.n	800ea98 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800eaca:	e018      	b.n	800eafe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ead0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ead2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead4:	881a      	ldrh	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eade:	b292      	uxth	r2, r2
 800eae0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eae6:	1c9a      	adds	r2, r3, #2
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800eafe:	bf00      	nop
 800eb00:	3744      	adds	r7, #68	; 0x44
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b088      	sub	sp, #32
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	e853 3f00 	ldrex	r3, [r3]
 800eb1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb26:	61fb      	str	r3, [r7, #28]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	61bb      	str	r3, [r7, #24]
 800eb32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb34:	6979      	ldr	r1, [r7, #20]
 800eb36:	69ba      	ldr	r2, [r7, #24]
 800eb38:	e841 2300 	strex	r3, r2, [r1]
 800eb3c:	613b      	str	r3, [r7, #16]
   return(result);
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1e6      	bne.n	800eb12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2220      	movs	r2, #32
 800eb48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7f9 fb6f 	bl	8008234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb56:	bf00      	nop
 800eb58:	3720      	adds	r7, #32
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b096      	sub	sp, #88	; 0x58
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb74:	2b22      	cmp	r3, #34	; 0x22
 800eb76:	f040 8094 	bne.w	800eca2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb80:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800eb88:	b2d9      	uxtb	r1, r3
 800eb8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb94:	400a      	ands	r2, r1
 800eb96:	b2d2      	uxtb	r2, r2
 800eb98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	3b01      	subs	r3, #1
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d179      	bne.n	800ecb6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	e853 3f00 	ldrex	r3, [r3]
 800ebce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebd6:	653b      	str	r3, [r7, #80]	; 0x50
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe0:	647b      	str	r3, [r7, #68]	; 0x44
 800ebe2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebe8:	e841 2300 	strex	r3, r2, [r1]
 800ebec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ebee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1e6      	bne.n	800ebc2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfe:	e853 3f00 	ldrex	r3, [r3]
 800ec02:	623b      	str	r3, [r7, #32]
   return(result);
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	f023 0301 	bic.w	r3, r3, #1
 800ec0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3308      	adds	r3, #8
 800ec12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec14:	633a      	str	r2, [r7, #48]	; 0x30
 800ec16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1c:	e841 2300 	strex	r3, r2, [r1]
 800ec20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1e5      	bne.n	800ebf4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2220      	movs	r2, #32
 800ec2c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d12e      	bne.n	800ec9a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	e853 3f00 	ldrex	r3, [r3]
 800ec4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f023 0310 	bic.w	r3, r3, #16
 800ec56:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec60:	61fb      	str	r3, [r7, #28]
 800ec62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec64:	69b9      	ldr	r1, [r7, #24]
 800ec66:	69fa      	ldr	r2, [r7, #28]
 800ec68:	e841 2300 	strex	r3, r2, [r1]
 800ec6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1e6      	bne.n	800ec42 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	69db      	ldr	r3, [r3, #28]
 800ec7a:	f003 0310 	and.w	r3, r3, #16
 800ec7e:	2b10      	cmp	r3, #16
 800ec80:	d103      	bne.n	800ec8a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2210      	movs	r2, #16
 800ec88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec90:	4619      	mov	r1, r3
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7ff f924 	bl	800dee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec98:	e00d      	b.n	800ecb6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7f2 fd38 	bl	8001710 <HAL_UART_RxCpltCallback>
}
 800eca0:	e009      	b.n	800ecb6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	8b1b      	ldrh	r3, [r3, #24]
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f042 0208 	orr.w	r2, r2, #8
 800ecb2:	b292      	uxth	r2, r2
 800ecb4:	831a      	strh	r2, [r3, #24]
}
 800ecb6:	bf00      	nop
 800ecb8:	3758      	adds	r7, #88	; 0x58
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b096      	sub	sp, #88	; 0x58
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eccc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecd4:	2b22      	cmp	r3, #34	; 0x22
 800ecd6:	f040 8094 	bne.w	800ee02 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ece0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ecea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ecee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ecf2:	4013      	ands	r3, r2
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecfe:	1c9a      	adds	r2, r3, #2
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d179      	bne.n	800ee16 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed2a:	e853 3f00 	ldrex	r3, [r3]
 800ed2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed40:	643b      	str	r3, [r7, #64]	; 0x40
 800ed42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e6      	bne.n	800ed22 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3308      	adds	r3, #8
 800ed5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed5c:	6a3b      	ldr	r3, [r7, #32]
 800ed5e:	e853 3f00 	ldrex	r3, [r3]
 800ed62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	f023 0301 	bic.w	r3, r3, #1
 800ed6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3308      	adds	r3, #8
 800ed72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7c:	e841 2300 	strex	r3, r2, [r1]
 800ed80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1e5      	bne.n	800ed54 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2220      	movs	r2, #32
 800ed8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d12e      	bne.n	800edfa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	e853 3f00 	ldrex	r3, [r3]
 800edae:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	f023 0310 	bic.w	r3, r3, #16
 800edb6:	647b      	str	r3, [r7, #68]	; 0x44
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	461a      	mov	r2, r3
 800edbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edc0:	61bb      	str	r3, [r7, #24]
 800edc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc4:	6979      	ldr	r1, [r7, #20]
 800edc6:	69ba      	ldr	r2, [r7, #24]
 800edc8:	e841 2300 	strex	r3, r2, [r1]
 800edcc:	613b      	str	r3, [r7, #16]
   return(result);
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1e6      	bne.n	800eda2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	69db      	ldr	r3, [r3, #28]
 800edda:	f003 0310 	and.w	r3, r3, #16
 800edde:	2b10      	cmp	r3, #16
 800ede0:	d103      	bne.n	800edea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2210      	movs	r2, #16
 800ede8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff f874 	bl	800dee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800edf8:	e00d      	b.n	800ee16 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7f2 fc88 	bl	8001710 <HAL_UART_RxCpltCallback>
}
 800ee00:	e009      	b.n	800ee16 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	8b1b      	ldrh	r3, [r3, #24]
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f042 0208 	orr.w	r2, r2, #8
 800ee12:	b292      	uxth	r2, r2
 800ee14:	831a      	strh	r2, [r3, #24]
}
 800ee16:	bf00      	nop
 800ee18:	3758      	adds	r7, #88	; 0x58
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ee1e:	b480      	push	{r7}
 800ee20:	b083      	sub	sp, #12
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <_ZdlPvj>:
 800ee32:	f000 b800 	b.w	800ee36 <_ZdlPv>

0800ee36 <_ZdlPv>:
 800ee36:	f000 b82b 	b.w	800ee90 <free>
	...

0800ee3c <__errno>:
 800ee3c:	4b01      	ldr	r3, [pc, #4]	; (800ee44 <__errno+0x8>)
 800ee3e:	6818      	ldr	r0, [r3, #0]
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	20000014 	.word	0x20000014

0800ee48 <__libc_init_array>:
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	4d0d      	ldr	r5, [pc, #52]	; (800ee80 <__libc_init_array+0x38>)
 800ee4c:	4c0d      	ldr	r4, [pc, #52]	; (800ee84 <__libc_init_array+0x3c>)
 800ee4e:	1b64      	subs	r4, r4, r5
 800ee50:	10a4      	asrs	r4, r4, #2
 800ee52:	2600      	movs	r6, #0
 800ee54:	42a6      	cmp	r6, r4
 800ee56:	d109      	bne.n	800ee6c <__libc_init_array+0x24>
 800ee58:	4d0b      	ldr	r5, [pc, #44]	; (800ee88 <__libc_init_array+0x40>)
 800ee5a:	4c0c      	ldr	r4, [pc, #48]	; (800ee8c <__libc_init_array+0x44>)
 800ee5c:	f000 fc96 	bl	800f78c <_init>
 800ee60:	1b64      	subs	r4, r4, r5
 800ee62:	10a4      	asrs	r4, r4, #2
 800ee64:	2600      	movs	r6, #0
 800ee66:	42a6      	cmp	r6, r4
 800ee68:	d105      	bne.n	800ee76 <__libc_init_array+0x2e>
 800ee6a:	bd70      	pop	{r4, r5, r6, pc}
 800ee6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee70:	4798      	blx	r3
 800ee72:	3601      	adds	r6, #1
 800ee74:	e7ee      	b.n	800ee54 <__libc_init_array+0xc>
 800ee76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee7a:	4798      	blx	r3
 800ee7c:	3601      	adds	r6, #1
 800ee7e:	e7f2      	b.n	800ee66 <__libc_init_array+0x1e>
 800ee80:	0800fd28 	.word	0x0800fd28
 800ee84:	0800fd28 	.word	0x0800fd28
 800ee88:	0800fd28 	.word	0x0800fd28
 800ee8c:	0800fd30 	.word	0x0800fd30

0800ee90 <free>:
 800ee90:	4b02      	ldr	r3, [pc, #8]	; (800ee9c <free+0xc>)
 800ee92:	4601      	mov	r1, r0
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	f000 b819 	b.w	800eecc <_free_r>
 800ee9a:	bf00      	nop
 800ee9c:	20000014 	.word	0x20000014

0800eea0 <memcpy>:
 800eea0:	440a      	add	r2, r1
 800eea2:	4291      	cmp	r1, r2
 800eea4:	f100 33ff 	add.w	r3, r0, #4294967295
 800eea8:	d100      	bne.n	800eeac <memcpy+0xc>
 800eeaa:	4770      	bx	lr
 800eeac:	b510      	push	{r4, lr}
 800eeae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeb6:	4291      	cmp	r1, r2
 800eeb8:	d1f9      	bne.n	800eeae <memcpy+0xe>
 800eeba:	bd10      	pop	{r4, pc}

0800eebc <memset>:
 800eebc:	4402      	add	r2, r0
 800eebe:	4603      	mov	r3, r0
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d100      	bne.n	800eec6 <memset+0xa>
 800eec4:	4770      	bx	lr
 800eec6:	f803 1b01 	strb.w	r1, [r3], #1
 800eeca:	e7f9      	b.n	800eec0 <memset+0x4>

0800eecc <_free_r>:
 800eecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eece:	2900      	cmp	r1, #0
 800eed0:	d044      	beq.n	800ef5c <_free_r+0x90>
 800eed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eed6:	9001      	str	r0, [sp, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f1a1 0404 	sub.w	r4, r1, #4
 800eede:	bfb8      	it	lt
 800eee0:	18e4      	addlt	r4, r4, r3
 800eee2:	f000 f903 	bl	800f0ec <__malloc_lock>
 800eee6:	4a1e      	ldr	r2, [pc, #120]	; (800ef60 <_free_r+0x94>)
 800eee8:	9801      	ldr	r0, [sp, #4]
 800eeea:	6813      	ldr	r3, [r2, #0]
 800eeec:	b933      	cbnz	r3, 800eefc <_free_r+0x30>
 800eeee:	6063      	str	r3, [r4, #4]
 800eef0:	6014      	str	r4, [r2, #0]
 800eef2:	b003      	add	sp, #12
 800eef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eef8:	f000 b8fe 	b.w	800f0f8 <__malloc_unlock>
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	d908      	bls.n	800ef12 <_free_r+0x46>
 800ef00:	6825      	ldr	r5, [r4, #0]
 800ef02:	1961      	adds	r1, r4, r5
 800ef04:	428b      	cmp	r3, r1
 800ef06:	bf01      	itttt	eq
 800ef08:	6819      	ldreq	r1, [r3, #0]
 800ef0a:	685b      	ldreq	r3, [r3, #4]
 800ef0c:	1949      	addeq	r1, r1, r5
 800ef0e:	6021      	streq	r1, [r4, #0]
 800ef10:	e7ed      	b.n	800eeee <_free_r+0x22>
 800ef12:	461a      	mov	r2, r3
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	b10b      	cbz	r3, 800ef1c <_free_r+0x50>
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	d9fa      	bls.n	800ef12 <_free_r+0x46>
 800ef1c:	6811      	ldr	r1, [r2, #0]
 800ef1e:	1855      	adds	r5, r2, r1
 800ef20:	42a5      	cmp	r5, r4
 800ef22:	d10b      	bne.n	800ef3c <_free_r+0x70>
 800ef24:	6824      	ldr	r4, [r4, #0]
 800ef26:	4421      	add	r1, r4
 800ef28:	1854      	adds	r4, r2, r1
 800ef2a:	42a3      	cmp	r3, r4
 800ef2c:	6011      	str	r1, [r2, #0]
 800ef2e:	d1e0      	bne.n	800eef2 <_free_r+0x26>
 800ef30:	681c      	ldr	r4, [r3, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	6053      	str	r3, [r2, #4]
 800ef36:	4421      	add	r1, r4
 800ef38:	6011      	str	r1, [r2, #0]
 800ef3a:	e7da      	b.n	800eef2 <_free_r+0x26>
 800ef3c:	d902      	bls.n	800ef44 <_free_r+0x78>
 800ef3e:	230c      	movs	r3, #12
 800ef40:	6003      	str	r3, [r0, #0]
 800ef42:	e7d6      	b.n	800eef2 <_free_r+0x26>
 800ef44:	6825      	ldr	r5, [r4, #0]
 800ef46:	1961      	adds	r1, r4, r5
 800ef48:	428b      	cmp	r3, r1
 800ef4a:	bf04      	itt	eq
 800ef4c:	6819      	ldreq	r1, [r3, #0]
 800ef4e:	685b      	ldreq	r3, [r3, #4]
 800ef50:	6063      	str	r3, [r4, #4]
 800ef52:	bf04      	itt	eq
 800ef54:	1949      	addeq	r1, r1, r5
 800ef56:	6021      	streq	r1, [r4, #0]
 800ef58:	6054      	str	r4, [r2, #4]
 800ef5a:	e7ca      	b.n	800eef2 <_free_r+0x26>
 800ef5c:	b003      	add	sp, #12
 800ef5e:	bd30      	pop	{r4, r5, pc}
 800ef60:	20000d08 	.word	0x20000d08

0800ef64 <sbrk_aligned>:
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	4e0e      	ldr	r6, [pc, #56]	; (800efa0 <sbrk_aligned+0x3c>)
 800ef68:	460c      	mov	r4, r1
 800ef6a:	6831      	ldr	r1, [r6, #0]
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	b911      	cbnz	r1, 800ef76 <sbrk_aligned+0x12>
 800ef70:	f000 f88c 	bl	800f08c <_sbrk_r>
 800ef74:	6030      	str	r0, [r6, #0]
 800ef76:	4621      	mov	r1, r4
 800ef78:	4628      	mov	r0, r5
 800ef7a:	f000 f887 	bl	800f08c <_sbrk_r>
 800ef7e:	1c43      	adds	r3, r0, #1
 800ef80:	d00a      	beq.n	800ef98 <sbrk_aligned+0x34>
 800ef82:	1cc4      	adds	r4, r0, #3
 800ef84:	f024 0403 	bic.w	r4, r4, #3
 800ef88:	42a0      	cmp	r0, r4
 800ef8a:	d007      	beq.n	800ef9c <sbrk_aligned+0x38>
 800ef8c:	1a21      	subs	r1, r4, r0
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f000 f87c 	bl	800f08c <_sbrk_r>
 800ef94:	3001      	adds	r0, #1
 800ef96:	d101      	bne.n	800ef9c <sbrk_aligned+0x38>
 800ef98:	f04f 34ff 	mov.w	r4, #4294967295
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	bd70      	pop	{r4, r5, r6, pc}
 800efa0:	20000d0c 	.word	0x20000d0c

0800efa4 <_malloc_r>:
 800efa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa8:	1ccd      	adds	r5, r1, #3
 800efaa:	f025 0503 	bic.w	r5, r5, #3
 800efae:	3508      	adds	r5, #8
 800efb0:	2d0c      	cmp	r5, #12
 800efb2:	bf38      	it	cc
 800efb4:	250c      	movcc	r5, #12
 800efb6:	2d00      	cmp	r5, #0
 800efb8:	4607      	mov	r7, r0
 800efba:	db01      	blt.n	800efc0 <_malloc_r+0x1c>
 800efbc:	42a9      	cmp	r1, r5
 800efbe:	d905      	bls.n	800efcc <_malloc_r+0x28>
 800efc0:	230c      	movs	r3, #12
 800efc2:	603b      	str	r3, [r7, #0]
 800efc4:	2600      	movs	r6, #0
 800efc6:	4630      	mov	r0, r6
 800efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efcc:	4e2e      	ldr	r6, [pc, #184]	; (800f088 <_malloc_r+0xe4>)
 800efce:	f000 f88d 	bl	800f0ec <__malloc_lock>
 800efd2:	6833      	ldr	r3, [r6, #0]
 800efd4:	461c      	mov	r4, r3
 800efd6:	bb34      	cbnz	r4, 800f026 <_malloc_r+0x82>
 800efd8:	4629      	mov	r1, r5
 800efda:	4638      	mov	r0, r7
 800efdc:	f7ff ffc2 	bl	800ef64 <sbrk_aligned>
 800efe0:	1c43      	adds	r3, r0, #1
 800efe2:	4604      	mov	r4, r0
 800efe4:	d14d      	bne.n	800f082 <_malloc_r+0xde>
 800efe6:	6834      	ldr	r4, [r6, #0]
 800efe8:	4626      	mov	r6, r4
 800efea:	2e00      	cmp	r6, #0
 800efec:	d140      	bne.n	800f070 <_malloc_r+0xcc>
 800efee:	6823      	ldr	r3, [r4, #0]
 800eff0:	4631      	mov	r1, r6
 800eff2:	4638      	mov	r0, r7
 800eff4:	eb04 0803 	add.w	r8, r4, r3
 800eff8:	f000 f848 	bl	800f08c <_sbrk_r>
 800effc:	4580      	cmp	r8, r0
 800effe:	d13a      	bne.n	800f076 <_malloc_r+0xd2>
 800f000:	6821      	ldr	r1, [r4, #0]
 800f002:	3503      	adds	r5, #3
 800f004:	1a6d      	subs	r5, r5, r1
 800f006:	f025 0503 	bic.w	r5, r5, #3
 800f00a:	3508      	adds	r5, #8
 800f00c:	2d0c      	cmp	r5, #12
 800f00e:	bf38      	it	cc
 800f010:	250c      	movcc	r5, #12
 800f012:	4629      	mov	r1, r5
 800f014:	4638      	mov	r0, r7
 800f016:	f7ff ffa5 	bl	800ef64 <sbrk_aligned>
 800f01a:	3001      	adds	r0, #1
 800f01c:	d02b      	beq.n	800f076 <_malloc_r+0xd2>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	442b      	add	r3, r5
 800f022:	6023      	str	r3, [r4, #0]
 800f024:	e00e      	b.n	800f044 <_malloc_r+0xa0>
 800f026:	6822      	ldr	r2, [r4, #0]
 800f028:	1b52      	subs	r2, r2, r5
 800f02a:	d41e      	bmi.n	800f06a <_malloc_r+0xc6>
 800f02c:	2a0b      	cmp	r2, #11
 800f02e:	d916      	bls.n	800f05e <_malloc_r+0xba>
 800f030:	1961      	adds	r1, r4, r5
 800f032:	42a3      	cmp	r3, r4
 800f034:	6025      	str	r5, [r4, #0]
 800f036:	bf18      	it	ne
 800f038:	6059      	strne	r1, [r3, #4]
 800f03a:	6863      	ldr	r3, [r4, #4]
 800f03c:	bf08      	it	eq
 800f03e:	6031      	streq	r1, [r6, #0]
 800f040:	5162      	str	r2, [r4, r5]
 800f042:	604b      	str	r3, [r1, #4]
 800f044:	4638      	mov	r0, r7
 800f046:	f104 060b 	add.w	r6, r4, #11
 800f04a:	f000 f855 	bl	800f0f8 <__malloc_unlock>
 800f04e:	f026 0607 	bic.w	r6, r6, #7
 800f052:	1d23      	adds	r3, r4, #4
 800f054:	1af2      	subs	r2, r6, r3
 800f056:	d0b6      	beq.n	800efc6 <_malloc_r+0x22>
 800f058:	1b9b      	subs	r3, r3, r6
 800f05a:	50a3      	str	r3, [r4, r2]
 800f05c:	e7b3      	b.n	800efc6 <_malloc_r+0x22>
 800f05e:	6862      	ldr	r2, [r4, #4]
 800f060:	42a3      	cmp	r3, r4
 800f062:	bf0c      	ite	eq
 800f064:	6032      	streq	r2, [r6, #0]
 800f066:	605a      	strne	r2, [r3, #4]
 800f068:	e7ec      	b.n	800f044 <_malloc_r+0xa0>
 800f06a:	4623      	mov	r3, r4
 800f06c:	6864      	ldr	r4, [r4, #4]
 800f06e:	e7b2      	b.n	800efd6 <_malloc_r+0x32>
 800f070:	4634      	mov	r4, r6
 800f072:	6876      	ldr	r6, [r6, #4]
 800f074:	e7b9      	b.n	800efea <_malloc_r+0x46>
 800f076:	230c      	movs	r3, #12
 800f078:	603b      	str	r3, [r7, #0]
 800f07a:	4638      	mov	r0, r7
 800f07c:	f000 f83c 	bl	800f0f8 <__malloc_unlock>
 800f080:	e7a1      	b.n	800efc6 <_malloc_r+0x22>
 800f082:	6025      	str	r5, [r4, #0]
 800f084:	e7de      	b.n	800f044 <_malloc_r+0xa0>
 800f086:	bf00      	nop
 800f088:	20000d08 	.word	0x20000d08

0800f08c <_sbrk_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4d06      	ldr	r5, [pc, #24]	; (800f0a8 <_sbrk_r+0x1c>)
 800f090:	2300      	movs	r3, #0
 800f092:	4604      	mov	r4, r0
 800f094:	4608      	mov	r0, r1
 800f096:	602b      	str	r3, [r5, #0]
 800f098:	f7f3 f9ee 	bl	8002478 <_sbrk>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	d102      	bne.n	800f0a6 <_sbrk_r+0x1a>
 800f0a0:	682b      	ldr	r3, [r5, #0]
 800f0a2:	b103      	cbz	r3, 800f0a6 <_sbrk_r+0x1a>
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	bd38      	pop	{r3, r4, r5, pc}
 800f0a8:	20000d10 	.word	0x20000d10

0800f0ac <siprintf>:
 800f0ac:	b40e      	push	{r1, r2, r3}
 800f0ae:	b500      	push	{lr}
 800f0b0:	b09c      	sub	sp, #112	; 0x70
 800f0b2:	ab1d      	add	r3, sp, #116	; 0x74
 800f0b4:	9002      	str	r0, [sp, #8]
 800f0b6:	9006      	str	r0, [sp, #24]
 800f0b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0bc:	4809      	ldr	r0, [pc, #36]	; (800f0e4 <siprintf+0x38>)
 800f0be:	9107      	str	r1, [sp, #28]
 800f0c0:	9104      	str	r1, [sp, #16]
 800f0c2:	4909      	ldr	r1, [pc, #36]	; (800f0e8 <siprintf+0x3c>)
 800f0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0c8:	9105      	str	r1, [sp, #20]
 800f0ca:	6800      	ldr	r0, [r0, #0]
 800f0cc:	9301      	str	r3, [sp, #4]
 800f0ce:	a902      	add	r1, sp, #8
 800f0d0:	f000 f874 	bl	800f1bc <_svfiprintf_r>
 800f0d4:	9b02      	ldr	r3, [sp, #8]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
 800f0da:	b01c      	add	sp, #112	; 0x70
 800f0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0e0:	b003      	add	sp, #12
 800f0e2:	4770      	bx	lr
 800f0e4:	20000014 	.word	0x20000014
 800f0e8:	ffff0208 	.word	0xffff0208

0800f0ec <__malloc_lock>:
 800f0ec:	4801      	ldr	r0, [pc, #4]	; (800f0f4 <__malloc_lock+0x8>)
 800f0ee:	f000 baf9 	b.w	800f6e4 <__retarget_lock_acquire_recursive>
 800f0f2:	bf00      	nop
 800f0f4:	20000d14 	.word	0x20000d14

0800f0f8 <__malloc_unlock>:
 800f0f8:	4801      	ldr	r0, [pc, #4]	; (800f100 <__malloc_unlock+0x8>)
 800f0fa:	f000 baf4 	b.w	800f6e6 <__retarget_lock_release_recursive>
 800f0fe:	bf00      	nop
 800f100:	20000d14 	.word	0x20000d14

0800f104 <__ssputs_r>:
 800f104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f108:	688e      	ldr	r6, [r1, #8]
 800f10a:	429e      	cmp	r6, r3
 800f10c:	4682      	mov	sl, r0
 800f10e:	460c      	mov	r4, r1
 800f110:	4690      	mov	r8, r2
 800f112:	461f      	mov	r7, r3
 800f114:	d838      	bhi.n	800f188 <__ssputs_r+0x84>
 800f116:	898a      	ldrh	r2, [r1, #12]
 800f118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f11c:	d032      	beq.n	800f184 <__ssputs_r+0x80>
 800f11e:	6825      	ldr	r5, [r4, #0]
 800f120:	6909      	ldr	r1, [r1, #16]
 800f122:	eba5 0901 	sub.w	r9, r5, r1
 800f126:	6965      	ldr	r5, [r4, #20]
 800f128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f130:	3301      	adds	r3, #1
 800f132:	444b      	add	r3, r9
 800f134:	106d      	asrs	r5, r5, #1
 800f136:	429d      	cmp	r5, r3
 800f138:	bf38      	it	cc
 800f13a:	461d      	movcc	r5, r3
 800f13c:	0553      	lsls	r3, r2, #21
 800f13e:	d531      	bpl.n	800f1a4 <__ssputs_r+0xa0>
 800f140:	4629      	mov	r1, r5
 800f142:	f7ff ff2f 	bl	800efa4 <_malloc_r>
 800f146:	4606      	mov	r6, r0
 800f148:	b950      	cbnz	r0, 800f160 <__ssputs_r+0x5c>
 800f14a:	230c      	movs	r3, #12
 800f14c:	f8ca 3000 	str.w	r3, [sl]
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f160:	6921      	ldr	r1, [r4, #16]
 800f162:	464a      	mov	r2, r9
 800f164:	f7ff fe9c 	bl	800eea0 <memcpy>
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f172:	81a3      	strh	r3, [r4, #12]
 800f174:	6126      	str	r6, [r4, #16]
 800f176:	6165      	str	r5, [r4, #20]
 800f178:	444e      	add	r6, r9
 800f17a:	eba5 0509 	sub.w	r5, r5, r9
 800f17e:	6026      	str	r6, [r4, #0]
 800f180:	60a5      	str	r5, [r4, #8]
 800f182:	463e      	mov	r6, r7
 800f184:	42be      	cmp	r6, r7
 800f186:	d900      	bls.n	800f18a <__ssputs_r+0x86>
 800f188:	463e      	mov	r6, r7
 800f18a:	6820      	ldr	r0, [r4, #0]
 800f18c:	4632      	mov	r2, r6
 800f18e:	4641      	mov	r1, r8
 800f190:	f000 faaa 	bl	800f6e8 <memmove>
 800f194:	68a3      	ldr	r3, [r4, #8]
 800f196:	1b9b      	subs	r3, r3, r6
 800f198:	60a3      	str	r3, [r4, #8]
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	4433      	add	r3, r6
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	e7db      	b.n	800f15c <__ssputs_r+0x58>
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	f000 fab9 	bl	800f71c <_realloc_r>
 800f1aa:	4606      	mov	r6, r0
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1e1      	bne.n	800f174 <__ssputs_r+0x70>
 800f1b0:	6921      	ldr	r1, [r4, #16]
 800f1b2:	4650      	mov	r0, sl
 800f1b4:	f7ff fe8a 	bl	800eecc <_free_r>
 800f1b8:	e7c7      	b.n	800f14a <__ssputs_r+0x46>
	...

0800f1bc <_svfiprintf_r>:
 800f1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c0:	4698      	mov	r8, r3
 800f1c2:	898b      	ldrh	r3, [r1, #12]
 800f1c4:	061b      	lsls	r3, r3, #24
 800f1c6:	b09d      	sub	sp, #116	; 0x74
 800f1c8:	4607      	mov	r7, r0
 800f1ca:	460d      	mov	r5, r1
 800f1cc:	4614      	mov	r4, r2
 800f1ce:	d50e      	bpl.n	800f1ee <_svfiprintf_r+0x32>
 800f1d0:	690b      	ldr	r3, [r1, #16]
 800f1d2:	b963      	cbnz	r3, 800f1ee <_svfiprintf_r+0x32>
 800f1d4:	2140      	movs	r1, #64	; 0x40
 800f1d6:	f7ff fee5 	bl	800efa4 <_malloc_r>
 800f1da:	6028      	str	r0, [r5, #0]
 800f1dc:	6128      	str	r0, [r5, #16]
 800f1de:	b920      	cbnz	r0, 800f1ea <_svfiprintf_r+0x2e>
 800f1e0:	230c      	movs	r3, #12
 800f1e2:	603b      	str	r3, [r7, #0]
 800f1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e8:	e0d1      	b.n	800f38e <_svfiprintf_r+0x1d2>
 800f1ea:	2340      	movs	r3, #64	; 0x40
 800f1ec:	616b      	str	r3, [r5, #20]
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f2:	2320      	movs	r3, #32
 800f1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1fc:	2330      	movs	r3, #48	; 0x30
 800f1fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f3a8 <_svfiprintf_r+0x1ec>
 800f202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f206:	f04f 0901 	mov.w	r9, #1
 800f20a:	4623      	mov	r3, r4
 800f20c:	469a      	mov	sl, r3
 800f20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f212:	b10a      	cbz	r2, 800f218 <_svfiprintf_r+0x5c>
 800f214:	2a25      	cmp	r2, #37	; 0x25
 800f216:	d1f9      	bne.n	800f20c <_svfiprintf_r+0x50>
 800f218:	ebba 0b04 	subs.w	fp, sl, r4
 800f21c:	d00b      	beq.n	800f236 <_svfiprintf_r+0x7a>
 800f21e:	465b      	mov	r3, fp
 800f220:	4622      	mov	r2, r4
 800f222:	4629      	mov	r1, r5
 800f224:	4638      	mov	r0, r7
 800f226:	f7ff ff6d 	bl	800f104 <__ssputs_r>
 800f22a:	3001      	adds	r0, #1
 800f22c:	f000 80aa 	beq.w	800f384 <_svfiprintf_r+0x1c8>
 800f230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f232:	445a      	add	r2, fp
 800f234:	9209      	str	r2, [sp, #36]	; 0x24
 800f236:	f89a 3000 	ldrb.w	r3, [sl]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f000 80a2 	beq.w	800f384 <_svfiprintf_r+0x1c8>
 800f240:	2300      	movs	r3, #0
 800f242:	f04f 32ff 	mov.w	r2, #4294967295
 800f246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f24a:	f10a 0a01 	add.w	sl, sl, #1
 800f24e:	9304      	str	r3, [sp, #16]
 800f250:	9307      	str	r3, [sp, #28]
 800f252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f256:	931a      	str	r3, [sp, #104]	; 0x68
 800f258:	4654      	mov	r4, sl
 800f25a:	2205      	movs	r2, #5
 800f25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f260:	4851      	ldr	r0, [pc, #324]	; (800f3a8 <_svfiprintf_r+0x1ec>)
 800f262:	f7f0 ffbd 	bl	80001e0 <memchr>
 800f266:	9a04      	ldr	r2, [sp, #16]
 800f268:	b9d8      	cbnz	r0, 800f2a2 <_svfiprintf_r+0xe6>
 800f26a:	06d0      	lsls	r0, r2, #27
 800f26c:	bf44      	itt	mi
 800f26e:	2320      	movmi	r3, #32
 800f270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f274:	0711      	lsls	r1, r2, #28
 800f276:	bf44      	itt	mi
 800f278:	232b      	movmi	r3, #43	; 0x2b
 800f27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f27e:	f89a 3000 	ldrb.w	r3, [sl]
 800f282:	2b2a      	cmp	r3, #42	; 0x2a
 800f284:	d015      	beq.n	800f2b2 <_svfiprintf_r+0xf6>
 800f286:	9a07      	ldr	r2, [sp, #28]
 800f288:	4654      	mov	r4, sl
 800f28a:	2000      	movs	r0, #0
 800f28c:	f04f 0c0a 	mov.w	ip, #10
 800f290:	4621      	mov	r1, r4
 800f292:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f296:	3b30      	subs	r3, #48	; 0x30
 800f298:	2b09      	cmp	r3, #9
 800f29a:	d94e      	bls.n	800f33a <_svfiprintf_r+0x17e>
 800f29c:	b1b0      	cbz	r0, 800f2cc <_svfiprintf_r+0x110>
 800f29e:	9207      	str	r2, [sp, #28]
 800f2a0:	e014      	b.n	800f2cc <_svfiprintf_r+0x110>
 800f2a2:	eba0 0308 	sub.w	r3, r0, r8
 800f2a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	9304      	str	r3, [sp, #16]
 800f2ae:	46a2      	mov	sl, r4
 800f2b0:	e7d2      	b.n	800f258 <_svfiprintf_r+0x9c>
 800f2b2:	9b03      	ldr	r3, [sp, #12]
 800f2b4:	1d19      	adds	r1, r3, #4
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	9103      	str	r1, [sp, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bfbb      	ittet	lt
 800f2be:	425b      	neglt	r3, r3
 800f2c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f2c4:	9307      	strge	r3, [sp, #28]
 800f2c6:	9307      	strlt	r3, [sp, #28]
 800f2c8:	bfb8      	it	lt
 800f2ca:	9204      	strlt	r2, [sp, #16]
 800f2cc:	7823      	ldrb	r3, [r4, #0]
 800f2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f2d0:	d10c      	bne.n	800f2ec <_svfiprintf_r+0x130>
 800f2d2:	7863      	ldrb	r3, [r4, #1]
 800f2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f2d6:	d135      	bne.n	800f344 <_svfiprintf_r+0x188>
 800f2d8:	9b03      	ldr	r3, [sp, #12]
 800f2da:	1d1a      	adds	r2, r3, #4
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	9203      	str	r2, [sp, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	bfb8      	it	lt
 800f2e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2e8:	3402      	adds	r4, #2
 800f2ea:	9305      	str	r3, [sp, #20]
 800f2ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f3b8 <_svfiprintf_r+0x1fc>
 800f2f0:	7821      	ldrb	r1, [r4, #0]
 800f2f2:	2203      	movs	r2, #3
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	f7f0 ff73 	bl	80001e0 <memchr>
 800f2fa:	b140      	cbz	r0, 800f30e <_svfiprintf_r+0x152>
 800f2fc:	2340      	movs	r3, #64	; 0x40
 800f2fe:	eba0 000a 	sub.w	r0, r0, sl
 800f302:	fa03 f000 	lsl.w	r0, r3, r0
 800f306:	9b04      	ldr	r3, [sp, #16]
 800f308:	4303      	orrs	r3, r0
 800f30a:	3401      	adds	r4, #1
 800f30c:	9304      	str	r3, [sp, #16]
 800f30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f312:	4826      	ldr	r0, [pc, #152]	; (800f3ac <_svfiprintf_r+0x1f0>)
 800f314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f318:	2206      	movs	r2, #6
 800f31a:	f7f0 ff61 	bl	80001e0 <memchr>
 800f31e:	2800      	cmp	r0, #0
 800f320:	d038      	beq.n	800f394 <_svfiprintf_r+0x1d8>
 800f322:	4b23      	ldr	r3, [pc, #140]	; (800f3b0 <_svfiprintf_r+0x1f4>)
 800f324:	bb1b      	cbnz	r3, 800f36e <_svfiprintf_r+0x1b2>
 800f326:	9b03      	ldr	r3, [sp, #12]
 800f328:	3307      	adds	r3, #7
 800f32a:	f023 0307 	bic.w	r3, r3, #7
 800f32e:	3308      	adds	r3, #8
 800f330:	9303      	str	r3, [sp, #12]
 800f332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f334:	4433      	add	r3, r6
 800f336:	9309      	str	r3, [sp, #36]	; 0x24
 800f338:	e767      	b.n	800f20a <_svfiprintf_r+0x4e>
 800f33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f33e:	460c      	mov	r4, r1
 800f340:	2001      	movs	r0, #1
 800f342:	e7a5      	b.n	800f290 <_svfiprintf_r+0xd4>
 800f344:	2300      	movs	r3, #0
 800f346:	3401      	adds	r4, #1
 800f348:	9305      	str	r3, [sp, #20]
 800f34a:	4619      	mov	r1, r3
 800f34c:	f04f 0c0a 	mov.w	ip, #10
 800f350:	4620      	mov	r0, r4
 800f352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f356:	3a30      	subs	r2, #48	; 0x30
 800f358:	2a09      	cmp	r2, #9
 800f35a:	d903      	bls.n	800f364 <_svfiprintf_r+0x1a8>
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d0c5      	beq.n	800f2ec <_svfiprintf_r+0x130>
 800f360:	9105      	str	r1, [sp, #20]
 800f362:	e7c3      	b.n	800f2ec <_svfiprintf_r+0x130>
 800f364:	fb0c 2101 	mla	r1, ip, r1, r2
 800f368:	4604      	mov	r4, r0
 800f36a:	2301      	movs	r3, #1
 800f36c:	e7f0      	b.n	800f350 <_svfiprintf_r+0x194>
 800f36e:	ab03      	add	r3, sp, #12
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	462a      	mov	r2, r5
 800f374:	4b0f      	ldr	r3, [pc, #60]	; (800f3b4 <_svfiprintf_r+0x1f8>)
 800f376:	a904      	add	r1, sp, #16
 800f378:	4638      	mov	r0, r7
 800f37a:	f3af 8000 	nop.w
 800f37e:	1c42      	adds	r2, r0, #1
 800f380:	4606      	mov	r6, r0
 800f382:	d1d6      	bne.n	800f332 <_svfiprintf_r+0x176>
 800f384:	89ab      	ldrh	r3, [r5, #12]
 800f386:	065b      	lsls	r3, r3, #25
 800f388:	f53f af2c 	bmi.w	800f1e4 <_svfiprintf_r+0x28>
 800f38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f38e:	b01d      	add	sp, #116	; 0x74
 800f390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f394:	ab03      	add	r3, sp, #12
 800f396:	9300      	str	r3, [sp, #0]
 800f398:	462a      	mov	r2, r5
 800f39a:	4b06      	ldr	r3, [pc, #24]	; (800f3b4 <_svfiprintf_r+0x1f8>)
 800f39c:	a904      	add	r1, sp, #16
 800f39e:	4638      	mov	r0, r7
 800f3a0:	f000 f87a 	bl	800f498 <_printf_i>
 800f3a4:	e7eb      	b.n	800f37e <_svfiprintf_r+0x1c2>
 800f3a6:	bf00      	nop
 800f3a8:	0800fcec 	.word	0x0800fcec
 800f3ac:	0800fcf6 	.word	0x0800fcf6
 800f3b0:	00000000 	.word	0x00000000
 800f3b4:	0800f105 	.word	0x0800f105
 800f3b8:	0800fcf2 	.word	0x0800fcf2

0800f3bc <_printf_common>:
 800f3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c0:	4616      	mov	r6, r2
 800f3c2:	4699      	mov	r9, r3
 800f3c4:	688a      	ldr	r2, [r1, #8]
 800f3c6:	690b      	ldr	r3, [r1, #16]
 800f3c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	bfb8      	it	lt
 800f3d0:	4613      	movlt	r3, r2
 800f3d2:	6033      	str	r3, [r6, #0]
 800f3d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3d8:	4607      	mov	r7, r0
 800f3da:	460c      	mov	r4, r1
 800f3dc:	b10a      	cbz	r2, 800f3e2 <_printf_common+0x26>
 800f3de:	3301      	adds	r3, #1
 800f3e0:	6033      	str	r3, [r6, #0]
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	0699      	lsls	r1, r3, #26
 800f3e6:	bf42      	ittt	mi
 800f3e8:	6833      	ldrmi	r3, [r6, #0]
 800f3ea:	3302      	addmi	r3, #2
 800f3ec:	6033      	strmi	r3, [r6, #0]
 800f3ee:	6825      	ldr	r5, [r4, #0]
 800f3f0:	f015 0506 	ands.w	r5, r5, #6
 800f3f4:	d106      	bne.n	800f404 <_printf_common+0x48>
 800f3f6:	f104 0a19 	add.w	sl, r4, #25
 800f3fa:	68e3      	ldr	r3, [r4, #12]
 800f3fc:	6832      	ldr	r2, [r6, #0]
 800f3fe:	1a9b      	subs	r3, r3, r2
 800f400:	42ab      	cmp	r3, r5
 800f402:	dc26      	bgt.n	800f452 <_printf_common+0x96>
 800f404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f408:	1e13      	subs	r3, r2, #0
 800f40a:	6822      	ldr	r2, [r4, #0]
 800f40c:	bf18      	it	ne
 800f40e:	2301      	movne	r3, #1
 800f410:	0692      	lsls	r2, r2, #26
 800f412:	d42b      	bmi.n	800f46c <_printf_common+0xb0>
 800f414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f418:	4649      	mov	r1, r9
 800f41a:	4638      	mov	r0, r7
 800f41c:	47c0      	blx	r8
 800f41e:	3001      	adds	r0, #1
 800f420:	d01e      	beq.n	800f460 <_printf_common+0xa4>
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	68e5      	ldr	r5, [r4, #12]
 800f426:	6832      	ldr	r2, [r6, #0]
 800f428:	f003 0306 	and.w	r3, r3, #6
 800f42c:	2b04      	cmp	r3, #4
 800f42e:	bf08      	it	eq
 800f430:	1aad      	subeq	r5, r5, r2
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	6922      	ldr	r2, [r4, #16]
 800f436:	bf0c      	ite	eq
 800f438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f43c:	2500      	movne	r5, #0
 800f43e:	4293      	cmp	r3, r2
 800f440:	bfc4      	itt	gt
 800f442:	1a9b      	subgt	r3, r3, r2
 800f444:	18ed      	addgt	r5, r5, r3
 800f446:	2600      	movs	r6, #0
 800f448:	341a      	adds	r4, #26
 800f44a:	42b5      	cmp	r5, r6
 800f44c:	d11a      	bne.n	800f484 <_printf_common+0xc8>
 800f44e:	2000      	movs	r0, #0
 800f450:	e008      	b.n	800f464 <_printf_common+0xa8>
 800f452:	2301      	movs	r3, #1
 800f454:	4652      	mov	r2, sl
 800f456:	4649      	mov	r1, r9
 800f458:	4638      	mov	r0, r7
 800f45a:	47c0      	blx	r8
 800f45c:	3001      	adds	r0, #1
 800f45e:	d103      	bne.n	800f468 <_printf_common+0xac>
 800f460:	f04f 30ff 	mov.w	r0, #4294967295
 800f464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f468:	3501      	adds	r5, #1
 800f46a:	e7c6      	b.n	800f3fa <_printf_common+0x3e>
 800f46c:	18e1      	adds	r1, r4, r3
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	2030      	movs	r0, #48	; 0x30
 800f472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f476:	4422      	add	r2, r4
 800f478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f47c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f480:	3302      	adds	r3, #2
 800f482:	e7c7      	b.n	800f414 <_printf_common+0x58>
 800f484:	2301      	movs	r3, #1
 800f486:	4622      	mov	r2, r4
 800f488:	4649      	mov	r1, r9
 800f48a:	4638      	mov	r0, r7
 800f48c:	47c0      	blx	r8
 800f48e:	3001      	adds	r0, #1
 800f490:	d0e6      	beq.n	800f460 <_printf_common+0xa4>
 800f492:	3601      	adds	r6, #1
 800f494:	e7d9      	b.n	800f44a <_printf_common+0x8e>
	...

0800f498 <_printf_i>:
 800f498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f49c:	7e0f      	ldrb	r7, [r1, #24]
 800f49e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4a0:	2f78      	cmp	r7, #120	; 0x78
 800f4a2:	4691      	mov	r9, r2
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	469a      	mov	sl, r3
 800f4aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4ae:	d807      	bhi.n	800f4c0 <_printf_i+0x28>
 800f4b0:	2f62      	cmp	r7, #98	; 0x62
 800f4b2:	d80a      	bhi.n	800f4ca <_printf_i+0x32>
 800f4b4:	2f00      	cmp	r7, #0
 800f4b6:	f000 80d8 	beq.w	800f66a <_printf_i+0x1d2>
 800f4ba:	2f58      	cmp	r7, #88	; 0x58
 800f4bc:	f000 80a3 	beq.w	800f606 <_printf_i+0x16e>
 800f4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4c8:	e03a      	b.n	800f540 <_printf_i+0xa8>
 800f4ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4ce:	2b15      	cmp	r3, #21
 800f4d0:	d8f6      	bhi.n	800f4c0 <_printf_i+0x28>
 800f4d2:	a101      	add	r1, pc, #4	; (adr r1, 800f4d8 <_printf_i+0x40>)
 800f4d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4d8:	0800f531 	.word	0x0800f531
 800f4dc:	0800f545 	.word	0x0800f545
 800f4e0:	0800f4c1 	.word	0x0800f4c1
 800f4e4:	0800f4c1 	.word	0x0800f4c1
 800f4e8:	0800f4c1 	.word	0x0800f4c1
 800f4ec:	0800f4c1 	.word	0x0800f4c1
 800f4f0:	0800f545 	.word	0x0800f545
 800f4f4:	0800f4c1 	.word	0x0800f4c1
 800f4f8:	0800f4c1 	.word	0x0800f4c1
 800f4fc:	0800f4c1 	.word	0x0800f4c1
 800f500:	0800f4c1 	.word	0x0800f4c1
 800f504:	0800f651 	.word	0x0800f651
 800f508:	0800f575 	.word	0x0800f575
 800f50c:	0800f633 	.word	0x0800f633
 800f510:	0800f4c1 	.word	0x0800f4c1
 800f514:	0800f4c1 	.word	0x0800f4c1
 800f518:	0800f673 	.word	0x0800f673
 800f51c:	0800f4c1 	.word	0x0800f4c1
 800f520:	0800f575 	.word	0x0800f575
 800f524:	0800f4c1 	.word	0x0800f4c1
 800f528:	0800f4c1 	.word	0x0800f4c1
 800f52c:	0800f63b 	.word	0x0800f63b
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	1d1a      	adds	r2, r3, #4
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	602a      	str	r2, [r5, #0]
 800f538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f53c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f540:	2301      	movs	r3, #1
 800f542:	e0a3      	b.n	800f68c <_printf_i+0x1f4>
 800f544:	6820      	ldr	r0, [r4, #0]
 800f546:	6829      	ldr	r1, [r5, #0]
 800f548:	0606      	lsls	r6, r0, #24
 800f54a:	f101 0304 	add.w	r3, r1, #4
 800f54e:	d50a      	bpl.n	800f566 <_printf_i+0xce>
 800f550:	680e      	ldr	r6, [r1, #0]
 800f552:	602b      	str	r3, [r5, #0]
 800f554:	2e00      	cmp	r6, #0
 800f556:	da03      	bge.n	800f560 <_printf_i+0xc8>
 800f558:	232d      	movs	r3, #45	; 0x2d
 800f55a:	4276      	negs	r6, r6
 800f55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f560:	485e      	ldr	r0, [pc, #376]	; (800f6dc <_printf_i+0x244>)
 800f562:	230a      	movs	r3, #10
 800f564:	e019      	b.n	800f59a <_printf_i+0x102>
 800f566:	680e      	ldr	r6, [r1, #0]
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f56e:	bf18      	it	ne
 800f570:	b236      	sxthne	r6, r6
 800f572:	e7ef      	b.n	800f554 <_printf_i+0xbc>
 800f574:	682b      	ldr	r3, [r5, #0]
 800f576:	6820      	ldr	r0, [r4, #0]
 800f578:	1d19      	adds	r1, r3, #4
 800f57a:	6029      	str	r1, [r5, #0]
 800f57c:	0601      	lsls	r1, r0, #24
 800f57e:	d501      	bpl.n	800f584 <_printf_i+0xec>
 800f580:	681e      	ldr	r6, [r3, #0]
 800f582:	e002      	b.n	800f58a <_printf_i+0xf2>
 800f584:	0646      	lsls	r6, r0, #25
 800f586:	d5fb      	bpl.n	800f580 <_printf_i+0xe8>
 800f588:	881e      	ldrh	r6, [r3, #0]
 800f58a:	4854      	ldr	r0, [pc, #336]	; (800f6dc <_printf_i+0x244>)
 800f58c:	2f6f      	cmp	r7, #111	; 0x6f
 800f58e:	bf0c      	ite	eq
 800f590:	2308      	moveq	r3, #8
 800f592:	230a      	movne	r3, #10
 800f594:	2100      	movs	r1, #0
 800f596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f59a:	6865      	ldr	r5, [r4, #4]
 800f59c:	60a5      	str	r5, [r4, #8]
 800f59e:	2d00      	cmp	r5, #0
 800f5a0:	bfa2      	ittt	ge
 800f5a2:	6821      	ldrge	r1, [r4, #0]
 800f5a4:	f021 0104 	bicge.w	r1, r1, #4
 800f5a8:	6021      	strge	r1, [r4, #0]
 800f5aa:	b90e      	cbnz	r6, 800f5b0 <_printf_i+0x118>
 800f5ac:	2d00      	cmp	r5, #0
 800f5ae:	d04d      	beq.n	800f64c <_printf_i+0x1b4>
 800f5b0:	4615      	mov	r5, r2
 800f5b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5b6:	fb03 6711 	mls	r7, r3, r1, r6
 800f5ba:	5dc7      	ldrb	r7, [r0, r7]
 800f5bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5c0:	4637      	mov	r7, r6
 800f5c2:	42bb      	cmp	r3, r7
 800f5c4:	460e      	mov	r6, r1
 800f5c6:	d9f4      	bls.n	800f5b2 <_printf_i+0x11a>
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	d10b      	bne.n	800f5e4 <_printf_i+0x14c>
 800f5cc:	6823      	ldr	r3, [r4, #0]
 800f5ce:	07de      	lsls	r6, r3, #31
 800f5d0:	d508      	bpl.n	800f5e4 <_printf_i+0x14c>
 800f5d2:	6923      	ldr	r3, [r4, #16]
 800f5d4:	6861      	ldr	r1, [r4, #4]
 800f5d6:	4299      	cmp	r1, r3
 800f5d8:	bfde      	ittt	le
 800f5da:	2330      	movle	r3, #48	; 0x30
 800f5dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5e4:	1b52      	subs	r2, r2, r5
 800f5e6:	6122      	str	r2, [r4, #16]
 800f5e8:	f8cd a000 	str.w	sl, [sp]
 800f5ec:	464b      	mov	r3, r9
 800f5ee:	aa03      	add	r2, sp, #12
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4640      	mov	r0, r8
 800f5f4:	f7ff fee2 	bl	800f3bc <_printf_common>
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d14c      	bne.n	800f696 <_printf_i+0x1fe>
 800f5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f600:	b004      	add	sp, #16
 800f602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f606:	4835      	ldr	r0, [pc, #212]	; (800f6dc <_printf_i+0x244>)
 800f608:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f60c:	6829      	ldr	r1, [r5, #0]
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	f851 6b04 	ldr.w	r6, [r1], #4
 800f614:	6029      	str	r1, [r5, #0]
 800f616:	061d      	lsls	r5, r3, #24
 800f618:	d514      	bpl.n	800f644 <_printf_i+0x1ac>
 800f61a:	07df      	lsls	r7, r3, #31
 800f61c:	bf44      	itt	mi
 800f61e:	f043 0320 	orrmi.w	r3, r3, #32
 800f622:	6023      	strmi	r3, [r4, #0]
 800f624:	b91e      	cbnz	r6, 800f62e <_printf_i+0x196>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	f023 0320 	bic.w	r3, r3, #32
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	2310      	movs	r3, #16
 800f630:	e7b0      	b.n	800f594 <_printf_i+0xfc>
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	f043 0320 	orr.w	r3, r3, #32
 800f638:	6023      	str	r3, [r4, #0]
 800f63a:	2378      	movs	r3, #120	; 0x78
 800f63c:	4828      	ldr	r0, [pc, #160]	; (800f6e0 <_printf_i+0x248>)
 800f63e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f642:	e7e3      	b.n	800f60c <_printf_i+0x174>
 800f644:	0659      	lsls	r1, r3, #25
 800f646:	bf48      	it	mi
 800f648:	b2b6      	uxthmi	r6, r6
 800f64a:	e7e6      	b.n	800f61a <_printf_i+0x182>
 800f64c:	4615      	mov	r5, r2
 800f64e:	e7bb      	b.n	800f5c8 <_printf_i+0x130>
 800f650:	682b      	ldr	r3, [r5, #0]
 800f652:	6826      	ldr	r6, [r4, #0]
 800f654:	6961      	ldr	r1, [r4, #20]
 800f656:	1d18      	adds	r0, r3, #4
 800f658:	6028      	str	r0, [r5, #0]
 800f65a:	0635      	lsls	r5, r6, #24
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	d501      	bpl.n	800f664 <_printf_i+0x1cc>
 800f660:	6019      	str	r1, [r3, #0]
 800f662:	e002      	b.n	800f66a <_printf_i+0x1d2>
 800f664:	0670      	lsls	r0, r6, #25
 800f666:	d5fb      	bpl.n	800f660 <_printf_i+0x1c8>
 800f668:	8019      	strh	r1, [r3, #0]
 800f66a:	2300      	movs	r3, #0
 800f66c:	6123      	str	r3, [r4, #16]
 800f66e:	4615      	mov	r5, r2
 800f670:	e7ba      	b.n	800f5e8 <_printf_i+0x150>
 800f672:	682b      	ldr	r3, [r5, #0]
 800f674:	1d1a      	adds	r2, r3, #4
 800f676:	602a      	str	r2, [r5, #0]
 800f678:	681d      	ldr	r5, [r3, #0]
 800f67a:	6862      	ldr	r2, [r4, #4]
 800f67c:	2100      	movs	r1, #0
 800f67e:	4628      	mov	r0, r5
 800f680:	f7f0 fdae 	bl	80001e0 <memchr>
 800f684:	b108      	cbz	r0, 800f68a <_printf_i+0x1f2>
 800f686:	1b40      	subs	r0, r0, r5
 800f688:	6060      	str	r0, [r4, #4]
 800f68a:	6863      	ldr	r3, [r4, #4]
 800f68c:	6123      	str	r3, [r4, #16]
 800f68e:	2300      	movs	r3, #0
 800f690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f694:	e7a8      	b.n	800f5e8 <_printf_i+0x150>
 800f696:	6923      	ldr	r3, [r4, #16]
 800f698:	462a      	mov	r2, r5
 800f69a:	4649      	mov	r1, r9
 800f69c:	4640      	mov	r0, r8
 800f69e:	47d0      	blx	sl
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	d0ab      	beq.n	800f5fc <_printf_i+0x164>
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	079b      	lsls	r3, r3, #30
 800f6a8:	d413      	bmi.n	800f6d2 <_printf_i+0x23a>
 800f6aa:	68e0      	ldr	r0, [r4, #12]
 800f6ac:	9b03      	ldr	r3, [sp, #12]
 800f6ae:	4298      	cmp	r0, r3
 800f6b0:	bfb8      	it	lt
 800f6b2:	4618      	movlt	r0, r3
 800f6b4:	e7a4      	b.n	800f600 <_printf_i+0x168>
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	4632      	mov	r2, r6
 800f6ba:	4649      	mov	r1, r9
 800f6bc:	4640      	mov	r0, r8
 800f6be:	47d0      	blx	sl
 800f6c0:	3001      	adds	r0, #1
 800f6c2:	d09b      	beq.n	800f5fc <_printf_i+0x164>
 800f6c4:	3501      	adds	r5, #1
 800f6c6:	68e3      	ldr	r3, [r4, #12]
 800f6c8:	9903      	ldr	r1, [sp, #12]
 800f6ca:	1a5b      	subs	r3, r3, r1
 800f6cc:	42ab      	cmp	r3, r5
 800f6ce:	dcf2      	bgt.n	800f6b6 <_printf_i+0x21e>
 800f6d0:	e7eb      	b.n	800f6aa <_printf_i+0x212>
 800f6d2:	2500      	movs	r5, #0
 800f6d4:	f104 0619 	add.w	r6, r4, #25
 800f6d8:	e7f5      	b.n	800f6c6 <_printf_i+0x22e>
 800f6da:	bf00      	nop
 800f6dc:	0800fcfd 	.word	0x0800fcfd
 800f6e0:	0800fd0e 	.word	0x0800fd0e

0800f6e4 <__retarget_lock_acquire_recursive>:
 800f6e4:	4770      	bx	lr

0800f6e6 <__retarget_lock_release_recursive>:
 800f6e6:	4770      	bx	lr

0800f6e8 <memmove>:
 800f6e8:	4288      	cmp	r0, r1
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	eb01 0402 	add.w	r4, r1, r2
 800f6f0:	d902      	bls.n	800f6f8 <memmove+0x10>
 800f6f2:	4284      	cmp	r4, r0
 800f6f4:	4623      	mov	r3, r4
 800f6f6:	d807      	bhi.n	800f708 <memmove+0x20>
 800f6f8:	1e43      	subs	r3, r0, #1
 800f6fa:	42a1      	cmp	r1, r4
 800f6fc:	d008      	beq.n	800f710 <memmove+0x28>
 800f6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f706:	e7f8      	b.n	800f6fa <memmove+0x12>
 800f708:	4402      	add	r2, r0
 800f70a:	4601      	mov	r1, r0
 800f70c:	428a      	cmp	r2, r1
 800f70e:	d100      	bne.n	800f712 <memmove+0x2a>
 800f710:	bd10      	pop	{r4, pc}
 800f712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f71a:	e7f7      	b.n	800f70c <memmove+0x24>

0800f71c <_realloc_r>:
 800f71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f720:	4680      	mov	r8, r0
 800f722:	4614      	mov	r4, r2
 800f724:	460e      	mov	r6, r1
 800f726:	b921      	cbnz	r1, 800f732 <_realloc_r+0x16>
 800f728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f72c:	4611      	mov	r1, r2
 800f72e:	f7ff bc39 	b.w	800efa4 <_malloc_r>
 800f732:	b92a      	cbnz	r2, 800f740 <_realloc_r+0x24>
 800f734:	f7ff fbca 	bl	800eecc <_free_r>
 800f738:	4625      	mov	r5, r4
 800f73a:	4628      	mov	r0, r5
 800f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f740:	f000 f81b 	bl	800f77a <_malloc_usable_size_r>
 800f744:	4284      	cmp	r4, r0
 800f746:	4607      	mov	r7, r0
 800f748:	d802      	bhi.n	800f750 <_realloc_r+0x34>
 800f74a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f74e:	d812      	bhi.n	800f776 <_realloc_r+0x5a>
 800f750:	4621      	mov	r1, r4
 800f752:	4640      	mov	r0, r8
 800f754:	f7ff fc26 	bl	800efa4 <_malloc_r>
 800f758:	4605      	mov	r5, r0
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d0ed      	beq.n	800f73a <_realloc_r+0x1e>
 800f75e:	42bc      	cmp	r4, r7
 800f760:	4622      	mov	r2, r4
 800f762:	4631      	mov	r1, r6
 800f764:	bf28      	it	cs
 800f766:	463a      	movcs	r2, r7
 800f768:	f7ff fb9a 	bl	800eea0 <memcpy>
 800f76c:	4631      	mov	r1, r6
 800f76e:	4640      	mov	r0, r8
 800f770:	f7ff fbac 	bl	800eecc <_free_r>
 800f774:	e7e1      	b.n	800f73a <_realloc_r+0x1e>
 800f776:	4635      	mov	r5, r6
 800f778:	e7df      	b.n	800f73a <_realloc_r+0x1e>

0800f77a <_malloc_usable_size_r>:
 800f77a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f77e:	1f18      	subs	r0, r3, #4
 800f780:	2b00      	cmp	r3, #0
 800f782:	bfbc      	itt	lt
 800f784:	580b      	ldrlt	r3, [r1, r0]
 800f786:	18c0      	addlt	r0, r0, r3
 800f788:	4770      	bx	lr
	...

0800f78c <_init>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	bf00      	nop
 800f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f792:	bc08      	pop	{r3}
 800f794:	469e      	mov	lr, r3
 800f796:	4770      	bx	lr

0800f798 <_fini>:
 800f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f79a:	bf00      	nop
 800f79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f79e:	bc08      	pop	{r3}
 800f7a0:	469e      	mov	lr, r3
 800f7a2:	4770      	bx	lr
